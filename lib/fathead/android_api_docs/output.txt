.DS_Store	A										For more information, see https://developer.android.com/reference/.DS_Store	https://developer.android.com/reference/.DS_Store
.DS_Store	A										For more information, see https://developer.android.com/reference/android/.DS_Store	https://developer.android.com/reference/android/.DS_Store
Manifest	A										<section class="prog__container"><pre><code>public final class Manifest\nextends Object</code></pre></section>	https://developer.android.com/reference/android/Manifest.html
Manifest.permission	A										<section class="prog__container"><p> Allows read/write access to the "properties" table in the checkin database, to change values that get uploaded.</p><pre><code>public static final class Manifest.permission\nextends Object</code></pre></section>	https://developer.android.com/reference/android/Manifest.permission.html
Manifest.permission_group	A										<section class="prog__container"><p> Used for runtime permissions related to user's calendar.</p><pre><code>public static final class Manifest.permission_group\nextends Object</code></pre></section>	https://developer.android.com/reference/android/Manifest.permission_group.html
android	A										<section class="prog__container">Contains resource classes used by applications included in the platform and defines applicationpermissions for system features.</section>	https://developer.android.com/reference/android/package-summary.html
R.anim	A										<section class="prog__container"><pre><code>public static final class R.anim\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.anim.html
R.animator	A										<section class="prog__container"><p> A simple fade-in animation.</p><pre><code>public static final class R.animator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.animator.html
R.array	A										<section class="prog__container"><p> Email address types from android.provider.Contacts.</p><pre><code>public static final class R.array\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.array.html
R.attr	A										<section class="prog__container"><p> Default AbsListView style.</p><pre><code>public static final class R.attr\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.attr.html
R.bool	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public static final class R.bool\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.bool.html
R.color	A										<section class="prog__container"><pre><code>public static final class R.color\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.color.html
R.dimen	A										<section class="prog__container"><p> The standard size (both width and height) of an application icon that will be displayed in the app launcher and elsewhere.</p><pre><code>public static final class R.dimen\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.dimen.html
R.drawable	A										<section class="prog__container"><pre><code>public static final class R.drawable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.drawable.html
R.fraction	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public static final class R.fraction\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.fraction.html
R	A										<section class="prog__container"><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.html
R.id	A										<section class="prog__container"><p> Accessibility action identifier for <pre><code> ACTION_CONTEXT_CLICK </code></pre> .</p><pre><code>public static final class R.id\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.id.html
R.integer	A										<section class="prog__container"><p> The duration (in milliseconds) of a long animation.</p><pre><code>public static final class R.integer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.integer.html
R.interpolator	A										<section class="prog__container"><p> Acceleration curve matching a cubic ease out function.</p><pre><code>public static final class R.interpolator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.interpolator.html
R.layout	A										<section class="prog__container"><pre><code>public static final class R.layout\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.layout.html
R.menu	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public static final class R.menu\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.menu.html
R.mipmap	A										<section class="prog__container"><p> Default icon for applications that don't specify an icon.</p><pre><code>public static final class R.mipmap\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.mipmap.html
R.plurals	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public static final class R.plurals\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.plurals.html
R.raw	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public static final class R.raw\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.raw.html
R.string	A										<section class="prog__container"><p> Button to close error alert when a video cannot be played</p><pre><code>public static final class R.string\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.string.html
R.style	A										<section class="prog__container"><p> Base style for animations.</p><pre><code>public static final class R.style\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.style.html
R.styleable	A										<section class="prog__container"><p> <p> Indicates that this list will always be drawn on top of solid, single-color opaque background. </p><pre><code>public static final class R.styleable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.styleable.html
R.transition	A										<section class="prog__container"><p> A transition that moves views in or out of the scene to or from the edges when a view visibility changes.</p><pre><code>public static final class R.transition\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.transition.html
R.xml	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public static final class R.xml\nextends Object</code></pre></section>	https://developer.android.com/reference/android/R.xml.html
AccessibilityService.GestureResultCallback	A										<section class="prog__container"><p> Class used to report status of dispatched gestures</p><pre><code>public static abstract class AccessibilityService.GestureResultCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.GestureResultCallback.html
AccessibilityService	A										<section class="prog__container"><p> Accessibility services should only be used to assist users with disabilities in using Android devices and apps. They run in the background and receive callbacks by the system when <pre><code> AccessibilityEvent </code></pre> s are fired. Such events denote some state transition in the user interface, for example, the focus has changed, a button has been clicked, etc. Such a service can optionally request the capability for querying the content of the active window. Development of an accessibility service requires extending this class and implementing its abstract methods. </p><pre><code>public abstract class AccessibilityService\n</code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html
AccessibilityService.MagnificationController	A										<section class="prog__container"><p> Used to control and query the state of display magnification.</p><pre><code>public static final class AccessibilityService.MagnificationController\nextends Object</code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html
AccessibilityService.MagnificationController.OnMagnificationChangedListener	A										<section class="prog__container"><p> Listener for changes in the state of magnification.</p><pre><code>public static interface AccessibilityService.MagnificationController.OnMagnificationChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.OnMagnificationChangedListener.html
AccessibilityService.SoftKeyboardController	A										<section class="prog__container"><p> Used to control and query the soft keyboard show mode.</p><pre><code>public static final class AccessibilityService.SoftKeyboardController\nextends Object</code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.SoftKeyboardController.html
AccessibilityService.SoftKeyboardController.OnShowModeChangedListener	A										<section class="prog__container"><p> Listener for changes in the soft keyboard show mode.</p><pre><code>public static interface AccessibilityService.SoftKeyboardController.OnShowModeChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.SoftKeyboardController.OnShowModeChangedListener.html
AccessibilityServiceInfo	A										<section class="prog__container"><p> This class describes an <pre><code> AccessibilityService </code></pre> . The system notifies an <pre><code> AccessibilityService </code></pre> for <pre><code> AccessibilityEvent </code></pre> s according to the information encapsulated in this class. </p><pre><code>public class AccessibilityServiceInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html
GestureDescription.Builder	A										<section class="prog__container"><p> Builder for a <pre><code> GestureDescription </code></pre></p><pre><code>public static class GestureDescription.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/GestureDescription.Builder.html
GestureDescription	A										<section class="prog__container"><p> Accessibility services with the <pre><code> AccessibilityService_canPerformGestures </code></pre> property can dispatch gestures. This class describes those gestures. Gestures are made up of one or more strokes. Gestures are immutable once built. <p> Spatial dimensions throughout are in screen pixels. Time is measured in milliseconds. </p><pre><code>public final class GestureDescription\nextends Object</code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/GestureDescription.html
GestureDescription.StrokeDescription	A										<section class="prog__container"><p> Immutable description of stroke that can be part of a gesture.</p><pre><code>public static class GestureDescription.StrokeDescription\nextends Object</code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/GestureDescription.StrokeDescription.html
android.accessibilityservice	A										<section class="prog__container">The classes in this package are used for development of accessibility service that provide alternative or augmented feedback to the user.</section>	https://developer.android.com/reference/android/accessibilityservice/package-summary.html
AbstractAccountAuthenticator	A										<section class="prog__container"><p> Abstract base class for creating AccountAuthenticators. In order to be an authenticator one must extend this class, provider implementations for the abstract methods and write a service that returns the result of <pre><code> getIBinder() </code></pre> in the service's <pre><code> onBind(android.content.Intent) </code></pre> when invoked with an intent with action <pre><code> ACTION_AUTHENTICATOR_INTENT </code></pre> . This service must specify the following intent filter and metadata tags in its AndroidManifest.xml file <pre> &lt;intent-filter&gt; &lt;action android:name="android.accounts.AccountAuthenticator" /&gt; &lt;/intent-filter&gt; &lt;meta-data android:name="android.accounts.AccountAuthenticator" android:resource="@xml/authenticator" /&gt; </pre> The <pre><code> android:resource </code></pre> attribute must point to a resource that looks like: <pre> &lt;account-authenticator xmlns:android="http://schemas.android.com/apk/res/android" android:accountType="typeOfAuthenticator" android:icon="@drawable/icon" android:smallIcon="@drawable/miniIcon" android:label="@string/label" android:accountPreferences="@xml/account_preferences" /&gt; </pre> Replace the icons and labels with your own resources. The <pre><code> android:accountType </code></pre> attribute must be a string that uniquely identifies your authenticator and will be the same string that user will use when making calls on the <pre><code> AccountManager </code></pre> and it also corresponds to <pre><code> type </code></pre> for your accounts. One user of the android:icon is the "Account &amp; Sync" settings page and one user of the android:smallIcon is the Contact Application's tab panels. <p> The preferences attribute points to a PreferenceScreen xml hierarchy that contains a list of PreferenceScreens that can be invoked to manage the authenticator. An example is: <pre> &lt;PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"&gt; &lt;PreferenceCategory android:title="@string/title_fmt" /&gt; &lt;PreferenceScreen android:key="key1" android:title="@string/key1_action" android:summary="@string/key1_summary"&gt; &lt;intent android:action="key1.ACTION" android:targetPackage="key1.package" android:targetClass="key1.class" /&gt; &lt;/PreferenceScreen&gt; &lt;/PreferenceScreen&gt; </pre> <p> The standard pattern for implementing any of the abstract methods is the following: <ul> <li> If the supplied arguments are enough for the authenticator to fully satisfy the request then it will do so and return a <pre><code> Bundle </code></pre> that contains the results. <li> If the authenticator needs information from the user to satisfy the request then it will create an <pre><code> Intent </code></pre> to an activity that will prompt the user for the information and then carry out the request. This intent must be returned in a Bundle as key <pre><code> KEY_INTENT </code></pre> . <p> The activity needs to return the final result when it is complete so the Intent should contain the <pre><code> AccountAuthenticatorResponse </code></pre> as <pre><code> KEY_ACCOUNT_MANAGER_RESPONSE </code></pre> . The activity must then call <pre><code> onResult(Bundle) </code></pre> or <pre><code> onError(int, String) </code></pre> when it is complete. <li> If the authenticator cannot synchronously process the request and return a result then it may choose to return null and then use the AccountManagerResponse to send the result when it has completed the request. </li> </p><pre><code>public abstract class AbstractAccountAuthenticator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/accounts/AbstractAccountAuthenticator.html
Account	A										<section class="prog__container"><p> Value type that represents an Account in the <pre><code> AccountManager </code></pre> . This object is <pre><code> Parcelable </code></pre> and also overrides <pre><code> equals(Object) </code></pre> and <pre><code> hashCode() </code></pre> , making it suitable for use as the key of a <pre><code> Map </code></pre></p><pre><code>public class Account\nextends Object</code></pre></section>	https://developer.android.com/reference/android/accounts/Account.html
AccountAuthenticatorActivity	A										<section class="prog__container"><p> Base class for implementing an Activity that is used to help implement an AbstractAccountAuthenticator. If the AbstractAccountAuthenticator needs to use an activity to handle the request then it can have the activity extend AccountAuthenticatorActivity. The AbstractAccountAuthenticator passes in the response to the intent using the following: <pre> intent.putExtra(<pre><code>KEY_ACCOUNT_AUTHENTICATOR_RESPONSE</code></pre>, response); </pre> The activity then sets the result that is to be handed to the response via <pre><code> setAccountAuthenticatorResult(android.os.Bundle) </code></pre> . This result will be sent as the result of the request when the activity finishes. If this is never set or if it is set to null then error <pre><code> ERROR_CODE_CANCELED </code></pre> will be called on the response.</p><pre><code>public class AccountAuthenticatorActivity\n</code></pre></section>	https://developer.android.com/reference/android/accounts/AccountAuthenticatorActivity.html
AccountAuthenticatorResponse	A										<section class="prog__container"><p> Object used to communicate responses back to the AccountManager</p><pre><code>public class AccountAuthenticatorResponse\nextends Object</code></pre></section>	https://developer.android.com/reference/android/accounts/AccountAuthenticatorResponse.html
AccountManager	A										<section class="prog__container"><p> This class provides access to a centralized registry of the user's online accounts. The user enters credentials (username and password) once per account, granting applications access to online resources with "one-click" approval. <p> Different online services have different ways of handling accounts and authentication, so the account manager uses pluggable <em> authenticator </em> modules for different <em> account types </em> . Authenticators (which may be written by third parties) handle the actual details of validating account credentials and storing account information. For example, Google, Facebook, and Microsoft Exchange each have their own authenticator. <p> Many servers support some notion of an <em> authentication token </em> , which can be used to authenticate a request to the server without sending the user's actual password. (Auth tokens are normally created with a separate request which does include the user's credentials.) AccountManager can generate auth tokens for applications, so the application doesn't need to handle passwords directly. Auth tokens are normally reusable and cached by AccountManager, but must be refreshed periodically. It's the responsibility of applications to <em> invalidate </em> auth tokens when they stop working so the AccountManager knows it needs to regenerate them. <p> Applications accessing a server normally go through these steps: <ul> <li> Get an instance of AccountManager using <pre><code> get(Context) </code></pre> . <li> List the available accounts using <pre><code> getAccountsByType(String) </code></pre> or <pre><code> getAccountsByTypeAndFeatures(String, String[], AccountManagerCallback <account[]> , Handler) </account[]> </code></pre> . Normally applications will only be interested in accounts with one particular <em> type </em> , which identifies the authenticator. Account <em> features </em> are used to identify particular account subtypes and capabilities. Both the account type and features are authenticator-specific strings, and must be known by the application in coordination with its preferred authenticators. <li> Select one or more of the available accounts, possibly by asking the user for their preference. If no suitable accounts are available, <pre><code> addAccount(String, String, String[], Bundle, Activity, AccountManagerCallback <bundle> , Handler) </bundle> </code></pre> may be called to prompt the user to create an account of the appropriate type. <li> <b> Important: </b> If the application is using a previously remembered account selection, it must make sure the account is still in the list of accounts returned by <pre><code> getAccountsByType(String) </code></pre> . Requesting an auth token for an account no longer on the device results in an undefined failure. <li> Request an auth token for the selected account(s) using one of the <pre><code> getAuthToken(Account, String, Bundle, Activity, AccountManagerCallback <bundle> , Handler) </bundle> </code></pre> methods or related helpers. Refer to the description of each method for exact usage and error handling details. <li> Make the request using the auth token. The form of the auth token, the format of the request, and the protocol used are all specific to the service you are accessing. The application may use whatever network and protocol libraries are useful. <li> <b> Important: </b> If the request fails with an authentication error, it could be that a cached auth token is stale and no longer honored by the server. The application must call <pre><code> invalidateAuthToken(String, String) </code></pre> to remove the token from the cache, otherwise requests will continue failing! After invalidating the auth token, immediately go back to the "Request an auth token" step above. If the process fails the second time, then it can be treated as a "genuine" authentication failure and the user notified or other appropriate actions taken. </li> </li> </li> </li> </li> </li> </li> </ul> <p> Some AccountManager methods may need to interact with the user to prompt for credentials, present options, or ask the user to add an account. The caller may choose whether to allow AccountManager to directly launch the necessary user interface and wait for the user, or to return an Intent which the caller may use to launch the interface, or (in some cases) to install a notification which the user can select at any time to launch the interface. To have AccountManager launch the interface directly, the caller must supply the current foreground <pre><code> Activity </code></pre> context. <p> Many AccountManager methods take <pre><code> AccountManagerCallback </code></pre> and <pre><code> Handler </code></pre> as parameters. These methods return immediately and run asynchronously. If a callback is provided then <pre><code> run(AccountManagerFuture <v> ) </v> </code></pre> will be invoked on the Handler's thread when the request completes, successfully or not. The result is retrieved by calling <pre><code> getResult() </code></pre> on the <pre><code> AccountManagerFuture </code></pre> returned by the method (and also passed to the callback). This method waits for the operation to complete (if necessary) and either returns the result or throws an exception if an error occurred during the operation. To make the request synchronously, call <pre><code> getResult() </code></pre> immediately on receiving the future from the method; no callback need be supplied. <p> Requests which may block, including <pre><code> getResult() </code></pre> , must never be called on the application's main event thread. These operations throw <pre><code> IllegalStateException </code></pre> if they are used on the main thread. </p><pre><code>public class AccountManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/accounts/AccountManager.html
AccountManagerCallback	A										<section class="prog__container"><pre><code>public interface AccountManagerCallback\n</code></pre></section>	https://developer.android.com/reference/android/accounts/AccountManagerCallback.html
AccountManagerFuture	A										<section class="prog__container"><p> A <tt> AccountManagerFuture </tt> represents the result of an asynchronous <pre><code> AccountManager </code></pre> call. Methods are provided to check if the computation is complete, to wait for its completion, and to retrieve the result of the computation. The result can only be retrieved using method <tt> get </tt> when the computation has completed, blocking if necessary until it is ready. Cancellation is performed by the <tt> cancel </tt> method. Additional methods are provided to determine if the task completed normally or was cancelled. Once a computation has completed, the computation cannot be cancelled. If you would like to use a <tt> Future </tt> for the sake of cancellability but not provide a usable result, you can declare types of the form <tt> Future&lt;?&gt; </tt> and return <tt> null </tt> as a result of the underlying task.</p><pre><code>public interface AccountManagerFuture\n</code></pre></section>	https://developer.android.com/reference/android/accounts/AccountManagerFuture.html
AccountsException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p><pre><code>public class AccountsException\n</code></pre></section>	https://developer.android.com/reference/android/accounts/AccountsException.html
AuthenticatorDescription	A										<section class="prog__container"><p> A <pre><code> Parcelable </code></pre> value type that contains information about an account authenticator.</p><pre><code>public class AuthenticatorDescription\nextends Object</code></pre></section>	https://developer.android.com/reference/android/accounts/AuthenticatorDescription.html
AuthenticatorException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p><pre><code>public class AuthenticatorException\n</code></pre></section>	https://developer.android.com/reference/android/accounts/AuthenticatorException.html
NetworkErrorException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p><pre><code>public class NetworkErrorException\n</code></pre></section>	https://developer.android.com/reference/android/accounts/NetworkErrorException.html
OnAccountsUpdateListener	A										<section class="prog__container"><p> An interface that contains the callback used by the AccountManager</p><pre><code>public interface OnAccountsUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/accounts/OnAccountsUpdateListener.html
OperationCanceledException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p><pre><code>public class OperationCanceledException\n</code></pre></section>	https://developer.android.com/reference/android/accounts/OperationCanceledException.html
android.accounts	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/accounts/package-summary.html
Animator.AnimatorListener	A										<section class="prog__container"><p> <p> An animation listener receives notifications from an animation. Notifications indicate animation related events, such as the end or the repetition of the animation. </p><pre><code>public static interface Animator.AnimatorListener\n</code></pre></section>	https://developer.android.com/reference/android/animation/Animator.AnimatorListener.html
Animator.AnimatorPauseListener	A										<section class="prog__container"><p> A pause listener receives notifications from an animation when the animation is <pre><code> paused </code></pre> or <pre><code> resumed </code></pre> .</p><pre><code>public static interface Animator.AnimatorPauseListener\n</code></pre></section>	https://developer.android.com/reference/android/animation/Animator.AnimatorPauseListener.html
Animator	A										<section class="prog__container"><p> This is the superclass for classes which provide basic support for animations which can be started, ended, and have <pre><code> AnimatorListeners </code></pre> added to them.</p><pre><code>public abstract class Animator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/animation/Animator.html
AnimatorInflater	A										<section class="prog__container"><p> This class is used to instantiate animator XML files into Animator objects. <p> For performance reasons, inflation relies heavily on pre-processing of XML files that is done at build time. Therefore, it is not currently possible to use this inflater with an XmlPullParser over a plain XML file at runtime; it only works with an XmlPullParser returned from a compiled resource (R. <em> something </em> file.) </p><pre><code>public class AnimatorInflater\nextends Object</code></pre></section>	https://developer.android.com/reference/android/animation/AnimatorInflater.html
AnimatorListenerAdapter	A										<section class="prog__container"><p> This adapter class provides empty implementations of the methods from <pre><code> Animator.AnimatorListener </code></pre> . Any custom listener that cares only about a subset of the methods of this listener can simply subclass this adapter class instead of implementing the interface directly.</p><pre><code>public abstract class AnimatorListenerAdapter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/animation/AnimatorListenerAdapter.html
AnimatorSet.Builder	A										<section class="prog__container"><pre><code>public class AnimatorSet.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/animation/AnimatorSet.Builder.html
AnimatorSet	A										<section class="prog__container"><p> This class plays a set of <pre><code> Animator </code></pre> objects in the specified order. Animations can be set up to play together, in sequence, or after a specified delay. <p> There are two different approaches to adding animations to a <pre><code> AnimatorSet </code></pre> : either the <pre><code> playTogether() </code></pre> or <pre><code> playSequentially() </code></pre> methods can be called to add a set of animations all at once, or the <pre><code> play(Animator) </code></pre> can be used in conjunction with methods in the <pre><code> Builder </code></pre> class to add animations one by one. </p><pre><code>public final class AnimatorSet\n</code></pre></section>	https://developer.android.com/reference/android/animation/AnimatorSet.html
ArgbEvaluator	A										<section class="prog__container"><p> This evaluator can be used to perform type interpolation between integer values that represent ARGB colors.</p><pre><code>public class ArgbEvaluator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/animation/ArgbEvaluator.html
BidirectionalTypeConverter	A										<section class="prog__container"><p> Abstract base class used convert type T to another type V and back again. This is necessary when the value types of in animation are different from the property type. BidirectionalTypeConverter is needed when only the final value for the animation is supplied to animators.</p><pre><code>public abstract class BidirectionalTypeConverter\n</code></pre></section>	https://developer.android.com/reference/android/animation/BidirectionalTypeConverter.html
FloatArrayEvaluator	A										<section class="prog__container"><p> This evaluator can be used to perform type interpolation between <pre><code> float[] </code></pre> values. Each index into the array is treated as a separate value to interpolate. For example, evaluating <pre><code> {100, 200} </code></pre> and <pre><code> {300, 400} </code></pre> will interpolate the value at the first index between 100 and 300 and the value at the second index value between 200 and 400.</p><pre><code>public class FloatArrayEvaluator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/animation/FloatArrayEvaluator.html
FloatEvaluator	A										<section class="prog__container"><p> This evaluator can be used to perform type interpolation between <pre><code> float </code></pre> values.</p><pre><code>public class FloatEvaluator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/animation/FloatEvaluator.html
IntArrayEvaluator	A										<section class="prog__container"><p> This evaluator can be used to perform type interpolation between <pre><code> int[] </code></pre> values. Each index into the array is treated as a separate value to interpolate. For example, evaluating <pre><code> {100, 200} </code></pre> and <pre><code> {300, 400} </code></pre> will interpolate the value at the first index between 100 and 300 and the value at the second index value between 200 and 400.</p><pre><code>public class IntArrayEvaluator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/animation/IntArrayEvaluator.html
IntEvaluator	A										<section class="prog__container"><p> This evaluator can be used to perform type interpolation between <pre><code> int </code></pre> values.</p><pre><code>public class IntEvaluator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/animation/IntEvaluator.html
Keyframe	A										<section class="prog__container"><p> This class holds a time/value pair for an animation. The Keyframe class is used by <pre><code> ValueAnimator </code></pre> to define the values that the animation target will have over the course of the animation. As the time proceeds from one keyframe to the other, the value of the target object will animate between the value at the previous keyframe and the value at the next keyframe. Each keyframe also holds an optional <pre><code> TimeInterpolator </code></pre> object, which defines the time interpolation over the intervalue preceding the keyframe. <p> The Keyframe class itself is abstract. The type-specific factory methods will return a subclass of Keyframe specific to the type of value being stored. This is done to improve performance when dealing with the most common cases (e.g., <pre><code> float </code></pre> and <pre><code> int </code></pre> values). Other types will fall into a more general Keyframe class that treats its values as Objects. Unless your animation requires dealing with a custom type or a data structure that needs to be animated directly (and evaluated using an implementation of <pre><code> TypeEvaluator </code></pre> ), you should stick to using float and int as animations using those types have lower runtime overhead than other types. </p><pre><code>public abstract class Keyframe\nextends Object</code></pre></section>	https://developer.android.com/reference/android/animation/Keyframe.html
LayoutTransition	A										<section class="prog__container"><p> This class enables automatic animations on layout changes in ViewGroup objects. To enable transitions for a layout container, create a LayoutTransition object and set it on any ViewGroup by calling <pre><code> setLayoutTransition(LayoutTransition) </code></pre> . This will cause default animations to run whenever items are added to or removed from that container. To specify custom animations, use the <pre><code> setAnimator() </code></pre> method. <p> One of the core concepts of these transition animations is that there are two types of changes that cause the transition and four different animations that run because of those changes. The changes that trigger the transition are items being added to a container (referred to as an "appearing" transition) or removed from a container (also known as "disappearing"). Setting the visibility of views (between GONE and VISIBLE) will trigger the same add/remove logic. The animations that run due to those events are one that animates items being added, one that animates items being removed, and two that animate the other items in the container that change due to the add/remove occurrence. Users of the transition may want different animations for the changing items depending on whether they are changing due to an appearing or disappearing event, so there is one animation for each of these variations of the changing event. Most of the API of this class is concerned with setting up the basic properties of the animations used in these four situations, or with setting up custom animations for any or all of the four. </p><pre><code>public class LayoutTransition\nextends Object</code></pre></section>	https://developer.android.com/reference/android/animation/LayoutTransition.html
LayoutTransition.TransitionListener	A										<section class="prog__container"><p> This interface is used for listening to starting and ending events for transitions.</p><pre><code>public static interface LayoutTransition.TransitionListener\n</code></pre></section>	https://developer.android.com/reference/android/animation/LayoutTransition.TransitionListener.html
ObjectAnimator	A										<section class="prog__container"><p> This subclass of <pre><code> ValueAnimator </code></pre> provides support for animating properties on target objects. The constructors of this class take parameters to define the target object that will be animated as well as the name of the property that will be animated. Appropriate set/get functions are then determined internally and the animation will call these functions as necessary to animate the property. <p> Animators can be created from either code or resource files, as shown here: </p><pre><code>public final class ObjectAnimator\n</code></pre></section>	https://developer.android.com/reference/android/animation/ObjectAnimator.html
android.animation	A										<section class="prog__container">These classes provide functionality for the property animation system, which allows you to animate object properties of any type.</section>	https://developer.android.com/reference/android/animation/package-summary.html
PointFEvaluator	A										<section class="prog__container"><p> This evaluator can be used to perform type interpolation between <pre><code> PointF </code></pre> values.</p><pre><code>public class PointFEvaluator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/animation/PointFEvaluator.html
PropertyValuesHolder	A										<section class="prog__container"><p> This class holds information about a property and the values that that property should take on during an animation. PropertyValuesHolder objects can be used to create animations with ValueAnimator or ObjectAnimator that operate on several different properties in parallel.</p><pre><code>public class PropertyValuesHolder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/animation/PropertyValuesHolder.html
RectEvaluator	A										<section class="prog__container"><p> This evaluator can be used to perform type interpolation between <pre><code> Rect </code></pre> values.</p><pre><code>public class RectEvaluator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/animation/RectEvaluator.html
StateListAnimator	A										<section class="prog__container"><p> Lets you define a number of Animators that will run on the attached View depending on the View's drawable state. <p> It can be defined in an XML file with the <pre><code> &lt;selector&gt; </code></pre> element. Each State Animator is defined in a nested <pre><code> &lt;item&gt; </code></pre> element. </p><pre><code>public class StateListAnimator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/animation/StateListAnimator.html
TimeAnimator	A										<section class="prog__container"><p> This class provides a simple callback mechanism to listeners that is synchronized with all other animators in the system. There is no duration, interpolation, or object value-setting with this Animator. Instead, it is simply started, after which it proceeds to send out events on every animation frame to its TimeListener (if set), with information about this animator, the total elapsed time, and the elapsed time since the previous animation frame.</p><pre><code>public class TimeAnimator\n</code></pre></section>	https://developer.android.com/reference/android/animation/TimeAnimator.html
TimeAnimator.TimeListener	A										<section class="prog__container"><p> Implementors of this interface can set themselves as update listeners to a <pre><code> TimeAnimator </code></pre> instance to receive callbacks on every animation frame to receive the total time since the animator started and the delta time since the last frame. The first time the listener is called, deltaTime will be zero. The same is true for totalTime, unless the animator was set to a specific <pre><code> currentPlayTime </code></pre> prior to starting.</p><pre><code>public static interface TimeAnimator.TimeListener\n</code></pre></section>	https://developer.android.com/reference/android/animation/TimeAnimator.TimeListener.html
TimeInterpolator	A										<section class="prog__container"><p> A time interpolator defines the rate of change of an animation. This allows animations to have non-linear motion, such as acceleration and deceleration.</p><pre><code>public interface TimeInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/animation/TimeInterpolator.html
TypeConverter	A										<section class="prog__container"><p> Abstract base class used convert type T to another type V. This is necessary when the value types of in animation are different from the property type.</p><pre><code>public abstract class TypeConverter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/animation/TypeConverter.html
TypeEvaluator	A										<section class="prog__container"><p> Interface for use with the <pre><code> setEvaluator(TypeEvaluator) </code></pre> function. Evaluators allow developers to create animations on arbitrary property types, by allowing them to supply custom evaluators for types that are not automatically understood and used by the animation system.</p><pre><code>public interface TypeEvaluator\n</code></pre></section>	https://developer.android.com/reference/android/animation/TypeEvaluator.html
ValueAnimator.AnimatorUpdateListener	A										<section class="prog__container"><p> Implementors of this interface can add themselves as update listeners to an <pre><code> ValueAnimator </code></pre> instance to receive callbacks on every animation frame, after the current frame's values have been calculated for that <pre><code> ValueAnimator </code></pre> .</p><pre><code>public static interface ValueAnimator.AnimatorUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/animation/ValueAnimator.AnimatorUpdateListener.html
ValueAnimator	A										<section class="prog__container"><p> This class provides a simple timing engine for running animations which calculate animated values and set them on target objects. <p> There is a single timing pulse that all animations use. It runs in a custom handler to ensure that property changes happen on the UI thread. </p><pre><code>public class ValueAnimator\n</code></pre></section>	https://developer.android.com/reference/android/animation/ValueAnimator.html
android.annotation	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/annotation/package-summary.html
SuppressLint	A										<section class="prog__container"><p> Indicates that Lint should ignore the specified warnings for the annotated element.</p><pre><code>public abstract @interface SuppressLint\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/annotation/SuppressLint.html
TargetApi	A										<section class="prog__container"><p> Indicates that Lint should treat this type as targeting a given API level, no matter what the project target is.</p><pre><code>public abstract @interface TargetApi\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/annotation/TargetApi.html
ActionBar	A										<section class="prog__container"><p> A primary toolbar within the activity that may display the activity title, application-level navigation affordances, and other interactive items. <p> Beginning with Android 3.0 (API level 11), the action bar appears at the top of an activity's window when the activity uses the system's <pre><code> Holo </code></pre> theme (or one of its descendant themes), which is the default. You may otherwise add the action bar by calling <pre><code> requestFeature(FEATURE_ACTION_BAR) </code></pre> or by declaring it in a custom theme with the <pre><code> windowActionBar </code></pre> property. </p><pre><code>public abstract class ActionBar\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/ActionBar.html
ActionBar.LayoutParams	A										<section class="prog__container"><p> Per-child layout information associated with action bar custom views.</p><pre><code>public static class ActionBar.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/app/ActionBar.LayoutParams.html
ActionBar.OnMenuVisibilityListener	A										<section class="prog__container"><p> Listener for receiving events when action bar menus are shown or hidden.</p><pre><code>public static interface ActionBar.OnMenuVisibilityListener\n</code></pre></section>	https://developer.android.com/reference/android/app/ActionBar.OnMenuVisibilityListener.html
ActionBar.OnNavigationListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead. </p><pre><code>public static interface ActionBar.OnNavigationListener\n</code></pre></section>	https://developer.android.com/reference/android/app/ActionBar.OnNavigationListener.html
ActionBar.Tab	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead. </p><pre><code>public static abstract class ActionBar.Tab\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/ActionBar.Tab.html
ActionBar.TabListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead. </p><pre><code>public static interface ActionBar.TabListener\n</code></pre></section>	https://developer.android.com/reference/android/app/ActionBar.TabListener.html
Activity	A										<section class="prog__container"><p> An activity is a single, focused thing that the user can do. Almost all activities interact with the user, so the Activity class takes care of creating a window for you in which you can place your UI with <pre><code> setContentView(View) </code></pre> . While activities are often presented to the user as full-screen windows, they can also be used in other ways: as floating windows (via a theme with <pre><code> windowIsFloating </code></pre> set) or embedded inside of another activity (using <pre><code> ActivityGroup </code></pre> ). There are two methods almost all subclasses of Activity will implement: <ul> <li> <pre><code> onCreate(Bundle) </code></pre> is where you initialize your activity. Most importantly, here you will usually call <pre><code> setContentView(int) </code></pre> with a layout resource defining your UI, and using <pre><code> findViewById(int) </code></pre> to retrieve the widgets in that UI that you need to interact with programmatically. <li> <pre><code> onPause() </code></pre> is where you deal with the user leaving your activity. Most importantly, any changes made by the user should at this point be committed (usually to the <pre><code> ContentProvider </code></pre> holding the data). </li> </li> </ul> <p> To be of use with <pre><code> Context.startActivity() </code></pre> , all activity classes must have a corresponding <pre><code> &lt;activity&gt; </code></pre> declaration in their package's <pre><code> AndroidManifest.xml </code></pre> . </p><pre><code>public class Activity\n</code></pre></section>	https://developer.android.com/reference/android/app/Activity.html
ActivityGroup	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 13. </strong> <br/> Use the new <pre><code> Fragment </code></pre> and <pre><code> FragmentManager </code></pre> APIs instead; these are also available on older platforms through the Android compatibility package. </p><pre><code>public class ActivityGroup\n</code></pre></section>	https://developer.android.com/reference/android/app/ActivityGroup.html
ActivityManager.AppTask	A										<section class="prog__container"><p> The AppTask allows you to manage your own application's tasks. See <pre><code> getAppTasks() </code></pre></p><pre><code>public static class ActivityManager.AppTask\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/ActivityManager.AppTask.html
ActivityManager	A										<section class="prog__container"><p> <p> This class gives information about, and interacts with, activities, services, and the containing process. </p><pre><code>public class ActivityManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/ActivityManager.html
ActivityManager.MemoryInfo	A										<section class="prog__container"><p> Information you can retrieve about the available memory through <pre><code> getMemoryInfo(ActivityManager.MemoryInfo) </code></pre> .</p><pre><code>public static class ActivityManager.MemoryInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/ActivityManager.MemoryInfo.html
ActivityManager.ProcessErrorStateInfo	A										<section class="prog__container"><p> Information you can retrieve about any processes that are in an error condition.</p><pre><code>public static class ActivityManager.ProcessErrorStateInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/ActivityManager.ProcessErrorStateInfo.html
ActivityManager.RecentTaskInfo	A										<section class="prog__container"><p> Information you can retrieve about tasks that the user has most recently started or visited.</p><pre><code>public static class ActivityManager.RecentTaskInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/ActivityManager.RecentTaskInfo.html
ActivityManager.RunningAppProcessInfo	A										<section class="prog__container"><p> Information you can retrieve about a running process.</p><pre><code>public static class ActivityManager.RunningAppProcessInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html
ActivityManager.RunningServiceInfo	A										<section class="prog__container"><p> Information you can retrieve about a particular Service that is currently running in the system.</p><pre><code>public static class ActivityManager.RunningServiceInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html
ActivityManager.RunningTaskInfo	A										<section class="prog__container"><p> Information you can retrieve about a particular task that is currently "running" in the system. Note that a running task does not mean the given task actually has a process it is actively running in; it simply means that the user has gone to it and never closed it, but currently the system may have killed its process and is only holding on to its last state in order to restart it when the user returns.</p><pre><code>public static class ActivityManager.RunningTaskInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/ActivityManager.RunningTaskInfo.html
ActivityManager.TaskDescription	A										<section class="prog__container"><p> Information you can set and retrieve about the current activity within the recent task list.</p><pre><code>public static class ActivityManager.TaskDescription\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.html
ActivityOptions	A										<section class="prog__container"><p> Helper class for building an options Bundle that can be used with <pre><code> Context.startActivity(Intent, Bundle) </code></pre> and related methods.</p><pre><code>public class ActivityOptions\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/ActivityOptions.html
AlarmManager.AlarmClockInfo	A										<section class="prog__container"><p> An immutable description of a scheduled "alarm clock" event.</p><pre><code>public static final class AlarmManager.AlarmClockInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/AlarmManager.AlarmClockInfo.html
AlarmManager	A										<section class="prog__container"><p> This class provides access to the system alarm services. These allow you to schedule your application to be run at some point in the future. When an alarm goes off, the <pre><code> Intent </code></pre> that had been registered for it is broadcast by the system, automatically starting the target application if it is not already running. Registered alarms are retained while the device is asleep (and can optionally wake the device up if they go off during that time), but will be cleared if it is turned off and rebooted. <p> The Alarm Manager holds a CPU wake lock as long as the alarm receiver's onReceive() method is executing. This guarantees that the phone will not sleep until you have finished handling the broadcast. Once onReceive() returns, the Alarm Manager releases this wake lock. This means that the phone will in some cases sleep as soon as your onReceive() method completes. If your alarm receiver called <pre><code> Context.startService() </code></pre> , it is possible that the phone will sleep before the requested service is launched. To prevent this, your BroadcastReceiver and Service will need to implement a separate wake lock policy to ensure that the phone continues running until the service becomes available. <p> <b> Note: The Alarm Manager is intended for cases where you want to have your application code run at a specific time, even if your application is not currently running. For normal timing operations (ticks, timeouts, etc) it is easier and much more efficient to use <pre><code> Handler </code></pre> . </b> <p class="caution"> <strong> Note: </strong> Beginning with API 19 ( <pre><code> KITKAT </code></pre> ) alarm delivery is inexact: the OS will shift alarms in order to minimize wakeups and battery use. There are new APIs to support applications which need strict delivery guarantees; see <pre><code> setWindow(int, long, long, PendingIntent) </code></pre> and <pre><code> setExact(int, long, PendingIntent) </code></pre> . Applications whose <pre><code> targetSdkVersion </code></pre> is earlier than API 19 will continue to see the previous behavior in which all alarms are delivered exactly when requested. <p> You do not instantiate this class directly; instead, retrieve it through <pre><code> Context.getSystemService(Context.ALARM_SERVICE) </code></pre> . </p><pre><code>public class AlarmManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/AlarmManager.html
AlarmManager.OnAlarmListener	A										<section class="prog__container"><p> Direct-notification alarms: the requester must be running continuously from the time the alarm is set to the time it is delivered, or delivery will fail. Only one-shot alarms can be set using this mechanism, not repeating alarms.</p><pre><code>public static interface AlarmManager.OnAlarmListener\n</code></pre></section>	https://developer.android.com/reference/android/app/AlarmManager.OnAlarmListener.html
AlertDialog.Builder	A										<section class="prog__container"><p> Creates a builder for an alert dialog that uses the default alert dialog theme.</p><pre><code>public static class AlertDialog.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/AlertDialog.Builder.html
AlertDialog	A										<section class="prog__container"><p> A subclass of Dialog that can display one, two or three buttons. If you only want to display a String in this dialog box, use the setMessage() method. If you want to display a more complex view, look up the FrameLayout called "custom" and add your view to it: <pre> FrameLayout fl = (FrameLayout) findViewById(android.R.id.custom); fl.addView(myView, new LayoutParams(MATCH_PARENT, WRAP_CONTENT)); </pre> <p> The AlertDialog class takes care of automatically setting <pre><code> WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM </code></pre> for you based on whether any views in the dialog return true from <pre><code> View.onCheckIsTextEditor() </code></pre> . Generally you want this set for a Dialog without text editors, so that it will be placed on top of the current input method UI. You can modify this behavior by forcing the flag to your desired mode after calling <pre><code> onCreate(Bundle) </code></pre> . </p><pre><code>public class AlertDialog\n</code></pre></section>	https://developer.android.com/reference/android/app/AlertDialog.html
AliasActivity	A										<section class="prog__container"><p> Stub activity that launches another activity (and then finishes itself) based on information in its component's manifest meta-data. This is a simple way to implement an alias-like mechanism. To use this activity, you should include in the manifest for the associated component an entry named "android.app.alias". It is a reference to an XML resource describing an intent that launches the real application.</p><pre><code>public class AliasActivity\n</code></pre></section>	https://developer.android.com/reference/android/app/AliasActivity.html
Application.ActivityLifecycleCallbacks	A										<section class="prog__container"><pre><code>public static interface Application.ActivityLifecycleCallbacks\n</code></pre></section>	https://developer.android.com/reference/android/app/Application.ActivityLifecycleCallbacks.html
Application	A										<section class="prog__container"><p> Base class for maintaining global application state. You can provide your own implementation by creating a subclass and specifying the fully-qualified name of this subclass as the <pre><code> "android:name" </code></pre> attribute in your AndroidManifest.xml's <pre><code> &lt;application&gt; </code></pre> tag. The Application class, or your subclass of the Application class, is instantiated before any other class when the process for your application/package is created. <p class="note"> <strong> Note: </strong> There is normally no need to subclass Application. In most situations, static singletons can provide the same functionality in a more modular way. If your singleton needs a global context (for example to register broadcast receivers), include <pre><code> Context.getApplicationContext() </code></pre> as a <pre><code> Context </code></pre> argument when invoking your singleton's <pre><code> getInstance() </code></pre> method. </p><pre><code>public class Application\n</code></pre></section>	https://developer.android.com/reference/android/app/Application.html
Application.OnProvideAssistDataListener	A										<section class="prog__container"><p> Callback interface for use with <pre><code> registerOnProvideAssistDataListener(Application.OnProvideAssistDataListener) </code></pre> and <pre><code> unregisterOnProvideAssistDataListener(Application.OnProvideAssistDataListener) </code></pre> .</p><pre><code>public static interface Application.OnProvideAssistDataListener\n</code></pre></section>	https://developer.android.com/reference/android/app/Application.OnProvideAssistDataListener.html
ApplicationErrorReport.AnrInfo	A										<section class="prog__container"><p> Describes an application not responding error.</p><pre><code>public static class ApplicationErrorReport.AnrInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/ApplicationErrorReport.AnrInfo.html
ApplicationErrorReport.BatteryInfo	A										<section class="prog__container"><p> Describes a battery usage report.</p><pre><code>public static class ApplicationErrorReport.BatteryInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/ApplicationErrorReport.BatteryInfo.html
ApplicationErrorReport.CrashInfo	A										<section class="prog__container"><p> Describes an application crash.</p><pre><code>public static class ApplicationErrorReport.CrashInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/ApplicationErrorReport.CrashInfo.html
ApplicationErrorReport	A										<section class="prog__container"><p> Describes an application error. A report has a type, which is one of <ul> <li> <pre><code> TYPE_NONE </code></pre> uninitialized instance of <pre><code> ApplicationErrorReport </code></pre> . <li> <pre><code> TYPE_CRASH </code></pre> application crash. Information about the crash is stored in <pre><code> crashInfo </code></pre> . <li> <pre><code> TYPE_ANR </code></pre> application not responding. Information about the ANR is stored in <pre><code> anrInfo </code></pre> . <li> <pre><code> TYPE_BATTERY </code></pre> user reported application is using too much battery. Information about the battery use is stored in <pre><code> batteryInfo </code></pre> . <li> <pre><code> TYPE_RUNNING_SERVICE </code></pre> user reported application is leaving an unneeded serive running. Information about the battery use is stored in <pre><code> runningServiceInfo </code></pre> . </li> </li> </li> </li> </li> </ul></p><pre><code>public class ApplicationErrorReport\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/ApplicationErrorReport.html
ApplicationErrorReport.RunningServiceInfo	A										<section class="prog__container"><p> Describes a running service report.</p><pre><code>public static class ApplicationErrorReport.RunningServiceInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/ApplicationErrorReport.RunningServiceInfo.html
AppOpsManager	A										<section class="prog__container"><p> API for interacting with "application operation" tracking. <p> This API is not generally intended for third party application developers; most features are only available to system applications. Obtain an instance of it through <pre><code> Context.getSystemService </code></pre> with <pre><code> Context.APP_OPS_SERVICE </code></pre> . </p><pre><code>public class AppOpsManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/AppOpsManager.html
AppOpsManager.OnOpChangedListener	A										<section class="prog__container"><p> Callback for notification of changes to operation state.</p><pre><code>public static interface AppOpsManager.OnOpChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/app/AppOpsManager.OnOpChangedListener.html
AutomaticZenRule	A										<section class="prog__container"><p> Rule instance information for zen mode.</p><pre><code>public final class AutomaticZenRule\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/AutomaticZenRule.html
DatePickerDialog	A										<section class="prog__container"><p> A simple dialog containing an <pre><code> DatePicker </code></pre> . <p> See the Pickers guide. </p><pre><code>public class DatePickerDialog\n</code></pre></section>	https://developer.android.com/reference/android/app/DatePickerDialog.html
DatePickerDialog.OnDateSetListener	A										<section class="prog__container"><p> The listener used to indicate the user has finished selecting a date.</p><pre><code>public static interface DatePickerDialog.OnDateSetListener\n</code></pre></section>	https://developer.android.com/reference/android/app/DatePickerDialog.OnDateSetListener.html
Dialog	A										<section class="prog__container"><p> Base class for Dialogs. <p> Note: Activities provide a facility to manage the creation, saving and restoring of dialogs. See <pre><code> onCreateDialog(int) </code></pre> , <pre><code> onPrepareDialog(int, Dialog) </code></pre> , <pre><code> showDialog(int) </code></pre> , and <pre><code> dismissDialog(int) </code></pre> . If these methods are used, <pre><code> getOwnerActivity() </code></pre> will return the Activity that managed this dialog. <p> Often you will want to have a Dialog display on top of the current input method, because there is no reason for it to accept text. You can do this by setting the <pre><code> WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM </code></pre> window flag (assuming your Dialog takes input focus, as it the default) with the following code: <pre> getWindow().setFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM, WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);</pre> </p><pre><code>public class Dialog\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/Dialog.html
DialogFragment	A										<section class="prog__container"><p> A fragment that displays a dialog window, floating on top of its activity's window. This fragment contains a Dialog object, which it displays as appropriate based on the fragment's state. Control of the dialog (deciding when to show, hide, dismiss it) should be done through the API here, not with direct calls on the dialog. <p> Implementations should override this class and implement <pre><code> onCreateView(LayoutInflater, ViewGroup, Bundle) </code></pre> to supply the content of the dialog. Alternatively, they can override <pre><code> onCreateDialog(Bundle) </code></pre> to create an entirely custom dialog, such as an AlertDialog, with its own content. <p> Topics covered here: <ol> <li> Lifecycle <li> Basic Dialog <li> Alert Dialog <li> Selecting Between Dialog or Embedding </li> </li> </li> </li> </ol> </p><pre><code>public class DialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/app/DialogFragment.html
DownloadManager	A										<section class="prog__container"><p> The download manager is a system service that handles long-running HTTP downloads. Clients may request that a URI be downloaded to a particular destination file. The download manager will conduct the download in the background, taking care of HTTP interactions and retrying downloads after failures or across connectivity changes and system reboots. Instances of this class should be obtained through <pre><code> getSystemService(String) </code></pre> by passing <pre><code> DOWNLOAD_SERVICE </code></pre> . Apps that request downloads through this API should register a broadcast receiver for <pre><code> ACTION_NOTIFICATION_CLICKED </code></pre> to appropriately handle when the user clicks on a running download in a notification or from the downloads UI. Note that the application must have the <pre><code> INTERNET </code></pre> permission to use this class.</p><pre><code>public class DownloadManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/DownloadManager.html
DownloadManager.Query	A										<section class="prog__container"><p> This class may be used to filter download manager queries.</p><pre><code>public static class DownloadManager.Query\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/DownloadManager.Query.html
DownloadManager.Request	A										<section class="prog__container"><p> This class contains all the information necessary to request a new download. The URI is the only required parameter. Note that the default download destination is a shared volume where the system might delete your file if it needs to reclaim space for system use. If this is a problem, use a location on external storage (see <pre><code> setDestinationUri(Uri) </code></pre> .</p><pre><code>public static class DownloadManager.Request\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/DownloadManager.Request.html
ExpandableListActivity	A										<section class="prog__container"><p> An activity that displays an expandable list of items by binding to a data source implementing the ExpandableListAdapter, and exposes event handlers when the user selects an item. <p> ExpandableListActivity hosts a <pre><code> ExpandableListView </code></pre> object that can be bound to different data sources that provide a two-levels of data (the top-level is group, and below each group are children). Binding, screen layout, and row layout are discussed in the following sections. <p> <strong> Screen Layout </strong> </p><pre><code>public class ExpandableListActivity\n</code></pre></section>	https://developer.android.com/reference/android/app/ExpandableListActivity.html
Fragment	A										<section class="prog__container"><p> A Fragment is a piece of an application's user interface or behavior that can be placed in an <pre><code> Activity </code></pre> . Interaction with fragments is done through <pre><code> FragmentManager </code></pre> , which can be obtained via <pre><code> Activity.getFragmentManager() </code></pre> and <pre><code> Fragment.getFragmentManager() </code></pre> . <p> The Fragment class can be used many ways to achieve a wide variety of results. In its core, it represents a particular operation or interface that is running within a larger <pre><code> Activity </code></pre> . A Fragment is closely tied to the Activity it is in, and can not be used apart from one. Though Fragment defines its own lifecycle, that lifecycle is dependent on its activity: if the activity is stopped, no fragments inside of it can be started; when the activity is destroyed, all fragments will be destroyed. <p> All subclasses of Fragment must include a public no-argument constructor. The framework will often re-instantiate a fragment class when needed, in particular during state restore, and needs to be able to find this constructor to instantiate it. If the no-argument constructor is not available, a runtime exception will occur in some cases during state restore. <p> Topics covered here: <ol> <li> Older Platforms <li> Lifecycle <li> Layout <li> Back Stack </li> </li> </li> </li> </ol> </p><pre><code>public class Fragment\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/Fragment.html
Fragment.InstantiationException	A										<section class="prog__container"><p> Thrown by <pre><code> instantiate(Context, String, Bundle) </code></pre> when there is an instantiation failure.</p><pre><code>public static class Fragment.InstantiationException\n</code></pre></section>	https://developer.android.com/reference/android/app/Fragment.InstantiationException.html
Fragment.SavedState	A										<section class="prog__container"><p> State information that has been retrieved from a fragment instance through <pre><code> FragmentManager.saveFragmentInstanceState </code></pre> .</p><pre><code>public static class Fragment.SavedState\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/Fragment.SavedState.html
FragmentBreadCrumbs	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> This widget is no longer supported. </p><pre><code>public class FragmentBreadCrumbs\n</code></pre></section>	https://developer.android.com/reference/android/app/FragmentBreadCrumbs.html
FragmentBreadCrumbs.OnBreadCrumbClickListener	A										<section class="prog__container"><p> Interface to intercept clicks on the bread crumbs.</p><pre><code>public static interface FragmentBreadCrumbs.OnBreadCrumbClickListener\n</code></pre></section>	https://developer.android.com/reference/android/app/FragmentBreadCrumbs.OnBreadCrumbClickListener.html
FragmentContainer	A										<section class="prog__container"><p> Callbacks to a <pre><code> Fragment </code></pre> 's container.</p><pre><code>public abstract class FragmentContainer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/FragmentContainer.html
FragmentController	A										<section class="prog__container"><p> Provides integration points with a <pre><code> FragmentManager </code></pre> for a fragment host. <p> It is the responsibility of the host to take care of the Fragment's lifecycle. The methods provided by <pre><code> FragmentController </code></pre> are for that purpose. </p><pre><code>public class FragmentController\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/FragmentController.html
FragmentHostCallback	A										<section class="prog__container"><p> Integration points with the Fragment host. <p> Fragments may be hosted by any object; such as an <pre><code> Activity </code></pre> . In order to host fragments, implement <pre><code> FragmentHostCallback </code></pre> , overriding the methods applicable to the host. </p><pre><code>public abstract class FragmentHostCallback\n</code></pre></section>	https://developer.android.com/reference/android/app/FragmentHostCallback.html
FragmentManager.BackStackEntry	A										<section class="prog__container"><p> Representation of an entry on the fragment back stack, as created with <pre><code> FragmentTransaction.addToBackStack() </code></pre> . Entries can later be retrieved with <pre><code> FragmentManager.getBackStackEntryAt() </code></pre> . <p> Note that you should never hold on to a BackStackEntry object; the identifier as returned by <pre><code> getId() </code></pre> is the only thing that will be persisted across activity instances. </p><pre><code>public static interface FragmentManager.BackStackEntry\n</code></pre></section>	https://developer.android.com/reference/android/app/FragmentManager.BackStackEntry.html
FragmentManager	A										<section class="prog__container"><p> Interface for interacting with <pre><code> Fragment </code></pre> objects inside of an <pre><code> Activity </code></pre> </p><pre><code>public abstract class FragmentManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/FragmentManager.html
FragmentManager.OnBackStackChangedListener	A										<section class="prog__container"><p> Interface to watch for changes to the back stack.</p><pre><code>public static interface FragmentManager.OnBackStackChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/app/FragmentManager.OnBackStackChangedListener.html
FragmentManagerNonConfig	A										<section class="prog__container"><p> FragmentManagerNonConfig stores the retained instance fragments across activity recreation events. <p> Apps should treat objects of this type as opaque, returned by and passed to the state save and restore process for fragments in <pre><code> retainNonConfig() </code></pre> and <pre><code> restoreAllState(Parcelable, FragmentManagerNonConfig) </code></pre> . </p><pre><code>public class FragmentManagerNonConfig\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/FragmentManagerNonConfig.html
FragmentTransaction	A										<section class="prog__container"><p> API for performing a set of Fragment operations. </p><pre><code>public abstract class FragmentTransaction\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/FragmentTransaction.html
Instrumentation.ActivityMonitor	A										<section class="prog__container"><p> Information about a particular kind of Intent that is being monitored. An instance of this class is added to the current instrumentation through <pre><code> addMonitor(Instrumentation.ActivityMonitor) </code></pre> ; after being added, when a new activity is being started the monitor will be checked and, if matching, its hit count updated and (optionally) the call stopped and a canned result returned. <p> An ActivityMonitor can also be used to look for the creation of an activity, through the <pre><code> waitForActivity() </code></pre> method. This will return after a matching activity has been created with that activity object. </p><pre><code>public static class Instrumentation.ActivityMonitor\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/Instrumentation.ActivityMonitor.html
Instrumentation.ActivityResult	A										<section class="prog__container"><p> Description of a Activity execution result to return to the original activity.</p><pre><code>public static final class Instrumentation.ActivityResult\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/Instrumentation.ActivityResult.html
Instrumentation	A										<section class="prog__container"><p> Base class for implementing application instrumentation code. When running with instrumentation turned on, this class will be instantiated for you before any of the application code, allowing you to monitor all of the interaction the system has with the application. An Instrumentation implementation is described to the system through an AndroidManifest.xml's &lt;instrumentation&gt; tag.</p><pre><code>public class Instrumentation\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/Instrumentation.html
IntentService	A										<section class="prog__container"><p> IntentService is a base class for <pre><code> Service </code></pre> s that handle asynchronous requests (expressed as <pre><code> Intent </code></pre> s) on demand. Clients send requests through <pre><code> startService(Intent) </code></pre> calls; the service is started as needed, handles each Intent in turn using a worker thread, and stops itself when it runs out of work. <p> This "work queue processor" pattern is commonly used to offload tasks from an application's main thread. The IntentService class exists to simplify this pattern and take care of the mechanics. To use it, extend IntentService and implement <pre><code> onHandleIntent(Intent) </code></pre> . IntentService will receive the Intents, launch a worker thread, and stop the service as appropriate. <p> All requests are handled on a single worker thread -- they may take as long as necessary (and will not block the application's main loop), but only one request will be processed at a time. </p><pre><code>public abstract class IntentService\n</code></pre></section>	https://developer.android.com/reference/android/app/IntentService.html
KeyguardManager	A										<section class="prog__container"><p> Class that can be used to lock and unlock the keyboard. Get an instance of this class by calling <pre><code> getSystemService(java.lang.String) </code></pre> with argument <pre><code> KEYGUARD_SERVICE </code></pre> . The actual class to control the keyboard locking is <pre><code> KeyguardManager.KeyguardLock </code></pre> .</p><pre><code>public class KeyguardManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/KeyguardManager.html
KeyguardManager.KeyguardLock	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 13. </strong> <br/> Use <pre><code> FLAG_DISMISS_KEYGUARD </code></pre> and/or <pre><code> FLAG_SHOW_WHEN_LOCKED </code></pre> instead; this allows you to seamlessly hide the keyguard as your application moves in and out of the foreground and does not require that any special permissions be requested. Handle returned by <pre><code> newKeyguardLock(String) </code></pre> that allows you to disable / reenable the keyguard. </p><pre><code>public class KeyguardManager.KeyguardLock\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/KeyguardManager.KeyguardLock.html
KeyguardManager.OnKeyguardExitResult	A										<section class="prog__container"><p> Callback passed to <pre><code> exitKeyguardSecurely(KeyguardManager.OnKeyguardExitResult) </code></pre> to notify caller of result.</p><pre><code>public static interface KeyguardManager.OnKeyguardExitResult\n</code></pre></section>	https://developer.android.com/reference/android/app/KeyguardManager.OnKeyguardExitResult.html
LauncherActivity	A										<section class="prog__container"><p> Displays a list of all activities which can be performed for a given intent. Launches when clicked.</p><pre><code>public abstract class LauncherActivity\n</code></pre></section>	https://developer.android.com/reference/android/app/LauncherActivity.html
LauncherActivity.IconResizer	A										<section class="prog__container"><p> Utility class to resize icons to match default icon size.</p><pre><code>public class LauncherActivity.IconResizer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/LauncherActivity.IconResizer.html
LauncherActivity.ListItem	A										<section class="prog__container"><p> An item in the list</p><pre><code>public static class LauncherActivity.ListItem\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/LauncherActivity.ListItem.html
ListActivity	A										<section class="prog__container"><p> An activity that displays a list of items by binding to a data source such as an array or Cursor, and exposes event handlers when the user selects an item. <p> ListActivity hosts a <pre><code> ListView </code></pre> object that can be bound to different data sources, typically either an array or a Cursor holding query results. Binding, screen layout, and row layout are discussed in the following sections. <p> <strong> Screen Layout </strong> </p><pre><code>public class ListActivity\n</code></pre></section>	https://developer.android.com/reference/android/app/ListActivity.html
ListFragment	A										<section class="prog__container"><p> A fragment that displays a list of items by binding to a data source such as an array or Cursor, and exposes event handlers when the user selects an item. <p> ListFragment hosts a <pre><code> ListView </code></pre> object that can be bound to different data sources, typically either an array or a Cursor holding query results. Binding, screen layout, and row layout are discussed in the following sections. <p> <strong> Screen Layout </strong> </p><pre><code>public class ListFragment\n</code></pre></section>	https://developer.android.com/reference/android/app/ListFragment.html
LoaderManager	A										<section class="prog__container"><p> Interface associated with an <pre><code> Activity </code></pre> or <pre><code> Fragment </code></pre> for managing one or more <pre><code> Loader </code></pre> instances associated with it. This helps an application manage longer-running operations in conjunction with the Activity or Fragment lifecycle; the most common use of this is with a <pre><code> CursorLoader </code></pre> , however applications are free to write their own loaders for loading other types of data. While the LoaderManager API was introduced in <pre><code> HONEYCOMB </code></pre> , a version of the API at is also available for use on older platforms through <pre><code> FragmentActivity </code></pre> . See the blog post Fragments For All for more details. <p> As an example, here is the full implementation of a <pre><code> Fragment </code></pre> that displays a <pre><code> ListView </code></pre> containing the results of a query against the contacts content provider. It uses a <pre><code> CursorLoader </code></pre> to manage the query on the provider. <pre>public static class CursorLoaderListFragment extends ListFragment implements OnQueryTextListener, OnCloseListener, LoaderManager.LoaderCallbacks&lt;Cursor&gt; { // This is the Adapter being used to display the list's data. SimpleCursorAdapter mAdapter; // The SearchView for doing filtering. SearchView mSearchView; // If non-null, this is the current filter the user has provided. String mCurFilter; @Override public void onActivityCreated(Bundle savedInstanceState) { super.onActivityCreated(savedInstanceState); // Give some text to display if there is no data. In a real // application this would come from a resource. setEmptyText("No phone numbers"); // We have a menu item to show in action bar. setHasOptionsMenu(true); // Create an empty adapter we will use to display the loaded data. mAdapter = new SimpleCursorAdapter(getActivity(), android.R.layout.simple_list_item_2, null, new String[] { Contacts.DISPLAY_NAME, Contacts.CONTACT_STATUS }, new int[] { android.R.id.text1, android.R.id.text2 }, 0); setListAdapter(mAdapter); // Start out with a progress indicator. setListShown(false); // Prepare the loader. Either re-connect with an existing one, // or start a new one. getLoaderManager().initLoader(0, null, this); } public static class MySearchView extends SearchView { public MySearchView(Context context) { super(context); } // The normal SearchView doesn't clear its search text when // collapsed, so we will do this for it. @Override public void onActionViewCollapsed() { setQuery("", false); super.onActionViewCollapsed(); } } @Override public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) { // Place an action bar item for searching. MenuItem item = menu.add("Search"); item.setIcon(android.R.drawable.ic_menu_search); item.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW); mSearchView = new MySearchView(getActivity()); mSearchView.setOnQueryTextListener(this); mSearchView.setOnCloseListener(this); mSearchView.setIconifiedByDefault(true); item.setActionView(mSearchView); } public boolean onQueryTextChange(String newText) { // Called when the action bar search text has changed. Update // the search filter, and restart the loader to do a new query // with this filter. String newFilter = !TextUtils.isEmpty(newText) ? newText : null; // Don't do anything if the filter hasn't actually changed. // Prevents restarting the loader when restoring state. if (mCurFilter == null &amp;&amp; newFilter == null) { return true; } if (mCurFilter != null &amp;&amp; mCurFilter.equals(newFilter)) { return true; } mCurFilter = newFilter; getLoaderManager().restartLoader(0, null, this); return true; } @Override public boolean onQueryTextSubmit(String query) { // Don't care about this. return true; } @Override public boolean onClose() { if (!TextUtils.isEmpty(mSearchView.getQuery())) { mSearchView.setQuery(null, true); } return true; } @Override public void onListItemClick(ListView l, View v, int position, long id) { // Insert desired behavior here. Log.i("FragmentComplexList", "Item clicked: " + id); } // These are the Contacts rows that we will retrieve. static final String[] CONTACTS_SUMMARY_PROJECTION = new String[] { Contacts._ID, Contacts.DISPLAY_NAME, Contacts.CONTACT_STATUS, Contacts.CONTACT_PRESENCE, Contacts.PHOTO_ID, Contacts.LOOKUP_KEY, }; public Loader&lt;Cursor&gt; onCreateLoader(int id, Bundle args) { // This is called when a new Loader needs to be created. This // sample only has one Loader, so we don't care about the ID. // First, pick the base URI to use depending on whether we are // currently filtering. Uri baseUri; if (mCurFilter != null) { baseUri = Uri.withAppendedPath(Contacts.CONTENT_FILTER_URI, Uri.encode(mCurFilter)); } else { baseUri = Contacts.CONTENT_URI; } // Now create and return a CursorLoader that will take care of // creating a Cursor for the data being displayed. String select = "((" + Contacts.DISPLAY_NAME + " NOTNULL) AND (" + Contacts.HAS_PHONE_NUMBER + "=1) AND (" + Contacts.DISPLAY_NAME + " != '' ))"; return new CursorLoader(getActivity(), baseUri, CONTACTS_SUMMARY_PROJECTION, select, null, Contacts.DISPLAY_NAME + " COLLATE LOCALIZED ASC"); } public void onLoadFinished(Loader&lt;Cursor&gt; loader, Cursor data) { // Swap the new cursor in. (The framework will take care of closing the // old cursor once we return.) mAdapter.swapCursor(data); // The list should now be shown. if (isResumed()) { setListShown(true); } else { setListShownNoAnimation(true); } } public void onLoaderReset(Loader&lt;Cursor&gt; loader) { // This is called when the last Cursor provided to onLoadFinished() // above is about to be closed. We need to make sure we are no // longer using it. mAdapter.swapCursor(null); }}</pre> </p><pre><code>public abstract class LoaderManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/LoaderManager.html
LoaderManager.LoaderCallbacks	A										<section class="prog__container"><p> Callback interface for a client to interact with the manager.</p><pre><code>public static interface LoaderManager.LoaderCallbacks\n</code></pre></section>	https://developer.android.com/reference/android/app/LoaderManager.LoaderCallbacks.html
LocalActivityManager	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 13. </strong> <br/> Use the new <pre><code> Fragment </code></pre> and <pre><code> FragmentManager </code></pre> APIs instead; these are also available on older platforms through the Android compatibility package. </p><pre><code>public class LocalActivityManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/LocalActivityManager.html
MediaRouteActionProvider	A										<section class="prog__container"><p> The media route action provider displays a <pre><code> media route button </code></pre> in the application's <pre><code> ActionBar </code></pre> to allow the user to select routes and to control the currently selected route. <p> The application must specify the kinds of routes that the user should be allowed to select by specifying the route types with the <pre><code> setRouteTypes(int) </code></pre> method. </p><pre><code>public class MediaRouteActionProvider\n</code></pre></section>	https://developer.android.com/reference/android/app/MediaRouteActionProvider.html
MediaRouteButton	A										<section class="prog__container"><p> Must be a dimension value, which is a floating point number appended with a unit such as " <pre><code> 14.5sp </code></pre> ".</p><pre><code>public class MediaRouteButton\n</code></pre></section>	https://developer.android.com/reference/android/app/MediaRouteButton.html
NativeActivity	A										<section class="prog__container"><p> Convenience for implementing an activity that will be implemented purely in native code. That is, a game (or game-like thing). There is no need to derive from this class; you can simply declare it in your manifest, and use the NDK APIs from there. <p> A typical manifest would look like: <pre>&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.example.native_activity" android:versionCode="1" android:versionName="1.0"&gt; &lt;!-- This is the platform API where NativeActivity was introduced. --&gt; &lt;uses-sdk android:minSdkVersion="9" /&gt; &lt;!-- This .apk has no Java code itself, so set hasCode to false. --&gt; &lt;application android:label="@string/app_name" android:hasCode="false"&gt; &lt;!-- Our activity is the built-in NativeActivity framework class. This will take care of integrating with our NDK code. --&gt; &lt;activity android:name="android.app.NativeActivity" android:label="@string/app_name" android:configChanges="orientation|keyboardHidden"&gt; &lt;!-- Tell NativeActivity the name of or .so --&gt; &lt;meta-data android:name="android.app.lib_name" android:value="native-activity" /&gt; &lt;intent-filter&gt; &lt;action android:name="android.intent.action.MAIN" /&gt; &lt;category android:name="android.intent.category.LAUNCHER" /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;/application&gt;&lt;/manifest&gt; </pre> <p> A very simple example of native code that is run by NativeActivity follows. This reads input events from the user and uses OpenGLES to draw into the native activity's window. <pre>#include &lt;jni.h&gt;#include &lt;errno.h&gt;#include &lt;EGL/egl.h&gt;#include &lt;GLES/gl.h&gt;#include &lt;android/sensor.h&gt;#include &lt;android/log.h&gt;#include &lt;android_native_app_glue.h&gt;#define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, "native-activity", __VA_ARGS__))#define LOGW(...) ((void)__android_log_print(ANDROID_LOG_WARN, "native-activity", __VA_ARGS__))/** * Our saved state data. */struct saved_state { float angle; int32_t x; int32_t y;};/** * Shared state for our app. */struct engine { struct android_app* app; ASensorManager* sensorManager; const ASensor* accelerometerSensor; ASensorEventQueue* sensorEventQueue; int animating; EGLDisplay display; EGLSurface surface; EGLContext context; int32_t width; int32_t height; struct saved_state state;};/** * Initialize an EGL context for the current display. */static int engine_init_display(struct engine* engine) { // initialize OpenGL ES and EGL /* * Here specify the attributes of the desired configuration. * Below, we select an EGLConfig with at least 8 bits per color * component compatible with on-screen windows */ const EGLint attribs[] = { EGL_SURFACE_TYPE, EGL_WINDOW_BIT, EGL_BLUE_SIZE, 8, EGL_GREEN_SIZE, 8, EGL_RED_SIZE, 8, EGL_NONE }; EGLint w, h, dummy, format; EGLint numConfigs; EGLConfig config; EGLSurface surface; EGLContext context; EGLDisplay display = eglGetDisplay(EGL_DEFAULT_DISPLAY); eglInitialize(display, 0, 0); /* Here, the application chooses the configuration it desires. In this * sample, we have a very simplified selection process, where we pick * the first EGLConfig that matches our criteria */ eglChooseConfig(display, attribs, &amp;config, 1, &amp;numConfigs); /* EGL_NATIVE_VISUAL_ID is an attribute of the EGLConfig that is * guaranteed to be accepted by ANativeWindow_setBuffersGeometry(). * As soon as we picked a EGLConfig, we can safely reconfigure the * ANativeWindow buffers to match, using EGL_NATIVE_VISUAL_ID. */ eglGetConfigAttrib(display, config, EGL_NATIVE_VISUAL_ID, &amp;format); ANativeWindow_setBuffersGeometry(engine-&gt;app-&gt;window, 0, 0, format); surface = eglCreateWindowSurface(display, config, engine-&gt;app-&gt;window, NULL); context = eglCreateContext(display, config, NULL, NULL); if (eglMakeCurrent(display, surface, surface, context) == EGL_FALSE) { LOGW("Unable to eglMakeCurrent"); return -1; } eglQuerySurface(display, surface, EGL_WIDTH, &amp;w); eglQuerySurface(display, surface, EGL_HEIGHT, &amp;h); engine-&gt;display = display; engine-&gt;context = context; engine-&gt;surface = surface; engine-&gt;width = w; engine-&gt;height = h; engine-&gt;state.angle = 0; // Initialize GL state. glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_FASTEST); glEnable(GL_CULL_FACE); glShadeModel(GL_SMOOTH); glDisable(GL_DEPTH_TEST); return 0;}/** * Just the current frame in the display. */static void engine_draw_frame(struct engine* engine) { if (engine-&gt;display == NULL) { // No display. return; } // Just fill the screen with a color. glClearColor(((float)engine-&gt;state.x)/engine-&gt;width, engine-&gt;state.angle, ((float)engine-&gt;state.y)/engine-&gt;height, 1); glClear(GL_COLOR_BUFFER_BIT); eglSwapBuffers(engine-&gt;display, engine-&gt;surface);}/** * Tear down the EGL context currently associated with the display. */static void engine_term_display(struct engine* engine) { if (engine-&gt;display != EGL_NO_DISPLAY) { eglMakeCurrent(engine-&gt;display, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT); if (engine-&gt;context != EGL_NO_CONTEXT) { eglDestroyContext(engine-&gt;display, engine-&gt;context); } if (engine-&gt;surface != EGL_NO_SURFACE) { eglDestroySurface(engine-&gt;display, engine-&gt;surface); } eglTerminate(engine-&gt;display); } engine-&gt;animating = 0; engine-&gt;display = EGL_NO_DISPLAY; engine-&gt;context = EGL_NO_CONTEXT; engine-&gt;surface = EGL_NO_SURFACE;}/** * Process the next input event. */static int32_t engine_handle_input(struct android_app* app, AInputEvent* event) { struct engine* engine = (struct engine*)app-&gt;userData; if (AInputEvent_getType(event) == AINPUT_EVENT_TYPE_MOTION) { engine-&gt;animating = 1; engine-&gt;state.x = AMotionEvent_getX(event, 0); engine-&gt;state.y = AMotionEvent_getY(event, 0); return 1; } return 0;}/** * Process the next main command. */static void engine_handle_cmd(struct android_app* app, int32_t cmd) { struct engine* engine = (struct engine*)app-&gt;userData; switch (cmd) { case APP_CMD_SAVE_STATE: // The system has asked us to save our current state. Do so. engine-&gt;app-&gt;savedState = malloc(sizeof(struct saved_state)); *((struct saved_state*)engine-&gt;app-&gt;savedState) = engine-&gt;state; engine-&gt;app-&gt;savedStateSize = sizeof(struct saved_state); break; case APP_CMD_INIT_WINDOW: // The window is being shown, get it ready. if (engine-&gt;app-&gt;window != NULL) { engine_init_display(engine); engine_draw_frame(engine); } break; case APP_CMD_TERM_WINDOW: // The window is being hidden or closed, clean it up. engine_term_display(engine); break; case APP_CMD_GAINED_FOCUS: // When our app gains focus, we start monitoring the accelerometer. if (engine-&gt;accelerometerSensor != NULL) { ASensorEventQueue_enableSensor(engine-&gt;sensorEventQueue, engine-&gt;accelerometerSensor); // We'd like to get 60 events per second (in us). ASensorEventQueue_setEventRate(engine-&gt;sensorEventQueue, engine-&gt;accelerometerSensor, (1000L/60)*1000); } break; case APP_CMD_LOST_FOCUS: // When our app loses focus, we stop monitoring the accelerometer. // This is to avoid consuming battery while not being used. if (engine-&gt;accelerometerSensor != NULL) { ASensorEventQueue_disableSensor(engine-&gt;sensorEventQueue, engine-&gt;accelerometerSensor); } // Also stop animating. engine-&gt;animating = 0; engine_draw_frame(engine); break; }}/** * This is the main entry point of a native application that is using * android_native_app_glue. It runs in its own thread, with its own * event loop for receiving input events and doing other things. */void android_main(struct android_app* state) { struct engine engine; // Make sure glue isn't stripped. app_dummy(); memset(&amp;engine, 0, sizeof(engine)); state-&gt;userData = &amp;engine; state-&gt;onAppCmd = engine_handle_cmd; state-&gt;onInputEvent = engine_handle_input; engine.app = state; // Prepare to monitor accelerometer engine.sensorManager = ASensorManager_getInstance(); engine.accelerometerSensor = ASensorManager_getDefaultSensor(engine.sensorManager, ASENSOR_TYPE_ACCELEROMETER); engine.sensorEventQueue = ASensorManager_createEventQueue(engine.sensorManager, state-&gt;looper, LOOPER_ID_USER, NULL, NULL); if (state-&gt;savedState != NULL) { // We are starting with a previous saved state; restore from it. engine.state = *(struct saved_state*)state-&gt;savedState; } // loop waiting for stuff to do. while (1) { // Read all pending events. int ident; int events; struct android_poll_source* source; // If not animating, we will block forever waiting for events. // If animating, we loop until all events are read, then continue // to draw the next frame of animation. while ((ident=ALooper_pollAll(engine.animating ? 0 : -1, NULL, &amp;events, (void**)&amp;source)) &gt;= 0) { // Process this event. if (source != NULL) { source-&gt;process(state, source); } // If a sensor has data, process it now. if (ident == LOOPER_ID_USER) { if (engine.accelerometerSensor != NULL) { ASensorEvent event; while (ASensorEventQueue_getEvents(engine.sensorEventQueue, &amp;event, 1) &gt; 0) { LOGI("accelerometer: x=%f y=%f z=%f", event.acceleration.x, event.acceleration.y, event.acceleration.z); } } } // Check if we are exiting. if (state-&gt;destroyRequested != 0) { engine_term_display(&amp;engine); return; } } if (engine.animating) { // Done with events; draw next animation frame. engine.state.angle += .01f; if (engine.state.angle &gt; 1) { engine.state.angle = 0; } // Drawing is throttled to the screen update rate, so there // is no need to do timing here. engine_draw_frame(&amp;engine); } }}</pre> </p><pre><code>public class NativeActivity\n</code></pre></section>	https://developer.android.com/reference/android/app/NativeActivity.html
Notification.Action.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> Notification.Action </code></pre> objects.</p><pre><code>public static final class Notification.Action.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/Notification.Action.Builder.html
Notification.Action.Extender	A										<section class="prog__container"><p> Extender interface for use with <pre><code> extend(Notification.Action.Extender) </code></pre> . Extenders may be used to add metadata or change options on an action builder.</p><pre><code>public static interface Notification.Action.Extender\n</code></pre></section>	https://developer.android.com/reference/android/app/Notification.Action.Extender.html
Notification.Action	A										<section class="prog__container"><p> Structure to encapsulate a named action that can be shown as part of this notification. It must include an icon, a label, and a <pre><code> PendingIntent </code></pre> to be fired when the action is selected by the user. <p> Apps should use <pre><code> addAction(int, CharSequence, PendingIntent) </code></pre> or <pre><code> addAction(Notification.Action) </code></pre> to attach actions. </p><pre><code>public static class Notification.Action\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/Notification.Action.html
Notification.Action.WearableExtender	A										<section class="prog__container"><p> Wearable extender for notification actions. To add extensions to an action, create a new <pre><code> Notification.Action.WearableExtender </code></pre> object using the <pre><code> WearableExtender() </code></pre> constructor and apply it to a <pre><code> Notification.Action.Builder </code></pre> using <pre><code> extend(Notification.Action.Extender) </code></pre> . <pre class="prettyprint"> Notification.Action action = new Notification.Action.Builder( R.drawable.archive_all, "Archive all", actionIntent) .extend(new Notification.Action.WearableExtender() .setAvailableOffline(false)) .build();</pre></p><pre><code>public static final class Notification.Action.WearableExtender\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html
Notification.BigPictureStyle	A										<section class="prog__container"><p> Helper class for generating large-format notifications that include a large image attachment. Here's how you'd set the <pre><code> BigPictureStyle </code></pre> on a notification: <pre class="prettyprint"> Notification notif = new Notification.Builder(mContext) .setContentTitle("New photo from " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_post) .setLargeIcon(aBitmap) .setStyle(new Notification.BigPictureStyle() .bigPicture(aBigBitmap)) .build(); </pre></p><pre><code>public static class Notification.BigPictureStyle\n</code></pre></section>	https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html
Notification.BigTextStyle	A										<section class="prog__container"><p> Helper class for generating large-format notifications that include a lot of text. Here's how you'd set the <pre><code> BigTextStyle </code></pre> on a notification: <pre class="prettyprint"> Notification notif = new Notification.Builder(mContext) .setContentTitle("New mail from " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_mail) .setLargeIcon(aBitmap) .setStyle(new Notification.BigTextStyle() .bigText(aVeryLongString)) .build(); </pre></p><pre><code>public static class Notification.BigTextStyle\n</code></pre></section>	https://developer.android.com/reference/android/app/Notification.BigTextStyle.html
Notification.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> Notification </code></pre> objects. Provides a convenient way to set the various fields of a <pre><code> Notification </code></pre> and generate content views using the platform's notification layout template. If your app supports versions of Android as old as API level 4, you can instead use <pre><code> NotificationCompat.Builder </code></pre> , available in the Android Support library . <p> Example: <pre class="prettyprint"> Notification noti = new Notification.Builder(mContext) .setContentTitle("New mail from " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_mail) .setLargeIcon(aBitmap) .build(); </pre> </p><pre><code>public static class Notification.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/Notification.Builder.html
Notification.CarExtender.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> Notification.CarExtender.UnreadConversation </code></pre> objects.</p><pre><code>public static class Notification.CarExtender.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/Notification.CarExtender.Builder.html
Notification.CarExtender	A										<section class="prog__container"><p> <p> Helper class to add Android Auto extensions to notifications. To create a notification with car extensions: <ol> <li> Create an <pre><code> Notification.Builder </code></pre> , setting any desired properties. <li> Create a <pre><code> Notification.CarExtender </code></pre> . <li> Set car-specific properties using the <pre><code> add </code></pre> and <pre><code> set </code></pre> methods of <pre><code> Notification.CarExtender </code></pre> . <li> Call <pre><code> extend(Notification.Extender) </code></pre> to apply the extensions to a notification. </li> </li> </li> </li> </ol> <pre class="prettyprint"> Notification notification = new Notification.Builder(context) ... .extend(new CarExtender() .set*(...)) .build(); </pre> <p> Car extensions can be accessed on an existing notification by using the <pre><code> CarExtender(Notification) </code></pre> constructor, and then using the <pre><code> get </code></pre> methods to access values. </p><pre><code>public static final class Notification.CarExtender\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/Notification.CarExtender.html
Notification.CarExtender.UnreadConversation	A										<section class="prog__container"><p> A class which holds the unread messages from a conversation.</p><pre><code>public static class Notification.CarExtender.UnreadConversation\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/Notification.CarExtender.UnreadConversation.html
Notification.DecoratedCustomViewStyle	A										<section class="prog__container"><p> Notification style for custom views that are decorated by the system <p> Instead of providing a notification that is completely custom, a developer can set this style and still obtain system decorations like the notification header with the expand affordance and actions. <p> Use <pre><code> setCustomContentView(RemoteViews) </code></pre> , <pre><code> setCustomBigContentView(RemoteViews) </code></pre> and <pre><code> setCustomHeadsUpContentView(RemoteViews) </code></pre> to set the corresponding custom views to display. To use this style with your Notification, feed it to <pre><code> setStyle(android.app.Notification.Style) </code></pre> like so: <pre class="prettyprint"> Notification noti = new Notification.Builder() .setSmallIcon(R.drawable.ic_stat_player) .setLargeIcon(albumArtBitmap)) .setCustomContentView(contentView); .setStyle(<b>new Notification.DecoratedCustomViewStyle()</b>) .build(); </pre> </p><pre><code>public static class Notification.DecoratedCustomViewStyle\n</code></pre></section>	https://developer.android.com/reference/android/app/Notification.DecoratedCustomViewStyle.html
Notification.DecoratedMediaCustomViewStyle	A										<section class="prog__container"><p> Notification style for media custom views that are decorated by the system <p> Instead of providing a media notification that is completely custom, a developer can set this style and still obtain system decorations like the notification header with the expand affordance and actions. <p> Use <pre><code> setCustomContentView(RemoteViews) </code></pre> , <pre><code> setCustomBigContentView(RemoteViews) </code></pre> and <pre><code> setCustomHeadsUpContentView(RemoteViews) </code></pre> to set the corresponding custom views to display. To use this style with your Notification, feed it to <pre><code> setStyle(android.app.Notification.Style) </code></pre> like so: <pre class="prettyprint"> Notification noti = new Notification.Builder() .setSmallIcon(R.drawable.ic_stat_player) .setLargeIcon(albumArtBitmap)) .setCustomContentView(contentView); .setStyle(<b>new Notification.DecoratedMediaCustomViewStyle()</b> .setMediaSession(mySession)) .build(); </pre> </p><pre><code>public static class Notification.DecoratedMediaCustomViewStyle\n</code></pre></section>	https://developer.android.com/reference/android/app/Notification.DecoratedMediaCustomViewStyle.html
Notification.Extender	A										<section class="prog__container"><p> Extender interface for use with <pre><code> extend(Notification.Action.Extender) </code></pre> . Extenders may be used to add metadata or change options on a notification builder.</p><pre><code>public static interface Notification.Extender\n</code></pre></section>	https://developer.android.com/reference/android/app/Notification.Extender.html
Notification	A										<section class="prog__container"><p> A class that represents how a persistent notification is to be presented to the user using the <pre><code> NotificationManager </code></pre> . <p> The <pre><code> Notification.Builder </code></pre> has been added to make it easier to construct Notifications. </p><pre><code>public class Notification\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/Notification.html
Notification.InboxStyle	A										<section class="prog__container"><p> Helper class for generating large-format notifications that include a list of (up to 5) strings. Here's how you'd set the <pre><code> InboxStyle </code></pre> on a notification: <pre class="prettyprint"> Notification notif = new Notification.Builder(mContext) .setContentTitle("5 New mails from " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_mail) .setLargeIcon(aBitmap) .setStyle(new Notification.InboxStyle() .addLine(str1) .addLine(str2) .setContentTitle("") .setSummaryText("+3 more")) .build(); </pre></p><pre><code>public static class Notification.InboxStyle\n</code></pre></section>	https://developer.android.com/reference/android/app/Notification.InboxStyle.html
Notification.MediaStyle	A										<section class="prog__container"><p> Notification style for media playback notifications. In the expanded form, <pre><code> bigContentView </code></pre> , up to 5 <pre><code> Notification.Action </code></pre> s specified with <pre><code> addAction </code></pre> will be shown as icon-only pushbuttons, suitable for transport controls. The Bitmap given to <pre><code> setLargeIcon() </code></pre> will be treated as album artwork. Unlike the other styles provided here, MediaStyle can also modify the standard-size <pre><code> contentView </code></pre> ; by providing action indices to <pre><code> setShowActionsInCompactView(int) </code></pre> you can promote up to 3 actions to be displayed in the standard view alongside the usual content. Notifications created with MediaStyle will have their category set to <pre><code> CATEGORY_TRANSPORT </code></pre> unless you set a different category using <pre><code> setCategory() </code></pre> . Finally, if you attach a <pre><code> MediaSession.Token </code></pre> using <pre><code> setMediaSession(MediaSession.Token) </code></pre> , the System UI can identify this as a notification representing an active media session and respond accordingly (by showing album artwork in the lockscreen, for example). To use this style with your Notification, feed it to <pre><code> setStyle(android.app.Notification.Style) </code></pre> like so: <pre class="prettyprint"> Notification noti = new Notification.Builder() .setSmallIcon(R.drawable.ic_stat_player) .setContentTitle("Track title") .setContentText("Artist - Album") .setLargeIcon(albumArtBitmap)) .setStyle(<b>new Notification.MediaStyle()</b> .setMediaSession(mySession)) .build(); </pre></p><pre><code>public static class Notification.MediaStyle\n</code></pre></section>	https://developer.android.com/reference/android/app/Notification.MediaStyle.html
Notification.MessagingStyle	A										<section class="prog__container"><p> Helper class for generating large-format notifications that include multiple back-and-forth messages of varying types between any number of people. <br> If the platform does not provide large-format notifications, this method has no effect. The user will always see the normal notification view. <br> This class is a "rebuilder": It attaches to a Builder object and modifies its behavior, like so: <pre class="prettyprint"> Notification noti = new Notification.Builder() .setContentTitle("2 new messages wtih " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_message) .setLargeIcon(aBitmap) .setStyle(new Notification.MessagingStyle(resources.getString(R.string.reply_name)) .addMessage(messages[0].getText(), messages[0].getTime(), messages[0].getSender()) .addMessage(messages[1].getText(), messages[1].getTime(), messages[1].getSender())) .build(); </pre> </br> </br></p><pre><code>public static class Notification.MessagingStyle\n</code></pre></section>	https://developer.android.com/reference/android/app/Notification.MessagingStyle.html
Notification.MessagingStyle.Message	A										<section class="prog__container"><p> Constructor</p><pre><code>public static final class Notification.MessagingStyle.Message\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/Notification.MessagingStyle.Message.html
Notification.Style	A										<section class="prog__container"><p> An object that can apply a rich notification style to a <pre><code> Notification.Builder </code></pre> object.</p><pre><code>public static abstract class Notification.Style\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/Notification.Style.html
Notification.WearableExtender	A										<section class="prog__container"><p> Helper class to add wearable extensions to notifications. <p class="note"> See Creating Notifications for Android Wear for more information on how to use this class. <p> To create a notification with wearable extensions: <ol> <li> Create a <pre><code> Notification.Builder </code></pre> , setting any desired properties. <li> Create a <pre><code> Notification.WearableExtender </code></pre> . <li> Set wearable-specific properties using the <pre><code> add </code></pre> and <pre><code> set </code></pre> methods of <pre><code> Notification.WearableExtender </code></pre> . <li> Call <pre><code> extend(Notification.Extender) </code></pre> to apply the extensions to a notification. <li> Post the notification to the notification system with the <pre><code> NotificationManager.notify(...) </code></pre> methods. </li> </li> </li> </li> </li> </ol> <pre class="prettyprint"> Notification notif = new Notification.Builder(mContext) .setContentTitle("New mail from " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_mail) .extend(new Notification.WearableExtender() .setContentIcon(R.drawable.new_mail)) .build(); NotificationManager notificationManger = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE); notificationManger.notify(0, notif);</pre> <p> Wearable extensions can be accessed on an existing notification by using the <pre><code> WearableExtender(Notification) </code></pre> constructor, and then using the <pre><code> get </code></pre> methods to access values. <pre class="prettyprint"> Notification.WearableExtender wearableExtender = new Notification.WearableExtender( notification); List&lt;Notification&gt; pages = wearableExtender.getPages();</pre> </p><pre><code>public static final class Notification.WearableExtender\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/Notification.WearableExtender.html
NotificationManager	A										<section class="prog__container"><p> Class to notify the user of events that happen. This is how you tell the user that something has happened in the background. <p> Notifications can take different forms: <ul> <li> A persistent icon that goes in the status bar and is accessible through the launcher, (when the user selects it, a designated Intent can be launched), </li> <li> Turning on or flashing LEDs on the device, or </li> <li> Alerting the user by flashing the backlight, playing a sound, or vibrating. </li> </ul> <p> Each of the notify methods takes an int id parameter and optionally a <pre><code> String </code></pre> tag parameter, which may be <pre><code> null </code></pre> . These parameters are used to form a pair (tag, id), or ( <pre><code> null </code></pre> , id) if tag is unspecified. This pair identifies this notification from your app to the system, so that pair should be unique within your app. If you call one of the notify methods with a (tag, id) pair that is currently active and a new set of notification parameters, it will be updated. For example, if you pass a new status bar icon, the old icon in the status bar will be replaced with the new one. This is also the same tag and id you pass to the <pre><code> cancel(int) </code></pre> or <pre><code> cancel(String, int) </code></pre> method to clear this notification. <p> You do not instantiate this class directly; instead, retrieve it through <pre><code> getSystemService(Class <t> ) </t> </code></pre> . </p><pre><code>public class NotificationManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/NotificationManager.html
NotificationManager.Policy	A										<section class="prog__container"><p> Notification policy configuration. Represents user-preferences for notification filtering.</p><pre><code>public static class NotificationManager.Policy\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/NotificationManager.Policy.html
android.app	A										<section class="prog__container">Contains high-level classes encapsulating the overall Android application model.</section>	https://developer.android.com/reference/android/app/package-summary.html
PendingIntent.CanceledException	A										<section class="prog__container"><p> Exception thrown when trying to send through a PendingIntent that has been canceled or is otherwise no longer able to execute the request.</p><pre><code>public static class PendingIntent.CanceledException\n</code></pre></section>	https://developer.android.com/reference/android/app/PendingIntent.CanceledException.html
PendingIntent	A										<section class="prog__container"><p> A description of an Intent and target action to perform with it. Instances of this class are created with <pre><code> getActivity(Context, int, Intent, int) </code></pre> , <pre><code> getActivities(Context, int, Intent[], int) </code></pre> , <pre><code> getBroadcast(Context, int, Intent, int) </code></pre> , and <pre><code> getService(Context, int, Intent, int) </code></pre> ; the returned object can be handed to other applications so that they can perform the action you described on your behalf at a later time. <p> By giving a PendingIntent to another application, you are granting it the right to perform the operation you have specified as if the other application was yourself (with the same permissions and identity). As such, you should be careful about how you build the PendingIntent: almost always, for example, the base Intent you supply should have the component name explicitly set to one of your own components, to ensure it is ultimately sent there and nowhere else. <p> A PendingIntent itself is simply a reference to a token maintained by the system describing the original data used to retrieve it. This means that, even if its owning application's process is killed, the PendingIntent itself will remain usable from other processes that have been given it. If the creating application later re-retrieves the same kind of PendingIntent (same operation, same Intent action, data, categories, and components, and same flags), it will receive a PendingIntent representing the same token if that is still valid, and can thus call <pre><code> cancel() </code></pre> to remove it. <p> Because of this behavior, it is important to know when two Intents are considered to be the same for purposes of retrieving a PendingIntent. A common mistake people make is to create multiple PendingIntent objects with Intents that only vary in their "extra" contents, expecting to get a different PendingIntent each time. This does <em> not </em> happen. The parts of the Intent that are used for matching are the same ones defined by <pre><code> Intent.filterEquals </code></pre> . If you use two Intent objects that are equivalent as per <pre><code> Intent.filterEquals </code></pre> , then you will get the same PendingIntent for both of them. <p> There are two typical ways to deal with this. <p> If you truly need multiple distinct PendingIntent objects active at the same time (such as to use as two notifications that are both shown at the same time), then you will need to ensure there is something that is different about them to associate them with different PendingIntents. This may be any of the Intent attributes considered by <pre><code> Intent.filterEquals </code></pre> , or different request code integers supplied to <pre><code> getActivity(Context, int, Intent, int) </code></pre> , <pre><code> getActivities(Context, int, Intent[], int) </code></pre> , <pre><code> getBroadcast(Context, int, Intent, int) </code></pre> , or <pre><code> getService(Context, int, Intent, int) </code></pre> . <p> If you only need one PendingIntent active at a time for any of the Intents you will use, then you can alternatively use the flags <pre><code> FLAG_CANCEL_CURRENT </code></pre> or <pre><code> FLAG_UPDATE_CURRENT </code></pre> to either cancel or modify whatever current PendingIntent is associated with the Intent you are supplying. </p><pre><code>public final class PendingIntent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/PendingIntent.html
PendingIntent.OnFinished	A										<section class="prog__container"><p> Callback interface for discovering when a send operation has completed. Primarily for use with a PendingIntent that is performing a broadcast, this provides the same information as calling <pre><code> Context.sendBroadcast() </code></pre> with a final BroadcastReceiver.</p><pre><code>public static interface PendingIntent.OnFinished\n</code></pre></section>	https://developer.android.com/reference/android/app/PendingIntent.OnFinished.html
Presentation	A										<section class="prog__container"><p> Base class for presentations. <p> A presentation is a special kind of dialog whose purpose is to present content on a secondary display. A <pre><code> Presentation </code></pre> is associated with the target <pre><code> Display </code></pre> at creation time and configures its context and resource configuration according to the display's metrics. </p><pre><code>public class Presentation\n</code></pre></section>	https://developer.android.com/reference/android/app/Presentation.html
ProgressDialog	A										<section class="prog__container"><p> <p> A dialog showing a progress indicator and an optional text message or view. Only a text message or a view can be used at the same time. </p><pre><code>public class ProgressDialog\n</code></pre></section>	https://developer.android.com/reference/android/app/ProgressDialog.html
RemoteInput.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> RemoteInput </code></pre> objects.</p><pre><code>public static final class RemoteInput.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/RemoteInput.Builder.html
RemoteInput	A										<section class="prog__container"><p> A <pre><code> RemoteInput </code></pre> object specifies input to be collected from a user to be passed along with an intent inside a <pre><code> PendingIntent </code></pre> that is sent. Always use <pre><code> RemoteInput.Builder </code></pre> to create instances of this class. <p class="note"> See Receiving Voice Input from a Notification for more information on how to use this class. <p> The following example adds a <pre><code> RemoteInput </code></pre> to a <pre><code> Notification.Action </code></pre> , sets the result key as <pre><code> quick_reply </code></pre> , and sets the label as <pre><code> Quick reply </code></pre> . Users are prompted to input a response when they trigger the action. The results are sent along with the intent and can be retrieved with the result key (provided to the <pre><code> RemoteInput.Builder </code></pre> constructor) from the Bundle returned by <pre><code> getResultsFromIntent(Intent) </code></pre> . <pre class="prettyprint"> public static final String KEY_QUICK_REPLY_TEXT = "quick_reply"; Notification.Action action = new Notification.Action.Builder( R.drawable.reply, "Reply", actionIntent) <b>.addRemoteInput(new RemoteInput.Builder(KEY_QUICK_REPLY_TEXT) .setLabel("Quick reply").build()</b>) .build();</pre> <p> When the <pre><code> PendingIntent </code></pre> is fired, the intent inside will contain the input results if collected. To access these results, use the <pre><code> getResultsFromIntent(Intent) </code></pre> function. The result values will present under the result key passed to the <pre><code> RemoteInput.Builder </code></pre> constructor. <pre class="prettyprint"> public static final String KEY_QUICK_REPLY_TEXT = "quick_reply"; Bundle results = RemoteInput.getResultsFromIntent(intent); if (results != null) { CharSequence quickReplyResult = results.getCharSequence(KEY_QUICK_REPLY_TEXT); }</pre> </p><pre><code>public final class RemoteInput\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/RemoteInput.html
SearchableInfo	A										<section class="prog__container"><p> Searchability meta-data for an activity. Only applications that search other applications should need to use this class. See Searchable Configuration for more information about declaring searchability meta-data for your application.</p><pre><code>public final class SearchableInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/SearchableInfo.html
SearchManager	A										<section class="prog__container"><p> This class provides access to the system search services. <p> In practice, you won't interact with this class directly, as search services are provided through methods in <pre><code> Activity </code></pre> and the <pre><code> ACTION_SEARCH </code></pre> <pre><code> Intent </code></pre> . If you do require direct access to the SearchManager, do not instantiate this class directly. Instead, retrieve it through <pre><code> context.getSystemService(Context.SEARCH_SERVICE) </code></pre> . </p><pre><code>public class SearchManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/SearchManager.html
SearchManager.OnCancelListener	A										<section class="prog__container"><p> See <pre><code> setOnCancelListener(SearchManager.OnCancelListener) </code></pre> for configuring your activity to monitor search UI state.</p><pre><code>public static interface SearchManager.OnCancelListener\n</code></pre></section>	https://developer.android.com/reference/android/app/SearchManager.OnCancelListener.html
SearchManager.OnDismissListener	A										<section class="prog__container"><p> See <pre><code> setOnDismissListener(SearchManager.OnDismissListener) </code></pre> for configuring your activity to monitor search UI state.</p><pre><code>public static interface SearchManager.OnDismissListener\n</code></pre></section>	https://developer.android.com/reference/android/app/SearchManager.OnDismissListener.html
Service	A										<section class="prog__container"><p> A Service is an application component representing either an application's desire to perform a longer-running operation while not interacting with the user or to supply functionality for other applications to use. Each service class must have a corresponding <pre><code> &lt;service&gt; </code></pre> declaration in its package's <pre><code> AndroidManifest.xml </code></pre> . Services can be started with <pre><code> Context.startService() </code></pre> and <pre><code> Context.bindService() </code></pre> . <p> Note that services, like other application objects, run in the main thread of their hosting process. This means that, if your service is going to do any CPU intensive (such as MP3 playback) or blocking (such as networking) operations, it should spawn its own thread in which to do that work. More information on this can be found in Processes and Threads . The <pre><code> IntentService </code></pre> class is available as a standard implementation of Service that has its own thread where it schedules its work to be done. </p><pre><code>public abstract class Service\n</code></pre></section>	https://developer.android.com/reference/android/app/Service.html
SharedElementCallback	A										<section class="prog__container"><p> Listener provided in <pre><code> setEnterSharedElementCallback(SharedElementCallback) </code></pre> and <pre><code> setExitSharedElementCallback(SharedElementCallback) </code></pre> as well as <pre><code> setEnterSharedElementCallback(SharedElementCallback) </code></pre> and <pre><code> setExitSharedElementCallback(SharedElementCallback) </code></pre> to monitor the Shared element transitions. The events can be used to customize Activity and Fragment Transition behavior.</p><pre><code>public abstract class SharedElementCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/SharedElementCallback.html
SharedElementCallback.OnSharedElementsReadyListener	A										<section class="prog__container"><p> Listener to be called after <pre><code> onSharedElementsArrived(List, List, OnSharedElementsReadyListener) </code></pre> when the shared elements are ready to be hidden in the source Activity and shown in the destination Activity.</p><pre><code>public static interface SharedElementCallback.OnSharedElementsReadyListener\n</code></pre></section>	https://developer.android.com/reference/android/app/SharedElementCallback.OnSharedElementsReadyListener.html
TabActivity	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 13. </strong> <br/> New applications should use Fragments instead of this class; to continue to run on older devices, you can use the v4 support library which provides a version of the Fragment API that is compatible down to <pre><code> DONUT </code></pre> . </p><pre><code>public class TabActivity\n</code></pre></section>	https://developer.android.com/reference/android/app/TabActivity.html
TaskStackBuilder	A										<section class="prog__container"><p> Utility class for constructing synthetic back stacks for cross-task navigation on Android 3.0 and newer. <p> In API level 11 (Android 3.0/Honeycomb) the recommended conventions for app navigation using the back key changed. The back key's behavior is local to the current task and does not capture navigation across different tasks. Navigating across tasks and easily reaching the previous task is accomplished through the "recents" UI, accessible through the software-provided Recents key on the navigation or system bar. On devices with the older hardware button configuration the recents UI can be accessed with a long press on the Home key. </p><pre><code>public class TaskStackBuilder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/TaskStackBuilder.html
TimePickerDialog	A										<section class="prog__container"><p> A dialog that prompts the user for the time of day using a <pre><code> TimePicker </code></pre> . <p> See the Pickers guide. </p><pre><code>public class TimePickerDialog\n</code></pre></section>	https://developer.android.com/reference/android/app/TimePickerDialog.html
TimePickerDialog.OnTimeSetListener	A										<section class="prog__container"><p> The callback interface used to indicate the user is done filling in the time (e.g. they clicked on the 'OK' button).</p><pre><code>public static interface TimePickerDialog.OnTimeSetListener\n</code></pre></section>	https://developer.android.com/reference/android/app/TimePickerDialog.OnTimeSetListener.html
UiAutomation.AccessibilityEventFilter	A										<section class="prog__container"><p> Listener for filtering accessibility events.</p><pre><code>public static interface UiAutomation.AccessibilityEventFilter\n</code></pre></section>	https://developer.android.com/reference/android/app/UiAutomation.AccessibilityEventFilter.html
UiAutomation	A										<section class="prog__container"><p> Class for interacting with the device's UI by simulation user actions and introspection of the screen content. It relies on the platform accessibility APIs to introspect the screen and to perform some actions on the remote view tree. It also allows injecting of arbitrary raw input events simulating user interaction with keyboards and touch devices. One can think of a UiAutomation as a special type of <pre><code> AccessibilityService </code></pre> which does not provide hooks for the service life cycle and exposes other APIs that are useful for UI test automation. <p> The APIs exposed by this class are low-level to maximize flexibility when developing UI test automation tools and libraries. Generally, a UiAutomation client should be using a higher-level library or implement high-level functions. For example, performing a tap on the screen requires construction and injecting of a touch down and up events which have to be delivered to the system by a call to <pre><code> injectInputEvent(InputEvent, boolean) </code></pre> . </p><pre><code>public final class UiAutomation\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/UiAutomation.html
UiAutomation.OnAccessibilityEventListener	A										<section class="prog__container"><p> Listener for observing the <pre><code> AccessibilityEvent </code></pre> stream.</p><pre><code>public static interface UiAutomation.OnAccessibilityEventListener\n</code></pre></section>	https://developer.android.com/reference/android/app/UiAutomation.OnAccessibilityEventListener.html
UiModeManager	A										<section class="prog__container"><p> This class provides access to the system uimode services. These services allow applications to control UI modes of the device. It provides functionality to disable the car mode and it gives access to the night mode settings. <p> These facilities are built on top of the underlying <pre><code> ACTION_DOCK_EVENT </code></pre> broadcasts that are sent when the user physical places the device into and out of a dock. When that happens, the UiModeManager switches the system <pre><code> Configuration </code></pre> to the appropriate UI mode, sends broadcasts about the mode switch, and starts the corresponding mode activity if appropriate. See the broadcasts <pre><code> ACTION_ENTER_CAR_MODE </code></pre> and <pre><code> ACTION_ENTER_DESK_MODE </code></pre> for more information. <p> In addition, the user may manually switch the system to car mode without physically being in a dock. While in car mode -- whether by manual action from the user or being physically placed in a dock -- a notification is displayed allowing the user to exit dock mode. Thus the dock mode represented here may be different than the current state of the underlying dock event broadcast. <p> You do not instantiate this class directly; instead, retrieve it through <pre><code> Context.getSystemService(Context.UI_MODE_SERVICE) </code></pre> . </p><pre><code>public class UiModeManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/UiModeManager.html
VoiceInteractor.AbortVoiceRequest	A										<section class="prog__container"><p> Reports that the current interaction can not be complete with voice, so the application will need to switch to a traditional input UI. Applications should only use this when they need to completely bail out of the voice interaction and switch to a traditional UI. When the response comes back, the voice system has handled the request and is ready to switch; at that point the application can start a new non-voice activity. Be sure when starting the new activity to use <pre><code> Intent.FLAG_ACTIVITY_NEW_TASK </code></pre> to keep the new activity out of the current voice interaction task.</p><pre><code>public static class VoiceInteractor.AbortVoiceRequest\n</code></pre></section>	https://developer.android.com/reference/android/app/VoiceInteractor.AbortVoiceRequest.html
VoiceInteractor.CommandRequest	A										<section class="prog__container"><p> Execute a vendor-specific command using the trusted system VoiceInteractionService. This allows an Activity to request additional information from the user needed to complete an action (e.g. booking a table might have several possible times that the user could select from or an app might need the user to agree to a terms of service). The result of the confirmation will be returned through an asynchronous call to either <pre><code> onCommandResult(boolean, android.os.Bundle) </code></pre> or <pre><code> onCancel() </code></pre> . <p> The command is a string that describes the generic operation to be performed. The command will determine how the properties in extras are interpreted and the set of available commands is expected to grow over time. An example might be "com.google.voice.commands.REQUEST_NUMBER_BAGS" to request the number of bags as part of airline check-in. (This is not an actual working example.) </p><pre><code>public static class VoiceInteractor.CommandRequest\n</code></pre></section>	https://developer.android.com/reference/android/app/VoiceInteractor.CommandRequest.html
VoiceInteractor.CompleteVoiceRequest	A										<section class="prog__container"><p> Reports that the current interaction was successfully completed with voice, so the application can report the final status to the user. When the response comes back, the voice system has handled the request and is ready to switch; at that point the application can start a new non-voice activity or finish. Be sure when starting the new activity to use <pre><code> Intent.FLAG_ACTIVITY_NEW_TASK </code></pre> to keep the new activity out of the current voice interaction task.</p><pre><code>public static class VoiceInteractor.CompleteVoiceRequest\n</code></pre></section>	https://developer.android.com/reference/android/app/VoiceInteractor.CompleteVoiceRequest.html
VoiceInteractor.ConfirmationRequest	A										<section class="prog__container"><p> Confirms an operation with the user via the trusted system VoiceInteractionService. This allows an Activity to complete an unsafe operation that would require the user to touch the screen when voice interaction mode is not enabled. The result of the confirmation will be returned through an asynchronous call to either <pre><code> onConfirmationResult(boolean, android.os.Bundle) </code></pre> or <pre><code> onCancel() </code></pre> - these methods should be overridden to define the application specific behavior. <p> In some cases this may be a simple yes / no confirmation or the confirmation could include context information about how the action will be completed (e.g. booking a cab might include details about how long until the cab arrives) so the user can give a confirmation. </p><pre><code>public static class VoiceInteractor.ConfirmationRequest\n</code></pre></section>	https://developer.android.com/reference/android/app/VoiceInteractor.ConfirmationRequest.html
VoiceInteractor	A										<section class="prog__container"><p> Interface for an <pre><code> Activity </code></pre> to interact with the user through voice. Use <pre><code> Activity.getVoiceInteractor </code></pre> to retrieve the interface, if the activity is currently involved in a voice interaction. <p> The voice interactor revolves around submitting voice interaction requests to the back-end voice interaction service that is working with the user. These requests are submitted with <pre><code> submitRequest(VoiceInteractor.Request) </code></pre> , providing a new instance of a <pre><code> VoiceInteractor.Request </code></pre> subclass describing the type of operation to perform -- currently the possible requests are <pre><code> VoiceInteractor.ConfirmationRequest </code></pre> and <pre><code> VoiceInteractor.CommandRequest </code></pre> . <p> Once a request is submitted, the voice system will process it and eventually deliver the result to the request object. The application can cancel a pending request at any time. <p> The VoiceInteractor is integrated with Activity's state saving mechanism, so that if an activity is being restarted with retained state, it will retain the current VoiceInteractor and any outstanding requests. Because of this, you should always use <pre><code> Request.getActivity </code></pre> to get back to the activity of a request, rather than holding on to the activity instance yourself, either explicitly or implicitly through a non-static inner class. </p><pre><code>public final class VoiceInteractor\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/VoiceInteractor.html
VoiceInteractor.PickOptionRequest	A										<section class="prog__container"><p> Select a single option from multiple potential options with the user via the trusted system VoiceInteractionService. Typically, the application would present this visually as a list view to allow selecting the option by touch. The result of the confirmation will be returned through an asynchronous call to either <pre><code> onPickOptionResult(boolean, VoiceInteractor.PickOptionRequest.Option[], Bundle) </code></pre> or <pre><code> onCancel() </code></pre> - these methods should be overridden to define the application specific behavior.</p><pre><code>public static class VoiceInteractor.PickOptionRequest\n</code></pre></section>	https://developer.android.com/reference/android/app/VoiceInteractor.PickOptionRequest.html
VoiceInteractor.PickOptionRequest.Option	A										<section class="prog__container"><p> Represents a single option that the user may select using their voice. The <pre><code> getIndex() </code></pre> method should be used as a unique ID to identify the option when it is returned from the voice interactor.</p><pre><code>public static final class VoiceInteractor.PickOptionRequest.Option\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/VoiceInteractor.PickOptionRequest.Option.html
VoiceInteractor.Prompt	A										<section class="prog__container"><p> A set of voice prompts to use with the voice interaction system to confirm an action, select an option, or do similar operations. Multiple voice prompts may be provided for variety. A visual prompt must be provided, which might not match the spoken version. For example, the confirmation "Are you sure you want to purchase this item?" might use a visual label like "Purchase item".</p><pre><code>public static class VoiceInteractor.Prompt\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/VoiceInteractor.Prompt.html
VoiceInteractor.Request	A										<section class="prog__container"><p> Base class for voice interaction requests that can be submitted to the interactor. Do not instantiate this directly -- instead, use the appropriate subclass.</p><pre><code>public static abstract class VoiceInteractor.Request\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/VoiceInteractor.Request.html
WallpaperInfo	A										<section class="prog__container"><p> This class is used to specify meta information of a wallpaper service.</p><pre><code>public final class WallpaperInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/WallpaperInfo.html
WallpaperManager	A										<section class="prog__container"><p> Provides access to the system wallpaper. With WallpaperManager, you can get the current wallpaper, get the desired dimensions for the wallpaper, set the wallpaper, and more. Get an instance of WallpaperManager with <pre><code> getInstance() </code></pre> . <p> An app can check whether wallpapers are supported for the current user, by calling <pre><code> isWallpaperSupported() </code></pre> , and whether setting of wallpapers is allowed, by calling <pre><code> isSetWallpaperAllowed() </code></pre> . </p><pre><code>public class WallpaperManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/WallpaperManager.html
DeviceAdminInfo	A										<section class="prog__container"><p> This class is used to specify meta information of a device administrator component.</p><pre><code>public final class DeviceAdminInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/admin/DeviceAdminInfo.html
DeviceAdminReceiver	A										<section class="prog__container"><p> Base class for implementing a device administration component. This class provides a convenience for interpreting the raw intent actions that are sent by the system. <p> The callback methods, like the base <pre><code> BroadcastReceiver.onReceive() </code></pre> method, happen on the main thread of the process. Thus long running operations must be done on another thread. Note that because a receiver is done once returning from its receive function, such long-running operations should probably be done in a <pre><code> Service </code></pre> . <p> When publishing your DeviceAdmin subclass as a receiver, it must handle <pre><code> ACTION_DEVICE_ADMIN_ENABLED </code></pre> and require the <pre><code> BIND_DEVICE_ADMIN </code></pre> permission. A typical manifest entry would look like: </p><pre><code>public class DeviceAdminReceiver\n</code></pre></section>	https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html
DevicePolicyManager	A										<section class="prog__container"><p> Public interface for managing policies enforced on a device. Most clients of this class must be registered with the system as a device administrator . Additionally, a device administrator may be registered as either a profile or device owner. A given method is accessible to all device administrators unless the documentation for that method specifies that it is restricted to either device or profile owners. Any application calling an api may only pass as an argument a device administrator component it owns. Otherwise, a <pre><code> SecurityException </code></pre> will be thrown. </p><pre><code>public class DevicePolicyManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html
android.app.admin	A										<section class="prog__container">Provides device administration features at the system level, allowing you to createsecurity-aware applications that are useful in enterprise settings, in which IT professionalsrequire rich control over employee devices.</section>	https://developer.android.com/reference/android/app/admin/package-summary.html
SecurityLog	A										<section class="prog__container"><p> A class representing a security event log entry.</p><pre><code>public class SecurityLog\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/admin/SecurityLog.html
SecurityLog.SecurityEvent	A										<section class="prog__container"><p> A class representing a security event log entry.</p><pre><code>public static final class SecurityLog.SecurityEvent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/admin/SecurityLog.SecurityEvent.html
SystemUpdatePolicy	A										<section class="prog__container"><p> A class that represents a local system update policy set by the device owner.</p><pre><code>public class SystemUpdatePolicy\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/admin/SystemUpdatePolicy.html
AssistContent	A										<section class="prog__container"><p> Holds information about the content an application is viewing, to hand to an assistant at the user's request. This is filled in by <pre><code> Activity.onProvideAssistContent </code></pre> .</p><pre><code>public class AssistContent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/assist/AssistContent.html
AssistStructure	A										<section class="prog__container"><p> Assist data automatically created by the platform's implementation of <pre><code> onProvideAssistData(Bundle) </code></pre> .</p><pre><code>public class AssistStructure\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/assist/AssistStructure.html
AssistStructure.ViewNode	A										<section class="prog__container"><p> Describes a single view in the assist data.</p><pre><code>public static class AssistStructure.ViewNode\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html
AssistStructure.WindowNode	A										<section class="prog__container"><p> Describes a window in the assist data.</p><pre><code>public static class AssistStructure.WindowNode\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/assist/AssistStructure.WindowNode.html
android.app.assist	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/app/assist/package-summary.html
BackupAgent	A										<section class="prog__container"><p> Provides the central interface between an application and Android's data backup infrastructure. An application that wishes to participate in the backup and restore mechanism will declare a subclass of <pre><code> BackupAgent </code></pre> , implement the <pre><code> onBackup() </code></pre> and <pre><code> onRestore() </code></pre> methods, and provide the name of its backup agent class in its <pre><code> AndroidManifest.xml </code></pre> file via the <pre><code> &lt;application&gt; </code></pre> tag's <pre><code> android:backupAgent </code></pre> attribute. </p><pre><code>public abstract class BackupAgent\n</code></pre></section>	https://developer.android.com/reference/android/app/backup/BackupAgent.html
BackupAgentHelper	A										<section class="prog__container"><p> A convenient <pre><code> BackupAgent </code></pre> wrapper class that automatically manages heterogeneous data sets within the backup data, each identified by a unique key prefix. When processing a backup or restore operation, the BackupAgentHelper dispatches to one or more installed <pre><code> BackupHelper </code></pre> objects, each of which is responsible for a defined subset of the data being processed. <p> An application will typically extend this class in its own backup agent. Then, within the agent's <pre><code> onCreate() </code></pre> method, it will call <pre><code> addHelper() </code></pre> one or more times to install the handlers for each kind of data it wishes to manage within its backups. <p> The Android framework currently provides two predefined <pre><code> BackupHelper </code></pre> classes: </p><pre><code>public class BackupAgentHelper\n</code></pre></section>	https://developer.android.com/reference/android/app/backup/BackupAgentHelper.html
BackupDataInput	A										<section class="prog__container"><p> Provides the structured interface through which a <pre><code> BackupAgent </code></pre> reads information from the backup data set, via its <pre><code> onRestore() </code></pre> method. The data is presented as a set of "entities," each representing one named record as previously stored by the agent's <pre><code> onBackup() </code></pre> implementation. An entity is composed of a descriptive header plus a byte array that holds the raw data saved in the remote backup. <p> The agent must consume every entity in the data stream, otherwise the restored state of the application will be incomplete. </p><pre><code>public class BackupDataInput\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/backup/BackupDataInput.html
BackupDataInputStream	A										<section class="prog__container"><p> Provides an <pre><code> InputStream </code></pre> -like interface for accessing an entity's data during a restore operation. Used by <pre><code> BackupHelper </code></pre> classes within the <pre><code> BackupAgentHelper </code></pre> mechanism. <p> When <pre><code> BackupHelper.restoreEntity() </code></pre> is called, the current entity's header has already been read from the underlying <pre><code> BackupDataInput </code></pre> . The entity's key string and total data size are available through this class's <pre><code> getKey() </code></pre> and <pre><code> size() </code></pre> methods, respectively. <p class="note"> <strong> Note: </strong> The caller should take care not to seek or close the underlying data source, nor read more than <pre><code> size() </code></pre> bytes from the stream. </p><pre><code>public class BackupDataInputStream\n</code></pre></section>	https://developer.android.com/reference/android/app/backup/BackupDataInputStream.html
BackupDataOutput	A										<section class="prog__container"><p> Provides the structured interface through which a <pre><code> BackupAgent </code></pre> commits information to the backup data set, via its <pre><code> onBackup() </code></pre> method. Data written for backup is presented as a set of "entities," key/value pairs in which each binary data record "value" is named with a string "key." <p> To commit a data record to the backup transport, the agent's <pre><code> onBackup() </code></pre> method first writes an "entity header" that supplies the key string for the record and the total size of the binary value for the record. After the header has been written, the agent then writes the binary entity value itself. The entity value can be written in multiple chunks if desired, as long as the total count of bytes written matches what was supplied to <pre><code> writeEntityHeader() </code></pre> . <p> Entity key strings are considered to be unique within a given application's backup data set. If a backup agent writes a new entity under an existing key string, its value will replace any previous value in the transport's remote data store. You can remove a record entirely from the remote data set by writing a new entity header using the existing record's key, but supplying a negative <pre><code> dataSize </code></pre> parameter. When you do so, the agent does not need to call <pre><code> writeEntityData(byte[], int) </code></pre> . </p><pre><code>public class BackupDataOutput\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/backup/BackupDataOutput.html
BackupHelper	A										<section class="prog__container"><p> Defines the calling interface that <pre><code> BackupAgentHelper </code></pre> uses when dispatching backup and restore operations to the installed helpers. Applications can define and install their own helpers as well as using those provided as part of the Android framework. <p> Although multiple helper objects may be installed simultaneously, each helper is responsible only for handling its own data, and will not see entities created by other components within the backup system. Invocations of multiple helpers are performed sequentially by the <pre><code> BackupAgentHelper </code></pre> , with each helper given a chance to access its own saved state from within the state record produced during the previous backup operation. </p><pre><code>public interface BackupHelper\n</code></pre></section>	https://developer.android.com/reference/android/app/backup/BackupHelper.html
BackupManager	A										<section class="prog__container"><p> The interface through which an application interacts with the Android backup service to request backup and restore operations. Applications instantiate it using the constructor and issue calls through that instance. <p> When an application has made changes to data which should be backed up, a call to <pre><code> dataChanged() </code></pre> will notify the backup service. The system will then schedule a backup operation to occur in the near future. Repeated calls to <pre><code> dataChanged() </code></pre> have no further effect until the backup operation actually occurs. <p> A backup or restore operation for your application begins when the system launches the <pre><code> BackupAgent </code></pre> subclass you've declared in your manifest. See the documentation for <pre><code> BackupAgent </code></pre> for a detailed description of how the operation then proceeds. <p> Several attributes affecting the operation of the backup and restore mechanism can be set on the <pre><code> &lt;application&gt; </code></pre> tag in your application's AndroidManifest.xml file. </p><pre><code>public class BackupManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/backup/BackupManager.html
FileBackupHelper	A										<section class="prog__container"><p> A helper class that can be used in conjunction with <pre><code> BackupAgentHelper </code></pre> to manage the backup of a set of files. Whenever backup is performed, all files changed since the last backup will be saved in their entirety. When backup first occurs, every file in the list provided to <pre><code> FileBackupHelper(Context, String...) </code></pre> will be backed up. <p> During restore, if the helper encounters data for a file that was not specified when the FileBackupHelper object was constructed, that data will be ignored. <p class="note"> <strong> Note: </strong> This should be used only with small configuration files, not large binary files. </p><pre><code>public class FileBackupHelper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/backup/FileBackupHelper.html
FullBackupDataOutput	A										<section class="prog__container"><p> Provides the interface through which a <pre><code> BackupAgent </code></pre> writes entire files to a full backup data set, via its <pre><code> onFullBackup(FullBackupDataOutput) </code></pre> method.</p><pre><code>public class FullBackupDataOutput\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/backup/FullBackupDataOutput.html
android.app.backup	A										<section class="prog__container">Contains the backup and restore functionality available toapplications. If a user wipes the data on their device or upgrades to a new Android-powereddevice, all applications that have enabled backup can restore the user's previous data when theapplication is reinstalled.</section>	https://developer.android.com/reference/android/app/backup/package-summary.html
RestoreObserver	A										<section class="prog__container"><p> Callback class for receiving progress reports during a restore operation. These methods will all be called on your application's main thread.</p><pre><code>public abstract class RestoreObserver\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/backup/RestoreObserver.html
SharedPreferencesBackupHelper	A										<section class="prog__container"><p> A helper class that can be used in conjunction with <pre><code> BackupAgentHelper </code></pre> to manage the backup of <pre><code> SharedPreferences </code></pre> . Whenever a backup is performed, it will back up all named shared preferences that have changed since the last backup operation. <p> To use this class, the application's backup agent class should extend <pre><code> BackupAgentHelper </code></pre> . Then, in the agent's <pre><code> onCreate() </code></pre> method, an instance of this class should be allocated and installed as a backup/restore handler within the BackupAgentHelper framework. For example, an agent supporting backup and restore for an application with two groups of <pre><code> SharedPreferences </code></pre> data might look something like this: <pre> import android.app.backup.BackupAgentHelper; import android.app.backup.SharedPreferencesBackupHelper; public class MyBackupAgent extends BackupAgentHelper { // The names of the SharedPreferences groups that the application maintains. These // are the same strings that are passed to <pre><code>getSharedPreferences(String, int)</code></pre>. static final String PREFS_DISPLAY = "displayprefs"; static final String PREFS_SCORES = "highscores"; // An arbitrary string used within the BackupAgentHelper implementation to // identify the SharedPreferenceBackupHelper's data. static final String MY_PREFS_BACKUP_KEY = "myprefs"; // Simply allocate a helper and install it void onCreate() { SharedPreferencesBackupHelper helper = new SharedPreferencesBackupHelper(this, PREFS_DISPLAY, PREFS_SCORES); addHelper(MY_PREFS_BACKUP_KEY, helper); } }</pre> <p> No further implementation is needed; the <pre><code> BackupAgentHelper </code></pre> mechanism automatically dispatches the <pre><code> BackupAgent.onBackup() </code></pre> and <pre><code> BackupAgent.onRestore() </code></pre> callbacks to the SharedPreferencesBackupHelper as appropriate. </p><pre><code>public class SharedPreferencesBackupHelper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/backup/SharedPreferencesBackupHelper.html
JobInfo.Builder	A										<section class="prog__container"><p> Builder class for constructing <pre><code> JobInfo </code></pre> objects.</p><pre><code>public static final class JobInfo.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/job/JobInfo.Builder.html
JobInfo	A										<section class="prog__container"><p> Container of data passed to the <pre><code> JobScheduler </code></pre> fully encapsulating the parameters required to schedule work against the calling application. These are constructed using the <pre><code> JobInfo.Builder </code></pre> . You must specify at least one sort of constraint on the JobInfo object that you are creating. The goal here is to provide the scheduler with high-level semantics about the work you want to accomplish. Doing otherwise with throw an exception in your app.</p><pre><code>public class JobInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/job/JobInfo.html
JobInfo.TriggerContentUri	A										<section class="prog__container"><p> Information about a content URI modification that a job would like to trigger on.</p><pre><code>public static final class JobInfo.TriggerContentUri\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/job/JobInfo.TriggerContentUri.html
JobParameters	A										<section class="prog__container"><p> Contains the parameters used to configure/identify your job. You do not create this object yourself, instead it is handed in to your application by the System.</p><pre><code>public class JobParameters\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/job/JobParameters.html
JobScheduler	A										<section class="prog__container"><p> This is an API for scheduling various types of jobs against the framework that will be executed in your application's own process. <p> See <pre><code> JobInfo </code></pre> for more description of the types of jobs that can be run and how to construct them. You will construct these JobInfo objects and pass them to the JobScheduler with <pre><code> schedule(JobInfo) </code></pre> . When the criteria declared are met, the system will execute this job on your application's <pre><code> JobService </code></pre> . You identify which JobService is meant to execute the logic for your job when you create the JobInfo with <pre><code> JobInfo.Builder(int, android.content.ComponentName) </code></pre> . </p><pre><code>public abstract class JobScheduler\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/job/JobScheduler.html
JobService	A										<section class="prog__container"><p> <p> Entry point for the callback from the <pre><code> JobScheduler </code></pre> . </p><pre><code>public abstract class JobService\n</code></pre></section>	https://developer.android.com/reference/android/app/job/JobService.html
android.app.job	A										<section class="prog__container">Entry point for the callback from the</section>	https://developer.android.com/reference/android/app/job/package-summary.html
ConfigurationStats	A										<section class="prog__container"><p> Represents the usage statistics of a device <pre><code> Configuration </code></pre> for a specific time range.</p><pre><code>public final class ConfigurationStats\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/usage/ConfigurationStats.html
NetworkStats.Bucket	A										<section class="prog__container"><p> Buckets are the smallest elements of a query result. As some dimensions of a result may be aggregated (e.g. time or state) some values may be equal across all buckets.</p><pre><code>public static class NetworkStats.Bucket\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/usage/NetworkStats.Bucket.html
NetworkStats	A										<section class="prog__container"><p> Class providing enumeration over buckets of network usage statistics. <pre><code> NetworkStats </code></pre> objects are returned as results to various queries in <pre><code> NetworkStatsManager </code></pre> .</p><pre><code>public final class NetworkStats\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/usage/NetworkStats.html
NetworkStatsManager	A										<section class="prog__container"><pre><code>public class NetworkStatsManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/usage/NetworkStatsManager.html
NetworkStatsManager.UsageCallback	A										<section class="prog__container"><p> Base class for usage callbacks. Should be extended by applications wanting notifications.</p><pre><code>public static abstract class NetworkStatsManager.UsageCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/usage/NetworkStatsManager.UsageCallback.html
android.app.usage	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/app/usage/package-summary.html
UsageEvents.Event	A										<section class="prog__container"><p> An event representing a state change for a component.</p><pre><code>public static final class UsageEvents.Event\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/usage/UsageEvents.Event.html
UsageEvents	A										<section class="prog__container"><p> A result returned from <pre><code> queryEvents(long, long) </code></pre> from which to read <pre><code> UsageEvents.Event </code></pre> objects.</p><pre><code>public final class UsageEvents\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/usage/UsageEvents.html
UsageStats	A										<section class="prog__container"><p> Contains usage statistics for an app package for a specific time range.</p><pre><code>public final class UsageStats\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/usage/UsageStats.html
UsageStatsManager	A										<section class="prog__container"><pre><code>public final class UsageStatsManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/app/usage/UsageStatsManager.html
AppWidgetHost	A										<section class="prog__container"><p> AppWidgetHost provides the interaction with the AppWidget service for apps, like the home screen, that want to embed AppWidgets in their UI.</p><pre><code>public class AppWidgetHost\nextends Object</code></pre></section>	https://developer.android.com/reference/android/appwidget/AppWidgetHost.html
AppWidgetHostView	A										<section class="prog__container"><p> Provides the glue to show AppWidget views. This class offers automatic animation between updates, and will try recycling old views for each incoming <pre><code> RemoteViews </code></pre> .</p><pre><code>public class AppWidgetHostView\n</code></pre></section>	https://developer.android.com/reference/android/appwidget/AppWidgetHostView.html
AppWidgetManager	A										<section class="prog__container"><p> Updates AppWidget state; gets information about installed AppWidget providers and other AppWidget related state. </p><pre><code>public class AppWidgetManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/appwidget/AppWidgetManager.html
AppWidgetProvider	A										<section class="prog__container"><p> A convenience class to aid in implementing an AppWidget provider. Everything you can do with AppWidgetProvider, you can do with a regular <pre><code> BroadcastReceiver </code></pre> . AppWidgetProvider merely parses the relevant fields out of the Intent that is received in <pre><code> onReceive(Context,Intent) </code></pre> , and calls hook methods with the received extras. <p> Extend this class and override one or more of the <pre><code> onUpdate(Context, AppWidgetManager, int[]) </code></pre> , <pre><code> onDeleted(Context, int[]) </code></pre> , <pre><code> onEnabled(Context) </code></pre> or <pre><code> onDisabled(Context) </code></pre> methods to implement your own AppWidget functionality. </p><pre><code>public class AppWidgetProvider\n</code></pre></section>	https://developer.android.com/reference/android/appwidget/AppWidgetProvider.html
AppWidgetProviderInfo	A										<section class="prog__container"><p> Describes the meta data for an installed AppWidget provider. The fields in this class correspond to the fields in the <pre><code> &lt;appwidget-provider&gt; </code></pre> xml tag.</p><pre><code>public class AppWidgetProviderInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/appwidget/AppWidgetProviderInfo.html
android.appwidget	A										<section class="prog__container">Contains the components necessary to create "app widgets", which users can embed in otherapplications (such as the home screen) to quickly access application data and services withoutlaunching a new activity.</section>	https://developer.android.com/reference/android/appwidget/package-summary.html
BluetoothA2dp	A										<section class="prog__container"><p> This class provides the public APIs to control the Bluetooth A2DP profile. <p> BluetoothA2dp is a proxy object for controlling the Bluetooth A2DP Service via IPC. Use <pre><code> getProfileProxy(Context, BluetoothProfile.ServiceListener, int) </code></pre> to get the BluetoothA2dp proxy object. <p> Android only supports one connected Bluetooth A2dp device at a time. Each method is protected with its appropriate permission. </p><pre><code>public final class BluetoothA2dp\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html
BluetoothAdapter	A										<section class="prog__container"><p> Represents the local device Bluetooth adapter. The <pre><code> BluetoothAdapter </code></pre> lets you perform fundamental Bluetooth tasks, such as initiate device discovery, query a list of bonded (paired) devices, instantiate a <pre><code> BluetoothDevice </code></pre> using a known MAC address, and create a <pre><code> BluetoothServerSocket </code></pre> to listen for connection requests from other devices, and start a scan for Bluetooth LE devices. <p> To get a <pre><code> BluetoothAdapter </code></pre> representing the local Bluetooth adapter, when running on JELLY_BEAN_MR1 and below, call the static <pre><code> getDefaultAdapter() </code></pre> method; when running on JELLY_BEAN_MR2 and higher, call <pre><code> getAdapter() </code></pre> . Fundamentally, this is your starting point for all Bluetooth actions. Once you have the local adapter, you can get a set of <pre><code> BluetoothDevice </code></pre> objects representing all paired devices with <pre><code> getBondedDevices() </code></pre> ; start device discovery with <pre><code> startDiscovery() </code></pre> ; or create a <pre><code> BluetoothServerSocket </code></pre> to listen for incoming connection requests with <pre><code> listenUsingRfcommWithServiceRecord(String, UUID) </code></pre> ; or start a scan for Bluetooth LE devices with <pre><code> startLeScan(LeScanCallback) </code></pre> . <p> This class is thread safe. <p class="note"> <strong> Note: </strong> Most methods require the <pre><code> BLUETOOTH </code></pre> permission and some also require the <pre><code> BLUETOOTH_ADMIN </code></pre> permission. </p><pre><code>public final class BluetoothAdapter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html
BluetoothAdapter.LeScanCallback	A										<section class="prog__container"><p> Callback interface used to deliver LE scan results.</p><pre><code>public static interface BluetoothAdapter.LeScanCallback\n</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.LeScanCallback.html
BluetoothAssignedNumbers	A										<section class="prog__container"><p> Bluetooth Assigned Numbers. <p> For now we only include Company ID values. </p><pre><code>public class BluetoothAssignedNumbers\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html
BluetoothClass.Device	A										<section class="prog__container"><p> Defines all device class constants. <p> Each <pre><code> BluetoothClass </code></pre> encodes exactly one device class, with major and minor components. <p> The constants in <pre><code> BluetoothClass.Device </code></pre> represent a combination of major and minor device components (the complete device class). The constants in <pre><code> BluetoothClass.Device.Major </code></pre> represent only major device classes. <p> See <pre><code> BluetoothClass.Service </code></pre> for service class constants. </p><pre><code>public static class BluetoothClass.Device\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html
BluetoothClass.Device.Major	A										<section class="prog__container"><p> Defines all major device class constants. <p> See <pre><code> BluetoothClass.Device </code></pre> for minor classes. </p><pre><code>public static class BluetoothClass.Device.Major\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html
BluetoothClass	A										<section class="prog__container"><p> Represents a Bluetooth class, which describes general characteristics and capabilities of a device. For example, a Bluetooth class will specify the general device type such as a phone, a computer, or headset, and whether it's capable of services such as audio or telephony. <p> Every Bluetooth class is composed of zero or more service classes, and exactly one device class. The device class is further broken down into major and minor device class components. <p> <pre><code> BluetoothClass </code></pre> is useful as a hint to roughly describe a device (for example to show an icon in the UI), but does not reliably describe which Bluetooth profiles or services are actually supported by a device. Accurate service discovery is done through SDP requests, which are automatically performed when creating an RFCOMM socket with <pre><code> createRfcommSocketToServiceRecord(UUID) </code></pre> and <pre><code> listenUsingRfcommWithServiceRecord(String, UUID) </code></pre> </p><pre><code>public final class BluetoothClass\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothClass.html
BluetoothClass.Service	A										<section class="prog__container"><p> Defines all service class constants. <p> Each <pre><code> BluetoothClass </code></pre> encodes zero or more service classes. </p><pre><code>public static final class BluetoothClass.Service\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html
BluetoothDevice	A										<section class="prog__container"><p> Represents a remote Bluetooth device. A <pre><code> BluetoothDevice </code></pre> lets you create a connection with the respective device or query information about it, such as the name, address, class, and bonding state. <p> This class is really just a thin wrapper for a Bluetooth hardware address. Objects of this class are immutable. Operations on this class are performed on the remote Bluetooth hardware address, using the <pre><code> BluetoothAdapter </code></pre> that was used to create this <pre><code> BluetoothDevice </code></pre> . <p> To get a <pre><code> BluetoothDevice </code></pre> , use <pre><code> BluetoothAdapter.getRemoteDevice(String) </code></pre> to create one representing a device of a known MAC address (which you can get through device discovery with <pre><code> BluetoothAdapter </code></pre> ) or get one from the set of bonded devices returned by <pre><code> BluetoothAdapter.getBondedDevices() </code></pre> . You can then open a <pre><code> BluetoothSocket </code></pre> for communication with the remote device, using <pre><code> createRfcommSocketToServiceRecord(UUID) </code></pre> . <p class="note"> <strong> Note: </strong> Requires the <pre><code> BLUETOOTH </code></pre> permission. </p><pre><code>public final class BluetoothDevice\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html
BluetoothGatt	A										<section class="prog__container"><p> Public API for the Bluetooth GATT Profile. <p> This class provides Bluetooth GATT functionality to enable communication with Bluetooth Smart or Smart Ready devices. <p> To connect to a remote peripheral device, create a <pre><code> BluetoothGattCallback </code></pre> and call <pre><code> connectGatt(Context, boolean, BluetoothGattCallback) </code></pre> to get a instance of this class. GATT capable devices can be discovered using the Bluetooth device discovery or BLE scan process. </p><pre><code>public final class BluetoothGatt\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html
BluetoothGattCallback	A										<section class="prog__container"><p> This abstract class is used to implement <pre><code> BluetoothGatt </code></pre> callbacks.</p><pre><code>public abstract class BluetoothGattCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html
BluetoothGattCharacteristic	A										<section class="prog__container"><p> Represents a Bluetooth GATT Characteristic <p> A GATT characteristic is a basic data element used to construct a GATT service, <pre><code> BluetoothGattService </code></pre> . The characteristic contains a value as well as additional information and optional GATT descriptors, <pre><code> BluetoothGattDescriptor </code></pre> . </p><pre><code>public class BluetoothGattCharacteristic\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html
BluetoothGattDescriptor	A										<section class="prog__container"><p> Represents a Bluetooth GATT Descriptor <p> GATT Descriptors contain additional information and attributes of a GATT characteristic, <pre><code> BluetoothGattCharacteristic </code></pre> . They can be used to describe the characteristic's features or to control certain behaviours of the characteristic. </p><pre><code>public class BluetoothGattDescriptor\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html
BluetoothGattServer	A										<section class="prog__container"><p> Public API for the Bluetooth GATT Profile server role. <p> This class provides Bluetooth GATT server role functionality, allowing applications to create Bluetooth Smart services and characteristics. <p> BluetoothGattServer is a proxy object for controlling the Bluetooth Service via IPC. Use <pre><code> openGattServer(Context, BluetoothGattServerCallback) </code></pre> to get an instance of this class. </p><pre><code>public final class BluetoothGattServer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html
BluetoothGattServerCallback	A										<section class="prog__container"><p> This abstract class is used to implement <pre><code> BluetoothGattServer </code></pre> callbacks.</p><pre><code>public abstract class BluetoothGattServerCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html
BluetoothGattService	A										<section class="prog__container"><p> Represents a Bluetooth GATT Service <p> Gatt Service contains a collection of <pre><code> BluetoothGattCharacteristic </code></pre> , as well as referenced services. </p><pre><code>public class BluetoothGattService\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html
BluetoothHeadset	A										<section class="prog__container"><p> Public API for controlling the Bluetooth Headset Service. This includes both Bluetooth Headset and Handsfree (v1.5) profiles. <p> BluetoothHeadset is a proxy object for controlling the Bluetooth Headset Service via IPC. <p> Use <pre><code> getProfileProxy(Context, BluetoothProfile.ServiceListener, int) </code></pre> to get the BluetoothHeadset proxy object. Use <pre><code> closeProfileProxy(int, BluetoothProfile) </code></pre> to close the service connection. <p> Android only supports one connected Bluetooth Headset at a time. Each method is protected with its appropriate permission. </p><pre><code>public final class BluetoothHeadset\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html
BluetoothHealth	A										<section class="prog__container"><p> Public API for Bluetooth Health Profile. <p> BluetoothHealth is a proxy object for controlling the Bluetooth Service via IPC. <p> How to connect to a health device which is acting in the source role. <li> Use <pre><code> getProfileProxy(Context, BluetoothProfile.ServiceListener, int) </code></pre> to get the BluetoothHealth proxy object. </li> <li> Create an <pre><code> BluetoothHealth </code></pre> callback and call <pre><code> registerSinkAppConfiguration(String, int, BluetoothHealthCallback) </code></pre> to register an application configuration </li> <li> Pair with the remote device. This currently needs to be done manually from Bluetooth Settings </li> <li> Connect to a health device using <pre><code> connectChannelToSource(BluetoothDevice, BluetoothHealthAppConfiguration) </code></pre> . Some devices will connect the channel automatically. The <pre><code> BluetoothHealth </code></pre> callback will inform the application of channel state change. </li> <li> Use the file descriptor provided with a connected channel to read and write data to the health channel. </li> <li> The received data needs to be interpreted using a health manager which implements the IEEE 11073-xxxxx specifications. <li> When done, close the health channel by calling <pre><code> disconnectChannel(BluetoothDevice, BluetoothHealthAppConfiguration, int) </code></pre> and unregister the application configuration calling <pre><code> unregisterAppConfiguration(BluetoothHealthAppConfiguration) </code></pre> </li> </li> </p><pre><code>public final class BluetoothHealth\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html
BluetoothHealthAppConfiguration	A										<section class="prog__container"><p> The Bluetooth Health Application Configuration that is used in conjunction with the <pre><code> BluetoothHealth </code></pre> class. This class represents an application configuration that the Bluetooth Health third party application will register to communicate with the remote Bluetooth health device.</p><pre><code>public final class BluetoothHealthAppConfiguration\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothHealthAppConfiguration.html
BluetoothHealthCallback	A										<section class="prog__container"><p> This abstract class is used to implement <pre><code> BluetoothHealth </code></pre> callbacks.</p><pre><code>public abstract class BluetoothHealthCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothHealthCallback.html
BluetoothManager	A										<section class="prog__container"><p> High level manager used to obtain an instance of an <pre><code> BluetoothAdapter </code></pre> and to conduct overall Bluetooth Management. <p> Use <pre><code> getSystemService(java.lang.String) </code></pre> with <pre><code> BLUETOOTH_SERVICE </code></pre> to create an <pre><code> BluetoothManager </code></pre> , then call <pre><code> getAdapter() </code></pre> to obtain the <pre><code> BluetoothAdapter </code></pre> . <p> Alternately, you can just call the static helper <pre><code> getDefaultAdapter() </code></pre> . </p><pre><code>public final class BluetoothManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothManager.html
BluetoothProfile	A										<section class="prog__container"><p> Public APIs for the Bluetooth Profiles. <p> Clients should call <pre><code> getProfileProxy(Context, BluetoothProfile.ServiceListener, int) </code></pre> , to get the Profile Proxy. Each public profile implements this interface. </p><pre><code>public interface BluetoothProfile\n</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html
BluetoothProfile.ServiceListener	A										<section class="prog__container"><p> An interface for notifying BluetoothProfile IPC clients when they have been connected or disconnected to the service.</p><pre><code>public static interface BluetoothProfile.ServiceListener\n</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothProfile.ServiceListener.html
BluetoothServerSocket	A										<section class="prog__container"><p> A listening Bluetooth socket. <p> The interface for Bluetooth Sockets is similar to that of TCP sockets: <pre><code> Socket </code></pre> and <pre><code> ServerSocket </code></pre> . On the server side, use a <pre><code> BluetoothServerSocket </code></pre> to create a listening server socket. When a connection is accepted by the <pre><code> BluetoothServerSocket </code></pre> , it will return a new <pre><code> BluetoothSocket </code></pre> to manage the connection. On the client side, use a single <pre><code> BluetoothSocket </code></pre> to both initiate an outgoing connection and to manage the connection. <p> The most common type of Bluetooth socket is RFCOMM, which is the type supported by the Android APIs. RFCOMM is a connection-oriented, streaming transport over Bluetooth. It is also known as the Serial Port Profile (SPP). <p> To create a listening <pre><code> BluetoothServerSocket </code></pre> that's ready for incoming connections, use <pre><code> BluetoothAdapter.listenUsingRfcommWithServiceRecord() </code></pre> . Then call <pre><code> accept() </code></pre> to listen for incoming connection requests. This call will block until a connection is established, at which point, it will return a <pre><code> BluetoothSocket </code></pre> to manage the connection. Once the <pre><code> BluetoothSocket </code></pre> is acquired, it's a good idea to call <pre><code> close() </code></pre> on the <pre><code> BluetoothServerSocket </code></pre> when it's no longer needed for accepting connections. Closing the <pre><code> BluetoothServerSocket </code></pre> will <em> not </em> close the returned <pre><code> BluetoothSocket </code></pre> . <p> <pre><code> BluetoothServerSocket </code></pre> is thread safe. In particular, <pre><code> close() </code></pre> will always immediately abort ongoing operations and close the server socket. <p class="note"> <strong> Note: </strong> Requires the <pre><code> BLUETOOTH </code></pre> permission. </p><pre><code>public final class BluetoothServerSocket\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html
BluetoothSocket	A										<section class="prog__container"><p> A connected or connecting Bluetooth socket. <p> The interface for Bluetooth Sockets is similar to that of TCP sockets: <pre><code> Socket </code></pre> and <pre><code> ServerSocket </code></pre> . On the server side, use a <pre><code> BluetoothServerSocket </code></pre> to create a listening server socket. When a connection is accepted by the <pre><code> BluetoothServerSocket </code></pre> , it will return a new <pre><code> BluetoothSocket </code></pre> to manage the connection. On the client side, use a single <pre><code> BluetoothSocket </code></pre> to both initiate an outgoing connection and to manage the connection. <p> The most common type of Bluetooth socket is RFCOMM, which is the type supported by the Android APIs. RFCOMM is a connection-oriented, streaming transport over Bluetooth. It is also known as the Serial Port Profile (SPP). <p> To create a <pre><code> BluetoothSocket </code></pre> for connecting to a known device, use <pre><code> BluetoothDevice.createRfcommSocketToServiceRecord() </code></pre> . Then call <pre><code> connect() </code></pre> to attempt a connection to the remote device. This call will block until a connection is established or the connection fails. <p> To create a <pre><code> BluetoothSocket </code></pre> as a server (or "host"), see the <pre><code> BluetoothServerSocket </code></pre> documentation. <p> Once the socket is connected, whether initiated as a client or accepted as a server, open the IO streams by calling <pre><code> getInputStream() </code></pre> and <pre><code> getOutputStream() </code></pre> in order to retrieve <pre><code> InputStream </code></pre> and <pre><code> OutputStream </code></pre> objects, respectively, which are automatically connected to the socket. <p> <pre><code> BluetoothSocket </code></pre> is thread safe. In particular, <pre><code> close() </code></pre> will always immediately abort ongoing operations and close the socket. <p class="note"> <strong> Note: </strong> Requires the <pre><code> BLUETOOTH </code></pre> permission. </p><pre><code>public final class BluetoothSocket\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html
android.bluetooth	A										<section class="prog__container">Provides classes that manage Bluetooth functionality, such as scanning fordevices, connecting with devices, and managing data transfer between devices.The Bluetooth API supports both "Classic Bluetooth" and Bluetooth Low Energy.</section>	https://developer.android.com/reference/android/bluetooth/package-summary.html
AdvertiseCallback	A										<section class="prog__container"><p> Bluetooth LE advertising callbacks, used to deliver advertising operation status.</p><pre><code>public abstract class AdvertiseCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html
AdvertiseData.Builder	A										<section class="prog__container"><p> Builder for <pre><code> AdvertiseData </code></pre> .</p><pre><code>public static final class AdvertiseData.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html
AdvertiseData	A										<section class="prog__container"><p> Advertise data packet container for Bluetooth LE advertising. This represents the data to be advertised as well as the scan response data for active scans. <p> Use <pre><code> AdvertiseData.Builder </code></pre> to create an instance of <pre><code> AdvertiseData </code></pre> to be advertised. </p><pre><code>public final class AdvertiseData\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html
AdvertiseSettings.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> AdvertiseSettings </code></pre> .</p><pre><code>public static final class AdvertiseSettings.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html
AdvertiseSettings	A										<section class="prog__container"><p> The <pre><code> AdvertiseSettings </code></pre> provide a way to adjust advertising preferences for each Bluetooth LE advertisement instance. Use <pre><code> AdvertiseSettings.Builder </code></pre> to create an instance of this class.</p><pre><code>public final class AdvertiseSettings\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html
BluetoothLeAdvertiser	A										<section class="prog__container"><p> This class provides a way to perform Bluetooth LE advertise operations, such as starting and stopping advertising. An advertiser can broadcast up to 31 bytes of advertisement data represented by <pre><code> AdvertiseData </code></pre> . <p> To get an instance of <pre><code> BluetoothLeAdvertiser </code></pre> , call the <pre><code> getBluetoothLeAdvertiser() </code></pre> method. <p> <b> Note: </b> Most of the methods here require <pre><code> BLUETOOTH_ADMIN </code></pre> permission. </p><pre><code>public final class BluetoothLeAdvertiser\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html
BluetoothLeScanner	A										<section class="prog__container"><p> This class provides methods to perform scan related operations for Bluetooth LE devices. An application can scan for a particular type of Bluetooth LE devices using <pre><code> ScanFilter </code></pre> . It can also request different types of callbacks for delivering the result. <p> Use <pre><code> getBluetoothLeScanner() </code></pre> to get an instance of <pre><code> BluetoothLeScanner </code></pre> . <p> <b> Note: </b> Most of the scan methods here require <pre><code> BLUETOOTH_ADMIN </code></pre> permission. </p><pre><code>public final class BluetoothLeScanner\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html
android.bluetooth.le	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/bluetooth/le/package-summary.html
ScanCallback	A										<section class="prog__container"><p> Bluetooth LE scan callbacks. Scan results are reported using these callbacks.</p><pre><code>public abstract class ScanCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html
ScanFilter.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> ScanFilter </code></pre> .</p><pre><code>public static final class ScanFilter.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html
ScanFilter	A										<section class="prog__container"><p> Criteria for filtering result from Bluetooth LE scans. A <pre><code> ScanFilter </code></pre> allows clients to restrict scan results to only those that are of interest to them. <p> Current filtering on the following fields are supported: <li> Service UUIDs which identify the bluetooth gatt services running on the device. <li> Name of remote Bluetooth LE device. <li> Mac address of the remote device. <li> Service data which is the data associated with a service. <li> Manufacturer specific data which is the data associated with a particular manufacturer. </li> </li> </li> </li> </li> </p><pre><code>public final class ScanFilter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html
ScanRecord	A										<section class="prog__container"><p> Represents a scan record from Bluetooth LE scan.</p><pre><code>public final class ScanRecord\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html
ScanResult	A										<section class="prog__container"><p> ScanResult for Bluetooth LE scan.</p><pre><code>public final class ScanResult\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/ScanResult.html
ScanSettings.Builder	A										<section class="prog__container"><p> Builder for <pre><code> ScanSettings </code></pre> .</p><pre><code>public static final class ScanSettings.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html
ScanSettings	A										<section class="prog__container"><p> Bluetooth LE scan settings are passed to <pre><code> startScan(ScanCallback) </code></pre> to define the parameters for the scan.</p><pre><code>public final class ScanSettings\nextends Object</code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html
AbstractThreadedSyncAdapter	A										<section class="prog__container"><p> An abstract implementation of a SyncAdapter that spawns a thread to invoke a sync operation. If a sync operation is already in progress when a sync request is received, an error will be returned to the new request and the existing request will be allowed to continue. However if there is no sync in progress then a thread will be spawned and <pre><code> onPerformSync(Account, Bundle, String, ContentProviderClient, SyncResult) </code></pre> will be invoked on that thread. <p> Syncs can be cancelled at any time by the framework. For example a sync that was not user-initiated and lasts longer than 30 minutes will be considered timed-out and cancelled. Similarly the framework will attempt to determine whether or not an adapter is making progress by monitoring its network activity over the course of a minute. If the network traffic over this window is close enough to zero the sync will be cancelled. You can also request the sync be cancelled via <pre><code> cancelSync(Account, String) </code></pre> or <pre><code> cancelSync(SyncRequest) </code></pre> . <p> A sync is cancelled by issuing a <pre><code> interrupt() </code></pre> on the syncing thread. <strong> Either your code in <pre><code> onPerformSync(Account, Bundle, String, ContentProviderClient, SyncResult) </code></pre> must check <pre><code> interrupted() </code></pre> , or you you must override one of <pre><code> onSyncCanceled(Thread) </code></pre> / <pre><code> onSyncCanceled() </code></pre> </strong> (depending on whether or not your adapter supports syncing of multiple accounts in parallel). If your adapter does not respect the cancel issued by the framework you run the risk of your app's entire process being killed. <p> In order to be a sync adapter one must extend this class, provide implementations for the abstract methods and write a service that returns the result of <pre><code> getSyncAdapterBinder() </code></pre> in the service's <pre><code> onBind(android.content.Intent) </code></pre> when invoked with an intent with action <pre><code> android.content.SyncAdapter </code></pre> . This service must specify the following intent filter and metadata tags in its AndroidManifest.xml file <pre> &lt;intent-filter&gt; &lt;action android:name="android.content.SyncAdapter" /&gt; &lt;/intent-filter&gt; &lt;meta-data android:name="android.content.SyncAdapter" android:resource="@xml/syncadapter" /&gt; </pre> The <pre><code> android:resource </code></pre> attribute must point to a resource that looks like: <pre> &lt;sync-adapter xmlns:android="http://schemas.android.com/apk/res/android" android:contentAuthority="authority" android:accountType="accountType" android:userVisible="true|false" android:supportsUploading="true|false" android:allowParallelSyncs="true|false" android:isAlwaysSyncable="true|false" android:syncAdapterSettingsAction="ACTION_OF_SETTINGS_ACTIVITY" /&gt; </pre> <ul> <li> The <pre><code> android:contentAuthority </code></pre> and <pre><code> android:accountType </code></pre> attributes indicate which content authority and for which account types this sync adapter serves. <li> <pre><code> android:userVisible </code></pre> defaults to true and controls whether or not this sync adapter shows up in the Sync Settings screen. <li> <pre><code> android:supportsUploading </code></pre> defaults to true and if true an upload-only sync will be requested for all syncadapters associated with an authority whenever that authority's content provider does a <pre><code> notifyChange(android.net.Uri, android.database.ContentObserver, boolean) </code></pre> with syncToNetwork set to true. <li> <pre><code> android:allowParallelSyncs </code></pre> defaults to false and if true indicates that the sync adapter can handle syncs for multiple accounts at the same time. Otherwise the SyncManager will wait until the sync adapter is not in use before requesting that it sync an account's data. <li> <pre><code> android:isAlwaysSyncable </code></pre> defaults to false and if true tells the SyncManager to intialize the isSyncable state to 1 for that sync adapter for each account that is added. <li> <pre><code> android:syncAdapterSettingsAction </code></pre> defaults to null and if supplied it specifies an Intent action of an activity that can be used to adjust the sync adapter's sync settings. The activity must live in the same package as the sync adapter. </li> </li> </li> </li> </li> </li> </ul> </p><pre><code>public abstract class AbstractThreadedSyncAdapter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html
ActivityNotFoundException	A										<section class="prog__container"><p> This exception is thrown when a call to <pre><code> startActivity(Intent) </code></pre> or one of its variants fails because an Activity can not be found to execute the given Intent.</p><pre><code>public class ActivityNotFoundException\n</code></pre></section>	https://developer.android.com/reference/android/content/ActivityNotFoundException.html
AsyncQueryHandler	A										<section class="prog__container"><p> A helper class to help make handling asynchronous <pre><code> ContentResolver </code></pre> queries easier.</p><pre><code>public abstract class AsyncQueryHandler\n</code></pre></section>	https://developer.android.com/reference/android/content/AsyncQueryHandler.html
AsyncQueryHandler.WorkerArgs	A										<section class="prog__container"><pre><code>protected static final class AsyncQueryHandler.WorkerArgs\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html
AsyncQueryHandler.WorkerHandler	A										<section class="prog__container"><p> Subclasses must implement this to receive messages.</p><pre><code>protected class AsyncQueryHandler.WorkerHandler\n</code></pre></section>	https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerHandler.html
AsyncTaskLoader	A										<section class="prog__container"><p> Abstract Loader that provides an <pre><code> AsyncTask </code></pre> to do the work. See <pre><code> Loader </code></pre> and <pre><code> LoaderManager </code></pre> for more details. <p> Here is an example implementation of an AsyncTaskLoader subclass that loads the currently installed applications from the package manager. This implementation takes care of retrieving the application labels and sorting its result set from them, monitoring for changes to the installed applications, and rebuilding the list when a change in configuration requires this (such as a locale change). <pre>/** * This class holds the per-item data in our Loader. */public static class AppEntry { public AppEntry(AppListLoader loader, ApplicationInfo info) { mLoader = loader; mInfo = info; mApkFile = new File(info.sourceDir); } public ApplicationInfo getApplicationInfo() { return mInfo; } public String getLabel() { return mLabel; } public Drawable getIcon() { if (mIcon == null) { if (mApkFile.exists()) { mIcon = mInfo.loadIcon(mLoader.mPm); return mIcon; } else { mMounted = false; } } else if (!mMounted) { // If the app wasn't mounted but is now mounted, reload // its icon. if (mApkFile.exists()) { mMounted = true; mIcon = mInfo.loadIcon(mLoader.mPm); return mIcon; } } else { return mIcon; } return mLoader.getContext().getResources().getDrawable( android.R.drawable.sym_def_app_icon); } @Override public String toString() { return mLabel; } void loadLabel(Context context) { if (mLabel == null || !mMounted) { if (!mApkFile.exists()) { mMounted = false; mLabel = mInfo.packageName; } else { mMounted = true; CharSequence label = mInfo.loadLabel(context.getPackageManager()); mLabel = label != null ? label.toString() : mInfo.packageName; } } } private final AppListLoader mLoader; private final ApplicationInfo mInfo; private final File mApkFile; private String mLabel; private Drawable mIcon; private boolean mMounted;}/** * Perform alphabetical comparison of application entry objects. */public static final Comparator&lt;AppEntry&gt; ALPHA_COMPARATOR = new Comparator&lt;AppEntry&gt;() { private final Collator sCollator = Collator.getInstance(); @Override public int compare(AppEntry object1, AppEntry object2) { return sCollator.compare(object1.getLabel(), object2.getLabel()); }};/** * Helper for determining if the configuration has changed in an interesting * way so we need to rebuild the app list. */public static class InterestingConfigChanges { final Configuration mLastConfiguration = new Configuration(); int mLastDensity; boolean applyNewConfig(Resources res) { int configChanges = mLastConfiguration.updateFrom(res.getConfiguration()); boolean densityChanged = mLastDensity != res.getDisplayMetrics().densityDpi; if (densityChanged || (configChanges&amp;(ActivityInfo.CONFIG_LOCALE |ActivityInfo.CONFIG_UI_MODE|ActivityInfo.CONFIG_SCREEN_LAYOUT)) != 0) { mLastDensity = res.getDisplayMetrics().densityDpi; return true; } return false; }}/** * Helper class to look for interesting changes to the installed apps * so that the loader can be updated. */public static class PackageIntentReceiver extends BroadcastReceiver { final AppListLoader mLoader; public PackageIntentReceiver(AppListLoader loader) { mLoader = loader; IntentFilter filter = new IntentFilter(Intent.ACTION_PACKAGE_ADDED); filter.addAction(Intent.ACTION_PACKAGE_REMOVED); filter.addAction(Intent.ACTION_PACKAGE_CHANGED); filter.addDataScheme("package"); mLoader.getContext().registerReceiver(this, filter); // Register for events related to sdcard installation. IntentFilter sdFilter = new IntentFilter(); sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE); sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE); mLoader.getContext().registerReceiver(this, sdFilter); } @Override public void onReceive(Context context, Intent intent) { // Tell the loader about the change. mLoader.onContentChanged(); }}/** * A custom Loader that loads all of the installed applications. */public static class AppListLoader extends AsyncTaskLoader&lt;List&lt;AppEntry&gt;&gt; { final InterestingConfigChanges mLastConfig = new InterestingConfigChanges(); final PackageManager mPm; List&lt;AppEntry&gt; mApps; PackageIntentReceiver mPackageObserver; public AppListLoader(Context context) { super(context); // Retrieve the package manager for later use; note we don't // use 'context' directly but instead the save global application // context returned by getContext(). mPm = getContext().getPackageManager(); } /** * This is where the bulk of our work is done. This function is * called in a background thread and should generate a new set of * data to be published by the loader. */ @Override public List&lt;AppEntry&gt; loadInBackground() { // Retrieve all known applications. List&lt;ApplicationInfo&gt; apps = mPm.getInstalledApplications( PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS); if (apps == null) { apps = new ArrayList&lt;ApplicationInfo&gt;(); } final Context context = getContext(); // Create corresponding array of entries and load their labels. List&lt;AppEntry&gt; entries = new ArrayList&lt;AppEntry&gt;(apps.size()); for (int i=0; i&lt;apps.size(); i++) { AppEntry entry = new AppEntry(this, apps.get(i)); entry.loadLabel(context); entries.add(entry); } // Sort the list. Collections.sort(entries, ALPHA_COMPARATOR); // Done! return entries; } /** * Called when there is new data to deliver to the client. The * super class will take care of delivering it; the implementation * here just adds a little more logic. */ @Override public void deliverResult(List&lt;AppEntry&gt; apps) { if (isReset()) { // An async query came in while the loader is stopped. We // don't need the result. if (apps != null) { onReleaseResources(apps); } } List&lt;AppEntry&gt; oldApps = mApps; mApps = apps; if (isStarted()) { // If the Loader is currently started, we can immediately // deliver its results. super.deliverResult(apps); } // At this point we can release the resources associated with // 'oldApps' if needed; now that the new result is delivered we // know that it is no longer in use. if (oldApps != null) { onReleaseResources(oldApps); } } /** * Handles a request to start the Loader. */ @Override protected void onStartLoading() { if (mApps != null) { // If we currently have a result available, deliver it // immediately. deliverResult(mApps); } // Start watching for changes in the app data. if (mPackageObserver == null) { mPackageObserver = new PackageIntentReceiver(this); } // Has something interesting in the configuration changed since we // last built the app list? boolean configChange = mLastConfig.applyNewConfig(getContext().getResources()); if (takeContentChanged() || mApps == null || configChange) { // If the data has changed since the last time it was loaded // or is not currently available, start a load. forceLoad(); } } /** * Handles a request to stop the Loader. */ @Override protected void onStopLoading() { // Attempt to cancel the current load task if possible. cancelLoad(); } /** * Handles a request to cancel a load. */ @Override public void onCanceled(List&lt;AppEntry&gt; apps) { super.onCanceled(apps); // At this point we can release the resources associated with 'apps' // if needed. onReleaseResources(apps); } /** * Handles a request to completely reset the Loader. */ @Override protected void onReset() { super.onReset(); // Ensure the loader is stopped onStopLoading(); // At this point we can release the resources associated with 'apps' // if needed. if (mApps != null) { onReleaseResources(mApps); mApps = null; } // Stop monitoring for changes. if (mPackageObserver != null) { getContext().unregisterReceiver(mPackageObserver); mPackageObserver = null; } } /** * Helper function to take care of releasing resources associated * with an actively loaded data set. */ protected void onReleaseResources(List&lt;AppEntry&gt; apps) { // For a simple List&lt;&gt; there is nothing to do. For something // like a Cursor, we would close it here. }}</pre> <p> An example implementation of a fragment that uses the above loader to show the currently installed applications in a list is below. <pre>public static class AppListAdapter extends ArrayAdapter&lt;AppEntry&gt; { private final LayoutInflater mInflater; public AppListAdapter(Context context) { super(context, android.R.layout.simple_list_item_2); mInflater = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE); } public void setData(List&lt;AppEntry&gt; data) { clear(); if (data != null) { addAll(data); } } /** * Populate new items in the list. */ @Override public View getView(int position, View convertView, ViewGroup parent) { View view; if (convertView == null) { view = mInflater.inflate(R.layout.list_item_icon_text, parent, false); } else { view = convertView; } AppEntry item = getItem(position); ((ImageView)view.findViewById(R.id.icon)).setImageDrawable(item.getIcon()); ((TextView)view.findViewById(R.id.text)).setText(item.getLabel()); return view; }}public static class AppListFragment extends ListFragment implements OnQueryTextListener, OnCloseListener, LoaderManager.LoaderCallbacks&lt;List&lt;AppEntry&gt;&gt; { // This is the Adapter being used to display the list's data. AppListAdapter mAdapter; // The SearchView for doing filtering. SearchView mSearchView; // If non-null, this is the current filter the user has provided. String mCurFilter; @Override public void onActivityCreated(Bundle savedInstanceState) { super.onActivityCreated(savedInstanceState); // Give some text to display if there is no data. In a real // application this would come from a resource. setEmptyText("No applications"); // We have a menu item to show in action bar. setHasOptionsMenu(true); // Create an empty adapter we will use to display the loaded data. mAdapter = new AppListAdapter(getActivity()); setListAdapter(mAdapter); // Start out with a progress indicator. setListShown(false); // Prepare the loader. Either re-connect with an existing one, // or start a new one. getLoaderManager().initLoader(0, null, this); } public static class MySearchView extends SearchView { public MySearchView(Context context) { super(context); } // The normal SearchView doesn't clear its search text when // collapsed, so we will do this for it. @Override public void onActionViewCollapsed() { setQuery("", false); super.onActionViewCollapsed(); } } @Override public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) { // Place an action bar item for searching. MenuItem item = menu.add("Search"); item.setIcon(android.R.drawable.ic_menu_search); item.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW); mSearchView = new MySearchView(getActivity()); mSearchView.setOnQueryTextListener(this); mSearchView.setOnCloseListener(this); mSearchView.setIconifiedByDefault(true); item.setActionView(mSearchView); } @Override public boolean onQueryTextChange(String newText) { // Called when the action bar search text has changed. Since this // is a simple array adapter, we can just have it do the filtering. mCurFilter = !TextUtils.isEmpty(newText) ? newText : null; mAdapter.getFilter().filter(mCurFilter); return true; } @Override public boolean onQueryTextSubmit(String query) { // Don't care about this. return true; } @Override public boolean onClose() { if (!TextUtils.isEmpty(mSearchView.getQuery())) { mSearchView.setQuery(null, true); } return true; } @Override public void onListItemClick(ListView l, View v, int position, long id) { // Insert desired behavior here. Log.i("LoaderCustom", "Item clicked: " + id); } @Override public Loader&lt;List&lt;AppEntry&gt;&gt; onCreateLoader(int id, Bundle args) { // This is called when a new Loader needs to be created. This // sample only has one Loader with no arguments, so it is simple. return new AppListLoader(getActivity()); } @Override public void onLoadFinished(Loader&lt;List&lt;AppEntry&gt;&gt; loader, List&lt;AppEntry&gt; data) { // Set the new data in the adapter. mAdapter.setData(data); // The list should now be shown. if (isResumed()) { setListShown(true); } else { setListShownNoAnimation(true); } } @Override public void onLoaderReset(Loader&lt;List&lt;AppEntry&gt;&gt; loader) { // Clear the data in the adapter. mAdapter.setData(null); }}</pre> </p><pre><code>public abstract class AsyncTaskLoader\n</code></pre></section>	https://developer.android.com/reference/android/content/AsyncTaskLoader.html
BroadcastReceiver	A										<section class="prog__container"><p> Base class for code that receives and handles broadcast intents sent by <pre><code> sendBroadcast(Intent) </code></pre> . <p> You can either dynamically register an instance of this class with <pre><code> Context.registerReceiver() </code></pre> or statically declare an implementation with the <pre><code> &lt;receiver&gt; </code></pre> tag in your <pre><code> AndroidManifest.xml </code></pre> . </p><pre><code>public abstract class BroadcastReceiver\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/BroadcastReceiver.html
BroadcastReceiver.PendingResult	A										<section class="prog__container"><p> State for a result that is pending for a broadcast receiver. Returned by <pre><code> goAsync() </code></pre> while in <pre><code> BroadcastReceiver.onReceive() </code></pre> . This allows you to return from onReceive() without having the broadcast terminate; you must call <pre><code> finish() </code></pre> once you are done with the broadcast. This allows you to process the broadcast off of the main thread of your app. <p> Note on threading: the state inside of this class is not itself thread-safe, however you can use it from any thread if you properly sure that you do not have races. Typically this means you will hand the entire object to another thread, which will be solely responsible for setting any results and finally calling <pre><code> finish() </code></pre> . </p><pre><code>public static class BroadcastReceiver.PendingResult\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/BroadcastReceiver.PendingResult.html
ClipboardManager	A										<section class="prog__container"><p> Interface to the clipboard service, for placing and retrieving text in the global clipboard. <p> You do not instantiate this class directly; instead, retrieve it through <pre><code> getSystemService(Class <t> ) </t> </code></pre> . <p> The ClipboardManager API itself is very simple: it consists of methods to atomically get and set the current primary clipboard data. That data is expressed as a <pre><code> ClipData </code></pre> object, which defines the protocol for data exchange between applications. </p><pre><code>public class ClipboardManager\n</code></pre></section>	https://developer.android.com/reference/android/content/ClipboardManager.html
ClipboardManager.OnPrimaryClipChangedListener	A										<section class="prog__container"><p> Defines a listener callback that is invoked when the primary clip on the clipboard changes. Objects that want to register a listener call <pre><code> addPrimaryClipChangedListener() </code></pre> with an object that implements OnPrimaryClipChangedListener.</p><pre><code>public static interface ClipboardManager.OnPrimaryClipChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/content/ClipboardManager.OnPrimaryClipChangedListener.html
ClipData	A										<section class="prog__container"><p> Representation of a clipped data on the clipboard. <p> ClipData is a complex type containing one or more Item instances, each of which can hold one or more representations of an item of data. For display to the user, it also has a label. </p><pre><code>public class ClipData\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/ClipData.html
ClipData.Item	A										<section class="prog__container"><p> Description of a single item in a ClipData. <p> The types than an individual item can currently contain are: </p><pre><code>public static class ClipData.Item\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/ClipData.Item.html
ClipDescription	A										<section class="prog__container"><p> Meta-data describing the contents of a <pre><code> ClipData </code></pre> . Provides enough information to know if you can handle the ClipData, but not the data itself. </p><pre><code>public class ClipDescription\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/ClipDescription.html
ComponentCallbacks	A										<section class="prog__container"><p> The set of callback APIs that are common to all application components ( <pre><code> Activity </code></pre> , <pre><code> Service </code></pre> , <pre><code> ContentProvider </code></pre> , and <pre><code> Application </code></pre> ). <p class="note"> <strong> Note: </strong> You should also implement the <pre><code> ComponentCallbacks2 </code></pre> interface, which provides the <pre><code> onTrimMemory(int) </code></pre> callback to help your app manage its memory usage more effectively. </p><pre><code>public interface ComponentCallbacks\n</code></pre></section>	https://developer.android.com/reference/android/content/ComponentCallbacks.html
ComponentCallbacks2	A										<section class="prog__container"><p> Extended <pre><code> ComponentCallbacks </code></pre> interface with a new callback for finer-grained memory management. This interface is available in all application components ( <pre><code> Activity </code></pre> , <pre><code> Service </code></pre> , <pre><code> ContentProvider </code></pre> , and <pre><code> Application </code></pre> ). <p> You should implement <pre><code> onTrimMemory(int) </code></pre> to incrementally release memory based on current system constraints. Using this callback to release your resources helps provide a more responsive system overall, but also directly benefits the user experience for your app by allowing the system to keep your process alive longer. That is, if you <em> don't </em> trim your resources based on memory levels defined by this callback, the system is more likely to kill your process while it is cached in the least-recently used (LRU) list, thus requiring your app to restart and restore all state when the user returns to it. <p> The values provided by <pre><code> onTrimMemory(int) </code></pre> do not represent a single linear progression of memory limits, but provide you different types of clues about memory availability: </p><pre><code>public interface ComponentCallbacks2\nimplements ComponentCallbacks</code></pre></section>	https://developer.android.com/reference/android/content/ComponentCallbacks2.html
ComponentName	A										<section class="prog__container"><p> Identifier for a specific application component ( <pre><code> Activity </code></pre> , <pre><code> Service </code></pre> , <pre><code> BroadcastReceiver </code></pre> , or <pre><code> ContentProvider </code></pre> ) that is available. Two pieces of information, encapsulated here, are required to identify a component: the package (a String) it exists in, and the class (a String) name inside of that package.</p><pre><code>public final class ComponentName\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/ComponentName.html
ContentProvider	A										<section class="prog__container"><p> Content providers are one of the primary building blocks of Android applications, providing content to applications. They encapsulate data and provide it to applications through the single <pre><code> ContentResolver </code></pre> interface. A content provider is only required if you need to share data between multiple applications. For example, the contacts data is used by multiple applications and must be stored in a content provider. If you don't need to share data amongst multiple applications you can use a database directly via <pre><code> SQLiteDatabase </code></pre> . <p> When a request is made via a <pre><code> ContentResolver </code></pre> the system inspects the authority of the given URI and passes the request to the content provider registered with the authority. The content provider can interpret the rest of the URI however it wants. The <pre><code> UriMatcher </code></pre> class is helpful for parsing URIs. </p><pre><code>public abstract class ContentProvider\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/ContentProvider.html
ContentProvider.PipeDataWriter	A										<section class="prog__container"><p> Interface to write a stream of data to a pipe. Use with <pre><code> openPipeHelper(Uri, String, Bundle, T, ContentProvider.PipeDataWriter <t> ) </t> </code></pre> .</p><pre><code>public static interface ContentProvider.PipeDataWriter\n</code></pre></section>	https://developer.android.com/reference/android/content/ContentProvider.PipeDataWriter.html
ContentProviderClient	A										<section class="prog__container"><p> The public interface object used to interact with a specific <pre><code> ContentProvider </code></pre> . <p> Instances can be obtained by calling <pre><code> acquireContentProviderClient(Uri) </code></pre> or <pre><code> acquireUnstableContentProviderClient(Uri) </code></pre> . Instances must be released using <pre><code> close() </code></pre> in order to indicate to the system that the underlying <pre><code> ContentProvider </code></pre> is no longer needed and can be killed to free up resources. <p> Note that you should generally create a new ContentProviderClient instance for each thread that will be performing operations. Unlike <pre><code> ContentResolver </code></pre> , the methods here such as <pre><code> query(Uri, String[], String, String[], String) </code></pre> and <pre><code> openFile(Uri, String) </code></pre> are not thread safe -- you must not call <pre><code> close() </code></pre> on the ContentProviderClient those calls are made from until you are finished with the data they have returned. </p><pre><code>public class ContentProviderClient\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/ContentProviderClient.html
ContentProviderOperation.Builder	A										<section class="prog__container"><p> Used to add parameters to a <pre><code> ContentProviderOperation </code></pre> . The <pre><code> ContentProviderOperation.Builder </code></pre> is first created by calling <pre><code> newInsert(android.net.Uri) </code></pre> , <pre><code> newUpdate(android.net.Uri) </code></pre> , <pre><code> newDelete(android.net.Uri) </code></pre> or <pre><code> newAssertQuery(Uri) </code></pre> . The withXXX methods can then be used to add parameters to the builder. See the specific methods to find for which <pre><code> ContentProviderOperation.Builder </code></pre> type each is allowed. Call <pre><code> build() </code></pre> to create the <pre><code> ContentProviderOperation </code></pre> once all the parameters have been supplied.</p><pre><code>public static class ContentProviderOperation.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/ContentProviderOperation.Builder.html
ContentProviderOperation	A										<section class="prog__container"><p> Represents a single operation to be performed as part of a batch of operations.</p><pre><code>public class ContentProviderOperation\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/ContentProviderOperation.html
ContentProviderResult	A										<section class="prog__container"><p> Contains the result of the application of a <pre><code> ContentProviderOperation </code></pre> . It is guaranteed to have exactly one of <pre><code> uri </code></pre> or <pre><code> count </code></pre> set.</p><pre><code>public class ContentProviderResult\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/ContentProviderResult.html
ContentQueryMap	A										<section class="prog__container"><p> Caches the contents of a cursor into a Map of String-&gt;ContentValues and optionally keeps the cache fresh by registering for updates on the content backing the cursor. The column of the database that is to be used as the key of the map is user-configurable, and the ContentValues contains all columns other than the one that is designated the key. <p> The cursor data is accessed by row key and column name via getValue(). </p><pre><code>public class ContentQueryMap\n</code></pre></section>	https://developer.android.com/reference/android/content/ContentQueryMap.html
ContentResolver	A										<section class="prog__container"><p> This class provides applications access to the content model. </p><pre><code>public abstract class ContentResolver\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/ContentResolver.html
ContentUris	A										<section class="prog__container"><p> Utility methods useful for working with <pre><code> Uri </code></pre> objects that use the "content" (content://) scheme. <p> Content URIs have the syntax </p><pre><code>public class ContentUris\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/ContentUris.html
ContentValues	A										<section class="prog__container"><p> This class is used to store a set of values that the <pre><code> ContentResolver </code></pre> can process.</p><pre><code>public final class ContentValues\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/ContentValues.html
Context	A										<section class="prog__container"><p> Interface to global information about an application environment. This is an abstract class whose implementation is provided by the Android system. It allows access to application-specific resources and classes, as well as up-calls for application-level operations such as launching activities, broadcasting and receiving intents, etc.</p><pre><code>public abstract class Context\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/Context.html
ContextWrapper	A										<section class="prog__container"><p> Proxying implementation of Context that simply delegates all of its calls to another Context. Can be subclassed to modify behavior without changing the original Context.</p><pre><code>public class ContextWrapper\n</code></pre></section>	https://developer.android.com/reference/android/content/ContextWrapper.html
CursorLoader	A										<section class="prog__container"><p> A loader that queries the <pre><code> ContentResolver </code></pre> and returns a <pre><code> Cursor </code></pre> . This class implements the <pre><code> Loader </code></pre> protocol in a standard way for querying cursors, building on <pre><code> AsyncTaskLoader </code></pre> to perform the cursor query on a background thread so that it does not block the application's UI. <p> A CursorLoader must be built with the full information for the query to perform, either through the <pre><code> CursorLoader(Context, Uri, String[], String, String[], String) </code></pre> or creating an empty instance with <pre><code> CursorLoader(Context) </code></pre> and filling in the desired paramters with <pre><code> setUri(Uri) </code></pre> , <pre><code> setSelection(String) </code></pre> , <pre><code> setSelectionArgs(String[]) </code></pre> , <pre><code> setSortOrder(String) </code></pre> , and <pre><code> setProjection(String[]) </code></pre> . </p><pre><code>public class CursorLoader\n</code></pre></section>	https://developer.android.com/reference/android/content/CursorLoader.html
DialogInterface	A										<section class="prog__container"><pre><code>public interface DialogInterface\n</code></pre></section>	https://developer.android.com/reference/android/content/DialogInterface.html
DialogInterface.OnCancelListener	A										<section class="prog__container"><p> Interface used to allow the creator of a dialog to run some code when the dialog is canceled. <p> This will only be called when the dialog is canceled, if the creator needs to know when it is dismissed in general, use <pre><code> DialogInterface.OnDismissListener </code></pre> . </p><pre><code>public static interface DialogInterface.OnCancelListener\n</code></pre></section>	https://developer.android.com/reference/android/content/DialogInterface.OnCancelListener.html
DialogInterface.OnClickListener	A										<section class="prog__container"><p> Interface used to allow the creator of a dialog to run some code when an item on the dialog is clicked..</p><pre><code>public static interface DialogInterface.OnClickListener\n</code></pre></section>	https://developer.android.com/reference/android/content/DialogInterface.OnClickListener.html
DialogInterface.OnDismissListener	A										<section class="prog__container"><p> Interface used to allow the creator of a dialog to run some code when the dialog is dismissed.</p><pre><code>public static interface DialogInterface.OnDismissListener\n</code></pre></section>	https://developer.android.com/reference/android/content/DialogInterface.OnDismissListener.html
DialogInterface.OnKeyListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a key event is dispatched to this dialog. The callback will be invoked before the key event is given to the dialog.</p><pre><code>public static interface DialogInterface.OnKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/content/DialogInterface.OnKeyListener.html
DialogInterface.OnMultiChoiceClickListener	A										<section class="prog__container"><p> Interface used to allow the creator of a dialog to run some code when an item in a multi-choice dialog is clicked.</p><pre><code>public static interface DialogInterface.OnMultiChoiceClickListener\n</code></pre></section>	https://developer.android.com/reference/android/content/DialogInterface.OnMultiChoiceClickListener.html
DialogInterface.OnShowListener	A										<section class="prog__container"><p> Interface used to allow the creator of a dialog to run some code when the dialog is shown.</p><pre><code>public static interface DialogInterface.OnShowListener\n</code></pre></section>	https://developer.android.com/reference/android/content/DialogInterface.OnShowListener.html
Entity	A										<section class="prog__container"><p> A representation of a item using ContentValues. It contains one top level ContentValue plus a collection of Uri, ContentValues tuples as subvalues. One example of its use is in Contacts, where the top level ContentValue contains the columns from the RawContacts table and the subvalues contain a ContentValues object for each row from the Data table that corresponds to that RawContact. The uri refers to the Data table uri for each row.</p><pre><code>public final class Entity\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/Entity.html
Entity.NamedContentValues	A										<section class="prog__container"><pre><code>public static class Entity.NamedContentValues\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/Entity.NamedContentValues.html
EntityIterator	A										<section class="prog__container"><p> A specialization of <pre><code> Iterator </code></pre> that allows iterating over a collection of <pre><code> Entity </code></pre> objects. In addition to the iteration functionality it also allows resetting the iterator back to the beginning and provides for an explicit <pre><code> close() </code></pre> method to indicate that the iterator is no longer needed and that its resources can be released.</p><pre><code>public interface EntityIterator\nimplements Iterator&lt;Entity&gt;</code></pre></section>	https://developer.android.com/reference/android/content/EntityIterator.html
Intent.FilterComparison	A										<section class="prog__container"><p> Wrapper class holding an Intent and implementing comparisons on it for the purpose of filtering. The class implements its <pre><code> equals() </code></pre> and <pre><code> hashCode() </code></pre> methods as simple calls to <pre><code> filterEquals(Intent) </code></pre> filterEquals()} and <pre><code> filterHashCode() </code></pre> filterHashCode()} on the wrapped Intent.</p><pre><code>public static final class Intent.FilterComparison\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/Intent.FilterComparison.html
Intent	A										<section class="prog__container"><p> An intent is an abstract description of an operation to be performed. It can be used with <pre><code> startActivity </code></pre> to launch an <pre><code> Activity </code></pre> , <pre><code> broadcastIntent </code></pre> to send it to any interested <pre><code> BroadcastReceiver </code></pre> components, and <pre><code> startService(Intent) </code></pre> or <pre><code> bindService(Intent, ServiceConnection, int) </code></pre> to communicate with a background <pre><code> Service </code></pre> . <p> An Intent provides a facility for performing late runtime binding between the code in different applications. Its most significant use is in the launching of activities, where it can be thought of as the glue between activities. It is basically a passive data structure holding an abstract description of an action to be performed. </p><pre><code>public class Intent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/Intent.html
Intent.ShortcutIconResource	A										<section class="prog__container"><p> Represents a shortcut/live folder icon resource.</p><pre><code>public static class Intent.ShortcutIconResource\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/Intent.ShortcutIconResource.html
IntentFilter.AuthorityEntry	A										<section class="prog__container"><p> This is an entry for a single authority in the Iterator returned by <pre><code> authoritiesIterator() </code></pre> .</p><pre><code>public static final class IntentFilter.AuthorityEntry\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/IntentFilter.AuthorityEntry.html
IntentFilter	A										<section class="prog__container"><p> Structured description of Intent values to be matched. An IntentFilter can match against actions, categories, and data (either via its type, scheme, and/or path) in an Intent. It also includes a "priority" value which is used to order multiple matching filters. <p> IntentFilter objects are often created in XML as part of a package's <pre><code> AndroidManifest.xml </code></pre> file, using <pre><code> intent-filter </code></pre> tags. <p> There are three Intent characteristics you can filter on: the <em> action </em> , <em> data </em> , and <em> categories </em> . For each of these characteristics you can provide multiple possible matching values (via <pre><code> addAction(String) </code></pre> , <pre><code> addDataType(String) </code></pre> , <pre><code> addDataScheme(String) </code></pre> , <pre><code> addDataSchemeSpecificPart(String, int) </code></pre> , <pre><code> addDataAuthority(String, String) </code></pre> , <pre><code> addDataPath(String, int) </code></pre> , and <pre><code> addCategory(String) </code></pre> , respectively). For actions, the field will not be tested if no values have been given (treating it as a wildcard); if no data characteristics are specified, however, then the filter will only match intents that contain no data. <p> The data characteristic is itself divided into three attributes: type, scheme, authority, and path. Any that are specified must match the contents of the Intent. If you specify a scheme but no type, only Intent that does not have a type (such as mailto:) will match; a content: URI will never match because they always have a MIME type that is supplied by their content provider. Specifying a type with no scheme has somewhat special meaning: it will match either an Intent with no URI field, or an Intent with a content: or file: URI. If you specify neither, then only an Intent with no data or type will match. To specify an authority, you must also specify one or more schemes that it is associated with. To specify a path, you also must specify both one or more authorities and one or more schemes it is associated with. </p><pre><code>public class IntentFilter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/IntentFilter.html
IntentFilter.MalformedMimeTypeException	A										<section class="prog__container"><p> This exception is thrown when a given MIME type does not have a valid syntax.</p><pre><code>public static class IntentFilter.MalformedMimeTypeException\n</code></pre></section>	https://developer.android.com/reference/android/content/IntentFilter.MalformedMimeTypeException.html
IntentSender	A										<section class="prog__container"><p> A description of an Intent and target action to perform with it. The returned object can be handed to other applications so that they can perform the action you described on your behalf at a later time. <p> By giving a IntentSender to another application, you are granting it the right to perform the operation you have specified as if the other application was yourself (with the same permissions and identity). As such, you should be careful about how you build the IntentSender: often, for example, the base Intent you supply will have the component name explicitly set to one of your own components, to ensure it is ultimately sent there and nowhere else. <p> A IntentSender itself is simply a reference to a token maintained by the system describing the original data used to retrieve it. This means that, even if its owning application's process is killed, the IntentSender itself will remain usable from other processes that have been given it. If the creating application later re-retrieves the same kind of IntentSender (same operation, same Intent action, data, categories, and components, and same flags), it will receive a IntentSender representing the same token if that is still valid. <p> Instances of this class can not be made directly, but rather must be created from an existing <pre><code> PendingIntent </code></pre> with <pre><code> PendingIntent.getIntentSender() </code></pre> . </p><pre><code>public class IntentSender\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/IntentSender.html
IntentSender.OnFinished	A										<section class="prog__container"><p> Callback interface for discovering when a send operation has completed. Primarily for use with a IntentSender that is performing a broadcast, this provides the same information as calling <pre><code> Context.sendBroadcast() </code></pre> with a final BroadcastReceiver.</p><pre><code>public static interface IntentSender.OnFinished\n</code></pre></section>	https://developer.android.com/reference/android/content/IntentSender.OnFinished.html
IntentSender.SendIntentException	A										<section class="prog__container"><p> Exception thrown when trying to send through a PendingIntent that has been canceled or is otherwise no longer able to execute the request.</p><pre><code>public static class IntentSender.SendIntentException\n</code></pre></section>	https://developer.android.com/reference/android/content/IntentSender.SendIntentException.html
Loader.ForceLoadContentObserver	A										<section class="prog__container"><p> An implementation of a ContentObserver that takes care of connecting it to the Loader to have the loader re-load its data when the observer is told it has changed. You do not normally need to use this yourself; it is used for you by <pre><code> CursorLoader </code></pre> to take care of executing an update when the cursor's backing data changes.</p><pre><code>public final class Loader.ForceLoadContentObserver\n</code></pre></section>	https://developer.android.com/reference/android/content/Loader.ForceLoadContentObserver.html
Loader	A										<section class="prog__container"><p> A class that performs asynchronous loading of data. While Loaders are active they should monitor the source of their data and deliver new results when the contents change. See <pre><code> LoaderManager </code></pre> for more detail. <p> <b> Note on threading: </b> Clients of loaders should as a rule perform any calls on to a Loader from the main thread of their process (that is, the thread the Activity callbacks and other things occur on). Subclasses of Loader (such as <pre><code> AsyncTaskLoader </code></pre> ) will often perform their work in a separate thread, but when delivering their results this too should be done on the main thread. </p><pre><code>public class Loader\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/Loader.html
Loader.OnLoadCanceledListener	A										<section class="prog__container"><p> Interface that is implemented to discover when a Loader has been canceled before it finished loading its data. You do not normally need to implement this yourself; it is used in the implementation of <pre><code> LoaderManager </code></pre> to find out when a Loader it is managing has been canceled so that it can schedule the next Loader. This interface should only be used if a Loader is not being used in conjunction with LoaderManager.</p><pre><code>public static interface Loader.OnLoadCanceledListener\n</code></pre></section>	https://developer.android.com/reference/android/content/Loader.OnLoadCanceledListener.html
Loader.OnLoadCompleteListener	A										<section class="prog__container"><p> Interface that is implemented to discover when a Loader has finished loading its data. You do not normally need to implement this yourself; it is used in the implementation of <pre><code> LoaderManager </code></pre> to find out when a Loader it is managing has completed so that this can be reported to its client. This interface should only be used if a Loader is not being used in conjunction with LoaderManager.</p><pre><code>public static interface Loader.OnLoadCompleteListener\n</code></pre></section>	https://developer.android.com/reference/android/content/Loader.OnLoadCompleteListener.html
MutableContextWrapper	A										<section class="prog__container"><p> Special version of <pre><code> ContextWrapper </code></pre> that allows the base context to be modified after it is initially set.</p><pre><code>public class MutableContextWrapper\n</code></pre></section>	https://developer.android.com/reference/android/content/MutableContextWrapper.html
OperationApplicationException	A										<section class="prog__container"><p> Thrown when an application of a <pre><code> ContentProviderOperation </code></pre> fails due the specified constraints.</p><pre><code>public class OperationApplicationException\n</code></pre></section>	https://developer.android.com/reference/android/content/OperationApplicationException.html
android.content	A										<section class="prog__container">Contains classes for accessing and publishing data on a device. It includes three maincategories of APIs:</section>	https://developer.android.com/reference/android/content/package-summary.html
PeriodicSync	A										<section class="prog__container"><p> Value type that contains information about a periodic sync.</p><pre><code>public class PeriodicSync\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/PeriodicSync.html
ReceiverCallNotAllowedException	A										<section class="prog__container"><p> This exception is thrown from <pre><code> registerReceiver(BroadcastReceiver, IntentFilter) </code></pre> and <pre><code> bindService(Intent, ServiceConnection, int) </code></pre> when these methods are being used from an <pre><code> BroadcastReceiver </code></pre> component. In this case, the component will no longer be active upon returning from receiving the Intent, so it is not valid to use asynchronous APIs.</p><pre><code>public class ReceiverCallNotAllowedException\n</code></pre></section>	https://developer.android.com/reference/android/content/ReceiverCallNotAllowedException.html
RestrictionEntry	A										<section class="prog__container"><pre><code>public class RestrictionEntry\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/RestrictionEntry.html
RestrictionsManager	A										<section class="prog__container"><p> Provides a mechanism for apps to query restrictions imposed by an entity that manages the user. Apps can also send permission requests to a local or remote device administrator to override default app-specific restrictions or any other operation that needs explicit authorization from the administrator. <p> Apps can expose a set of restrictions via an XML file specified in the manifest. <p> If the user has an active Restrictions Provider, dynamic requests can be made in addition to the statically imposed restrictions. Dynamic requests are app-specific and can be expressed via a predefined set of request types. <p> The RestrictionsManager forwards the dynamic requests to the active Restrictions Provider. The Restrictions Provider can respond back to requests by calling <pre><code> notifyPermissionResponse(String, PersistableBundle) </code></pre> , when a response is received from the administrator of the device or user. The response is relayed back to the application via a protected broadcast, <pre><code> ACTION_PERMISSION_RESPONSE_RECEIVED </code></pre> . <p> Static restrictions are specified by an XML file referenced by a meta-data attribute in the manifest. This enables applications as well as any web administration consoles to be able to read the list of available restrictions from the apk. <p> The syntax of the XML format is as follows: <pre> &lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;restrictions xmlns:android="http://schemas.android.com/apk/res/android" &gt; &lt;restriction android:key="string" android:title="string resource" android:restrictionType=["bool" | "string" | "integer" | "choice" | "multi-select" | "hidden" | "bundle" | "bundle_array"] android:description="string resource" android:entries="string-array resource" android:entryValues="string-array resource" android:defaultValue="reference" &gt; &lt;restriction ... /&gt; ... &lt;/restriction&gt; &lt;restriction ... /&gt; ... &lt;/restrictions&gt; </pre> <p> The attributes for each restriction depend on the restriction type. <p> <ul> <li> <pre><code> key </code></pre> , <pre><code> title </code></pre> and <pre><code> restrictionType </code></pre> are mandatory. </li> <li> <pre><code> entries </code></pre> and <pre><code> entryValues </code></pre> are required if <pre><code> restrictionType </code></pre> is <pre><code> choice </code></pre> or <pre><code> multi-select </code></pre> . </li> <li> <pre><code> defaultValue </code></pre> is optional and its type depends on the <pre><code> restrictionType </code></pre> </li> <li> <pre><code> hidden </code></pre> type must have a <pre><code> defaultValue </code></pre> and will not be shown to the administrator. It can be used to pass along data that cannot be modified, such as a version code. </li> <li> <pre><code> description </code></pre> is meant to describe the restriction in more detail to the administrator controlling the values, if the title is not sufficient. </li> </ul> <p> Only restrictions of type <pre><code> bundle </code></pre> and <pre><code> bundle_array </code></pre> can have one or multiple nested restriction elements. <p> In your manifest's <pre><code> application </code></pre> section, add the meta-data tag to point to the restrictions XML file as shown below: <pre> &lt;application ... &gt; &lt;meta-data android:name="android.content.APP_RESTRICTIONS" android:resource="@xml/app_restrictions" /&gt; ... &lt;/application&gt; </pre> </p><pre><code>public class RestrictionsManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/RestrictionsManager.html
SearchRecentSuggestionsProvider	A										<section class="prog__container"><p> This superclass can be used to create a simple search suggestions provider for your application. It creates suggestions (as the user types) based on recent queries and/or recent views. <p> In order to use this class, you must do the following. <ul> <li> Implement and test query search, as described in <pre><code> SearchManager </code></pre> . (This provider will send any suggested queries via the standard <pre><code> ACTION_SEARCH </code></pre> Intent, which you'll already support once you have implemented and tested basic searchability.) </li> <li> Create a Content Provider within your application by extending <pre><code> SearchRecentSuggestionsProvider </code></pre> . The class you create will be very simple - typically, it will have only a constructor. But the constructor has a very important responsibility: When it calls <pre><code> setupSuggestions(String, int) </code></pre> , it <i> configures </i> the provider to match the requirements of your searchable activity. </li> <li> Create a manifest entry describing your provider. Typically this would be as simple as adding the following lines: <pre class="prettyprint"> &lt;!-- Content provider for search suggestions --&gt; &lt;provider android:name="YourSuggestionProviderClass" android:authorities="your.suggestion.authority" /&gt;</pre> </li> <li> Please note that you <i> do not </i> instantiate this content provider directly from within your code. This is done automatically by the system Content Resolver, when the search dialog looks for suggestions. </li> <li> In order for the Content Resolver to do this, you must update your searchable activity's XML configuration file with information about your content provider. The following additions are usually sufficient: <pre class="prettyprint"> android:searchSuggestAuthority="your.suggestion.authority" android:searchSuggestSelection=" ? "</pre> </li> <li> In your searchable activities, capture any user-generated queries and record them for future searches by calling <pre><code> SearchRecentSuggestions.saveRecentQuery() </code></pre> . </li> </ul> </p><pre><code>public class SearchRecentSuggestionsProvider\n</code></pre></section>	https://developer.android.com/reference/android/content/SearchRecentSuggestionsProvider.html
ServiceConnection	A										<section class="prog__container"><p> Interface for monitoring the state of an application service. See <pre><code> Service </code></pre> and <pre><code> Context.bindService() </code></pre> for more information. <p> Like many callbacks from the system, the methods on this class are called from the main thread of your process. </p><pre><code>public interface ServiceConnection\n</code></pre></section>	https://developer.android.com/reference/android/content/ServiceConnection.html
SharedPreferences.Editor	A										<section class="prog__container"><p> Interface used for modifying values in a <pre><code> SharedPreferences </code></pre> object. All changes you make in an editor are batched, and not copied back to the original <pre><code> SharedPreferences </code></pre> until you call <pre><code> commit() </code></pre> or <pre><code> apply() </code></pre></p><pre><code>public static interface SharedPreferences.Editor\n</code></pre></section>	https://developer.android.com/reference/android/content/SharedPreferences.Editor.html
SharedPreferences	A										<section class="prog__container"><p> Interface for accessing and modifying preference data returned by <pre><code> getSharedPreferences(String, int) </code></pre> . For any particular set of preferences, there is a single instance of this class that all clients share. Modifications to the preferences must go through an <pre><code> SharedPreferences.Editor </code></pre> object to ensure the preference values remain in a consistent state and control when they are committed to storage. Objects that are returned from the various <pre><code> get </code></pre> methods must be treated as immutable by the application. <p> <em> Note: This class does not support use across multiple processes. </em> </p><pre><code>public interface SharedPreferences\n</code></pre></section>	https://developer.android.com/reference/android/content/SharedPreferences.html
SharedPreferences.OnSharedPreferenceChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a shared preference is changed.</p><pre><code>public static interface SharedPreferences.OnSharedPreferenceChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/content/SharedPreferences.OnSharedPreferenceChangeListener.html
SyncAdapterType	A										<section class="prog__container"><p> Value type that represents a SyncAdapterType. This object overrides <pre><code> equals(Object) </code></pre> and <pre><code> hashCode() </code></pre> , making it suitable for use as the key of a <pre><code> Map </code></pre></p><pre><code>public class SyncAdapterType\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/SyncAdapterType.html
SyncContext	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public class SyncContext\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/SyncContext.html
SyncInfo	A										<section class="prog__container"><p> Information about the sync operation that is currently underway.</p><pre><code>public class SyncInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/SyncInfo.html
SyncRequest.Builder	A										<section class="prog__container"><p> Builder class for a <pre><code> SyncRequest </code></pre> . As you build your SyncRequest this class will also perform validation.</p><pre><code>public static class SyncRequest.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/SyncRequest.Builder.html
SyncRequest	A										<section class="prog__container"><p> Convenience class to construct sync requests. See <pre><code> SyncRequest.Builder </code></pre> for an explanation of the various functions. The resulting object is passed through to the framework via <pre><code> requestSync(SyncRequest) </code></pre> .</p><pre><code>public class SyncRequest\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/SyncRequest.html
SyncResult	A										<section class="prog__container"><p> This class is used to communicate the results of a sync operation to the SyncManager. Based on the values here the SyncManager will determine the disposition of the sync and whether or not a new sync operation needs to be scheduled in the future.</p><pre><code>public final class SyncResult\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/SyncResult.html
SyncStats	A										<section class="prog__container"><p> Used to record various statistics about the result of a sync operation. The SyncManager gets access to these via a <pre><code> SyncResult </code></pre> and uses some of them to determine the disposition of the sync. See <pre><code> SyncResult </code></pre> for further dicussion on how the SyncManager uses these values.</p><pre><code>public class SyncStats\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/SyncStats.html
SyncStatusObserver	A										<section class="prog__container"><pre><code>public interface SyncStatusObserver\n</code></pre></section>	https://developer.android.com/reference/android/content/SyncStatusObserver.html
UriMatcher	A										<section class="prog__container"><p> Utility class to aid in matching URIs in content providers. <p> To use this class, build up a tree of <pre><code> UriMatcher </code></pre> objects.For example: <pre> private static final int PEOPLE = 1; private static final int PEOPLE_ID = 2; private static final int PEOPLE_PHONES = 3; private static final int PEOPLE_PHONES_ID = 4; private static final int PEOPLE_CONTACTMETHODS = 7; private static final int PEOPLE_CONTACTMETHODS_ID = 8; private static final int DELETED_PEOPLE = 20; private static final int PHONES = 9; private static final int PHONES_ID = 10; private static final int PHONES_FILTER = 14; private static final int CONTACTMETHODS = 18; private static final int CONTACTMETHODS_ID = 19; private static final int CALLS = 11; private static final int CALLS_ID = 12; private static final int CALLS_FILTER = 15; private static final UriMatcher sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH); static { sURIMatcher.addURI("contacts", "people", PEOPLE); sURIMatcher.addURI("contacts", "people/#", PEOPLE_ID); sURIMatcher.addURI("contacts", "people/#/phones", PEOPLE_PHONES); sURIMatcher.addURI("contacts", "people/#/phones/#", PEOPLE_PHONES_ID); sURIMatcher.addURI("contacts", "people/#/contact_methods", PEOPLE_CONTACTMETHODS); sURIMatcher.addURI("contacts", "people/#/contact_methods/#", PEOPLE_CONTACTMETHODS_ID); sURIMatcher.addURI("contacts", "deleted_people", DELETED_PEOPLE); sURIMatcher.addURI("contacts", "phones", PHONES); sURIMatcher.addURI("contacts", "phones/filter/*", PHONES_FILTER); sURIMatcher.addURI("contacts", "phones/#", PHONES_ID); sURIMatcher.addURI("contacts", "contact_methods", CONTACTMETHODS); sURIMatcher.addURI("contacts", "contact_methods/#", CONTACTMETHODS_ID); sURIMatcher.addURI("call_log", "calls", CALLS); sURIMatcher.addURI("call_log", "calls/filter/*", CALLS_FILTER); sURIMatcher.addURI("call_log", "calls/#", CALLS_ID); }</pre> <p> Starting from API level <pre><code> JELLY_BEAN_MR2 </code></pre> , paths can start with a leading slash. For example: <pre> sURIMatcher.addURI("contacts", "/people", PEOPLE);</pre> <p> Then when you need to match against a URI, call <pre><code> match(Uri) </code></pre> , providingthe URL that you have been given. You can use the result to build a query,return a type, insert or delete a row, or whatever you need, without duplicatingall of the if-else logic that you would otherwise need. For example: <pre> public String getType(Uri url) { int match = sURIMatcher.match(url); switch (match) { case PEOPLE: return "vnd.android.cursor.dir/person"; case PEOPLE_ID: return "vnd.android.cursor.item/person";... snip ... return "vnd.android.cursor.dir/snail-mail"; case PEOPLE_ADDRESS_ID: return "vnd.android.cursor.item/snail-mail"; default: return null; } }</pre> instead of: <pre> public String getType(Uri url) { List<string> pathSegments = url.getPathSegments(); if (pathSegments.size() &gt;= 2) { if ("people".equals(pathSegments.get(1))) { if (pathSegments.size() == 2) { return "vnd.android.cursor.dir/person"; } else if (pathSegments.size() == 3) { return "vnd.android.cursor.item/person";... snip ... return "vnd.android.cursor.dir/snail-mail"; } else if (pathSegments.size() == 3) { return "vnd.android.cursor.item/snail-mail"; } } } return null; }</string></pre> </p><pre><code>public class UriMatcher\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/UriMatcher.html
UriPermission	A										<section class="prog__container"><p> Description of a single Uri permission grant. This grants may have been created via <pre><code> FLAG_GRANT_READ_URI_PERMISSION </code></pre> , etc when sending an <pre><code> Intent </code></pre> , or explicitly through <pre><code> grantUriPermission(String, android.net.Uri, int) </code></pre> .</p><pre><code>public final class UriPermission\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/UriPermission.html
ActivityInfo	A										<section class="prog__container"><p> Information you can retrieve about a particular application activity or receiver. This corresponds to information collected from the AndroidManifest.xml's &lt;activity&gt; and &lt;receiver&gt; tags.</p><pre><code>public class ActivityInfo\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/ActivityInfo.html
ActivityInfo.WindowLayout	A										<section class="prog__container"><p> Contains information about position and size of the activity on the display. Used in freeform mode to set desired position when activity is first launched. It describes how big the activity wants to be in both width and height, the minimal allowed size, and the gravity to be applied.</p><pre><code>public static final class ActivityInfo.WindowLayout\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/ActivityInfo.WindowLayout.html
ApplicationInfo.DisplayNameComparator	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public static class ApplicationInfo.DisplayNameComparator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/ApplicationInfo.DisplayNameComparator.html
ApplicationInfo	A										<section class="prog__container"><p> Information you can retrieve about a particular application. This corresponds to information collected from the AndroidManifest.xml's &lt;application&gt; tag.</p><pre><code>public class ApplicationInfo\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/ApplicationInfo.html
ComponentInfo	A										<section class="prog__container"><p> Base class containing information common to all application components ( <pre><code> ActivityInfo </code></pre> , <pre><code> ServiceInfo </code></pre> ). This class is not intended to be used by itself; it is simply here to share common definitions between all application components. As such, it does not itself implement Parcelable, but does provide convenience methods to assist in the implementation of Parcelable in subclasses.</p><pre><code>public class ComponentInfo\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/ComponentInfo.html
ConfigurationInfo	A										<section class="prog__container"><p> Information you can retrieve about hardware configuration preferences declared by an application. This corresponds to information collected from the AndroidManifest.xml's &lt;uses-configuration&gt; and &lt;uses-feature&gt; tags.</p><pre><code>public class ConfigurationInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/ConfigurationInfo.html
FeatureGroupInfo	A										<section class="prog__container"><p> A set of features that can be requested by an application. This corresponds to information collected from the AndroidManifest.xml's <pre><code> &lt;feature-group&gt; </code></pre> tag.</p><pre><code>public final class FeatureGroupInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/FeatureGroupInfo.html
FeatureInfo	A										<section class="prog__container"><p> Definition of a single optional hardware or software feature of an Android device. <p> This object is used to represent both features supported by a device and features requested by an app. Apps can request that certain features be available as a prerequisite to being installed through the <pre><code> uses-feature </code></pre> tag in their manifests. <p> Starting in <pre><code> N </code></pre> , features can have a version, which must always be backwards compatible. That is, a device claiming to support version 3 of a specific feature must support apps requesting version 1 of that feature. </p><pre><code>public class FeatureInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/FeatureInfo.html
InstrumentationInfo	A										<section class="prog__container"><p> Information you can retrieve about a particular piece of test instrumentation. This corresponds to information collected from the AndroidManifest.xml's &lt;instrumentation&gt; tag.</p><pre><code>public class InstrumentationInfo\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html
LabeledIntent	A										<section class="prog__container"><p> A special subclass of Intent that can have a custom label/icon associated with it. Primarily for use with <pre><code> ACTION_CHOOSER </code></pre> .</p><pre><code>public class LabeledIntent\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/LabeledIntent.html
LauncherActivityInfo	A										<section class="prog__container"><p> A representation of an activity that can belong to this user or a managed profile associated with this user. It can be used to query the label, icon and badged icon for the activity.</p><pre><code>public class LauncherActivityInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/LauncherActivityInfo.html
LauncherApps.Callback	A										<section class="prog__container"><p> Callbacks for package changes to this and related managed profiles.</p><pre><code>public static abstract class LauncherApps.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/LauncherApps.Callback.html
LauncherApps	A										<section class="prog__container"><p> Class for retrieving a list of launchable activities for the current user and any associated managed profiles. This is mainly for use by launchers. Apps can be queried for each user profile. Since the PackageManager will not deliver package broadcasts for other profiles, you can register for package changes here. <p> To watch for managed profiles being added or removed, register for the following broadcasts: <pre><code> ACTION_MANAGED_PROFILE_ADDED </code></pre> and <pre><code> ACTION_MANAGED_PROFILE_REMOVED </code></pre> . <p> You can retrieve the list of profiles associated with this user with <pre><code> getUserProfiles() </code></pre> . </p><pre><code>public class LauncherApps\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/LauncherApps.html
LauncherApps.ShortcutQuery	A										<section class="prog__container"><p> Represents a query passed to <pre><code> getShortcuts(ShortcutQuery, UserHandle) </code></pre> .</p><pre><code>public static class LauncherApps.ShortcutQuery\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/LauncherApps.ShortcutQuery.html
android.content.pm	A										<section class="prog__container">Contains classes for accessing information about anapplication package, including information about its activities,permissions, services, signatures, and providers.</section>	https://developer.android.com/reference/android/content/pm/package-summary.html
PackageInfo	A										<section class="prog__container"><p> Overall information about the contents of a package. This corresponds to all of the information collected from AndroidManifest.xml.</p><pre><code>public class PackageInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageInfo.html
PackageInstaller	A										<section class="prog__container"><p> Offers the ability to install, upgrade, and remove applications on the device. This includes support for apps packaged either as a single "monolithic" APK, or apps packaged as multiple "split" APKs. <p> An app is delivered for installation through a <pre><code> PackageInstaller.Session </code></pre> , which any app can create. Once the session is created, the installer can stream one or more APKs into place until it decides to either commit or destroy the session. Committing may require user intervention to complete the installation. <p> Sessions can install brand new apps, upgrade existing apps, or add new splits into an existing app. <p> Apps packaged as multiple split APKs always consist of a single "base" APK (with a <pre><code> null </code></pre> split name) and zero or more "split" APKs (with unique split names). Any subset of these APKs can be installed together, as long as the following constraints are met: <ul> <li> All APKs must have the exact same package name, version code, and signing certificates. <li> All APKs must have unique split names. <li> All installations must contain a single base APK. </li> </li> </li> </ul> </p><pre><code>public class PackageInstaller\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageInstaller.html
PackageInstaller.Session	A										<section class="prog__container"><p> An installation that is being actively staged. For an install to succeed, all existing and new packages must have identical package names, version codes, and signing certificates. <p> A session may contain any number of split packages. If the application does not yet exist, this session must include a base package. <p> If an APK included in this session is already defined by the existing installation (for example, the same split name), the APK in this session will replace the existing APK. </p><pre><code>public static class PackageInstaller.Session\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html
PackageInstaller.SessionCallback	A										<section class="prog__container"><p> Events for observing session lifecycle. <p> A typical session lifecycle looks like this: <ul> <li> An installer creates a session to indicate pending app delivery. All install details are available at this point. <li> The installer opens the session to deliver APK data. Note that a session may be opened and closed multiple times as network connectivity changes. The installer may deliver periodic progress updates. <li> The installer commits or abandons the session, resulting in the session being finished. </li> </li> </li> </ul> </p><pre><code>public static abstract class PackageInstaller.SessionCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionCallback.html
PackageInstaller.SessionInfo	A										<section class="prog__container"><p> Details for an active install session.</p><pre><code>public static class PackageInstaller.SessionInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html
PackageInstaller.SessionParams	A										<section class="prog__container"><p> Parameters for creating a new <pre><code> PackageInstaller.Session </code></pre> .</p><pre><code>public static class PackageInstaller.SessionParams\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html
PackageItemInfo.DisplayNameComparator	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public static class PackageItemInfo.DisplayNameComparator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageItemInfo.DisplayNameComparator.html
PackageItemInfo	A										<section class="prog__container"><p> Base class containing information common to all package items held by the package manager. This provides a very common basic set of attributes: a label, icon, and meta-data. This class is not intended to be used by itself; it is simply here to share common definitions between all items returned by the package manager. As such, it does not itself implement Parcelable, but does provide convenience methods to assist in the implementation of Parcelable in subclasses.</p><pre><code>public class PackageItemInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageItemInfo.html
PackageManager	A										<section class="prog__container"><p> Class for retrieving various kinds of information related to the application packages that are currently installed on the device. You can find this class through <pre><code> getPackageManager() </code></pre> .</p><pre><code>public abstract class PackageManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageManager.html
PackageManager.NameNotFoundException	A										<section class="prog__container"><p> This exception is thrown when a given package, application, or component name cannot be found.</p><pre><code>public static class PackageManager.NameNotFoundException\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageManager.NameNotFoundException.html
PackageStats	A										<section class="prog__container"><p> implementation of PackageStats associated with a application package.</p><pre><code>public class PackageStats\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageStats.html
PathPermission	A										<section class="prog__container"><p> Description of permissions needed to access a particular path in a <pre><code> ProviderInfo </code></pre> .</p><pre><code>public class PathPermission\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/PathPermission.html
PermissionGroupInfo	A										<section class="prog__container"><p> Information you can retrieve about a particular security permission group known to the system. This corresponds to information collected from the AndroidManifest.xml's &lt;permission-group&gt; tags.</p><pre><code>public class PermissionGroupInfo\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/PermissionGroupInfo.html
PermissionInfo	A										<section class="prog__container"><p> Information you can retrieve about a particular security permission known to the system. This corresponds to information collected from the AndroidManifest.xml's &lt;permission&gt; tags.</p><pre><code>public class PermissionInfo\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/PermissionInfo.html
ProviderInfo	A										<section class="prog__container"><p> Holds information about a specific <pre><code> content provider </code></pre> . This is returned by <pre><code> PackageManager.resolveContentProvider() </code></pre> .</p><pre><code>public final class ProviderInfo\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/ProviderInfo.html
ResolveInfo.DisplayNameComparator	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public static class ResolveInfo.DisplayNameComparator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/ResolveInfo.DisplayNameComparator.html
ResolveInfo	A										<section class="prog__container"><p> Information that is returned from resolving an intent against an IntentFilter. This partially corresponds to information collected from the AndroidManifest.xml's &lt;intent&gt; tags.</p><pre><code>public class ResolveInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/ResolveInfo.html
ServiceInfo	A										<section class="prog__container"><p> Information you can retrieve about a particular application service. This corresponds to information collected from the AndroidManifest.xml's &lt;service&gt; tags.</p><pre><code>public class ServiceInfo\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/ServiceInfo.html
ShortcutInfo.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> ShortcutInfo </code></pre> objects.</p><pre><code>public static class ShortcutInfo.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/ShortcutInfo.Builder.html
ShortcutInfo	A										<section class="prog__container"><p> Represents a shortcut that can be published via <pre><code> ShortcutManager </code></pre> .</p><pre><code>public final class ShortcutInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/ShortcutInfo.html
ShortcutManager	A										<section class="prog__container"><p> The ShortcutManager manages an app's <em> shortcuts </em> . Shortcuts provide users with quick access to activities other than an app's main activity in the currently-active launcher. For example, an email app may publish the "compose new email" action, which will directly open the compose activity. The <pre><code> ShortcutInfo </code></pre> class contains information about each of the shortcuts themselves. </p><pre><code>public class ShortcutManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/ShortcutManager.html
Signature	A										<section class="prog__container"><p> Opaque, immutable representation of a signing certificate associated with an application package. <p> This class name is slightly misleading, since it's not actually a signature. </p><pre><code>public class Signature\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/pm/Signature.html
AssetFileDescriptor.AutoCloseInputStream	A										<section class="prog__container"><p> An InputStream you can create on a ParcelFileDescriptor, which will take care of calling <pre><code> ParcelFileDescritor.close() </code></pre> for you when the stream is closed.</p><pre><code>public static class AssetFileDescriptor.AutoCloseInputStream\n</code></pre></section>	https://developer.android.com/reference/android/content/res/AssetFileDescriptor.AutoCloseInputStream.html
AssetFileDescriptor.AutoCloseOutputStream	A										<section class="prog__container"><p> An OutputStream you can create on a ParcelFileDescriptor, which will take care of calling <pre><code> ParcelFileDescritor.close() </code></pre> for you when the stream is closed.</p><pre><code>public static class AssetFileDescriptor.AutoCloseOutputStream\n</code></pre></section>	https://developer.android.com/reference/android/content/res/AssetFileDescriptor.AutoCloseOutputStream.html
AssetFileDescriptor	A										<section class="prog__container"><p> File descriptor of an entry in the AssetManager. This provides your own opened FileDescriptor that can be used to read the data, as well as the offset and length of that entry's data in the file.</p><pre><code>public class AssetFileDescriptor\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/res/AssetFileDescriptor.html
AssetManager.AssetInputStream	A										<section class="prog__container"><p> Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.</p><pre><code>public final class AssetManager.AssetInputStream\n</code></pre></section>	https://developer.android.com/reference/android/content/res/AssetManager.AssetInputStream.html
AssetManager	A										<section class="prog__container"><p> Provides access to an application's raw asset files; see <pre><code> Resources </code></pre> for the way most applications will want to retrieve their resource data. This class presents a lower-level API that allows you to open and read raw files that have been bundled with the application as a simple stream of bytes.</p><pre><code>public final class AssetManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/res/AssetManager.html
ColorStateList	A										<section class="prog__container"><p> Lets you map <pre><code> View </code></pre> state sets to colors. <p> <pre><code> ColorStateList </code></pre> s are created from XML resource files defined in the "color" subdirectory directory of an application's resource directory. The XML file contains a single "selector" element with a number of "item" elements inside. For example: <pre> &lt;selector xmlns:android="http://schemas.android.com/apk/res/android"&gt; &lt;item android:state_focused="true" android:color="@color/sample_focused" /&gt; &lt;item android:state_pressed="true" android:state_enabled="false" android:color="@color/sample_disabled_pressed" /&gt; &lt;item android:state_enabled="false" android:color="@color/sample_disabled_not_pressed" /&gt; &lt;item android:color="@color/sample_default" /&gt; &lt;/selector&gt; </pre> This defines a set of state spec / color pairs where each state spec specifies a set of states that a view must either be in or not be in and the color specifies the color associated with that spec. </p><pre><code>public class ColorStateList\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/res/ColorStateList.html
Configuration	A										<section class="prog__container"><p> This class describes all device configuration information that can impact the resources the application retrieves. This includes both user-specified configuration options (locale list and scaling) as well as device configurations (such as input modes, screen size and screen orientation). <p> You can acquire this object from <pre><code> Resources </code></pre> , using <pre><code> getConfiguration() </code></pre> . Thus, from an activity, you can get it by chaining the request with <pre><code> getResources() </code></pre> : </p><pre><code>public final class Configuration\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/res/Configuration.html
ObbInfo	A										<section class="prog__container"><p> Basic information about a Opaque Binary Blob (OBB) that reflects the info from the footer on the OBB file. This information may be manipulated by a developer with the <pre><code> obbtool </code></pre> program in the Android SDK.</p><pre><code>public class ObbInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/res/ObbInfo.html
ObbScanner	A										<section class="prog__container"><p> Class to scan Opaque Binary Blob (OBB) files. Use this to get information about an OBB file for use in a program via <pre><code> ObbInfo </code></pre> .</p><pre><code>public class ObbScanner\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/res/ObbScanner.html
android.content.res	A										<section class="prog__container">Contains classes for accessing application resources,such as raw asset files, colors, drawables, media or other other filesin the package, plus important device configuration details(orientation, input types, etc.) that affect how the application may behave.</section>	https://developer.android.com/reference/android/content/res/package-summary.html
Resources	A										<section class="prog__container"><p> Class for accessing an application's resources. This sits on top of the asset manager of the application (accessible through <pre><code> getAssets() </code></pre> ) and provides a high-level API for getting typed data from the assets. <p> The Android resource system keeps track of all non-code assets associated with an application. You can use this class to access your application's resources. You can generally acquire the <pre><code> Resources </code></pre> instance associated with your application with <pre><code> getResources() </code></pre> . </p><pre><code>public class Resources\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/res/Resources.html
Resources.NotFoundException	A										<section class="prog__container"><p> This exception is thrown by the resource APIs when a requested resource can not be found.</p><pre><code>public static class Resources.NotFoundException\n</code></pre></section>	https://developer.android.com/reference/android/content/res/Resources.NotFoundException.html
Resources.Theme	A										<section class="prog__container"><p> This class holds the current attribute values for a particular theme. In other words, a Theme is a set of values for resource attributes; these are used in conjunction with <pre><code> TypedArray </code></pre> to resolve the final value for an attribute. <p> The Theme's attributes come into play in two ways: (1) a styled attribute can explicit reference a value in the theme through the "?themeAttribute" syntax; (2) if no value has been defined for a particular styled attribute, as a last resort we will try to find that attribute's value in the Theme. <p> You will normally use the <pre><code> obtainStyledAttributes(AttributeSet, int[], int, int) </code></pre> APIs to retrieve XML attributes with style and theme information applied. </p><pre><code>public final class Resources.Theme\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/res/Resources.Theme.html
TypedArray	A										<section class="prog__container"><p> Container for an array of values that were retrieved with <pre><code> obtainStyledAttributes(AttributeSet, int[], int, int) </code></pre> or <pre><code> obtainAttributes(AttributeSet, int[]) </code></pre> . Be sure to call <pre><code> recycle() </code></pre> when done with them. The indices used to retrieve values from this structure correspond to the positions of the attributes given to obtainStyledAttributes.</p><pre><code>public class TypedArray\nextends Object</code></pre></section>	https://developer.android.com/reference/android/content/res/TypedArray.html
XmlResourceParser	A										<section class="prog__container"><p> The XML parsing interface returned for an XML resource. This is a standard XmlPullParser interface, as well as an extended AttributeSet interface and an additional close() method on this interface for the client to indicate when it is done reading the resource.</p><pre><code>public interface XmlResourceParser\nimplements XmlPullParser, AttributeSet, AutoCloseable</code></pre></section>	https://developer.android.com/reference/android/content/res/XmlResourceParser.html
AbstractCursor	A										<section class="prog__container"><p> This is an abstract cursor class that handles a lot of the common code that all cursors need to deal with and is provided for convenience reasons.</p><pre><code>public abstract class AbstractCursor\nextends Object</code></pre></section>	https://developer.android.com/reference/android/database/AbstractCursor.html
AbstractCursor.SelfContentObserver	A										<section class="prog__container"><p> Cursors use this class to track changes others make to their URI.</p><pre><code>protected static class AbstractCursor.SelfContentObserver\n</code></pre></section>	https://developer.android.com/reference/android/database/AbstractCursor.SelfContentObserver.html
AbstractWindowedCursor	A										<section class="prog__container"><p> A base class for Cursors that store their data in <pre><code> CursorWindow </code></pre> s. <p> The cursor owns the cursor window it uses. When the cursor is closed, its window is also closed. Likewise, when the window used by the cursor is changed, its old window is closed. This policy of strict ownership ensures that cursor windows are not leaked. </p><pre><code>public abstract class AbstractWindowedCursor\n</code></pre></section>	https://developer.android.com/reference/android/database/AbstractWindowedCursor.html
CharArrayBuffer	A										<section class="prog__container"><p> This is used for <pre><code> copyStringToBuffer(int, CharArrayBuffer) </code></pre></p><pre><code>public final class CharArrayBuffer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/database/CharArrayBuffer.html
ContentObservable	A										<section class="prog__container"><p> A specialization of <pre><code> Observable </code></pre> for <pre><code> ContentObserver </code></pre> that provides methods for sending notifications to a list of <pre><code> ContentObserver </code></pre> objects.</p><pre><code>public class ContentObservable\n</code></pre></section>	https://developer.android.com/reference/android/database/ContentObservable.html
ContentObserver	A										<section class="prog__container"><p> Receives call backs for changes to content. Must be implemented by objects which are added to a <pre><code> ContentObservable </code></pre> .</p><pre><code>public abstract class ContentObserver\nextends Object</code></pre></section>	https://developer.android.com/reference/android/database/ContentObserver.html
CrossProcessCursor	A										<section class="prog__container"><p> A cross process cursor is an extension of a <pre><code> Cursor </code></pre> that also supports usage from remote processes. <p> The contents of a cross process cursor are marshalled to the remote process by filling <pre><code> CursorWindow </code></pre> objects using <pre><code> fillWindow(int, CursorWindow) </code></pre> . As an optimization, the cursor can provide a pre-filled window to use via <pre><code> getWindow() </code></pre> thereby obviating the need to copy the data to yet another cursor window. </p><pre><code>public interface CrossProcessCursor\nimplements Cursor</code></pre></section>	https://developer.android.com/reference/android/database/CrossProcessCursor.html
CrossProcessCursorWrapper	A										<section class="prog__container"><p> Cursor wrapper that implements <pre><code> CrossProcessCursor </code></pre> . <p> If the wrapped cursor implements <pre><code> CrossProcessCursor </code></pre> , then the wrapper delegates <pre><code> fillWindow(int, CursorWindow) </code></pre> , <pre><code> getWindow() </code></pre> and <pre><code> onMove(int, int) </code></pre> to it. Otherwise, the wrapper provides default implementations of these methods that traverse the contents of the cursor similar to <pre><code> fillWindow(int, CursorWindow) </code></pre> . </p><pre><code>public class CrossProcessCursorWrapper\n</code></pre></section>	https://developer.android.com/reference/android/database/CrossProcessCursorWrapper.html
Cursor	A										<section class="prog__container"><p> This interface provides random read-write access to the result set returned by a database query. <p> Cursor implementations are not required to be synchronized so code using a Cursor from multiple threads should perform its own synchronization when using the Cursor. </p><pre><code>public interface Cursor\nimplements Closeable</code></pre></section>	https://developer.android.com/reference/android/database/Cursor.html
CursorIndexOutOfBoundsException	A										<section class="prog__container"><p> An exception indicating that a cursor is out of bounds.</p><pre><code>public class CursorIndexOutOfBoundsException\n</code></pre></section>	https://developer.android.com/reference/android/database/CursorIndexOutOfBoundsException.html
CursorJoiner	A										<section class="prog__container"><p> Does a join on two cursors using the specified columns. The cursors must already be sorted on each of the specified columns in ascending order. This joiner only supports the case where the tuple of key column values is unique. <p> Typical usage: <pre> CursorJoiner joiner = new CursorJoiner(cursorA, keyColumnsofA, cursorB, keyColumnsofB); for (CursorJoiner.Result joinerResult : joiner) { switch (joinerResult) { case LEFT: // handle case where a row in cursorA is unique break; case RIGHT: // handle case where a row in cursorB is unique break; case BOTH: // handle case where a row with the same key is in both cursors break; } } </pre> </p><pre><code>public final class CursorJoiner\nextends Object</code></pre></section>	https://developer.android.com/reference/android/database/CursorJoiner.html
CursorJoiner.Result	A										<section class="prog__container"><p> The result of a call to next().</p><pre><code>public static final enum CursorJoiner.Result\n</code></pre></section>	https://developer.android.com/reference/android/database/CursorJoiner.Result.html
CursorWindow	A										<section class="prog__container"><p> A buffer containing multiple cursor rows. <p> A <pre><code> CursorWindow </code></pre> is read-write when initially created and used locally. When sent to a remote process (by writing it to a <pre><code> Parcel </code></pre> ), the remote process receives a read-only view of the cursor window. Typically the cursor window will be allocated by the producer, filled with data, and then sent to the consumer for reading. </p><pre><code>public class CursorWindow\n</code></pre></section>	https://developer.android.com/reference/android/database/CursorWindow.html
CursorWrapper	A										<section class="prog__container"><p> Wrapper class for Cursor that delegates all calls to the actual cursor object. The primary use for this class is to extend a cursor while overriding only a subset of its methods.</p><pre><code>public class CursorWrapper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/database/CursorWrapper.html
DatabaseErrorHandler	A										<section class="prog__container"><p> An interface to let apps define an action to take when database corruption is detected.</p><pre><code>public interface DatabaseErrorHandler\n</code></pre></section>	https://developer.android.com/reference/android/database/DatabaseErrorHandler.html
DatabaseUtils	A										<section class="prog__container"><p> Static utility methods for dealing with databases and <pre><code> Cursor </code></pre> s.</p><pre><code>public class DatabaseUtils\nextends Object</code></pre></section>	https://developer.android.com/reference/android/database/DatabaseUtils.html
DatabaseUtils.InsertHelper	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 17. </strong> <br/> Use <pre><code> SQLiteStatement </code></pre> instead. </p><pre><code>public static class DatabaseUtils.InsertHelper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/database/DatabaseUtils.InsertHelper.html
DataSetObservable	A										<section class="prog__container"><p> A specialization of <pre><code> Observable </code></pre> for <pre><code> DataSetObserver </code></pre> that provides methods for sending notifications to a list of <pre><code> DataSetObserver </code></pre> objects.</p><pre><code>public class DataSetObservable\n</code></pre></section>	https://developer.android.com/reference/android/database/DataSetObservable.html
DataSetObserver	A										<section class="prog__container"><p> Receives call backs when a data set has been changed, or made invalid. The typically data sets that are observed are <pre><code> Cursor </code></pre> s or <pre><code> Adapter </code></pre> s. DataSetObserver must be implemented by objects which are added to a DataSetObservable.</p><pre><code>public abstract class DataSetObserver\nextends Object</code></pre></section>	https://developer.android.com/reference/android/database/DataSetObserver.html
DefaultDatabaseErrorHandler	A										<section class="prog__container"><p> Default class used to define the action to take when database corruption is reported by sqlite. <p> An application can specify an implementation of <pre><code> DatabaseErrorHandler </code></pre> on the following: <ul> <li> <pre><code> openOrCreateDatabase(String, android.database.sqlite.SQLiteDatabase.CursorFactory, DatabaseErrorHandler) </code></pre> </li> <li> <pre><code> openDatabase(String, android.database.sqlite.SQLiteDatabase.CursorFactory, int, DatabaseErrorHandler) </code></pre> </li> </ul> The specified <pre><code> DatabaseErrorHandler </code></pre> is used to handle database corruption errors, if they occur. <p> If null is specified for the DatabaseErrorHandler param in the above calls, this class is used as the default <pre><code> DatabaseErrorHandler </code></pre> . </p><pre><code>public final class DefaultDatabaseErrorHandler\nextends Object</code></pre></section>	https://developer.android.com/reference/android/database/DefaultDatabaseErrorHandler.html
MatrixCursor	A										<section class="prog__container"><p> A mutable cursor implementation backed by an array of <pre><code> Object </code></pre> s. Use <pre><code> newRow() </code></pre> to add rows. Automatically expands internal capacity as needed.</p><pre><code>public class MatrixCursor\n</code></pre></section>	https://developer.android.com/reference/android/database/MatrixCursor.html
MatrixCursor.RowBuilder	A										<section class="prog__container"><p> Builds a row of values using either of these approaches: <ul> <li> Values can be added with explicit column ordering using <pre><code> add(Object) </code></pre> , which starts from the left-most column and adds one column value at a time. This follows the same ordering as the column names specified at cursor construction time. <li> Column and value pairs can be offered for possible inclusion using <pre><code> add(String, Object) </code></pre> . If the cursor includes the given column, the value will be set for that column, otherwise the value is ignored. This approach is useful when matching data to a custom projection. </li> </li> </ul> Undefined values are left as <pre><code> null </code></pre> .</p><pre><code>public class MatrixCursor.RowBuilder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/database/MatrixCursor.RowBuilder.html
MergeCursor	A										<section class="prog__container"><p> A convience class that lets you present an array of Cursors as a single linear Cursor. The schema of the cursors presented is entirely up to the creator of the MergeCursor, and may be different if that is desired. Calls to getColumns, getColumnIndex, etc will return the value for the row that the MergeCursor is currently pointing at.</p><pre><code>public class MergeCursor\n</code></pre></section>	https://developer.android.com/reference/android/database/MergeCursor.html
Observable	A										<section class="prog__container"><p> Provides methods for registering or unregistering arbitrary observers in an <pre><code> ArrayList </code></pre> . This abstract class is intended to be subclassed and specialized to maintain a registry of observers of specific types and dispatch notifications to them.</p><pre><code>public abstract class Observable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/database/Observable.html
android.database	A										<section class="prog__container">If you need to manage data in a private database, use the</section>	https://developer.android.com/reference/android/database/package-summary.html
SQLException	A										<section class="prog__container"><p> An exception that indicates there was an error with SQL parsing or execution.</p><pre><code>public class SQLException\n</code></pre></section>	https://developer.android.com/reference/android/database/SQLException.html
StaleDataException	A										<section class="prog__container"><p> This exception is thrown when a Cursor contains stale data and must be requeried before being used again.</p><pre><code>public class StaleDataException\n</code></pre></section>	https://developer.android.com/reference/android/database/StaleDataException.html
android.database.sqlite	A										<section class="prog__container">Applications use these classes to manage private databases. If creating acontent provider, you will probably have to use these classes to create andmanage your own database to store content. See</section>	https://developer.android.com/reference/android/database/sqlite/package-summary.html
SQLiteAbortException	A										<section class="prog__container"><p> An exception that indicates that the SQLite program was aborted. This can happen either through a call to ABORT in a trigger, or as the result of using the ABORT conflict clause.</p><pre><code>public class SQLiteAbortException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteAbortException.html
SQLiteAccessPermException	A										<section class="prog__container"><p> This exception class is used when sqlite can't access the database file due to lack of permissions on the file.</p><pre><code>public class SQLiteAccessPermException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteAccessPermException.html
SQLiteBindOrColumnIndexOutOfRangeException	A										<section class="prog__container"><p> Thrown if the the bind or column parameter index is out of range</p><pre><code>public class SQLiteBindOrColumnIndexOutOfRangeException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteBindOrColumnIndexOutOfRangeException.html
SQLiteBlobTooBigException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p><pre><code>public class SQLiteBlobTooBigException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteBlobTooBigException.html
SQLiteCantOpenDatabaseException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p><pre><code>public class SQLiteCantOpenDatabaseException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteCantOpenDatabaseException.html
SQLiteClosable	A										<section class="prog__container"><p> An object created from a SQLiteDatabase that can be closed. This class implements a primitive reference counting scheme for database objects.</p><pre><code>public abstract class SQLiteClosable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteClosable.html
SQLiteConstraintException	A										<section class="prog__container"><p> An exception that indicates that an integrity constraint was violated.</p><pre><code>public class SQLiteConstraintException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteConstraintException.html
SQLiteCursor	A										<section class="prog__container"><p> A Cursor implementation that exposes results from a query on a <pre><code> SQLiteDatabase </code></pre> . SQLiteCursor is not internally synchronized so code using a SQLiteCursor from multiple threads should perform its own synchronization when using the SQLiteCursor.</p><pre><code>public class SQLiteCursor\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteCursor.html
SQLiteCursorDriver	A										<section class="prog__container"><p> A driver for SQLiteCursors that is used to create them and gets notified by the cursors it creates on significant events in their lifetimes.</p><pre><code>public interface SQLiteCursorDriver\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteCursorDriver.html
SQLiteDatabase.CursorFactory	A										<section class="prog__container"><p> Used to allow returning sub-classes of <pre><code> Cursor </code></pre> when calling query.</p><pre><code>public static interface SQLiteDatabase.CursorFactory\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.CursorFactory.html
SQLiteDatabase	A										<section class="prog__container"><p> Exposes methods to manage a SQLite database. <p> SQLiteDatabase has methods to create, delete, execute SQL commands, and perform other common database management tasks. </p><pre><code>public final class SQLiteDatabase\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html
SQLiteDatabaseCorruptException	A										<section class="prog__container"><p> An exception that indicates that the SQLite database file is corrupt.</p><pre><code>public class SQLiteDatabaseCorruptException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteDatabaseCorruptException.html
SQLiteDatabaseLockedException	A										<section class="prog__container"><p> Thrown if the database engine was unable to acquire the database locks it needs to do its job. If the statement is a [COMMIT] or occurs outside of an explicit transaction, then you can retry the statement. If the statement is not a [COMMIT] and occurs within a explicit transaction then you should rollback the transaction before continuing.</p><pre><code>public class SQLiteDatabaseLockedException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteDatabaseLockedException.html
SQLiteDatatypeMismatchException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p><pre><code>public class SQLiteDatatypeMismatchException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteDatatypeMismatchException.html
SQLiteDiskIOException	A										<section class="prog__container"><p> An exception that indicates that an IO error occured while accessing the SQLite database file.</p><pre><code>public class SQLiteDiskIOException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteDiskIOException.html
SQLiteDoneException	A										<section class="prog__container"><p> An exception that indicates that the SQLite program is done. Thrown when an operation that expects a row (such as <pre><code> simpleQueryForString() </code></pre> or <pre><code> simpleQueryForLong() </code></pre> ) does not get one.</p><pre><code>public class SQLiteDoneException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteDoneException.html
SQLiteException	A										<section class="prog__container"><p> A SQLite exception that indicates there was an error with SQL parsing or execution.</p><pre><code>public class SQLiteException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteException.html
SQLiteFullException	A										<section class="prog__container"><p> An exception that indicates that the SQLite database is full.</p><pre><code>public class SQLiteFullException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteFullException.html
SQLiteMisuseException	A										<section class="prog__container"><p> This error can occur if the application creates a SQLiteStatement object and allows multiple threads in the application use it at the same time. Sqlite returns this error if bind and execute methods on this object occur at the same time from multiple threads, like so: thread # 1: in execute() method of the SQLiteStatement object while thread # 2: is in bind..() on the same object.</p><pre><code>public class SQLiteMisuseException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteMisuseException.html
SQLiteOpenHelper	A										<section class="prog__container"><p> A helper class to manage database creation and version management. <p> You create a subclass implementing <pre><code> onCreate(SQLiteDatabase) </code></pre> , <pre><code> onUpgrade(SQLiteDatabase, int, int) </code></pre> and optionally <pre><code> onOpen(SQLiteDatabase) </code></pre> , and this class takes care of opening the database if it exists, creating it if it does not, and upgrading it as necessary. Transactions are used to make sure the database is always in a sensible state. <p> This class makes it easy for <pre><code> ContentProvider </code></pre> implementations to defer opening and upgrading the database until first use, to avoid blocking application startup with long-running database upgrades. <p> For an example, see the NotePadProvider class in the NotePad sample application, in the <em> samples/ </em> directory of the SDK. </p><pre><code>public abstract class SQLiteOpenHelper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html
SQLiteOutOfMemoryException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p><pre><code>public class SQLiteOutOfMemoryException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteOutOfMemoryException.html
SQLiteProgram	A										<section class="prog__container"><p> A base class for compiled SQLite programs. <p> This class is not thread-safe. </p><pre><code>public abstract class SQLiteProgram\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteProgram.html
SQLiteQuery	A										<section class="prog__container"><p> Represents a query that reads the resulting rows into a <pre><code> SQLiteQuery </code></pre> . This class is used by <pre><code> SQLiteCursor </code></pre> and isn't useful itself. <p> This class is not thread-safe. </p><pre><code>public final class SQLiteQuery\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteQuery.html
SQLiteQueryBuilder	A										<section class="prog__container"><p> This is a convience class that helps build SQL queries to be sent to <pre><code> SQLiteDatabase </code></pre> objects.</p><pre><code>public class SQLiteQueryBuilder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteQueryBuilder.html
SQLiteReadOnlyDatabaseException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p><pre><code>public class SQLiteReadOnlyDatabaseException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteReadOnlyDatabaseException.html
SQLiteStatement	A										<section class="prog__container"><p> Represents a statement that can be executed against a database. The statement cannot return multiple rows or columns, but single value (1 x 1) result sets are supported. <p> This class is not thread-safe. </p><pre><code>public final class SQLiteStatement\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteStatement.html
SQLiteTableLockedException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p><pre><code>public class SQLiteTableLockedException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteTableLockedException.html
SQLiteTransactionListener	A										<section class="prog__container"><p> A listener for transaction events.</p><pre><code>public interface SQLiteTransactionListener\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteTransactionListener.html
BaseObservable	A										<section class="prog__container"><p> A convenience class that implements <pre><code> Observable </code></pre> interface and provides <pre><code> notifyPropertyChanged(int) </code></pre> and <pre><code> notifyChange() </code></pre> methods.</p><pre><code>public class BaseObservable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/databinding/BaseObservable.html
Bindable	A										<section class="prog__container"><p> The Bindable annotation should be applied to any getter accessor method of an <pre><code> Observable </code></pre> class. Bindable will generate a field in the BR class to identify the field that has changed.</p><pre><code>public abstract @interface Bindable\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/databinding/Bindable.html
BindingAdapter	A										<section class="prog__container"><p> BindingAdapter is applied to methods that are used to manipulate how values with expressions are set to views. The simplest example is to have a public static method that takes the view and the value to set: <p> <pre><pre><code>@BindingAdapter("android:bufferType") public static void setBufferType(TextView view, TextView.BufferType bufferType) { view.setText(view.getText(), bufferType); }</code></pre></pre> In the above example, when android:bufferType is used on a TextView, the method setBufferType is called. <p> It is also possible to take previously set values, if the old values are listed first: <p> <pre><pre><code>@BindingAdapter("android:onLayoutChange") public static void setOnLayoutChangeListener(View view, View.OnLayoutChangeListener oldValue, View.OnLayoutChangeListener newValue) { if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) { if (oldValue != null) { view.removeOnLayoutChangeListener(oldValue); } if (newValue != null) { view.addOnLayoutChangeListener(newValue); } } }</code></pre></pre> When a binding adapter may also take multiple attributes, it will only be called when all attributes associated with the binding adapter have binding expressions associated with them. This is useful when there are unusual interactions between attributes. For example: <p> <pre><pre><code>@BindingAdapter({"android:onClick", "android:clickable"}) public static void setOnClick(View view, View.OnClickListener clickListener, boolean clickable) { view.setOnClickListener(clickListener); view.setClickable(clickable); }</code></pre></pre> The order of the parameters must match the order of the attributes in values in the BindingAdapter. <p> A binding adapter may optionally take a class extending DataBindingComponent as the first parameter as well. If it does, it will be passed the value passed in during binding, either directly in the inflate method or indirectly, using the value from <pre><code> getDefaultComponent() </code></pre> . <p> If a binding adapter is an instance method, the generated DataBindingComponent will have a getter to retrieve an instance of the BindingAdapter's class to use to call the method. </p><pre><code>public abstract @interface BindingAdapter\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/databinding/BindingAdapter.html
BindingConversion	A										<section class="prog__container"><p> Annotate methods that are used to automatically convert from the expression type to the value used in the setter. The converter should take one parameter, the expression type, and the return value should be the target value type used in the setter. Converters are used whenever they can be applied and are not specific to any attribute.</p><pre><code>public abstract @interface BindingConversion\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/databinding/BindingConversion.html
BindingMethod	A										<section class="prog__container"><p> Used within an <pre><code> BindingMethods </code></pre> annotation to describe a renaming of an attribute to the setter used to set that attribute. By default, an attribute attr will be associated with setter setAttr.</p><pre><code>public abstract @interface BindingMethod\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/databinding/BindingMethod.html
BindingMethods	A										<section class="prog__container"><p> Used to enumerate attribute-to-setter renaming. By default, an attribute is associated with setAttribute setter. If there is a simple rename, enumerate them in an array of <pre><code> BindingMethod </code></pre> annotations in the value.</p><pre><code>public abstract @interface BindingMethods\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/databinding/BindingMethods.html
CallbackRegistry	A										<section class="prog__container"><p> A utility for storing and notifying callbacks. This class supports reentrant modification of the callbacks during notification without adversely disrupting notifications. A common pattern for callbacks is to receive a notification and then remove themselves. This class handles this behavior with constant memory under most circumstances. <p> A subclass of <pre><code> CallbackRegistry.NotifierCallback </code></pre> must be passed to the constructor to define how notifications should be called. That implementation does the actual notification on the listener. It is typically a static instance that can be reused for all similar CallbackRegistries. </p><pre><code>public class CallbackRegistry\nextends Object</code></pre></section>	https://developer.android.com/reference/android/databinding/CallbackRegistry.html
CallbackRegistry.NotifierCallback	A										<section class="prog__container"><p> Class used to notify events from CallbackRegistry.</p><pre><code>public static abstract class CallbackRegistry.NotifierCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/databinding/CallbackRegistry.NotifierCallback.html
DataBindingComponent	A										<section class="prog__container"><p> This interface is generated during compilation to contain getters for all used instance BindingAdapters. When a BindingAdapter is an instance method, an instance of the class implementing the method must be instantiated. This interface will be generated with a getter for each class with the name get* where * is simple class name of the declaring BindingAdapter class/interface. Name collisions will be resolved by adding a numeric suffix to the getter. <p> An instance of this class may also be passed into static or instance BindingAdapters as the first parameter. <p> If using Dagger 2, the developer should extend this interface and annotate the extended interface as a Component. </p><pre><code>public interface DataBindingComponent\n</code></pre></section>	https://developer.android.com/reference/android/databinding/DataBindingComponent.html
DataBindingUtil	A										<section class="prog__container"><p> Utility class to create <pre><code> ViewDataBinding </code></pre> from layouts.</p><pre><code>public class DataBindingUtil\nextends Object</code></pre></section>	https://developer.android.com/reference/android/databinding/DataBindingUtil.html
InverseBindingAdapter	A										<section class="prog__container"><p> InverseBindingAdapter is associated with a method used to retrieve the value for a View when setting values gathered from the View. This is similar to <pre><code> BindingAdapter </code></pre> s: <pre> &amp;commat;InverseBindingAdapter(attribute = "android:text", event = "android:textAttrChanged") public static String captureTextValue(TextView view, CharSequence originalValue) { CharSequence newValue = view.getText(); CharSequence oldValue = value.get(); if (oldValue == null) { value.set(newValue); } else if (!contentEquals(newValue, oldValue)) { value.set(newValue); } } </pre> <p> The default value for event is the attribute name suffixed with "AttrChanged". In the above example, the default value would have been <pre><code> android:textAttrChanged </code></pre> even if it wasn't provided. <p> The event attribute is used to notify the data binding system that the value has changed. The developer will typically create a <pre><code> BindingAdapter </code></pre> to assign the event. For example: <p> <pre> &amp;commat;BindingAdapter(value = {"android:beforeTextChanged", "android:onTextChanged", "android:afterTextChanged", "android:textAttrChanged"}, requireAll = false) public static void setTextWatcher(TextView view, final BeforeTextChanged before, final OnTextChanged on, final AfterTextChanged after, final InverseBindingListener textAttrChanged) { TextWatcher newValue = new TextWatcher() { ... &amp;commat;Override public void onTextChanged(CharSequence s, int start, int before, int count) { if (on != null) { on.onTextChanged(s, start, before, count); } if (textAttrChanged != null) { textAttrChanged.onChange(); } } } TextWatcher oldValue = ListenerUtil.trackListener(view, newValue, R.id.textWatcher); if (oldValue != null) { view.removeTextChangedListener(oldValue); } view.addTextChangedListener(newValue); } </pre> <p> Like <pre><code> BindingAdapter </code></pre> s, InverseBindingAdapter methods may also take <pre><code> DataBindingComponent </code></pre> as the first parameter and may be an instance method with the instance retrieved from the <pre><code> DataBindingComponent </code></pre> . </p><pre><code>public abstract @interface InverseBindingAdapter\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/databinding/InverseBindingAdapter.html
InverseBindingListener	A										<section class="prog__container"><p> A listener implemented by all two-way bindings to be notified when a triggering change happens. For example, when there is a two-way binding for android:text, an implementation of <pre><code> InverseBindingListener </code></pre> will be generated in the layout's binding class. <pre> private static class InverseListenerTextView implements InverseBindingListener { &amp;commat;Override public void onChange() { mObj.setTextValue(mTextView.getText()); } } </pre> <p> A <pre><code> BindingAdapter </code></pre> should be used to assign the event listener. For example, <pre><code> android:onTextChanged </code></pre> will need to trigger the event listener for the <pre><code> android:text </code></pre> attribute. <pre> &amp;commat;InverseBindingAdapter(attribute = "android:text", event = "android:textAttrChanged") public static void captureTextValue(TextView view, ObservableField&lt;CharSequence&gt; value) { CharSequence newValue = view.getText(); CharSequence oldValue = value.get(); if (oldValue == null) { value.set(newValue); } else if (!contentEquals(newValue, oldValue)) { value.set(newValue); } } &amp;commat;BindingAdapter(value = {"android:beforeTextChanged", "android:onTextChanged", "android:afterTextChanged", "android:textAttrChanged"}, requireAll = false) public static void setTextWatcher(TextView view, final BeforeTextChanged before, final OnTextChanged on, final AfterTextChanged after, final InverseBindingListener textAttrChanged) { TextWatcher newValue = new TextWatcher() { ... &amp;commat;Override public void onTextChanged(CharSequence s, int start, int before, int count) { if (on != null) { on.onTextChanged(s, start, before, count); } if (textAttrChanged != null) { textAttrChanged.onChange(); } } } TextWatcher oldValue = ListenerUtil.trackListener(view, newValue, R.id.textWatcher); if (oldValue != null) { view.removeTextChangedListener(oldValue); } view.addTextChangedListener(newValue); } </pre> </p><pre><code>public interface InverseBindingListener\n</code></pre></section>	https://developer.android.com/reference/android/databinding/InverseBindingListener.html
InverseBindingMethod	A										<section class="prog__container"><p> InverseBindingMethod is used to identify how to listen for changes to a View property and which getter method to call. InverseBindingMethod should be associated with any class as part of <pre><code> InverseBindingMethods </code></pre> . <p> <pre> &amp;commat;InverseBindingMethods({&amp;commat;InverseBindingMethod( type = android.widget.TextView.class, attribute = "android:text", event = "android:textAttrChanged", method = "getText")}) public class MyTextViewBindingAdapters { ... } </pre> <p> <pre><code> method </code></pre> is optional. If it isn't provided, the attribute name is used to find the method name, either prefixing with "is" or "get". For the attribute <pre><code> android:text </code></pre> , data binding will search for a <pre><code> public CharSequence getText() </code></pre> method on <pre><code> TextView </code></pre> . <p> <pre><code> event </code></pre> is optional. If it isn't provided, the event name is assigned the attribute name suffixed with <pre><code> AttrChanged </code></pre> . For the <pre><code> android:text </code></pre> attribute, the default event name would be <pre><code> android:textAttrChanged </code></pre> . The event should be set using a <pre><code> BindingAdapter </code></pre> . For example: <pre> &amp;commat;BindingAdapter(value = {"android:beforeTextChanged", "android:onTextChanged", "android:afterTextChanged", "android:textAttrChanged"}, requireAll = false) public static void setTextWatcher(TextView view, final BeforeTextChanged before, final OnTextChanged on, final AfterTextChanged after, final InverseBindingListener textAttrChanged) { TextWatcher newValue = new TextWatcher() { ... &amp;commat;Override public void onTextChanged(CharSequence s, int start, int before, int count) { if (on != null) { on.onTextChanged(s, start, before, count); } if (textAttrChanged != null) { textAttrChanged.onChange(); } } } TextWatcher oldValue = ListenerUtil.trackListener(view, newValue, R.id.textWatcher); if (oldValue != null) { view.removeTextChangedListener(oldValue); } view.addTextChangedListener(newValue); } </pre> </p><pre><code>public abstract @interface InverseBindingMethod\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/databinding/InverseBindingMethod.html
InverseBindingMethods	A										<section class="prog__container"><p> Used to enumerate attribute, getter, and event association. The value is an array of <pre><code> InverseBindingMethod </code></pre> s.</p><pre><code>public abstract @interface InverseBindingMethods\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/databinding/InverseBindingMethods.html
ListChangeRegistry	A										<section class="prog__container"><p> Utility class for managing ObservableList callbacks.</p><pre><code>public class ListChangeRegistry\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ListChangeRegistry.html
MapChangeRegistry	A										<section class="prog__container"><p> Utility class for managing ObservableMap callbacks.</p><pre><code>public class MapChangeRegistry\n</code></pre></section>	https://developer.android.com/reference/android/databinding/MapChangeRegistry.html
Observable	A										<section class="prog__container"><p> Observable classes provide a way in which data bound UI can be notified of changes. <pre><code> ObservableList </code></pre> and <pre><code> ObservableMap </code></pre> also provide the ability to notify when changes occur. ObservableField, ObservableParcelable, ObservableBoolean, ObservableByte, ObservableShort, ObservableInt, ObservableLong, ObservableFloat, and ObservableDouble provide a means by which properties may be notified without implementing Observable. <p> An Observable object should notify the <pre><code> Observable.OnPropertyChangedCallback </code></pre> whenever an observed property of the class changes. <p> The getter for an observable property should be annotated with <pre><code> Bindable </code></pre> . <p> Convenience class BaseObservable implements this interface and PropertyChangeRegistry can help classes that don't extend BaseObservable to implement the listener registry. </p><pre><code>public interface Observable\n</code></pre></section>	https://developer.android.com/reference/android/databinding/Observable.html
Observable.OnPropertyChangedCallback	A										<section class="prog__container"><p> The callback that is called by Observable when an observable property has changed.</p><pre><code>public static abstract class Observable.OnPropertyChangedCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/databinding/Observable.OnPropertyChangedCallback.html
ObservableArrayList	A										<section class="prog__container"><p> An <pre><code> ObservableList </code></pre> implementation using ArrayList as an implementation.</p><pre><code>public class ObservableArrayList\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableArrayList.html
ObservableArrayMap	A										<section class="prog__container"><p> Adds a callback to listen for changes to the ObservableMap.</p><pre><code>public class ObservableArrayMap\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableArrayMap.html
ObservableBoolean	A										<section class="prog__container"><p> An observable class that holds a primitive boolean. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableBoolean isAdult = new ObservableBoolean(); }</code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. <p> This class is parcelable and serializable but callbacks are ignored when the object is parcelled / serialized. Unless you add custom callbacks, this will not be an issue because data binding framework always re-registers callbacks when the view is bound. </p><pre><code>public class ObservableBoolean\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableBoolean.html
ObservableByte	A										<section class="prog__container"><p> An observable class that holds a primitive byte. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableByte flags = new ObservableByte(); }</code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. <p> This class is parcelable and serializable but callbacks are ignored when the object is parcelled / serialized. Unless you add custom callbacks, this will not be an issue because data binding framework always re-registers callbacks when the view is bound. </p><pre><code>public class ObservableByte\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableByte.html
ObservableChar	A										<section class="prog__container"><p> An observable class that holds a primitive char. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableChar firstInitial = new ObservableChar(); }</code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. <p> This class is parcelable and serializable but callbacks are ignored when the object is parcelled / serialized. Unless you add custom callbacks, this will not be an issue because data binding framework always re-registers callbacks when the view is bound. </p><pre><code>public class ObservableChar\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableChar.html
ObservableDouble	A										<section class="prog__container"><p> An observable class that holds a primitive double. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableDouble temperature = new ObservableDouble(); }</code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. <p> This class is parcelable and serializable but callbacks are ignored when the object is parcelled / serialized. Unless you add custom callbacks, this will not be an issue because data binding framework always re-registers callbacks when the view is bound. </p><pre><code>public class ObservableDouble\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableDouble.html
ObservableField	A										<section class="prog__container"><p> An object wrapper to make it observable. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableField&lt;String&gt; name = new ObservableField&lt;String&gt;(); public final ObservableInt age = new ObservableInt(); }</code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. </p><pre><code>public class ObservableField\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableField.html
ObservableFloat	A										<section class="prog__container"><p> An observable class that holds a primitive float. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableFloat temperature = new ObservableFloat(); }</code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. <p> This class is parcelable and serializable but callbacks are ignored when the object is parcelled / serialized. Unless you add custom callbacks, this will not be an issue because data binding framework always re-registers callbacks when the view is bound. </p><pre><code>public class ObservableFloat\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableFloat.html
ObservableInt	A										<section class="prog__container"><p> An observable class that holds a primitive int. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableField<string> name = new ObservableField<string>(); public final ObservableInt age = new ObservableInt(); }</string></string></code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. <p> This class is parcelable and serializable but callbacks are ignored when the object is parcelled / serialized. Unless you add custom callbacks, this will not be an issue because data binding framework always re-registers callbacks when the view is bound. </p><pre><code>public class ObservableInt\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableInt.html
ObservableList	A										<section class="prog__container"><p> A <pre><code> List </code></pre> that notifies when changes are made. An ObservableList bound to the UI will keep the it up-to-date when changes occur. <p> The ObservableList must notify its callbacks whenever a change to the list occurs, using <pre><code> ObservableList.OnListChangedCallback </code></pre> . <p> ObservableArrayList implements ObservableList with an underlying ArrayList. ListChangeRegistry can help in maintaining the callbacks of other implementations. </p><pre><code>public interface ObservableList\nimplements List&lt;T&gt;</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableList.html
ObservableList.OnListChangedCallback	A										<section class="prog__container"><p> The callback that is called by ObservableList when the list has changed.</p><pre><code>public static abstract class ObservableList.OnListChangedCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableList.OnListChangedCallback.html
ObservableLong	A										<section class="prog__container"><p> An observable class that holds a primitive long. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableLong friendCount = new ObservableLong(); }</code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. <p> This class is parcelable and serializable but callbacks are ignored when the object is parcelled / serialized. Unless you add custom callbacks, this will not be an issue because data binding framework always re-registers callbacks when the view is bound. </p><pre><code>public class ObservableLong\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableLong.html
ObservableMap	A										<section class="prog__container"><p> A <pre><code> Map </code></pre> that notifies when items change. This kind of Map may be data bound and have the UI update as the map changes. <p> Implementers must call <pre><code> onMapChanged(ObservableMap, Object) </code></pre> whenever an item is added, changed, or removed. <p> ObservableArrayMap is a convenient implementation of ObservableMap. MapChangeRegistry may help other implementations manage the callbacks. </p><pre><code>public interface ObservableMap\nimplements Map&lt;K,&nbsp;V&gt;</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableMap.html
ObservableMap.OnMapChangedCallback	A										<section class="prog__container"><p> A callback receiving notifications when an ObservableMap changes.</p><pre><code>public static abstract class ObservableMap.OnMapChangedCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableMap.OnMapChangedCallback.html
ObservableParcelable	A										<section class="prog__container"><p> An observable class that holds a parcelable object. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableParcelable&lt;String&gt; name = new ObservableParcelable&lt;String&gt;(); public final ObservableInt age = new ObservableInt(); }</code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. <p> This class is parcelable but you should keep in mind that listeners are ignored when the object is parcelled. Unless you add custom observers, this should not be an issue because data binding framework always re-registers observers when the view is bound. </p><pre><code>public class ObservableParcelable\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableParcelable.html
ObservableShort	A										<section class="prog__container"><p> An observable class that holds a primitive short. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableShort age = new ObservableShort(); }</code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. <p> This class is parcelable and serializable but callbacks are ignored when the object is parcelled / serialized. Unless you add custom callbacks, this will not be an issue because data binding framework always re-registers callbacks when the view is bound. </p><pre><code>public class ObservableShort\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableShort.html
OnRebindCallback	A										<section class="prog__container"><p> Listener set on <pre><code> addOnRebindCallback(OnRebindCallback) </code></pre> that is called when bound values must be reevaluated in <pre><code> executePendingBindings() </code></pre> .</p><pre><code>public abstract class OnRebindCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/databinding/OnRebindCallback.html
android.databinding	A										<section class="prog__container">Contains components used when developing applications with data binding.</section>	https://developer.android.com/reference/android/databinding/package-summary.html
PropertyChangeRegistry	A										<section class="prog__container"><p> Utility class for managing Observable callbacks.</p><pre><code>public class PropertyChangeRegistry\n</code></pre></section>	https://developer.android.com/reference/android/databinding/PropertyChangeRegistry.html
ViewDataBinding	A										<section class="prog__container"><p> Base class for generated data binding classes. If possible, the generated binding should be instantiated using one of its generated static bind or inflate methods. If the specific binding is unknown, <pre><code> bind(View) </code></pre> or <pre><code> inflate(LayoutInflater, int, ViewGroup, boolean) </code></pre> should be used.</p><pre><code>public abstract class ViewDataBinding\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ViewDataBinding.html
ViewStubProxy	A										<section class="prog__container"><p> This class represents a ViewStub before and after inflation. Before inflation, the ViewStub is accessible. After inflation, the root View of the inflated layout will be available. If the inflated layout has data binding, the ViewDataBinding for the inflated View is accessible.</p><pre><code>public class ViewStubProxy\nextends Object</code></pre></section>	https://developer.android.com/reference/android/databinding/ViewStubProxy.html
DrmConvertedStatus	A										<section class="prog__container"><p> An entity class that wraps converted data, conversion status, and the offset for appending the header and body signature to the converted data. An instance of this class may be created two ways by the drm framework: a) a call to <pre><code> DrmManagerClient.convertData() </code></pre> and b) a call to <pre><code> DrmManagerClient.closeConvertSession() </code></pre> . An valid offset value is provided only from a success call to <pre><code> DrmManagerClient.closeConvertSession() </code></pre> .</p><pre><code>public class DrmConvertedStatus\nextends Object</code></pre></section>	https://developer.android.com/reference/android/drm/DrmConvertedStatus.html
DrmErrorEvent	A										<section class="prog__container"><p> An entity class that is passed to the <pre><code> onError() </code></pre> callback.</p><pre><code>public class DrmErrorEvent\n</code></pre></section>	https://developer.android.com/reference/android/drm/DrmErrorEvent.html
DrmEvent	A										<section class="prog__container"><p> A base class that is used to send asynchronous event information from the DRM framework.</p><pre><code>public class DrmEvent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/drm/DrmEvent.html
DrmInfo	A										<section class="prog__container"><p> An entity class that describes the information required to send transactions between a device and an online DRM server. The DRM framework achieves server registration, license acquisition, and any other server-related transactions by passing an instance of this class to <pre><code> processDrmInfo(DrmInfo) </code></pre> . <p> The caller can retrieve the <pre><code> DrmInfo </code></pre> instance by passing a <pre><code> DrmInfoRequest </code></pre> instance to <pre><code> acquireDrmInfo(DrmInfoRequest) </code></pre> . </p><pre><code>public class DrmInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/drm/DrmInfo.html
DrmInfoEvent	A										<section class="prog__container"><p> An entity class that is passed to the <pre><code> onInfo() </code></pre> callback.</p><pre><code>public class DrmInfoEvent\n</code></pre></section>	https://developer.android.com/reference/android/drm/DrmInfoEvent.html
DrmInfoRequest	A										<section class="prog__container"><p> An entity class that is used to pass information to an online DRM server. An instance of this class is passed to the <pre><code> acquireDrmInfo() </code></pre> method to get an instance of a <pre><code> DrmInfo </code></pre> .</p><pre><code>public class DrmInfoRequest\nextends Object</code></pre></section>	https://developer.android.com/reference/android/drm/DrmInfoRequest.html
DrmInfoStatus	A										<section class="prog__container"><p> An entity class that wraps the result of communication between a device and an online DRM server. Specifically, when the <pre><code> DrmManagerClient.processDrmInfo() </code></pre> method is called, an instance of <pre><code> DrmInfoStatus </code></pre> is returned. <p> This class contains the <pre><code> ProcessedData </code></pre> object, which can be used to instantiate a <pre><code> DrmRights </code></pre> object during license acquisition. </p><pre><code>public class DrmInfoStatus\nextends Object</code></pre></section>	https://developer.android.com/reference/android/drm/DrmInfoStatus.html
DrmManagerClient	A										<section class="prog__container"><p> The main programming interface for the DRM framework. An application must instantiate this class to access DRM agents through the DRM framework.</p><pre><code>public class DrmManagerClient\nextends Object</code></pre></section>	https://developer.android.com/reference/android/drm/DrmManagerClient.html
DrmManagerClient.OnErrorListener	A										<section class="prog__container"><p> Interface definition for a callback that receives information about DRM framework errors.</p><pre><code>public static interface DrmManagerClient.OnErrorListener\n</code></pre></section>	https://developer.android.com/reference/android/drm/DrmManagerClient.OnErrorListener.html
DrmManagerClient.OnEventListener	A										<section class="prog__container"><p> Interface definition for a callback that receives information about DRM processing events.</p><pre><code>public static interface DrmManagerClient.OnEventListener\n</code></pre></section>	https://developer.android.com/reference/android/drm/DrmManagerClient.OnEventListener.html
DrmManagerClient.OnInfoListener	A										<section class="prog__container"><p> Interface definition for a callback that receives status messages and warnings during registration and rights acquisition.</p><pre><code>public static interface DrmManagerClient.OnInfoListener\n</code></pre></section>	https://developer.android.com/reference/android/drm/DrmManagerClient.OnInfoListener.html
DrmRights	A										<section class="prog__container"><p> An entity class that wraps the license information retrieved from the online DRM server. <p> A caller can instantiate a <pre><code> DrmRights </code></pre> object by first invoking the <pre><code> processDrmInfo(DrmInfo) </code></pre> method and then using the resulting <pre><code> ProcessedData </code></pre> object to invoke the <pre><code> DrmRights(ProcessedData, String) </code></pre> constructor. <p> A caller can also instantiate a <pre><code> DrmRights </code></pre> object by using the <pre><code> DrmRights(String, String) </code></pre> constructor, which takes a path to a file containing rights information instead of a <pre><code> ProcessedData </code></pre> . <p> Please note that the account id and subscription id is not mandatory by all DRM agents or plugins. When account id or subscription id is not required by the specific DRM agent or plugin, they can be either null, or an empty string, or any other don't-care string value. </p><pre><code>public class DrmRights\nextends Object</code></pre></section>	https://developer.android.com/reference/android/drm/DrmRights.html
DrmStore.Action	A										<section class="prog__container"><p> Defines actions that can be performed on rights-protected content.</p><pre><code>public static class DrmStore.Action\nextends Object</code></pre></section>	https://developer.android.com/reference/android/drm/DrmStore.Action.html
DrmStore.ConstraintsColumns	A										<section class="prog__container"><p> Interface definition for the columns that represent DRM constraints. <pre><code> DrmManagerClient.getConstraints() </code></pre> can be called by an application to find out the contraints on the <pre><code> actions </code></pre> that can be performed on right-protected content. The constants defined in this interface represent three most common types of constraints: count-based, date-based, and duration-based. Two or more constraints can be used at the same time to represent more sophisticated constraints. In addition, user-defined constraint, <pre><code> extended metadata </code></pre> , can be used if these three types of constraints are not sufficient.</p><pre><code>public static interface DrmStore.ConstraintsColumns\n</code></pre></section>	https://developer.android.com/reference/android/drm/DrmStore.ConstraintsColumns.html
DrmStore.DrmObjectType	A										<section class="prog__container"><p> Defines DRM object types.</p><pre><code>public static class DrmStore.DrmObjectType\nextends Object</code></pre></section>	https://developer.android.com/reference/android/drm/DrmStore.DrmObjectType.html
DrmStore	A										<section class="prog__container"><p> Defines constants that are used by the DRM framework.</p><pre><code>public class DrmStore\nextends Object</code></pre></section>	https://developer.android.com/reference/android/drm/DrmStore.html
DrmStore.Playback	A										<section class="prog__container"><p> Defines playback states for content.</p><pre><code>public static class DrmStore.Playback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/drm/DrmStore.Playback.html
DrmStore.RightsStatus	A										<section class="prog__container"><p> Defines status notifications for digital rights.</p><pre><code>public static class DrmStore.RightsStatus\nextends Object</code></pre></section>	https://developer.android.com/reference/android/drm/DrmStore.RightsStatus.html
DrmSupportInfo	A										<section class="prog__container"><p> An entity class that wraps the capability of each DRM plug-in (agent), such as the MIME type and file suffix the DRM plug-in can handle. <p> Plug-in developers can expose the capability of their plug-in by passing an instance of this class to an application. </p><pre><code>public class DrmSupportInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/drm/DrmSupportInfo.html
DrmUtils.ExtendedMetadataParser	A										<section class="prog__container"><p> Utility that parses extended metadata embedded in DRM constraint information. <p> Usage example: <p> byte[] extendedMetadata <br> = constraints.getAsByteArray(DrmStore.ConstraintsColumns.EXTENDED_METADATA); <br> ExtendedMetadataParser parser = getExtendedMetadataParser(extendedMetadata); <br> Iterator keyIterator = parser.keyIterator(); <br> while (keyIterator.hasNext()) { <br> String extendedMetadataKey = keyIterator.next(); <br> String extendedMetadataValue = parser.get(extendedMetadataKey); <br> } </br> </br> </br> </br> </br> </br> </br> </p><pre><code>public static class DrmUtils.ExtendedMetadataParser\nextends Object</code></pre></section>	https://developer.android.com/reference/android/drm/DrmUtils.ExtendedMetadataParser.html
DrmUtils	A										<section class="prog__container"><p> A utility class that provides operations for parsing extended metadata embedded in DRM constraint information. If a DRM scheme has specific constraints beyond the standard constraints, the constraints will show up in the <pre><code> EXTENDED_METADATA </code></pre> key. You can use <pre><code> DrmUtils.ExtendedMetadataParser </code></pre> to iterate over those values.</p><pre><code>public class DrmUtils\nextends Object</code></pre></section>	https://developer.android.com/reference/android/drm/DrmUtils.html
android.drm	A										<section class="prog__container">Provides classes for managing DRM content and determining the capabilities of DRM plugins(agents). Common uses of the DRM API include:</section>	https://developer.android.com/reference/android/drm/package-summary.html
ProcessedData	A										<section class="prog__container"><p> An entity class that wraps the result of a <pre><code> processDrmInfo() </code></pre> transaction between a device and a DRM server. In a license acquisition scenario this class holds the rights information in binary form.</p><pre><code>public class ProcessedData\nextends Object</code></pre></section>	https://developer.android.com/reference/android/drm/ProcessedData.html
Gesture	A										<section class="prog__container"><p> A gesture is a hand-drawn shape on a touch screen. It can have one or multiple strokes. Each stroke is a sequence of timed points. A user-defined gesture can be recognized by a GestureLibrary.</p><pre><code>public class Gesture\nextends Object</code></pre></section>	https://developer.android.com/reference/android/gesture/Gesture.html
GestureLibraries	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public final class GestureLibraries\nextends Object</code></pre></section>	https://developer.android.com/reference/android/gesture/GestureLibraries.html
GestureLibrary	A										<section class="prog__container"><pre><code>public abstract class GestureLibrary\nextends Object</code></pre></section>	https://developer.android.com/reference/android/gesture/GestureLibrary.html
GestureOverlayView	A										<section class="prog__container"><p> A transparent overlay for gesture input that can be placed on top of other widgets or contain other widgets.</p><pre><code>public class GestureOverlayView\n</code></pre></section>	https://developer.android.com/reference/android/gesture/GestureOverlayView.html
GestureOverlayView.OnGestureListener	A										<section class="prog__container"><pre><code>public static interface GestureOverlayView.OnGestureListener\n</code></pre></section>	https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGestureListener.html
GestureOverlayView.OnGesturePerformedListener	A										<section class="prog__container"><pre><code>public static interface GestureOverlayView.OnGesturePerformedListener\n</code></pre></section>	https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGesturePerformedListener.html
GestureOverlayView.OnGesturingListener	A										<section class="prog__container"><pre><code>public static interface GestureOverlayView.OnGesturingListener\n</code></pre></section>	https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGesturingListener.html
GesturePoint	A										<section class="prog__container"><p> A timed point of a gesture stroke. Multiple points form a stroke.</p><pre><code>public class GesturePoint\nextends Object</code></pre></section>	https://developer.android.com/reference/android/gesture/GesturePoint.html
GestureStore	A										<section class="prog__container"><p> GestureLibrary maintains gesture examples and makes predictions on a new gesture</p><pre><code>public class GestureStore\nextends Object</code></pre></section>	https://developer.android.com/reference/android/gesture/GestureStore.html
GestureStroke	A										<section class="prog__container"><p> A gesture stroke started on a touch down and ended on a touch up. A stroke consists of a sequence of timed points. One or multiple strokes form a gesture.</p><pre><code>public class GestureStroke\nextends Object</code></pre></section>	https://developer.android.com/reference/android/gesture/GestureStroke.html
GestureUtils	A										<section class="prog__container"><p> Utility functions for gesture processing &amp; analysis, including methods for: <ul> <li> feature extraction (e.g., samplers and those for calculating bounding boxes and gesture path lengths); <li> geometric transformation (e.g., translation, rotation and scaling); <li> gesture similarity comparison (e.g., calculating Euclidean or Cosine distances between two gestures). </li> </li> </li> </ul></p><pre><code>public final class GestureUtils\nextends Object</code></pre></section>	https://developer.android.com/reference/android/gesture/GestureUtils.html
OrientedBoundingBox	A										<section class="prog__container"><p> An oriented bounding box</p><pre><code>public class OrientedBoundingBox\nextends Object</code></pre></section>	https://developer.android.com/reference/android/gesture/OrientedBoundingBox.html
android.gesture	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/gesture/package-summary.html
Prediction	A										<section class="prog__container"><pre><code>public class Prediction\nextends Object</code></pre></section>	https://developer.android.com/reference/android/gesture/Prediction.html
Bitmap.CompressFormat	A										<section class="prog__container"><p> Specifies the known formats a bitmap can be compressed into</p><pre><code>public static final enum Bitmap.CompressFormat\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Bitmap.CompressFormat.html
Bitmap.Config	A										<section class="prog__container"><p> Possible bitmap configurations. A bitmap configuration describes how pixels are stored. This affects the quality (color depth) as well as the ability to display transparent/translucent colors.</p><pre><code>public static final enum Bitmap.Config\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Bitmap.Config.html
Bitmap	A										<section class="prog__container"><p> Specifies the known formats a bitmap can be compressed into</p><pre><code>public final class Bitmap\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Bitmap.html
BitmapFactory	A										<section class="prog__container"><p> Creates Bitmap objects from various sources, including files, streams, and byte-arrays.</p><pre><code>public class BitmapFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/BitmapFactory.html
BitmapFactory.Options	A										<section class="prog__container"><p> If set, decode methods that take the Options object will attempt to reuse this bitmap when loading content.</p><pre><code>public static class BitmapFactory.Options\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html
BitmapRegionDecoder	A										<section class="prog__container"><p> BitmapRegionDecoder can be used to decode a rectangle region from an image. BitmapRegionDecoder is particularly useful when an original image is large and you only need parts of the image. <p> To create a BitmapRegionDecoder, call newInstance(...). Given a BitmapRegionDecoder, users can call decodeRegion() repeatedly to get a decoded Bitmap of the specified region. </p><pre><code>public final class BitmapRegionDecoder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html
BitmapShader	A										<section class="prog__container"><p> Shader used to draw a bitmap as a texture. The bitmap can be repeated or mirrored by setting the tiling mode.</p><pre><code>public class BitmapShader\n</code></pre></section>	https://developer.android.com/reference/android/graphics/BitmapShader.html
BlurMaskFilter.Blur	A										<section class="prog__container"><p> Blur inside the border, draw nothing outside.</p><pre><code>public static final enum BlurMaskFilter.Blur\n</code></pre></section>	https://developer.android.com/reference/android/graphics/BlurMaskFilter.Blur.html
BlurMaskFilter	A										<section class="prog__container"><p> This takes a mask, and blurs its edge by the specified radius. Whether or or not to include the original mask, and whether the blur goes outside, inside, or straddles, the original mask's border, is controlled by the Blur enum.</p><pre><code>public class BlurMaskFilter\n</code></pre></section>	https://developer.android.com/reference/android/graphics/BlurMaskFilter.html
Camera	A										<section class="prog__container"><p> A camera instance can be used to compute 3D transformations and generate a matrix that can be applied, for instance, on a <pre><code> Canvas </code></pre> .</p><pre><code>public class Camera\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Camera.html
Canvas.EdgeType	A										<section class="prog__container"><p> Antialiased: Treat edges by rounding-out, since they may be antialiased</p><pre><code>public static final enum Canvas.EdgeType\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Canvas.EdgeType.html
Canvas	A										<section class="prog__container"><p> The Canvas class holds the "draw" calls. To draw something, you need 4 basic components: A Bitmap to hold the pixels, a Canvas to host the draw calls (writing into the bitmap), a drawing primitive (e.g. Rect, Path, text, Bitmap), and a paint (to describe the colors and styles for the drawing). </p><pre><code>public class Canvas\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Canvas.html
Canvas.VertexMode	A										<section class="prog__container"><pre><code>public static final enum Canvas.VertexMode\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Canvas.VertexMode.html
Color	A										<section class="prog__container"><p> The Color class defines methods for creating and converting color ints. Colors are represented as packed ints, made up of 4 bytes: alpha, red, green, blue. The values are unpremultiplied, meaning any transparency is stored solely in the alpha component, and not in the color components. The components are stored as follows (alpha &lt;&lt; 24) | (red &lt;&lt; 16) | (green &lt;&lt; 8) | blue. Each component ranges between 0..255 with 0 meaning no contribution for that component, and 255 meaning 100% contribution. Thus opaque-black would be 0xFF000000 (100% opaque but no contributions from red, green, or blue), and opaque-white would be 0xFFFFFFFF</p><pre><code>public class Color\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Color.html
ColorFilter	A										<section class="prog__container"><p> A color filter can be used with a <pre><code> Paint </code></pre> to modify the color of each pixel drawn with that paint. This is an abstract class that should never be used directly.</p><pre><code>public class ColorFilter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/ColorFilter.html
ColorMatrix	A										<section class="prog__container"><p> 4x5 matrix for transforming the color and alpha components of a Bitmap. The matrix can be passed as single array, and is treated as follows: <pre> [ a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t ]</pre> <p> When applied to a color <pre><code> [R, G, B, A] </code></pre> , the resulting color is computed as: </p><pre><code>public class ColorMatrix\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/ColorMatrix.html
ColorMatrixColorFilter	A										<section class="prog__container"><p> A color filter that transforms colors through a 4x5 color matrix. This filter can be used to change the saturation of pixels, convert from YUV to RGB, etc.</p><pre><code>public class ColorMatrixColorFilter\n</code></pre></section>	https://developer.android.com/reference/android/graphics/ColorMatrixColorFilter.html
ComposePathEffect	A										<section class="prog__container"><p> Construct a PathEffect whose effect is to apply first the inner effect and the the outer pathEffect (e.g.</p><pre><code>public class ComposePathEffect\n</code></pre></section>	https://developer.android.com/reference/android/graphics/ComposePathEffect.html
ComposeShader	A										<section class="prog__container"><p> A subclass of shader that returns the composition of two other shaders, combined by an <pre><code> Xfermode </code></pre> subclass.</p><pre><code>public class ComposeShader\n</code></pre></section>	https://developer.android.com/reference/android/graphics/ComposeShader.html
CornerPathEffect	A										<section class="prog__container"><p> Transforms geometries that are drawn (either STROKE or FILL styles) by replacing any sharp angles between line segments into rounded angles of the specified radius.</p><pre><code>public class CornerPathEffect\n</code></pre></section>	https://developer.android.com/reference/android/graphics/CornerPathEffect.html
DashPathEffect	A										<section class="prog__container"><p> The intervals array must contain an even number of entries (&gt;=2), with the even indices specifying the "on" intervals, and the odd indices specifying the "off" intervals.</p><pre><code>public class DashPathEffect\n</code></pre></section>	https://developer.android.com/reference/android/graphics/DashPathEffect.html
DiscretePathEffect	A										<section class="prog__container"><p> Chop the path into lines of segmentLength, randomly deviating from the original path by deviation.</p><pre><code>public class DiscretePathEffect\n</code></pre></section>	https://developer.android.com/reference/android/graphics/DiscretePathEffect.html
DrawFilter	A										<section class="prog__container"><p> A DrawFilter subclass can be installed in a Canvas. When it is present, it can modify the paint that is used to draw (temporarily). With this, a filter can disable/enable antialiasing, or change the color for everything this is drawn.</p><pre><code>public class DrawFilter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/DrawFilter.html
EmbossMaskFilter	A										<section class="prog__container"><p> Create an emboss maskfilter</p><pre><code>public class EmbossMaskFilter\n</code></pre></section>	https://developer.android.com/reference/android/graphics/EmbossMaskFilter.html
ImageFormat	A										<section class="prog__container"><p> <p> Android dense depth image format. </p><pre><code>public class ImageFormat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/ImageFormat.html
Interpolator	A										<section class="prog__container"><pre><code>public class Interpolator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Interpolator.html
Interpolator.Result	A										<section class="prog__container"><pre><code>public static final enum Interpolator.Result\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Interpolator.Result.html
LayerRasterizer	A										<section class="prog__container"><p> Add a new layer (above any previous layers) to the rasterizer.</p><pre><code>public class LayerRasterizer\n</code></pre></section>	https://developer.android.com/reference/android/graphics/LayerRasterizer.html
LightingColorFilter	A										<section class="prog__container"><p> A color filter that can be used to simulate simple lighting effects. A <pre><code> LightingColorFilter </code></pre> is defined by two parameters, one used to multiply the source color (called <pre><code> colorMultiply </code></pre> ) and one used to add to the source color (called <pre><code> colorAdd </code></pre> ). The alpha channel is left untouched by this color filter. Given a source color RGB, the resulting R'G'B' color is computed thusly: <pre> R' = R * colorMultiply.R + colorAdd.R G' = G * colorMultiply.G + colorAdd.G B' = B * colorMultiply.B + colorAdd.B </pre> The result is pinned to the <pre><code> [0..255] </code></pre> range for each channel.</p><pre><code>public class LightingColorFilter\n</code></pre></section>	https://developer.android.com/reference/android/graphics/LightingColorFilter.html
LinearGradient	A										<section class="prog__container"><p> Create a shader that draws a linear gradient along a line.</p><pre><code>public class LinearGradient\n</code></pre></section>	https://developer.android.com/reference/android/graphics/LinearGradient.html
MaskFilter	A										<section class="prog__container"><p> MaskFilter is the base class for object that perform transformations on an alpha-channel mask before drawing it. A subclass of MaskFilter may be installed into a Paint. Blur and emboss are implemented as subclasses of MaskFilter.</p><pre><code>public class MaskFilter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/MaskFilter.html
Matrix	A										<section class="prog__container"><p> The Matrix class holds a 3x3 matrix for transforming coordinates.</p><pre><code>public class Matrix\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Matrix.html
Matrix.ScaleToFit	A										<section class="prog__container"><p> Controlls how the src rect should align into the dst rect for setRectToRect().</p><pre><code>public static final enum Matrix.ScaleToFit\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Matrix.ScaleToFit.html
Movie	A										<section class="prog__container"><p> Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.</p><pre><code>public class Movie\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Movie.html
NinePatch	A										<section class="prog__container"><p> The NinePatch class permits drawing a bitmap in nine or more sections. Essentially, it allows the creation of custom graphics that will scale the way that you define, when content added within the image exceeds the normal bounds of the graphic. For a thorough explanation of a NinePatch image, read the discussion in the 2D Graphics document. <p> The Draw 9-Patch tool offers an extremely handy way to create your NinePatch images, using a WYSIWYG graphics editor. </p><pre><code>public class NinePatch\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/NinePatch.html
Outline	A										<section class="prog__container"><p> Defines a simple shape, used for bounding graphical regions. <p> Can be computed for a View, or computed by a Drawable, to drive the shape of shadows cast by a View, or to clip the contents of the View. </p><pre><code>public final class Outline\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Outline.html
android.graphics	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/graphics/package-summary.html
Paint.Align	A										<section class="prog__container"><p> Align specifies how drawText aligns its text relative to the [x,y] coordinates. The default is LEFT.</p><pre><code>public static final enum Paint.Align\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Paint.Align.html
Paint.Cap	A										<section class="prog__container"><p> The Cap specifies the treatment for the beginning and ending of stroked lines and paths. The default is BUTT.</p><pre><code>public static final enum Paint.Cap\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Paint.Cap.html
Paint.FontMetrics	A										<section class="prog__container"><p> Class that describes the various metrics for a font at a given text size. Remember, Y values increase going down, so those values will be positive, and values that measure distances going up will be negative. This class is returned by getFontMetrics().</p><pre><code>public static class Paint.FontMetrics\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Paint.FontMetrics.html
Paint.FontMetricsInt	A										<section class="prog__container"><p> Convenience method for callers that want to have FontMetrics values as integers.</p><pre><code>public static class Paint.FontMetricsInt\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Paint.FontMetricsInt.html
Paint	A										<section class="prog__container"><p> The Paint class holds the style and color information about how to draw geometries, text and bitmaps.</p><pre><code>public class Paint\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Paint.html
Paint.Join	A										<section class="prog__container"><p> The Join specifies the treatment where lines and curve segments join on a stroked path. The default is MITER.</p><pre><code>public static final enum Paint.Join\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Paint.Join.html
Paint.Style	A										<section class="prog__container"><p> The Style specifies if the primitive being drawn is filled, stroked, or both (in the same color). The default is FILL.</p><pre><code>public static final enum Paint.Style\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Paint.Style.html
PaintFlagsDrawFilter	A										<section class="prog__container"><p> Subclass of DrawFilter that affects every paint by first clearing the specified clearBits in the paint's flags, and then setting the specified setBits in the paint's flags.</p><pre><code>public class PaintFlagsDrawFilter\n</code></pre></section>	https://developer.android.com/reference/android/graphics/PaintFlagsDrawFilter.html
Path.Direction	A										<section class="prog__container"><p> Specifies how closed shapes (e.g. rects, ovals) are oriented when they are added to a path.</p><pre><code>public static final enum Path.Direction\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Path.Direction.html
Path.FillType	A										<section class="prog__container"><p> Enum for the ways a path may be filled.</p><pre><code>public static final enum Path.FillType\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Path.FillType.html
Path	A										<section class="prog__container"><p> The Path class encapsulates compound (multiple contour) geometric paths consisting of straight line segments, quadratic curves, and cubic curves. It can be drawn with canvas.drawPath(path, paint), either filled or stroked (based on the paint's Style), or it can be used for clipping or to draw text on a path.</p><pre><code>public class Path\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Path.html
Path.Op	A										<section class="prog__container"><p> The logical operations that can be performed when combining two paths.</p><pre><code>public static final enum Path.Op\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Path.Op.html
PathDashPathEffect	A										<section class="prog__container"><pre><code>public class PathDashPathEffect\n</code></pre></section>	https://developer.android.com/reference/android/graphics/PathDashPathEffect.html
PathDashPathEffect.Style	A										<section class="prog__container"><pre><code>public static final enum PathDashPathEffect.Style\n</code></pre></section>	https://developer.android.com/reference/android/graphics/PathDashPathEffect.Style.html
PathEffect	A										<section class="prog__container"><p> PathEffect is the base class for objects in the Paint that affect the geometry of a drawing primitive before it is transformed by the canvas' matrix and drawn.</p><pre><code>public class PathEffect\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/PathEffect.html
PathMeasure	A										<section class="prog__container"><pre><code>public class PathMeasure\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/PathMeasure.html
Picture	A										<section class="prog__container"><p> A Picture records drawing calls (via the canvas returned by beginRecording) and can then play them back into Canvas (via <pre><code> draw(Canvas) </code></pre> or <pre><code> drawPicture(Picture) </code></pre> ).For most content (e.g. text, lines, rectangles), drawing a sequence from a picture can be faster than the equivalent API calls, since the picture performs its playback without incurring any method-call overhead. <p class="note"> <strong> Note: </strong> Prior to API level 23 a picture cannot be replayed on a hardware accelerated canvas. </p><pre><code>public class Picture\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Picture.html
PixelFormat	A										<section class="prog__container"><pre><code>public class PixelFormat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/PixelFormat.html
Point	A										<section class="prog__container"><p> Point holds two integer coordinates</p><pre><code>public class Point\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Point.html
PointF	A										<section class="prog__container"><p> PointF holds two float coordinates</p><pre><code>public class PointF\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/PointF.html
PorterDuff	A										<section class="prog__container"><pre><code>public class PorterDuff\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/PorterDuff.html
PorterDuff.Mode	A										<section class="prog__container"><p> Saturate(S + D)</p><pre><code>public static final enum PorterDuff.Mode\n</code></pre></section>	https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html
PorterDuffColorFilter	A										<section class="prog__container"><p> A color filter that can be used to tint the source pixels using a single color and a specific <pre><code> Porter-Duff composite mode </code></pre> .</p><pre><code>public class PorterDuffColorFilter\n</code></pre></section>	https://developer.android.com/reference/android/graphics/PorterDuffColorFilter.html
PorterDuffXfermode	A										<section class="prog__container"><p> Create an xfermode that uses the specified porter-duff mode.</p><pre><code>public class PorterDuffXfermode\n</code></pre></section>	https://developer.android.com/reference/android/graphics/PorterDuffXfermode.html
RadialGradient	A										<section class="prog__container"><p> Create a shader that draws a radial gradient given the center and radius.</p><pre><code>public class RadialGradient\n</code></pre></section>	https://developer.android.com/reference/android/graphics/RadialGradient.html
Rasterizer	A										<section class="prog__container"><p> Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.</p><pre><code>public class Rasterizer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Rasterizer.html
Rect	A										<section class="prog__container"><p> Rect holds four integer coordinates for a rectangle. The rectangle is represented by the coordinates of its 4 edges (left, top, right bottom). These fields can be accessed directly. Use width() and height() to retrieve the rectangle's width and height. Note: most methods do not check to see that the coordinates are sorted correctly (i.e. left &lt;= right and top &lt;= bottom). <p> Note that the right and bottom coordinates are exclusive. This means a Rect being drawn untransformed onto a <pre><code> Canvas </code></pre> will draw into the column and row described by its left and top coordinates, but not those of its bottom and right. </p><pre><code>public final class Rect\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Rect.html
RectF	A										<section class="prog__container"><p> RectF holds four float coordinates for a rectangle. The rectangle is represented by the coordinates of its 4 edges (left, top, right bottom). These fields can be accessed directly. Use width() and height() to retrieve the rectangle's width and height. Note: most methods do not check to see that the coordinates are sorted correctly (i.e. left &lt;= right and top &lt;= bottom).</p><pre><code>public class RectF\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/RectF.html
Region	A										<section class="prog__container"><pre><code>public class Region\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Region.html
Region.Op	A										<section class="prog__container"><pre><code>public static final enum Region.Op\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Region.Op.html
RegionIterator	A										<section class="prog__container"><p> Construct an iterator for all of the rectangles in a region.</p><pre><code>public class RegionIterator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/RegionIterator.html
Shader	A										<section class="prog__container"><p> Shader is the based class for objects that return horizontal spans of colors during drawing. A subclass of Shader is installed in a Paint calling paint.setShader(shader). After that any object (other than a bitmap) that is drawn with that paint will get its color(s) from the shader.</p><pre><code>public class Shader\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Shader.html
Shader.TileMode	A										<section class="prog__container"><p> replicate the edge color if the shader draws outside of its original bounds</p><pre><code>public static final enum Shader.TileMode\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Shader.TileMode.html
SumPathEffect	A										<section class="prog__container"><p> Construct a PathEffect whose effect is to apply two effects, in sequence.</p><pre><code>public class SumPathEffect\n</code></pre></section>	https://developer.android.com/reference/android/graphics/SumPathEffect.html
SurfaceTexture	A										<section class="prog__container"><p> Captures frames from an image stream as an OpenGL ES texture. <p> The image stream may come from either camera preview or video decode. A <pre><code> Surface </code></pre> created from a SurfaceTexture can be used as an output destination for the <pre><code> android.hardware.camera2 </code></pre> , <pre><code> MediaCodec </code></pre> , <pre><code> MediaPlayer </code></pre> , and <pre><code> Allocation </code></pre> APIs. When <pre><code> updateTexImage() </code></pre> is called, the contents of the texture object specified when the SurfaceTexture was created are updated to contain the most recent image from the image stream. This may cause some frames of the stream to be skipped. <p> A SurfaceTexture may also be used in place of a SurfaceHolder when specifying the output destination of the older <pre><code> Camera </code></pre> API. Doing so will cause all the frames from the image stream to be sent to the SurfaceTexture object rather than to the device's display. <p> When sampling from the texture one should first transform the texture coordinates using the matrix queried via <pre><code> getTransformMatrix(float[]) </code></pre> . The transform matrix may change each time <pre><code> updateTexImage() </code></pre> is called, so it should be re-queried each time the texture image is updated. This matrix transforms traditional 2D OpenGL ES texture coordinate column vectors of the form (s, t, 0, 1) where s and t are on the inclusive interval [0, 1] to the proper sampling location in the streamed texture. This transform compensates for any properties of the image stream source that cause it to appear different from a traditional OpenGL ES texture. For example, sampling from the bottom left corner of the image can be accomplished by transforming the column vector (0, 0, 0, 1) using the queried matrix, while sampling from the top right corner of the image can be done by transforming (1, 1, 0, 1). <p> The texture object uses the GL_TEXTURE_EXTERNAL_OES texture target, which is defined by the GL_OES_EGL_image_external OpenGL ES extension. This limits how the texture may be used. Each time the texture is bound it must be bound to the GL_TEXTURE_EXTERNAL_OES target rather than the GL_TEXTURE_2D target. Additionally, any OpenGL ES 2.0 shader that samples from the texture must declare its use of this extension using, for example, an "#extension GL_OES_EGL_image_external : require" directive. Such shaders must also access the texture using the samplerExternalOES GLSL sampler type. <p> SurfaceTexture objects may be created on any thread. <pre><code> updateTexImage() </code></pre> may only be called on the thread with the OpenGL ES context that contains the texture object. The frame-available callback is called on an arbitrary thread, so unless special care is taken <pre><code> updateTexImage() </code></pre> should not be called directly from the callback. </p><pre><code>public class SurfaceTexture\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/SurfaceTexture.html
SurfaceTexture.OnFrameAvailableListener	A										<section class="prog__container"><p> Callback interface for being notified that a new stream frame is available.</p><pre><code>public static interface SurfaceTexture.OnFrameAvailableListener\n</code></pre></section>	https://developer.android.com/reference/android/graphics/SurfaceTexture.OnFrameAvailableListener.html
SurfaceTexture.OutOfResourcesException	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 19. </strong> <br/> No longer thrown. <pre><code> Surface.OutOfResourcesException </code></pre> is used instead. </p><pre><code>public static class SurfaceTexture.OutOfResourcesException\n</code></pre></section>	https://developer.android.com/reference/android/graphics/SurfaceTexture.OutOfResourcesException.html
SweepGradient	A										<section class="prog__container"><p> A subclass of Shader that draws a sweep gradient around a center point.</p><pre><code>public class SweepGradient\n</code></pre></section>	https://developer.android.com/reference/android/graphics/SweepGradient.html
Typeface	A										<section class="prog__container"><p> The Typeface class specifies the typeface and intrinsic style of a font. This is used in the paint, along with optionally Paint settings like textSize, textSkewX, textScaleX to specify how text appears when drawn (and measured).</p><pre><code>public class Typeface\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Typeface.html
Xfermode	A										<section class="prog__container"><p> Xfermode is the base class for objects that are called to implement custom "transfer-modes" in the drawing pipeline. The static function Create(Modes) can be called to return an instance of any of the predefined subclasses as specified in the Modes enum. When an Xfermode is assigned to an Paint, then objects drawn with that paint have the xfermode applied.</p><pre><code>public class Xfermode\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/Xfermode.html
YuvImage	A										<section class="prog__container"><p> YuvImage contains YUV data and provides a method that compresses a region of the YUV data to a Jpeg. The YUV data should be provided as a single byte array irrespective of the number of image planes in it. Currently only ImageFormat.NV21 and ImageFormat.YUY2 are supported. To compress a rectangle region in the YUV data, users have to specify the region by left, top, width and height.</p><pre><code>public class YuvImage\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/YuvImage.html
Animatable	A										<section class="prog__container"><p> Interface that drawables supporting animations should implement.</p><pre><code>public interface Animatable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/Animatable.html
Animatable2.AnimationCallback	A										<section class="prog__container"><p> Called when the animation ends.</p><pre><code>public static abstract class Animatable2.AnimationCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/Animatable2.AnimationCallback.html
Animatable2	A										<section class="prog__container"><p> Abstract class that drawables supporting animations and callbacks should extend.</p><pre><code>public interface Animatable2\nimplements Animatable</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/Animatable2.html
AnimatedStateListDrawable	A										<section class="prog__container"><p> Drawable containing a set of Drawable keyframes where the currently displayed keyframe is chosen based on the current state set. Animations between keyframes may optionally be defined using transition elements. <p> This drawable can be defined in an XML file with the <pre><code> &lt;animated-selector&gt; </code></pre> element. Each keyframe Drawable is defined in a nested <pre><code> &lt;item&gt; </code></pre> element. Transitions are defined in a nested <pre><code> &lt;transition&gt; </code></pre> element. </p><pre><code>public class AnimatedStateListDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/AnimatedStateListDrawable.html
AnimatedVectorDrawable	A										<section class="prog__container"><p> This class animates properties of a <pre><code> VectorDrawable </code></pre> with animations defined using <pre><code> ObjectAnimator </code></pre> or <pre><code> AnimatorSet </code></pre> . <p> Starting from API 25, AnimatedVectorDrawable runs on RenderThread (as opposed to on UI thread for earlier APIs). This means animations in AnimatedVectorDrawable can remain smooth even when there is heavy workload on the UI thread. Note: If the UI thread is unresponsive, RenderThread may continue animating until the UI thread is capable of pushing another frame. Therefore, it is not possible to precisely coordinate a RenderThread-enabled AnimatedVectorDrawable with UI thread animations. Additionally, <pre><code> onAnimationEnd(Drawable) </code></pre> will be called the frame after the AnimatedVectorDrawable finishes on the RenderThread. </p><pre><code>public class AnimatedVectorDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/AnimatedVectorDrawable.html
AnimationDrawable	A										<section class="prog__container"><p> An object used to create frame-by-frame animations, defined by a series of Drawable objects, which can be used as a View object's background. <p> The simplest way to create a frame-by-frame animation is to define the animation in an XML file, placed in the res/drawable/ folder, and set it as the background to a View object. Then, call <pre><code> start() </code></pre> to run the animation. <p> An AnimationDrawable defined in XML consists of a single <pre><code> &lt;animation-list&gt; </code></pre> element and a series of nested <pre><code> &lt;item&gt; </code></pre> tags. Each item defines a frame of the animation. See the example below. <p> spin_animation.xml file in res/drawable/ folder: <pre> &lt;!-- Animation frames are wheel0.png through wheel5.png files inside the res/drawable/ folder --&gt; &lt;animation-list android:id="@+id/selected" android:oneshot="false"&gt; &lt;item android:drawable="@drawable/wheel0" android:duration="50" /&gt; &lt;item android:drawable="@drawable/wheel1" android:duration="50" /&gt; &lt;item android:drawable="@drawable/wheel2" android:duration="50" /&gt; &lt;item android:drawable="@drawable/wheel3" android:duration="50" /&gt; &lt;item android:drawable="@drawable/wheel4" android:duration="50" /&gt; &lt;item android:drawable="@drawable/wheel5" android:duration="50" /&gt; &lt;/animation-list&gt;</pre> <p> Here is the code to load and play this animation. <pre> // Load the ImageView that will host the animation and // set its background to our AnimationDrawable XML resource. ImageView img = (ImageView)findViewById(R.id.spinning_wheel_image); img.setBackgroundResource(R.drawable.spin_animation); // Get the background, which has been compiled to an AnimationDrawable object. AnimationDrawable frameAnimation = (AnimationDrawable) img.getBackground(); // Start the animation (looped playback by default). frameAnimation.start(); </pre> </p><pre><code>public class AnimationDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/AnimationDrawable.html
BitmapDrawable	A										<section class="prog__container"><p> A Drawable that wraps a bitmap and can be tiled, stretched, or aligned. You can create a BitmapDrawable from a file path, an input stream, through XML inflation, or from a <pre><code> Bitmap </code></pre> object. <p> It can be defined in an XML file with the <pre><code> &lt;bitmap&gt; </code></pre> element. For more information, see the guide to Drawable Resources . </p><pre><code>public class BitmapDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/BitmapDrawable.html
ClipDrawable	A										<section class="prog__container"><p> A Drawable that clips another Drawable based on this Drawable's current level value. You can control how much the child Drawable gets clipped in width and height based on the level, as well as a gravity to control where it is placed in its overall container. Most often used to implement things like progress bars, by increasing the drawable's level with <pre><code> setLevel() </code></pre> . <p class="note"> <strong> Note: </strong> The drawable is clipped completely and not visible when the level is 0 and fully revealed when the level is 10,000. </p><pre><code>public class ClipDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/ClipDrawable.html
ColorDrawable	A										<section class="prog__container"><p> A specialized Drawable that fills the Canvas with a specified color. Note that a ColorDrawable ignores the ColorFilter. <p> It can be defined in an XML file with the <pre><code> &lt;color&gt; </code></pre> element. </p><pre><code>public class ColorDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/ColorDrawable.html
Drawable.Callback	A										<section class="prog__container"><p> Implement this interface if you want to create an animated drawable that extends <pre><code> Drawable </code></pre> . Upon retrieving a drawable, use <pre><code> setCallback(android.graphics.drawable.Drawable.Callback) </code></pre> to supply your implementation of the interface to the drawable; it uses this interface to schedule and execute animation changes.</p><pre><code>public static interface Drawable.Callback\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/Drawable.Callback.html
Drawable.ConstantState	A										<section class="prog__container"><p> This abstract class is used by <pre><code> Drawable </code></pre> s to store shared constant state and data between Drawables. <pre><code> BitmapDrawable </code></pre> s created from the same resource will for instance share a unique bitmap stored in their ConstantState. <p> <pre><code> newDrawable(Resources) </code></pre> can be used as a factory to create new Drawable instances from this ConstantState. </p><pre><code>public static abstract class Drawable.ConstantState\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/Drawable.ConstantState.html
Drawable	A										<section class="prog__container"><p> A Drawable is a general abstraction for "something that can be drawn." Most often you will deal with Drawable as the type of resource retrieved for drawing things to the screen; the Drawable class provides a generic API for dealing with an underlying visual resource that may take a variety of forms. Unlike a <pre><code> View </code></pre> , a Drawable does not have any facility to receive events or otherwise interact with the user. <p> In addition to simple drawing, Drawable provides a number of generic mechanisms for its client to interact with what is being drawn: <ul> <li> The <pre><code> setBounds(Rect) </code></pre> method <var> must </var> be called to tell the Drawable where it is drawn and how large it should be. All Drawables should respect the requested size, often simply by scaling their imagery. A client can find the preferred size for some Drawables with the <pre><code> getIntrinsicHeight() </code></pre> and <pre><code> getIntrinsicWidth() </code></pre> methods. <li> The <pre><code> getPadding(Rect) </code></pre> method can return from some Drawables information about how to frame content that is placed inside of them. For example, a Drawable that is intended to be the frame for a button widget would need to return padding that correctly places the label inside of itself. <li> The <pre><code> setState(int[]) </code></pre> method allows the client to tell the Drawable in which state it is to be drawn, such as "focused", "selected", etc. Some drawables may modify their imagery based on the selected state. <li> The <pre><code> setLevel(int) </code></pre> method allows the client to supply a single continuous controller that can modify the Drawable is displayed, such as a battery level or progress level. Some drawables may modify their imagery based on the current level. <li> A Drawable can perform animations by calling back to its client through the <pre><code> Drawable.Callback </code></pre> interface. All clients should support this interface (via <pre><code> setCallback(Drawable.Callback) </code></pre> ) so that animations will work. A simple way to do this is through the system facilities such as <pre><code> setBackground(Drawable) </code></pre> and <pre><code> ImageView </code></pre> . </li> </li> </li> </li> </li> </ul> Though usually not visible to the application, Drawables may take a variety of forms: <ul> <li> <b> Bitmap </b> : the simplest Drawable, a PNG or JPEG image. <li> <b> Nine Patch </b> : an extension to the PNG format allows it to specify information about how to stretch it and place things inside of it. <li> <b> Vector </b> : a drawable defined in an XML file as a set of points, lines, and curves along with its associated color information. This type of drawable can be scaled without loss of display quality. <li> <b> Shape </b> : contains simple drawing commands instead of a raw bitmap, allowing it to resize better in some cases. <li> <b> Layers </b> : a compound drawable, which draws multiple underlying drawables on top of each other. <li> <b> States </b> : a compound drawable that selects one of a set of drawables based on its state. <li> <b> Levels </b> : a compound drawable that selects one of a set of drawables based on its level. <li> <b> Scale </b> : a compound drawable with a single child drawable, whose overall size is modified based on the current level. </li> </li> </li> </li> </li> </li> </li> </li> </ul> </p><pre><code>public abstract class Drawable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/Drawable.html
DrawableContainer.DrawableContainerState	A										<section class="prog__container"><p> A ConstantState that can contain several <pre><code> Drawable </code></pre> s. This class was made public to enable testing, and its visibility may change in a future release.</p><pre><code>public static abstract class DrawableContainer.DrawableContainerState\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html
DrawableContainer	A										<section class="prog__container"><p> A helper class that contains several <pre><code> Drawable </code></pre> s and selects which one to use. You can subclass it to create your own DrawableContainers or directly use one its child classes.</p><pre><code>public class DrawableContainer\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.html
DrawableWrapper	A										<section class="prog__container"><p> Drawable container with only one child element.</p><pre><code>public abstract class DrawableWrapper\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/DrawableWrapper.html
GradientDrawable	A										<section class="prog__container"><p> A Drawable with a color gradient for buttons, backgrounds, etc. <p> It can be defined in an XML file with the <pre><code> &lt;shape&gt; </code></pre> element. For more information, see the guide to Drawable Resources . </p><pre><code>public class GradientDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/GradientDrawable.html
GradientDrawable.Orientation	A										<section class="prog__container"><p> Controls how the gradient is oriented relative to the drawable's bounds</p><pre><code>public static final enum GradientDrawable.Orientation\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/GradientDrawable.Orientation.html
Icon	A										<section class="prog__container"><p> An umbrella container for several serializable graphics representations, including Bitmaps, compressed bitmap images (e.g. JPG or PNG), and drawable resources (including vectors). Much ink has been spilled on the best way to load images, and many clients may have different needs when it comes to threading and fetching. This class is therefore focused on encapsulation rather than behavior.</p><pre><code>public final class Icon\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/Icon.html
Icon.OnDrawableLoadedListener	A										<section class="prog__container"><p> Implement this interface to receive a callback when <pre><code> loadDrawableAsync </code></pre> is finished and your Drawable is ready.</p><pre><code>public static interface Icon.OnDrawableLoadedListener\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/Icon.OnDrawableLoadedListener.html
InsetDrawable	A										<section class="prog__container"><p> A Drawable that insets another Drawable by a specified distance. This is used when a View needs a background that is smaller than the View's actual bounds. <p> It can be defined in an XML file with the <pre><code> &lt;inset&gt; </code></pre> element. For more information, see the guide to Drawable Resources . </p><pre><code>public class InsetDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/InsetDrawable.html
LayerDrawable	A										<section class="prog__container"><p> A Drawable that manages an array of other Drawables. These are drawn in array order, so the element with the largest index will be drawn on top. <p> It can be defined in an XML file with the <pre><code> &lt;layer-list&gt; </code></pre> element. Each Drawable in the layer is defined in a nested <pre><code> &lt;item&gt; </code></pre> . <p> For more information, see the guide to Drawable Resources . </p><pre><code>public class LayerDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/LayerDrawable.html
LevelListDrawable	A										<section class="prog__container"><p> A resource that manages a number of alternate Drawables, each assigned a maximum numerical value. Setting the level value of the object with <pre><code> setLevel(int) </code></pre> will load the image with the next greater or equal value assigned to its max attribute. A good example use of a LevelListDrawable would be a battery level indicator icon, with different images to indicate the current battery level. <p> It can be defined in an XML file with the <pre><code> &lt;level-list&gt; </code></pre> element. Each Drawable level is defined in a nested <pre><code> &lt;item&gt; </code></pre> . For example: </p><pre><code>public class LevelListDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/LevelListDrawable.html
NinePatchDrawable	A										<section class="prog__container"><p> A resizeable bitmap, with stretchable areas that you define. This type of image is defined in a .png file with a special format. </p><pre><code>public class NinePatchDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/NinePatchDrawable.html
android.graphics.drawable	A										<section class="prog__container">Provides classes to manage a variety of visual elements that are intended fordisplay only, such as bitmaps and gradients. These elements are often usedby widgets as background images or simply as indicators (for example, a volumelevel indicator).</section>	https://developer.android.com/reference/android/graphics/drawable/package-summary.html
PaintDrawable	A										<section class="prog__container"><p> Drawable that draws its bounds in the given paint, with optional rounded corners.</p><pre><code>public class PaintDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/PaintDrawable.html
PictureDrawable	A										<section class="prog__container"><p> Drawable subclass that wraps a Picture, allowing the picture to be used wherever a Drawable is supported.</p><pre><code>public class PictureDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/PictureDrawable.html
RippleDrawable	A										<section class="prog__container"><p> Drawable that shows a ripple effect in response to state changes. The anchoring position of the ripple for a given state may be specified by calling <pre><code> setHotspot(float, float) </code></pre> with the corresponding state attribute identifier. <p> A touch feedback drawable may contain multiple child layers, including a special mask layer that is not drawn to the screen. A single layer may be set as the mask from XML by specifying its <pre><code> android:id </code></pre> value as <pre><code> mask </code></pre> . At run time, a single layer may be set as the mask using <pre><code> setId(..., android.R.id.mask) </code></pre> or an existing mask layer may be replaced using <pre><code> setDrawableByLayerId(android.R.id.mask, ...) </code></pre> . <pre> <pre><code>&lt;!-- A red ripple masked against an opaque rectangle. --/&gt; &amp;ltripple; android:color="#ffff0000"&gt; &amp;ltitem; android:id="@android:id/mask" android:drawable="@android:color/white" /&gt; &lt;/ripple&gt;</code></pre> </pre> <p> If a mask layer is set, the ripple effect will be masked against that layer before it is drawn over the composite of the remaining child layers. <p> If no mask layer is set, the ripple effect is masked against the composite of the child layers. <pre> <pre><code>&lt;!-- A green ripple drawn atop a black rectangle. --/&gt; &amp;ltripple; android:color="#ff00ff00"&gt; &amp;ltitem; android:drawable="@android:color/black" /&gt; &lt;/ripple&gt; &lt;!-- A blue ripple drawn atop a drawable resource. --/&gt; &amp;ltripple; android:color="#ff0000ff"&gt; &amp;ltitem; android:drawable="@drawable/my_drawable" /&gt; &lt;/ripple&gt;</code></pre> </pre> <p> If no child layers or mask is specified and the ripple is set as a View background, the ripple will be drawn atop the first available parent background within the View's hierarchy. In this case, the drawing region may extend outside of the Drawable bounds. <pre> <pre><code>&lt;!-- An unbounded red ripple. --/&gt; &amp;ltripple; android:color="#ffff0000" /&gt;</code></pre> </pre> </p><pre><code>public class RippleDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/RippleDrawable.html
RotateDrawable	A										<section class="prog__container"><p> <p> A Drawable that can rotate another Drawable based on the current level value. The start and end angles of rotation can be controlled to map any circular arc to the level values range. <p> It can be defined in an XML file with the <pre><code> &lt;rotate&gt; </code></pre> element. For more information, see the guide to Animation Resources . </p><pre><code>public class RotateDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/RotateDrawable.html
ScaleDrawable	A										<section class="prog__container"><p> A Drawable that changes the size of another Drawable based on its current level value. You can control how much the child Drawable changes in width and height based on the level, as well as a gravity to control where it is placed in its overall container. Most often used to implement things like progress bars. <p> The default level may be specified from XML using the <pre><code> android:level </code></pre> property. When this property is not specified, the default level is 0, which corresponds to zero height and/or width depending on the values specified for <pre><code> android.R.styleable#ScaleDrawable_scaleWidth scaleWidth </code></pre> and <pre><code> android.R.styleable#ScaleDrawable_scaleHeight scaleHeight </code></pre> . At run time, the level may be set via <pre><code> setLevel(int) </code></pre> . <p> A scale drawable may be defined in an XML file with the <pre><code> &lt;scale&gt; </code></pre> element. For more information, see the guide to Drawable Resources . </p><pre><code>public class ScaleDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/ScaleDrawable.html
ShapeDrawable	A										<section class="prog__container"><p> A Drawable object that draws primitive shapes. A ShapeDrawable takes a <pre><code> Shape </code></pre> object and manages its presence on the screen. If no Shape is given, then the ShapeDrawable will default to a <pre><code> RectShape </code></pre> . <p> This object can be defined in an XML file with the <pre><code> &lt;shape&gt; </code></pre> element. </p><pre><code>public class ShapeDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/ShapeDrawable.html
ShapeDrawable.ShaderFactory	A										<section class="prog__container"><p> Base class defines a factory object that is called each time the drawable is resized (has a new width or height). Its resize() method returns a corresponding shader, or null. Implement this class if you'd like your ShapeDrawable to use a special <pre><code> Shader </code></pre> , such as a <pre><code> LinearGradient </code></pre> .</p><pre><code>public static abstract class ShapeDrawable.ShaderFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/ShapeDrawable.ShaderFactory.html
StateListDrawable	A										<section class="prog__container"><pre><code>public class StateListDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/StateListDrawable.html
TransitionDrawable	A										<section class="prog__container"><p> An extension of LayerDrawables that is intended to cross-fade between the first and second layer. To start the transition, call <pre><code> startTransition(int) </code></pre> . To display just the first layer, call <pre><code> resetTransition() </code></pre> . <p> It can be defined in an XML file with the <pre><code> &lt;transition&gt; </code></pre> element. Each Drawable in the transition is defined in a nested <pre><code> &lt;item&gt; </code></pre> . For more information, see the guide to Drawable Resources . </p><pre><code>public class TransitionDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/TransitionDrawable.html
VectorDrawable	A										<section class="prog__container"><pre><code>public class VectorDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html
ArcShape	A										<section class="prog__container"><p> Creates an arc shape. The arc shape starts at a specified angle and sweeps clockwise, drawing slices of pie. The arc can be drawn to a Canvas with its own draw() method, but more graphical control is available if you instead pass the ArcShape to a <pre><code> ShapeDrawable </code></pre> .</p><pre><code>public class ArcShape\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/shapes/ArcShape.html
OvalShape	A										<section class="prog__container"><p> Defines an oval shape. The oval can be drawn to a Canvas with its own draw() method, but more graphical control is available if you instead pass the OvalShape to a <pre><code> ShapeDrawable </code></pre> .</p><pre><code>public class OvalShape\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/shapes/OvalShape.html
android.graphics.drawable.shapes	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/graphics/drawable/shapes/package-summary.html
PathShape	A										<section class="prog__container"><p> Creates geometric paths, utilizing the <pre><code> Path </code></pre> class. The path can be drawn to a Canvas with its own draw() method, but more graphical control is available if you instead pass the PathShape to a <pre><code> ShapeDrawable </code></pre> .</p><pre><code>public class PathShape\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/shapes/PathShape.html
RectShape	A										<section class="prog__container"><p> Defines a rectangle shape. The rectangle can be drawn to a Canvas with its own draw() method, but more graphical control is available if you instead pass the RectShape to a <pre><code> ShapeDrawable </code></pre> .</p><pre><code>public class RectShape\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/shapes/RectShape.html
RoundRectShape	A										<section class="prog__container"><p> Creates a rounded-corner rectangle. Optionally, an inset (rounded) rectangle can be included (to make a sort of "O" shape). The rounded rectangle can be drawn to a Canvas with its own draw() method, but more graphical control is available if you instead pass the RoundRectShape to a <pre><code> ShapeDrawable </code></pre> .</p><pre><code>public class RoundRectShape\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/shapes/RoundRectShape.html
Shape	A										<section class="prog__container"><p> Defines a generic graphical "shape." Any Shape can be drawn to a Canvas with its own draw() method, but more graphical control is available if you instead pass it to a <pre><code> ShapeDrawable </code></pre> .</p><pre><code>public abstract class Shape\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/shapes/Shape.html
android.graphics.pdf	A										<section class="prog__container">This class enables generating a PDF document from native Android content. </section>	https://developer.android.com/reference/android/graphics/pdf/package-summary.html
PdfDocument	A										<section class="prog__container"><p> <p> This class enables generating a PDF document from native Android content. You create a new document and then for every page you want to add you start a page, write content to the page, and finish the page. After you are done with all pages, you write the document to an output stream and close the document. After a document is closed you should not use it anymore. Note that pages are created one by one, i.e. you can have only a single page to which you are writing at any given time. This class is not thread safe. </p><pre><code>public class PdfDocument\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/pdf/PdfDocument.html
PdfDocument.Page	A										<section class="prog__container"><p> This class represents a PDF document page. It has associated a canvas on which you can draw content and is acquired by a call to <pre><code> getCanvas() </code></pre> . It also has associated a <pre><code> PdfDocument.PageInfo </code></pre> instance that describes its attributes. Also a page has</p><pre><code>public static final class PdfDocument.Page\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/pdf/PdfDocument.Page.html
PdfDocument.PageInfo.Builder	A										<section class="prog__container"><p> Builder for creating a <pre><code> PdfDocument.PageInfo </code></pre> .</p><pre><code>public static final class PdfDocument.PageInfo.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/pdf/PdfDocument.PageInfo.Builder.html
PdfDocument.PageInfo	A										<section class="prog__container"><p> This class represents meta-data that describes a PDF <pre><code> PdfDocument.Page </code></pre> .</p><pre><code>public static final class PdfDocument.PageInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/pdf/PdfDocument.PageInfo.html
PdfRenderer	A										<section class="prog__container"><p> <p> This class enables rendering a PDF document. This class is not thread safe. </p><pre><code>public final class PdfRenderer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.html
PdfRenderer.Page	A										<section class="prog__container"><p> This class represents a PDF document page for rendering.</p><pre><code>public final class PdfRenderer.Page\nextends Object</code></pre></section>	https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page.html
Camera.Area	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> android.hardware.camera2 </code></pre> API for new applications. </p><pre><code>public static class Camera.Area\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.Area.html
Camera.AutoFocusCallback	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> android.hardware.camera2 </code></pre> API for new applications. </p><pre><code>public static interface Camera.AutoFocusCallback\n</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.AutoFocusCallback.html
Camera.AutoFocusMoveCallback	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> android.hardware.camera2 </code></pre> API for new applications. </p><pre><code>public static interface Camera.AutoFocusMoveCallback\n</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.AutoFocusMoveCallback.html
Camera.CameraInfo	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> android.hardware.camera2 </code></pre> API for new applications. </p><pre><code>public static class Camera.CameraInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.CameraInfo.html
Camera.ErrorCallback	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> android.hardware.camera2 </code></pre> API for new applications. </p><pre><code>public static interface Camera.ErrorCallback\n</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.ErrorCallback.html
Camera.Face	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> android.hardware.camera2 </code></pre> API for new applications. </p><pre><code>public static class Camera.Face\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.Face.html
Camera.FaceDetectionListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> android.hardware.camera2 </code></pre> API for new applications. </p><pre><code>public static interface Camera.FaceDetectionListener\n</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.FaceDetectionListener.html
Camera	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> android.hardware.camera2 </code></pre> API for new applications. </p><pre><code>public class Camera\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.html
Camera.OnZoomChangeListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> android.hardware.camera2 </code></pre> API for new applications. </p><pre><code>public static interface Camera.OnZoomChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.OnZoomChangeListener.html
Camera.Parameters	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> android.hardware.camera2 </code></pre> API for new applications. </p><pre><code>public class Camera.Parameters\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.Parameters.html
Camera.PictureCallback	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> android.hardware.camera2 </code></pre> API for new applications. </p><pre><code>public static interface Camera.PictureCallback\n</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.PictureCallback.html
Camera.PreviewCallback	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> android.hardware.camera2 </code></pre> API for new applications. </p><pre><code>public static interface Camera.PreviewCallback\n</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.PreviewCallback.html
Camera.ShutterCallback	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> android.hardware.camera2 </code></pre> API for new applications. </p><pre><code>public static interface Camera.ShutterCallback\n</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.ShutterCallback.html
Camera.Size	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> android.hardware.camera2 </code></pre> API for new applications. </p><pre><code>public class Camera.Size\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.Size.html
ConsumerIrManager.CarrierFrequencyRange	A										<section class="prog__container"><p> Represents a range of carrier frequencies (inclusive) on which the infrared transmitter can transmit</p><pre><code>public final class ConsumerIrManager.CarrierFrequencyRange\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/ConsumerIrManager.CarrierFrequencyRange.html
ConsumerIrManager	A										<section class="prog__container"><p> Class that operates consumer infrared on the device. <p> To obtain an instance of the system infrared transmitter, call <pre><code> Context.getSystemService() </code></pre> with <pre><code> CONSUMER_IR_SERVICE </code></pre> as the argument. </p><pre><code>public final class ConsumerIrManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/ConsumerIrManager.html
GeomagneticField	A										<section class="prog__container"><p> Estimates magnetic field at a given point on Earth, and in particular, to compute the magnetic declination from true north. <p> This uses the World Magnetic Model produced by the United States National Geospatial-Intelligence Agency. More details about the model can be found at http://www.ngdc.noaa.gov/geomag/WMM/DoDWMM.shtml . This class currently uses WMM-2010 which is valid until 2015, but should produce acceptable results for several years after that. Future versions of Android may use a newer version of the model. </p><pre><code>public class GeomagneticField\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/GeomagneticField.html
android.hardware	A										<section class="prog__container">Provides support for hardware features, such as the camera and other sensors. Be aware thatnot all Android-powered devices support all hardware features, so you should declare hardwarethat your application requires using the</section>	https://developer.android.com/reference/android/hardware/package-summary.html
Sensor	A										<section class="prog__container"><p> Class representing a sensor. Use <pre><code> getSensorList(int) </code></pre> to get the list of available Sensors.</p><pre><code>public final class Sensor\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/Sensor.html
SensorAdditionalInfo	A										<section class="prog__container"><p> This class represents a <pre><code> Sensor </code></pre> additional information frame, which is reported through listener callback <pre><code> onSensorAdditionalInfo </code></pre> .</p><pre><code>public class SensorAdditionalInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/SensorAdditionalInfo.html
SensorEvent	A										<section class="prog__container"><p> This class represents a <pre><code> Sensor </code></pre> event and holds information such as the sensor's type, the time-stamp, accuracy and of course the sensor's <pre><code> data </code></pre> . <p> <u> Definition of the coordinate system used by the SensorEvent API. </u> </p><pre><code>public class SensorEvent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/SensorEvent.html
SensorEventCallback	A										<section class="prog__container"><p> Used for receiving sensor additional information frames.</p><pre><code>public abstract class SensorEventCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/SensorEventCallback.html
SensorEventListener	A										<section class="prog__container"><p> Used for receiving notifications from the SensorManager when there is new sensor data.</p><pre><code>public interface SensorEventListener\n</code></pre></section>	https://developer.android.com/reference/android/hardware/SensorEventListener.html
SensorEventListener2	A										<section class="prog__container"><p> Used for receiving a notification when a flush() has been successfully completed.</p><pre><code>public interface SensorEventListener2\nimplements SensorEventListener</code></pre></section>	https://developer.android.com/reference/android/hardware/SensorEventListener2.html
SensorListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 3. </strong> <br/> Use <pre><code> SensorEventListener </code></pre> instead. </p><pre><code>public interface SensorListener\n</code></pre></section>	https://developer.android.com/reference/android/hardware/SensorListener.html
SensorManager.DynamicSensorCallback	A										<section class="prog__container"><p> Used for receiving notifications from the SensorManager when dynamic sensors are connected or disconnected.</p><pre><code>public static abstract class SensorManager.DynamicSensorCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/SensorManager.DynamicSensorCallback.html
SensorManager	A										<section class="prog__container"><p> <p> SensorManager lets you access the device's <pre><code> sensors </code></pre> . Get an instance of this class by calling <pre><code> Context.getSystemService() </code></pre> with the argument <pre><code> SENSOR_SERVICE </code></pre> . </p><pre><code>public abstract class SensorManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/SensorManager.html
TriggerEvent	A										<section class="prog__container"><p> This class represents a Trigger Event - the event associated with a Trigger Sensor. When the sensor detects a trigger event condition, such as significant motion in the case of the <pre><code> TYPE_SIGNIFICANT_MOTION </code></pre> , the <pre><code> TriggerEventListener </code></pre> is called with the TriggerEvent. The sensor is automatically canceled after the trigger. <p> This class holds information such as the value of the sensor when the trigger happened, the timestamp along with detailed information regarding the Sensor itself. </p><pre><code>public final class TriggerEvent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/TriggerEvent.html
TriggerEventListener	A										<section class="prog__container"><p> This class is the listener used to handle Trigger Sensors. Trigger Sensors are sensors that trigger an event and are automatically disabled. <pre><code> TYPE_SIGNIFICANT_MOTION </code></pre> is one such example. <p> <pre><code> SensorManager </code></pre> lets you access the device's <pre><code> sensors </code></pre> . Get an instance of <pre><code> SensorManager </code></pre> by calling <pre><code> Context.getSystemService() </code></pre> with the argument <pre><code> SENSOR_SERVICE </code></pre> . <p> Here's an example setup for a TriggerEventListener: <pre> class TriggerListener extends TriggerEventListener { public void onTrigger(TriggerEvent event) { // Do Work. // As it is a one shot sensor, it will be canceled automatically. // SensorManager.requestTriggerSensor(this, mSigMotion); needs to // be called again, if needed. } } public class SensorActivity extends Activity { private final SensorManager mSensorManager; private final Sensor mSigMotion; private final TriggerEventListener mListener = new TriggerEventListener(); public SensorActivity() { mSensorManager = (SensorManager)getSystemService(SENSOR_SERVICE); mSigMotion = mSensorManager.getDefaultSensor(Sensor.TYPE_SIGNIFICANT_MOTION); } protected void onResume() { super.onResume(); mSensorManager.requestTriggerSensor(mListener, mSigMotion); } protected void onPause() { super.onPause(); // Call disable to ensure that the trigger request has been canceled. mSensorManager.cancelTriggerSensor(mListener, mSigMotion); } } </pre> </p><pre><code>public abstract class TriggerEventListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/TriggerEventListener.html
CameraAccessException	A										<section class="prog__container"><p> <p> <pre><code> CameraAccessException </code></pre> is thrown if a camera device could not be queried or opened by the <pre><code> CameraManager </code></pre> , or if the connection to an opened <pre><code> CameraDevice </code></pre> is no longer valid. </p><pre><code>public class CameraAccessException\n</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraAccessException.html
CameraCaptureSession.CaptureCallback	A										<section class="prog__container"><p> <p> A callback object for tracking the progress of a <pre><code> CaptureRequest </code></pre> submitted to the camera device. </p><pre><code>public static abstract class CameraCaptureSession.CaptureCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.CaptureCallback.html
CameraCaptureSession	A										<section class="prog__container"><p> A configured capture session for a <pre><code> CameraDevice </code></pre> , used for capturing images from the camera or reprocessing images captured from the camera in the same session previously. <p> A CameraCaptureSession is created by providing a set of target output surfaces to <pre><code> createCaptureSession </code></pre> , or by providing an <pre><code> InputConfiguration </code></pre> and a set of target output surfaces to <pre><code> createReprocessableCaptureSession </code></pre> for a reprocessable capture session. Once created, the session is active until a new session is created by the camera device, or the camera device is closed. </p><pre><code>public abstract class CameraCaptureSession\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.html
CameraCaptureSession.StateCallback	A										<section class="prog__container"><p> A callback object for receiving updates about the state of a camera capture session.</p><pre><code>public static abstract class CameraCaptureSession.StateCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html
CameraCharacteristics	A										<section class="prog__container"><p> <p> The properties describing a <pre><code> CameraDevice </code></pre> . </p><pre><code>public final class CameraCharacteristics\n</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html
CameraCharacteristics.Key	A										<section class="prog__container"><p> A <pre><code> Key </code></pre> is used to do camera characteristics field lookups with <pre><code> get(CameraCharacteristics.Key <t> ) </t> </code></pre> . <p> For example, to get the stream configuration map: <pre><code> <pre> StreamConfigurationMap map = cameraCharacteristics.get( CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP); </pre> </code></pre> </p><pre><code>public static final class CameraCharacteristics.Key\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.Key.html
CameraConstrainedHighSpeedCaptureSession	A										<section class="prog__container"><p> A constrained high speed capture session for a <pre><code> CameraDevice </code></pre> , used for capturing high speed images from the <pre><code> CameraDevice </code></pre> for high speed video recording use case. <p> A CameraHighSpeedCaptureSession is created by providing a set of target output surfaces to <pre><code> createConstrainedHighSpeedCaptureSession(List <surface> , CameraCaptureSession.StateCallback, Handler) </surface> </code></pre> , Once created, the session is active until a new session is created by the camera device, or the camera device is closed. </p><pre><code>public abstract class CameraConstrainedHighSpeedCaptureSession\n</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraConstrainedHighSpeedCaptureSession.html
CameraDevice	A										<section class="prog__container"><p> <p> The CameraDevice class is a representation of a single camera connected to an Android device, allowing for fine-grain control of image capture and post-processing at high frame rates. </p><pre><code>public abstract class CameraDevice\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html
CameraDevice.StateCallback	A										<section class="prog__container"><p> A callback objects for receiving updates about the state of a camera device. <p> A callback instance must be provided to the <pre><code> openCamera(String, CameraDevice.StateCallback, Handler) </code></pre> method to open a camera device. </p><pre><code>public static abstract class CameraDevice.StateCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraDevice.StateCallback.html
CameraManager.AvailabilityCallback	A										<section class="prog__container"><p> A callback for camera devices becoming available or unavailable to open. <p> Cameras become available when they are no longer in use, or when a new removable camera is connected. They become unavailable when some application or service starts using a camera, or when a removable camera is disconnected. </p><pre><code>public static abstract class CameraManager.AvailabilityCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraManager.AvailabilityCallback.html
CameraManager	A										<section class="prog__container"><p> <p> A system service manager for detecting, characterizing, and connecting to <pre><code> CameraDevices </code></pre> . </p><pre><code>public final class CameraManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraManager.html
CameraManager.TorchCallback	A										<section class="prog__container"><p> A callback for camera flash torch modes becoming unavailable, disabled, or enabled. <p> The torch mode becomes unavailable when the camera device it belongs to becomes unavailable or other camera resources it needs become busy due to other higher priority camera activities. The torch mode becomes disabled when it was turned off or when the camera device it belongs to is no longer in use and other camera resources it needs are no longer busy. A camera's torch mode is turned off when an application calls <pre><code> setTorchMode(String, boolean) </code></pre> to turn off the camera's torch mode, or when an application turns on another camera's torch mode if keeping multiple torch modes on simultaneously is not supported. The torch mode becomes enabled when it is turned on via <pre><code> setTorchMode(String, boolean) </code></pre> . </p><pre><code>public static abstract class CameraManager.TorchCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraManager.TorchCallback.html
CameraMetadata	A										<section class="prog__container"><p> The base class for camera controls and information. <p> This class defines the basic key/value map used for querying for camera characteristics or capture results, and for setting camera request parameters. </p><pre><code>public abstract class CameraMetadata\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html
CaptureFailure	A										<section class="prog__container"><p> A report of failed capture for a single image capture from the image sensor. <p> CaptureFailures are produced by a <pre><code> CameraDevice </code></pre> if processing a <pre><code> CaptureRequest </code></pre> fails, either partially or fully. Use <pre><code> getReason() </code></pre> to determine the specific nature of the failed capture. </p><pre><code>public class CaptureFailure\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CaptureFailure.html
CaptureRequest.Builder	A										<section class="prog__container"><p> A builder for capture requests. <p> To obtain a builder instance, use the <pre><code> createCaptureRequest(int) </code></pre> method, which initializes the request fields to one of the templates defined in <pre><code> CameraDevice </code></pre> . </p><pre><code>public static final class CaptureRequest.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CaptureRequest.Builder.html
CaptureRequest	A										<section class="prog__container"><p> <p> An immutable package of settings and outputs needed to capture a single image from the camera device. </p><pre><code>public final class CaptureRequest\n</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CaptureRequest.html
CaptureRequest.Key	A										<section class="prog__container"><p> A <pre><code> Key </code></pre> is used to do capture request field lookups with <pre><code> get(CaptureResult.Key <t> ) </t> </code></pre> or to set fields with <pre><code> set(Key, Object) </code></pre> . <p> For example, to set the crop rectangle for the next capture: <pre><code> <pre> Rect cropRectangle = new Rect(0, 0, 640, 480); captureRequestBuilder.set(SCALER_CROP_REGION, cropRectangle); </pre> </code></pre> </p><pre><code>public static final class CaptureRequest.Key\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CaptureRequest.Key.html
CaptureResult	A										<section class="prog__container"><p> <p> The subset of the results of a single image capture from the image sensor. </p><pre><code>public class CaptureResult\n</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html
CaptureResult.Key	A										<section class="prog__container"><p> A <pre><code> Key </code></pre> is used to do capture result field lookups with <pre><code> get(CaptureResult.Key <t> ) </t> </code></pre> . <p> For example, to get the timestamp corresponding to the exposure of the first row: <pre><code> <pre> long timestamp = captureResult.get(CaptureResult.SENSOR_TIMESTAMP); </pre> </code></pre> </p><pre><code>public static final class CaptureResult.Key\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CaptureResult.Key.html
DngCreator	A										<section class="prog__container"><p> The <pre><code> DngCreator </code></pre> class provides functions to write raw pixel data as a DNG file. <p> This class is designed to be used with the <pre><code> RAW_SENSOR </code></pre> buffers available from <pre><code> CameraDevice </code></pre> , or with Bayer-type raw pixel data that is otherwise generated by an application. The DNG metadata tags will be generated from a <pre><code> CaptureResult </code></pre> object or set directly. </p><pre><code>public final class DngCreator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/DngCreator.html
android.hardware.camera2	A										<section class="prog__container">The android.hardware.camera2 package provides an interface toindividual camera devices connected to an Android device. It replacesthe deprecated</section>	https://developer.android.com/reference/android/hardware/camera2/package-summary.html
TotalCaptureResult	A										<section class="prog__container"><p> <p> The total assembled results of a single image capture from the image sensor. </p><pre><code>public final class TotalCaptureResult\n</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/TotalCaptureResult.html
BlackLevelPattern	A										<section class="prog__container"><p> Immutable class to store a 4-element vector of integers corresponding to a 2x2 pattern of color channel offsets used for the black level offsets of each color channel.</p><pre><code>public final class BlackLevelPattern\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/BlackLevelPattern.html
ColorSpaceTransform	A										<section class="prog__container"><p> Immutable class for describing a 3x3 matrix of <pre><code> Rational </code></pre> values in row-major order. <p> This matrix maps a transform from one color space to another. For the particular color space source and target, see the appropriate camera metadata documentation for the key that provides this value. </p><pre><code>public final class ColorSpaceTransform\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/ColorSpaceTransform.html
Face	A										<section class="prog__container"><p> Describes a face detected in an image.</p><pre><code>public final class Face\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/Face.html
InputConfiguration	A										<section class="prog__container"><p> Immutable class to store an input configuration that is used to create a reprocessable capture session.</p><pre><code>public final class InputConfiguration\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/InputConfiguration.html
LensShadingMap	A										<section class="prog__container"><p> Immutable class for describing a <pre><code> 4 x N x M </code></pre> lens shading map of floats.</p><pre><code>public final class LensShadingMap\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/LensShadingMap.html
MeteringRectangle	A										<section class="prog__container"><p> An immutable class to represent a rectangle <pre><code> (x, y, width, height) </code></pre> with an additional weight component. <p> The rectangle is defined to be inclusive of the specified coordinates. </p><pre><code>public final class MeteringRectangle\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/MeteringRectangle.html
OutputConfiguration	A										<section class="prog__container"><p> A class for describing camera output, which contains a <pre><code> Surface </code></pre> and its specific configuration for creating capture session.</p><pre><code>public final class OutputConfiguration\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/OutputConfiguration.html
android.hardware.camera2.params	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/hardware/camera2/params/package-summary.html
RggbChannelVector	A										<section class="prog__container"><p> Immutable class to store a 4-element vector of floats indexable by a bayer RAW 2x2 pixel block.</p><pre><code>public final class RggbChannelVector\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/RggbChannelVector.html
StreamConfigurationMap	A										<section class="prog__container"><p> Immutable class to store the available stream <pre><code> configurations </code></pre> to set up <pre><code> Surfaces </code></pre> for creating a <pre><code> capture session </code></pre> with <pre><code> createCaptureSession(List <surface> , CameraCaptureSession.StateCallback, Handler) </surface> </code></pre> . <!-- TODO: link to input stream configuration --> <p> This is the authoritative list for all <!-- input/ --> output formats (and sizes respectively for that format) that are supported by a camera device. </p><pre><code>public final class StreamConfigurationMap\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/StreamConfigurationMap.html
TonemapCurve	A										<section class="prog__container"><p> Immutable class for describing a <pre><code> 2 x M x 3 </code></pre> tonemap curve of floats. <p> This defines red, green, and blue curves that the <pre><code> CameraDevice </code></pre> will use as the tonemapping/contrast/gamma curve when <pre><code> TONEMAP_MODE </code></pre> is set to <pre><code> TONEMAP_MODE_CONTRAST_CURVE </code></pre> . </p><pre><code>public final class TonemapCurve\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/TonemapCurve.html
DisplayManager.DisplayListener	A										<section class="prog__container"><p> Listens for changes in available display devices.</p><pre><code>public static interface DisplayManager.DisplayListener\n</code></pre></section>	https://developer.android.com/reference/android/hardware/display/DisplayManager.DisplayListener.html
DisplayManager	A										<section class="prog__container"><p> Manages the properties of attached displays. <p> Get an instance of this class by calling <pre><code> Context.getSystemService() </code></pre> with the argument <pre><code> DISPLAY_SERVICE </code></pre> . </p><pre><code>public final class DisplayManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/display/DisplayManager.html
android.hardware.display	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/hardware/display/package-summary.html
VirtualDisplay.Callback	A										<section class="prog__container"><p> Interface for receiving information about a <pre><code> VirtualDisplay </code></pre> 's state changes.</p><pre><code>public static abstract class VirtualDisplay.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/display/VirtualDisplay.Callback.html
VirtualDisplay	A										<section class="prog__container"><p> Represents a virtual display. The content of a virtual display is rendered to a <pre><code> Surface </code></pre> that you must provide to <pre><code> createVirtualDisplay() </code></pre> . <p> Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. However, you should also explicitly call <pre><code> release() </code></pre> when you're done with it. </p><pre><code>public final class VirtualDisplay\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/display/VirtualDisplay.html
FingerprintManager.AuthenticationCallback	A										<section class="prog__container"><p> Callback structure provided to <pre><code> authenticate(CryptoObject, CancellationSignal, int, AuthenticationCallback, Handler) </code></pre> . Users of <pre><code> authenticate(CryptoObject, CancellationSignal, int, AuthenticationCallback, Handler) </code></pre> must provide an implementation of this for listening to fingerprint events.</p><pre><code>public static abstract class FingerprintManager.AuthenticationCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.AuthenticationCallback.html
FingerprintManager.AuthenticationResult	A										<section class="prog__container"><p> Container for callback data from <pre><code> authenticate(CryptoObject, CancellationSignal, int, AuthenticationCallback, Handler) </code></pre> .</p><pre><code>public static class FingerprintManager.AuthenticationResult\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.AuthenticationResult.html
FingerprintManager.CryptoObject	A										<section class="prog__container"><p> A wrapper class for the crypto objects supported by FingerprintManager. Currently the framework supports <pre><code> Signature </code></pre> , <pre><code> Cipher </code></pre> and <pre><code> Mac </code></pre> objects.</p><pre><code>public static final class FingerprintManager.CryptoObject\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.CryptoObject.html
FingerprintManager	A										<section class="prog__container"><p> A class that coordinates access to the fingerprint hardware. <p> Use <pre><code> getSystemService(java.lang.String) </code></pre> with argument <pre><code> FINGERPRINT_SERVICE </code></pre> to get an instance of this class. </p><pre><code>public class FingerprintManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.html
android.hardware.fingerprint	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/hardware/fingerprint/package-summary.html
InputManager	A										<section class="prog__container"><p> Provides information about input devices and available key layouts. <p> Get an instance of this class by calling <pre><code> Context.getSystemService() </code></pre> with the argument <pre><code> INPUT_SERVICE </code></pre> . </p><pre><code>public final class InputManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/input/InputManager.html
InputManager.InputDeviceListener	A										<section class="prog__container"><p> Listens for changes in input devices.</p><pre><code>public static interface InputManager.InputDeviceListener\n</code></pre></section>	https://developer.android.com/reference/android/hardware/input/InputManager.InputDeviceListener.html
android.hardware.input	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/hardware/input/package-summary.html
android.hardware.usb	A										<section class="prog__container">Provides support to communicate with USB hardware peripherals that are connected to Android-powered devices.</section>	https://developer.android.com/reference/android/hardware/usb/package-summary.html
UsbAccessory	A										<section class="prog__container"><p> A class representing a USB accessory, which is an external hardware component that communicates with an android application over USB. The accessory is the USB host and android the device side of the USB connection. <p> When the accessory connects, it reports its manufacturer and model names, the version of the accessory, and a user visible description of the accessory to the device. The manufacturer, model and version strings are used by the USB Manager to choose an appropriate application for the accessory. The accessory may optionally provide a unique serial number and a URL to for the accessory's website to the device as well. <p> An instance of this class is sent to the application via the <pre><code> ACTION_USB_ACCESSORY_ATTACHED </code></pre> Intent. The application can then call <pre><code> openAccessory(UsbAccessory) </code></pre> to open a file descriptor for reading and writing data to and from the accessory. </p><pre><code>public class UsbAccessory\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/usb/UsbAccessory.html
UsbConfiguration	A										<section class="prog__container"><p> A class representing a configuration on a <pre><code> UsbDevice </code></pre> . A USB configuration can have one or more interfaces, each one providing a different piece of functionality, separate from the other interfaces. An interface will have one or more <pre><code> UsbEndpoint </code></pre> s, which are the channels by which the host transfers data with the device. </p><pre><code>public class UsbConfiguration\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/usb/UsbConfiguration.html
UsbConstants	A										<section class="prog__container"><p> Contains constants for the USB protocol. These constants correspond to definitions in linux/usb/ch9.h in the linux kernel.</p><pre><code>public final class UsbConstants\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/usb/UsbConstants.html
UsbDevice	A										<section class="prog__container"><p> This class represents a USB device attached to the android device with the android device acting as the USB host. Each device contains one or more <pre><code> UsbInterface </code></pre> s, each of which contains a number of <pre><code> UsbEndpoint </code></pre> s (the channels via which data is transmitted over USB). <p> This class contains information (along with <pre><code> UsbInterface </code></pre> and <pre><code> UsbEndpoint </code></pre> ) that describes the capabilities of the USB device. To communicate with the device, you open a <pre><code> UsbDeviceConnection </code></pre> for the device and use <pre><code> UsbRequest </code></pre> to send and receive data on an endpoint. <pre><code> controlTransfer(int, int, int, int, byte[], int, int) </code></pre> is used for control requests on endpoint zero. </p><pre><code>public class UsbDevice\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/usb/UsbDevice.html
UsbDeviceConnection	A										<section class="prog__container"><p> This class is used for sending and receiving data and control messages to a USB device. Instances of this class are created by <pre><code> openDevice(UsbDevice) </code></pre> .</p><pre><code>public class UsbDeviceConnection\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/usb/UsbDeviceConnection.html
UsbEndpoint	A										<section class="prog__container"><p> A class representing an endpoint on a <pre><code> UsbInterface </code></pre> . Endpoints are the channels for sending and receiving data over USB. Typically bulk endpoints are used for sending non-trivial amounts of data. Interrupt endpoints are used for sending small amounts of data, typically events, separately from the main data streams. The endpoint zero is a special endpoint for control messages sent from the host to device. Isochronous endpoints are currently unsupported.</p><pre><code>public class UsbEndpoint\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/usb/UsbEndpoint.html
UsbInterface	A										<section class="prog__container"><p> A class representing an interface on a <pre><code> UsbDevice </code></pre> . USB devices can have one or more interfaces, each one providing a different piece of functionality, separate from the other interfaces. An interface will have one or more <pre><code> UsbEndpoint </code></pre> s, which are the channels by which the host transfers data with the device. </p><pre><code>public class UsbInterface\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/usb/UsbInterface.html
UsbManager	A										<section class="prog__container"><p> This class allows you to access the state of USB and communicate with USB devices. Currently only host mode is supported in the public API. <p> You can obtain an instance of this class by calling <pre><code> Context.getSystemService() </code></pre> . <pre>UsbManager manager = (UsbManager) getSystemService(Context.USB_SERVICE);</pre> </p><pre><code>public class UsbManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/usb/UsbManager.html
UsbRequest	A										<section class="prog__container"><p> A class representing USB request packet. This can be used for both reading and writing data to or from a <pre><code> UsbDeviceConnection </code></pre> . UsbRequests can be used to transfer data on bulk and interrupt endpoints. Requests on bulk endpoints can be sent synchronously via <pre><code> bulkTransfer(UsbEndpoint, byte[], int, int) </code></pre> or asynchronously via <pre><code> queue(ByteBuffer, int) </code></pre> and <pre><code> requestWait() </code></pre> . Requests on interrupt endpoints are only send and received asynchronously. <p> Requests on endpoint zero are not supported by this class; use <pre><code> controlTransfer(int, int, int, int, byte[], int, int) </code></pre> for endpoint zero requests instead. </p><pre><code>public class UsbRequest\nextends Object</code></pre></section>	https://developer.android.com/reference/android/hardware/usb/UsbRequest.html
android.icu.lang	A										<section class="prog__container">Selection constants for Unicode properties. </section>	https://developer.android.com/reference/android/icu/lang/package-summary.html
UCharacter.BidiPairedBracketType	A										<section class="prog__container"><p> Bidi Paired Bracket Type constants.</p><pre><code>public static interface UCharacter.BidiPairedBracketType\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.BidiPairedBracketType.html
UCharacter.DecompositionType	A										<section class="prog__container"><p> Decomposition Type constants.</p><pre><code>public static interface UCharacter.DecompositionType\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.DecompositionType.html
UCharacter.EastAsianWidth	A										<section class="prog__container"><p> East Asian Width constants.</p><pre><code>public static interface UCharacter.EastAsianWidth\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.EastAsianWidth.html
UCharacter.GraphemeClusterBreak	A										<section class="prog__container"><p> Grapheme Cluster Break constants.</p><pre><code>public static interface UCharacter.GraphemeClusterBreak\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.GraphemeClusterBreak.html
UCharacter.HangulSyllableType	A										<section class="prog__container"><p> Hangul Syllable Type constants.</p><pre><code>public static interface UCharacter.HangulSyllableType\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.HangulSyllableType.html
UCharacter	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> Character </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> The UCharacter class provides extensions to the <pre><code> Character </code></pre> class. These extensions provide support for more Unicode properties. Each ICU release supports the latest version of Unicode available at that time. <p> For some time before Java 5 added support for supplementary Unicode code points, The ICU UCharacter class and many other ICU classes already supported them. Some UCharacter methods and constants were widened slightly differently than how the Character class methods and constants were widened later. In particular, <pre><code> MAX_VALUE </code></pre> is still a char with the value U+FFFF, while the <pre><code> MAX_VALUE </code></pre> is an int with the value U+10FFFF. <p> Code points are represented in these API using ints. While it would be more convenient in Java to have a separate primitive datatype for them, ints suffice in the meantime. <p> Aside from the additions for UTF-16 support, and the updated Unicode properties, the main differences between UCharacter and Character are: <ul> <li> UCharacter is not designed to be a char wrapper and does not have APIs to which involves management of that single char. <br> These include: <ul> <li> char charValue(), <li> int compareTo(java.lang.Character, java.lang.Character), etc. </li> </li> </ul> <li> UCharacter does not include Character APIs that are deprecated, nor does it include the Java-specific character information, such as boolean isJavaIdentifierPart(char ch). <li> Character maps characters 'A' - 'Z' and 'a' - 'z' to the numeric values '10' - '35'. UCharacter also does this in digit and getNumericValue, to adhere to the java semantics of these methods. New methods unicodeDigit, and getUnicodeNumericValue do not treat the above code points as having numeric values. This is a semantic change from ICU4J 1.3.1. </li> </li> </br> </li> </ul> <p> In addition to Java compatibility functions, which calculate derived properties, this API provides low-level access to the Unicode Character Database. </p><pre><code>public final class UCharacter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.html
UCharacter.JoiningGroup	A										<section class="prog__container"><p> Joining Group constants.</p><pre><code>public static interface UCharacter.JoiningGroup\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.JoiningGroup.html
UCharacter.JoiningType	A										<section class="prog__container"><p> Joining Type constants.</p><pre><code>public static interface UCharacter.JoiningType\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.JoiningType.html
UCharacter.LineBreak	A										<section class="prog__container"><p> Line Break constants.</p><pre><code>public static interface UCharacter.LineBreak\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.LineBreak.html
UCharacter.NumericType	A										<section class="prog__container"><p> Numeric Type constants.</p><pre><code>public static interface UCharacter.NumericType\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.NumericType.html
UCharacter.SentenceBreak	A										<section class="prog__container"><p> Sentence Break constants.</p><pre><code>public static interface UCharacter.SentenceBreak\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.SentenceBreak.html
UCharacter.UnicodeBlock	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> Character.UnicodeBlock </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. A family of character subsets representing the character blocks in the Unicode specification, generated from Unicode Data file Blocks.txt. Character blocks generally define characters used for a specific script or purpose. A character is contained by at most one Unicode block. <strong> [icu] Note: </strong> All fields named XXX_ID are specific to ICU.</p><pre><code>public static final class UCharacter.UnicodeBlock\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.UnicodeBlock.html
UCharacter.WordBreak	A										<section class="prog__container"><p> Word Break constants.</p><pre><code>public static interface UCharacter.WordBreak\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.WordBreak.html
UCharacterCategory	A										<section class="prog__container"><p> Enumerated Unicode category types from the UnicodeData.txt file. Used as return results from UCharacter Equivalent to icu's UCharCategory. Refer to Unicode Consortium for more information about UnicodeData.txt. <p> <em> NOTE: </em> the UCharacterCategory values are <em> not </em> compatible with those returned by java.lang.Character.getType. UCharacterCategory values match the ones used in ICU4C, while java.lang.Character type values, though similar, skip the value 17. </p><pre><code>public final class UCharacterCategory\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacterCategory.html
UCharacterDirection	A										<section class="prog__container"><p> Enumerated Unicode character linguistic direction constants. Used as return results from UCharacter <p> This class is not subclassable </p><pre><code>public final class UCharacterDirection\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacterDirection.html
UCharacterEnums.ECharacterCategory	A										<section class="prog__container"><p> 'Enum' for the CharacterCategory constants. These constants are compatible in name <b> but not in value </b> with those defined in <pre><code> Character </code></pre> .</p><pre><code>public static interface UCharacterEnums.ECharacterCategory\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html
UCharacterEnums.ECharacterDirection	A										<section class="prog__container"><p> 'Enum' for the CharacterDirection constants. Some constants are compatible in name <b> but not in value </b> with those defined in <pre><code> Character </code></pre> .</p><pre><code>public static interface UCharacterEnums.ECharacterDirection\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html
UCharacterEnums	A										<section class="prog__container"><p> A container for the different 'enumerated types' used by UCharacter.</p><pre><code>public class UCharacterEnums\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacterEnums.html
UProperty	A										<section class="prog__container"><p> <p> Selection constants for Unicode properties. <p> These constants are used in functions like UCharacter.hasBinaryProperty(int) to select one of the Unicode properties. <p> The properties APIs are intended to reflect Unicode properties as defined in the Unicode Character Database (UCD) and Unicode Technical Reports (UTR). <p> For details about the properties see http://www.unicode.org . <p> For names of Unicode properties see the UCD file PropertyAliases.txt. <p> Important: If ICU is built with UCD files from Unicode versions below 3.2, then properties marked with "new" are not or not fully available. Check UCharacter.getUnicodeVersion() to be sure. </p><pre><code>public interface UProperty\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UProperty.html
UProperty.NameChoice	A										<section class="prog__container"><p> Selector constants for UCharacter.getPropertyName() and UCharacter.getPropertyValueName(). These selectors are used to choose which name is returned for a given property or value. All properties and values have a long name. Most have a short name, but some do not. Unicode allows for additional names, beyond the long and short name, which would be indicated by LONG + i, where i=1, 2,...</p><pre><code>public static interface UProperty.NameChoice\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UProperty.NameChoice.html
UScript	A										<section class="prog__container"><p> Constants for ISO 15924 script codes, and related functions. <p> The current set of script code constants supports at least all scripts that are encoded in the version of Unicode which ICU currently supports. The names of the constants are usually derived from the Unicode script property value aliases. See UAX #24 Unicode Script Property (http://www.unicode.org/reports/tr24/) and http://www.unicode.org/Public/UCD/latest/ucd/PropertyValueAliases.txt . <p> Starting with ICU 3.6, constants for most ISO 15924 script codes are included, for use with language tags, CLDR data, and similar. Some of those codes are not used in the Unicode Character Database (UCD). For example, there are no characters that have a UCD script property value of Hans or Hant. All Han ideographs have the Hani script property value in Unicode. <p> Private-use codes Qaaa..Qabx are not included. <p> Starting with ICU 55, script codes are only added when their scripts have been or will certainly be encoded in Unicode, and have been assigned Unicode script property value aliases, to ensure that their script names are stable and match the names of the constants. Script codes like Latf and Aran that are not subject to separate encoding may be added at any time. </p><pre><code>public final class UScript\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UScript.html
UScript.ScriptUsage	A										<section class="prog__container"><p> Script usage constants. See UAX #31 Unicode Identifier and Pattern Syntax. http://www.unicode.org/reports/tr31/#Table_Candidate_Characters_for_Exclusion_from_Identifiers</p><pre><code>public static final enum UScript.ScriptUsage\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UScript.ScriptUsage.html
BigDecimal	A										<section class="prog__container"><p> The <pre><code> BigDecimal </code></pre> class implements immutable arbitrary-precision decimal numbers. The methods of the <pre><code> BigDecimal </code></pre> class provide operations for fixed and floating point arithmetic, comparison, format conversions, and hashing. <p> As the numbers are decimal, there is an exact correspondence between an instance of a <pre><code> BigDecimal </code></pre> object and its <pre><code> String </code></pre> representation; the <pre><code> BigDecimal </code></pre> class provides direct conversions to and from <pre><code> String </code></pre> and character array ( <pre><code> char[] </code></pre> ) objects, as well as conversions to and from the Java primitive types (which may not be exact) and <pre><code> BigInteger </code></pre> . <p> In the descriptions of constructors and methods in this documentation, the value of a <pre><code> BigDecimal </code></pre> number object is shown as the result of invoking the <pre><code> toString() </code></pre> method on the object. The internal representation of a decimal number is neither defined nor exposed, and is not permitted to affect the result of any operation. <p> The floating point arithmetic provided by this class is defined by the ANSI X3.274-1996 standard, and is also documented at <pre><code> http://www2.hursley.ibm.com/decimal </code></pre> <br> <i> [This URL will change.] </i> </p><pre><code>public class BigDecimal\n</code></pre></section>	https://developer.android.com/reference/android/icu/math/BigDecimal.html
MathContext	A										<section class="prog__container"><p> The <pre><code> MathContext </code></pre> immutable class encapsulates the settings understood by the operator methods of the <pre><code> BigDecimal </code></pre> class (and potentially other classes). Operator methods are those that effect an operation on a number or a pair of numbers. <p> The settings, which are not base-dependent, comprise: <ol> <li> <pre><code> digits </code></pre> : the number of digits (precision) to be used for an operation <li> <pre><code> form </code></pre> : the form of any exponent that results from the operation <li> <pre><code> lostDigits </code></pre> : whether checking for lost digits is enabled <li> <pre><code> roundingMode </code></pre> : the algorithm to be used for rounding. </li> </li> </li> </li> </ol> <p> When provided, a <pre><code> MathContext </code></pre> object supplies the settings for an operation directly. <p> When <pre><code> MathContext.DEFAULT </code></pre> is provided for a <pre><code> MathContext </code></pre> parameter then the default settings are used ( <pre><code> 9, SCIENTIFIC, false, ROUND_HALF_UP </code></pre> ). <p> In the <pre><code> BigDecimal </code></pre> class, all methods which accept a <pre><code> MathContext </code></pre> object defaults) also have a version of the method which does not accept a MathContext parameter. These versions carry out unlimited precision fixed point arithmetic (as though the settings were ( <pre><code> 0, PLAIN, false, ROUND_HALF_UP </code></pre> ). <p> The instance variables are shared with default access (so they are directly accessible to the <pre><code> BigDecimal </code></pre> class), but must never be changed. <p> The rounding mode constants have the same names and values as the constants of the same name in <pre><code> java.math.BigDecimal </code></pre> , to maintain compatibility with earlier versions of <pre><code> BigDecimal </code></pre> . </p><pre><code>public final class MathContext\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/math/MathContext.html
android.icu.math	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/icu/math/package-summary.html
AlphabeticIndex.Bucket	A										<section class="prog__container"><p> An index "bucket" with a label string and type. It is referenced by <pre><code> getBucketIndex(CharSequence) </code></pre> and <pre><code> getBucketIndex(CharSequence) </code></pre> , returned by <pre><code> getBucket(int) </code></pre> , and <pre><code> addRecord(CharSequence, Object) </code></pre> adds a record into a bucket according to the record's name.</p><pre><code>public static class AlphabeticIndex.Bucket\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/AlphabeticIndex.Bucket.html
AlphabeticIndex.Bucket.LabelType	A										<section class="prog__container"><p> Type of the label</p><pre><code>public static final enum AlphabeticIndex.Bucket.LabelType\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/AlphabeticIndex.Bucket.LabelType.html
AlphabeticIndex	A										<section class="prog__container"><p> AlphabeticIndex supports the creation of a UI index appropriate for a given language. It can support either direct use, or use with a client that doesn't support localized collation. The following is an example of what an index might look like in a UI: <pre> <b>... A B C D E F G H I J K L M N O P Q R S T U V W X Y Z ...</b> <b>A</b> Addison Albertson Azensky <b>B</b> Baecker ... </pre> The class can generate a list of labels for use as a UI "index", that is, a list of clickable characters (or character sequences) that allow the user to see a segment (bucket) of a larger "target" list. That is, each label corresponds to a bucket in the target list, where everything in the bucket is greater than or equal to the character (according to the locale's collation). Strings can be added to the index; they will be in sorted order in the right bucket. <p> The class also supports having buckets for strings before the first (underflow), after the last (overflow), and between scripts (inflow). For example, if the index is constructed with labels for Russian and English, Greek characters would fall into an inflow bucket between the other two scripts. <p> <em> Note: </em> If you expect to have a lot of ASCII or Latin characters as well as characters from the user's language, then it is a good idea to call addLabels(ULocale.English). </p><pre><code>public final class AlphabeticIndex\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/AlphabeticIndex.html
AlphabeticIndex.ImmutableIndex	A										<section class="prog__container"><p> Immutable, thread-safe version of <pre><code> AlphabeticIndex </code></pre> . This class provides thread-safe methods for bucketing, and random access to buckets and their properties, but does not offer adding records to the index.</p><pre><code>public static final class AlphabeticIndex.ImmutableIndex\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/AlphabeticIndex.ImmutableIndex.html
AlphabeticIndex.Record	A										<section class="prog__container"><p> A (name, data) pair, to be sorted by name into one of the index buckets. The user data is not used by the index implementation.</p><pre><code>public static class AlphabeticIndex.Record\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/AlphabeticIndex.Record.html
BreakIterator	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> BreakIterator </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> A class that locates boundaries in text. This class defines a protocol for objects that break up a piece of natural-language text according to a set of criteria. Instances or subclasses of BreakIterator can be provided, for example, to break a piece of text into words, sentences, or logical characters according to the conventions of some language or group of languages. We provide five built-in types of BreakIterator: <ul> <li> getTitleInstance() returns a BreakIterator that locates boundaries between title breaks. <li> getSentenceInstance() returns a BreakIterator that locates boundaries between sentences. This is useful for triple-click selection, for example. <li> getWordInstance() returns a BreakIterator that locates boundaries between words. This is useful for double-click selection or "find whole words" searches. This type of BreakIterator makes sure there is a boundary position at the beginning and end of each legal word. (Numbers count as words, too.) Whitespace and punctuation are kept separate from real words. <li> getLineInstance() returns a BreakIterator that locates positions where it is legal for a text editor to wrap lines. This is similar to word breaking, but not the same: punctuation and whitespace are generally kept with words (you don't want a line to start with whitespace, for example), and some special characters can force a position to be considered a line-break position or prevent a position from being a line-break position. <li> getCharacterInstance() returns a BreakIterator that locates boundaries between logical characters. Because of the structure of the Unicode encoding, a logical character may be stored internally as more than one Unicode code point. (A with an umlaut may be stored as an a followed by a separate combining umlaut character, for example, but the user still thinks of it as one character.) This iterator allows various processes (especially text editors) to treat as characters the units of text that a user would think of as characters, rather than the units of text that the computer sees as "characters". </li> </li> </li> </li> </li> </ul> The text boundary positions are found according to the rules described in Unicode Standard Annex #29, Text Boundaries, and Unicode Standard Annex #14, Line Breaking Properties. These are available at http://www.unicode.org/reports/tr14/ and http://www.unicode.org/reports/tr29/. <p> BreakIterator's interface follows an "iterator" model (hence the name), meaning it has a concept of a "current position" and methods like first(), last(), next(), and previous() that update the current position. All BreakIterators uphold the following invariants: <ul> <li> The beginning and end of the text are always treated as boundary positions. <li> The current position of the iterator is always a boundary position (random- access methods move the iterator to the nearest boundary position before or after the specified position, not _to_ the specified position). <li> DONE is used as a flag to indicate when iteration has stopped. DONE is only returned when the current position is the end of the text and the user calls next(), or when the current position is the beginning of the text and the user calls previous(). <li> Break positions are numbered by the positions of the characters that follow them. Thus, under normal circumstances, the position before the first character is 0, the position after the first character is 1, and the position after the last character is 1 plus the length of the string. <li> The client can change the position of an iterator, or the text it analyzes, at will, but cannot change the behavior. If the user wants different behavior, he must instantiate a new iterator. </li> </li> </li> </li> </li> </ul> BreakIterator accesses the text it analyzes through a CharacterIterator, which makes it possible to use BreakIterator to analyze text in any text-storage vehicle that provides a CharacterIterator interface. <b> Note: </b> Some types of BreakIterator can take a long time to create, and instances of BreakIterator are not currently cached by the system. For optimal performance, keep instances of BreakIterator around as long as makes sense. For example, when word-wrapping a document, don't create and destroy a new BreakIterator for each line. Create one break iterator for the whole document (or whatever stretch of text you're wrapping) and use it to do the whole job of wrapping the text. <p> <strong> Examples </strong> : <p> Creating and using text boundaries <blockquote> <pre> public static void main(String args[]) { if (args.length == 1) { String stringToExamine = args[0]; //print each word in order BreakIterator boundary = BreakIterator.getWordInstance(); boundary.setText(stringToExamine); printEachForward(boundary, stringToExamine); //print each sentence in reverse order boundary = BreakIterator.getSentenceInstance(Locale.US); boundary.setText(stringToExamine); printEachBackward(boundary, stringToExamine); printFirst(boundary, stringToExamine); printLast(boundary, stringToExamine); } } </pre> </blockquote> Print each element in order <blockquote> <pre> public static void printEachForward(BreakIterator boundary, String source) { int start = boundary.first(); for (int end = boundary.next(); end != BreakIterator.DONE; start = end, end = boundary.next()) { System.out.println(source.substring(start,end)); } } </pre> </blockquote> Print each element in reverse order <blockquote> <pre> public static void printEachBackward(BreakIterator boundary, String source) { int end = boundary.last(); for (int start = boundary.previous(); start != BreakIterator.DONE; end = start, start = boundary.previous()) { System.out.println(source.substring(start,end)); } } </pre> </blockquote> Print first element <blockquote> <pre> public static void printFirst(BreakIterator boundary, String source) { int start = boundary.first(); int end = boundary.next(); System.out.println(source.substring(start,end)); } </pre> </blockquote> Print last element <blockquote> <pre> public static void printLast(BreakIterator boundary, String source) { int end = boundary.last(); int start = boundary.previous(); System.out.println(source.substring(start,end)); } </pre> </blockquote> Print the element at a specified position <blockquote> <pre> public static void printAt(BreakIterator boundary, int pos, String source) { int end = boundary.following(pos); int start = boundary.previous(); System.out.println(source.substring(start,end)); } </pre> </blockquote> Find the next word <blockquote> <pre> public static int nextWordStartAfter(int pos, String text) { BreakIterator wb = BreakIterator.getWordInstance(); wb.setText(text); int last = wb.following(pos); int current = wb.next(); while (current != BreakIterator.DONE) { for (int p = last; p &lt; current; p++) { if (Character.isLetter(text.charAt(p))) return last; } last = current; current = wb.next(); } return BreakIterator.DONE; } </pre> (The iterator returned by BreakIterator.getWordInstance() is unique in that the break positions it returns don't represent both the start and end of the thing being iterated over. That is, a sentence-break iterator returns breaks that each represent the end of one sentence and the beginning of the next. With the word-break iterator, the characters between two boundaries might be a word, or they might be the punctuation or whitespace between two words. The above code uses a simple heuristic to determine which boundary is the beginning of a word: If the characters between this boundary and the next boundary include at least one letter (this can be an alphabetical letter, a CJK ideograph, a Hangul syllable, a Kana character, etc.), then the text between this boundary and the next is a word; otherwise, it's the material between words.) </blockquote> </p><pre><code>public abstract class BreakIterator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/BreakIterator.html
CollationElementIterator	A										<section class="prog__container"><p> <pre><code> CollationElementIterator </code></pre> is an iterator created by a RuleBasedCollator to walk through a string. The return result of each iteration is a 32-bit collation element (CE) that defines the ordering priority of the next character or sequence of characters in the source string. <p> For illustration, consider the following in Slovak and in traditional Spanish collation: <blockquote> <pre> "ca" -&gt; the first collation element is CE('c') and the second collation element is CE('a'). "cha" -&gt; the first collation element is CE('ch') and the second collation element is CE('a'). </pre> </blockquote> And in German phonebook collation, <blockquote> <pre> Since the character 'æ' is a composed character of 'a' and 'e', the iterator returns two collation elements for the single character 'æ' "æb" -&gt; the first collation element is collation_element('a'), the second collation element is collation_element('e'), and the third collation element is collation_element('b'). </pre> </blockquote> <p> For collation ordering comparison, the collation element results can not be compared simply by using basic arithmetic operators, e.g. &lt;, == or &gt;, further processing has to be done. Details can be found in the ICU User Guide . An example of using the CollationElementIterator for collation ordering comparison is the class <pre><code> StringSearch </code></pre> . <p> To construct a CollationElementIterator object, users call the method getCollationElementIterator() on a RuleBasedCollator that defines the desired sorting order. <p> Example: <blockquote> <pre> String testString = "This is a test"; RuleBasedCollator rbc = new RuleBasedCollator("&amp;a&lt;b"); CollationElementIterator iterator = rbc.getCollationElementIterator(testString); int primaryOrder = iterator.IGNORABLE; while (primaryOrder != iterator.NULLORDER) { int order = iterator.next(); if (order != iterator.IGNORABLE &amp;&amp; order != iterator.NULLORDER) { // order is valid, not ignorable and we have not passed the end // of the iteration, we do something primaryOrder = CollationElementIterator.primaryOrder(order); System.out.println("Next primary order 0x" + Integer.toHexString(primaryOrder)); } } </pre> </blockquote> <p> The method next() returns the collation order of the next character based on the comparison level of the collator. The method previous() returns the collation order of the previous character based on the comparison level of the collator. The Collation Element Iterator moves only in one direction between calls to reset(), setOffset(), or setText(). That is, next() and previous() can not be inter-used. Whenever previous() is to be called after next() or vice versa, reset(), setOffset() or setText() has to be called first to reset the status, shifting current position to either the end or the start of the string (reset() or setText()), or the specified position (setOffset()). Hence at the next call of next() or previous(), the first or last collation order, or collation order at the specified position will be returned. If a change of direction is done without one of these calls, the result is undefined. <p> This class is not subclassable. </p><pre><code>public final class CollationElementIterator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/CollationElementIterator.html
CollationKey.BoundMode	A										<section class="prog__container"><p> Options that used in the API CollationKey.getBound() for getting a CollationKey based on the bound mode requested.</p><pre><code>public static final class CollationKey.BoundMode\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/CollationKey.BoundMode.html
CollationKey	A										<section class="prog__container"><p> A <pre><code> CollationKey </code></pre> represents a <pre><code> String </code></pre> under the rules of a specific <pre><code> Collator </code></pre> object. Comparing two <pre><code> CollationKey </code></pre> s returns the relative order of the <pre><code> String </code></pre> s they represent. <p> Since the rule set of <pre><code> Collator </code></pre> s can differ, the sort orders of the same string under two different <pre><code> Collator </code></pre> s might differ. Hence comparing <pre><code> CollationKey </code></pre> s generated from different <pre><code> Collator </code></pre> s can give incorrect results. <p> Both the method <pre><code> CollationKey.compareTo(CollationKey) </code></pre> and the method <pre><code> Collator.compare(String, String) </code></pre> compare two strings and returns their relative order. The performance characteristics of these two approaches can differ. Note that collation keys are often less efficient than simply doing comparison. For more details, see the ICU User Guide. <p> During the construction of a <pre><code> CollationKey </code></pre> , the entire source string is examined and processed into a series of bits terminated by a null, that are stored in the <pre><code> CollationKey </code></pre> . When <pre><code> CollationKey.compareTo(CollationKey) </code></pre> executes, it performs bitwise comparison on the bit sequences. This can incurs startup cost when creating the <pre><code> CollationKey </code></pre> , but once the key is created, binary comparisons are fast. This approach is recommended when the same strings are to be compared over and over again. <p> On the other hand, implementations of <pre><code> Collator.compare(String, String) </code></pre> can examine and process the strings only until the first characters differing in order. This approach is recommended if the strings are to be compared only once. </p><pre><code>public final class CollationKey\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/CollationKey.html
Collator	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> Collator </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> Collator performs locale-sensitive string comparison. A concrete subclass, RuleBasedCollator, allows customization of the collation ordering by the use of rule sets. <p> A Collator is thread-safe only when frozen. See <pre><code> isFrozen() </code></pre> and <pre><code> Freezable </code></pre> . <p> Following the Unicode Consortium 's specifications for the Unicode Collation Algorithm (UCA) , there are 5 different levels of strength used in comparisons: <ul> <li> PRIMARY strength: Typically, this is used to denote differences between base characters (for example, "a" &lt; "b"). It is the strongest difference. For example, dictionaries are divided into different sections by base character. <li> SECONDARY strength: Accents in the characters are considered secondary differences (for example, "as" &lt; "às" &lt; "at"). Other differences between letters can also be considered secondary differences, depending on the language. A secondary difference is ignored when there is a primary difference anywhere in the strings. <li> TERTIARY strength: Upper and lower case differences in characters are distinguished at tertiary strength (for example, "ao" &lt; "Ao" &lt; "aò"). In addition, a variant of a letter differs from the base form on the tertiary strength (such as "A" and "Ⓐ"). Another example is the difference between large and small Kana. A tertiary difference is ignored when there is a primary or secondary difference anywhere in the strings. <li> QUATERNARY strength: When punctuation is ignored (see Ignoring Punctuations in the User Guide ) at PRIMARY to TERTIARY strength, an additional strength level can be used to distinguish words with and without punctuation (for example, "ab" &lt; "a-b" &lt; "aB"). This difference is ignored when there is a PRIMARY, SECONDARY or TERTIARY difference. The QUATERNARY strength should only be used if ignoring punctuation is required. <li> IDENTICAL strength: When all other strengths are equal, the IDENTICAL strength is used as a tiebreaker. The Unicode code point values of the NFD form of each string are compared, just in case there is no difference. For example, Hebrew cantellation marks are only distinguished at this strength. This strength should be used sparingly, as only code point value differences between two strings is an extremely rare occurrence. Using this strength substantially decreases the performance for both comparison and collation key generation APIs. This strength also increases the size of the collation key. </li> </li> </li> </li> </li> </ul> Unlike the JDK, ICU4J's Collator deals only with 2 decomposition modes, the canonical decomposition mode and one that does not use any decomposition. The compatibility decomposition mode, java.text.Collator.FULL_DECOMPOSITION is not supported here. If the canonical decomposition mode is set, the Collator handles un-normalized text properly, producing the same results as if the text were normalized in NFD. If canonical decomposition is turned off, it is the user's responsibility to ensure that all text is already in the appropriate form before performing a comparison or before getting a CollationKey. <p> For more information about the collation service see the User Guide . <p> Examples of use <pre> // Get the Collator for US English and set its strength to PRIMARY Collator usCollator = Collator.getInstance(Locale.US); usCollator.setStrength(Collator.PRIMARY); if (usCollator.compare("abc", "ABC") == 0) { System.out.println("Strings are equivalent"); } The following example shows how to compare two strings using the Collator for the default locale. // Compare two strings in the default locale Collator myCollator = Collator.getInstance(); myCollator.setDecomposition(NO_DECOMPOSITION); if (myCollator.compare("à\u0325", "a\u0325̀") != 0) { System.out.println("à\u0325 is not equals to a\u0325̀ without decomposition"); myCollator.setDecomposition(CANONICAL_DECOMPOSITION); if (myCollator.compare("à\u0325", "a\u0325̀") != 0) { System.out.println("Error: à\u0325 should be equals to a\u0325̀ with decomposition"); } else { System.out.println("à\u0325 is equals to a\u0325̀ with decomposition"); } } else { System.out.println("Error: à\u0325 should be not equals to a\u0325̀ without decomposition"); } </pre> </p><pre><code>public abstract class Collator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/Collator.html
Collator.ReorderCodes	A										<section class="prog__container"><p> Reordering codes for non-script groups that can be reordered under collation.</p><pre><code>public static interface Collator.ReorderCodes\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/Collator.ReorderCodes.html
CompactDecimalFormat.CompactStyle	A										<section class="prog__container"><p> Style parameter for CompactDecimalFormat.</p><pre><code>public static final enum CompactDecimalFormat.CompactStyle\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/CompactDecimalFormat.CompactStyle.html
CompactDecimalFormat	A										<section class="prog__container"><p> The CompactDecimalFormat produces abbreviated numbers, suitable for display in environments will limited real estate. For example, 'Hits: 1.2B' instead of 'Hits: 1,200,000,000'. The format will be appropriate for the given language, such as "1,2 Mrd." for German. <p> For numbers under 1000 trillion (under 10^15, such as 123,456,789,012,345), the result will be short for supported languages. However, the result may sometimes exceed 7 characters, such as when there are combining marks or thin characters. In such cases, the visual width in fonts should still be short. <p> By default, there are 2 significant digits. After creation, if more than three significant digits are set (with setMaximumSignificantDigits), or if a fixed number of digits are set (with setMaximumIntegerDigits or setMaximumFractionDigits), then result may be wider. <p> At this time, negative numbers and parsing are not supported, and will produce an UnsupportedOperationException. Resetting the pattern prefixes or suffixes is not supported; the method calls are ignored. <p> Note that important methods, like setting the number of decimals, will be moved up from DecimalFormat to NumberFormat. </p><pre><code>public class CompactDecimalFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/CompactDecimalFormat.html
CurrencyPluralInfo	A										<section class="prog__container"><p> This class represents the information needed by DecimalFormat to format currency plural, such as "3.00 US dollars" or "1.00 US dollar". DecimalFormat creates for itself an instance of CurrencyPluralInfo from its locale data. If you need to change any of these symbols, you can get the CurrencyPluralInfo object from your DecimalFormat and modify it. Following are the information needed for currency plural format and parse: locale information, plural rule of the locale, currency plural pattern of the locale.</p><pre><code>public class CurrencyPluralInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/CurrencyPluralInfo.html
DateFormat.BooleanAttribute	A										<section class="prog__container"><p> boolean attributes</p><pre><code>public static final enum DateFormat.BooleanAttribute\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/DateFormat.BooleanAttribute.html
DateFormat.Field	A										<section class="prog__container"><pre><code>public static class DateFormat.Field\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/DateFormat.Field.html
DateFormat	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> DateFormat </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> DateFormat is an abstract class for date/time formatting subclasses which formats and parses dates or time in a language-independent manner. The date/time formatting subclass, such as SimpleDateFormat, allows for formatting (i.e., date -&gt; text), parsing (text -&gt; date), and normalization. The date is represented as a <pre><code> Date </code></pre> object or as the milliseconds since January 1, 1970, 00:00:00 GMT. <p> DateFormat helps you to format and parse dates for any locale. Your code can be completely independent of the locale conventions for months, days of the week, or even the calendar format: lunar vs. solar. It provides many class methods for obtaining default date/time formatters based on the default for a given locale and a number of formatting styles or arbitrary "skeletons". <ol> <li> The formatting styles include FULL, LONG, MEDIUM, and SHORT. More detail and examples of using these styles are provided in the method descriptions. <li> The formatting styles only cover a fraction of the necessary usage. You often need to have just certain combinations of fields, like Month and Year, but have it to be formatted appropriate to a given locale. This is done using the (misnamed) getPatternInstance() method, supplying a skeleton. There are a number of constants that have common pre-defined skeletons, such as <pre><code> MINUTE_SECOND </code></pre> for something like "13:45" or <pre><code> YEAR_ABBR_MONTH </code></pre> for something like "Sept 2012". </li> </li> </ol> <p> To format a date for the current Locale, use one of the static factory methods: <pre> myString = DateFormat.getDateInstance().format(myDate); myString = DateFormat.getPatternInstance(DateFormat.YEAR_ABBR_MONTH).format(myDate); </pre> <p> If you are formatting multiple numbers, it is more efficient to get the format and use it multiple times so that the system doesn't have to fetch the information about the local language and country conventions multiple times. <pre> DateFormat df = DateFormat.getDateInstance(); for (int i = 0; i &lt; a.length; ++i) { output.println(df.format(myDate[i]) + "; "); } </pre> <p> To format a date for a different Locale, specify it in the call to getDateInstance(). <pre> DateFormat df = DateFormat.getDateInstance(DateFormat.LONG, Locale.FRANCE); </pre> <p> You can use a DateFormat to parse also. <pre> myDate = df.parse(myString); </pre> <p> There are many static factory methods available. Use getDateInstance to get the normal date format for that country. Use getTimeInstance to get the time format for that country. Use getDateTimeInstance to get a date and time format. You can pass in different options to these factory methods to control the length of the result; from SHORT to MEDIUM to LONG to FULL. The exact result depends on the locale, but generally: <ul> <li> SHORT is completely numeric, such as 12.13.52 or 3:30pm <li> MEDIUM is longer, such as Jan 12, 1952 <li> LONG is longer, such as January 12, 1952 or 3:30:32pm <li> FULL is pretty completely specified, such as Tuesday, April 12, 1952 AD or 3:30:42pm PST. </li> </li> </li> </li> </ul> <p> Use getPatternInstance to format with a skeleton. Typically this is with a predefined skeleton, like <pre><code> YEAR_ABBR_MONTH </code></pre> for something like "Sept 2012". If you don't want to use one of the predefined skeletons, you can supply your own. The skeletons are like the patterns in SimpleDateFormat, except they: <ol> <li> only keep the field pattern letter and ignore all other parts in a pattern, such as space, punctuation, and string literals. <li> are independent of the order of fields. <li> ignore certain differences in the field's pattern letter length: <ol> <li> For those non-digit calendar fields, the pattern letter length is important, such as MMM, MMMM, and MMMMM; E and EEEE, and the field's pattern letter length is honored. <li> For the digit calendar fields, such as M or MM, d or dd, yy or yyyy, the field pattern length is ignored and the best match, which is defined in date time patterns, will be returned without honor the field pattern letter length in skeleton. </li> </li> </ol> </li> </li> </li> </ol> <p> You can also set the time zone on the format if you wish. If you want even more control over the format or parsing, (or want to give your users more control), you can try casting the DateFormat you get from the factory methods to a SimpleDateFormat. This will work for the majority of countries; just remember to put it in a try block in case you encounter an unusual one. <p> You can also use forms of the parse and format methods with ParsePosition and FieldPosition to allow you to <ul> <li> progressively parse through pieces of a string. <li> align any particular field, or find out where it is for selection on the screen. </li> </li> </ul> </p><pre><code>public abstract class DateFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/DateFormat.html
DateFormatSymbols	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> DateFormatSymbols </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> <pre><code> DateFormatSymbols </code></pre> is a public class for encapsulating localizable date-time formatting data, such as the names of the months, the names of the days of the week, and the time zone data. <pre><code> DateFormat </code></pre> and <pre><code> SimpleDateFormat </code></pre> both use <pre><code> DateFormatSymbols </code></pre> to encapsulate this information. <p> Typically you shouldn't use <pre><code> DateFormatSymbols </code></pre> directly. Rather, you are encouraged to create a date-time formatter with the <pre><code> DateFormat </code></pre> class's factory methods: <pre><code> getTimeInstance </code></pre> , <pre><code> getDateInstance </code></pre> , or <pre><code> getDateTimeInstance </code></pre> . These methods automatically create a <pre><code> DateFormatSymbols </code></pre> for the formatter so that you don't have to. After the formatter is created, you may modify its format pattern using the <pre><code> setPattern </code></pre> method. For more information about creating formatters using <pre><code> DateFormat </code></pre> 's factory methods, see <pre><code> DateFormat </code></pre> . <p> If you decide to create a date-time formatter with a specific format pattern for a specific locale, you can do so with: <blockquote> <pre> new SimpleDateFormat(aPattern, new DateFormatSymbols(aLocale)). </pre> </blockquote> <p> <pre><code> DateFormatSymbols </code></pre> objects are clonable. When you obtain a <pre><code> DateFormatSymbols </code></pre> object, feel free to modify the date-time formatting data. For instance, you can replace the localized date-time format pattern characters with the ones that you feel easy to remember. Or you can change the representative cities to your favorite ones. <p> New <pre><code> DateFormatSymbols </code></pre> subclasses may be added to support <pre><code> SimpleDateFormat </code></pre> for date-time formatting for additional locales. </p><pre><code>public class DateFormatSymbols\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/DateFormatSymbols.html
DateIntervalFormat	A										<section class="prog__container"><p> DateIntervalFormat is a class for formatting and parsing date intervals in a language-independent manner. Only formatting is supported. Parsing is not supported. <p> Date interval means from one date to another date, for example, from "Jan 11, 2008" to "Jan 18, 2008". We introduced class DateInterval to represent it. DateInterval is a pair of UDate, which is the standard milliseconds since 24:00 GMT, Jan 1, 1970. <p> DateIntervalFormat formats a DateInterval into text as compactly as possible. For example, the date interval format from "Jan 11, 2008" to "Jan 18,. 2008" is "Jan 11-18, 2008" for English. And it parses text into DateInterval, although initially, parsing is not supported. <p> There is no structural information in date time patterns. For any punctuations and string literals inside a date time pattern, we do not know whether it is just a separator, or a prefix, or a suffix. Without such information, so, it is difficult to generate a sub-pattern (or super-pattern) by algorithm. So, formatting a DateInterval is pattern-driven. It is very similar to formatting in SimpleDateFormat. We introduce class DateIntervalInfo to save date interval patterns, similar to date time pattern in SimpleDateFormat. <p> Logically, the interval patterns are mappings from (skeleton, the_largest_different_calendar_field) to (date_interval_pattern). <p> A skeleton <ol> <li> only keeps the field pattern letter and ignores all other parts in a pattern, such as space, punctuations, and string literals. <li> hides the order of fields. <li> might hide a field's pattern letter length. For those non-digit calendar fields, the pattern letter length is important, such as MMM, MMMM, and MMMMM; EEE and EEEE, and the field's pattern letter length is honored. For the digit calendar fields, such as M or MM, d or dd, yy or yyyy, the field pattern length is ignored and the best match, which is defined in date time patterns, will be returned without honor the field pattern letter length in skeleton. </li> </li> </li> </ol> <p> The calendar fields we support for interval formatting are: year, month, date, day-of-week, am-pm, hour, hour-of-day, minute, and second (though we do not currently have specific intervalFormat data for skeletons with seconds). Those calendar fields can be defined in the following order: year &gt; month &gt; date &gt; hour (in day) &gt; minute &gt; second The largest different calendar fields between 2 calendars is the first different calendar field in above order. For example: the largest different calendar fields between "Jan 10, 2007" and "Feb 20, 2008" is year. <p> For other calendar fields, the compact interval formatting is not supported. And the interval format will be fall back to fall-back patterns, which is mostly "{date0} - {date1}". <p> There is a set of pre-defined static skeleton strings in DateFormat, There are pre-defined interval patterns for those pre-defined skeletons in locales' resource files. For example, for a skeleton YEAR_ABBR_MONTH_DAY, which is "yMMMd", in en_US, if the largest different calendar field between date1 and date2 is "year", the date interval pattern is "MMM d, yyyy - MMM d, yyyy", such as "Jan 10, 2007 - Jan 10, 2008". If the largest different calendar field between date1 and date2 is "month", the date interval pattern is "MMM d - MMM d, yyyy", such as "Jan 10 - Feb 10, 2007". If the largest different calendar field between date1 and date2 is "day", the date interval pattern is ""MMM d-d, yyyy", such as "Jan 10-20, 2007". For date skeleton, the interval patterns when year, or month, or date is different are defined in resource files. For time skeleton, the interval patterns when am/pm, or hour, or minute is different are defined in resource files. <p> If a skeleton is not found in a locale's DateIntervalInfo, which means the interval patterns for the skeleton is not defined in resource file, the interval pattern will falls back to the interval "fallback" pattern defined in resource file. If the interval "fallback" pattern is not defined, the default fall-back is "{date0} - {data1}". <p> For the combination of date and time, The rule to genearte interval patterns are: <ol> <li> when the year, month, or day differs, falls back to fall-back interval pattern, which mostly is the concatenate the two original expressions with a separator between, For example, interval pattern from "Jan 10, 2007 10:10 am" to "Jan 11, 2007 10:10am" is "Jan 10, 2007 10:10 am - Jan 11, 2007 10:10am" <li> otherwise, present the date followed by the range expression for the time. For example, interval pattern from "Jan 10, 2007 10:10 am" to "Jan 10, 2007 11:10am" is "Jan 10, 2007 10:10 am - 11:10am" </li> </li> </ol> <p> If two dates are the same, the interval pattern is the single date pattern. For example, interval pattern from "Jan 10, 2007" to "Jan 10, 2007" is "Jan 10, 2007". Or if the presenting fields between 2 dates have the exact same values, the interval pattern is the single date pattern. For example, if user only requests year and month, the interval pattern from "Jan 10, 2007" to "Jan 20, 2007" is "Jan 2007". <p> DateIntervalFormat needs the following information for correct formatting: time zone, calendar type, pattern, date format symbols, and date interval patterns. It can be instantiated in several ways: <ol> <li> create an instance using default or given locale plus given skeleton. Users are encouraged to created date interval formatter this way and to use the pre-defined skeleton macros, such as YEAR_NUM_MONTH, which consists the calendar fields and the format style. </li> <li> create an instance using default or given locale plus given skeleton plus a given DateIntervalInfo. This factory method is for powerful users who want to provide their own interval patterns. Locale provides the timezone, calendar, and format symbols information. Local plus skeleton provides full pattern information. DateIntervalInfo provides the date interval patterns. </li> </ol> <p> For the calendar field pattern letter, such as G, y, M, d, a, h, H, m, s etc. DateIntervalFormat uses the same syntax as that of DateTime format. <p> Code Sample: general usage <pre> // the date interval object which the DateIntervalFormat formats on // and parses into DateInterval dtInterval = new DateInterval(1000*3600*24L, 1000*3600*24*2L); DateIntervalFormat dtIntervalFmt = DateIntervalFormat.getInstance( YEAR_MONTH_DAY, Locale("en", "GB", "")); StringBuffer str = new StringBuffer(""); FieldPosition pos = new FieldPosition(0); // formatting dtIntervalFmt.format(dtInterval, dateIntervalString, pos); </pre> <p> Code Sample: for powerful users who wants to use their own interval pattern <pre> import android.icu.text.DateIntervalInfo; import android.icu.text.DateIntervalFormat; .................... // Get DateIntervalFormat instance using default locale DateIntervalFormat dtitvfmt = DateIntervalFormat.getInstance(YEAR_MONTH_DAY); // Create an empty DateIntervalInfo object, which does not have any interval patterns inside. dtitvinf = new DateIntervalInfo(); // a series of set interval patterns. // Only ERA, YEAR, MONTH, DATE, DAY_OF_MONTH, DAY_OF_WEEK, AM_PM, HOUR, HOUR_OF_DAY, MINUTE and SECOND are supported. dtitvinf.setIntervalPattern("yMMMd", Calendar.YEAR, "'y ~ y'"); dtitvinf.setIntervalPattern("yMMMd", Calendar.MONTH, "yyyy 'diff' MMM d - MMM d"); dtitvinf.setIntervalPattern("yMMMd", Calendar.DATE, "yyyy MMM d ~ d"); dtitvinf.setIntervalPattern("yMMMd", Calendar.HOUR_OF_DAY, "yyyy MMM d HH:mm ~ HH:mm"); // Set fallback interval pattern. Fallback pattern is used when interval pattern is not found. // If the fall-back pattern is not set, falls back to {date0} - {date1} if interval pattern is not found. dtitvinf.setFallbackIntervalPattern("{0} - {1}"); // Set above DateIntervalInfo object as the interval patterns of date interval formatter dtitvfmt.setDateIntervalInfo(dtitvinf); // Prepare to format pos = new FieldPosition(0); str = new StringBuffer(""); // The 2 calendars should be equivalent, otherwise, IllegalArgumentException will be thrown by format() Calendar fromCalendar = (Calendar) dtfmt.getCalendar().clone(); Calendar toCalendar = (Calendar) dtfmt.getCalendar().clone(); fromCalendar.setTimeInMillis(....); toCalendar.setTimeInMillis(...); //Formatting given 2 calendars dtitvfmt.format(fromCalendar, toCalendar, str, pos); </pre> </p><pre><code>public class DateIntervalFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/DateIntervalFormat.html
DateIntervalInfo	A										<section class="prog__container"><p> DateIntervalInfo is a public class for encapsulating localizable date time interval patterns. It is used by DateIntervalFormat. <p> For most users, ordinary use of DateIntervalFormat does not need to create DateIntervalInfo object directly. DateIntervalFormat will take care of it when creating a date interval formatter when user pass in skeleton and locale. <p> For power users, who want to create their own date interval patterns, or want to re-set date interval patterns, they could do so by directly creating DateIntervalInfo and manipulating it. <p> Logically, the interval patterns are mappings from (skeleton, the_largest_different_calendar_field) to (date_interval_pattern). <p> A skeleton <ol> <li> only keeps the field pattern letter and ignores all other parts in a pattern, such as space, punctuations, and string literals. <li> hides the order of fields. <li> might hide a field's pattern letter length. For those non-digit calendar fields, the pattern letter length is important, such as MMM, MMMM, and MMMMM; EEE and EEEE, and the field's pattern letter length is honored. For the digit calendar fields, such as M or MM, d or dd, yy or yyyy, the field pattern length is ignored and the best match, which is defined in date time patterns, will be returned without honor the field pattern letter length in skeleton. </li> </li> </li> </ol> <p> The calendar fields we support for interval formatting are: year, month, date, day-of-week, am-pm, hour, hour-of-day, minute, and second (though we do not currently have specific intervalFormat data for skeletons with seconds). Those calendar fields can be defined in the following order: year &gt; month &gt; date &gt; am-pm &gt; hour &gt; minute &gt; second The largest different calendar fields between 2 calendars is the first different calendar field in above order. For example: the largest different calendar fields between "Jan 10, 2007" and "Feb 20, 2008" is year. <p> There is a set of pre-defined static skeleton strings. There are pre-defined interval patterns for those pre-defined skeletons in locales' resource files. For example, for a skeleton YEAR_ABBR_MONTH_DAY, which is "yMMMd", in en_US, if the largest different calendar field between date1 and date2 is "year", the date interval pattern is "MMM d, yyyy - MMM d, yyyy", such as "Jan 10, 2007 - Jan 10, 2008". If the largest different calendar field between date1 and date2 is "month", the date interval pattern is "MMM d - MMM d, yyyy", such as "Jan 10 - Feb 10, 2007". If the largest different calendar field between date1 and date2 is "day", the date interval pattern is ""MMM d-d, yyyy", such as "Jan 10-20, 2007". For date skeleton, the interval patterns when year, or month, or date is different are defined in resource files. For time skeleton, the interval patterns when am/pm, or hour, or minute is different are defined in resource files. <p> There are 2 dates in interval pattern. For most locales, the first date in an interval pattern is the earlier date. There might be a locale in which the first date in an interval pattern is the later date. We use fallback format for the default order for the locale. For example, if the fallback format is "{0} - {1}", it means the first date in the interval pattern for this locale is earlier date. If the fallback format is "{1} - {0}", it means the first date is the later date. For a particular interval pattern, the default order can be overriden by prefixing "latestFirst:" or "earliestFirst:" to the interval pattern. For example, if the fallback format is "{0}-{1}", but for skeleton "yMMMd", the interval pattern when day is different is "latestFirst:d-d MMM yy", it means by default, the first date in interval pattern is the earlier date. But for skeleton "yMMMd", when day is different, the first date in "d-d MMM yy" is the later date. <p> The recommended way to create a DateIntervalFormat object is to pass in the locale. By using a Locale parameter, the DateIntervalFormat object is initialized with the pre-defined interval patterns for a given or default locale. <p> Users can also create DateIntervalFormat object by supplying their own interval patterns. It provides flexibility for power usage. <p> After a DateIntervalInfo object is created, clients may modify the interval patterns using setIntervalPattern function as so desired. Currently, users can only set interval patterns when the following calendar fields are different: ERA, YEAR, MONTH, DATE, DAY_OF_MONTH, DAY_OF_WEEK, AM_PM, HOUR, HOUR_OF_DAY, MINUTE and SECOND. Interval patterns when other calendar fields are different is not supported. <p> DateIntervalInfo objects are cloneable. When clients obtain a DateIntervalInfo object, they can feel free to modify it as necessary. <p> DateIntervalInfo are not expected to be subclassed. Data for a calendar is loaded out of resource bundles. Through ICU 4.4, date interval patterns are only supported in the Gregoria calendar; non-Gregorian calendars are supported from ICU 4.4.1. </p><pre><code>public class DateIntervalInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/DateIntervalInfo.html
DateIntervalInfo.PatternInfo	A										<section class="prog__container"><p> PatternInfo class saves the first and second part of interval pattern, and whether the interval pattern is earlier date first.</p><pre><code>public static final class DateIntervalInfo.PatternInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/DateIntervalInfo.PatternInfo.html
DateTimePatternGenerator	A										<section class="prog__container"><p> This class provides flexible generation of date format patterns, like "yy-MM-dd". The user can build up the generator by adding successive patterns. Once that is done, a query can be made using a "skeleton", which is a pattern which just includes the desired fields and lengths. The generator will return the "best fit" pattern corresponding to that skeleton. <p> The main method people will use is getBestPattern(String skeleton), since normally this class is pre-built with data from a particular locale. However, generators can be built directly from other data as well. </p><pre><code>public class DateTimePatternGenerator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html
DateTimePatternGenerator.PatternInfo	A										<section class="prog__container"><p> PatternInfo supplies output parameters for addPattern(...). It is used because Java doesn't have real output parameters. It is treated like a struct (eg Point), so all fields are public.</p><pre><code>public static final class DateTimePatternGenerator.PatternInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.PatternInfo.html
DecimalFormat	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> DecimalFormat </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <pre><code> DecimalFormat </code></pre> is a concrete subclass of <pre><code> NumberFormat </code></pre> that formats decimal numbers. It has a variety of features designed to make it possible to parse and format numbers in any locale, including support for Western, Arabic, or Indic digits. It also supports different flavors of numbers, including integers ("123"), fixed-point numbers ("123.4"), scientific notation ("1.23E4"), percentages ("12%"), and currency amounts ("$123.00", "USD123.00", "123.00 US dollars"). All of these flavors can be easily localized. <p> To obtain a <pre><code> NumberFormat </code></pre> for a specific locale (including the default locale) call one of <pre><code> NumberFormat </code></pre> 's factory methods such as <pre><code> getInstance() </code></pre> . Do not call the <pre><code> DecimalFormat </code></pre> constructors directly, unless you know what you are doing, since the <pre><code> NumberFormat </code></pre> factory methods may return subclasses other than <pre><code> DecimalFormat </code></pre> . If you need to customize the format object, do something like this: <blockquote> <pre> NumberFormat f = NumberFormat.getInstance(loc); if (f instanceof DecimalFormat) { ((DecimalFormat) f).setDecimalSeparatorAlwaysShown(true); }</pre> </blockquote> <p> <strong> Example Usage </strong> Print out a number using the localized number, currency, and percent format for each locale. <blockquote> <pre> Locale[] locales = NumberFormat.getAvailableLocales(); double myNumber = -1234.56; NumberFormat format; for (int j=0; j&lt;3; ++j) { System.out.println("FORMAT"); for (int i = 0; i &lt; locales.length; ++i) { if (locales[i].getCountry().length() == 0) { // Skip language-only locales continue; } System.out.print(locales[i].getDisplayName()); switch (j) { case 0: format = NumberFormat.getInstance(locales[i]); break; case 1: format = NumberFormat.getCurrencyInstance(locales[i]); break; default: format = NumberFormat.getPercentInstance(locales[i]); break; } try { // Assume format is a DecimalFormat System.out.print(": " + ((DecimalFormat) format).toPattern() + " -&gt; " + form.format(myNumber)); } catch (Exception e) {} try { System.out.println(" -&gt; " + format.parse(form.format(myNumber))); } catch (ParseException e) {} } }</pre> </blockquote> <p> Another example use getInstance(style). <br> Print out a number using the localized number, currency, percent, scientific, integer, iso currency, and plural currency format for each locale. <blockquote> <pre> ULocale locale = new ULocale("en_US"); double myNumber = 1234.56; for (int j=NumberFormat.NUMBERSTYLE; j&lt;=NumberFormat.PLURALCURRENCYSTYLE; ++j) { NumberFormat format = NumberFormat.getInstance(locale, j); try { // Assume format is a DecimalFormat System.out.print(": " + ((DecimalFormat) format).toPattern() + " -&gt; " + form.format(myNumber)); } catch (Exception e) {} try { System.out.println(" -&gt; " + format.parse(form.format(myNumber))); } catch (ParseException e) {} }</pre> </blockquote> </p><pre><code>public class DecimalFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/DecimalFormat.html
DecimalFormatSymbols	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> DecimalFormatSymbols </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. This class represents the set of symbols (such as the decimal separator, the grouping separator, and so on) needed by <pre><code> DecimalFormat </code></pre> to format numbers. <pre><code> DecimalFormat </code></pre> creates for itself an instance of <pre><code> DecimalFormatSymbols </code></pre> from its locale data. If you need to change any of these symbols, you can get the <pre><code> DecimalFormatSymbols </code></pre> object from your <pre><code> DecimalFormat </code></pre> and modify it.</p><pre><code>public class DecimalFormatSymbols\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/DecimalFormatSymbols.html
DisplayContext	A										<section class="prog__container"><p> Display context settings. Note, the specific numeric values are internal and may change.</p><pre><code>public final enum DisplayContext\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/DisplayContext.html
DisplayContext.Type	A										<section class="prog__container"><p> Type values for DisplayContext</p><pre><code>public static final enum DisplayContext.Type\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/DisplayContext.Type.html
IDNA.Error	A										<section class="prog__container"><p> IDNA error bit set values. When a domain name or label fails a processing step or does not meet the validity criteria, then one or more of these error bits are set.</p><pre><code>public static final enum IDNA.Error\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/IDNA.Error.html
IDNA	A										<section class="prog__container"><p> Abstract base class for IDNA processing. See http://www.unicode.org/reports/tr46/ and http://www.ietf.org/rfc/rfc3490.txt <p> The IDNA class is not intended for public subclassing. <p> The non-static methods implement UTS #46 and IDNA2008. IDNA2008 is implemented according to UTS #46, see getUTS46Instance(). <p> IDNA2003 is obsolete. The static methods implement IDNA2003. They are all deprecated. <p> IDNA2003 API Overview: <p> The static IDNA API methods implement the IDNA protocol as defined in the IDNA RFC . The draft defines 2 operations: ToASCII and ToUnicode. Domain labels containing non-ASCII code points are required to be processed by ToASCII operation before passing it to resolver libraries. Domain names that are obtained from resolver libraries are required to be processed by ToUnicode operation before displaying the domain name to the user. IDNA requires that implementations process input strings with Nameprep , which is a profile of Stringprep , and then with Punycode . Implementations of IDNA MUST fully implement Nameprep and Punycode; neither Nameprep nor Punycode are optional. The input and output of ToASCII and ToUnicode operations are Unicode and are designed to be chainable, i.e., applying ToASCII or ToUnicode operations multiple times to an input string will yield the same result as applying the operation once. ToUnicode(ToUnicode(ToUnicode...(ToUnicode(string)))) == ToUnicode(string) ToASCII(ToASCII(ToASCII...(ToASCII(string))) == ToASCII(string). </p><pre><code>public abstract class IDNA\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/IDNA.html
IDNA.Info	A										<section class="prog__container"><p> Output container for IDNA processing errors. The Info class is not suitable for subclassing.</p><pre><code>public static final class IDNA.Info\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/IDNA.Info.html
LocaleDisplayNames.DialectHandling	A										<section class="prog__container"><p> Enum used in <pre><code> getInstance(ULocale, DialectHandling) </code></pre> .</p><pre><code>public static final enum LocaleDisplayNames.DialectHandling\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/LocaleDisplayNames.DialectHandling.html
LocaleDisplayNames	A										<section class="prog__container"><p> Returns display names of ULocales and components of ULocales. For more information on language, script, region, variant, key, and values, see <pre><code> ULocale </code></pre> .</p><pre><code>public abstract class LocaleDisplayNames\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/LocaleDisplayNames.html
MeasureFormat.FormatWidth	A										<section class="prog__container"><p> Formatting width enum.</p><pre><code>public static final enum MeasureFormat.FormatWidth\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/MeasureFormat.FormatWidth.html
MeasureFormat	A										<section class="prog__container"><p> A formatter for Measure objects. <p> To format a Measure object, first create a formatter object using a MeasureFormat factory method. Then use that object's format or formatMeasures methods. Here is sample code: <pre> MeasureFormat fmtFr = MeasureFormat.getInstance( ULocale.FRENCH, FormatWidth.SHORT); Measure measure = new Measure(23, MeasureUnit.CELSIUS); // Output: 23 °C System.out.println(fmtFr.format(measure)); Measure measureF = new Measure(70, MeasureUnit.FAHRENHEIT); // Output: 70 °F System.out.println(fmtFr.format(measureF)); MeasureFormat fmtFrFull = MeasureFormat.getInstance( ULocale.FRENCH, FormatWidth.WIDE); // Output: 70 pieds et 5,3 pouces System.out.println(fmtFrFull.formatMeasures( new Measure(70, MeasureUnit.FOOT), new Measure(5.3, MeasureUnit.INCH))); // Output: 1 pied et 1 pouce System.out.println(fmtFrFull.formatMeasures( new Measure(1, MeasureUnit.FOOT), new Measure(1, MeasureUnit.INCH))); MeasureFormat fmtFrNarrow = MeasureFormat.getInstance( ULocale.FRENCH, FormatWidth.NARROW); // Output: 1′ 1″ System.out.println(fmtFrNarrow.formatMeasures( new Measure(1, MeasureUnit.FOOT), new Measure(1, MeasureUnit.INCH))); MeasureFormat fmtEn = MeasureFormat.getInstance(ULocale.ENGLISH, FormatWidth.WIDE); // Output: 1 inch, 2 feet fmtEn.formatMeasures( new Measure(1, MeasureUnit.INCH), new Measure(2, MeasureUnit.FOOT)); </pre> <p> This class does not do conversions from one unit to another. It simply formats whatever units it is given <p> This class is immutable and thread-safe so long as its deprecated subclass, TimeUnitFormat, is never used. TimeUnitFormat is not thread-safe, and is mutable. Although this class has existing subclasses, this class does not support new sub-classes. </p><pre><code>public class MeasureFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/MeasureFormat.html
MessageFormat.Field	A										<section class="prog__container"><p> Defines constants that are used as attribute keys in the <pre><code> AttributedCharacterIterator </code></pre> returned from <pre><code> MessageFormat.formatToCharacterIterator </code></pre> .</p><pre><code>public static class MessageFormat.Field\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/MessageFormat.Field.html
MessageFormat	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> MessageFormat </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> MessageFormat prepares strings for display to users, with optional arguments (variables/placeholders). The arguments can occur in any order, which is necessary for translation into languages with different grammars. <p> A MessageFormat is constructed from a <em> pattern </em> string with arguments in {curly braces} which will be replaced by formatted values. <p> <pre><code> MessageFormat </code></pre> differs from the other <pre><code> Format </code></pre> classes in that you create a <pre><code> MessageFormat </code></pre> object with one of its constructors (not with a <pre><code> getInstance </code></pre> style factory method). Factory methods aren't necessary because <pre><code> MessageFormat </code></pre> itself doesn't implement locale-specific behavior. Any locale-specific behavior is defined by the pattern that you provide and the subformats used for inserted arguments. <p> Arguments can be named (using identifiers) or numbered (using small ASCII-digit integers). Some of the API methods work only with argument numbers and throw an exception if the pattern has named arguments (see <pre><code> usesNamedArguments() </code></pre> ). <p> An argument might not specify any format type. In this case, a Number value is formatted with a default (for the locale) NumberFormat, a Date value is formatted with a default (for the locale) DateFormat, and for any other value its toString() value is used. <p> An argument might specify a "simple" type for which the specified Format object is created, cached and used. <p> An argument might have a "complex" type with nested MessageFormat sub-patterns. During formatting, one of these sub-messages is selected according to the argument value and recursively formatted. <p> After construction, a custom Format object can be set for a top-level argument, overriding the default formatting and parsing behavior for that argument. However, custom formatting can be achieved more simply by writing a typeless argument in the pattern string and supplying it with a preformatted string value. <p> When formatting, MessageFormat takes a collection of argument values and writes an output string. The argument values may be passed as an array (when the pattern contains only numbered arguments) or as a Map (which works for both named and numbered arguments). <p> Each argument is matched with one of the input values by array index or map key and formatted according to its pattern specification (or using a custom Format object if one was set). A numbered pattern argument is matched with a map key that contains that number as an ASCII-decimal-digit string (without leading zero). </p><pre><code>public class MessageFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/MessageFormat.html
MessagePattern.ApostropheMode	A										<section class="prog__container"><p> Mode for when an apostrophe starts quoted literal text for MessageFormat output. The default is DOUBLE_OPTIONAL unless overridden via ICUConfig (/com/ibm/icu/ICUConfig.properties). <p> A pair of adjacent apostrophes always results in a single apostrophe in the output, even when the pair is between two single, text-quoting apostrophes. <p> The following table shows examples of desired MessageFormat.format() output with the pattern strings that yield that output. <table> <tr> <th> Desired output </th> <th> DOUBLE_OPTIONAL </th> <th> DOUBLE_REQUIRED </th> </tr> <tr> <td> I see {many} </td> <td> I see '{many}' </td> <td> (same) </td> </tr> <tr> <td> I said {'Wow!'} </td> <td> I said '{''Wow!''}' </td> <td> (same) </td> </tr> <tr> <td> I don't know </td> <td> I don't know OR <br> I don''t know </br> </td> <td> I don''t know </td> </tr> </table> </p><pre><code>public static final enum MessagePattern.ApostropheMode\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/MessagePattern.ApostropheMode.html
MessagePattern.ArgType	A										<section class="prog__container"><p> Argument type constants. Returned by Part.getArgType() for ARG_START and ARG_LIMIT parts. Messages nested inside an argument are each delimited by MSG_START and MSG_LIMIT, with a nesting level one greater than the surrounding message.</p><pre><code>public static final enum MessagePattern.ArgType\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/MessagePattern.ArgType.html
MessagePattern	A										<section class="prog__container"><p> Parses and represents ICU MessageFormat patterns. Also handles patterns for ChoiceFormat, PluralFormat and SelectFormat. Used in the implementations of those classes as well as in tools for message validation, translation and format conversion. <p> The parser handles all syntax relevant for identifying message arguments. This includes "complex" arguments whose style strings contain nested MessageFormat pattern substrings. For "simple" arguments (with no nested MessageFormat pattern substrings), the argument style is not parsed any further. <p> The parser handles named and numbered message arguments and allows both in one message. <p> Once a pattern has been parsed successfully, iterate through the parsed data with countParts(), getPart() and related methods. <p> The data logically represents a parse tree, but is stored and accessed as a list of "parts" for fast and simple parsing and to minimize object allocations. Arguments and nested messages are best handled via recursion. For every _START "part", <pre><code> getLimitPartIndex(int) </code></pre> efficiently returns the index of the corresponding _LIMIT "part". <p> List of "parts": <pre> message = MSG_START (SKIP_SYNTAX | INSERT_CHAR | REPLACE_NUMBER | argument)* MSG_LIMIT argument = noneArg | simpleArg | complexArg complexArg = choiceArg | pluralArg | selectArg noneArg = ARG_START.NONE (ARG_NAME | ARG_NUMBER) ARG_LIMIT.NONE simpleArg = ARG_START.SIMPLE (ARG_NAME | ARG_NUMBER) ARG_TYPE [ARG_STYLE] ARG_LIMIT.SIMPLE choiceArg = ARG_START.CHOICE (ARG_NAME | ARG_NUMBER) choiceStyle ARG_LIMIT.CHOICE pluralArg = ARG_START.PLURAL (ARG_NAME | ARG_NUMBER) pluralStyle ARG_LIMIT.PLURAL selectArg = ARG_START.SELECT (ARG_NAME | ARG_NUMBER) selectStyle ARG_LIMIT.SELECT choiceStyle = ((ARG_INT | ARG_DOUBLE) ARG_SELECTOR message)+ pluralStyle = [ARG_INT | ARG_DOUBLE] (ARG_SELECTOR [ARG_INT | ARG_DOUBLE] message)+ selectStyle = (ARG_SELECTOR message)+ </pre> <ul> <li> Literal output text is not represented directly by "parts" but accessed between parts of a message, from one part's getLimit() to the next part's getIndex(). <li> <pre><code> ARG_START.CHOICE </code></pre> stands for an ARG_START Part with ArgType CHOICE. <li> In the choiceStyle, the ARG_SELECTOR has the '&lt;', the '#' or the less-than-or-equal-to sign (U+2264). <li> In the pluralStyle, the first, optional numeric Part has the "offset:" value. The optional numeric Part between each (ARG_SELECTOR, message) pair is the value of an explicit-number selector like "=2", otherwise the selector is a non-numeric identifier. <li> The REPLACE_NUMBER Part can occur only in an immediate sub-message of the pluralStyle. </li> </li> </li> </li> </li> </ul> <p> This class is not intended for public subclassing. </p><pre><code>public final class MessagePattern\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/MessagePattern.html
MessagePattern.Part	A										<section class="prog__container"><p> A message pattern "part", representing a pattern parsing event. There is a part for the start and end of a message or argument, for quoting and escaping of and with ASCII apostrophes, and for syntax elements of "complex" arguments.</p><pre><code>public static final class MessagePattern.Part\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/MessagePattern.Part.html
MessagePattern.Part.Type	A										<section class="prog__container"><p> Part type constants.</p><pre><code>public static final enum MessagePattern.Part.Type\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/MessagePattern.Part.Type.html
Normalizer	A										<section class="prog__container"><p> Old Unicode normalization API. <p> This API has been replaced by the <pre><code> Normalizer2 </code></pre> class and is only available for backward compatibility. This class simply delegates to the Normalizer2 class. There are two exceptions: The new API does not provide a replacement for <pre><code> QuickCheckResult </code></pre> and <pre><code> compare() </code></pre> . <p> <pre><code> normalize </code></pre> transforms Unicode text into an equivalent composed or decomposed form, allowing for easier sorting and searching of text. <pre><code> normalize </code></pre> supports the standard normalization forms described in Unicode Standard Annex #15 — Unicode Normalization Forms . <p> Characters with accents or other adornments can be encoded in several different ways in Unicode. For example, take the character A-acute. In Unicode, this can be encoded as a single character (the "composed" form): <pre> 00C1 LATIN CAPITAL LETTER A WITH ACUTE </pre> or as two separate characters (the "decomposed" form): <pre> 0041 LATIN CAPITAL LETTER A 0301 COMBINING ACUTE ACCENT </pre> <p> To a user of your program, however, both of these sequences should be treated as the same "user-level" character "A with acute accent". When you are searching or comparing text, you must ensure that these two sequences are treated equivalently. In addition, you must handle characters with more than one accent. Sometimes the order of a character's combining accents is significant, while in other cases accent sequences in different orders are really equivalent. <p> Similarly, the string "ffi" can be encoded as three separate letters: <pre> 0066 LATIN SMALL LETTER F 0066 LATIN SMALL LETTER F 0069 LATIN SMALL LETTER I </pre> or as the single character <pre> FB03 LATIN SMALL LIGATURE FFI </pre> <p> The ffi ligature is not a distinct semantic character, and strictly speaking it shouldn't be in Unicode at all, but it was included for compatibility with existing character sets that already provided it. The Unicode standard identifies such characters by giving them "compatibility" decompositions into the corresponding semantic characters. When sorting and searching, you will often want to use these mappings. <p> <pre><code> normalize </code></pre> helps solve these problems by transforming text into the canonical composed and decomposed forms as shown in the first example above. In addition, you can have it perform compatibility decompositions so that you can treat compatibility characters the same as their equivalents. Finally, <pre><code> normalize </code></pre> rearranges accents into the proper canonical order, so that you do not have to worry about accent rearrangement on your own. <p> Form FCD, "Fast C or D", is also designed for collation. It allows to work on strings that are not necessarily normalized with an algorithm (like in collation) that works under "canonical closure", i.e., it treats precomposed characters and their decomposed equivalents the same. <p> It is not a normalization form because it does not provide for uniqueness of representation. Multiple strings may be canonically equivalent (their NFDs are identical) and may all conform to FCD without being identical themselves. <p> The form is defined such that the "raw decomposition", the recursive canonical decomposition of each character, results in a string that is canonically ordered. This means that precomposed characters are allowed for as long as their decompositions do not need canonical reordering. <p> Its advantage for a process like collation is that all NFD and most NFC texts - and many unnormalized texts - already conform to FCD and do not need to be normalized (NFD) for such a process. The FCD quick check will return YES for most strings in practice. <p> normalize(FCD) may be implemented with NFD. <p> For more details on FCD see Unicode Technical Note #5 (Canonical Equivalence in Applications): http://www.unicode.org/notes/tn5/#FCD <p> ICU collation performs either NFD or FCD normalization automatically if normalization is turned on for the collator object. Beyond collation and string search, normalized strings may be useful for string equivalence comparisons, transliteration/transcription, unique representations, etc. <p> The W3C generally recommends to exchange texts in NFC. Note also that most legacy character encodings use only precomposed forms and often do not encode any combining marks by themselves. For conversion to such character encodings the Unicode text needs to be normalized to NFC. For more usage examples, see the Unicode Standard Annex. <p> Note: The Normalizer class also provides API for iterative normalization. While the setIndex() and getIndex() refer to indices in the underlying Unicode input text, the next() and previous() methods iterate through characters in the normalized output. This means that there is not necessarily a one-to-one correspondence between characters returned by next() and previous() and the indices passed to and returned from setIndex() and getIndex(). It is for this reason that Normalizer does not implement the CharacterIterator interface. </p><pre><code>public final class Normalizer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/Normalizer.html
Normalizer.QuickCheckResult	A										<section class="prog__container"><p> Result values for quickCheck(). For details see Unicode Technical Report 15.</p><pre><code>public static final class Normalizer.QuickCheckResult\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/Normalizer.QuickCheckResult.html
Normalizer2	A										<section class="prog__container"><p> Unicode normalization functionality for standard Unicode normalization or for using custom mapping tables. All instances of this class are unmodifiable/immutable. The Normalizer2 class is not intended for public subclassing. <p> The primary functions are to produce a normalized string and to detect whether a string is already normalized. The most commonly used normalization forms are those defined in http://www.unicode.org/unicode/reports/tr15/ However, this API supports additional normalization forms for specialized purposes. For example, NFKC_Casefold is provided via getInstance("nfkc_cf", COMPOSE) and can be used in implementations of UTS #46. <p> Not only are the standard compose and decompose modes supplied, but additional modes are provided as documented in the Mode enum. <p> Some of the functions in this class identify normalization boundaries. At a normalization boundary, the portions of the string before it and starting from it do not interact and can be handled independently. <p> The spanQuickCheckYes() stops at a normalization boundary. When the goal is a normalized string, then the text before the boundary can be copied, and the remainder can be processed with normalizeSecondAndAppend(). <p> The hasBoundaryBefore(), hasBoundaryAfter() and isInert() functions test whether a character is guaranteed to be at a normalization boundary, regardless of context. This is used for moving from one normalization boundary to the next or preceding boundary, and for performing iterative normalization. <p> Iterative normalization is useful when only a small portion of a longer string needs to be processed. For example, in ICU, iterative normalization is used by the NormalizationTransliterator (to avoid replacing already-normalized text) and ucol_nextSortKeyPart() (to process only the substring for which sort key bytes are computed). <p> The set of normalization boundaries returned by these functions may not be complete: There may be more boundaries that could be returned. Different functions may return different boundaries. </p><pre><code>public abstract class Normalizer2\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/Normalizer2.html
Normalizer2.Mode	A										<section class="prog__container"><p> Constants for normalization modes. For details about standard Unicode normalization forms and about the algorithms which are also used with custom mapping tables see http://www.unicode.org/unicode/reports/tr15/</p><pre><code>public static final enum Normalizer2.Mode\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/Normalizer2.Mode.html
NumberFormat.Field	A										<section class="prog__container"><pre><code>public static class NumberFormat.Field\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/NumberFormat.Field.html
NumberFormat	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> NumberFormat </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <pre><code> NumberFormat </code></pre> is the abstract base class for all number formats. This class provides the interface for formatting and parsing numbers. <pre><code> NumberFormat </code></pre> also provides methods for determining which locales have number formats, and what their names are. <pre><code> NumberFormat </code></pre> helps you to format and parse numbers for any locale. Your code can be completely independent of the locale conventions for decimal points, thousands-separators, or even the particular decimal digits used, or whether the number format is even decimal. <p> To format a number for the current Locale, use one of the factory class methods: <blockquote> <pre> myString = NumberFormat.getInstance().format(myNumber); </pre> </blockquote> If you are formatting multiple numbers, it is more efficient to get the format and use it multiple times so that the system doesn't have to fetch the information about the local language and country conventions multiple times. <blockquote> <pre> NumberFormat nf = NumberFormat.getInstance(); for (int i = 0; i &lt; a.length; ++i) { output.println(nf.format(myNumber[i]) + "; "); } </pre> </blockquote> To format a number for a different Locale, specify it in the call to <pre><code> getInstance </code></pre> . <blockquote> <pre> NumberFormat nf = NumberFormat.getInstance(Locale.FRENCH); </pre> </blockquote> You can also use a <pre><code> NumberFormat </code></pre> to parse numbers: <blockquote> <pre> myNumber = nf.parse(myString); </pre> </blockquote> Use <pre><code> getInstance </code></pre> or <pre><code> getNumberInstance </code></pre> to get the normal number format. Use <pre><code> getIntegerInstance </code></pre> to get an integer number format. Use <pre><code> getCurrencyInstance </code></pre> to get the currency number format. And use <pre><code> getPercentInstance </code></pre> to get a format for displaying percentages. Some factory methods are found within subclasses of NumberFormat. With this format, a fraction like 0.53 is displayed as 53%. <p> Starting from ICU 4.2, you can use getInstance() by passing in a 'style' as parameter to get the correct instance. For example, use getInstance(...NUMBERSTYLE) to get the normal number format, getInstance(...PERCENTSTYLE) to get a format for displaying percentage, getInstance(...SCIENTIFICSTYLE) to get a format for displaying scientific number, getInstance(...INTEGERSTYLE) to get an integer number format, getInstance(...CURRENCYSTYLE) to get the currency number format, in which the currency is represented by its symbol, for example, "$3.00". getInstance(...ISOCURRENCYSTYLE) to get the currency number format, in which the currency is represented by its ISO code, for example "USD3.00". getInstance(...PLURALCURRENCYSTYLE) to get the currency number format, in which the currency is represented by its full name in plural format, for example, "3.00 US dollars" or "1.00 US dollar". <p> You can also control the display of numbers with such methods as <pre><code> setMinimumFractionDigits </code></pre> . If you want even more control over the format or parsing, or want to give your users more control, you can try casting the <pre><code> NumberFormat </code></pre> you get from the factory methods to a <pre><code> DecimalFormat </code></pre> . This will work for the vast majority of locales; just remember to put it in a <pre><code> try </code></pre> block in case you encounter an unusual one. <p> NumberFormat is designed such that some controls work for formatting and others work for parsing. The following is the detailed description for each these control methods, <p> setParseIntegerOnly : only affects parsing, e.g. if true, "3456.78" -&gt; 3456 (and leaves the parse position just after '6') if false, "3456.78" -&gt; 3456.78 (and leaves the parse position just after '8') This is independent of formatting. If you want to not show a decimal point where there might be no digits after the decimal point, use setDecimalSeparatorAlwaysShown on DecimalFormat. <p> You can also use forms of the <pre><code> parse </code></pre> and <pre><code> format </code></pre> methods with <pre><code> ParsePosition </code></pre> and <pre><code> FieldPosition </code></pre> to allow you to: <ul> <li> progressively parse through pieces of a string <li> align the decimal point and other areas </li> </li> </ul> For example, you can align numbers in two ways: <ol> <li> If you are using a monospaced font with spacing for alignment, you can pass the <pre><code> FieldPosition </code></pre> in your format call, with <pre><code> field </code></pre> = <pre><code> INTEGER_FIELD </code></pre> . On output, <pre><code> getEndIndex </code></pre> will be set to the offset between the last character of the integer and the decimal. Add (desiredSpaceCount - getEndIndex) spaces at the front of the string. <li> If you are using proportional fonts, instead of padding with spaces, measure the width of the string in pixels from the start to <pre><code> getEndIndex </code></pre> . Then move the pen by (desiredPixelWidth - widthToAlignmentPoint) before drawing the text. It also works where there is no decimal, but possibly additional characters at the end, e.g., with parentheses in negative numbers: "(12)" for -12. </li> </li> </ol> </p><pre><code>public abstract class NumberFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/NumberFormat.html
NumberingSystem	A										<section class="prog__container"><p> <pre><code> NumberingSystem </code></pre> is the base class for all number systems. This class provides the interface for setting different numbering system types, whether it be a simple alternate digit system such as Thai digits or Devanagari digits, or an algorithmic numbering system such as Hebrew numbering or Chinese numbering.</p><pre><code>public class NumberingSystem\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/NumberingSystem.html
android.icu.text	A										<section class="prog__container">Defines rules for mapping non-negative numeric values onto a small set of keywords. </section>	https://developer.android.com/reference/android/icu/text/package-summary.html
PluralFormat	A										<section class="prog__container"><p> <pre><code> PluralFormat </code></pre> supports the creation of internationalized messages with plural inflection. It is based on <i> plural selection </i> , i.e. the caller specifies messages for each plural case that can appear in the user's language and the <pre><code> PluralFormat </code></pre> selects the appropriate message based on the number. </p><pre><code>public class PluralFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/PluralFormat.html
PluralRules	A										<section class="prog__container"><p> <p> Defines rules for mapping non-negative numeric values onto a small set of keywords. </p><pre><code>public class PluralRules\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/PluralRules.html
PluralRules.PluralType	A										<section class="prog__container"><p> Type of plurals and PluralRules.</p><pre><code>public static final enum PluralRules.PluralType\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/PluralRules.PluralType.html
RelativeDateTimeFormatter.AbsoluteUnit	A										<section class="prog__container"><p> Represents an absolute unit.</p><pre><code>public static final enum RelativeDateTimeFormatter.AbsoluteUnit\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html
RelativeDateTimeFormatter.Direction	A										<section class="prog__container"><p> Represents a direction for an absolute unit e.g "Next Tuesday" or "Last Tuesday"</p><pre><code>public static final enum RelativeDateTimeFormatter.Direction\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.Direction.html
RelativeDateTimeFormatter	A										<section class="prog__container"><p> Formats simple relative dates. There are two types of relative dates that it handles: <ul> <li> relative dates with a quantity e.g "in 5 days" </li> <li> relative dates without a quantity e.g "next Tuesday" </li> </ul> <p> This API is very basic and is intended to be a building block for more fancy APIs. The caller tells it exactly what to display in a locale independent way. While this class automatically provides the correct plural forms, the grammatical form is otherwise as neutral as possible. It is the caller's responsibility to handle cut-off logic such as deciding between displaying "in 7 days" or "in 1 week." This API supports relative dates involving one single unit. This API does not support relative dates involving compound units. e.g "in 5 days and 4 hours" nor does it support parsing. This class is both immutable and thread-safe. <p> Here are some examples of use: <blockquote> <pre> RelativeDateTimeFormatter fmt = RelativeDateTimeFormatter.getInstance(); fmt.format(1, Direction.NEXT, RelativeUnit.DAYS); // "in 1 day" fmt.format(3, Direction.NEXT, RelativeUnit.DAYS); // "in 3 days" fmt.format(3.2, Direction.LAST, RelativeUnit.YEARS); // "3.2 years ago" fmt.format(Direction.LAST, AbsoluteUnit.SUNDAY); // "last Sunday" fmt.format(Direction.THIS, AbsoluteUnit.SUNDAY); // "this Sunday" fmt.format(Direction.NEXT, AbsoluteUnit.SUNDAY); // "next Sunday" fmt.format(Direction.PLAIN, AbsoluteUnit.SUNDAY); // "Sunday" fmt.format(Direction.LAST, AbsoluteUnit.DAY); // "yesterday" fmt.format(Direction.THIS, AbsoluteUnit.DAY); // "today" fmt.format(Direction.NEXT, AbsoluteUnit.DAY); // "tomorrow" fmt.format(Direction.PLAIN, AbsoluteUnit.NOW); // "now" </pre> </blockquote> <p> In the future, we may add more forms, such as abbreviated/short forms (3 secs ago), and relative day periods ("yesterday afternoon"), etc. </p><pre><code>public final class RelativeDateTimeFormatter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html
RelativeDateTimeFormatter.RelativeUnit	A										<section class="prog__container"><p> Represents the unit for formatting a relative date. e.g "in 5 days" or "in 3 months"</p><pre><code>public static final enum RelativeDateTimeFormatter.RelativeUnit\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeUnit.html
RelativeDateTimeFormatter.Style	A										<section class="prog__container"><p> The formatting style</p><pre><code>public static final enum RelativeDateTimeFormatter.Style\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.Style.html
Replaceable	A										<section class="prog__container"><p> <pre><code> Replaceable </code></pre> is an interface representing a string of characters that supports the replacement of a range of itself with a new string of characters. It is used by APIs that change a piece of text while retaining metadata. Metadata is data other than the Unicode characters returned by char32At(). One example of metadata is style attributes; another is an edit history, marking each character with an author and revision number. <p> An implicit aspect of the <pre><code> Replaceable </code></pre> API is that during a replace operation, new characters take on the metadata of the old characters. For example, if the string "the <b> bold </b> font" has range (4, 8) replaced with "strong", then it becomes "the <b> strong </b> font". <p> <pre><code> Replaceable </code></pre> specifies ranges using a start offset and a limit offset. The range of characters thus specified includes the characters at offset start..limit-1. That is, the start offset is inclusive, and the limit offset is exclusive. <p> <pre><code> Replaceable </code></pre> also includes API to access characters in the string: <pre><code> length() </code></pre> , <pre><code> charAt() </code></pre> , <pre><code> char32At() </code></pre> , and <pre><code> extractBetween() </code></pre> . <p> For a subclass to support metadata, typical behavior of <pre><code> replace() </code></pre> is the following: <ul> <li> Set the metadata of the new text to the metadata of the first character replaced </li> <li> If no characters are replaced, use the metadata of the previous character </li> <li> If there is no previous character (i.e. start == 0), use the following character </li> <li> If there is no following character (i.e. the replaceable was empty), use default metadata <br> <li> If the code point U+FFFF is seen, it should be interpreted as a special marker having no metadata <li> </li> </li> </br> </li> </ul> If this is not the behavior, the subclass should document any differences. <p> Copyright © IBM Corporation 1999. All rights reserved. </p><pre><code>public interface Replaceable\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/Replaceable.html
RuleBasedCollator	A										<section class="prog__container"><p> <p> RuleBasedCollator is a concrete subclass of Collator. It allows customization of the Collator via user-specified rule sets. RuleBasedCollator is designed to be fully compliant to the Unicode Collation Algorithm (UCA) and conforms to ISO 14651. <p> A Collator is thread-safe only when frozen. See { <pre><code> isFrozen() </code></pre> and <pre><code> Freezable </code></pre> . <p> Users are strongly encouraged to read the User Guide for more information about the collation service before using this class. <p> Create a RuleBasedCollator from a locale by calling the getInstance(Locale) factory method in the base class Collator. Collator.getInstance(Locale) creates a RuleBasedCollator object based on the collation rules defined by the argument locale. If a customized collation ordering or attributes is required, use the RuleBasedCollator(String) constructor with the appropriate rules. The customized RuleBasedCollator will base its ordering on the CLDR root collation, while re-adjusting the attributes and orders of the characters in the specified rule accordingly. <p> RuleBasedCollator provides correct collation orders for most locales supported in ICU. If specific data for a locale is not available, the orders eventually falls back to the CLDR root sort order . <p> For information about the collation rule syntax and details about customization, please refer to the Collation customization section of the User Guide. <p> <strong> Note </strong> that there are some differences between the Collation rule syntax used in Java and ICU4J: <ul> <li> According to the JDK documentation: <br> <i> Modifier '!' : Turns on Thai/Lao vowel-consonant swapping. If this rule is in force when a Thai vowel of the range \U0E40-\U0E44 precedes a Thai consonant of the range \U0E01-\U0E2E OR a Lao vowel of the range \U0EC0-\U0EC4 precedes a Lao consonant of the range \U0E81-\U0EAE then the vowel is placed after the consonant for collation purposes. <br> If a rule is without the modifier '!', the Thai/Lao vowel-consonant swapping is not turned on. </br> </i> <br> ICU4J's RuleBasedCollator does not support turning off the Thai/Lao vowel-consonant swapping, since the UCA clearly states that it has to be supported to ensure a correct sorting order. If a '!' is encountered, it is ignored. </br> </br> </li> <li> As mentioned in the documentation of the base class Collator, compatibility decomposition mode is not supported. </li> </ul> <p> <strong> Examples </strong> <p> Creating Customized RuleBasedCollators: <blockquote> <pre> String simple = "&amp; a &lt; b &lt; c &lt; d"; RuleBasedCollator simpleCollator = new RuleBasedCollator(simple); String norwegian = "&amp; a , A &lt; b , B &lt; c , C &lt; d , D &lt; e , E " + "&lt; f , F &lt; g , G &lt; h , H &lt; i , I &lt; j , " + "J &lt; k , K &lt; l , L &lt; m , M &lt; n , N &lt; " + "o , O &lt; p , P &lt; q , Q &lt;r , R &lt;s , S &lt; " + "t , T &lt; u , U &lt; v , V &lt; w , W &lt; x , X " + "&lt; y , Y &lt; z , Z &lt; \u00E5 = a\u030A " + ", \u00C5 = A\u030A ; aa , AA &lt; \u00E6 " + ", \u00C6 &lt; \u00F8 , \u00D8"; RuleBasedCollator norwegianCollator = new RuleBasedCollator(norwegian); </pre> </blockquote> Concatenating rules to combine <pre><code> Collator </code></pre> s: <blockquote> <pre> // Create an en_US Collator object RuleBasedCollator en_USCollator = (RuleBasedCollator) Collator.getInstance(new Locale("en", "US", "")); // Create a da_DK Collator object RuleBasedCollator da_DKCollator = (RuleBasedCollator) Collator.getInstance(new Locale("da", "DK", "")); // Combine the two // First, get the collation rules from en_USCollator String en_USRules = en_USCollator.getRules(); // Second, get the collation rules from da_DKCollator String da_DKRules = da_DKCollator.getRules(); RuleBasedCollator newCollator = new RuleBasedCollator(en_USRules + da_DKRules); // newCollator has the combined rules </pre> </blockquote> Making changes to an existing RuleBasedCollator to create a new <pre><code> Collator </code></pre> object, by appending changes to the existing rule: <blockquote> <pre> // Create a new Collator object with additional rules String addRules = "&amp; C &lt; ch, cH, Ch, CH"; RuleBasedCollator myCollator = new RuleBasedCollator(en_USCollator.getRules() + addRules); // myCollator contains the new rules </pre> </blockquote> How to change the order of non-spacing accents: <blockquote> <pre> // old rule with main accents String oldRules = "= \u0301 ; \u0300 ; \u0302 ; \u0308 " + "; \u0327 ; \u0303 ; \u0304 ; \u0305 " + "; \u0306 ; \u0307 ; \u0309 ; \u030A " + "; \u030B ; \u030C ; \u030D ; \u030E " + "; \u030F ; \u0310 ; \u0311 ; \u0312 " + "&lt; a , A ; ae, AE ; \u00e6 , \u00c6 " + "&lt; b , B &lt; c, C &lt; e, E &amp; C &lt; d , D"; // change the order of accent characters String addOn = "&amp; \u0300 ; \u0308 ; \u0302"; RuleBasedCollator myCollator = new RuleBasedCollator(oldRules + addOn); </pre> </blockquote> Putting in a new primary ordering before the default setting, e.g. sort English characters before or after Japanese characters in the Japanese <pre><code> Collator </code></pre> : <blockquote> <pre> // get en_US Collator rules RuleBasedCollator en_USCollator = (RuleBasedCollator)Collator.getInstance(Locale.US); // add a few Japanese characters to sort before English characters // suppose the last character before the first base letter 'a' in // the English collation rule is \u2212 String jaString = "&amp; \u2212 &lt;\u3041, \u3042 &lt;\u3043, " + "\u3044"; RuleBasedCollator myJapaneseCollator = new RuleBasedCollator(en_USCollator.getRules() + jaString); </pre> </blockquote> <p> This class is not subclassable </p><pre><code>public final class RuleBasedCollator\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html
SearchIterator.ElementComparisonType	A										<section class="prog__container"><p> Option to control how collation elements are compared. The default value will be <pre><code> STANDARD_ELEMENT_COMPARISON </code></pre> . <p> PATTERN_BASE_WEIGHT_IS_WILDCARD supports "asymmetric search" as described in UTS #10 Unicode Collation Algorithm , while ANY_BASE_WEIGHT_IS_WILDCARD supports a related option in which "unmarked" characters in either the pattern or the searched text are treated as wildcards that match marked or unmarked versions of the same character. </p><pre><code>public static final enum SearchIterator.ElementComparisonType\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/SearchIterator.ElementComparisonType.html
SearchIterator	A										<section class="prog__container"><p> <tt> SearchIterator </tt> is an abstract base class that provides methods to search for a pattern within a text string. Instances of <tt> SearchIterator </tt> maintain a current position and scan over the target text, returning the indices the pattern is matched and the length of each match. <p> <tt> SearchIterator </tt> defines a protocol for text searching. Subclasses provide concrete implementations of various search algorithms. For example, <tt> StringSearch </tt> implements language-sensitive pattern matching based on the comparison rules defined in a <tt> RuleBasedCollator </tt> object. <p> Other options for searching include using a BreakIterator to restrict the points at which matches are detected. <p> <tt> SearchIterator </tt> provides an API that is similar to that of other text iteration classes such as <tt> BreakIterator </tt> . Using this class, it is easy to scan through text looking for all occurrences of a given pattern. The following example uses a <tt> StringSearch </tt> object to find all instances of "fox" in the target string. Any other subclass of <tt> SearchIterator </tt> can be used in an identical manner. <pre><pre><code> String target = "The quick brown fox jumped over the lazy fox"; String pattern = "fox"; SearchIterator iter = new StringSearch(pattern, target); for (int pos = iter.first(); pos != SearchIterator.DONE; pos = iter.next()) { System.out.println("Found match at " + pos + ", length is " + iter.getMatchLength()); } </code></pre></pre> </p><pre><code>public abstract class SearchIterator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/SearchIterator.html
SelectFormat	A										<section class="prog__container"><p> <p> <pre><code> SelectFormat </code></pre> supports the creation of internationalized messages by selecting phrases based on keywords. The pattern specifies how to map keywords to phrases and provides a default phrase. The object provided to the format method is a string that's matched against the keywords. If there is a match, the corresponding phrase is selected; otherwise, the default phrase is used. </p><pre><code>public class SelectFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/SelectFormat.html
SimpleDateFormat	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> SimpleDateFormat </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> <pre><code> SimpleDateFormat </code></pre> is a concrete class for formatting and parsing dates in a locale-sensitive manner. It allows for formatting (date -&gt; text), parsing (text -&gt; date), and normalization. <p> <pre><code> SimpleDateFormat </code></pre> allows you to start by choosing any user-defined patterns for date-time formatting. However, you are encouraged to create a date-time formatter with either <pre><code> getTimeInstance </code></pre> , <pre><code> getDateInstance </code></pre> , or <pre><code> getDateTimeInstance </code></pre> in <pre><code> DateFormat </code></pre> . Each of these class methods can return a date/time formatter initialized with a default format pattern. You may modify the format pattern using the <pre><code> applyPattern </code></pre> methods as desired. For more information on using these methods, see <pre><code> DateFormat </code></pre> . <p> <strong> Date and Time Patterns: </strong> </p><pre><code>public class SimpleDateFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/SimpleDateFormat.html
StringPrepParseException	A										<section class="prog__container"><p> Exception that signals an error has occurred while parsing the input to StringPrep or IDNA.</p><pre><code>public class StringPrepParseException\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/StringPrepParseException.html
StringSearch	A										<section class="prog__container"><p> <tt> StringSearch </tt> is a <pre><code> SearchIterator </code></pre> that provides language-sensitive text searching based on the comparison rules defined in a <pre><code> RuleBasedCollator </code></pre> object. StringSearch ensures that language eccentricity can be handled, e.g. for the German collator, characters ß and SS will be matched if case is chosen to be ignored. See the "ICU Collation Design Document" for more information. <p> There are 2 match options for selection: <br> Let S' be the sub-string of a text string S between the offsets start and end [start, end]. <br> A pattern string P matches a text string S at the offsets [start, end] if <pre> option 1. Some canonical equivalent of P matches some canonical equivalent of S' option 2. P matches S' and if P starts or ends with a combining mark, there exists no non-ignorable combining mark before or after S? in S respectively. </pre> Option 2. is the default. <p> This search has APIs similar to that of other text iteration mechanisms such as the break iterators in <pre><code> BreakIterator </code></pre> . Using these APIs, it is easy to scan through text looking for all occurrences of a given pattern. This search iterator allows changing of direction by calling a <pre><code> reset() </code></pre> followed by a <pre><code> next() </code></pre> or <pre><code> previous() </code></pre> . Though a direction change can occur without calling <pre><code> reset() </code></pre> first, this operation comes with some speed penalty. Match results in the forward direction will match the result matches in the backwards direction in the reverse order <p> <pre><code> SearchIterator </code></pre> provides APIs to specify the starting position within the text string to be searched, e.g. <pre><code> setIndex </code></pre> , <pre><code> preceding </code></pre> and <pre><code> following </code></pre> . Since the starting position will be set as it is specified, please take note that there are some danger points at which the search may render incorrect results: <ul> <li> In the midst of a substring that requires normalization. <li> If the following match is to be found, the position should not be the second character which requires swapping with the preceding character. Vice versa, if the preceding match is to be found, the position to search from should not be the first character which requires swapping with the next character. E.g certain Thai and Lao characters require swapping. <li> If a following pattern match is to be found, any position within a contracting sequence except the first will fail. Vice versa if a preceding pattern match is to be found, an invalid starting point would be any character within a contracting sequence except the last. </li> </li> </li> </ul> <p> A <pre><code> BreakIterator </code></pre> can be used if only matches at logical breaks are desired. Using a <pre><code> BreakIterator </code></pre> will only give you results that exactly matches the boundaries given by the <pre><code> BreakIterator </code></pre> . For instance the pattern "e" will not be found in the string "é" if a character break iterator is used. <p> Options are provided to handle overlapping matches. E.g. In English, overlapping matches produces the result 0 and 2 for the pattern "abab" in the text "ababab", where mutually exclusive matches only produces the result of 0. <p> Options are also provided to implement "asymmetric search" as described in UTS #10 Unicode Collation Algorithm , specifically the ElementComparisonType values. <p> Though collator attributes will be taken into consideration while performing matches, there are no APIs here for setting and getting the attributes. These attributes can be set by getting the collator from <pre><code> getCollator() </code></pre> and using the APIs in <pre><code> RuleBasedCollator </code></pre> . Lastly to update <tt> StringSearch </tt> to the new collator attributes, <pre><code> reset() </code></pre> has to be called. <p> Restriction: <br> Currently there are no composite characters that consists of a character with combining class &gt; 0 before a character with combining class == 0. However, if such a character exists in the future, <tt> StringSearch </tt> does not guarantee the results for option 1. <p> Consult the <pre><code> SearchIterator </code></pre> documentation for information on and examples of how to use instances of this class to implement text searching. <p> Note, <tt> StringSearch </tt> is not to be subclassed. </p><pre><code>public final class StringSearch\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/StringSearch.html
SymbolTable	A										<section class="prog__container"><p> An interface that defines both lookup protocol and parsing of symbolic names. <p> This interface is used by UnicodeSet to resolve $Variable style references that appear in set patterns. RBBI and Transliteration both independently implement this interface. <p> A symbol table maintains two kinds of mappings. The first is between symbolic names and their values. For example, if the variable with the name "start" is set to the value "alpha" (perhaps, though not necessarily, through an expression such as "$start=alpha"), then the call lookup("start") will return the char[] array ['a', 'l', 'p', 'h', 'a']. <p> The second kind of mapping is between character values and UnicodeMatcher objects. This is used by RuleBasedTransliterator, which uses characters in the private use area to represent objects such as UnicodeSets. If U+E015 is mapped to the UnicodeSet [a-z], then lookupMatcher(0xE015) will return the UnicodeSet [a-z]. <p> Finally, a symbol table defines parsing behavior for symbolic names. All symbolic names start with the SYMBOL_REF character. When a parser encounters this character, it calls parseReference() with the position immediately following the SYMBOL_REF. The symbol table parses the name, if there is one, and returns it. </p><pre><code>public interface SymbolTable\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/SymbolTable.html
TimeZoneFormat.GMTOffsetPatternType	A										<section class="prog__container"><p> Offset pattern type enum.</p><pre><code>public static final enum TimeZoneFormat.GMTOffsetPatternType\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/TimeZoneFormat.GMTOffsetPatternType.html
TimeZoneFormat	A										<section class="prog__container"><p> <pre><code> TimeZoneFormat </code></pre> supports time zone display name formatting and parsing. An instance of TimeZoneFormat works as a subformatter of <pre><code> SimpleDateFormat </code></pre> , but you can also directly get a new instance of <pre><code> TimeZoneFormat </code></pre> and formatting/parsing time zone display names. <p> ICU implements the time zone display names defined by UTS#35 Unicode Locale Data Markup Language (LDML) . <pre><code> TimeZoneNames </code></pre> represents the time zone display name data model and this class implements the algorithm for actual formatting and parsing. </p><pre><code>public class TimeZoneFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/TimeZoneFormat.html
TimeZoneFormat.ParseOption	A										<section class="prog__container"><p> Parse option enum, used for specifying optional parse behavior.</p><pre><code>public static final enum TimeZoneFormat.ParseOption\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/TimeZoneFormat.ParseOption.html
TimeZoneFormat.Style	A										<section class="prog__container"><p> Time zone display format style enum used by format/parse APIs in <pre><code> TimeZoneFormat </code></pre> .</p><pre><code>public static final enum TimeZoneFormat.Style\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/TimeZoneFormat.Style.html
TimeZoneFormat.TimeType	A										<section class="prog__container"><p> Time type enum used for receiving time type (standard time, daylight time or unknown) in <pre><code> TimeZoneFormat </code></pre> APIs.</p><pre><code>public static final enum TimeZoneFormat.TimeType\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/TimeZoneFormat.TimeType.html
TimeZoneNames	A										<section class="prog__container"><p> <pre><code> TimeZoneNames </code></pre> is an abstract class representing the time zone display name data model defined by UTS#35 Unicode Locale Data Markup Language (LDML) . The model defines meta zone, which is used for storing a set of display names. A meta zone can be shared by multiple time zones. Also a time zone may have multiple meta zone historic mappings. <p> For example, people in the United States refer the zone used by the east part of North America as "Eastern Time". The tz database contains multiple time zones "America/New_York", "America/Detroit", "America/Montreal" and some others that belong to "Eastern Time". However, assigning different display names to these time zones does not make much sense for most of people. <p> In CLDR (which uses LDML for representing locale data), the display name "Eastern Time" is stored as long generic display name of a meta zone identified by the ID "America_Eastern". Then, there is another table maintaining the historic mapping to meta zones for each time zone. The time zones in the above example ("America/New_York", "America/Detroit"...) are mapped to the meta zone "America_Eastern". <p> Sometimes, a time zone is mapped to a different time zone in the past. For example, "America/Indiana/Knox" had been moving "Eastern Time" and "Central Time" back and forth. Therefore, it is necessary that time zone to meta zones mapping data are stored by date range. <p> <b> Note: </b> <p> <pre><code> TimeZoneFormat </code></pre> assumes an instance of <pre><code> TimeZoneNames </code></pre> is immutable. If you want to provide your own <pre><code> TimeZoneNames </code></pre> implementation and use it with <pre><code> TimeZoneFormat </code></pre> , you must follow the contract. <p> The methods in this class assume that time zone IDs are already canonicalized. For example, you may not get proper result returned by a method with time zone ID "America/Indiana/Indianapolis", because it's not a canonical time zone ID (the canonical time zone ID for the time zone is "America/Indianapolis". See <pre><code> getCanonicalID(String) </code></pre> about ICU canonical time zone IDs. <p> In CLDR, most of time zone display names except location names are provided through meta zones. But a time zone may have a specific name that is not shared with other time zones. For example, time zone "Europe/London" has English long name for standard time "Greenwich Mean Time", which is also shared with other time zones. However, the long name for daylight saving time is "British Summer Time", which is only used for "Europe/London". <p> <pre><code> getTimeZoneDisplayName(String, NameType) </code></pre> is designed for accessing a name only used by a single time zone. But is not necessarily mean that a subclass implementation use the same model with CLDR. A subclass implementation may provide time zone names only through <pre><code> getTimeZoneDisplayName(String, NameType) </code></pre> , or only through <pre><code> getMetaZoneDisplayName(String, NameType) </code></pre> , or both. <p> The default <pre><code> TimeZoneNames </code></pre> implementation returned by <pre><code> getInstance(ULocale) </code></pre> uses the locale data imported from CLDR. In CLDR, set of meta zone IDs and mappings between zone IDs and meta zone IDs are shared by all locales. Therefore, the behavior of <pre><code> getAvailableMetaZoneIDs() </code></pre> , <pre><code> getAvailableMetaZoneIDs(String) </code></pre> , <pre><code> getMetaZoneID(String, long) </code></pre> , and <pre><code> getReferenceZoneID(String, String) </code></pre> won't be changed no matter what locale is used for getting an instance of <pre><code> TimeZoneNames </code></pre> . </p><pre><code>public abstract class TimeZoneNames\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/TimeZoneNames.html
TimeZoneNames.NameType	A										<section class="prog__container"><p> Time zone display name types</p><pre><code>public static final enum TimeZoneNames.NameType\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/TimeZoneNames.NameType.html
UCharacterIterator	A										<section class="prog__container"><p> Abstract class that defines an API for iteration on text objects.This is an interface for forward and backward iteration and random access into a text object. Forward iteration is done with post-increment and backward iteration is done with pre-decrement semantics, while the <pre><code> java.text.CharacterIterator </code></pre> interface methods provided forward iteration with "pre-increment" and backward iteration with pre-decrement semantics. This API is more efficient for forward iteration over code points. The other major difference is that this API can do both code unit and code point iteration, <pre><code> java.text.CharacterIterator </code></pre> can only iterate over code units and is limited to BMP (0 - 0xFFFF)</p><pre><code>public abstract class UCharacterIterator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/UCharacterIterator.html
UFormat	A										<section class="prog__container"><p> An abstract class that extends <pre><code> Format </code></pre> to provide additional ICU protocol, specifically, the <tt> getLocale() </tt> API. All ICU format classes are subclasses of this class.</p><pre><code>public abstract class UFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/UFormat.html
UnicodeFilter	A										<section class="prog__container"><p> <pre><code> UnicodeFilter </code></pre> defines a protocol for selecting a subset of the full range (U+0000 to U+FFFF) of Unicode characters.</p><pre><code>public abstract class UnicodeFilter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeFilter.html
UnicodeMatcher	A										<section class="prog__container"><p> <pre><code> UnicodeMatcher </code></pre> defines a protocol for objects that can match a range of characters in a Replaceable string.</p><pre><code>public interface UnicodeMatcher\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeMatcher.html
UnicodeSet.ComparisonStyle	A										<section class="prog__container"><p> Comparison style enums used by <pre><code> compareTo(UnicodeSet, ComparisonStyle) </code></pre> .</p><pre><code>public static final enum UnicodeSet.ComparisonStyle\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeSet.ComparisonStyle.html
UnicodeSet.EntryRange	A										<section class="prog__container"><p> A struct-like class used for iteration through ranges, for faster iteration than by String. Read about the restrictions on usage in <pre><code> ranges() </code></pre> .</p><pre><code>public static class UnicodeSet.EntryRange\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeSet.EntryRange.html
UnicodeSet	A										<section class="prog__container"><p> A mutable set of Unicode characters and multicharacter strings. Objects of this class represent <em> character classes </em> used in regular expressions. A character specifies a subset of Unicode code points. Legal code points are U+0000 to U+10FFFF, inclusive. Note: method freeze() will not only make the set immutable, but also makes important methods much higher performance: contains(c), containsNone(...), span(...), spanBack(...) etc. After the object is frozen, any subsequent call that wants to change the object will throw UnsupportedOperationException. <p> The UnicodeSet class is not designed to be subclassed. <p> <pre><code> UnicodeSet </code></pre> supports two APIs. The first is the <em> operand </em> API that allows the caller to modify the value of a <pre><code> UnicodeSet </code></pre> object. It conforms to Java 2's <pre><code> java.util.Set </code></pre> interface, although <pre><code> UnicodeSet </code></pre> does not actually implement that interface. All methods of <pre><code> Set </code></pre> are supported, with the modification that they take a character range or single character instead of an <pre><code> Object </code></pre> , and they take a <pre><code> UnicodeSet </code></pre> instead of a <pre><code> Collection </code></pre> . The operand API may be thought of in terms of boolean logic: a boolean OR is implemented by <pre><code> add </code></pre> , a boolean AND is implemented by <pre><code> retain </code></pre> , a boolean XOR is implemented by <pre><code> complement </code></pre> taking an argument, and a boolean NOT is implemented by <pre><code> complement </code></pre> with no argument. In terms of traditional set theory function names, <pre><code> add </code></pre> is a union, <pre><code> retain </code></pre> is an intersection, <pre><code> remove </code></pre> is an asymmetric difference, and <pre><code> complement </code></pre> with no argument is a set complement with respect to the superset range <pre><code> MIN_VALUE-MAX_VALUE </code></pre> <p> The second API is the <pre><code> applyPattern() </code></pre> / <pre><code> toPattern() </code></pre> API from the <pre><code> java.text.Format </code></pre> -derived classes. Unlike the methods that add characters, add categories, and control the logic of the set, the method <pre><code> applyPattern() </code></pre> sets all attributes of a <pre><code> UnicodeSet </code></pre> at once, based on a string pattern. <p> <b> Pattern syntax </b> </p><pre><code>public class UnicodeSet\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeSet.html
UnicodeSet.SpanCondition	A										<section class="prog__container"><p> Argument values for whether span() and similar functions continue while the current character is contained vs. not contained in the set. <p> The functionality is straightforward for sets with only single code points, without strings (which is the common case): <ul> <li> CONTAINED and SIMPLE work the same. <li> CONTAINED and SIMPLE are inverses of NOT_CONTAINED. <li> span() and spanBack() partition any string the same way when alternating between span(NOT_CONTAINED) and span(either "contained" condition). <li> Using a complemented (inverted) set and the opposite span conditions yields the same results. </li> </li> </li> </li> </ul> When a set contains multi-code point strings, then these statements may not be true, depending on the strings in the set (for example, whether they overlap with each other) and the string that is processed. For a set with strings: <ul> <li> The complement of the set contains the opposite set of code points, but the same set of strings. Therefore, complementing both the set and the span conditions may yield different results. <li> When starting spans at different positions in a string (span(s, ...) vs. span(s+1, ...)) the ends of the spans may be different because a set string may start before the later position. <li> span(SIMPLE) may be shorter than span(CONTAINED) because it will not recursively try all possible paths. For example, with a set which contains the three strings "xy", "xya" and "ax", span("xyax", CONTAINED) will return 4 but span("xyax", SIMPLE) will return 3. span(SIMPLE) will never be longer than span(CONTAINED). <li> With either "contained" condition, span() and spanBack() may partition a string in different ways. For example, with a set which contains the two strings "ab" and "ba", and when processing the string "aba", span() will yield contained/not-contained boundaries of { 0, 2, 3 } while spanBack() will yield boundaries of { 0, 1, 3 }. </li> </li> </li> </li> </ul> Note: If it is important to get the same boundaries whether iterating forward or backward through a string, then either only span() should be used and the boundaries cached for backward operation, or an ICU BreakIterator could be used. <p> Note: Unpaired surrogates are treated like surrogate code points. Similarly, set strings match only on code point boundaries, never in the middle of a surrogate pair. </p><pre><code>public static final enum UnicodeSet.SpanCondition\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeSet.SpanCondition.html
UnicodeSetIterator	A										<section class="prog__container"><p> UnicodeSetIterator iterates over the contents of a UnicodeSet. It iterates over either code points or code point ranges. After all code points or ranges have been returned, it returns the multicharacter strings of the UnicodSet, if any. <p> To iterate over code points and multicharacter strings, use a loop like this: <pre> for (UnicodeSetIterator it = new UnicodeSetIterator(set); it.next();) { processString(it.getString()); } </pre> <p> To iterate over code point ranges, use a loop like this: <pre> for (UnicodeSetIterator it = new UnicodeSetIterator(set); it.nextRange();) { if (it.codepoint != UnicodeSetIterator.IS_STRING) { processCodepointRange(it.codepoint, it.codepointEnd); } else { processString(it.getString()); } } </pre> <p> <b> Warning: </b> For speed, UnicodeSet iteration does not check for concurrent modification. Do not alter the UnicodeSet while iterating. </p><pre><code>public class UnicodeSetIterator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeSetIterator.html
UnicodeSetSpanner.CountMethod	A										<section class="prog__container"><p> Options for replaceFrom and countIn to control how to treat each matched span. It is similar to whether one is replacing [abc] by x, or [abc]* by x.</p><pre><code>public static final enum UnicodeSetSpanner.CountMethod\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeSetSpanner.CountMethod.html
UnicodeSetSpanner	A										<section class="prog__container"><p> A helper class used to count, replace, and trim CharSequences based on UnicodeSet matches. An instance is immutable (and thus thread-safe) iff the source UnicodeSet is frozen. <p> <b> Note: </b> The counting, deletion, and replacement depend on alternating a <pre><code> UnicodeSet.SpanCondition </code></pre> with its inverse. That is, the code spans, then spans for the inverse, then spans, and so on. For the inverse, the following mapping is used: <ul> <li> <pre><code> SIMPLE </code></pre> → <pre><code> NOT_CONTAINED </code></pre> </li> <li> <pre><code> CONTAINED </code></pre> → <pre><code> NOT_CONTAINED </code></pre> </li> <li> <pre><code> NOT_CONTAINED </code></pre> → <pre><code> SIMPLE </code></pre> </li> </ul> These are actually not complete inverses. However, the alternating works because there are no gaps. For example, with [a{ab}{bc}], you get the following behavior when scanning forward: <table border="1"> <tr> <th> SIMPLE </th> <td> xxx[ab]cyyy </td> </tr> <tr> <th> CONTAINED </th> <td> xxx[abc]yyy </td> </tr> <tr> <th> NOT_CONTAINED </th> <td> [xxx]ab[cyyy] </td> </tr> </table> <p> So here is what happens when you alternate: <table border="1"> <tr> <th> start </th> <td> |xxxabcyyy </td> </tr> <tr> <th> NOT_CONTAINED </th> <td> xxx|abcyyy </td> </tr> <tr> <th> CONTAINED </th> <td> xxxabc|yyy </td> </tr> <tr> <th> NOT_CONTAINED </th> <td> xxxabcyyy| </td> </tr> </table> <p> The entire string is traversed. </p><pre><code>public class UnicodeSetSpanner\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeSetSpanner.html
UnicodeSetSpanner.TrimOption	A										<section class="prog__container"><p> Options for the trim() method</p><pre><code>public static final enum UnicodeSetSpanner.TrimOption\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeSetSpanner.TrimOption.html
BuddhistCalendar	A										<section class="prog__container"><p> <pre><code> BuddhistCalendar </code></pre> is a subclass of <pre><code> GregorianCalendar </code></pre> that numbers years since the birth of the Buddha. This is the civil calendar in some predominantly Buddhist countries such as Thailand, and it is used for religious purposes elsewhere. <p> The Buddhist calendar is identical to the Gregorian calendar in all respects except for the year and era. Years are numbered since the birth of the Buddha in 543 BC (Gregorian), so that 1 AD (Gregorian) is equivalent to 544 BE (Buddhist Era) and 1998 AD is 2541 BE. <p> The Buddhist Calendar has only one allowable era: <pre><code> BE </code></pre> . If the calendar is not in lenient mode (see <pre><code> setLenient </code></pre> ), dates before 1/1/1 BE are rejected with an <pre><code> IllegalArgumentException </code></pre> . <p> This class should not be subclassed. </p><pre><code>public class BuddhistCalendar\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/BuddhistCalendar.html
Calendar	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> Calendar </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> <pre><code> Calendar </code></pre> is an abstract base class for converting between a <pre><code> Date </code></pre> object and a set of integer fields such as <pre><code> YEAR </code></pre> , <pre><code> MONTH </code></pre> , <pre><code> DAY </code></pre> , <pre><code> HOUR </code></pre> , and so on. (A <pre><code> Date </code></pre> object represents a specific instant in time with millisecond precision. See <pre><code> Date </code></pre> for information about the <pre><code> Date </code></pre> class.) <p> Subclasses of <pre><code> Calendar </code></pre> interpret a <pre><code> Date </code></pre> according to the rules of a specific calendar system. ICU4J contains several subclasses implementing different international calendar systems. <p> Like other locale-sensitive classes, <pre><code> Calendar </code></pre> provides a class method, <pre><code> getInstance </code></pre> , for getting a generally useful object of this type. <pre><code> Calendar </code></pre> 's <pre><code> getInstance </code></pre> method returns a calendar of a type appropriate to the locale, whose time fields have been initialized with the current date and time: <blockquote> <pre>Calendar rightNow = Calendar.getInstance()</pre> </blockquote> <p> When a <pre><code> ULocale </code></pre> is used by <pre><code> getInstance </code></pre> , its ' <pre><code> calendar </code></pre> ' tag and value are retrieved if present. If a recognized value is supplied, a calendar is provided and configured as appropriate. Currently recognized tags are "buddhist", "chinese", "coptic", "ethiopic", "gregorian", "hebrew", "islamic", "islamic-civil", "japanese", and "roc". For example: <blockquote> <pre>Calendar cal = Calendar.getInstance(new ULocale("en_US@calendar=japanese"));</pre> </blockquote> will return an instance of JapaneseCalendar (using en_US conventions for minimum days in first week, start day of week, et cetera). <p> A <pre><code> Calendar </code></pre> object can produce all the time field values needed to implement the date-time formatting for a particular language and calendar style (for example, Japanese-Gregorian, Japanese-Traditional). <pre><code> Calendar </code></pre> defines the range of values returned by certain fields, as well as their meaning. For example, the first month of the year has value <pre><code> MONTH </code></pre> == <pre><code> JANUARY </code></pre> for all calendars. Other values are defined by the concrete subclass, such as <pre><code> ERA </code></pre> and <pre><code> YEAR </code></pre> . See individual field documentation and subclass documentation for details. <p> When a <pre><code> Calendar </code></pre> is <em> lenient </em> , it accepts a wider range of field values than it produces. For example, a lenient <pre><code> GregorianCalendar </code></pre> interprets <pre><code> MONTH </code></pre> == <pre><code> JANUARY </code></pre> , <pre><code> DAY_OF_MONTH </code></pre> == 32 as February 1. A non-lenient <pre><code> GregorianCalendar </code></pre> throws an exception when given out-of-range field settings. When calendars recompute field values for return by <pre><code> get() </code></pre> , they normalize them. For example, a <pre><code> GregorianCalendar </code></pre> always produces <pre><code> DAY_OF_MONTH </code></pre> values between 1 and the length of the month. <p> <pre><code> Calendar </code></pre> defines a locale-specific seven day week using two parameters: the first day of the week and the minimal days in first week (from 1 to 7). These numbers are taken from the locale resource data when a <pre><code> Calendar </code></pre> is constructed. They may also be specified explicitly through the API. <p> When setting or getting the <pre><code> WEEK_OF_MONTH </code></pre> or <pre><code> WEEK_OF_YEAR </code></pre> fields, <pre><code> Calendar </code></pre> must determine the first week of the month or year as a reference point. The first week of a month or year is defined as the earliest seven day period beginning on <pre><code> getFirstDayOfWeek() </code></pre> and containing at least <pre><code> getMinimalDaysInFirstWeek() </code></pre> days of that month or year. Weeks numbered ..., -1, 0 precede the first week; weeks numbered 2, 3,... follow it. Note that the normalized numbering returned by <pre><code> get() </code></pre> may be different. For example, a specific <pre><code> Calendar </code></pre> subclass may designate the week before week 1 of a year as week <em> n </em> of the previous year. <p> When computing a <pre><code> Date </code></pre> from time fields, some special circumstances may arise: there may be insufficient information to compute the <pre><code> Date </code></pre> (such as only year and month but no day in the month), there may be inconsistent information (such as "Tuesday, July 15, 1996" -- July 15, 1996 is actually a Monday), or the input time might be ambiguous because of time zone transition. <p> <strong> Insufficient information. </strong> The calendar will use default information to specify the missing fields. This may vary by calendar; for the Gregorian calendar, the default for a field is the same as that of the start of the epoch: i.e., YEAR = 1970, MONTH = JANUARY, DATE = 1, etc. <p> <strong> Inconsistent information. </strong> If fields conflict, the calendar will give preference to fields set more recently. For example, when determining the day, the calendar will look for one of the following combinations of fields. The most recent combination, as determined by the most recently set single field, will be used. <blockquote> <pre> MONTH + DAY_OF_MONTH MONTH + WEEK_OF_MONTH + DAY_OF_WEEK MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK DAY_OF_YEAR DAY_OF_WEEK + WEEK_OF_YEAR</pre> </blockquote> For the time of day: <blockquote> <pre> HOUR_OF_DAY AM_PM + HOUR</pre> </blockquote> <p> <strong> Ambiguous Wall Clock Time. </strong> When time offset from UTC has changed, it produces an ambiguous time slot around the transition. For example, many US locations observe daylight saving time. On the date switching to daylight saving time in US, wall clock time jumps from 12:59 AM (standard) to 2:00 AM (daylight). Therefore, wall clock time from 1:00 AM to 1:59 AM do not exist on the date. When the input wall time fall into this missing time slot, the ICU Calendar resolves the time using the UTC offset before the transition by default. In this example, 1:30 AM is interpreted as 1:30 AM standard time (non-exist), so the final result will be 2:30 AM daylight time. <p> On the date switching back to standard time, wall clock time is moved back one hour at 2:00 AM. So wall clock time from 1:00 AM to 1:59 AM occur twice. In this case, the ICU Calendar resolves the time using the UTC offset after the transition by default. For example, 1:30 AM on the date is resolved as 1:30 AM standard time. <p> Ambiguous wall clock time resolution behaviors can be customized by Calendar APIs <pre><code> setRepeatedWallTimeOption(int) </code></pre> and <pre><code> setSkippedWallTimeOption(int) </code></pre> . These methods are available in ICU 49 or later versions. <p> <strong> Note: </strong> for some non-Gregorian calendars, different fields may be necessary for complete disambiguation. For example, a full specification of the historial Arabic astronomical calendar requires year, month, day-of-month <em> and </em> day-of-week in some cases. <p> <strong> Note: </strong> There are certain possible ambiguities in interpretation of certain singular times, which are resolved in the following ways: <ol> <li> 24:00:00 "belongs" to the following day. That is, 23:59 on Dec 31, 1969 &lt; 24:00 on Jan 1, 1970 &lt; 24:01:00 on Jan 1, 1970 <li> Although historically not precise, midnight also belongs to "am", and noon belongs to "pm", so on the same day, 12:00 am (midnight) &lt; 12:01 am, and 12:00 pm (noon) &lt; 12:01 pm </li> </li> </ol> <p> The date or time format strings are not part of the definition of a calendar, as those must be modifiable or overridable by the user at runtime. Use <pre><code> DateFormat </code></pre> to format dates. <p> <strong> Field manipulation methods </strong> </p><pre><code>public abstract class Calendar\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/util/Calendar.html
Calendar.WeekData	A										<section class="prog__container"><p> Simple, immutable struct-like class for access to the CLDR weekend data.</p><pre><code>public static final class Calendar.WeekData\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/util/Calendar.WeekData.html
ChineseCalendar	A										<section class="prog__container"><p> <pre><code> ChineseCalendar </code></pre> is a concrete subclass of <pre><code> Calendar </code></pre> that implements a traditional Chinese calendar. The traditional Chinese calendar is a lunisolar calendar: Each month starts on a new moon, and the months are numbered according to solar events, specifically, to guarantee that month 11 always contains the winter solstice. In order to accomplish this, leap months are inserted in certain years. Leap months are numbered the same as the month they follow. The decision of which month is a leap month depends on the relative movements of the sun and moon. <p> All astronomical computations are performed with respect to a time zone of GMT+8:00 and a longitude of 120 degrees east. Although some calendars implement a historically more accurate convention of using Beijing's local longitude (116 degrees 25 minutes east) and time zone (GMT+7:45:40) for dates before 1929, we do not implement this here. <p> Years are counted in two different ways in the Chinese calendar. The first method is by sequential numbering from the 61st year of the reign of Huang Di, 2637 BCE, which is designated year 1 on the Chinese calendar. The second method uses 60-year cycles from the same starting point, which is designated year 1 of cycle 1. In this class, the <pre><code> EXTENDED_YEAR </code></pre> field contains the sequential year count. The <pre><code> ERA </code></pre> field contains the cycle number, and the <pre><code> YEAR </code></pre> field contains the year of the cycle, a value between 1 and 60. <p> There is some variation in what is considered the starting point of the calendar, with some sources starting in the first year of the reign of Huang Di, rather than the 61st. This gives continuous year numbers 60 years greater and cycle numbers one greater than what this class implements. <p> Because <pre><code> ChineseCalendar </code></pre> defines an additional field and redefines the way the <pre><code> ERA </code></pre> field is used, it requires a new format class, <pre><code> ChineseDateFormat </code></pre> . As always, use the methods <pre><code> DateFormat.getXxxInstance(Calendar cal,...) </code></pre> to obtain a formatter for this calendar. <p> References: <ul> <li> Dershowitz and Reingold, <i> Calendrical Calculations </i> , Cambridge University Press, 1997 </li> <li> Helmer Aslaksen's Chinese Calendar page </li> <li> The Calendar FAQ </li> </ul> <p> This class should not be subclassed. </p><pre><code>public class ChineseCalendar\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/ChineseCalendar.html
CopticCalendar	A										<section class="prog__container"><p> Implement the Coptic calendar system. <p> CopticCalendar usually should be instantiated using <pre><code> getInstance(ULocale) </code></pre> passing in a <pre><code> ULocale </code></pre> with the tag <pre><code> "@calendar=coptic" </code></pre> . </p><pre><code>public final class CopticCalendar\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/CopticCalendar.html
Currency.CurrencyUsage	A										<section class="prog__container"><p> Currency Usage used for Decimal Format</p><pre><code>public static final enum Currency.CurrencyUsage\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/Currency.CurrencyUsage.html
Currency	A										<section class="prog__container"><p> A class encapsulating a currency, as defined by ISO 4217. A <tt> Currency </tt> object can be created given a <tt> Locale </tt> or given an ISO 4217 code. Once created, the <tt> Currency </tt> object can return various data necessary to its proper display: <ul> <li> A display symbol, for a specific locale <li> The number of fraction digits to display <li> A rounding increment </li> </li> </li> </ul> The <tt> DecimalFormat </tt> class uses these data to display currencies. <p> Note: This class deliberately resembles <tt> java.util.Currency </tt> but it has a completely independent implementation, and adds features not present in the JDK. </p><pre><code>public class Currency\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/Currency.html
CurrencyAmount	A										<section class="prog__container"><p> An amount of currency, consisting of a Number and a Currency. CurrencyAmount objects are immutable.</p><pre><code>public class CurrencyAmount\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/CurrencyAmount.html
DateInterval	A										<section class="prog__container"><p> This class represents date interval. It is a pair of long representing from date 1 to date 2.</p><pre><code>public final class DateInterval\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/util/DateInterval.html
Freezable	A										<section class="prog__container"><p> Provides a flexible mechanism for controlling access, without requiring that a class be immutable. Once frozen, an object can never be unfrozen, so it is thread-safe from that point onward. Once the object has been frozen, it must guarantee that no changes can be made to it. Any attempt to alter it must raise an UnsupportedOperationException exception. This means that when the object returns internal objects, or if anyone has references to those internal objects, that those internal objects must either be immutable, or must also raise exceptions if any attempt to modify them is made. Of course, the object can return clones of internal objects, since those are safe. </p><pre><code>public interface Freezable\nimplements Cloneable</code></pre></section>	https://developer.android.com/reference/android/icu/util/Freezable.html
GregorianCalendar	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> GregorianCalendar </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> <pre><code> GregorianCalendar </code></pre> is a concrete subclass of <pre><code> Calendar </code></pre> and provides the standard calendar used by most of the world. <p> The standard (Gregorian) calendar has 2 eras, BC and AD. <p> This implementation handles a single discontinuity, which corresponds by default to the date the Gregorian calendar was instituted (October 15, 1582 in some countries, later in others). The cutover date may be changed by the caller by calling <pre><code> setGregorianChange() </code></pre> . <p> Historically, in those countries which adopted the Gregorian calendar first, October 4, 1582 was thus followed by October 15, 1582. This calendar models this correctly. Before the Gregorian cutover, <pre><code> GregorianCalendar </code></pre> implements the Julian calendar. The only difference between the Gregorian and the Julian calendar is the leap year rule. The Julian calendar specifies leap years every four years, whereas the Gregorian calendar omits century years which are not divisible by 400. <p> <pre><code> GregorianCalendar </code></pre> implements <em> proleptic </em> Gregorian and Julian calendars. That is, dates are computed by extrapolating the current rules indefinitely far backward and forward in time. As a result, <pre><code> GregorianCalendar </code></pre> may be used for all years to generate meaningful and consistent results. However, dates obtained using <pre><code> GregorianCalendar </code></pre> are historically accurate only from March 1, 4 AD onward, when modern Julian calendar rules were adopted. Before this date, leap year rules were applied irregularly, and before 45 BC the Julian calendar did not even exist. <p> Prior to the institution of the Gregorian calendar, New Year's Day was March 25. To avoid confusion, this calendar always uses January 1. A manual adjustment may be made if desired for dates that are prior to the Gregorian changeover and which fall between January 1 and March 24. <p> Values calculated for the <pre><code> WEEK_OF_YEAR </code></pre> field range from 1 to 53. Week 1 for a year is the earliest seven day period starting on <pre><code> getFirstDayOfWeek() </code></pre> that contains at least <pre><code> getMinimalDaysInFirstWeek() </code></pre> days from that year. It thus depends on the values of <pre><code> getMinimalDaysInFirstWeek() </code></pre> , <pre><code> getFirstDayOfWeek() </code></pre> , and the day of the week of January 1. Weeks between week 1 of one year and week 1 of the following year are numbered sequentially from 2 to 52 or 53 (as needed). <p> For example, January 1, 1998 was a Thursday. If <pre><code> getFirstDayOfWeek() </code></pre> is <pre><code> MONDAY </code></pre> and <pre><code> getMinimalDaysInFirstWeek() </code></pre> is 4 (these are the values reflecting ISO 8601 and many national standards), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. If, however, <pre><code> getFirstDayOfWeek() </code></pre> is <pre><code> SUNDAY </code></pre> , then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three days of 1998 then are part of week 53 of 1997. <p> Values calculated for the <pre><code> WEEK_OF_MONTH </code></pre> field range from 0 or 1 to 4 or 5. Week 1 of a month (the days with <pre><code> WEEK_OF_MONTH = 1 </code></pre> ) is the earliest set of at least <pre><code> getMinimalDaysInFirstWeek() </code></pre> contiguous days in that month, ending on the day before <pre><code> getFirstDayOfWeek() </code></pre> . Unlike week 1 of a year, week 1 of a month may be shorter than 7 days, need not start on <pre><code> getFirstDayOfWeek() </code></pre> , and will not include days of the previous month. Days of a month before week 1 have a <pre><code> WEEK_OF_MONTH </code></pre> of 0. <p> For example, if <pre><code> getFirstDayOfWeek() </code></pre> is <pre><code> SUNDAY </code></pre> and <pre><code> getMinimalDaysInFirstWeek() </code></pre> is 4, then the first week of January 1998 is Sunday, January 4 through Saturday, January 10. These days have a <pre><code> WEEK_OF_MONTH </code></pre> of 1. Thursday, January 1 through Saturday, January 3 have a <pre><code> WEEK_OF_MONTH </code></pre> of 0. If <pre><code> getMinimalDaysInFirstWeek() </code></pre> is changed to 3, then January 1 through January 3 have a <pre><code> WEEK_OF_MONTH </code></pre> of 1. <p> <strong> Example: </strong> <blockquote> <pre> // get the supported ids for GMT-08:00 (Pacific Standard Time) String[] ids = TimeZone.getAvailableIDs(-8 * 60 * 60 * 1000); // if no ids were returned, something is wrong. get out. if (ids.length == 0) System.exit(0); // begin output System.out.println("Current Time"); // create a Pacific Standard Time time zone SimpleTimeZone pdt = new SimpleTimeZone(-8 * 60 * 60 * 1000, ids[0]); // set up rules for daylight savings time pdt.setStartRule(Calendar.MARCH, 2, Calendar.SUNDAY, 2 * 60 * 60 * 1000); pdt.setEndRule(Calendar.NOVEMBER, 1, Calendar.SUNDAY, 2 * 60 * 60 * 1000); // create a GregorianCalendar with the Pacific Daylight time zone // and the current date and time Calendar calendar = new GregorianCalendar(pdt); Date trialTime = new Date(); calendar.setTime(trialTime); // print out a bunch of interesting things System.out.println("ERA: " + calendar.get(Calendar.ERA)); System.out.println("YEAR: " + calendar.get(Calendar.YEAR)); System.out.println("MONTH: " + calendar.get(Calendar.MONTH)); System.out.println("WEEK_OF_YEAR: " + calendar.get(Calendar.WEEK_OF_YEAR)); System.out.println("WEEK_OF_MONTH: " + calendar.get(Calendar.WEEK_OF_MONTH)); System.out.println("DATE: " + calendar.get(Calendar.DATE)); System.out.println("DAY_OF_MONTH: " + calendar.get(Calendar.DAY_OF_MONTH)); System.out.println("DAY_OF_YEAR: " + calendar.get(Calendar.DAY_OF_YEAR)); System.out.println("DAY_OF_WEEK: " + calendar.get(Calendar.DAY_OF_WEEK)); System.out.println("DAY_OF_WEEK_IN_MONTH: " + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH)); System.out.println("AM_PM: " + calendar.get(Calendar.AM_PM)); System.out.println("HOUR: " + calendar.get(Calendar.HOUR)); System.out.println("HOUR_OF_DAY: " + calendar.get(Calendar.HOUR_OF_DAY)); System.out.println("MINUTE: " + calendar.get(Calendar.MINUTE)); System.out.println("SECOND: " + calendar.get(Calendar.SECOND)); System.out.println("MILLISECOND: " + calendar.get(Calendar.MILLISECOND)); System.out.println("ZONE_OFFSET: " + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000))); System.out.println("DST_OFFSET: " + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000))); System.out.println("Current Time, with hour reset to 3"); calendar.clear(Calendar.HOUR_OF_DAY); // so doesn't override calendar.set(Calendar.HOUR, 3); System.out.println("ERA: " + calendar.get(Calendar.ERA)); System.out.println("YEAR: " + calendar.get(Calendar.YEAR)); System.out.println("MONTH: " + calendar.get(Calendar.MONTH)); System.out.println("WEEK_OF_YEAR: " + calendar.get(Calendar.WEEK_OF_YEAR)); System.out.println("WEEK_OF_MONTH: " + calendar.get(Calendar.WEEK_OF_MONTH)); System.out.println("DATE: " + calendar.get(Calendar.DATE)); System.out.println("DAY_OF_MONTH: " + calendar.get(Calendar.DAY_OF_MONTH)); System.out.println("DAY_OF_YEAR: " + calendar.get(Calendar.DAY_OF_YEAR)); System.out.println("DAY_OF_WEEK: " + calendar.get(Calendar.DAY_OF_WEEK)); System.out.println("DAY_OF_WEEK_IN_MONTH: " + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH)); System.out.println("AM_PM: " + calendar.get(Calendar.AM_PM)); System.out.println("HOUR: " + calendar.get(Calendar.HOUR)); System.out.println("HOUR_OF_DAY: " + calendar.get(Calendar.HOUR_OF_DAY)); System.out.println("MINUTE: " + calendar.get(Calendar.MINUTE)); System.out.println("SECOND: " + calendar.get(Calendar.SECOND)); System.out.println("MILLISECOND: " + calendar.get(Calendar.MILLISECOND)); System.out.println("ZONE_OFFSET: " + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000))); // in hours System.out.println("DST_OFFSET: " + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000))); // in hours</pre> </blockquote> <p> GregorianCalendar usually should be instantiated using <pre><code> getInstance(ULocale) </code></pre> passing in a <pre><code> ULocale </code></pre> with the tag <pre><code> "@calendar=gregorian" </code></pre> . </p><pre><code>public class GregorianCalendar\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/GregorianCalendar.html
HebrewCalendar	A										<section class="prog__container"><p> <pre><code> HebrewCalendar </code></pre> is a subclass of <pre><code> Calendar </code></pre> that that implements the traditional Hebrew calendar. This is the civil calendar in Israel and the liturgical calendar of the Jewish faith worldwide. <p> The Hebrew calendar is lunisolar and thus has a number of interesting properties that distinguish it from the Gregorian. Months start on the day of (an arithmetic approximation of) each new moon. Since the solar year (approximately 365.24 days) is not an even multiple of the lunar month (approximately 29.53 days) an extra "leap month" is inserted in 7 out of every 19 years. To make matters even more interesting, the start of a year can be delayed by up to three days in order to prevent certain holidays from falling on the Sabbath and to prevent certain illegal year lengths. Finally, the lengths of certain months can vary depending on the number of days in the year. <p> The leap month is known as "Adar 1" and is inserted between the months of Shevat and Adar in leap years. Since the leap month does not come at the end of the year, calculations involving month numbers are particularly complex. Users of this class should make sure to use the <pre><code> roll </code></pre> and <pre><code> add </code></pre> methods rather than attempting to perform date arithmetic by manipulating the fields directly. <p> <b> Note: </b> In the traditional Hebrew calendar, days start at sunset. However, in order to keep the time fields in this class synchronized with those of the other calendars and with local clock time, we treat days and months as beginning at midnight, roughly 6 hours after the corresponding sunset. <p> If you are interested in more information on the rules behind the Hebrew calendar, see one of the following references: <ul> <li> " Calendrical Calculations ", by Nachum Dershowitz &amp; Edward Reingold, Cambridge University Press, 1997, pages 85-91. <li> Hebrew Calendar Science and Myths, http://web.archive.org/web/20090423084613/http://www.geocities.com/Athens/1584/ <li> The Calendar FAQ, http://www.faqs.org/faqs/calendars/faq/ </li> </li> </li> </ul> <p> This class should not be subclassed. </p><pre><code>public class HebrewCalendar\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/HebrewCalendar.html
ICUUncheckedIOException	A										<section class="prog__container"><p> Unchecked version of <pre><code> IOException </code></pre> . Some ICU APIs do not throw the standard exception but instead wrap it into this unchecked version. <p> This currently extends <pre><code> RuntimeException </code></pre> , but when ICU can rely on Java 8 this class should be changed to extend java.io.UncheckedIOException instead. </p><pre><code>public class ICUUncheckedIOException\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/ICUUncheckedIOException.html
IndianCalendar	A										<section class="prog__container"><p> <pre><code> IndianCalendar </code></pre> is a subclass of <pre><code> GregorianCalendar </code></pre> that numbers years since the birth of the Buddha. This is the civil calendar which is accepted by government of India as Indian National Calendar. The two calendars most widely used in India today are the Vikrama calendar followed in North India and the Shalivahana or Saka calendar which is followed in South India and Maharashtra. A variant of the Shalivahana Calendar was reformed and standardized as the Indian National calendar in 1957. <p> Some details of Indian National Calendar (to be implemented) : The Months Month Length Start date (Gregorian) ================================================= 1 Chaitra 30/31 March 22* 2 Vaisakha 31 April 21 3 Jyaistha 31 May 22 4 Asadha 31 June 22 5 Sravana 31 July 23 6 Bhadra 31 August 23 7 Asvina 30 September 23 8 Kartika 30 October 23 9 Agrahayana 30 November 22 10 Pausa 30 December 22 11 Magha 30 January 21 12 Phalguna 30 February 20 In leap years, Chaitra has 31 days and starts on March 21 instead. The leap years of Gregorian calendar and Indian National Calendar are in synchornization. So When its a leap year in Gregorian calendar then Chaitra has 31 days. The Years Years are counted in the Saka Era, which starts its year 0 in 78AD (by gregorian calendar). So for eg. 9th June 2006 by Gregorian Calendar, is same as 19th of Jyaistha in 1928 of Saka era by Indian National Calendar. <p> The Indian Calendar has only one allowable era: <pre><code> Saka Era </code></pre> . If the calendar is not in lenient mode (see <pre><code> setLenient </code></pre> ), dates before 1/1/1 Saka Era are rejected with an <pre><code> IllegalArgumentException </code></pre> . <p> This class should not be subclassed. </p><pre><code>public class IndianCalendar\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/IndianCalendar.html
IslamicCalendar.CalculationType	A										<section class="prog__container"><p> enumeration of available calendar calculation types</p><pre><code>public static final enum IslamicCalendar.CalculationType\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/IslamicCalendar.CalculationType.html
IslamicCalendar	A										<section class="prog__container"><p> <pre><code> IslamicCalendar </code></pre> is a subclass of <pre><code> Calendar </code></pre> that that implements the Islamic civil and religious calendars. It is used as the civil calendar in most of the Arab world and the liturgical calendar of the Islamic faith worldwide. This calendar is also known as the "Hijri" calendar, since it starts at the time of Mohammed's emigration (or "hijra") to Medinah on Thursday, July 15, 622 AD (Julian). <p> The Islamic calendar is strictly lunar, and thus an Islamic year of twelve lunar months does not correspond to the solar year used by most other calendar systems, including the Gregorian. An Islamic year is, on average, about 354 days long, so each successive Islamic year starts about 11 days earlier in the corresponding Gregorian year. <p> Each month of the calendar starts when the new moon's crescent is visible at sunset. However, in order to keep the time fields in this class synchronized with those of the other calendars and with local clock time, we treat days and months as beginning at midnight, roughly 6 hours after the corresponding sunset. <p> There are three main variants of the Islamic calendar in existence. The first is the <em> civil </em> calendar, which uses a fixed cycle of alternating 29- and 30-day months, with a leap day added to the last month of 11 out of every 30 years. This calendar is easily calculated and thus predictable in advance, so it is used as the civil calendar in a number of Arab countries. This is the default behavior of a newly-created <pre><code> IslamicCalendar </code></pre> object. <p> The Islamic <em> religious </em> calendar and Saudi Arabia's <em> Umm al-Qura </em> calendar, however, are based on the <em> observation </em> of the crescent moon. It is thus affected by the position at which the observations are made, seasonal variations in the time of sunset, the eccentricities of the moon's orbit, and even the weather at the observation site. This makes it impossible to calculate in advance, and it causes the start of a month in the religious calendar to differ from the civil calendar by up to three days. <p> Using astronomical calculations for the position of the sun and moon, the moon's illumination, and other factors, it is possible to determine the start of a lunar month with a fairly high degree of certainty. However, these calculations are extremely complicated and thus slow, so most algorithms, including the one used here, are only approximations of the true astronomical calculations. At present, the approximations used in this class are fairly simplistic; they will be improved in later versions of the code. <p> Like the Islamic religious calendar, <em> Umm al-Qura </em> is also based on the sighting method of the crescent moon but is standardized by Saudi Arabia. <p> The fixed-cycle <em> civil </em> calendar is used. <p> This class should not be subclassed. </p><pre><code>public class IslamicCalendar\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/IslamicCalendar.html
JapaneseCalendar	A										<section class="prog__container"><p> <pre><code> JapaneseCalendar </code></pre> is a subclass of <pre><code> GregorianCalendar </code></pre> that numbers years and eras based on the reigns of the Japanese emperors. The Japanese calendar is identical to the Gregorian calendar in all respects except for the year and era. The ascension of each emperor to the throne begins a new era, and the years of that era are numbered starting with the year of ascension as year 1. <p> Note that in the year of an imperial ascension, there are two possible sets of year and era values: that for the old era and for the new. For example, a new era began on January 7, 1989 AD. Strictly speaking, the first six days of that year were in the Showa era, e.g. "January 6, 64 Showa", while the rest of the year was in the Heisei era, e.g. "January 7, 1 Heisei". This class handles this distinction correctly when computing dates. However, in lenient mode either form of date is acceptable as input. <p> In modern times, eras have started on January 8, 1868 AD, Gregorian (Meiji), July 30, 1912 (Taisho), December 25, 1926 (Showa), and January 7, 1989 (Heisei). Constants for these eras, suitable for use in the <pre><code> ERA </code></pre> field, are provided in this class. Note that the <em> number </em> used for each era is more or less arbitrary. Currently, the era starting in 1053 AD is era #0; however this may change in the future as we add more historical data. Use the predefined constants rather than using actual, absolute numbers. <p> This class should not be subclassed. </p><pre><code>public class JapaneseCalendar\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/JapaneseCalendar.html
Measure	A										<section class="prog__container"><p> An amount of a specified unit, consisting of a Number and a Unit. For example, a length measure consists of a Number and a length unit, such as feet or meters. <p> Measure objects are parsed and formatted by subclasses of MeasureFormat. <p> Measure objects are immutable. All subclasses must guarantee that. (However, subclassing is discouraged.) </p><pre><code>public class Measure\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/util/Measure.html
MeasureUnit	A										<section class="prog__container"><p> A unit such as length, mass, volume, currency, etc. A unit is coupled with a numeric amount to produce a Measure. MeasureUnit objects are immutable. All subclasses must guarantee that. (However, subclassing is discouraged.)</p><pre><code>public class MeasureUnit\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/util/MeasureUnit.html
Output	A										<section class="prog__container"><p> Simple struct-like class for output parameters.</p><pre><code>public class Output\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/util/Output.html
android.icu.util	A										<section class="prog__container">Interface for enabling iteration over sets of <int index, int value>, where index is the sorted integer index in ascending order and value, its associated integer value. </section>	https://developer.android.com/reference/android/icu/util/package-summary.html
RangeValueIterator.Element	A										<section class="prog__container"><p> Return result wrapper for android.icu.util.RangeValueIterator. Stores the start and limit of the continous result range and the common value all integers between [start, limit - 1] has.</p><pre><code>public static class RangeValueIterator.Element\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/util/RangeValueIterator.Element.html
RangeValueIterator	A										<section class="prog__container"><p> <p> Interface for enabling iteration over sets of &lt;int index, int value&gt;, where index is the sorted integer index in ascending order and value, its associated integer value. <p> The result for each iteration is the consecutive range of &lt;int index, int value&gt; with the same value. Result is represented by &lt;start, limit, value&gt; where <ul> <li> start is the starting integer of the result range <li> limit is 1 after the maximum integer that follows start, such that all integers between start and (limit - 1), inclusive, have the same associated integer value. <li> value is the integer value that all integers from start to (limit - 1) share in common. </li> </li> </li> </ul> <p> Hence value(start) = value(start + 1) = .... = value(start + n) = .... = value(limit - 1). However value(start -1) != value(start) and value(limit) != value(start). <p> Most implementations will be created by factory methods, such as the character type iterator in UCharacter.getTypeIterator. See example below. <p> Example of use: <br> <pre> RangeValueIterator iterator = UCharacter.getTypeIterator(); RangeValueIterator.Element result = new RangeValueIterator.Element(); while (iterator.next(result)) { System.out.println("Codepoint \\u" + Integer.toHexString(result.start) + " to codepoint \\u" + Integer.toHexString(result.limit - 1) + " has the character type " + result.value); } </pre> </br> </p><pre><code>public interface RangeValueIterator\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/RangeValueIterator.html
TaiwanCalendar	A										<section class="prog__container"><p> <pre><code> TaiwanCalendar </code></pre> is a subclass of <pre><code> GregorianCalendar </code></pre> that numbers years since 1912. <p> The Taiwan calendar is identical to the Gregorian calendar in all respects except for the year and era. Years are numbered since 1912 AD (Gregorian). <p> The Taiwan Calendar has one era: <pre><code> MINGUO </code></pre> . <p> This class should not be subclassed. </p><pre><code>public class TaiwanCalendar\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/TaiwanCalendar.html
TimeUnit	A										<section class="prog__container"><p> Measurement unit for time units.</p><pre><code>public class TimeUnit\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/TimeUnit.html
TimeZone	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> TimeZone </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> <pre><code> TimeZone </code></pre> represents a time zone offset, and also computes daylight savings. <p> Typically, you get a <pre><code> TimeZone </code></pre> using <pre><code> getDefault() </code></pre> which creates a <pre><code> TimeZone </code></pre> based on the time zone where the program is running. For example, for a program running in Japan, <pre><code> getDefault </code></pre> creates a <pre><code> TimeZone </code></pre> object based on Japanese Standard Time. <p> You can also get a <pre><code> TimeZone </code></pre> using <pre><code> getTimeZone(String) </code></pre> along with a time zone ID. For instance, the time zone ID for the U.S. Pacific Time zone is "America/Los_Angeles". So, you can get a U.S. Pacific Time <pre><code> TimeZone </code></pre> object with: <blockquote> <pre> TimeZone tz = TimeZone.getTimeZone("America/Los_Angeles"); </pre> </blockquote> You can use the <pre><code> getAvailableIDs() </code></pre> method to iterate through all the supported time zone IDs, or getCanonicalID method to check if a time zone ID is supported or not. You can then choose a supported ID to get a <pre><code> TimeZone </code></pre> . If the time zone you want is not represented by one of the supported IDs, then you can create a custom time zone ID with the following syntax: <blockquote> <pre> GMT[+|-]hh[[:]mm] </pre> </blockquote> For example, you might specify GMT+14:00 as a custom time zone ID. The <pre><code> TimeZone </code></pre> that is returned when you specify a custom time zone ID uses the specified offset from GMT(=UTC) and does not observe daylight saving time. For example, you might specify GMT+14:00 as a custom time zone ID to create a TimeZone representing 14 hours ahead of GMT (with no daylight saving time). In addition, <pre><code> getCanonicalID </code></pre> can also be used to normalize a custom time zone ID. <p> For compatibility with JDK 1.1.x, some other three-letter time zone IDs (such as "PST", "CTT", "AST") are also supported. However, <strong> their use is deprecated </strong> because the same abbreviation is often used for multiple time zones (for example, "CST" could be U.S. "Central Standard Time" and "China Standard Time"), and the Java platform can then only recognize one of them. </p><pre><code>public abstract class TimeZone\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/util/TimeZone.html
TimeZone.SystemTimeZoneType	A										<section class="prog__container"><p> <strong> [icu] </strong> System time zone type constants used by filtering zones in <pre><code> getAvailableIDs(SystemTimeZoneType, String, Integer) </code></pre></p><pre><code>public static final enum TimeZone.SystemTimeZoneType\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/TimeZone.SystemTimeZoneType.html
ULocale.Builder	A										<section class="prog__container"><p> <pre><code> Builder </code></pre> is used to build instances of <pre><code> ULocale </code></pre> from values configured by the setters. Unlike the <pre><code> ULocale </code></pre> constructors, the <pre><code> Builder </code></pre> checks if a value configured by a setter satisfies the syntax requirements defined by the <pre><code> ULocale </code></pre> class. A <pre><code> ULocale </code></pre> object created by a <pre><code> Builder </code></pre> is well-formed and can be transformed to a well-formed IETF BCP 47 language tag without losing information. <p> <b> Note: </b> The <pre><code> ULocale </code></pre> class does not provide any syntactic restrictions on variant, while BCP 47 requires each variant subtag to be 5 to 8 alphanumerics or a single numeric followed by 3 alphanumerics. The method <pre><code> setVariant </code></pre> throws <pre><code> IllformedLocaleException </code></pre> for a variant that does not satisfy this restriction. If it is necessary to support such a variant, use a ULocale constructor. However, keep in mind that a <pre><code> ULocale </code></pre> object created this way might lose the variant information when transformed to a BCP 47 language tag. <p> The following example shows how to create a <pre><code> Locale </code></pre> object with the <pre><code> Builder </code></pre> . <blockquote> <pre> ULocale aLocale = new Builder().setLanguage("sr").setScript("Latn").setRegion("RS").build(); </pre> </blockquote> <p> Builders can be reused; <pre><code> clear() </code></pre> resets all fields to their default values. </p><pre><code>public static final class ULocale.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/util/ULocale.Builder.html
ULocale.Category	A										<section class="prog__container"><p> Enum for locale categories. These locale categories are used to get/set the default locale for the specific functionality represented by the category.</p><pre><code>public static final enum ULocale.Category\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/ULocale.Category.html
ULocale	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> Locale </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. A class analogous to <pre><code> Locale </code></pre> that provides additional support for ICU protocol. In ICU 3.0 this class is enhanced to support RFC 3066 language identifiers. <p> Many classes and services in ICU follow a factory idiom, in which a factory method or object responds to a client request with an object. The request includes a locale (the <i> requested </i> locale), and the returned object is constructed using data for that locale. The system may lack data for the requested locale, in which case the locale fallback mechanism will be invoked until a populated locale is found (the <i> valid </i> locale). Furthermore, even when a populated locale is found (the <i> valid </i> locale), further fallback may be required to reach a locale containing the specific data required by the service (the <i> actual </i> locale). <p> ULocale performs <b> 'normalization' </b> and <b> 'canonicalization' </b> of locale ids. Normalization 'cleans up' ICU locale ids as follows: <ul> <li> language, script, country, variant, and keywords are properly cased <br> (lower, title, upper, upper, and lower case respectively) </br> </li> <li> hyphens used as separators are converted to underscores </li> <li> three-letter language and country ids are converted to two-letter equivalents where available </li> <li> surrounding spaces are removed from keywords and values </li> <li> if there are multiple keywords, they are put in sorted order </li> </ul> Canonicalization additionally performs the following: <ul> <li> POSIX ids are converted to ICU format IDs </li> <li> 'grandfathered' 3066 ids are converted to ICU standard form </li> <li> 'PREEURO' and 'EURO' variants are converted to currency keyword form, with the currency id appropriate to the country of the locale (for PREEURO) or EUR (for EURO). </li> </ul> All ULocale constructors automatically normalize the locale id. To handle POSIX ids, <pre><code> canonicalize </code></pre> can be called to convert the id to canonical form, or the <pre><code> canonicalInstance </code></pre> factory method can be called. <p> Note: The <i> actual </i> locale is returned correctly, but the <i> valid </i> locale is not, in most cases. </p><pre><code>public final class ULocale\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/util/ULocale.html
ValueIterator.Element	A										<section class="prog__container"><p> <p> The return result container of each iteration. Stores the next integer index and its associated value Object. </p><pre><code>public static final class ValueIterator.Element\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/util/ValueIterator.Element.html
ValueIterator	A										<section class="prog__container"><p> <p> Interface for enabling iteration over sets of &lt;int, Object&gt;, where int is the sorted integer index in ascending order, and Object its associated value. <p> The ValueIterator allows iterations over integer indexes in the range of Integer.MIN_VALUE to Integer.MAX_VALUE inclusive. Implementations of ValueIterator should specify their own maximum subrange within the above range that is meaningful to its applications. <p> Most implementations will be created by factory methods, such as the character name iterator in UCharacter.getNameIterator. See example below. Example of use: <br> <pre> ValueIterator iterator = UCharacter.getNameIterator(); ValueIterator.Element result = new ValueIterator.Element(); iterator.setRange(UCharacter.MIN_VALUE, UCharacter.MAX_VALUE); while (iterator.next(result)) { System.out.println("Codepoint \\u" + Integer.toHexString(result.integer) + " has the character name " + (String)result.value); } </pre> </br> </p><pre><code>public interface ValueIterator\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/ValueIterator.html
VersionInfo	A										<section class="prog__container"><p> Class to store version numbers of the form major.minor.milli.micro.</p><pre><code>public final class VersionInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/icu/util/VersionInfo.html
AbstractInputMethodService.AbstractInputMethodImpl	A										<section class="prog__container"><p> Base class for derived classes to implement their <pre><code> InputMethod </code></pre> interface. This takes care of basic maintenance of the input method, but most behavior must be implemented in a derived class.</p><pre><code>public abstract class AbstractInputMethodService.AbstractInputMethodImpl\nextends Object</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/AbstractInputMethodService.AbstractInputMethodImpl.html
AbstractInputMethodService.AbstractInputMethodSessionImpl	A										<section class="prog__container"><p> Base class for derived classes to implement their <pre><code> InputMethodSession </code></pre> interface. This takes care of basic maintenance of the session, but most behavior must be implemented in a derived class.</p><pre><code>public abstract class AbstractInputMethodService.AbstractInputMethodSessionImpl\nextends Object</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/AbstractInputMethodService.AbstractInputMethodSessionImpl.html
AbstractInputMethodService	A										<section class="prog__container"><p> AbstractInputMethodService provides a abstract base class for input methods. Normal input method implementations will not derive from this directly, instead building on top of <pre><code> InputMethodService </code></pre> or another more complete base class. Be sure to read <pre><code> InputMethod </code></pre> for more information on the basics of writing input methods. <p> This class combines a Service (representing the input method component to the system with the InputMethod interface that input methods must implement. This base class takes care of reporting your InputMethod from the service when clients bind to it, but provides no standard implementation of the InputMethod interface itself. Derived classes must implement that interface. </p><pre><code>public abstract class AbstractInputMethodService\n</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/AbstractInputMethodService.html
ExtractEditText	A										<section class="prog__container"><p> Specialization of <pre><code> EditText </code></pre> for showing and interacting with the extracted text in a full-screen input method.</p><pre><code>public class ExtractEditText\n</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/ExtractEditText.html
InputMethodService	A										<section class="prog__container"><p> InputMethodService provides a standard implementation of an InputMethod, which final implementations can derive from and customize. See the base class <pre><code> AbstractInputMethodService </code></pre> and the <pre><code> InputMethod </code></pre> interface for more information on the basics of writing input methods. <p> In addition to the normal Service lifecycle methods, this class introduces some new specific callbacks that most subclasses will want to make use of: </p><pre><code>public class InputMethodService\n</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html
InputMethodService.InputMethodImpl	A										<section class="prog__container"><p> Concrete implementation of <pre><code> AbstractInputMethodService.AbstractInputMethodImpl </code></pre> that provides all of the standard behavior for an input method.</p><pre><code>public class InputMethodService.InputMethodImpl\n</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodImpl.html
InputMethodService.InputMethodSessionImpl	A										<section class="prog__container"><p> Concrete implementation of <pre><code> AbstractInputMethodService.AbstractInputMethodSessionImpl </code></pre> that provides all of the standard behavior for an input method session.</p><pre><code>public class InputMethodService.InputMethodSessionImpl\n</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodSessionImpl.html
InputMethodService.Insets	A										<section class="prog__container"><p> Information about where interesting parts of the input method UI appear.</p><pre><code>public static final class InputMethodService.Insets\nextends Object</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/InputMethodService.Insets.html
Keyboard	A										<section class="prog__container"><p> Loads an XML description of a keyboard and stores the attributes of the keys. A keyboard consists of rows of keys. <p> The layout file for a keyboard contains XML that looks like the following snippet: </p><pre><code>public class Keyboard\nextends Object</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/Keyboard.html
Keyboard.Key	A										<section class="prog__container"><p> Class for describing the position and characteristics of a single key in the keyboard.</p><pre><code>public static class Keyboard.Key\nextends Object</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/Keyboard.Key.html
Keyboard.Row	A										<section class="prog__container"><p> Container for keys in the keyboard. All keys in a row are at the same Y-coordinate. Some of the key size defaults can be overridden per row from what the <pre><code> Keyboard </code></pre> defines.</p><pre><code>public static class Keyboard.Row\nextends Object</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/Keyboard.Row.html
KeyboardView	A										<section class="prog__container"><p> A view that renders a virtual <pre><code> Keyboard </code></pre> . It handles rendering of keys and detecting key presses and touch movements.</p><pre><code>public class KeyboardView\n</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html
KeyboardView.OnKeyboardActionListener	A										<section class="prog__container"><p> Listener for virtual keyboard events.</p><pre><code>public static interface KeyboardView.OnKeyboardActionListener\n</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/KeyboardView.OnKeyboardActionListener.html
android.inputmethodservice	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/inputmethodservice/package-summary.html
Address	A										<section class="prog__container"><p> A class representing an Address, i.e, a set of Strings describing a location. The address format is a simplified version of xAL (eXtensible Address Language) http://www.oasis-open.org/committees/ciq/ciq.html#6</p><pre><code>public class Address\nextends Object</code></pre></section>	https://developer.android.com/reference/android/location/Address.html
Criteria	A										<section class="prog__container"><p> A class indicating the application criteria for selecting a location provider. Providers maybe ordered according to accuracy, power usage, ability to report altitude, speed, and bearing, and monetary cost.</p><pre><code>public class Criteria\nextends Object</code></pre></section>	https://developer.android.com/reference/android/location/Criteria.html
Geocoder	A										<section class="prog__container"><p> A class for handling geocoding and reverse geocoding. Geocoding is the process of transforming a street address or other description of a location into a (latitude, longitude) coordinate. Reverse geocoding is the process of transforming a (latitude, longitude) coordinate into a (partial) address. The amount of detail in a reverse geocoded location description may vary, for example one might contain the full street address of the closest building, while another might contain only a city name and postal code. The Geocoder class requires a backend service that is not included in the core android framework. The Geocoder query methods will return an empty list if there no backend service in the platform. Use the isPresent() method to determine whether a Geocoder implementation exists.</p><pre><code>public final class Geocoder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/location/Geocoder.html
GnssClock	A										<section class="prog__container"><p> A class containing a GPS clock timestamp. <p> It represents a measurement of the GPS receiver's clock. </p><pre><code>public final class GnssClock\nextends Object</code></pre></section>	https://developer.android.com/reference/android/location/GnssClock.html
GnssMeasurement	A										<section class="prog__container"><p> A class representing a GNSS satellite measurement, containing raw and computed information.</p><pre><code>public final class GnssMeasurement\nextends Object</code></pre></section>	https://developer.android.com/reference/android/location/GnssMeasurement.html
GnssMeasurementsEvent.Callback	A										<section class="prog__container"><p> Used for receiving GNSS satellite measurements from the GNSS engine. Each measurement contains raw and computed data identifying a satellite. You can implement this interface and call <pre><code> registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback) </code></pre> .</p><pre><code>public static abstract class GnssMeasurementsEvent.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/location/GnssMeasurementsEvent.Callback.html
GnssMeasurementsEvent	A										<section class="prog__container"><p> A class implementing a container for data associated with a measurement event. Events are delivered to registered instances of <pre><code> GnssMeasurementsEvent.Callback </code></pre> .</p><pre><code>public final class GnssMeasurementsEvent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/location/GnssMeasurementsEvent.html
GnssNavigationMessage.Callback	A										<section class="prog__container"><p> Used for receiving GNSS satellite Navigation Messages from the GNSS engine. <p> You can implement this interface and call <pre><code> registerGnssNavigationMessageCallback(GnssNavigationMessage.Callback) </code></pre> . </p><pre><code>public static abstract class GnssNavigationMessage.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/location/GnssNavigationMessage.Callback.html
GnssNavigationMessage	A										<section class="prog__container"><p> A class containing a GNSS satellite Navigation Message.</p><pre><code>public final class GnssNavigationMessage\nextends Object</code></pre></section>	https://developer.android.com/reference/android/location/GnssNavigationMessage.html
GnssStatus.Callback	A										<section class="prog__container"><p> Used for receiving notifications when GNSS events happen.</p><pre><code>public static abstract class GnssStatus.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/location/GnssStatus.Callback.html
GnssStatus	A										<section class="prog__container"><p> This class represents the current state of the GNSS engine. This class is used in conjunction with the <pre><code> GnssStatus.Callback </code></pre> .</p><pre><code>public final class GnssStatus\nextends Object</code></pre></section>	https://developer.android.com/reference/android/location/GnssStatus.html
GpsSatellite	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> use <pre><code> GnssStatus </code></pre> and <pre><code> GnssStatus.Callback </code></pre> . </p><pre><code>public final class GpsSatellite\nextends Object</code></pre></section>	https://developer.android.com/reference/android/location/GpsSatellite.html
GpsStatus	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> use <pre><code> GnssStatus </code></pre> and <pre><code> GnssStatus.Callback </code></pre> . </p><pre><code>public final class GpsStatus\nextends Object</code></pre></section>	https://developer.android.com/reference/android/location/GpsStatus.html
GpsStatus.Listener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 24. </strong> <br/> use <pre><code> GnssStatus.Callback </code></pre> instead. </p><pre><code>public static interface GpsStatus.Listener\n</code></pre></section>	https://developer.android.com/reference/android/location/GpsStatus.Listener.html
GpsStatus.NmeaListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 24. </strong> <br/> use <pre><code> OnNmeaMessageListener </code></pre> instead. </p><pre><code>public static interface GpsStatus.NmeaListener\n</code></pre></section>	https://developer.android.com/reference/android/location/GpsStatus.NmeaListener.html
Location	A										<section class="prog__container"><p> A data class representing a geographic location. <p> A location can consist of a latitude, longitude, timestamp, and other information such as bearing, altitude and velocity. <p> All locations generated by the <pre><code> LocationManager </code></pre> are guaranteed to have a valid latitude, longitude, and timestamp (both UTC time and elapsed real-time since boot), all other parameters are optional. </p><pre><code>public class Location\nextends Object</code></pre></section>	https://developer.android.com/reference/android/location/Location.html
LocationListener	A										<section class="prog__container"><p> Used for receiving notifications from the LocationManager when the location has changed. These methods are called if the LocationListener has been registered with the location manager service using the <pre><code> requestLocationUpdates(String, long, float, LocationListener) </code></pre> method. </p><pre><code>public interface LocationListener\n</code></pre></section>	https://developer.android.com/reference/android/location/LocationListener.html
LocationManager	A										<section class="prog__container"><p> This class provides access to the system location services. These services allow applications to obtain periodic updates of the device's geographical location, or to fire an application-specified <pre><code> Intent </code></pre> when the device enters the proximity of a given geographical location. <p> You do not instantiate this class directly; instead, retrieve it through <pre><code> Context.getSystemService(Context.LOCATION_SERVICE) </code></pre> . <p class="note"> Unless noted, all Location API methods require the <pre><code> ACCESS_COARSE_LOCATION </code></pre> or <pre><code> ACCESS_FINE_LOCATION </code></pre> permissions. If your application only has the coarse permission then it will not have access to the GPS or passive location providers. Other providers will still return location results, but the update rate will be throttled and the exact location will be obfuscated to a coarse level of accuracy. </p><pre><code>public class LocationManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/location/LocationManager.html
LocationProvider	A										<section class="prog__container"><p> An abstract superclass for location providers. A location provider provides periodic reports on the geographical location of the device. <p> Each provider has a set of criteria under which it may be used; for example, some providers require GPS hardware and visibility to a number of satellites; others require the use of the cellular radio, or access to a specific carrier's network, or to the internet. They may also have different battery consumption characteristics or monetary costs to the user. The <pre><code> Criteria </code></pre> class allows providers to be selected based on user-specified criteria. </p><pre><code>public class LocationProvider\nextends Object</code></pre></section>	https://developer.android.com/reference/android/location/LocationProvider.html
OnNmeaMessageListener	A										<section class="prog__container"><p> Used for receiving NMEA sentences from the GNSS. NMEA 0183 is a standard for communicating with marine electronic devices and is a common method for receiving data from a GNSS, typically over a serial port. See NMEA 0183 for more details. You can implement this interface and call <pre><code> addNmeaListener(GpsStatus.NmeaListener) </code></pre> to receive NMEA data from the GNSS engine.</p><pre><code>public interface OnNmeaMessageListener\n</code></pre></section>	https://developer.android.com/reference/android/location/OnNmeaMessageListener.html
android.location	A										<section class="prog__container">Contains the framework API classes that define Android location-based and related services.</section>	https://developer.android.com/reference/android/location/package-summary.html
SettingInjectorService	A										<section class="prog__container"><pre><code>public abstract class SettingInjectorService\n</code></pre></section>	https://developer.android.com/reference/android/location/SettingInjectorService.html
AsyncPlayer	A										<section class="prog__container"><p> Plays a series of audio URIs, but does all the hard work on another thread so that any slowness with preparing or loading doesn't block the calling thread.</p><pre><code>public class AsyncPlayer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/AsyncPlayer.html
AudioAttributes.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> AudioAttributes </code></pre> objects. <p> Here is an example where <pre><code> Builder </code></pre> is used to define the <pre><code> AudioAttributes </code></pre> to be used by a new <pre><code> AudioTrack </code></pre> instance: <pre class="prettyprint"> AudioTrack myTrack = new AudioTrack( new AudioAttributes.Builder() .setUsage(AudioAttributes.USAGE_MEDIA) .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC) .build(), myFormat, myBuffSize, AudioTrack.MODE_STREAM, mySession); </pre> <p> By default all types of information (usage, content type, flags) conveyed by an <pre><code> AudioAttributes </code></pre> instance are set to "unknown". Unknown information will be interpreted as a default value that is dependent on the context of use, for instance a <pre><code> MediaPlayer </code></pre> will use a default usage of <pre><code> USAGE_MEDIA </code></pre> . </p><pre><code>public static class AudioAttributes.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/AudioAttributes.Builder.html
AudioAttributes	A										<section class="prog__container"><p> A class to encapsulate a collection of attributes describing information about an audio stream. <p> <pre><code> AudioAttributes </code></pre> supersede the notion of stream types (see for instance <pre><code> STREAM_MUSIC </code></pre> or <pre><code> STREAM_ALARM </code></pre> ) for defining the behavior of audio playback. Attributes allow an application to specify more information than is conveyed in a stream type by allowing the application to define: <ul> <li> usage: "why" you are playing a sound, what is this sound used for. This is achieved with the "usage" information. Examples of usage are <pre><code> USAGE_MEDIA </code></pre> and <pre><code> USAGE_ALARM </code></pre> . These two examples are the closest to stream types, but more detailed use cases are available. Usage information is more expressive than a stream type, and allows certain platforms or routing policies to use this information for more refined volume or routing decisions. Usage is the most important information to supply in <pre><code> AudioAttributes </code></pre> and it is recommended to build any instance with this information supplied, see <pre><code> AudioAttributes.Builder </code></pre> for exceptions. </li> <li> content type: "what" you are playing. The content type expresses the general category of the content. This information is optional. But in case it is known (for instance <pre><code> CONTENT_TYPE_MOVIE </code></pre> for a movie streaming service or <pre><code> CONTENT_TYPE_MUSIC </code></pre> for a music playback application) this information might be used by the audio framework to selectively configure some audio post-processing blocks. </li> <li> flags: "how" is playback to be affected, see the flag definitions for the specific playback behaviors they control. </li> </ul> <p> <pre><code> AudioAttributes </code></pre> are used for example in one of the <pre><code> AudioTrack </code></pre> constructors (see <pre><code> AudioTrack(AudioAttributes, AudioFormat, int, int, int) </code></pre> ), to configure a <pre><code> MediaPlayer </code></pre> (see <pre><code> setAudioAttributes(AudioAttributes) </code></pre> or a <pre><code> Notification </code></pre> (see <pre><code> audioAttributes </code></pre> ). An <pre><code> AudioAttributes </code></pre> instance is built through its builder, <pre><code> AudioAttributes.Builder </code></pre> . </p><pre><code>public final class AudioAttributes\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/AudioAttributes.html
AudioDeviceCallback	A										<section class="prog__container"><p> AudioDeviceCallback defines the mechanism by which applications can receive notifications of audio device connection and disconnection events.</p><pre><code>public abstract class AudioDeviceCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/AudioDeviceCallback.html
AudioDeviceInfo	A										<section class="prog__container"><p> Class to provide information about the audio devices.</p><pre><code>public final class AudioDeviceInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/AudioDeviceInfo.html
AudioFormat.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> AudioFormat </code></pre> objects. Use this class to configure and create an AudioFormat instance. By setting format characteristics such as audio encoding, channel mask or sample rate, you indicate which of those are to vary from the default behavior on this device wherever this audio format is used. See <pre><code> AudioFormat </code></pre> for a complete description of the different parameters that can be used to configure an <pre><code> AudioFormat </code></pre> instance. <p> <pre><code> AudioFormat </code></pre> is for instance used in <pre><code> AudioTrack(AudioAttributes, AudioFormat, int, int, int) </code></pre> . In this constructor, every format characteristic set on the <pre><code> Builder </code></pre> (e.g. with <pre><code> setSampleRate(int) </code></pre> ) will alter the default values used by an <pre><code> AudioTrack </code></pre> . In this case for audio playback with <pre><code> AudioTrack </code></pre> , the sample rate set in the <pre><code> Builder </code></pre> would override the platform output sample rate which would otherwise be selected by default. </p><pre><code>public static class AudioFormat.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/AudioFormat.Builder.html
AudioFormat	A										<section class="prog__container"><p> The <pre><code> AudioFormat </code></pre> class is used to access a number of audio format and channel configuration constants. They are for instance used in <pre><code> AudioTrack </code></pre> and <pre><code> AudioRecord </code></pre> , as valid values in individual parameters of constructors like <pre><code> AudioTrack(int, int, int, int, int, int) </code></pre> , where the fourth parameter is one of the <pre><code> AudioFormat.ENCODING_* </code></pre> constants. The <pre><code> AudioFormat </code></pre> constants are also used in <pre><code> MediaFormat </code></pre> to specify audio related values commonly used in media, such as for <pre><code> KEY_CHANNEL_MASK </code></pre> . <p> The <pre><code> AudioFormat.Builder </code></pre> class can be used to create instances of the <pre><code> AudioFormat </code></pre> format class. Refer to <pre><code> AudioFormat.Builder </code></pre> for documentation on the mechanics of the configuration and building of such instances. Here we describe the main concepts that the <pre><code> AudioFormat </code></pre> class allow you to convey in each instance, they are: <ol> <li> sample rate <li> encoding <li> channel masks </li> </li> </li> </ol> <p> Closely associated with the <pre><code> AudioFormat </code></pre> is the notion of an audio frame , which is used throughout the documentation to represent the minimum size complete unit of audio data. <h4 id="sampleRate"> Sample rate </h4> <p> Expressed in Hz, the sample rate in an <pre><code> AudioFormat </code></pre> instance expresses the number of audio samples for each channel per second in the content you are playing or recording. It is not the sample rate at which content is rendered or produced. For instance a sound at a media sample rate of 8000Hz can be played on a device operating at a sample rate of 48000Hz; the sample rate conversion is automatically handled by the platform, it will not play at 6x speed. <p> As of API <pre><code> M </code></pre> , sample rates up to 192kHz are supported for <pre><code> AudioRecord </code></pre> and <pre><code> AudioTrack </code></pre> , with sample rate conversion performed as needed. To improve efficiency and avoid lossy conversions, it is recommended to match the sample rate for <pre><code> AudioRecord </code></pre> and <pre><code> AudioTrack </code></pre> to the endpoint device sample rate, and limit the sample rate to no more than 48kHz unless there are special device capabilities that warrant a higher rate. <h4 id="encoding"> Encoding </h4> <p> Audio encoding is used to describe the bit representation of audio data, which can be either linear PCM or compressed audio, such as AC3 or DTS. <p> For linear PCM, the audio encoding describes the sample size, 8 bits, 16 bits, or 32 bits, and the sample representation, integer or float. <ul> <li> <pre><code> ENCODING_PCM_8BIT </code></pre> : The audio sample is a 8 bit unsigned integer in the range [0, 255], with a 128 offset for zero. This is typically stored as a Java byte in a byte array or ByteBuffer. Since the Java byte is <em> signed </em> , be careful with math operations and conversions as the most significant bit is inverted. </li> <li> <pre><code> ENCODING_PCM_16BIT </code></pre> : The audio sample is a 16 bit signed integer typically stored as a Java short in a short array, but when the short is stored in a ByteBuffer, it is native endian (as compared to the default Java big endian). The short has full range from [-32768, 32767], and is sometimes interpreted as fixed point Q.15 data. </li> <li> <pre><code> ENCODING_PCM_FLOAT </code></pre> : Introduced in API <pre><code> LOLLIPOP </code></pre> , this encoding specifies that the audio sample is a 32 bit IEEE single precision float. The sample can be manipulated as a Java float in a float array, though within a ByteBuffer it is stored in native endian byte order. The nominal range of <pre><code> ENCODING_PCM_FLOAT </code></pre> audio data is [-1.0, 1.0]. It is implementation dependent whether the positive maximum of 1.0 is included in the interval. Values outside of the nominal range are clamped before sending to the endpoint device. Beware that the handling of NaN is undefined; subnormals may be treated as zero; and infinities are generally clamped just like other values for <pre><code> AudioTrack </code></pre> – try to avoid infinities because they can easily generate a NaN. <br> To achieve higher audio bit depth than a signed 16 bit integer short, it is recommended to use <pre><code> ENCODING_PCM_FLOAT </code></pre> for audio capture, processing, and playback. Floats are efficiently manipulated by modern CPUs, have greater precision than 24 bit signed integers, and have greater dynamic range than 32 bit signed integers. <pre><code> AudioRecord </code></pre> as of API <pre><code> M </code></pre> and <pre><code> AudioTrack </code></pre> as of API <pre><code> LOLLIPOP </code></pre> support <pre><code> ENCODING_PCM_FLOAT </code></pre> . </br> </li> </ul> <p> For compressed audio, the encoding specifies the method of compression, for example <pre><code> ENCODING_AC3 </code></pre> and <pre><code> ENCODING_DTS </code></pre> . The compressed audio data is typically stored as bytes in a byte array or ByteBuffer. When a compressed audio encoding is specified for an <pre><code> AudioTrack </code></pre> , it creates a direct (non-mixed) track for output to an endpoint (such as HDMI) capable of decoding the compressed audio. For (most) other endpoints, which are not capable of decoding such compressed audio, you will need to decode the data first, typically by creating a <pre><code> MediaCodec </code></pre> . Alternatively, one may use <pre><code> MediaPlayer </code></pre> for playback of compressed audio files or streams. <p> When compressed audio is sent out through a direct <pre><code> AudioTrack </code></pre> , it need not be written in exact multiples of the audio access unit; this differs from <pre><code> MediaCodec </code></pre> input buffers. <h4 id="channelMask"> Channel mask </h4> <p> Channel masks are used in <pre><code> AudioTrack </code></pre> and <pre><code> AudioRecord </code></pre> to describe the samples and their arrangement in the audio frame. They are also used in the endpoint (e.g. a USB audio interface, a DAC connected to headphones) to specify allowable configurations of a particular device. <br> As of API <pre><code> M </code></pre> , there are two types of channel masks: channel position masks and channel index masks. <h5 id="channelPositionMask"> Channel position masks </h5> Channel position masks are the original Android channel masks, and are used since API <pre><code> BASE </code></pre> . For input and output, they imply a positional nature - the location of a speaker or a microphone for recording or playback. <br> For a channel position mask, each allowed channel position corresponds to a bit in the channel mask. If that channel position is present in the audio frame, that bit is set, otherwise it is zero. The order of the bits (from lsb to msb) corresponds to the order of that position's sample in the audio frame. <br> The canonical channel position masks by channel count are as follows: <br> <table> <tr> <td> channel count </td> <td> channel position mask </td> </tr> <tr> <td> 1 </td> <td> <pre><code> CHANNEL_OUT_MONO </code></pre> </td> </tr> <tr> <td> 2 </td> <td> <pre><code> CHANNEL_OUT_STEREO </code></pre> </td> </tr> <tr> <td> 3 </td> <td> <pre><code> CHANNEL_OUT_STEREO </code></pre> | <pre><code> CHANNEL_OUT_FRONT_CENTER </code></pre> </td> </tr> <tr> <td> 4 </td> <td> <pre><code> CHANNEL_OUT_QUAD </code></pre> </td> </tr> <tr> <td> 5 </td> <td> <pre><code> CHANNEL_OUT_QUAD </code></pre> | <pre><code> CHANNEL_OUT_FRONT_CENTER </code></pre> </td> </tr> <tr> <td> 6 </td> <td> <pre><code> CHANNEL_OUT_5POINT1 </code></pre> </td> </tr> <tr> <td> 7 </td> <td> <pre><code> CHANNEL_OUT_5POINT1 </code></pre> | <pre><code> CHANNEL_OUT_BACK_CENTER </code></pre> </td> </tr> <tr> <td> 8 </td> <td> <pre><code> CHANNEL_OUT_7POINT1_SURROUND </code></pre> </td> </tr> </table> <br> These masks are an ORed composite of individual channel masks. For example <pre><code> CHANNEL_OUT_STEREO </code></pre> is composed of <pre><code> CHANNEL_OUT_FRONT_LEFT </code></pre> and <pre><code> CHANNEL_OUT_FRONT_RIGHT </code></pre> . <h5 id="channelIndexMask"> Channel index masks </h5> Channel index masks are introduced in API <pre><code> M </code></pre> . They allow the selection of a particular channel from the source or sink endpoint by number, i.e. the first channel, the second channel, and so forth. This avoids problems with artificially assigning positions to channels of an endpoint, or figuring what the i <sup> th </sup> position bit is within an endpoint's channel position mask etc. <br> Here's an example where channel index masks address this confusion: dealing with a 4 channel USB device. Using a position mask, and based on the channel count, this would be a <pre><code> CHANNEL_OUT_QUAD </code></pre> device, but really one is only interested in channel 0 through channel 3. The USB device would then have the following individual bit channel masks: <pre><code> CHANNEL_OUT_FRONT_LEFT </code></pre> , <pre><code> CHANNEL_OUT_FRONT_RIGHT </code></pre> , <pre><code> CHANNEL_OUT_BACK_LEFT </code></pre> and <pre><code> CHANNEL_OUT_BACK_RIGHT </code></pre> . But which is channel 0 and which is channel 3? <br> For a channel index mask, each channel number is represented as a bit in the mask, from the lsb (channel 0) upwards to the msb, numerically this bit value is <pre><code> 1 &lt;&lt; channelNumber </code></pre> . A set bit indicates that channel is present in the audio frame, otherwise it is cleared. The order of the bits also correspond to that channel number's sample order in the audio frame. <br> For the previous 4 channel USB device example, the device would have a channel index mask <pre><code> 0xF </code></pre> . Suppose we wanted to select only the first and the third channels; this would correspond to a channel index mask <pre><code> 0x5 </code></pre> (the first and third bits set). If an <pre><code> AudioTrack </code></pre> uses this channel index mask, the audio frame would consist of two samples, the first sample of each frame routed to channel 0, and the second sample of each frame routed to channel 2. The canonical channel index masks by channel count are given by the formula <pre><code> (1 &lt;&lt; channelCount) - 1 </code></pre> . <h5> Use cases </h5> <ul> <li> <i> Channel position mask for an endpoint: </i> <pre><code> CHANNEL_OUT_FRONT_LEFT </code></pre> , <pre><code> CHANNEL_OUT_FRONT_CENTER </code></pre> , etc. for HDMI home theater purposes. <li> <i> Channel position mask for an audio stream: </i> Creating an <pre><code> AudioTrack </code></pre> to output movie content, where 5.1 multichannel output is to be written. <li> <i> Channel index mask for an endpoint: </i> USB devices for which input and output do not correspond to left or right speaker or microphone. <li> <i> Channel index mask for an audio stream: </i> An <pre><code> AudioRecord </code></pre> may only want the third and fourth audio channels of the endpoint (i.e. the second channel pair), and not care the about position it corresponds to, in which case the channel index mask is <pre><code> 0xC </code></pre> . Multichannel <pre><code> AudioRecord </code></pre> sessions should use channel index masks. </li> </li> </li> </li> </ul> <h4 id="audioFrame"> Audio Frame </h4> <p> For linear PCM, an audio frame consists of a set of samples captured at the same time, whose count and channel association are given by the channel mask , and whose sample contents are specified by the encoding . For example, a stereo 16 bit PCM frame consists of two 16 bit linear PCM samples, with a frame size of 4 bytes. For compressed audio, an audio frame may alternately refer to an access unit of compressed data bytes that is logically grouped together for decoding and bitstream access (e.g. <pre><code> MediaCodec </code></pre> ), or a single byte of compressed data (e.g. <pre><code> AudioTrack.getBufferSizeInFrames() </code></pre> ), or the linear PCM frame result from decoding the compressed data (e.g. <pre><code> AudioTrack.getPlaybackHeadPosition() </code></pre> ), depending on the context where audio frame is used. </p><pre><code>public final class AudioFormat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/AudioFormat.html
AudioManager.AudioRecordingCallback	A										<section class="prog__container"><p> Interface for receiving update notifications about the recording configuration. Extend this abstract class and register it with <pre><code> registerAudioRecordingCallback(AudioRecordingCallback, Handler) </code></pre> to be notified. Use <pre><code> getActiveRecordingConfigurations() </code></pre> to query the current configuration.</p><pre><code>public static abstract class AudioManager.AudioRecordingCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/AudioManager.AudioRecordingCallback.html
AudioManager	A										<section class="prog__container"><p> AudioManager provides access to volume and ringer mode control. <p> Use <pre><code> Context.getSystemService(Context.AUDIO_SERVICE) </code></pre> to get an instance of this class. </p><pre><code>public class AudioManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/AudioManager.html
AudioManager.OnAudioFocusChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the audio focus of the system is updated.</p><pre><code>public static interface AudioManager.OnAudioFocusChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/media/AudioManager.OnAudioFocusChangeListener.html
AudioRecord.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> AudioRecord </code></pre> objects. Use this class to configure and create an <pre><code> AudioRecord </code></pre> instance. By setting the recording source and audio format parameters, you indicate which of those vary from the default behavior on the device. <p> Here is an example where <pre><code> Builder </code></pre> is used to specify all <pre><code> AudioFormat </code></pre> parameters, to be used by a new <pre><code> AudioRecord </code></pre> instance: <pre class="prettyprint"> AudioRecord recorder = new AudioRecord.Builder() .setAudioSource(MediaRecorder.AudioSource.VOICE_COMMUNICATION) .setAudioFormat(new AudioFormat.Builder() .setEncoding(AudioFormat.ENCODING_PCM_16BIT) .setSampleRate(32000) .setChannelMask(AudioFormat.CHANNEL_IN_MONO) .build()) .setBufferSize(2*minBuffSize) .build(); </pre> <p> If the audio source is not set with <pre><code> setAudioSource(int) </code></pre> , <pre><code> DEFAULT </code></pre> is used. <br> If the audio format is not specified or is incomplete, its channel configuration will be <pre><code> CHANNEL_IN_MONO </code></pre> , and the encoding will be <pre><code> ENCODING_PCM_16BIT </code></pre> . The sample rate will depend on the device actually selected for capture and can be queried with <pre><code> getSampleRate() </code></pre> method. <br> If the buffer size is not specified with <pre><code> setBufferSizeInBytes(int) </code></pre> , the minimum buffer size for the source is used. </br> </br> </p><pre><code>public static class AudioRecord.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/AudioRecord.Builder.html
AudioRecord	A										<section class="prog__container"><p> The AudioRecord class manages the audio resources for Java applications to record audio from the audio input hardware of the platform. This is achieved by "pulling" (reading) the data from the AudioRecord object. The application is responsible for polling the AudioRecord object in time using one of the following three methods: <pre><code> read(byte[], int, int) </code></pre> , <pre><code> read(short[], int, int) </code></pre> or <pre><code> read(ByteBuffer, int) </code></pre> . The choice of which method to use will be based on the audio data storage format that is the most convenient for the user of AudioRecord. <p> Upon creation, an AudioRecord object initializes its associated audio buffer that it will fill with the new audio data. The size of this buffer, specified during the construction, determines how long an AudioRecord can record before "over-running" data that has not been read yet. Data should be read from the audio hardware in chunks of sizes inferior to the total recording buffer size. </p><pre><code>public class AudioRecord\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/AudioRecord.html
AudioRecord.OnRecordPositionUpdateListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when an AudioRecord has reached a notification marker set by <pre><code> setNotificationMarkerPosition(int) </code></pre> or for periodic updates on the progress of the record head, as set by <pre><code> setPositionNotificationPeriod(int) </code></pre> .</p><pre><code>public static interface AudioRecord.OnRecordPositionUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/media/AudioRecord.OnRecordPositionUpdateListener.html
AudioRecord.OnRoutingChangedListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 24. </strong> <br/> users should switch to the general purpose <pre><code> AudioRouting.OnRoutingChangedListener </code></pre> class instead. </p><pre><code>public static interface AudioRecord.OnRoutingChangedListener\nimplements AudioRouting.OnRoutingChangedListener</code></pre></section>	https://developer.android.com/reference/android/media/AudioRecord.OnRoutingChangedListener.html
AudioRecordingConfiguration	A										<section class="prog__container"><p> The AudioRecordingConfiguration class collects the information describing an audio recording session. <p> Direct polling (see <pre><code> getActiveRecordingConfigurations() </code></pre> ) or callback (see <pre><code> registerAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback, android.os.Handler) </code></pre> methods are ways to receive information about the current recording configuration of the device. <p> An audio recording configuration contains information about the recording format as used by the application ( <pre><code> getClientFormat() </code></pre> , as well as the recording format actually used by the device ( <pre><code> getFormat() </code></pre> ). The two recording formats may, for instance, be at different sampling rates due to hardware limitations (e.g. application recording at 44.1kHz whereas the device always records at 48kHz, and the Android framework resamples for the application). <p> The configuration also contains the use case for which audio is recorded ( <pre><code> getClientAudioSource() </code></pre> ), enabling the ability to distinguish between different activities such as ongoing voice recognition or camcorder recording. </p><pre><code>public final class AudioRecordingConfiguration\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/AudioRecordingConfiguration.html
AudioRouting	A										<section class="prog__container"><p> AudioRouting defines an interface for controlling routing and routing notifications in AudioTrack and AudioRecord objects.</p><pre><code>public interface AudioRouting\n</code></pre></section>	https://developer.android.com/reference/android/media/AudioRouting.html
AudioRouting.OnRoutingChangedListener	A										<section class="prog__container"><p> Defines the interface by which applications can receive notifications of routing changes for the associated <pre><code> AudioRouting </code></pre> .</p><pre><code>public static interface AudioRouting.OnRoutingChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/media/AudioRouting.OnRoutingChangedListener.html
AudioTimestamp	A										<section class="prog__container"><p> Structure that groups a position in frame units relative to an assumed audio stream, together with the estimated time when that frame enters or leaves the audio processing pipeline on that device. This can be used to coordinate events and interactions with the external environment. <p> The time is based on the implementation's best effort, using whatever knowledge is available to the system, but cannot account for any delay unknown to the implementation. </p><pre><code>public final class AudioTimestamp\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/AudioTimestamp.html
AudioTrack.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> AudioTrack </code></pre> objects. Use this class to configure and create an <pre><code> AudioTrack </code></pre> instance. By setting audio attributes and audio format parameters, you indicate which of those vary from the default behavior on the device. <p> Here is an example where <pre><code> Builder </code></pre> is used to specify all <pre><code> AudioFormat </code></pre> parameters, to be used by a new <pre><code> AudioTrack </code></pre> instance: <pre class="prettyprint"> AudioTrack player = new AudioTrack.Builder() .setAudioAttributes(new AudioAttributes.Builder() .setUsage(AudioAttributes.USAGE_ALARM) .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC) .build()) .setAudioFormat(new AudioFormat.Builder() .setEncoding(AudioFormat.ENCODING_PCM_16BIT) .setSampleRate(44100) .setChannelMask(AudioFormat.CHANNEL_OUT_STEREO) .build()) .setBufferSizeInBytes(minBuffSize) .build(); </pre> <p> If the audio attributes are not set with <pre><code> setAudioAttributes(AudioAttributes) </code></pre> , attributes comprising <pre><code> USAGE_MEDIA </code></pre> will be used. <br> If the audio format is not specified or is incomplete, its channel configuration will be <pre><code> CHANNEL_OUT_STEREO </code></pre> and the encoding will be <pre><code> ENCODING_PCM_16BIT </code></pre> . The sample rate will depend on the device actually selected for playback and can be queried with <pre><code> getSampleRate() </code></pre> method. <br> If the buffer size is not specified with <pre><code> setBufferSizeInBytes(int) </code></pre> , and the mode is <pre><code> MODE_STREAM </code></pre> , the minimum buffer size is used. <br> If the transfer mode is not specified with <pre><code> setTransferMode(int) </code></pre> , <pre><code> MODE_STREAM </code></pre> will be used. <br> If the session ID is not specified with <pre><code> setSessionId(int) </code></pre> , a new one will be generated. </br> </br> </br> </br> </p><pre><code>public static class AudioTrack.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/AudioTrack.Builder.html
AudioTrack	A										<section class="prog__container"><p> The AudioTrack class manages and plays a single audio resource for Java applications. It allows streaming of PCM audio buffers to the audio sink for playback. This is achieved by "pushing" the data to the AudioTrack object using one of the <pre><code> write(byte[], int, int) </code></pre> , <pre><code> write(short[], int, int) </code></pre> , and <pre><code> write(float[], int, int, int) </code></pre> methods. <p> An AudioTrack instance can operate under two modes: static or streaming. <br> In Streaming mode, the application writes a continuous stream of data to the AudioTrack, using one of the <pre><code> write() </code></pre> methods. These are blocking and return when the data has been transferred from the Java layer to the native layer and queued for playback. The streaming mode is most useful when playing blocks of audio data that for instance are: <ul> <li> too big to fit in memory because of the duration of the sound to play, </li> <li> too big to fit in memory because of the characteristics of the audio data (high sampling rate, bits per sample ...) </li> <li> received or generated while previously queued audio is playing. </li> </ul> The static mode should be chosen when dealing with short sounds that fit in memory and that need to be played with the smallest latency possible. The static mode will therefore be preferred for UI and game sounds that are played often, and with the smallest overhead possible. <p> Upon creation, an AudioTrack object initializes its associated audio buffer. The size of this buffer, specified during the construction, determines how long an AudioTrack can play before running out of data. <br> For an AudioTrack using the static mode, this size is the maximum size of the sound that can be played from it. <br> For the streaming mode, data will be written to the audio sink in chunks of sizes less than or equal to the total buffer size. AudioTrack is not final and thus permits subclasses, but such use is not recommended. </br> </br> </p><pre><code>public class AudioTrack\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/AudioTrack.html
AudioTrack.OnPlaybackPositionUpdateListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the playback head position of an AudioTrack has reached a notification marker or has increased by a certain period.</p><pre><code>public static interface AudioTrack.OnPlaybackPositionUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/media/AudioTrack.OnPlaybackPositionUpdateListener.html
AudioTrack.OnRoutingChangedListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 24. </strong> <br/> users should switch to the general purpose <pre><code> AudioRouting.OnRoutingChangedListener </code></pre> class instead. </p><pre><code>public static interface AudioTrack.OnRoutingChangedListener\nimplements AudioRouting.OnRoutingChangedListener</code></pre></section>	https://developer.android.com/reference/android/media/AudioTrack.OnRoutingChangedListener.html
CamcorderProfile	A										<section class="prog__container"><p> Retrieves the predefined camcorder profile settings for camcorder applications. These settings are read-only. <p> The compressed output from a recording session with a given CamcorderProfile contains two tracks: one for audio and one for video. <p> Each profile specifies the following set of parameters: <ul> <li> The file output format <li> Video codec format <li> Video bit rate in bits per second <li> Video frame rate in frames per second <li> Video frame width and height, <li> Audio codec format <li> Audio bit rate in bits per second, <li> Audio sample rate <li> Number of audio channels for recording. </li> </li> </li> </li> </li> </li> </li> </li> </li> </ul> </p><pre><code>public class CamcorderProfile\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/CamcorderProfile.html
CameraProfile	A										<section class="prog__container"><p> The CameraProfile class is used to retrieve the pre-defined still image capture (jpeg) quality levels (0-100) used for low, medium, and high quality settings in the Camera application.</p><pre><code>public class CameraProfile\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/CameraProfile.html
DeniedByServerException	A										<section class="prog__container"><p> Exception thrown when the provisioning server or key server denies a certficate or license for a device.</p><pre><code>public final class DeniedByServerException\n</code></pre></section>	https://developer.android.com/reference/android/media/DeniedByServerException.html
DrmInitData	A										<section class="prog__container"><p> Encapsulates initialization data required by a <pre><code> MediaDrm </code></pre> instance.</p><pre><code>public abstract class DrmInitData\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/DrmInitData.html
DrmInitData.SchemeInitData	A										<section class="prog__container"><p> Scheme initialization data.</p><pre><code>public static final class DrmInitData.SchemeInitData\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/DrmInitData.SchemeInitData.html
ExifInterface	A										<section class="prog__container"><p> This is a class for reading and writing Exif tags in a JPEG file or a RAW image file. <p> Supported formats are: JPEG, DNG, CR2, NEF, NRW, ARW, RW2, ORF and RAF. <p> Attribute mutation is supported for JPEG image files. </p><pre><code>public class ExifInterface\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/ExifInterface.html
FaceDetector.Face	A										<section class="prog__container"><p> A Face contains all the information identifying the location of a face in a bitmap.</p><pre><code>public class FaceDetector.Face\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/FaceDetector.Face.html
FaceDetector	A										<section class="prog__container"><p> Identifies the faces of people in a <pre><code> Bitmap </code></pre> graphic object.</p><pre><code>public class FaceDetector\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/FaceDetector.html
Image	A										<section class="prog__container"><p> <p> A single complete image buffer to use with a media source such as a <pre><code> MediaCodec </code></pre> or a <pre><code> CameraDevice </code></pre> . </p><pre><code>public abstract class Image\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/Image.html
Image.Plane	A										<section class="prog__container"><p> <p> A single color plane of image data. </p><pre><code>public static abstract class Image.Plane\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/Image.Plane.html
ImageReader	A										<section class="prog__container"><p> <p> The ImageReader class allows direct application access to image data rendered into a <pre><code> Surface </code></pre> </p><pre><code>public class ImageReader\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/ImageReader.html
ImageReader.OnImageAvailableListener	A										<section class="prog__container"><p> Callback interface for being notified that a new image is available. <p> The onImageAvailable is called per image basis, that is, callback fires for every new frame available from ImageReader. </p><pre><code>public static interface ImageReader.OnImageAvailableListener\n</code></pre></section>	https://developer.android.com/reference/android/media/ImageReader.OnImageAvailableListener.html
ImageWriter	A										<section class="prog__container"><p> <p> The ImageWriter class allows an application to produce Image data into a <pre><code> Surface </code></pre> , and have it be consumed by another component like <pre><code> CameraDevice </code></pre> . </p><pre><code>public class ImageWriter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/ImageWriter.html
ImageWriter.OnImageReleasedListener	A										<section class="prog__container"><p> ImageWriter callback interface, used to to asynchronously notify the application of various ImageWriter events.</p><pre><code>public static interface ImageWriter.OnImageReleasedListener\n</code></pre></section>	https://developer.android.com/reference/android/media/ImageWriter.OnImageReleasedListener.html
JetPlayer	A										<section class="prog__container"><p> JetPlayer provides access to JET content playback and control. <p> Please refer to the JET Creator User Manual for a presentation of the JET interactive music concept and how to use the JetCreator tool to create content to be player by JetPlayer. <p> Use of the JetPlayer class is based around the playback of a number of JET segments sequentially added to a playback FIFO queue. The rendering of the MIDI content stored in each segment can be dynamically affected by two mechanisms: <ul> <li> tracks in a segment can be muted or unmuted at any moment, individually or through a mask (to change the mute state of multiple tracks at once) </li> <li> parts of tracks in a segment can be played at predefined points in the segment, in order to maintain synchronization with the other tracks in the segment. This is achieved through the notion of "clips", which can be triggered at any time, but that will play only at the right time, as authored in the corresponding JET file. </li> </ul> As a result of the rendering and playback of the JET segments, the user of the JetPlayer instance can receive notifications from the JET engine relative to: <ul> <li> the playback state, </li> <li> the number of segments left to play in the queue, </li> <li> application controller events (CC80-83) to mark points in the MIDI segments. </li> </ul> Use <pre><code> getJetPlayer() </code></pre> to construct a JetPlayer instance. JetPlayer is a singleton class. </p><pre><code>public class JetPlayer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/JetPlayer.html
JetPlayer.OnJetEventListener	A										<section class="prog__container"><p> Handles the notification when the JET engine generates an event.</p><pre><code>public static interface JetPlayer.OnJetEventListener\n</code></pre></section>	https://developer.android.com/reference/android/media/JetPlayer.OnJetEventListener.html
MediaActionSound	A										<section class="prog__container"><p> <p> A class for producing sounds that match those produced by various actions taken by the media and camera APIs. </p><pre><code>public class MediaActionSound\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaActionSound.html
MediaCodec.BufferInfo	A										<section class="prog__container"><p> Per buffer metadata includes an offset and size specifying the range of valid data in the associated codec (output) buffer.</p><pre><code>public static final class MediaCodec.BufferInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaCodec.BufferInfo.html
MediaCodec.Callback	A										<section class="prog__container"><p> MediaCodec callback interface. Used to notify the user asynchronously of various MediaCodec events.</p><pre><code>public static abstract class MediaCodec.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaCodec.Callback.html
MediaCodec.CodecException	A										<section class="prog__container"><p> Thrown when an internal codec error occurs.</p><pre><code>public static final class MediaCodec.CodecException\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaCodec.CodecException.html
MediaCodec.CryptoException	A										<section class="prog__container"><p> Thrown when a crypto error occurs while queueing a secure input buffer.</p><pre><code>public static final class MediaCodec.CryptoException\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaCodec.CryptoException.html
MediaCodec.CryptoInfo	A										<section class="prog__container"><p> Metadata describing the structure of a (at least partially) encrypted input sample. A buffer's data is considered to be partitioned into "subSamples", each subSample starts with a (potentially empty) run of plain, unencrypted bytes followed by a (also potentially empty) run of encrypted bytes. If pattern encryption applies, each of the latter runs is encrypted only partly, according to a repeating pattern of "encrypt" and "skip" blocks. numBytesOfClearData can be null to indicate that all data is encrypted. This information encapsulates per-sample metadata as outlined in ISO/IEC FDIS 23001-7:2011 "Common encryption in ISO base media file format files".</p><pre><code>public static final class MediaCodec.CryptoInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaCodec.CryptoInfo.html
MediaCodec.CryptoInfo.Pattern	A										<section class="prog__container"><p> Metadata describing an encryption pattern for the protected bytes in a subsample. An encryption pattern consists of a repeating sequence of crypto blocks comprised of a number of encrypted blocks followed by a number of unencrypted, or skipped, blocks.</p><pre><code>public static final class MediaCodec.CryptoInfo.Pattern\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaCodec.CryptoInfo.Pattern.html
MediaCodec	A										<section class="prog__container"><p> MediaCodec class can be used to access low-level media codecs, i.e. encoder/decoder components. It is part of the Android low-level multimedia support infrastructure (normally used together with <pre><code> MediaExtractor </code></pre> , <pre><code> MediaSync </code></pre> , <pre><code> MediaMuxer </code></pre> , <pre><code> MediaCrypto </code></pre> , <pre><code> MediaDrm </code></pre> , <pre><code> Image </code></pre> , <pre><code> Surface </code></pre> , and <pre><code> AudioTrack </code></pre> .) <p> <center> <object data="../../../images/media/mediacodec_buffers.svg" style="width: 540px; height: 205px;" type="image/svg+xml"> <img alt="MediaCodec buffer flow diagram" src="https://developer.android.com/images/media/mediacodec_buffers.png" style="width: 540px; height: 205px"/> </object> </center> <p> In broad terms, a codec processes input data to generate output data. It processes data asynchronously and uses a set of input and output buffers. At a simplistic level, you request (or receive) an empty input buffer, fill it up with data and send it to the codec for processing. The codec uses up the data and transforms it into one of its empty output buffers. Finally, you request (or receive) a filled output buffer, consume its contents and release it back to the codec. </p><pre><code>public final class MediaCodec\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaCodec.html
MediaCodec.OnFrameRenderedListener	A										<section class="prog__container"><p> Listener to be called when an output frame has rendered on the output surface</p><pre><code>public static interface MediaCodec.OnFrameRenderedListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaCodec.OnFrameRenderedListener.html
MediaCodecInfo.AudioCapabilities	A										<section class="prog__container"><p> A class that supports querying the audio capabilities of a codec.</p><pre><code>public static final class MediaCodecInfo.AudioCapabilities\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaCodecInfo.AudioCapabilities.html
MediaCodecInfo.CodecCapabilities	A										<section class="prog__container"><p> Encapsulates the capabilities of a given codec component. For example, what profile/level combinations it supports and what colorspaces it is capable of providing the decoded data in, as well as some codec-type specific capability flags. <p> You can get an instance for a given <pre><code> MediaCodecInfo </code></pre> object with <pre><code> getCapabilitiesForType() </code></pre> , passing a MIME type. </p><pre><code>public static final class MediaCodecInfo.CodecCapabilities\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html
MediaCodecInfo.CodecProfileLevel	A										<section class="prog__container"><p> Encapsulates the profiles available for a codec component. <p> You can get a set of <pre><code> MediaCodecInfo.CodecProfileLevel </code></pre> objects for a given <pre><code> MediaCodecInfo </code></pre> object from the <pre><code> profileLevels </code></pre> field. </p><pre><code>public static final class MediaCodecInfo.CodecProfileLevel\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html
MediaCodecInfo.EncoderCapabilities	A										<section class="prog__container"><p> A class that supports querying the encoding capabilities of a codec.</p><pre><code>public static final class MediaCodecInfo.EncoderCapabilities\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaCodecInfo.EncoderCapabilities.html
MediaCodecInfo	A										<section class="prog__container"><p> Provides information about a given media codec available on the device. You can iterate through all codecs available by querying <pre><code> MediaCodecList </code></pre> . For example, here's how to find an encoder that supports a given MIME type: <pre> private static MediaCodecInfo selectCodec(String mimeType) { int numCodecs = MediaCodecList.getCodecCount(); for (int i = 0; i &lt; numCodecs; i++) { MediaCodecInfo codecInfo = MediaCodecList.getCodecInfoAt(i); if (!codecInfo.isEncoder()) { continue; } String[] types = codecInfo.getSupportedTypes(); for (int j = 0; j &lt; types.length; j++) { if (types[j].equalsIgnoreCase(mimeType)) { return codecInfo; } } } return null; }</pre></p><pre><code>public final class MediaCodecInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaCodecInfo.html
MediaCodecInfo.VideoCapabilities	A										<section class="prog__container"><p> A class that supports querying the video capabilities of a codec.</p><pre><code>public static final class MediaCodecInfo.VideoCapabilities\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html
MediaCodecList	A										<section class="prog__container"><p> Allows you to enumerate available codecs, each specified as a <pre><code> MediaCodecInfo </code></pre> object, find a codec supporting a given format and query the capabilities of a given codec. <p> See <pre><code> MediaCodecInfo </code></pre> for sample usage. </p><pre><code>public final class MediaCodecList\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaCodecList.html
MediaCrypto	A										<section class="prog__container"><p> MediaCrypto class can be used in conjunction with <pre><code> MediaCodec </code></pre> to decode encrypted media data. Crypto schemes are assigned 16 byte UUIDs, the method <pre><code> isCryptoSchemeSupported(UUID) </code></pre> can be used to query if a given scheme is supported on the device.</p><pre><code>public final class MediaCrypto\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaCrypto.html
MediaCryptoException	A										<section class="prog__container"><p> Exception thrown if MediaCrypto object could not be instantiated or if unable to perform an operation on the MediaCrypto object.</p><pre><code>public final class MediaCryptoException\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaCryptoException.html
MediaDataSource	A										<section class="prog__container"><p> For supplying media data to the framework. Implement this if your app has special requirements for the way media data is obtained. <p class="note"> Methods of this interface may be called on multiple different threads. There will be a thread synchronization point between each call to ensure that modifications to the state of your MediaDataSource are visible to future calls. This means you don't need to do your own synchronization unless you're modifying the MediaDataSource from another thread while it's being used by the framework. </p><pre><code>public abstract class MediaDataSource\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaDataSource.html
MediaDescription.Builder	A										<section class="prog__container"><p> Builder for <pre><code> MediaDescription </code></pre> objects.</p><pre><code>public static class MediaDescription.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaDescription.Builder.html
MediaDescription	A										<section class="prog__container"><p> A simple set of metadata for a media item suitable for display. This can be created using the Builder or retrieved from existing metadata using <pre><code> getDescription() </code></pre> .</p><pre><code>public class MediaDescription\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaDescription.html
MediaDrm.CryptoSession	A										<section class="prog__container"><p> In addition to supporting decryption of DASH Common Encrypted Media, the MediaDrm APIs provide the ability to securely deliver session keys from an operator's session key server to a client device, based on the factory-installed root of trust, and then perform encrypt, decrypt, sign and verify operations with the session key on arbitrary user data. <p> The CryptoSession class implements generic encrypt/decrypt/sign/verify methods based on the established session keys. These keys are exchanged using the getKeyRequest/provideKeyResponse methods. <p> Applications of this capability could include securing various types of purchased or private content, such as applications, books and other media, photos or media delivery protocols. <p> Operators can create session key servers that are functionally similar to a license key server, except that instead of receiving license key requests and providing encrypted content keys which are used specifically to decrypt A/V media content, the session key server receives session key requests and provides encrypted session keys which can be used for general purpose crypto operations. <p> A CryptoSession is obtained using <pre><code> getCryptoSession(byte[], String, String) </code></pre> </p><pre><code>public final class MediaDrm.CryptoSession\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaDrm.CryptoSession.html
MediaDrm	A										<section class="prog__container"><p> MediaDrm can be used to obtain keys for decrypting protected media streams, in conjunction with <pre><code> MediaCrypto </code></pre> . The MediaDrm APIs are designed to support the ISO/IEC 23001-7: Common Encryption standard, but may also be used to implement other encryption schemes. <p> Encrypted content is prepared using an encryption server and stored in a content library. The encrypted content is streamed or downloaded from the content library to client devices via content servers. Licenses to view the content are obtained from a License Server. <p> <p> <img alt="MediaDrm Overview diagram" border="0" src="https://developer.android.com/images/mediadrm_overview.png"/> </p><pre><code>public final class MediaDrm\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaDrm.html
MediaDrm.KeyRequest	A										<section class="prog__container"><p> Contains the opaque data an app uses to request keys from a license server</p><pre><code>public static final class MediaDrm.KeyRequest\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaDrm.KeyRequest.html
MediaDrm.KeyStatus	A										<section class="prog__container"><p> Defines the status of a key. A KeyStatus for each key in a session is provided to the <pre><code> onKeyStatusChange(MediaDrm, byte[], List <mediadrm.keystatus> , boolean) </mediadrm.keystatus> </code></pre> listener.</p><pre><code>public static final class MediaDrm.KeyStatus\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaDrm.KeyStatus.html
MediaDrm.MediaDrmStateException	A										<section class="prog__container"><p> Thrown when an unrecoverable failure occurs during a MediaDrm operation. Extends java.lang.IllegalStateException with the addition of an error code that may be useful in diagnosing the failure.</p><pre><code>public static final class MediaDrm.MediaDrmStateException\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaDrm.MediaDrmStateException.html
MediaDrm.OnEventListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a drm event occurs</p><pre><code>public static interface MediaDrm.OnEventListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaDrm.OnEventListener.html
MediaDrm.OnExpirationUpdateListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a drm session expiration update occurs</p><pre><code>public static interface MediaDrm.OnExpirationUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaDrm.OnExpirationUpdateListener.html
MediaDrm.OnKeyStatusChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the keys in a drm session change states.</p><pre><code>public static interface MediaDrm.OnKeyStatusChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaDrm.OnKeyStatusChangeListener.html
MediaDrm.ProvisionRequest	A										<section class="prog__container"><p> Contains the opaque data an app uses to request a certificate from a provisioning server</p><pre><code>public static final class MediaDrm.ProvisionRequest\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaDrm.ProvisionRequest.html
MediaDrmException	A										<section class="prog__container"><p> Base class for MediaDrm exceptions</p><pre><code>public class MediaDrmException\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaDrmException.html
MediaDrmResetException	A										<section class="prog__container"><p> This exception is thrown when the MediaDrm instance has become unusable due to a restart of the mediaserver process. To continue, the app must release the MediaDrm object, then create and initialize a new one.</p><pre><code>public class MediaDrmResetException\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaDrmResetException.html
MediaExtractor	A										<section class="prog__container"><p> MediaExtractor facilitates extraction of demuxed, typically encoded, media data from a data source. <p> It is generally used like this: <pre> MediaExtractor extractor = new MediaExtractor(); extractor.setDataSource(...); int numTracks = extractor.getTrackCount(); for (int i = 0; i &lt; numTracks; ++i) { MediaFormat format = extractor.getTrackFormat(i); String mime = format.getString(MediaFormat.KEY_MIME); if (weAreInterestedInThisTrack) { extractor.selectTrack(i); } } ByteBuffer inputBuffer = ByteBuffer.allocate(...) while (extractor.readSampleData(inputBuffer, ...) &gt;= 0) { int trackIndex = extractor.getSampleTrackIndex(); long presentationTimeUs = extractor.getSampleTime(); ... extractor.advance(); } extractor.release(); extractor = null; </pre> </p><pre><code>public final class MediaExtractor\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaExtractor.html
MediaFormat	A										<section class="prog__container"><p> Encapsulates the information describing the format of media data, be it audio or video. The format of the media data is specified as string/value pairs. Keys common to all audio/video formats, <b> all keys not marked optional are mandatory </b> : <table> <tr> <th> Name </th> <th> Value Type </th> <th> Description </th> </tr> <tr> <td> <pre><code> KEY_MIME </code></pre> </td> <td> String </td> <td> The type of the format. </td> </tr> <tr> <td> <pre><code> KEY_MAX_INPUT_SIZE </code></pre> </td> <td> Integer </td> <td> optional, maximum size of a buffer of input data </td> </tr> <tr> <td> <pre><code> KEY_BIT_RATE </code></pre> </td> <td> Integer </td> <td> <b> encoder-only </b> , desired bitrate in bits/second </td> </tr> </table> Video formats have the following keys: <table> <tr> <th> Name </th> <th> Value Type </th> <th> Description </th> </tr> <tr> <td> <pre><code> KEY_WIDTH </code></pre> </td> <td> Integer </td> <td> </td> </tr> <tr> <td> <pre><code> KEY_HEIGHT </code></pre> </td> <td> Integer </td> <td> </td> </tr> <tr> <td> <pre><code> KEY_COLOR_FORMAT </code></pre> </td> <td> Integer </td> <td> set by the user for encoders, readable in the output format of decoders </td> </tr> </table></p><pre><code>public final class MediaFormat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaFormat.html
MediaMetadata.Builder	A										<section class="prog__container"><p> Use to build MediaMetadata objects. The system defined metadata keys must use the appropriate data type.</p><pre><code>public static final class MediaMetadata.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaMetadata.Builder.html
MediaMetadata	A										<section class="prog__container"><p> Contains metadata about an item, such as the title, artist, etc.</p><pre><code>public final class MediaMetadata\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaMetadata.html
MediaMetadataEditor	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> Use <pre><code> MediaMetadata </code></pre> instead together with <pre><code> MediaSession </code></pre> . </p><pre><code>public abstract class MediaMetadataEditor\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaMetadataEditor.html
MediaMetadataRetriever	A										<section class="prog__container"><p> MediaMetadataRetriever class provides a unified interface for retrieving frame and meta data from an input media file.</p><pre><code>public class MediaMetadataRetriever\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaMetadataRetriever.html
MediaMuxer	A										<section class="prog__container"><p> MediaMuxer facilitates muxing elementary streams. Currently supports mp4 or webm file as the output and at most one audio and/or one video elementary stream. MediaMuxer does not support muxing B-frames. <p> It is generally used like this: <pre> MediaMuxer muxer = new MediaMuxer("temp.mp4", OutputFormat.MUXER_OUTPUT_MPEG_4); // More often, the MediaFormat will be retrieved from MediaCodec.getOutputFormat() // or MediaExtractor.getTrackFormat(). MediaFormat audioFormat = new MediaFormat(...); MediaFormat videoFormat = new MediaFormat(...); int audioTrackIndex = muxer.addTrack(audioFormat); int videoTrackIndex = muxer.addTrack(videoFormat); ByteBuffer inputBuffer = ByteBuffer.allocate(bufferSize); boolean finished = false; BufferInfo bufferInfo = new BufferInfo(); muxer.start(); while(!finished) { // getInputBuffer() will fill the inputBuffer with one frame of encoded // sample from either MediaCodec or MediaExtractor, set isAudioSample to // true when the sample is audio data, set up all the fields of bufferInfo, // and return true if there are no more samples. finished = getInputBuffer(inputBuffer, isAudioSample, bufferInfo); if (!finished) { int currentTrackIndex = isAudioSample ? audioTrackIndex : videoTrackIndex; muxer.writeSampleData(currentTrackIndex, inputBuffer, bufferInfo); } }; muxer.stop(); muxer.release(); </pre> </p><pre><code>public final class MediaMuxer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaMuxer.html
MediaMuxer.OutputFormat	A										<section class="prog__container"><p> Defines the output format. These constants are used with constructor.</p><pre><code>public static final class MediaMuxer.OutputFormat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaMuxer.OutputFormat.html
MediaPlayer	A										<section class="prog__container"><p> MediaPlayer class can be used to control playback of audio/video files and streams. An example on how to use the methods in this class can be found in <pre><code> VideoView </code></pre> . <p> Topics covered here are: <ol> <li> State Diagram <li> Valid and Invalid States <li> Permissions <li> Register informational and error callbacks </li> </li> </li> </li> </ol> </p><pre><code>public class MediaPlayer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.html
MediaPlayer.OnBufferingUpdateListener	A										<section class="prog__container"><p> Interface definition of a callback to be invoked indicating buffering status of a media resource being streamed over the network.</p><pre><code>public static interface MediaPlayer.OnBufferingUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.OnBufferingUpdateListener.html
MediaPlayer.OnCompletionListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when playback of a media source has completed.</p><pre><code>public static interface MediaPlayer.OnCompletionListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.OnCompletionListener.html
MediaPlayer.OnErrorListener	A										<section class="prog__container"><p> Interface definition of a callback to be invoked when there has been an error during an asynchronous operation (other errors will throw exceptions at method call time).</p><pre><code>public static interface MediaPlayer.OnErrorListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.OnErrorListener.html
MediaPlayer.OnInfoListener	A										<section class="prog__container"><p> Interface definition of a callback to be invoked to communicate some info and/or warning about the media or its playback.</p><pre><code>public static interface MediaPlayer.OnInfoListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.OnInfoListener.html
MediaPlayer.OnPreparedListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the media source is ready for playback.</p><pre><code>public static interface MediaPlayer.OnPreparedListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.OnPreparedListener.html
MediaPlayer.OnSeekCompleteListener	A										<section class="prog__container"><p> Interface definition of a callback to be invoked indicating the completion of a seek operation.</p><pre><code>public static interface MediaPlayer.OnSeekCompleteListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.OnSeekCompleteListener.html
MediaPlayer.OnTimedMetaDataAvailableListener	A										<section class="prog__container"><p> Interface definition of a callback to be invoked when a track has timed metadata available.</p><pre><code>public static interface MediaPlayer.OnTimedMetaDataAvailableListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.OnTimedMetaDataAvailableListener.html
MediaPlayer.OnTimedTextListener	A										<section class="prog__container"><p> Interface definition of a callback to be invoked when a timed text is available for display.</p><pre><code>public static interface MediaPlayer.OnTimedTextListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.OnTimedTextListener.html
MediaPlayer.OnVideoSizeChangedListener	A										<section class="prog__container"><p> Interface definition of a callback to be invoked when the video size is first known or updated</p><pre><code>public static interface MediaPlayer.OnVideoSizeChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.OnVideoSizeChangedListener.html
MediaPlayer.TrackInfo	A										<section class="prog__container"><p> Class for MediaPlayer to return each audio/video/subtitle track's metadata.</p><pre><code>public static class MediaPlayer.TrackInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html
MediaRecorder.AudioEncoder	A										<section class="prog__container"><p> Defines the audio encoding. These constants are used with <pre><code> setAudioEncoder(int) </code></pre> .</p><pre><code>public final class MediaRecorder.AudioEncoder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaRecorder.AudioEncoder.html
MediaRecorder.AudioSource	A										<section class="prog__container"><p> Defines the audio source. An audio source defines both a default physical source of audio signal, and a recording configuration. These constants are for instance used in <pre><code> setAudioSource(int) </code></pre> or <pre><code> setAudioSource(int) </code></pre> .</p><pre><code>public final class MediaRecorder.AudioSource\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaRecorder.AudioSource.html
MediaRecorder	A										<section class="prog__container"><p> Used to record audio and video. The recording control is based on a simple state machine (see below). <p> <img border="0" src="https://developer.android.com/images/mediarecorder_state_diagram.gif"/> </p><pre><code>public class MediaRecorder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaRecorder.html
MediaRecorder.OnErrorListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when an error occurs while recording.</p><pre><code>public static interface MediaRecorder.OnErrorListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaRecorder.OnErrorListener.html
MediaRecorder.OnInfoListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when an error occurs while recording.</p><pre><code>public static interface MediaRecorder.OnInfoListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaRecorder.OnInfoListener.html
MediaRecorder.OutputFormat	A										<section class="prog__container"><p> Defines the output format. These constants are used with <pre><code> setOutputFormat(int) </code></pre> .</p><pre><code>public final class MediaRecorder.OutputFormat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaRecorder.OutputFormat.html
MediaRecorder.VideoEncoder	A										<section class="prog__container"><p> Defines the video encoding. These constants are used with <pre><code> setVideoEncoder(int) </code></pre> .</p><pre><code>public final class MediaRecorder.VideoEncoder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaRecorder.VideoEncoder.html
MediaRecorder.VideoSource	A										<section class="prog__container"><p> Defines the video source. These constants are used with <pre><code> setVideoSource(int) </code></pre> .</p><pre><code>public final class MediaRecorder.VideoSource\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaRecorder.VideoSource.html
MediaRouter.Callback	A										<section class="prog__container"><p> Interface for receiving events about media routing changes. All methods of this interface will be called from the application's main thread. <p> A Callback will only receive events relevant to routes that the callback was registered for unless the <pre><code> CALLBACK_FLAG_UNFILTERED_EVENTS </code></pre> flag was specified in <pre><code> addCallback(int, Callback, int) </code></pre> . </p><pre><code>public static abstract class MediaRouter.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaRouter.Callback.html
MediaRouter	A										<section class="prog__container"><p> MediaRouter allows applications to control the routing of media channels and streams from the current device to external speakers and destination devices. <p> A MediaRouter is retrieved through <pre><code> Context.getSystemService() </code></pre> of a <pre><code> Context.MEDIA_ROUTER_SERVICE </code></pre> . <p> The media router API is not thread-safe; all interactions with it must be done from the main thread of the process. </p><pre><code>public class MediaRouter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaRouter.html
MediaRouter.RouteCategory	A										<section class="prog__container"><p> Definition of a category of routes. All routes belong to a category.</p><pre><code>public static class MediaRouter.RouteCategory\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaRouter.RouteCategory.html
MediaRouter.RouteGroup	A										<section class="prog__container"><p> Information about a route that consists of multiple other routes in a group.</p><pre><code>public static class MediaRouter.RouteGroup\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaRouter.RouteGroup.html
MediaRouter.RouteInfo	A										<section class="prog__container"><p> Information about a media route.</p><pre><code>public static class MediaRouter.RouteInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html
MediaRouter.SimpleCallback	A										<section class="prog__container"><p> Stub implementation of <pre><code> MediaRouter.Callback </code></pre> . Each abstract method is defined as a no-op. Override just the ones you need.</p><pre><code>public static class MediaRouter.SimpleCallback\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaRouter.SimpleCallback.html
MediaRouter.UserRouteInfo	A										<section class="prog__container"><p> Information about a route that the application may define and modify. A user route defaults to <pre><code> PLAYBACK_TYPE_REMOTE </code></pre> and <pre><code> PLAYBACK_VOLUME_FIXED </code></pre> .</p><pre><code>public static class MediaRouter.UserRouteInfo\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html
MediaRouter.VolumeCallback	A										<section class="prog__container"><p> Interface for receiving events about volume changes. All methods of this interface will be called from the application's main thread. <p> A VolumeCallback will only receive events relevant to routes that the callback was registered for. </p><pre><code>public static abstract class MediaRouter.VolumeCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaRouter.VolumeCallback.html
MediaScannerConnection	A										<section class="prog__container"><p> MediaScannerConnection provides a way for applications to pass a newly created or downloaded media file to the media scanner service. The media scanner service will read metadata from the file and add the file to the media content provider. The MediaScannerConnectionClient provides an interface for the media scanner service to return the Uri for a newly scanned file to the client of the MediaScannerConnection class.</p><pre><code>public class MediaScannerConnection\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaScannerConnection.html
MediaScannerConnection.MediaScannerConnectionClient	A										<section class="prog__container"><p> An interface for notifying clients of MediaScannerConnection when a connection to the MediaScanner service has been established and when the scanning of a file has completed.</p><pre><code>public static interface MediaScannerConnection.MediaScannerConnectionClient\nimplements MediaScannerConnection.OnScanCompletedListener</code></pre></section>	https://developer.android.com/reference/android/media/MediaScannerConnection.MediaScannerConnectionClient.html
MediaScannerConnection.OnScanCompletedListener	A										<section class="prog__container"><p> Interface for notifying clients of the result of scanning a requested media file.</p><pre><code>public static interface MediaScannerConnection.OnScanCompletedListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaScannerConnection.OnScanCompletedListener.html
MediaSync.Callback	A										<section class="prog__container"><p> MediaSync callback interface. Used to notify the user asynchronously of various MediaSync events.</p><pre><code>public static abstract class MediaSync.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaSync.Callback.html
MediaSync	A										<section class="prog__container"><pre><code>public final class MediaSync\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaSync.html
MediaSync.OnErrorListener	A										<section class="prog__container"><p> Interface definition of a callback to be invoked when there has been an error during an asynchronous operation (other errors will throw exceptions at method call time).</p><pre><code>public static interface MediaSync.OnErrorListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaSync.OnErrorListener.html
MediaSyncEvent	A										<section class="prog__container"><p> The MediaSyncEvent class defines events that can be used to synchronize playback or capture actions between different players and recorders. <p> For instance, <pre><code> startRecording(MediaSyncEvent) </code></pre> is used to start capture only when the playback on a particular audio session is complete. The audio session ID is retrieved from a player (e.g <pre><code> MediaPlayer </code></pre> , <pre><code> AudioTrack </code></pre> or <pre><code> ToneGenerator </code></pre> ) by use of the getAudioSessionId() method. </p><pre><code>public class MediaSyncEvent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaSyncEvent.html
MediaTimestamp	A										<section class="prog__container"><p> An immutable object that represents the linear correlation between the media time and the system time. It contains the media clock rate, together with the media timestamp of an anchor frame and the system time when that frame was presented or is committed to be presented. <p> The phrase "present" means that audio/video produced on device is detectable by an external observer off device. The time is based on the implementation's best effort, using whatever knowledge is available to the system, but cannot account for any delay unknown to the implementation. The anchor frame could be any frame, including a just-rendered frame, or even a theoretical or in-between frame, based on the source of the MediaTimestamp. When the anchor frame is a just-rendered one, the media time stands for current position of the playback or recording. </p><pre><code>public final class MediaTimestamp\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/MediaTimestamp.html
NotProvisionedException	A										<section class="prog__container"><p> Exception thrown when an operation on a MediaDrm object is attempted and the device does not have a certificate. The app should obtain and install a certificate using the MediaDrm provisioning methods then retry the operation.</p><pre><code>public final class NotProvisionedException\n</code></pre></section>	https://developer.android.com/reference/android/media/NotProvisionedException.html
android.media	A										<section class="prog__container">The Media APIs are used to play and, in some cases, record media files. This includesaudio (e.g., play MP3s or other music files, ringtones, game sound effects, or DTMF tones)and video (e.g., play a video streamed over the web or from local storage).</section>	https://developer.android.com/reference/android/media/package-summary.html
PlaybackParams	A										<section class="prog__container"><p> Structure for common playback params. Used by <pre><code> AudioTrack </code></pre> <pre><code> getPlaybackParams() </code></pre> and <pre><code> setPlaybackParams(PlaybackParams) </code></pre> to control playback behavior. <p> <strong> audio fallback mode: </strong> select out-of-range parameter handling. <ul> <li> <pre><code> AUDIO_FALLBACK_MODE_DEFAULT </code></pre> : System will determine best handling. </li> <li> <pre><code> AUDIO_FALLBACK_MODE_MUTE </code></pre> : Play silence for params normally out of range. </li> <li> <pre><code> AUDIO_FALLBACK_MODE_FAIL </code></pre> : Return <pre><code> IllegalArgumentException </code></pre> from <pre><code> AudioTrack.setPlaybackParams(PlaybackParams) </code></pre> . </li> </ul> <p> <strong> pitch: </strong> increases or decreases the tonal frequency of the audio content. It is expressed as a multiplicative factor, where normal pitch is 1.0f. <p> <strong> speed: </strong> increases or decreases the time to play back a set of audio or video frames. It is expressed as a multiplicative factor, where normal speed is 1.0f. <p> Different combinations of speed and pitch may be used for audio playback; some common ones: <ul> <li> <em> Pitch equals 1.0f. </em> Speed change will be done with pitch preserved, often called <em> timestretching </em> . </li> <li> <em> Pitch equals speed. </em> Speed change will be done by <em> resampling </em> , similar to <pre><code> setPlaybackRate(int) </code></pre> . </li> </ul> </p><pre><code>public final class PlaybackParams\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/PlaybackParams.html
Rating	A										<section class="prog__container"><p> A class to encapsulate rating information used as content metadata. A rating is defined by its rating style (see <pre><code> RATING_HEART </code></pre> , <pre><code> RATING_THUMB_UP_DOWN </code></pre> , <pre><code> RATING_3_STARS </code></pre> , <pre><code> RATING_4_STARS </code></pre> , <pre><code> RATING_5_STARS </code></pre> or <pre><code> RATING_PERCENTAGE </code></pre> ) and the actual rating value (which may be defined as "unrated"), both of which are defined when the rating instance is constructed through one of the factory methods.</p><pre><code>public final class Rating\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/Rating.html
RemoteControlClient	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> Use <pre><code> MediaSession </code></pre> instead. </p><pre><code>public class RemoteControlClient\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/RemoteControlClient.html
RemoteControlClient.MetadataEditor	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> Use <pre><code> MediaMetadata </code></pre> and <pre><code> MediaSession </code></pre> instead. </p><pre><code>public class RemoteControlClient.MetadataEditor\n</code></pre></section>	https://developer.android.com/reference/android/media/RemoteControlClient.MetadataEditor.html
RemoteControlClient.OnGetPlaybackPositionListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the media playback position is queried.</p><pre><code>public static interface RemoteControlClient.OnGetPlaybackPositionListener\n</code></pre></section>	https://developer.android.com/reference/android/media/RemoteControlClient.OnGetPlaybackPositionListener.html
RemoteControlClient.OnMetadataUpdateListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when one of the metadata values has been updated. Implement this interface to receive metadata updates after registering your listener through <pre><code> setMetadataUpdateListener(OnMetadataUpdateListener) </code></pre> .</p><pre><code>public static interface RemoteControlClient.OnMetadataUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/media/RemoteControlClient.OnMetadataUpdateListener.html
RemoteControlClient.OnPlaybackPositionUpdateListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the media playback position is requested to be updated.</p><pre><code>public static interface RemoteControlClient.OnPlaybackPositionUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/media/RemoteControlClient.OnPlaybackPositionUpdateListener.html
RemoteController	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> Use <pre><code> MediaController </code></pre> instead. </p><pre><code>public final class RemoteController\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/RemoteController.html
RemoteController.MetadataEditor	A										<section class="prog__container"><p> A class to read the metadata published by a <pre><code> RemoteControlClient </code></pre> , or send a <pre><code> RemoteControlClient </code></pre> new values for keys that can be edited.</p><pre><code>public class RemoteController.MetadataEditor\n</code></pre></section>	https://developer.android.com/reference/android/media/RemoteController.MetadataEditor.html
RemoteController.OnClientUpdateListener	A										<section class="prog__container"><p> Interface definition for the callbacks to be invoked whenever media events, metadata and playback status are available.</p><pre><code>public static interface RemoteController.OnClientUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/media/RemoteController.OnClientUpdateListener.html
ResourceBusyException	A										<section class="prog__container"><p> Exception thrown when an operation on a MediaDrm object is attempted and hardware resources are not available, due to being in use.</p><pre><code>public final class ResourceBusyException\n</code></pre></section>	https://developer.android.com/reference/android/media/ResourceBusyException.html
Ringtone	A										<section class="prog__container"><p> Ringtone provides a quick method for playing a ringtone, notification, or other similar types of sounds. <p> For ways of retrieving <pre><code> Ringtone </code></pre> objects or to show a ringtone picker, see <pre><code> RingtoneManager </code></pre> . </p><pre><code>public class Ringtone\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/Ringtone.html
RingtoneManager	A										<section class="prog__container"><p> RingtoneManager provides access to ringtones, notification, and other types of sounds. It manages querying the different media providers and combines the results into a single cursor. It also provides a <pre><code> Ringtone </code></pre> for each ringtone. We generically call these sounds ringtones, however the <pre><code> TYPE_RINGTONE </code></pre> refers to the type of sounds that are suitable for the phone ringer. <p> To show a ringtone picker to the user, use the <pre><code> ACTION_RINGTONE_PICKER </code></pre> intent to launch the picker as a subactivity. </p><pre><code>public class RingtoneManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/RingtoneManager.html
SoundPool.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> SoundPool </code></pre> objects.</p><pre><code>public static class SoundPool.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/SoundPool.Builder.html
SoundPool	A										<section class="prog__container"><p> The SoundPool class manages and plays audio resources for applications. <p> A SoundPool is a collection of samples that can be loaded into memory from a resource inside the APK or from a file in the file system. The SoundPool library uses the MediaPlayer service to decode the audio into a raw 16-bit PCM mono or stereo stream. This allows applications to ship with compressed streams without having to suffer the CPU load and latency of decompressing during playback. </p><pre><code>public class SoundPool\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/SoundPool.html
SoundPool.OnLoadCompleteListener	A										<section class="prog__container"><p> Called when a sound has completed loading.</p><pre><code>public static interface SoundPool.OnLoadCompleteListener\n</code></pre></section>	https://developer.android.com/reference/android/media/SoundPool.OnLoadCompleteListener.html
SyncParams	A										<section class="prog__container"><p> Structure for common A/V sync params. Used by <pre><code> MediaSync </code></pre> {link MediaSync#getSyncParams()} and {link MediaSync#setSyncParams(SyncParams)} to control A/V sync behavior. <p> <strong> audio adjust mode: </strong> select handling of audio track when changing playback speed due to sync. <ul> <li> <pre><code> AUDIO_ADJUST_MODE_DEFAULT </code></pre> : System will determine best handling. </li> <li> <pre><code> AUDIO_ADJUST_MODE_STRETCH </code></pre> : Change the speed of audio playback without altering its pitch. </li> <li> <pre><code> AUDIO_ADJUST_MODE_RESAMPLE </code></pre> : Change the speed of audio playback by resampling the audio. </li> </ul> <p> <strong> sync source: </strong> select clock source for sync. <ul> <li> <pre><code> SYNC_SOURCE_DEFAULT </code></pre> : System will determine best selection. </li> <li> <pre><code> SYNC_SOURCE_SYSTEM_CLOCK </code></pre> : Use system clock for sync source. </li> <li> <pre><code> SYNC_SOURCE_AUDIO </code></pre> : Use audio track for sync source. </li> <li> <pre><code> SYNC_SOURCE_VSYNC </code></pre> : Syncronize media to vsync. </li> </ul> <p> <strong> tolerance: </strong> specifies the amount of allowed playback rate change to keep media in sync with the sync source. The handling of this depends on the sync source, but must not be negative, and must be less than one. <p> <strong> frameRate: </strong> initial hint for video frame rate. Used when sync source is vsync. Negative values can be used to clear a previous hint. </p><pre><code>public final class SyncParams\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/SyncParams.html
ThumbnailUtils	A										<section class="prog__container"><p> Thumbnail generation routines for media provider.</p><pre><code>public class ThumbnailUtils\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/ThumbnailUtils.html
TimedMetaData	A										<section class="prog__container"><p> Class that embodies one timed metadata access unit, including <ul> <li> a time stamp, and </li> <li> raw uninterpreted byte-array extracted directly from the container. </li> </ul></p><pre><code>public final class TimedMetaData\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/TimedMetaData.html
TimedText	A										<section class="prog__container"><p> Class to hold the timed text's metadata, including: <ul> <li> The characters for rendering </li> <li> The rendering position for the timed text </li> </ul> <p> To render the timed text, applications need to do the following: <ul> <li> Implement the <pre><code> MediaPlayer.OnTimedTextListener </code></pre> interface </li> <li> Register the <pre><code> MediaPlayer.OnTimedTextListener </code></pre> callback on a MediaPlayer object that is used for playback </li> <li> When a onTimedText callback is received, do the following: <ul> <li> call <pre><code> getText() </code></pre> to get the characters for rendering </li> <li> call <pre><code> getBounds() </code></pre> to get the text rendering area/region </li> </ul> </li> </ul> </p><pre><code>public final class TimedText\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/TimedText.html
ToneGenerator	A										<section class="prog__container"><p> This class provides methods to play DTMF tones (ITU-T Recommendation Q.23), call supervisory tones (3GPP TS 22.001, CEPT) and proprietary tones (3GPP TS 31.111). Depending on call state and routing options, tones are mixed to the downlink audio or output to the speaker phone or headset. This API is not for generating tones over the uplink audio path.</p><pre><code>public class ToneGenerator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/ToneGenerator.html
UnsupportedSchemeException	A										<section class="prog__container"><p> Exception thrown when an attempt is made to construct a MediaDrm object using a crypto scheme UUID that is not supported by the device</p><pre><code>public final class UnsupportedSchemeException\n</code></pre></section>	https://developer.android.com/reference/android/media/UnsupportedSchemeException.html
VolumeProvider	A										<section class="prog__container"><p> Handles requests to adjust or set the volume on a session. This is also used to push volume updates back to the session. The provider must call <pre><code> setCurrentVolume(int) </code></pre> each time the volume being provided changes. <p> You can set a volume provider on a session by calling <pre><code> setPlaybackToRemote(VolumeProvider) </code></pre> . </p><pre><code>public abstract class VolumeProvider\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/VolumeProvider.html
AcousticEchoCanceler	A										<section class="prog__container"><p> Acoustic Echo Canceler (AEC). <p> Acoustic Echo Canceler (AEC) is an audio pre-processing which removes the contribution of the signal received from the remote party from the captured audio signal. <p> AEC is used by voice communication applications (voice chat, video conferencing, SIP calls) where the presence of echo with significant delay in the signal received from the remote party is highly disturbing. AEC is often used in conjunction with noise suppression (NS). <p> An application creates an AcousticEchoCanceler object to instantiate and control an AEC engine in the audio capture path. <p> To attach the AcousticEchoCanceler to a particular <pre><code> AudioRecord </code></pre> , specify the audio session ID of this AudioRecord when creating the AcousticEchoCanceler. The audio session is retrieved by calling <pre><code> getAudioSessionId() </code></pre> on the AudioRecord instance. <p> On some devices, an AEC can be inserted by default in the capture path by the platform according to the <pre><code> MediaRecorder.AudioSource </code></pre> used. The application should call AcousticEchoCanceler.getEnable() after creating the AEC to check the default AEC activation state on a particular AudioRecord session. <p> See <pre><code> AudioEffect </code></pre> class for more details on controlling audio effects. </p><pre><code>public class AcousticEchoCanceler\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/AcousticEchoCanceler.html
AudioEffect.Descriptor	A										<section class="prog__container"><p> The effect descriptor contains information on a particular effect implemented in the audio framework: <br> <ul> <li> type: UUID identifying the effect type. May be one of: <pre><code> EFFECT_TYPE_AEC </code></pre> , <pre><code> EFFECT_TYPE_AGC </code></pre> , <pre><code> EFFECT_TYPE_BASS_BOOST </code></pre> , <pre><code> EFFECT_TYPE_ENV_REVERB </code></pre> , <pre><code> EFFECT_TYPE_EQUALIZER </code></pre> , <pre><code> EFFECT_TYPE_NS </code></pre> , <pre><code> EFFECT_TYPE_PRESET_REVERB </code></pre> , <pre><code> EFFECT_TYPE_VIRTUALIZER </code></pre> . </li> <li> uuid: UUID for this particular implementation </li> <li> connectMode: <pre><code> EFFECT_INSERT </code></pre> or <pre><code> EFFECT_AUXILIARY </code></pre> </li> <li> name: human readable effect name </li> <li> implementor: human readable effect implementor name </li> </ul> The method <pre><code> queryEffects() </code></pre> returns an array of Descriptors to facilitate effects enumeration. </br></p><pre><code>public static class AudioEffect.Descriptor\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/AudioEffect.Descriptor.html
AudioEffect	A										<section class="prog__container"><p> AudioEffect is the base class for controlling audio effects provided by the android audio framework. <p> Applications should not use the AudioEffect class directly but one of its derived classes to control specific effects: <ul> <li> <pre><code> Equalizer </code></pre> </li> <li> <pre><code> Virtualizer </code></pre> </li> <li> <pre><code> BassBoost </code></pre> </li> <li> <pre><code> PresetReverb </code></pre> </li> <li> <pre><code> EnvironmentalReverb </code></pre> </li> </ul> <p> To apply the audio effect to a specific AudioTrack or MediaPlayer instance, the application must specify the audio session ID of that instance when creating the AudioEffect. (see <pre><code> getAudioSessionId() </code></pre> for details on audio sessions). <p> NOTE: attaching insert effects (equalizer, bass boost, virtualizer) to the global audio output mix by use of session 0 is deprecated. <p> Creating an AudioEffect object will create the corresponding effect engine in the audio framework if no instance of the same effect type exists in the specified audio session. If one exists, this instance will be used. <p> The application creating the AudioEffect object (or a derived class) will either receive control of the effect engine or not depending on the priority parameter. If priority is higher than the priority used by the current effect engine owner, the control will be transfered to the new object. Otherwise control will remain with the previous object. In this case, the new application will be notified of changes in effect engine state or control ownership by the appropriate listener. </p><pre><code>public class AudioEffect\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/AudioEffect.html
AudioEffect.OnControlStatusChangeListener	A										<section class="prog__container"><p> The OnControlStatusChangeListener interface defines a method called by the AudioEffect when a the control of the effect engine is gained or lost by the application</p><pre><code>public static interface AudioEffect.OnControlStatusChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/AudioEffect.OnControlStatusChangeListener.html
AudioEffect.OnEnableStatusChangeListener	A										<section class="prog__container"><p> The OnEnableStatusChangeListener interface defines a method called by the AudioEffect when a the enabled state of the effect engine was changed by the controlling application.</p><pre><code>public static interface AudioEffect.OnEnableStatusChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/AudioEffect.OnEnableStatusChangeListener.html
AutomaticGainControl	A										<section class="prog__container"><p> Automatic Gain Control (AGC). <p> Automatic Gain Control (AGC) is an audio pre-processing which automatically normalizes the output of the captured signal by boosting or lowering input from the microphone to match a preset level so that the output signal level is virtually constant. AGC can be used by applications where the input signal dynamic range is not important but where a constant strong capture level is desired. <p> An application creates a AutomaticGainControl object to instantiate and control an AGC engine in the audio framework. <p> To attach the AutomaticGainControl to a particular <pre><code> AudioRecord </code></pre> , specify the audio session ID of this AudioRecord when creating the AutomaticGainControl. The audio session is retrieved by calling <pre><code> getAudioSessionId() </code></pre> on the AudioRecord instance. <p> On some devices, an AGC can be inserted by default in the capture path by the platform according to the <pre><code> MediaRecorder.AudioSource </code></pre> used. The application should call AutomaticGainControl.getEnable() after creating the AGC to check the default AGC activation state on a particular AudioRecord session. <p> See <pre><code> AudioEffect </code></pre> class for more details on controlling audio effects. </p><pre><code>public class AutomaticGainControl\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/AutomaticGainControl.html
BassBoost	A										<section class="prog__container"><p> Bass boost is an audio effect to boost or amplify low frequencies of the sound. It is comparable to a simple equalizer but limited to one band amplification in the low frequency range. <p> An application creates a BassBoost object to instantiate and control a bass boost engine in the audio framework. <p> The methods, parameter types and units exposed by the BassBoost implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLBassBoostItf interface. Please refer to this specification for more details. <p> To attach the BassBoost to a particular AudioTrack or MediaPlayer, specify the audio session ID of this AudioTrack or MediaPlayer when constructing the BassBoost. <p> NOTE: attaching a BassBoost to the global audio output mix by use of session 0 is deprecated. <p> See <pre><code> getAudioSessionId() </code></pre> for details on audio sessions. <p> See <pre><code> AudioEffect </code></pre> class for more details on controlling audio effects. </p><pre><code>public class BassBoost\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/BassBoost.html
BassBoost.OnParameterChangeListener	A										<section class="prog__container"><p> The OnParameterChangeListener interface defines a method called by the BassBoost when a parameter value has changed.</p><pre><code>public static interface BassBoost.OnParameterChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/BassBoost.OnParameterChangeListener.html
BassBoost.Settings	A										<section class="prog__container"><p> The Settings class regroups all bass boost parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call.</p><pre><code>public static class BassBoost.Settings\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/BassBoost.Settings.html
EnvironmentalReverb	A										<section class="prog__container"><p> A sound generated within a room travels in many directions. The listener first hears the direct sound from the source itself. Later, he or she hears discrete echoes caused by sound bouncing off nearby walls, the ceiling and the floor. As sound waves arrive after undergoing more and more reflections, individual reflections become indistinguishable and the listener hears continuous reverberation that decays over time. Reverb is vital for modeling a listener's environment. It can be used in music applications to simulate music being played back in various environments, or in games to immerse the listener within the game's environment. The EnvironmentalReverb class allows an application to control each reverb engine property in a global reverb environment and is more suitable for games. For basic control, more suitable for music applications, it is recommended to use the <pre><code> PresetReverb </code></pre> class. <p> An application creates a EnvironmentalReverb object to instantiate and control a reverb engine in the audio framework. <p> The methods, parameter types and units exposed by the EnvironmentalReverb implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLEnvironmentalReverbItf interface. Please refer to this specification for more details. <p> The EnvironmentalReverb is an output mix auxiliary effect and should be created on Audio session 0. In order for a MediaPlayer or AudioTrack to be fed into this effect, they must be explicitely attached to it and a send level must be specified. Use the effect ID returned by getId() method to designate this particular effect when attaching it to the MediaPlayer or AudioTrack. <p> Creating a reverb on the output mix (audio session 0) requires permission <pre><code> MODIFY_AUDIO_SETTINGS </code></pre> <p> See <pre><code> AudioEffect </code></pre> class for more details on controlling audio effects. </p><pre><code>public class EnvironmentalReverb\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/EnvironmentalReverb.html
EnvironmentalReverb.OnParameterChangeListener	A										<section class="prog__container"><p> The OnParameterChangeListener interface defines a method called by the EnvironmentalReverb when a parameter value has changed.</p><pre><code>public static interface EnvironmentalReverb.OnParameterChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/EnvironmentalReverb.OnParameterChangeListener.html
EnvironmentalReverb.Settings	A										<section class="prog__container"><p> The Settings class regroups all environmental reverb parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call.</p><pre><code>public static class EnvironmentalReverb.Settings\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/EnvironmentalReverb.Settings.html
Equalizer	A										<section class="prog__container"><p> An Equalizer is used to alter the frequency response of a particular music source or of the main output mix. <p> An application creates an Equalizer object to instantiate and control an Equalizer engine in the audio framework. The application can either simply use predefined presets or have a more precise control of the gain in each frequency band controlled by the equalizer. <p> The methods, parameter types and units exposed by the Equalizer implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLEqualizerItf interface. Please refer to this specification for more details. <p> To attach the Equalizer to a particular AudioTrack or MediaPlayer, specify the audio session ID of this AudioTrack or MediaPlayer when constructing the Equalizer. <p> NOTE: attaching an Equalizer to the global audio output mix by use of session 0 is deprecated. <p> See <pre><code> getAudioSessionId() </code></pre> for details on audio sessions. <p> See <pre><code> AudioEffect </code></pre> class for more details on controlling audio effects. </p><pre><code>public class Equalizer\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/Equalizer.html
Equalizer.OnParameterChangeListener	A										<section class="prog__container"><p> The OnParameterChangeListener interface defines a method called by the Equalizer when a parameter value has changed.</p><pre><code>public static interface Equalizer.OnParameterChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/Equalizer.OnParameterChangeListener.html
Equalizer.Settings	A										<section class="prog__container"><p> The Settings class regroups all equalizer parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call.</p><pre><code>public static class Equalizer.Settings\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/Equalizer.Settings.html
LoudnessEnhancer	A										<section class="prog__container"><p> LoudnessEnhancer is an audio effect for increasing audio loudness. The processing is parametrized by a target gain value, which determines the maximum amount by which an audio signal will be amplified; signals amplified outside of the sample range supported by the platform are compressed. An application creates a LoudnessEnhancer object to instantiate and control a this audio effect in the audio framework. To attach the LoudnessEnhancer to a particular AudioTrack or MediaPlayer, specify the audio session ID of this AudioTrack or MediaPlayer when constructing the effect (see <pre><code> getAudioSessionId() </code></pre> and <pre><code> getAudioSessionId() </code></pre> ).</p><pre><code>public class LoudnessEnhancer\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/LoudnessEnhancer.html
NoiseSuppressor	A										<section class="prog__container"><p> Noise Suppressor (NS). <p> Noise suppression (NS) is an audio pre-processing which removes background noise from the captured signal. The component of the signal considered as noise can be either stationary (car/airplane engine, AC system) or non-stationary (other peoples conversations, car horn) for more advanced implementations. <p> NS is mostly used by voice communication applications (voice chat, video conferencing, SIP calls). <p> An application creates a NoiseSuppressor object to instantiate and control an NS engine in the audio framework. <p> To attach the NoiseSuppressor to a particular <pre><code> AudioRecord </code></pre> , specify the audio session ID of this AudioRecord when creating the NoiseSuppressor. The audio session is retrieved by calling <pre><code> getAudioSessionId() </code></pre> on the AudioRecord instance. <p> On some devices, NS can be inserted by default in the capture path by the platform according to the <pre><code> MediaRecorder.AudioSource </code></pre> used. The application should call NoiseSuppressor.getEnable() after creating the NS to check the default NS activation state on a particular AudioRecord session. <p> See <pre><code> AudioEffect </code></pre> class for more details on controlling audio effects. </p><pre><code>public class NoiseSuppressor\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/NoiseSuppressor.html
android.media.audiofx	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/media/audiofx/package-summary.html
PresetReverb	A										<section class="prog__container"><p> A sound generated within a room travels in many directions. The listener first hears the direct sound from the source itself. Later, he or she hears discrete echoes caused by sound bouncing off nearby walls, the ceiling and the floor. As sound waves arrive after undergoing more and more reflections, individual reflections become indistinguishable and the listener hears continuous reverberation that decays over time. Reverb is vital for modeling a listener's environment. It can be used in music applications to simulate music being played back in various environments, or in games to immerse the listener within the game's environment. The PresetReverb class allows an application to configure the global reverb using a reverb preset. This is primarily used for adding some reverb in a music playback context. Applications requiring control over a more advanced environmental reverb are advised to use the <pre><code> EnvironmentalReverb </code></pre> class. <p> An application creates a PresetReverb object to instantiate and control a reverb engine in the audio framework. <p> The methods, parameter types and units exposed by the PresetReverb implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLPresetReverbItf interface. Please refer to this specification for more details. <p> The PresetReverb is an output mix auxiliary effect and should be created on Audio session 0. In order for a MediaPlayer or AudioTrack to be fed into this effect, they must be explicitely attached to it and a send level must be specified. Use the effect ID returned by getId() method to designate this particular effect when attaching it to the MediaPlayer or AudioTrack. <p> Creating a reverb on the output mix (audio session 0) requires permission <pre><code> MODIFY_AUDIO_SETTINGS </code></pre> <p> See <pre><code> AudioEffect </code></pre> class for more details on controlling audio effects. </p><pre><code>public class PresetReverb\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/PresetReverb.html
PresetReverb.OnParameterChangeListener	A										<section class="prog__container"><p> The OnParameterChangeListener interface defines a method called by the PresetReverb when a parameter value has changed.</p><pre><code>public static interface PresetReverb.OnParameterChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/PresetReverb.OnParameterChangeListener.html
PresetReverb.Settings	A										<section class="prog__container"><p> The Settings class regroups all preset reverb parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call.</p><pre><code>public static class PresetReverb.Settings\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/PresetReverb.Settings.html
Virtualizer	A										<section class="prog__container"><p> An audio virtualizer is a general name for an effect to spatialize audio channels. The exact behavior of this effect is dependent on the number of audio input channels and the types and number of audio output channels of the device. For example, in the case of a stereo input and stereo headphone output, a stereo widening effect is used when this effect is turned on. <p> An application creates a Virtualizer object to instantiate and control a virtualizer engine in the audio framework. <p> The methods, parameter types and units exposed by the Virtualizer implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLVirtualizerItf interface. Please refer to this specification for more details. <p> To attach the Virtualizer to a particular AudioTrack or MediaPlayer, specify the audio session ID of this AudioTrack or MediaPlayer when constructing the Virtualizer. <p> NOTE: attaching a Virtualizer to the global audio output mix by use of session 0 is deprecated. <p> See <pre><code> getAudioSessionId() </code></pre> for details on audio sessions. <p> See <pre><code> AudioEffect </code></pre> class for more details on controlling audio effects. </p><pre><code>public class Virtualizer\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/Virtualizer.html
Virtualizer.OnParameterChangeListener	A										<section class="prog__container"><p> The OnParameterChangeListener interface defines a method called by the Virtualizer when a parameter value has changed.</p><pre><code>public static interface Virtualizer.OnParameterChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/Virtualizer.OnParameterChangeListener.html
Virtualizer.Settings	A										<section class="prog__container"><p> The Settings class regroups all virtualizer parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call.</p><pre><code>public static class Virtualizer.Settings\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/Virtualizer.Settings.html
Visualizer	A										<section class="prog__container"><p> The Visualizer class enables application to retrieve part of the currently playing audio for visualization purpose. It is not an audio recording interface and only returns partial and low quality audio content. However, to protect privacy of certain audio data (e.g voice mail) the use of the visualizer requires the permission android.permission.RECORD_AUDIO. <p> The audio session ID passed to the constructor indicates which audio content should be visualized: <br> <ul> <li> If the session is 0, the audio output mix is visualized </li> <li> If the session is not 0, the audio from a particular <pre><code> MediaPlayer </code></pre> or <pre><code> AudioTrack </code></pre> using this audio session is visualized </li> </ul> <p> Two types of representation of audio content can be captured: <br> <ul> <li> Waveform data: consecutive 8-bit (unsigned) mono samples by using the <pre><code> getWaveForm(byte[]) </code></pre> method </li> <li> Frequency data: 8-bit magnitude FFT by using the <pre><code> getFft(byte[]) </code></pre> method </li> </ul> <p> The length of the capture can be retrieved or specified by calling respectively <pre><code> getCaptureSize() </code></pre> and <pre><code> setCaptureSize(int) </code></pre> methods. The capture size must be a power of 2 in the range returned by <pre><code> getCaptureSizeRange() </code></pre> . <p> In addition to the polling capture mode described above with <pre><code> getWaveForm(byte[]) </code></pre> and <pre><code> getFft(byte[]) </code></pre> methods, a callback mode is also available by installing a listener by use of the <pre><code> setDataCaptureListener(OnDataCaptureListener, int, boolean, boolean) </code></pre> method. The rate at which the listener capture method is called as well as the type of data returned is specified. <p> Before capturing data, the Visualizer must be enabled by calling the <pre><code> setEnabled(boolean) </code></pre> method. When data capture is not needed any more, the Visualizer should be disabled. <p> It is good practice to call the <pre><code> release() </code></pre> method when the Visualizer is not used anymore to free up native resources associated to the Visualizer instance. <p> Creating a Visualizer on the output mix (audio session 0) requires permission <pre><code> MODIFY_AUDIO_SETTINGS </code></pre> <p> The Visualizer class can also be used to perform measurements on the audio being played back. The measurements to perform are defined by setting a mask of the requested measurement modes with <pre><code> setMeasurementMode(int) </code></pre> . Supported values are <pre><code> MEASUREMENT_MODE_NONE </code></pre> to cancel any measurement, and <pre><code> MEASUREMENT_MODE_PEAK_RMS </code></pre> for peak and RMS monitoring. Measurements can be retrieved through <pre><code> getMeasurementPeakRms(MeasurementPeakRms) </code></pre> . </p><pre><code>public class Visualizer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/Visualizer.html
Visualizer.MeasurementPeakRms	A										<section class="prog__container"><p> A class to store peak and RMS values. Peak and RMS are expressed in mB, as described in the <pre><code> MEASUREMENT_MODE_PEAK_RMS </code></pre> measurement mode.</p><pre><code>public static final class Visualizer.MeasurementPeakRms\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/Visualizer.MeasurementPeakRms.html
Visualizer.OnDataCaptureListener	A										<section class="prog__container"><p> The OnDataCaptureListener interface defines methods called by the Visualizer to periodically update the audio visualization capture. The client application can implement this interface and register the listener with the <pre><code> setDataCaptureListener(OnDataCaptureListener, int, boolean, boolean) </code></pre> method.</p><pre><code>public static interface Visualizer.OnDataCaptureListener\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/Visualizer.OnDataCaptureListener.html
MediaBrowser.ConnectionCallback	A										<section class="prog__container"><p> Callbacks for connection related events.</p><pre><code>public static class MediaBrowser.ConnectionCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/browse/MediaBrowser.ConnectionCallback.html
MediaBrowser	A										<section class="prog__container"><p> Browses media content offered by a link MediaBrowserService. <p> This object is not thread-safe. All calls should happen on the thread on which the browser was constructed. </p><pre><code>public final class MediaBrowser\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/browse/MediaBrowser.html
MediaBrowser.ItemCallback	A										<section class="prog__container"><p> Callback for receiving the result of <pre><code> getItem(String, MediaBrowser.ItemCallback) </code></pre> .</p><pre><code>public static abstract class MediaBrowser.ItemCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/browse/MediaBrowser.ItemCallback.html
MediaBrowser.MediaItem	A										<section class="prog__container"><p> A class with information on a single media item for use in browsing media.</p><pre><code>public static class MediaBrowser.MediaItem\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/browse/MediaBrowser.MediaItem.html
MediaBrowser.SubscriptionCallback	A										<section class="prog__container"><p> Callbacks for subscription related events.</p><pre><code>public static abstract class MediaBrowser.SubscriptionCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/browse/MediaBrowser.SubscriptionCallback.html
android.media.browse	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/media/browse/package-summary.html
Effect	A										<section class="prog__container"><p> <p> Effects are high-performance transformations that can be applied to image frames. These are passed in the form of OpenGL ES 2.0 texture names. Typical frames could be images loaded from disk, or frames from the camera or other video streams. </p><pre><code>public abstract class Effect\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/effect/Effect.html
EffectContext	A										<section class="prog__container"><p> <p> An EffectContext keeps all necessary state information to run Effects within a Open GL ES 2.0 context. </p><pre><code>public class EffectContext\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/effect/EffectContext.html
EffectFactory	A										<section class="prog__container"><p> <p> The EffectFactory class defines the list of available Effects, and provides functionality to inspect and instantiate them. Some effects may not be available on all platforms, so before creating a certain effect, the application should confirm that the effect is supported on this platform by calling <pre><code> isEffectSupported(String) </code></pre> . </p><pre><code>public class EffectFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/effect/EffectFactory.html
EffectUpdateListener	A										<section class="prog__container"><p> Some effects may issue callbacks to inform the host of changes to the effect state. This is the listener interface for receiving those callbacks.</p><pre><code>public interface EffectUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/media/effect/EffectUpdateListener.html
android.media.effect	A										<section class="prog__container">Provides classes that allow you to apply a variety of visual effects to images andvideos. For example, you can easily fix red-eye, convert an image to grayscale,adjust brightness, adjust saturation, rotate an image, apply a fisheye effect, and much more. Thesystem performs all effects processing on the GPU to obtain maximum performance.</section>	https://developer.android.com/reference/android/media/effect/package-summary.html
MidiDevice	A										<section class="prog__container"><p> This class is used for sending and receiving data to and from a MIDI device Instances of this class are created by <pre><code> openDevice(MidiDeviceInfo, MidiManager.OnDeviceOpenedListener, Handler) </code></pre> .</p><pre><code>public final class MidiDevice\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiDevice.html
MidiDevice.MidiConnection	A										<section class="prog__container"><p> This class represents a connection between the output port of one device and the input port of another. Created by <pre><code> connectPorts(MidiInputPort, int) </code></pre> . Close this object to terminate the connection.</p><pre><code>public class MidiDevice.MidiConnection\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiDevice.MidiConnection.html
MidiDeviceInfo	A										<section class="prog__container"><p> This class contains information to describe a MIDI device. For now we only have information that can be retrieved easily for USB devices, but we will probably expand this in the future. This class is just an immutable object to encapsulate the MIDI device description. Use the MidiDevice class to actually communicate with devices.</p><pre><code>public final class MidiDeviceInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiDeviceInfo.html
MidiDeviceInfo.PortInfo	A										<section class="prog__container"><p> Contains information about an input or output port.</p><pre><code>public static final class MidiDeviceInfo.PortInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiDeviceInfo.PortInfo.html
MidiDeviceService	A										<section class="prog__container"><p> A service that implements a virtual MIDI device. Subclasses must implement the <pre><code> onGetInputPortReceivers() </code></pre> method to provide a list of <pre><code> MidiReceiver </code></pre> s to receive data sent to the device's input ports. Similarly, subclasses can call <pre><code> getOutputPortReceivers() </code></pre> to fetch a list of <pre><code> MidiReceiver </code></pre> s for sending data out the output ports. <p> To extend this class, you must declare the service in your manifest file with an intent filter with the <pre><code> SERVICE_INTERFACE </code></pre> action and meta-data to describe the virtual device. For example: </p><pre><code>public abstract class MidiDeviceService\n</code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiDeviceService.html
MidiDeviceStatus	A										<section class="prog__container"><p> This is an immutable class that describes the current status of a MIDI device's ports.</p><pre><code>public final class MidiDeviceStatus\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiDeviceStatus.html
MidiInputPort	A										<section class="prog__container"><p> This class is used for sending data to a port on a MIDI device</p><pre><code>public final class MidiInputPort\n</code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiInputPort.html
MidiManager.DeviceCallback	A										<section class="prog__container"><p> Callback class used for clients to receive MIDI device added and removed notifications</p><pre><code>public static class MidiManager.DeviceCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiManager.DeviceCallback.html
MidiManager	A										<section class="prog__container"><p> This class is the public application interface to the MIDI service. <p> You can obtain an instance of this class by calling <pre><code> Context.getSystemService() </code></pre> . <pre>MidiManager manager = (MidiManager) getSystemService(Context.MIDI_SERVICE);</pre> </p><pre><code>public final class MidiManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiManager.html
MidiManager.OnDeviceOpenedListener	A										<section class="prog__container"><p> Listener class used for receiving the results of <pre><code> openDevice(MidiDeviceInfo, MidiManager.OnDeviceOpenedListener, Handler) </code></pre> and <pre><code> openBluetoothDevice(BluetoothDevice, MidiManager.OnDeviceOpenedListener, Handler) </code></pre></p><pre><code>public static interface MidiManager.OnDeviceOpenedListener\n</code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiManager.OnDeviceOpenedListener.html
MidiOutputPort	A										<section class="prog__container"><p> This class is used for receiving data from a port on a MIDI device</p><pre><code>public final class MidiOutputPort\n</code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiOutputPort.html
MidiReceiver	A										<section class="prog__container"><p> Interface for sending and receiving data to and from a MIDI device.</p><pre><code>public abstract class MidiReceiver\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiReceiver.html
MidiSender	A										<section class="prog__container"><p> Interface provided by a device to allow attaching MidiReceivers to a MIDI device.</p><pre><code>public abstract class MidiSender\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiSender.html
android.media.midi	A										<section class="prog__container">Provides classes for sending and receiving messages using the standard MIDIevent protocol over USB, Bluetooth LE, and virtual (inter-app) transports.</section>	https://developer.android.com/reference/android/media/midi/package-summary.html
MediaProjection.Callback	A										<section class="prog__container"><p> Callbacks for the projection session.</p><pre><code>public static abstract class MediaProjection.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/projection/MediaProjection.Callback.html
MediaProjection	A										<section class="prog__container"><p> A token granting applications the ability to capture screen contents and/or record system audio. The exact capabilities granted depend on the type of MediaProjection. <p> A screen capture session can be started through <pre><code> createScreenCaptureIntent() </code></pre> . This grants the ability to capture screen contents, but not system audio. </p><pre><code>public final class MediaProjection\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/projection/MediaProjection.html
MediaProjectionManager	A										<section class="prog__container"><p> Manages the retrieval of certain types of <pre><code> MediaProjection </code></pre> tokens. <p> Get an instance of this class by calling <pre><code> Context.getSystemService() </code></pre> with the argument <pre><code> MEDIA_PROJECTION_SERVICE </code></pre> . </p><pre><code>public final class MediaProjectionManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/projection/MediaProjectionManager.html
android.media.projection	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/media/projection/package-summary.html
MediaController.Callback	A										<section class="prog__container"><p> Callback for receiving updates from the session. A Callback can be registered using <pre><code> registerCallback(MediaController.Callback) </code></pre> .</p><pre><code>public static abstract class MediaController.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/session/MediaController.Callback.html
MediaController	A										<section class="prog__container"><p> Allows an app to interact with an ongoing media session. Media buttons and other commands can be sent to the session. A callback may be registered to receive updates from the session, such as metadata and play state changes. <p> A MediaController can be created through <pre><code> MediaSessionManager </code></pre> if you hold the "android.permission.MEDIA_CONTENT_CONTROL" permission or are an enabled notification listener or by getting a <pre><code> MediaSession.Token </code></pre> directly from the session owner. <p> MediaController objects are thread-safe. </p><pre><code>public final class MediaController\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/session/MediaController.html
MediaController.PlaybackInfo	A										<section class="prog__container"><p> Holds information about the current playback and how audio is handled for this session.</p><pre><code>public static final class MediaController.PlaybackInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/session/MediaController.PlaybackInfo.html
MediaController.TransportControls	A										<section class="prog__container"><p> Interface for controlling media playback on a session. This allows an app to send media transport commands to the session.</p><pre><code>public final class MediaController.TransportControls\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/session/MediaController.TransportControls.html
MediaSession.Callback	A										<section class="prog__container"><p> Receives media buttons, transport controls, and commands from controllers and the system. A callback may be set using <pre><code> setCallback(MediaSession.Callback) </code></pre> .</p><pre><code>public static abstract class MediaSession.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/session/MediaSession.Callback.html
MediaSession	A										<section class="prog__container"><p> Allows interaction with media controllers, volume keys, media buttons, and transport controls. <p> A MediaSession should be created when an app wants to publish media playback information or handle media keys. In general an app only needs one session for all playback, though multiple sessions can be created to provide finer grain controls of media. <p> Once a session is created the owner of the session may pass its <pre><code> session token </code></pre> to other processes to allow them to create a <pre><code> MediaController </code></pre> to interact with the session. <p> To receive commands, media keys, and other events a <pre><code> MediaSession.Callback </code></pre> must be set with <pre><code> setCallback(Callback) </code></pre> and <pre><code> setActive(true) </code></pre> must be called. <p> When an app is finished performing playback it must call <pre><code> release() </code></pre> to clean up the session and notify any controllers. <p> MediaSession objects are thread safe. </p><pre><code>public final class MediaSession\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/session/MediaSession.html
MediaSession.QueueItem	A										<section class="prog__container"><p> A single item that is part of the play queue. It contains a description of the item and its id in the queue.</p><pre><code>public static final class MediaSession.QueueItem\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/session/MediaSession.QueueItem.html
MediaSession.Token	A										<section class="prog__container"><p> Represents an ongoing session. This may be passed to apps by the session owner to allow them to create a <pre><code> MediaController </code></pre> to communicate with the session.</p><pre><code>public static final class MediaSession.Token\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/session/MediaSession.Token.html
MediaSessionManager	A										<section class="prog__container"><p> Provides support for interacting with <pre><code> media sessions </code></pre> that applications have published to express their ongoing media playback state. <p> Use <pre><code> Context.getSystemService(Context.MEDIA_SESSION_SERVICE) </code></pre> to get an instance of this class. </p><pre><code>public final class MediaSessionManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/session/MediaSessionManager.html
MediaSessionManager.OnActiveSessionsChangedListener	A										<section class="prog__container"><p> Listens for changes to the list of active sessions. This can be added using <pre><code> addOnActiveSessionsChangedListener(MediaSessionManager.OnActiveSessionsChangedListener, ComponentName) </code></pre> .</p><pre><code>public static interface MediaSessionManager.OnActiveSessionsChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/media/session/MediaSessionManager.OnActiveSessionsChangedListener.html
android.media.session	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/media/session/package-summary.html
PlaybackState.Builder	A										<section class="prog__container"><p> Builder for <pre><code> PlaybackState </code></pre> objects.</p><pre><code>public static final class PlaybackState.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/session/PlaybackState.Builder.html
PlaybackState.CustomAction.Builder	A										<section class="prog__container"><p> Builder for <pre><code> PlaybackState.CustomAction </code></pre> objects.</p><pre><code>public static final class PlaybackState.CustomAction.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/session/PlaybackState.CustomAction.Builder.html
PlaybackState.CustomAction	A										<section class="prog__container"><p> <pre><code> CustomActions </code></pre> can be used to extend the capabilities of the standard transport controls by exposing app specific actions to <pre><code> MediaControllers </code></pre> .</p><pre><code>public static final class PlaybackState.CustomAction\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/session/PlaybackState.CustomAction.html
PlaybackState	A										<section class="prog__container"><p> Playback state for a <pre><code> MediaSession </code></pre> . This includes a state like <pre><code> STATE_PLAYING </code></pre> , the current playback position, and the current control capabilities.</p><pre><code>public final class PlaybackState\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/session/PlaybackState.html
android.media.tv	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/media/tv/package-summary.html
TvContentRating	A										<section class="prog__container"><p> A class representing a TV content rating. When a TV input service inserts the content rating information on a program into the database, this class can be used to generate the formatted string for <pre><code> TvContract.Programs.COLUMN_CONTENT_RATING </code></pre> . To create a <pre><code> TvContentRating </code></pre> object, use the <pre><code> TvContentRating.createRating </code></pre> method with valid rating system string constants. <p> It is possible for an application to define its own content rating system by supplying a content rating system definition XML resource (see example below) and declaring a broadcast receiver that filters <pre><code> ACTION_QUERY_CONTENT_RATING_SYSTEMS </code></pre> in its manifest. </p><pre><code>public final class TvContentRating\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvContentRating.html
TvContract.BaseTvColumns	A										<section class="prog__container"><p> Common base for the tables of TV channels/programs.</p><pre><code>public static interface TvContract.BaseTvColumns\nimplements BaseColumns</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvContract.BaseTvColumns.html
TvContract.Channels	A										<section class="prog__container"><p> Column definitions for the TV channels table.</p><pre><code>public static final class TvContract.Channels\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvContract.Channels.html
TvContract.Channels.Logo	A										<section class="prog__container"><p> A sub-directory of a single TV channel that represents its primary logo. <p> To access this directory, append <pre><code> CONTENT_DIRECTORY </code></pre> to the raw channel URI. The resulting URI represents an image file, and should be interacted using ContentResolver.openAssetFileDescriptor. <p> Note that this sub-directory also supports opening the logo as an asset file in write mode. Callers can create or replace the primary logo associated with this channel by opening the asset file and writing the full-size photo contents into it. (Make sure there is no padding around the logo image.) When the file is closed, the image will be parsed, sized down if necessary, and stored. <p> Usage example: <pre> public void writeChannelLogo(long channelId, byte[] logo) { Uri channelLogoUri = TvContract.buildChannelLogoUri(channelId); try { AssetFileDescriptor fd = getContentResolver().openAssetFileDescriptor(channelLogoUri, "rw"); OutputStream os = fd.createOutputStream(); os.write(logo); os.close(); fd.close(); } catch (IOException e) { // Handle error cases. } } </pre> </p><pre><code>public static final class TvContract.Channels.Logo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvContract.Channels.Logo.html
TvContract	A										<section class="prog__container"><p> The contract between the TV provider and applications. Contains definitions for the supported URIs and columns. </p><pre><code>public final class TvContract\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvContract.html
TvContract.Programs.Genres	A										<section class="prog__container"><p> Canonical genres for TV programs.</p><pre><code>public static final class TvContract.Programs.Genres\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvContract.Programs.Genres.html
TvContract.Programs	A										<section class="prog__container"><p> Column definitions for the TV programs table. <p> By default, the query results will be sorted by <pre><code> COLUMN_START_TIME_UTC_MILLIS </code></pre> in ascending order. </p><pre><code>public static final class TvContract.Programs\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvContract.Programs.html
TvContract.RecordedPrograms	A										<section class="prog__container"><p> Column definitions for the recorded TV programs table. <p> By default, the query results will be sorted by <pre><code> COLUMN_START_TIME_UTC_MILLIS </code></pre> in ascending order. </p><pre><code>public static final class TvContract.RecordedPrograms\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvContract.RecordedPrograms.html
TvInputInfo.Builder	A										<section class="prog__container"><p> A convenience builder for creating <pre><code> TvInputInfo </code></pre> objects.</p><pre><code>public static final class TvInputInfo.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvInputInfo.Builder.html
TvInputInfo	A										<section class="prog__container"><p> This class is used to specify meta information of a TV input.</p><pre><code>public final class TvInputInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvInputInfo.html
TvInputManager	A										<section class="prog__container"><p> Central system API to the overall TV input framework (TIF) architecture, which arbitrates interaction between applications and the selected TV inputs. You can retrieve an instance of this interface with <pre><code> Context.getSystemService(Context.TV_INPUT_SERVICE) </code></pre> . <p> There are three primary parties involved in the TV input framework (TIF) architecture: <ul> <li> The <strong> TV input manager </strong> as expressed by this class is the central point of the system that manages interaction between all other parts. It is expressed as the client-side API here which exists in each application context and communicates with a global system service that manages the interaction across all processes. <li> A <strong> TV input </strong> implemented by <pre><code> TvInputService </code></pre> represents an input source of TV, which can be a pass-through input such as HDMI, or a tuner input which provides broadcast TV programs. The system binds to the TV input per application’s request. on implementing TV inputs. <li> <strong> Applications </strong> talk to the TV input manager to list TV inputs and check their status. Once an application find the input to use, it uses <pre><code> TvView </code></pre> or <pre><code> TvRecordingClient </code></pre> for further interaction such as watching and recording broadcast TV programs. </li> </li> </li> </ul> </p><pre><code>public final class TvInputManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvInputManager.html
TvInputManager.TvInputCallback	A										<section class="prog__container"><p> Callback used to monitor status of the TV inputs.</p><pre><code>public static abstract class TvInputManager.TvInputCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvInputManager.TvInputCallback.html
TvInputService.HardwareSession	A										<section class="prog__container"><p> Base class for a TV input session which represents an external device connected to a hardware TV input. <p> This class is for an input which provides channels for the external set-top box to the application. Once a TV input returns an implementation of this class on <pre><code> onCreateSession(String) </code></pre> , the framework will create a separate session for a hardware TV Input (e.g. HDMI 1) and forward the application's surface to the session so that the user can see the screen of the hardware TV Input when she tunes to a channel from this TV input. The implementation of this class is expected to change the channel of the external set-top box via a proprietary protocol when <pre><code> onTune(Uri) </code></pre> is requested by the application. <p> Note that this class is not for inputs for internal hardware like built-in tuner and HDMI 1. </p><pre><code>public static abstract class TvInputService.HardwareSession\n</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvInputService.HardwareSession.html
TvInputService	A										<section class="prog__container"><p> The TvInputService class represents a TV input or source such as HDMI or built-in tuner which provides pass-through video or broadcast TV programs. <p> Applications will not normally use this service themselves, instead relying on the standard interaction provided by <pre><code> TvView </code></pre> . Those implementing TV input services should normally do so by deriving from this class and providing their own session implementation based on <pre><code> TvInputService.Session </code></pre> . All TV input services must require that clients hold the <pre><code> BIND_TV_INPUT </code></pre> in order to interact with the service; if this permission is not specified in the manifest, the system will refuse to bind to that TV input service. </p><pre><code>public abstract class TvInputService\n</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvInputService.html
TvInputService.RecordingSession	A										<section class="prog__container"><p> Base class for derived classes to implement to provide a TV input recording session.</p><pre><code>public static abstract class TvInputService.RecordingSession\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvInputService.RecordingSession.html
TvInputService.Session	A										<section class="prog__container"><p> Base class for derived classes to implement to provide a TV input session.</p><pre><code>public static abstract class TvInputService.Session\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvInputService.Session.html
TvRecordingClient	A										<section class="prog__container"><p> The public interface object used to interact with a specific TV input service for TV program recording.</p><pre><code>public class TvRecordingClient\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvRecordingClient.html
TvRecordingClient.RecordingCallback	A										<section class="prog__container"><p> Callback used to receive various status updates on the <pre><code> TvInputService.RecordingSession </code></pre></p><pre><code>public static abstract class TvRecordingClient.RecordingCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvRecordingClient.RecordingCallback.html
TvTrackInfo.Builder	A										<section class="prog__container"><p> A builder class for creating <pre><code> TvTrackInfo </code></pre> objects.</p><pre><code>public static final class TvTrackInfo.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvTrackInfo.Builder.html
TvTrackInfo	A										<section class="prog__container"><p> Encapsulates the format of tracks played in <pre><code> TvInputService </code></pre> .</p><pre><code>public final class TvTrackInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvTrackInfo.html
TvView	A										<section class="prog__container"><p> Displays TV contents. The TvView class provides a high level interface for applications to show TV programs from various TV sources that implement <pre><code> TvInputService </code></pre> . (Note that the list of TV inputs available on the system can be obtained by calling <pre><code> TvInputManager.getTvInputList() </code></pre> .) <p> Once the application supplies the URI for a specific TV channel to <pre><code> tune(String, Uri) </code></pre> method, it takes care of underlying service binding (and unbinding if the current TvView is already bound to a service) and automatically allocates/deallocates resources needed. In addition to a few essential methods to control how the contents are presented, it also provides a way to dispatch input events to the connected TvInputService in order to enable custom key actions for the TV input. </p><pre><code>public class TvView\n</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvView.html
TvView.OnUnhandledInputEventListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the unhandled input event is received.</p><pre><code>public static interface TvView.OnUnhandledInputEventListener\n</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvView.OnUnhandledInputEventListener.html
TvView.TimeShiftPositionCallback	A										<section class="prog__container"><p> Callback used to receive time shift position changes.</p><pre><code>public static abstract class TvView.TimeShiftPositionCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvView.TimeShiftPositionCallback.html
TvView.TvInputCallback	A										<section class="prog__container"><p> Callback used to receive various status updates on the <pre><code> TvView </code></pre> .</p><pre><code>public static abstract class TvView.TvInputCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvView.TvInputCallback.html
MtpConstants	A										<section class="prog__container"><p> A class containing constants in the MTP and PTP specifications.</p><pre><code>public final class MtpConstants\nextends Object</code></pre></section>	https://developer.android.com/reference/android/mtp/MtpConstants.html
MtpDevice	A										<section class="prog__container"><p> This class represents an MTP or PTP device connected on the USB host bus. An application can instantiate an object of this type, by referencing an attached <pre><code> UsbDevice </code></pre> and then use methods in this class to get information about the device and objects stored on it, as well as open the connection and transfer data.</p><pre><code>public final class MtpDevice\nextends Object</code></pre></section>	https://developer.android.com/reference/android/mtp/MtpDevice.html
MtpDeviceInfo	A										<section class="prog__container"><p> This class encapsulates information about an MTP device. This corresponds to the DeviceInfo Dataset described in section 5.1.1 of the MTP specification.</p><pre><code>public class MtpDeviceInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/mtp/MtpDeviceInfo.html
MtpEvent	A										<section class="prog__container"><p> This class encapsulates information about a MTP event. This corresponds to the events described in appendix G of the MTP specification.</p><pre><code>public class MtpEvent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/mtp/MtpEvent.html
MtpObjectInfo.Builder	A										<section class="prog__container"><p> Builds a new object info instance.</p><pre><code>public static class MtpObjectInfo.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/mtp/MtpObjectInfo.Builder.html
MtpObjectInfo	A										<section class="prog__container"><p> This class encapsulates information about an object on an MTP device. This corresponds to the ObjectInfo Dataset described in section 5.3.1 of the MTP specification.</p><pre><code>public final class MtpObjectInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/mtp/MtpObjectInfo.html
MtpStorageInfo	A										<section class="prog__container"><p> This class encapsulates information about a storage unit on an MTP device. This corresponds to the StorageInfo Dataset described in section 5.2.2 of the MTP specification.</p><pre><code>public final class MtpStorageInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/mtp/MtpStorageInfo.html
android.mtp	A										<section class="prog__container">Provides APIs that let you interact directly with connected cameras and other devices, using thePTP (Picture Transfer Protocol) subset of the MTP (Media Transfer Protocol) specification. Yourapplication can receive notifications when devices are attached and removed, manage files andstorage on those devices, and transfer files and metadata from the devices.</section>	https://developer.android.com/reference/android/mtp/package-summary.html
CaptivePortal	A										<section class="prog__container"><p> A class allowing apps handling the <pre><code> ACTION_CAPTIVE_PORTAL_SIGN_IN </code></pre> activity to indicate to the system different outcomes of captive portal sign in. This class is passed as an extra named <pre><code> EXTRA_CAPTIVE_PORTAL </code></pre> with the <pre><code> ACTION_CAPTIVE_PORTAL_SIGN_IN </code></pre> activity.</p><pre><code>public class CaptivePortal\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/CaptivePortal.html
ConnectivityManager	A										<section class="prog__container"><p> Class that answers queries about the state of network connectivity. It also notifies applications when network connectivity changes. Get an instance of this class by calling <pre><code> Context.getSystemService(Context.CONNECTIVITY_SERVICE) </code></pre> . <p> The primary responsibilities of this class are to: <ol> <li> Monitor network connections (Wi-Fi, GPRS, UMTS, etc.) </li> <li> Send broadcast intents when network connectivity changes </li> <li> Attempt to "fail over" to another network when connectivity to a network is lost </li> <li> Provide an API that allows applications to query the coarse-grained or fine-grained state of the available networks </li> <li> Provide an API that allows applications to request and select networks for their data traffic </li> </ol> </p><pre><code>public class ConnectivityManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/ConnectivityManager.html
ConnectivityManager.NetworkCallback	A										<section class="prog__container"><p> Base class for NetworkRequest callbacks. Used for notifications about network changes. Should be extended by applications wanting notifications.</p><pre><code>public static class ConnectivityManager.NetworkCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html
ConnectivityManager.OnNetworkActiveListener	A										<section class="prog__container"><p> Callback for use with <pre><code> addDefaultNetworkActiveListener(ConnectivityManager.OnNetworkActiveListener) </code></pre> to find out when the system default network has gone in to a high power state.</p><pre><code>public static interface ConnectivityManager.OnNetworkActiveListener\n</code></pre></section>	https://developer.android.com/reference/android/net/ConnectivityManager.OnNetworkActiveListener.html
Credentials	A										<section class="prog__container"><p> A class for representing UNIX credentials passed via ancillary data on UNIX domain sockets. See "man 7 unix" on a desktop linux distro.</p><pre><code>public class Credentials\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/Credentials.html
DhcpInfo	A										<section class="prog__container"><p> A simple object for retrieving the results of a DHCP request.</p><pre><code>public class DhcpInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/DhcpInfo.html
IpPrefix	A										<section class="prog__container"><p> This class represents an IP prefix, i.e., a contiguous block of IP addresses aligned on a power of two boundary (also known as an "IP subnet"). A prefix is specified by two pieces of information: <ul> <li> A starting IP address (IPv4 or IPv6). This is the first IP address of the prefix. <li> A prefix length. This specifies the length of the prefix by specifing the number of bits in the IP address, starting from the most significant bit in network byte order, that are constant for all addresses in the prefix. </li> </li> </ul> For example, the prefix <pre><code> 192.0.2.0/24 </code></pre> covers the 256 IPv4 addresses from <pre><code> 192.0.2.0 </code></pre> to <pre><code> 192.0.2.255 </code></pre> , inclusive, and the prefix <pre><code> 2001:db8:1:2 </code></pre> covers the 2^64 IPv6 addresses from <pre><code> 2001:db8:1:2:: </code></pre> to <pre><code> 2001:db8:1:2:ffff:ffff:ffff:ffff </code></pre> , inclusive. Objects of this class are immutable.</p><pre><code>public final class IpPrefix\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/IpPrefix.html
LinkAddress	A										<section class="prog__container"><p> Identifies an IP address on a network link. A <pre><code> LinkAddress </code></pre> consists of: <ul> <li> An IP address and prefix length (e.g., <pre><code> 2001:db8::1/64 </code></pre> or <pre><code> 192.0.2.1/24 </code></pre> ). The address must be unicast, as multicast addresses cannot be assigned to interfaces. <li> Address flags: A bitmask of <pre><code> OsConstants.IFA_F_* </code></pre> values representing properties of the address (e.g., <pre><code> android.system.OsConstants.IFA_F_OPTIMISTIC </code></pre> ). <li> Address scope: One of the <pre><code> OsConstants.IFA_F_* </code></pre> values; defines the scope in which the address is unique (e.g., <pre><code> android.system.OsConstants.RT_SCOPE_LINK </code></pre> or <pre><code> android.system.OsConstants.RT_SCOPE_UNIVERSE </code></pre> ). </li> </li> </li> </ul></p><pre><code>public class LinkAddress\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/LinkAddress.html
LinkProperties	A										<section class="prog__container"><p> Describes the properties of a network link. A link represents a connection to a network. It may have multiple addresses and multiple gateways, multiple dns servers but only one http proxy and one network interface. Note that this is just a holder of data. Modifying it does not affect live networks.</p><pre><code>public final class LinkProperties\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/LinkProperties.html
LocalServerSocket	A										<section class="prog__container"><p> Non-standard class for creating an inbound UNIX-domain socket in the Linux abstract namespace.</p><pre><code>public class LocalServerSocket\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/LocalServerSocket.html
LocalSocket	A										<section class="prog__container"><p> Creates a (non-server) socket in the UNIX-domain namespace. The interface here is not entirely unlike that of java.net.Socket. This class and the streams returned from it may be used from multiple threads.</p><pre><code>public class LocalSocket\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/LocalSocket.html
LocalSocketAddress	A										<section class="prog__container"><p> A UNIX-domain (AF_LOCAL) socket address. For use with android.net.LocalSocket and android.net.LocalServerSocket. On the Android system, these names refer to names in the Linux abstract (non-filesystem) UNIX domain namespace.</p><pre><code>public class LocalSocketAddress\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/LocalSocketAddress.html
LocalSocketAddress.Namespace	A										<section class="prog__container"><p> The namespace that this address exists in. See also include/cutils/sockets.h ANDROID_SOCKET_NAMESPACE_*</p><pre><code>public static final enum LocalSocketAddress.Namespace\n</code></pre></section>	https://developer.android.com/reference/android/net/LocalSocketAddress.Namespace.html
MailTo	A										<section class="prog__container"><p> MailTo URL parser This class parses a mailto scheme URL and then can be queried for the parsed parameters. This implements RFC 2368.</p><pre><code>public class MailTo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/MailTo.html
Network	A										<section class="prog__container"><p> Identifies a <pre><code> Network </code></pre> . This is supplied to applications via <pre><code> ConnectivityManager.NetworkCallback </code></pre> in response to the active <pre><code> requestNetwork(NetworkRequest, PendingIntent) </code></pre> or passive <pre><code> registerNetworkCallback(NetworkRequest, PendingIntent) </code></pre> calls. It is used to direct traffic to the given <pre><code> Network </code></pre> , either on a <pre><code> Socket </code></pre> basis through a targeted <pre><code> SocketFactory </code></pre> or process-wide via <pre><code> bindProcessToNetwork(Network) </code></pre> .</p><pre><code>public class Network\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/Network.html
NetworkCapabilities	A										<section class="prog__container"><p> This class represents the capabilities of a network. This is used both to specify needs to <pre><code> ConnectivityManager </code></pre> and when inspecting a network. Note that this replaces the old <pre><code> TYPE_MOBILE </code></pre> method of network selection. Rather than indicate a need for Wi-Fi because an application needs high bandwidth and risk obsolescence when a new, fast network appears (like LTE), the application should specify it needs high bandwidth. Similarly if an application needs an unmetered network for a bulk transfer it can specify that rather than assuming all cellular based connections are metered and all Wi-Fi based connections are not.</p><pre><code>public final class NetworkCapabilities\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/NetworkCapabilities.html
NetworkInfo.DetailedState	A										<section class="prog__container"><p> The fine-grained state of a network connection. This level of detail is probably of interest to few applications. Most should use <pre><code> State </code></pre> instead.</p><pre><code>public static final enum NetworkInfo.DetailedState\n</code></pre></section>	https://developer.android.com/reference/android/net/NetworkInfo.DetailedState.html
NetworkInfo	A										<section class="prog__container"><p> Describes the status of a network interface. <p> Use <pre><code> getActiveNetworkInfo() </code></pre> to get an instance that represents the current network connection. </p><pre><code>public class NetworkInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/NetworkInfo.html
NetworkInfo.State	A										<section class="prog__container"><p> Coarse-grained network state. This is probably what most applications should use, rather than <pre><code> DetailedState </code></pre> . The mapping between the two is as follows: <br/> <br/> <table> <tr> <td> <b> Detailed state </b> </td> <td> <b> Coarse-grained state </b> </td> </tr> <tr> <td> <pre><code> IDLE </code></pre> </td> <td> <pre><code> DISCONNECTED </code></pre> </td> </tr> <tr> <td> <pre><code> SCANNING </code></pre> </td> <td> <pre><code> CONNECTING </code></pre> </td> </tr> <tr> <td> <pre><code> CONNECTING </code></pre> </td> <td> <pre><code> CONNECTING </code></pre> </td> </tr> <tr> <td> <pre><code> AUTHENTICATING </code></pre> </td> <td> <pre><code> CONNECTING </code></pre> </td> </tr> <tr> <td> <pre><code> CONNECTED </code></pre> </td> <td> <pre><code> CONNECTED </code></pre> </td> </tr> <tr> <td> <pre><code> DISCONNECTING </code></pre> </td> <td> <pre><code> DISCONNECTING </code></pre> </td> </tr> <tr> <td> <pre><code> DISCONNECTED </code></pre> </td> <td> <pre><code> DISCONNECTED </code></pre> </td> </tr> <tr> <td> <pre><code> UNAVAILABLE </code></pre> </td> <td> <pre><code> DISCONNECTED </code></pre> </td> </tr> <tr> <td> <pre><code> FAILED </code></pre> </td> <td> <pre><code> DISCONNECTED </code></pre> </td> </tr> </table></p><pre><code>public static final enum NetworkInfo.State\n</code></pre></section>	https://developer.android.com/reference/android/net/NetworkInfo.State.html
NetworkRequest.Builder	A										<section class="prog__container"><p> Builder used to create <pre><code> NetworkRequest </code></pre> objects. Specify the Network features needed in terms of <pre><code> NetworkCapabilities </code></pre> features</p><pre><code>public static class NetworkRequest.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/NetworkRequest.Builder.html
NetworkRequest	A										<section class="prog__container"><p> Defines a request for a network, made through <pre><code> NetworkRequest.Builder </code></pre> and used to request a network via <pre><code> requestNetwork(NetworkRequest, PendingIntent) </code></pre> or listen for changes via <pre><code> registerNetworkCallback(NetworkRequest, PendingIntent) </code></pre> .</p><pre><code>public class NetworkRequest\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/NetworkRequest.html
android.net	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/net/package-summary.html
ParseException	A										<section class="prog__container"><p> Thrown when parsing a URL fails.</p><pre><code>public class ParseException\n</code></pre></section>	https://developer.android.com/reference/android/net/ParseException.html
Proxy	A										<section class="prog__container"><p> A convenience class for accessing the user and default proxy settings.</p><pre><code>public final class Proxy\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/Proxy.html
ProxyInfo	A										<section class="prog__container"><p> Describes a proxy configuration. Proxy configurations are already integrated within the <pre><code> java.net </code></pre> and Apache HTTP stack. So <pre><code> URLConnection </code></pre> and Apache's <pre><code> HttpClient </code></pre> will use them automatically. Other HTTP stacks will need to obtain the proxy info from <pre><code> PROXY_CHANGE_ACTION </code></pre> broadcast as the extra <pre><code> EXTRA_PROXY_INFO </code></pre> .</p><pre><code>public class ProxyInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/ProxyInfo.html
PskKeyManager	A										<section class="prog__container"><p> Provider of key material for pre-shared key (PSK) key exchange used in TLS-PSK cipher suites. </p><pre><code>public abstract class PskKeyManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/PskKeyManager.html
RouteInfo	A										<section class="prog__container"><p> Represents a network route. <p> This is used both to describe static network configuration and live network configuration information. A route contains three pieces of information: <ul> <li> a destination <pre><code> IpPrefix </code></pre> specifying the network destinations covered by this route. If this is <pre><code> null </code></pre> it indicates a default route of the address family (IPv4 or IPv6) implied by the gateway IP address. <li> a gateway <pre><code> InetAddress </code></pre> indicating the next hop to use. If this is <pre><code> null </code></pre> it indicates a directly-connected route. <li> an interface (which may be unspecified). </li> </li> </li> </ul> Either the destination or the gateway may be <pre><code> null </code></pre> , but not both. If the destination and gateway are both specified, they must be of the same address family (IPv4 or IPv6). </p><pre><code>public final class RouteInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/RouteInfo.html
SSLCertificateSocketFactory	A										<section class="prog__container"><p> SSLSocketFactory implementation with several extra features: <ul> <li> Timeout specification for SSL handshake operations <li> Hostname verification in most cases (see WARNINGs below) <li> Optional SSL session caching with <pre><code> SSLSessionCache </code></pre> <li> Optionally bypass all SSL certificate checks </li> </li> </li> </li> </ul> The handshake timeout does not apply to actual TCP socket connection. If you want a connection timeout as well, use <pre><code> createSocket() </code></pre> and <pre><code> connect(SocketAddress, int) </code></pre> , after which you must verify the identity of the server you are connected to. <p class="caution"> <b> Most <pre><code> SSLSocketFactory </code></pre> implementations do not verify the server's identity, allowing man-in-the-middle attacks. </b> This implementation does check the server's certificate hostname, but only for createSocket variants that specify a hostname. When using methods that use <pre><code> InetAddress </code></pre> or which return an unconnected socket, you MUST verify the server's identity yourself to ensure a secure connection. </p><pre><code>public class SSLCertificateSocketFactory\n</code></pre></section>	https://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html
SSLSessionCache	A										<section class="prog__container"><p> File-based cache of established SSL sessions. When re-establishing a connection to the same server, using an SSL session cache can save some time, power, and bandwidth by skipping directly to an encrypted stream. This is a persistent cache which can span executions of the application.</p><pre><code>public final class SSLSessionCache\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/SSLSessionCache.html
TrafficStats	A										<section class="prog__container"><p> Class that provides network traffic statistics. These statistics include bytes transmitted and received and network packets transmitted and received, over all interfaces, over the mobile interface, and on a per-UID basis. <p> These statistics may not be available on all platforms. If the statistics are not supported by this device, <pre><code> UNSUPPORTED </code></pre> will be returned. <p> Note that the statistics returned by this class reset and start from zero after every reboot. To access more robust historical network statistics data, use <pre><code> NetworkStatsManager </code></pre> instead. </p><pre><code>public class TrafficStats\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/TrafficStats.html
Uri.Builder	A										<section class="prog__container"><p> Helper class for building or manipulating URI references. Not safe for concurrent use. <p> An absolute hierarchical URI reference follows the pattern: <pre><code> &lt;scheme&gt;://&lt;authority&gt;&lt;absolute path&gt;?&lt;query&gt;#&lt;fragment&gt; </code></pre> <p> Relative URI references (which are always hierarchical) follow one of two patterns: <pre><code> &lt;relative or absolute path&gt;?&lt;query&gt;#&lt;fragment&gt; </code></pre> or <pre><code> //&lt;authority&gt;&lt;absolute path&gt;?&lt;query&gt;#&lt;fragment&gt; </code></pre> <p> An opaque URI follows this pattern: <pre><code> &lt;scheme&gt;:&lt;opaque part&gt;#&lt;fragment&gt; </code></pre> <p> Use <pre><code> buildUpon() </code></pre> to obtain a builder representing an existing URI. </p><pre><code>public static final class Uri.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/Uri.Builder.html
Uri	A										<section class="prog__container"><p> Immutable URI reference. A URI reference includes a URI and a fragment, the component of the URI following a '#'. Builds and parses URI references which conform to RFC 2396 . <p> In the interest of performance, this class performs little to no validation. Behavior is undefined for invalid input. This class is very forgiving--in the face of invalid input, it will return garbage rather than throw an exception unless otherwise specified. </p><pre><code>public abstract class Uri\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/Uri.html
UrlQuerySanitizer	A										<section class="prog__container"><p> Sanitizes the Query portion of a URL. Simple example: <pre><code> UrlQuerySanitizer sanitizer = new UrlQuerySanitizer(); sanitizer.setAllowUnregisteredParamaters(true); sanitizer.parseUrl("http://example.com/?name=Joe+User"); String name = sanitizer.getValue("name")); // name now contains "Joe_User" </code></pre> Register ValueSanitizers to customize the way individual parameters are sanitized: <pre><code> UrlQuerySanitizer sanitizer = new UrlQuerySanitizer(); sanitizer.registerParamater("name", UrlQuerySanitizer.createSpaceLegal()); sanitizer.parseUrl("http://example.com/?name=Joe+User"); String name = sanitizer.getValue("name")); // name now contains "Joe User". (The string is first decoded, which // converts the '+' to a ' '. Then the string is sanitized, which // converts the ' ' to an '_'. (The ' ' is converted because the default unregistered parameter sanitizer does not allow any special characters, and ' ' is a special character.) </code></pre> There are several ways to create ValueSanitizers. In order of increasing sophistication: <ol> <li> Call one of the UrlQuerySanitizer.createXXX() methods. <li> Construct your own instance of UrlQuerySanitizer.IllegalCharacterValueSanitizer. <li> Subclass UrlQuerySanitizer.ValueSanitizer to define your own value sanitizer. </li> </li> </li> </ol></p><pre><code>public class UrlQuerySanitizer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/UrlQuerySanitizer.html
UrlQuerySanitizer.IllegalCharacterValueSanitizer	A										<section class="prog__container"><p> Sanitize values based on which characters they contain. Illegal characters are replaced with either space or '_', depending upon whether space is a legal character or not.</p><pre><code>public static class UrlQuerySanitizer.IllegalCharacterValueSanitizer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html
UrlQuerySanitizer.ParameterValuePair	A										<section class="prog__container"><p> A simple tuple that holds parameter-value pairs.</p><pre><code>public class UrlQuerySanitizer.ParameterValuePair\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/UrlQuerySanitizer.ParameterValuePair.html
UrlQuerySanitizer.ValueSanitizer	A										<section class="prog__container"><p> A functor used to sanitize a single query value.</p><pre><code>public static interface UrlQuerySanitizer.ValueSanitizer\n</code></pre></section>	https://developer.android.com/reference/android/net/UrlQuerySanitizer.ValueSanitizer.html
VpnService.Builder	A										<section class="prog__container"><p> Helper class to create a VPN interface. This class should be always used within the scope of the outer <pre><code> VpnService </code></pre> .</p><pre><code>public class VpnService.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/VpnService.Builder.html
VpnService	A										<section class="prog__container"><p> VpnService is a base class for applications to extend and build their own VPN solutions. In general, it creates a virtual network interface, configures addresses and routing rules, and returns a file descriptor to the application. Each read from the descriptor retrieves an outgoing packet which was routed to the interface. Each write to the descriptor injects an incoming packet just like it was received from the interface. The interface is running on Internet Protocol (IP), so packets are always started with IP headers. The application then completes a VPN connection by processing and exchanging packets with the remote server over a tunnel. <p> Letting applications intercept packets raises huge security concerns. A VPN application can easily break the network. Besides, two of them may conflict with each other. The system takes several actions to address these issues. Here are some key points: <ul> <li> User action is required the first time an application creates a VPN connection. </li> <li> There can be only one VPN connection running at the same time. The existing interface is deactivated when a new one is created. </li> <li> A system-managed notification is shown during the lifetime of a VPN connection. </li> <li> A system-managed dialog gives the information of the current VPN connection. It also provides a button to disconnect. </li> <li> The network is restored automatically when the file descriptor is closed. It also covers the cases when a VPN application is crashed or killed by the system. </li> </ul> <p> There are two primary methods in this class: <pre><code> prepare(Context) </code></pre> and <pre><code> establish() </code></pre> . The former deals with user action and stops the VPN connection created by another application. The latter creates a VPN interface using the parameters supplied to the <pre><code> VpnService.Builder </code></pre> . An application must call <pre><code> prepare(Context) </code></pre> to grant the right to use other methods in this class, and the right can be revoked at any time. Here are the general steps to create a VPN connection: <ol> <li> When the user presses the button to connect, call <pre><code> prepare(Context) </code></pre> and launch the returned intent, if non-null. </li> <li> When the application becomes prepared, start the service. </li> <li> Create a tunnel to the remote server and negotiate the network parameters for the VPN connection. </li> <li> Supply those parameters to a <pre><code> VpnService.Builder </code></pre> and create a VPN interface by calling <pre><code> establish() </code></pre> . </li> <li> Process and exchange packets between the tunnel and the returned file descriptor. </li> <li> When <pre><code> onRevoke() </code></pre> is invoked, close the file descriptor and shut down the tunnel gracefully. </li> </ol> <p> Services extended this class need to be declared with appropriate permission and intent filter. Their access must be secured by <pre><code> BIND_VPN_SERVICE </code></pre> permission, and their intent filter must match <pre><code> SERVICE_INTERFACE </code></pre> action. Here is an example of declaring a VPN service in <pre><code> AndroidManifest.xml </code></pre> : <pre> &lt;service android:name=".ExampleVpnService" android:permission="android.permission.BIND_VPN_SERVICE"&gt; &lt;intent-filter&gt; &lt;action android:name="android.net.VpnService"/&gt; &lt;/intent-filter&gt; &lt;/service&gt;</pre> </p><pre><code>public class VpnService\n</code></pre></section>	https://developer.android.com/reference/android/net/VpnService.html
HttpResponseCache	A										<section class="prog__container"><p> Caches HTTP and HTTPS responses to the filesystem so they may be reused, saving time and bandwidth. This class supports <pre><code> HttpURLConnection </code></pre> and <pre><code> HttpsURLConnection </code></pre> ; there is no platform-provided cache for <pre><code> DefaultHttpClient </code></pre> or <pre><code> AndroidHttpClient </code></pre> . Installation and instances are thread safe. </p><pre><code>public final class HttpResponseCache\n</code></pre></section>	https://developer.android.com/reference/android/net/http/HttpResponseCache.html
android.net.http	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/net/http/package-summary.html
SslCertificate.DName	A										<section class="prog__container"><p> A distinguished name helper class: a 3-tuple of: <ul> <li> the most specific common name (CN) </li> <li> the most specific organization (O) </li> <li> the most specific organizational unit (OU) </li> <ul> </ul> </ul></p><pre><code>public class SslCertificate.DName\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/http/SslCertificate.DName.html
SslCertificate	A										<section class="prog__container"><p> SSL certificate info (certificate details) class</p><pre><code>public class SslCertificate\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/http/SslCertificate.html
SslError	A										<section class="prog__container"><p> This class represents a set of one or more SSL errors and the associated SSL certificate.</p><pre><code>public class SslError\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/http/SslError.html
X509TrustManagerExtensions	A										<section class="prog__container"><p> X509TrustManager wrapper exposing Android-added features. <p> The checkServerTrusted method allows callers to perform additional verification of certificate chains after they have been successfully verified by the platform. </p><pre><code>public class X509TrustManagerExtensions\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/http/X509TrustManagerExtensions.html
NsdManager.DiscoveryListener	A										<section class="prog__container"><p> Interface for callback invocation for service discovery</p><pre><code>public static interface NsdManager.DiscoveryListener\n</code></pre></section>	https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html
NsdManager	A										<section class="prog__container"><p> The Network Service Discovery Manager class provides the API to discover services on a network. As an example, if device A and device B are connected over a Wi-Fi network, a game registered on device A can be discovered by a game on device B. Another example use case is an application discovering printers on the network. <p> The API currently supports DNS based service discovery and discovery is currently limited to a local network over Multicast DNS. DNS service discovery is described at http://files.dns-sd.org/draft-cheshire-dnsext-dns-sd.txt <p> The API is asynchronous and responses to requests from an application are on listener callbacks on a seperate thread. <p> There are three main operations the API supports - registration, discovery and resolution. <pre> Application start | | | onServiceRegistered() Register any local services / to be advertised with \ registerService() onRegistrationFailed() | | discoverServices() | Maintain a list to track discovered services | |---------&gt; | | | onServiceFound() | | | add service to list | | |&lt;---------- | |---------&gt; | | | onServiceLost() | | | remove service from list | | |&lt;---------- | | | Connect to a service | from list ? | resolveService() | onServiceResolved() | Establish connection to service with the host and port information </pre> An application that needs to advertise itself over a network for other applications to discover it can do so with a call to <pre><code> registerService(NsdServiceInfo, int, NsdManager.RegistrationListener) </code></pre> . If Example is a http based application that can provide HTML data to peer services, it can register a name "Example" with service type "_http._tcp". A successful registration is notified with a callback to <pre><code> onServiceRegistered(NsdServiceInfo) </code></pre> and a failure to register is notified over <pre><code> onRegistrationFailed(NsdServiceInfo, int) </code></pre> <p> A peer application looking for http services can initiate a discovery for "_http._tcp" with a call to <pre><code> discoverServices(String, int, NsdManager.DiscoveryListener) </code></pre> . A service found is notified with a callback to <pre><code> onServiceFound(NsdServiceInfo) </code></pre> and a service lost is notified on <pre><code> onServiceLost(NsdServiceInfo) </code></pre> . <p> Once the peer application discovers the "Example" http srevice, and needs to receive data from the "Example" application, it can initiate a resolve with <pre><code> resolveService(NsdServiceInfo, NsdManager.ResolveListener) </code></pre> to resolve the host and port details for the purpose of establishing a connection. A successful resolve is notified on <pre><code> onServiceResolved(NsdServiceInfo) </code></pre> and a failure is notified on <pre><code> onResolveFailed(NsdServiceInfo, int) </code></pre> . Applications can reserve for a service type at http://www.iana.org/form/ports-service. Existing services can be found at http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xml Get an instance of this class by calling <pre><code> Context.getSystemService(Context.NSD_SERVICE) </code></pre> . </p><pre><code>public final class NsdManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/nsd/NsdManager.html
NsdManager.RegistrationListener	A										<section class="prog__container"><p> Interface for callback invocation for service registration</p><pre><code>public static interface NsdManager.RegistrationListener\n</code></pre></section>	https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html
NsdManager.ResolveListener	A										<section class="prog__container"><p> Interface for callback invocation for service resolution</p><pre><code>public static interface NsdManager.ResolveListener\n</code></pre></section>	https://developer.android.com/reference/android/net/nsd/NsdManager.ResolveListener.html
NsdServiceInfo	A										<section class="prog__container"><p> A class representing service information for network service discovery</p><pre><code>public final class NsdServiceInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/nsd/NsdServiceInfo.html
android.net.nsd	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/net/nsd/package-summary.html
AudioCodec	A										<section class="prog__container"><p> This class defines a collection of audio codecs to be used with <pre><code> AudioStream </code></pre> s. Their parameters are designed to be exchanged using Session Description Protocol (SDP). Most of the values listed here can be found in RFC 3551, while others are described in separated standards. <p> Few simple configurations are defined as public static instances for the convenience of direct uses. More complicated ones could be obtained using <pre><code> getCodec(int, String, String) </code></pre> . For example, one can use the following snippet to create a mode-1-only AMR codec. </p><pre><code>public class AudioCodec\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/rtp/AudioCodec.html
AudioGroup	A										<section class="prog__container"><p> An AudioGroup is an audio hub for the speaker, the microphone, and <pre><code> AudioStream </code></pre> s. Each of these components can be logically turned on or off by calling <pre><code> setMode(int) </code></pre> or <pre><code> setMode(int) </code></pre> . The AudioGroup will go through these components and process them one by one within its execution loop. The loop consists of four steps. First, for each AudioStream not in <pre><code> MODE_SEND_ONLY </code></pre> , decodes its incoming packets and stores in its buffer. Then, if the microphone is enabled, processes the recorded audio and stores in its buffer. Third, if the speaker is enabled, mixes all AudioStream buffers and plays back. Finally, for each AudioStream not in <pre><code> MODE_RECEIVE_ONLY </code></pre> , mixes all other buffers and sends back the encoded packets. An AudioGroup does nothing if there is no AudioStream in it. <p> Few things must be noticed before using these classes. The performance is highly related to the system load and the network bandwidth. Usually a simpler <pre><code> AudioCodec </code></pre> costs fewer CPU cycles but requires more network bandwidth, and vise versa. Using two AudioStreams at the same time doubles not only the load but also the bandwidth. The condition varies from one device to another, and developers should choose the right combination in order to get the best result. </p><pre><code>public class AudioGroup\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/rtp/AudioGroup.html
AudioStream	A										<section class="prog__container"><p> An AudioStream is a <pre><code> RtpStream </code></pre> which carrys audio payloads over Real-time Transport Protocol (RTP). Two different classes are developed in order to support various usages such as audio conferencing. An AudioStream represents a remote endpoint which consists of a network mapping and a configured <pre><code> AudioCodec </code></pre> . On the other side, An <pre><code> AudioGroup </code></pre> represents a local endpoint which mixes all the AudioStreams and optionally interacts with the speaker and the microphone at the same time. The simplest usage includes one for each endpoints. For other combinations, developers should be aware of the limitations described in <pre><code> AudioGroup </code></pre> . <p> An AudioStream becomes busy when it joins an AudioGroup. In this case most of the setter methods are disabled. This is designed to ease the task of managing native resources. One can always make an AudioStream leave its AudioGroup by calling <pre><code> join(AudioGroup) </code></pre> with <pre><code> null </code></pre> and put it back after the modification is done. </p><pre><code>public class AudioStream\n</code></pre></section>	https://developer.android.com/reference/android/net/rtp/AudioStream.html
android.net.rtp	A										<section class="prog__container">Provides APIs for RTP (Real-time Transport Protocol), allowing applications to manage on-demandor interactive data streaming. In particular, apps that provide VOIP, push-to-talk, conferencing,and audio streaming can use these APIs to initiate sessions and transmit or receive data streamsover any available network.</section>	https://developer.android.com/reference/android/net/rtp/package-summary.html
RtpStream	A										<section class="prog__container"><p> RtpStream represents the base class of streams which send and receive network packets with media payloads over Real-time Transport Protocol (RTP). <p class="note"> Using this class requires <pre><code> INTERNET </code></pre> permission. </p><pre><code>public class RtpStream\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/rtp/RtpStream.html
android.net.sip	A										<section class="prog__container">Provides access to Session Initiation Protocol (SIP) functionality, such asmaking and answering VOIP calls using SIP.</section>	https://developer.android.com/reference/android/net/sip/package-summary.html
SipAudioCall	A										<section class="prog__container"><p> Handles an Internet audio call over SIP. You can instantiate this class with <pre><code> SipManager </code></pre> , using <pre><code> makeAudioCall() </code></pre> and <pre><code> takeAudioCall() </code></pre> . <p class="note"> <strong> Note: </strong> Using this class require the <pre><code> INTERNET </code></pre> and <pre><code> USE_SIP </code></pre> permissions. In addition, <pre><code> startAudio() </code></pre> requires the <pre><code> RECORD_AUDIO </code></pre> , <pre><code> ACCESS_WIFI_STATE </code></pre> , and <pre><code> WAKE_LOCK </code></pre> permissions; and <pre><code> setSpeakerMode() </code></pre> requires the <pre><code> MODIFY_AUDIO_SETTINGS </code></pre> permission. </p><pre><code>public class SipAudioCall\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/sip/SipAudioCall.html
SipAudioCall.Listener	A										<section class="prog__container"><p> Listener for events relating to a SIP call, such as when a call is being recieved ("on ringing") or a call is outgoing ("on calling"). <p> Many of these events are also received by <pre><code> SipSession.Listener </code></pre> . </p><pre><code>public static class SipAudioCall.Listener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html
SipErrorCode	A										<section class="prog__container"><p> Defines error codes returned during SIP actions. For example, during <pre><code> onRegistrationFailed() </code></pre> , <pre><code> onError() </code></pre> , <pre><code> onCallChangeFailed() </code></pre> and <pre><code> onRegistrationFailed() </code></pre> .</p><pre><code>public class SipErrorCode\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/sip/SipErrorCode.html
SipException	A										<section class="prog__container"><p> Indicates a general SIP-related exception.</p><pre><code>public class SipException\n</code></pre></section>	https://developer.android.com/reference/android/net/sip/SipException.html
SipManager	A										<section class="prog__container"><p> Provides APIs for SIP tasks, such as initiating SIP connections, and provides access to related SIP services. This class is the starting point for any SIP actions. You can acquire an instance of it with <pre><code> newInstance() </code></pre> .</p><pre><code>public class SipManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/sip/SipManager.html
SipProfile.Builder	A										<section class="prog__container"><p> Helper class for creating a <pre><code> SipProfile </code></pre> .</p><pre><code>public static class SipProfile.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/sip/SipProfile.Builder.html
SipProfile	A										<section class="prog__container"><p> Defines a SIP profile, including a SIP account, domain and server information. <p> You can create a <pre><code> SipProfile </code></pre> using <pre><code> SipProfile.Builder </code></pre> . You can also retrieve one from a <pre><code> SipSession </code></pre> , using <pre><code> getLocalProfile() </code></pre> and <pre><code> getPeerProfile() </code></pre> . </p><pre><code>public class SipProfile\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/sip/SipProfile.html
SipRegistrationListener	A										<section class="prog__container"><p> Listener for SIP registration events.</p><pre><code>public interface SipRegistrationListener\n</code></pre></section>	https://developer.android.com/reference/android/net/sip/SipRegistrationListener.html
SipSession	A										<section class="prog__container"><p> Represents a SIP session that is associated with a SIP dialog or a standalone transaction not within a dialog. <p> You can get a <pre><code> SipSession </code></pre> from <pre><code> SipManager </code></pre> with <pre><code> createSipSession() </code></pre> (when initiating calls) or <pre><code> getSessionFor() </code></pre> (when receiving calls). </p><pre><code>public final class SipSession\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/sip/SipSession.html
SipSession.Listener	A										<section class="prog__container"><p> Listener for events relating to a SIP session, such as when a session is being registered ("on registering") or a call is outgoing ("on calling"). <p> Many of these events are also received by <pre><code> SipAudioCall.Listener </code></pre> . </p><pre><code>public static class SipSession.Listener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/sip/SipSession.Listener.html
SipSession.State	A										<section class="prog__container"><p> Defines SIP session states, such as "registering", "outgoing call", and "in call".</p><pre><code>public static class SipSession.State\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/sip/SipSession.State.html
android.net.wifi	A										<section class="prog__container">Provides classes to manage Wi-Fi functionality on the device.</section>	https://developer.android.com/reference/android/net/wifi/package-summary.html
ScanResult	A										<section class="prog__container"><p> Describes information about a detected access point. In addition to the attributes described here, the supplicant keeps track of <pre><code> quality </code></pre> , <pre><code> noise </code></pre> , and <pre><code> maxbitrate </code></pre> attributes, but does not currently report them to external clients.</p><pre><code>public class ScanResult\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/ScanResult.html
SupplicantState	A										<section class="prog__container"><pre><code>public final enum SupplicantState\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/SupplicantState.html
WifiConfiguration.AuthAlgorithm	A										<section class="prog__container"><p> Recognized IEEE 802.11 authentication algorithms.</p><pre><code>public static class WifiConfiguration.AuthAlgorithm\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiConfiguration.AuthAlgorithm.html
WifiConfiguration.GroupCipher	A										<section class="prog__container"><p> Recognized group ciphers. <pre> CCMP = AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0] TKIP = Temporal Key Integrity Protocol [IEEE 802.11i/D7.0] WEP104 = WEP (Wired Equivalent Privacy) with 104-bit key WEP40 = WEP (Wired Equivalent Privacy) with 40-bit key (original 802.11) </pre></p><pre><code>public static class WifiConfiguration.GroupCipher\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiConfiguration.GroupCipher.html
WifiConfiguration	A										<section class="prog__container"><p> A class representing a configured Wi-Fi network, including the security configuration.</p><pre><code>public class WifiConfiguration\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html
WifiConfiguration.KeyMgmt	A										<section class="prog__container"><p> Recognized key management schemes.</p><pre><code>public static class WifiConfiguration.KeyMgmt\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html
WifiConfiguration.PairwiseCipher	A										<section class="prog__container"><p> Recognized pairwise ciphers for WPA.</p><pre><code>public static class WifiConfiguration.PairwiseCipher\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiConfiguration.PairwiseCipher.html
WifiConfiguration.Protocol	A										<section class="prog__container"><p> Recognized security protocols.</p><pre><code>public static class WifiConfiguration.Protocol\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiConfiguration.Protocol.html
WifiConfiguration.Status	A										<section class="prog__container"><p> Possible status of a network configuration.</p><pre><code>public static class WifiConfiguration.Status\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiConfiguration.Status.html
WifiEnterpriseConfig.Eap	A										<section class="prog__container"><p> The Extensible Authentication Protocol method used</p><pre><code>public static final class WifiEnterpriseConfig.Eap\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Eap.html
WifiEnterpriseConfig	A										<section class="prog__container"><p> Enterprise configuration details for Wi-Fi. Stores details about the EAP method and any associated credentials.</p><pre><code>public class WifiEnterpriseConfig\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html
WifiEnterpriseConfig.Phase2	A										<section class="prog__container"><p> The inner authentication method used</p><pre><code>public static final class WifiEnterpriseConfig.Phase2\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Phase2.html
WifiInfo	A										<section class="prog__container"><p> Describes the state of any Wifi connection that is active or is in the process of being set up.</p><pre><code>public class WifiInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiInfo.html
WifiManager	A										<section class="prog__container"><p> This class provides the primary API for managing all aspects of Wi-Fi connectivity. Get an instance of this class by calling <pre><code> Context.getSystemService(Context.WIFI_SERVICE) </code></pre> . On releases before NYC, it should only be obtained from an application context, and not from any other derived context to avoid memory leaks within the calling process. It deals with several categories of items: <ul> <li> The list of configured networks. The list can be viewed and updated, and attributes of individual entries can be modified. </li> <li> The currently active Wi-Fi network, if any. Connectivity can be established or torn down, and dynamic information about the state of the network can be queried. </li> <li> Results of access point scans, containing enough information to make decisions about what access point to connect to. </li> <li> It defines the names of various Intent actions that are broadcast upon any sort of change in Wi-Fi state. </li> </ul> This is the API to use when performing Wi-Fi specific operations. To perform operations that pertain to network connectivity at an abstract level, use <pre><code> ConnectivityManager </code></pre> .</p><pre><code>public class WifiManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiManager.html
WifiManager.MulticastLock	A										<section class="prog__container"><p> Allows an application to receive Wifi Multicast packets. Normally the Wifi stack filters out packets not explicitly addressed to this device. Acquring a MulticastLock will cause the stack to receive packets addressed to multicast addresses. Processing these extra packets can cause a noticable battery drain and should be disabled when not needed.</p><pre><code>public class WifiManager.MulticastLock\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiManager.MulticastLock.html
WifiManager.WifiLock	A										<section class="prog__container"><p> Allows an application to keep the Wi-Fi radio awake. Normally the Wi-Fi radio may turn off when the user has not used the device in a while. Acquiring a WifiLock will keep the radio on until the lock is released. Multiple applications may hold WifiLocks, and the radio will only be allowed to turn off when no WifiLocks are held in any application. <p> Before using a WifiLock, consider carefully if your application requires Wi-Fi access, or could function over a mobile network, if available. A program that needs to download large files should hold a WifiLock to ensure that the download will complete, but a program whose network usage is occasional or low-bandwidth should not hold a WifiLock to avoid adversely affecting battery life. <p> Note that WifiLocks cannot override the user-level "Wi-Fi Enabled" setting, nor Airplane Mode. They simply keep the radio from turning off when Wi-Fi is already on but the device is idle. <p> Any application using a WifiLock must request the <pre><code> android.permission.WAKE_LOCK </code></pre> permission in an <pre><code> &lt;uses-permission&gt; </code></pre> element of the application's manifest. </p><pre><code>public class WifiManager.WifiLock\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiManager.WifiLock.html
WifiManager.WpsCallback	A										<section class="prog__container"><p> Interface for callback invocation on a start WPS action</p><pre><code>public static abstract class WifiManager.WpsCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiManager.WpsCallback.html
WpsInfo	A										<section class="prog__container"><p> A class representing Wi-Fi Protected Setup</p><pre><code>public class WpsInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/WpsInfo.html
android.net.wifi.p2p	A										<section class="prog__container">Provides classes to create peer-to-peer (P2P) connections with Wi-Fi Direct.</section>	https://developer.android.com/reference/android/net/wifi/p2p/package-summary.html
WifiP2pConfig	A										<section class="prog__container"><p> A class representing a Wi-Fi P2p configuration for setting up a connection</p><pre><code>public class WifiP2pConfig\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html
WifiP2pDevice	A										<section class="prog__container"><p> A class representing a Wi-Fi p2p device Note that the operations are not thread safe</p><pre><code>public class WifiP2pDevice\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pDevice.html
WifiP2pDeviceList	A										<section class="prog__container"><p> A class representing a Wi-Fi P2p device list. Note that the operations are not thread safe.</p><pre><code>public class WifiP2pDeviceList\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pDeviceList.html
WifiP2pGroup	A										<section class="prog__container"><p> A class representing a Wi-Fi P2p group. A p2p group consists of a single group owner and one or more clients. In the case of a group with only two devices, one will be the group owner and the other will be a group client.</p><pre><code>public class WifiP2pGroup\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html
WifiP2pInfo	A										<section class="prog__container"><p> A class representing connection information about a Wi-Fi p2p group</p><pre><code>public class WifiP2pInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pInfo.html
WifiP2pManager.ActionListener	A										<section class="prog__container"><p> Interface for callback invocation on an application action</p><pre><code>public static interface WifiP2pManager.ActionListener\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ActionListener.html
WifiP2pManager.Channel	A										<section class="prog__container"><p> A channel that connects the application to the Wifi p2p framework. Most p2p operations require a Channel as an argument. An instance of Channel is obtained by doing a call on <pre><code> initialize(Context, Looper, WifiP2pManager.ChannelListener) </code></pre></p><pre><code>public static class WifiP2pManager.Channel\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.Channel.html
WifiP2pManager.ChannelListener	A										<section class="prog__container"><p> Interface for callback invocation when framework channel is lost</p><pre><code>public static interface WifiP2pManager.ChannelListener\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ChannelListener.html
WifiP2pManager.ConnectionInfoListener	A										<section class="prog__container"><p> Interface for callback invocation when connection info is available</p><pre><code>public static interface WifiP2pManager.ConnectionInfoListener\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ConnectionInfoListener.html
WifiP2pManager.DnsSdServiceResponseListener	A										<section class="prog__container"><p> Interface for callback invocation when Bonjour service discovery response is received</p><pre><code>public static interface WifiP2pManager.DnsSdServiceResponseListener\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DnsSdServiceResponseListener.html
WifiP2pManager.DnsSdTxtRecordListener	A										<section class="prog__container"><p> Interface for callback invocation when Bonjour TXT record is available for a service</p><pre><code>public static interface WifiP2pManager.DnsSdTxtRecordListener\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DnsSdTxtRecordListener.html
WifiP2pManager.GroupInfoListener	A										<section class="prog__container"><p> Interface for callback invocation when group info is available</p><pre><code>public static interface WifiP2pManager.GroupInfoListener\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.GroupInfoListener.html
WifiP2pManager	A										<section class="prog__container"><p> This class provides the API for managing Wi-Fi peer-to-peer connectivity. This lets an application discover available peers, setup connection to peers and query for the list of peers. When a p2p connection is formed over wifi, the device continues to maintain the uplink connection over mobile or any other available network for internet connectivity on the device. <p> The API is asynchronous and responses to requests from an application are on listener callbacks provided by the application. The application needs to do an initialization with <pre><code> initialize(Context, Looper, WifiP2pManager.ChannelListener) </code></pre> before doing any p2p operation. <p> Most application calls need a <pre><code> WifiP2pManager.ActionListener </code></pre> instance for receiving callbacks <pre><code> onSuccess() </code></pre> or <pre><code> onFailure(int) </code></pre> . Action callbacks indicate whether the initiation of the action was a success or a failure. Upon failure, the reason of failure can be one of <pre><code> ERROR </code></pre> , <pre><code> P2P_UNSUPPORTED </code></pre> or <pre><code> BUSY </code></pre> . <p> An application can initiate discovery of peers with <pre><code> discoverPeers(WifiP2pManager.Channel, WifiP2pManager.ActionListener) </code></pre> . An initiated discovery request from an application stays active until the device starts connecting to a peer ,forms a p2p group or there is an explicit <pre><code> stopPeerDiscovery(WifiP2pManager.Channel, WifiP2pManager.ActionListener) </code></pre> . Applications can listen to <pre><code> WIFI_P2P_DISCOVERY_CHANGED_ACTION </code></pre> to know if a peer-to-peer discovery is running or stopped. Additionally, <pre><code> WIFI_P2P_PEERS_CHANGED_ACTION </code></pre> indicates if the peer list has changed. <p> When an application needs to fetch the current list of peers, it can request the list of peers with <pre><code> requestPeers(WifiP2pManager.Channel, WifiP2pManager.PeerListListener) </code></pre> . When the peer list is available <pre><code> onPeersAvailable(WifiP2pDeviceList) </code></pre> is called with the device list. <p> An application can initiate a connection request to a peer through <pre><code> connect(WifiP2pManager.Channel, WifiP2pConfig, WifiP2pManager.ActionListener) </code></pre> . See <pre><code> WifiP2pConfig </code></pre> for details on setting up the configuration. For communication with legacy Wi-Fi devices that do not support p2p, an app can create a group using <pre><code> createGroup(WifiP2pManager.Channel, WifiP2pManager.ActionListener) </code></pre> which creates an access point whose details can be fetched with <pre><code> requestGroupInfo(WifiP2pManager.Channel, WifiP2pManager.GroupInfoListener) </code></pre> . <p> After a successful group formation through <pre><code> createGroup(WifiP2pManager.Channel, WifiP2pManager.ActionListener) </code></pre> or through <pre><code> connect(WifiP2pManager.Channel, WifiP2pConfig, WifiP2pManager.ActionListener) </code></pre> , use <pre><code> requestConnectionInfo(WifiP2pManager.Channel, WifiP2pManager.ConnectionInfoListener) </code></pre> to fetch the connection details. The connection info <pre><code> WifiP2pInfo </code></pre> contains the address of the group owner <pre><code> groupOwnerAddress </code></pre> and a flag <pre><code> isGroupOwner </code></pre> to indicate if the current device is a p2p group owner. A p2p client can thus communicate with the p2p group owner through a socket connection. <p> With peer discovery using <pre><code> discoverPeers(WifiP2pManager.Channel, WifiP2pManager.ActionListener) </code></pre> , an application discovers the neighboring peers, but has no good way to figure out which peer to establish a connection with. For example, if a game application is interested in finding all the neighboring peers that are also running the same game, it has no way to find out until after the connection is setup. Pre-association service discovery is meant to address this issue of filtering the peers based on the running services. <p> With pre-association service discovery, an application can advertise a service for a application on a peer device prior to a connection setup between the devices. Currently, DNS based service discovery (Bonjour) and Upnp are the higher layer protocols supported. Get Bonjour resources at dns-sd.org and Upnp resources at upnp.org As an example, a video application can discover a Upnp capable media renderer prior to setting up a Wi-fi p2p connection with the device. <p> An application can advertise a Upnp or a Bonjour service with a call to <pre><code> addLocalService(WifiP2pManager.Channel, WifiP2pServiceInfo, WifiP2pManager.ActionListener) </code></pre> . After a local service is added, the framework automatically responds to a peer application discovering the service prior to establishing a p2p connection. A call to <pre><code> removeLocalService(WifiP2pManager.Channel, WifiP2pServiceInfo, WifiP2pManager.ActionListener) </code></pre> removes a local service and <pre><code> clearLocalServices(WifiP2pManager.Channel, WifiP2pManager.ActionListener) </code></pre> can be used to clear all local services. <p> An application that is looking for peer devices that support certain services can do so with a call to <pre><code> discoverServices(WifiP2pManager.Channel, WifiP2pManager.ActionListener) </code></pre> . Prior to initiating the discovery, application can add service discovery request with a call to <pre><code> addServiceRequest(WifiP2pManager.Channel, WifiP2pServiceRequest, WifiP2pManager.ActionListener) </code></pre> , remove a service discovery request with a call to <pre><code> removeServiceRequest(WifiP2pManager.Channel, WifiP2pServiceRequest, WifiP2pManager.ActionListener) </code></pre> or clear all requests with a call to <pre><code> clearServiceRequests(WifiP2pManager.Channel, WifiP2pManager.ActionListener) </code></pre> . When no service requests remain, a previously running service discovery will stop. The application is notified of a result of service discovery request through listener callbacks set through <pre><code> setDnsSdResponseListeners(WifiP2pManager.Channel, WifiP2pManager.DnsSdServiceResponseListener, WifiP2pManager.DnsSdTxtRecordListener) </code></pre> for Bonjour or <pre><code> setUpnpServiceResponseListener(WifiP2pManager.Channel, WifiP2pManager.UpnpServiceResponseListener) </code></pre> for Upnp. <p class="note"> <strong> Note: </strong> Registering an application handler with <pre><code> initialize(Context, Looper, WifiP2pManager.ChannelListener) </code></pre> requires the permissions <pre><code> ACCESS_WIFI_STATE </code></pre> and <pre><code> CHANGE_WIFI_STATE </code></pre> to perform any further peer-to-peer operations. Get an instance of this class by calling <pre><code> Context.getSystemService(Context.WIFI_P2P_SERVICE) </code></pre> . </p><pre><code>public class WifiP2pManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html
WifiP2pManager.PeerListListener	A										<section class="prog__container"><p> Interface for callback invocation when peer list is available</p><pre><code>public static interface WifiP2pManager.PeerListListener\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.PeerListListener.html
WifiP2pManager.ServiceResponseListener	A										<section class="prog__container"><p> Interface for callback invocation when service discovery response other than Upnp or Bonjour is received</p><pre><code>public static interface WifiP2pManager.ServiceResponseListener\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ServiceResponseListener.html
WifiP2pManager.UpnpServiceResponseListener	A										<section class="prog__container"><p> Interface for callback invocation when upnp service discovery response is received</p><pre><code>public static interface WifiP2pManager.UpnpServiceResponseListener\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.UpnpServiceResponseListener.html
android.net.wifi.p2p.nsd	A										<section class="prog__container">This class is used to create service discovery request for custom vendor specific service discovery protocol</section>	https://developer.android.com/reference/android/net/wifi/p2p/nsd/package-summary.html
WifiP2pDnsSdServiceInfo	A										<section class="prog__container"><p> A class for storing Bonjour service information that is advertised over a Wi-Fi peer-to-peer setup.</p><pre><code>public class WifiP2pDnsSdServiceInfo\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pDnsSdServiceInfo.html
WifiP2pDnsSdServiceRequest	A										<section class="prog__container"><p> A class for creating a Bonjour service discovery request for use with <pre><code> addServiceRequest(WifiP2pManager.Channel, WifiP2pServiceRequest, WifiP2pManager.ActionListener) </code></pre> and <pre><code> removeServiceRequest(WifiP2pManager.Channel, WifiP2pServiceRequest, WifiP2pManager.ActionListener) </code></pre></p><pre><code>public class WifiP2pDnsSdServiceRequest\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pDnsSdServiceRequest.html
WifiP2pServiceInfo	A										<section class="prog__container"><p> A class for storing service information that is advertised over a Wi-Fi peer-to-peer setup</p><pre><code>public class WifiP2pServiceInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pServiceInfo.html
WifiP2pServiceRequest	A										<section class="prog__container"><p> A class for creating a service discovery request for use with <pre><code> addServiceRequest(WifiP2pManager.Channel, WifiP2pServiceRequest, WifiP2pManager.ActionListener) </code></pre> and <pre><code> removeServiceRequest(WifiP2pManager.Channel, WifiP2pServiceRequest, WifiP2pManager.ActionListener) </code></pre> <p> This class is used to create service discovery request for custom vendor specific service discovery protocol <pre><code> SERVICE_TYPE_VENDOR_SPECIFIC </code></pre> or to search all service protocols <pre><code> SERVICE_TYPE_ALL </code></pre> . <p> For the purpose of creating a UPnP or Bonjour service request, use <pre><code> WifiP2pUpnpServiceRequest </code></pre> or <pre><code> WifiP2pDnsSdServiceRequest </code></pre> respectively. </p><pre><code>public class WifiP2pServiceRequest\nextends Object</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pServiceRequest.html
WifiP2pUpnpServiceInfo	A										<section class="prog__container"><p> A class for storing Upnp service information that is advertised over a Wi-Fi peer-to-peer setup.</p><pre><code>public class WifiP2pUpnpServiceInfo\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUpnpServiceInfo.html
WifiP2pUpnpServiceRequest	A										<section class="prog__container"><p> A class for creating a Upnp service discovery request for use with <pre><code> addServiceRequest(WifiP2pManager.Channel, WifiP2pServiceRequest, WifiP2pManager.ActionListener) </code></pre> and <pre><code> removeServiceRequest(WifiP2pManager.Channel, WifiP2pServiceRequest, WifiP2pManager.ActionListener) </code></pre></p><pre><code>public class WifiP2pUpnpServiceRequest\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUpnpServiceRequest.html
FormatException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p><pre><code>public class FormatException\n</code></pre></section>	https://developer.android.com/reference/android/nfc/FormatException.html
NdefMessage	A										<section class="prog__container"><p> Represents an immutable NDEF Message. <p> NDEF (NFC Data Exchange Format) is a light-weight binary format, used to encapsulate typed data. It is specified by the NFC Forum, for transmission and storage with NFC, however it is transport agnostic. <p> NDEF defines messages and records. An NDEF Record contains typed data, such as MIME-type media, a URI, or a custom application payload. An NDEF Message is a container for one or more NDEF Records. <p> When an Android device receives an NDEF Message (for example by reading an NFC tag) it processes it through a dispatch mechanism to determine an activity to launch. The type of the <em> first </em> record in the message has special importance for message dispatch, so design this record carefully. <p> Use <pre><code> NdefMessage(byte[]) </code></pre> to construct an NDEF Message from binary data, or <pre><code> NdefMessage(NdefRecord[]) </code></pre> to construct from one or more <pre><code> NdefRecord </code></pre> s. <p class="note"> <pre><code> NdefMessage </code></pre> and <pre><code> NdefRecord </code></pre> implementations are always available, even on Android devices that do not have NFC hardware. <p class="note"> <pre><code> NdefRecord </code></pre> s are intended to be immutable (and thread-safe), however they may contain mutable fields. So take care not to modify mutable fields passed into constructors, or modify mutable fields obtained by getter methods, unless such modification is explicitly marked as safe. </p><pre><code>public final class NdefMessage\nextends Object</code></pre></section>	https://developer.android.com/reference/android/nfc/NdefMessage.html
NdefRecord	A										<section class="prog__container"><p> Represents an immutable NDEF Record. <p> NDEF (NFC Data Exchange Format) is a light-weight binary format, used to encapsulate typed data. It is specified by the NFC Forum, for transmission and storage with NFC, however it is transport agnostic. <p> NDEF defines messages and records. An NDEF Record contains typed data, such as MIME-type media, a URI, or a custom application payload. An NDEF Message is a container for one or more NDEF Records. <p> This class represents logical (complete) NDEF Records, and can not be used to represent chunked (partial) NDEF Records. However <pre><code> NdefMessage(byte[]) </code></pre> can be used to parse a message containing chunked records, and will return a message with unchunked (complete) records. <p> A logical NDEF Record always contains a 3-bit TNF (Type Name Field) that provides high level typing for the rest of the record. The remaining fields are variable length and not always present: <ul> <li> <em> type </em> : detailed typing for the payload </li> <li> <em> id </em> : identifier meta-data, not commonly used </li> <li> <em> payload </em> : the actual payload </li> </ul> <p> Helpers such as <pre><code> createUri(Uri) </code></pre> , <pre><code> createMime(String, byte[]) </code></pre> and <pre><code> createExternal(String, String, byte[]) </code></pre> are included to create well-formatted NDEF Records with correctly set tnf, type, id and payload fields, please use these helpers whenever possible. <p> Use the constructor <pre><code> NdefRecord(short, byte[], byte[], byte[]) </code></pre> if you know what you are doing and what to set the fields individually. Only basic validation is performed with this constructor, so it is possible to create records that do not confirm to the strict NFC Forum specifications. <p> The binary representation of an NDEF Record includes additional flags to indicate location with an NDEF message, provide support for chunking of NDEF records, and to pack optional fields. This class does not expose those details. To write an NDEF Record as binary you must first put it into an <pre><code> NdefMessage </code></pre> , then call <pre><code> toByteArray() </code></pre> . <p class="note"> <pre><code> NdefMessage </code></pre> and <pre><code> NdefRecord </code></pre> implementations are always available, even on Android devices that do not have NFC hardware. <p class="note"> <pre><code> NdefRecord </code></pre> s are intended to be immutable (and thread-safe), however they may contain mutable fields. So take care not to modify mutable fields passed into constructors, or modify mutable fields obtained by getter methods, unless such modification is explicitly marked as safe. </p><pre><code>public final class NdefRecord\nextends Object</code></pre></section>	https://developer.android.com/reference/android/nfc/NdefRecord.html
NfcAdapter.CreateBeamUrisCallback	A										<section class="prog__container"><pre><code>public static interface NfcAdapter.CreateBeamUrisCallback\n</code></pre></section>	https://developer.android.com/reference/android/nfc/NfcAdapter.CreateBeamUrisCallback.html
NfcAdapter.CreateNdefMessageCallback	A										<section class="prog__container"><p> A callback to be invoked when another NFC device capable of NDEF push (Android Beam) is within range. <p> Implement this interface and pass it to <pre><code> setNdefPushMessageCallback() </code></pre> in order to create an <pre><code> NdefMessage </code></pre> at the moment that another device is within range for NFC. Using this callback allows you to create a message with data that might vary based on the content currently visible to the user. Alternatively, you can call <pre><code> setNdefPushMessage() </code></pre> if the <pre><code> NdefMessage </code></pre> always contains the same data. </p><pre><code>public static interface NfcAdapter.CreateNdefMessageCallback\n</code></pre></section>	https://developer.android.com/reference/android/nfc/NfcAdapter.CreateNdefMessageCallback.html
NfcAdapter	A										<section class="prog__container"><p> Represents the local NFC adapter. <p> Use the helper <pre><code> getDefaultAdapter(Context) </code></pre> to get the default NFC adapter for this Android device. </p><pre><code>public final class NfcAdapter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/nfc/NfcAdapter.html
NfcAdapter.OnNdefPushCompleteCallback	A										<section class="prog__container"><p> A callback to be invoked when the system successfully delivers your <pre><code> NdefMessage </code></pre> to another device.</p><pre><code>public static interface NfcAdapter.OnNdefPushCompleteCallback\n</code></pre></section>	https://developer.android.com/reference/android/nfc/NfcAdapter.OnNdefPushCompleteCallback.html
NfcAdapter.OnTagRemovedListener	A										<section class="prog__container"><p> A callback that is invoked when a tag is removed from the field.</p><pre><code>public static interface NfcAdapter.OnTagRemovedListener\n</code></pre></section>	https://developer.android.com/reference/android/nfc/NfcAdapter.OnTagRemovedListener.html
NfcAdapter.ReaderCallback	A										<section class="prog__container"><p> A callback to be invoked when the system finds a tag while the foreground activity is operating in reader mode. <p> Register your <pre><code> ReaderCallback </code></pre> implementation with <pre><code> enableReaderMode(Activity, NfcAdapter.ReaderCallback, int, Bundle) </code></pre> and disable it with <pre><code> disableReaderMode(Activity) </code></pre> . </p><pre><code>public static interface NfcAdapter.ReaderCallback\n</code></pre></section>	https://developer.android.com/reference/android/nfc/NfcAdapter.ReaderCallback.html
NfcEvent	A										<section class="prog__container"><p> Wraps information associated with any NFC event. <p> Immutable object, with direct access to the (final) fields. <p> An <pre><code> NfcEvent </code></pre> object is usually included in callbacks from <pre><code> NfcAdapter </code></pre> . Check the documentation of the callback to see which fields may be set. <p> This wrapper object is used (instead of parameters in the callback) because it allows new fields to be added without breaking API compatibility. </p><pre><code>public final class NfcEvent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/nfc/NfcEvent.html
NfcManager	A										<section class="prog__container"><p> High level manager used to obtain an instance of an <pre><code> NfcAdapter </code></pre> . <p> Use <pre><code> getSystemService(java.lang.String) </code></pre> with <pre><code> NFC_SERVICE </code></pre> to create an <pre><code> NfcManager </code></pre> , then call <pre><code> getDefaultAdapter() </code></pre> to obtain the <pre><code> NfcAdapter </code></pre> . <p> Alternately, you can just call the static helper <pre><code> getDefaultAdapter(android.content.Context) </code></pre> . </p><pre><code>public final class NfcManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/nfc/NfcManager.html
android.nfc	A										<section class="prog__container">Provides access to Near Field Communication (NFC) functionality, allowing applications to readNDEF message in NFC tags. A "tag" may actually be another device that appears as a tag.</section>	https://developer.android.com/reference/android/nfc/package-summary.html
Tag	A										<section class="prog__container"><p> Represents an NFC tag that has been discovered. <p> <pre><code> Tag </code></pre> is an immutable object that represents the state of a NFC tag at the time of discovery. It can be used as a handle to <pre><code> TagTechnology </code></pre> classes to perform advanced operations, or directly queried for its ID via <pre><code> getId() </code></pre> and the set of technologies it contains via <pre><code> getTechList() </code></pre> . Arrays passed to and returned by this class are <em> not </em> cloned, so be careful not to modify them. <p> A new tag object is created every time a tag is discovered (comes into range), even if it is the same physical tag. If a tag is removed and then returned into range, then only the most recent tag object can be successfully used to create a <pre><code> TagTechnology </code></pre> . </p><pre><code>public final class Tag\nextends Object</code></pre></section>	https://developer.android.com/reference/android/nfc/Tag.html
TagLostException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p><pre><code>public class TagLostException\n</code></pre></section>	https://developer.android.com/reference/android/nfc/TagLostException.html
CardEmulation	A										<section class="prog__container"><p> This class can be used to query the state of NFC card emulation services. For a general introduction into NFC card emulation, please read the NFC card emulation developer guide .</p><pre><code>public final class CardEmulation\nextends Object</code></pre></section>	https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html
HostApduService	A										<section class="prog__container"><p> <p> HostApduService is a convenience <pre><code> Service </code></pre> class that can be extended to emulate an NFC card inside an Android service component. </p><pre><code>public abstract class HostApduService\n</code></pre></section>	https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html
HostNfcFService	A										<section class="prog__container"><p> <p> HostNfcFService is a convenience <pre><code> Service </code></pre> class that can be extended to emulate an NFC-F card inside an Android service component. </p><pre><code>public abstract class HostNfcFService\n</code></pre></section>	https://developer.android.com/reference/android/nfc/cardemulation/HostNfcFService.html
NfcFCardEmulation	A										<section class="prog__container"><p> This class can be used to query the state of NFC-F card emulation services. For a general introduction into NFC card emulation, please read the NFC card emulation developer guide .</p><pre><code>public final class NfcFCardEmulation\nextends Object</code></pre></section>	https://developer.android.com/reference/android/nfc/cardemulation/NfcFCardEmulation.html
OffHostApduService	A										<section class="prog__container"><p> <p> OffHostApduService is a convenience <pre><code> Service </code></pre> class that can be extended to describe one or more NFC applications that are residing off-host, for example on an embedded secure element or a UICC. </p><pre><code>public abstract class OffHostApduService\n</code></pre></section>	https://developer.android.com/reference/android/nfc/cardemulation/OffHostApduService.html
android.nfc.cardemulation	A										<section class="prog__container">HostApduService is a convenience</section>	https://developer.android.com/reference/android/nfc/cardemulation/package-summary.html
IsoDep	A										<section class="prog__container"><p> Provides access to ISO-DEP (ISO 14443-4) properties and I/O operations on a <pre><code> Tag </code></pre> . <p> Acquire an <pre><code> IsoDep </code></pre> object using <pre><code> get(Tag) </code></pre> . <p> The primary ISO-DEP I/O operation is <pre><code> transceive(byte[]) </code></pre> . Applications must implement their own protocol stack on top of <pre><code> transceive(byte[]) </code></pre> . <p> Tags that enumerate the <pre><code> IsoDep </code></pre> technology in <pre><code> getTechList() </code></pre> will also enumerate <pre><code> NfcA </code></pre> or <pre><code> NfcB </code></pre> (since IsoDep builds on top of either of these). <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> NFC </code></pre> permission. </p><pre><code>public final class IsoDep\nextends Object</code></pre></section>	https://developer.android.com/reference/android/nfc/tech/IsoDep.html
MifareClassic	A										<section class="prog__container"><p> Provides access to MIFARE Classic properties and I/O operations on a <pre><code> Tag </code></pre> . <p> Acquire a <pre><code> MifareClassic </code></pre> object using <pre><code> get(Tag) </code></pre> . <p> MIFARE Classic is also known as MIFARE Standard. <p> MIFARE Classic tags are divided into sectors, and each sector is sub-divided into blocks. Block size is always 16 bytes ( <pre><code> BLOCK_SIZE </code></pre> . Sector size varies. <ul> <li> MIFARE Classic Mini are 320 bytes ( <pre><code> SIZE_MINI </code></pre> ), with 5 sectors each of 4 blocks. <li> MIFARE Classic 1k are 1024 bytes ( <pre><code> SIZE_1K </code></pre> ), with 16 sectors each of 4 blocks. <li> MIFARE Classic 2k are 2048 bytes ( <pre><code> SIZE_2K </code></pre> ), with 32 sectors each of 4 blocks. <li> MIFARE Classic 4k} are 4096 bytes ( <pre><code> SIZE_4K </code></pre> ). The first 32 sectors contain 4 blocks and the last 8 sectors contain 16 blocks. </li> </li> </li> </li> </ul> <p> MIFARE Classic tags require authentication on a per-sector basis before any other I/O operations on that sector can be performed. There are two keys per sector, and ACL bits determine what I/O operations are allowed on that sector after authenticating with a key. and . <p> Three well-known authentication keys are defined in this class: <pre><code> KEY_DEFAULT </code></pre> , <pre><code> KEY_MIFARE_APPLICATION_DIRECTORY </code></pre> , <pre><code> KEY_NFC_FORUM </code></pre> . <ul> <li> <pre><code> KEY_DEFAULT </code></pre> is the default factory key for MIFARE Classic. <li> <pre><code> KEY_MIFARE_APPLICATION_DIRECTORY </code></pre> is the well-known key for MIFARE Classic cards that have been formatted according to the MIFARE Application Directory (MAD) specification. <li> <pre><code> KEY_NFC_FORUM </code></pre> is the well-known key for MIFARE Classic cards that have been formatted according to the NXP specification for NDEF on MIFARE Classic. <p> Implementation of this class on a Android NFC device is optional. If it is not implemented, then <pre><code> MifareClassic </code></pre> will never be enumerated in <pre><code> getTechList() </code></pre> . If it is enumerated, then all <pre><code> MifareClassic </code></pre> I/O operations will be supported, and <pre><code> MIFARE_CLASSIC </code></pre> NDEF tags will also be supported. In either case, <pre><code> NfcA </code></pre> will also be enumerated on the tag, because all MIFARE Classic tags are also <pre><code> NfcA </code></pre> . <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> NFC </code></pre> permission. </p><pre><code>public final class MifareClassic\nextends Object</code></pre></section>	https://developer.android.com/reference/android/nfc/tech/MifareClassic.html
MifareUltralight	A										<section class="prog__container"><p> Provides access to MIFARE Ultralight properties and I/O operations on a <pre><code> Tag </code></pre> . <p> Acquire a <pre><code> MifareUltralight </code></pre> object using <pre><code> get(Tag) </code></pre> . <p> MIFARE Ultralight compatible tags have 4 byte pages <pre><code> PAGE_SIZE </code></pre> . The primary operations on an Ultralight tag are <pre><code> readPages(int) </code></pre> and <pre><code> writePage(int, byte[]) </code></pre> . <p> The original MIFARE Ultralight consists of a 64 byte EEPROM. The first 4 pages are for the OTP area, manufacturer data, and locking bits. They are readable and some bits are writable. The final 12 pages are the user read/write area. For more information see the NXP data sheet MF0ICU1. <p> The MIFARE Ultralight C consists of a 192 byte EEPROM. The first 4 pages are for OTP, manufacturer data, and locking bits. The next 36 pages are the user read/write area. The next 4 pages are additional locking bits, counters and authentication configuration and are readable. The final 4 pages are for the authentication key and are not readable. For more information see the NXP data sheet MF0ICU2. <p> Implementation of this class on a Android NFC device is optional. If it is not implemented, then <pre><code> MifareUltralight </code></pre> will never be enumerated in <pre><code> getTechList() </code></pre> . If it is enumerated, then all <pre><code> MifareUltralight </code></pre> I/O operations will be supported. In either case, <pre><code> NfcA </code></pre> will also be enumerated on the tag, because all MIFARE Ultralight tags are also <pre><code> NfcA </code></pre> tags. <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> NFC </code></pre> permission. </p><pre><code>public final class MifareUltralight\nextends Object</code></pre></section>	https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html
Ndef	A										<section class="prog__container"><p> Provides access to NDEF content and operations on a <pre><code> Tag </code></pre> . <p> Acquire a <pre><code> Ndef </code></pre> object using <pre><code> get(Tag) </code></pre> . <p> NDEF is an NFC Forum data format. The data formats are implemented in <pre><code> NdefMessage </code></pre> and <pre><code> NdefRecord </code></pre> . This class provides methods to retrieve and modify the <pre><code> NdefMessage </code></pre> on a tag. <p> There are currently four NFC Forum standardized tag types that can be formatted to contain NDEF data. <ul> <li> NFC Forum Type 1 Tag ( <pre><code> NFC_FORUM_TYPE_1 </code></pre> ), such as the Innovision Topaz <li> NFC Forum Type 2 Tag ( <pre><code> NFC_FORUM_TYPE_2 </code></pre> ), such as the NXP MIFARE Ultralight <li> NFC Forum Type 3 Tag ( <pre><code> NFC_FORUM_TYPE_3 </code></pre> ), such as Sony Felica <li> NFC Forum Type 4 Tag ( <pre><code> NFC_FORUM_TYPE_4 </code></pre> ), such as NXP MIFARE Desfire </li> </li> </li> </li> </ul> It is mandatory for all Android devices with NFC to correctly enumerate <pre><code> Ndef </code></pre> on NFC Forum Tag Types 1-4, and implement all NDEF operations as defined in this class. <p> Some vendors have their own well defined specifications for storing NDEF data on tags that do not fall into the above categories. Android devices with NFC should enumerate and implement <pre><code> Ndef </code></pre> under these vendor specifications where possible, but it is not mandatory. <pre><code> getType() </code></pre> returns a String describing this specification, for example <pre><code> MIFARE_CLASSIC </code></pre> is <pre><code> com.nxp.ndef.mifareclassic </code></pre> . <p> Android devices that support MIFARE Classic must also correctly implement <pre><code> Ndef </code></pre> on MIFARE Classic tags formatted to NDEF. <p> For guaranteed compatibility across all Android devices with NFC, it is recommended to use NFC Forum Types 1-4 in new deployments of NFC tags with NDEF payload. Vendor NDEF formats will not work on all Android devices. <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> NFC </code></pre> permission. </p><pre><code>public final class Ndef\nextends Object</code></pre></section>	https://developer.android.com/reference/android/nfc/tech/Ndef.html
NdefFormatable	A										<section class="prog__container"><p> Provide access to NDEF format operations on a <pre><code> Tag </code></pre> . <p> Acquire a <pre><code> NdefFormatable </code></pre> object using <pre><code> get(Tag) </code></pre> . <p> Android devices with NFC must only enumerate and implement this class for tags for which it can format to NDEF. <p> Unfortunately the procedures to convert unformated tags to NDEF formatted tags are not specified by NFC Forum, and are not generally well-known. So there is no mandatory set of tags for which all Android devices with NFC must support <pre><code> NdefFormatable </code></pre> . <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> NFC </code></pre> permission. </p><pre><code>public final class NdefFormatable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/nfc/tech/NdefFormatable.html
NfcA	A										<section class="prog__container"><p> Provides access to NFC-A (ISO 14443-3A) properties and I/O operations on a <pre><code> Tag </code></pre> . <p> Acquire a <pre><code> NfcA </code></pre> object using <pre><code> get(Tag) </code></pre> . <p> The primary NFC-A I/O operation is <pre><code> transceive(byte[]) </code></pre> . Applications must implement their own protocol stack on top of <pre><code> transceive(byte[]) </code></pre> . <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> NFC </code></pre> permission. </p><pre><code>public final class NfcA\nextends Object</code></pre></section>	https://developer.android.com/reference/android/nfc/tech/NfcA.html
NfcB	A										<section class="prog__container"><p> Provides access to NFC-B (ISO 14443-3B) properties and I/O operations on a <pre><code> Tag </code></pre> . <p> Acquire a <pre><code> NfcB </code></pre> object using <pre><code> get(Tag) </code></pre> . <p> The primary NFC-B I/O operation is <pre><code> transceive(byte[]) </code></pre> . Applications must implement their own protocol stack on top of <pre><code> transceive(byte[]) </code></pre> . <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> NFC </code></pre> permission. </p><pre><code>public final class NfcB\nextends Object</code></pre></section>	https://developer.android.com/reference/android/nfc/tech/NfcB.html
NfcBarcode	A										<section class="prog__container"><p> Provides access to tags containing just a barcode. <p> Acquire an <pre><code> NfcBarcode </code></pre> object using <pre><code> get(Tag) </code></pre> . </p><pre><code>public final class NfcBarcode\nextends Object</code></pre></section>	https://developer.android.com/reference/android/nfc/tech/NfcBarcode.html
NfcF	A										<section class="prog__container"><p> Provides access to NFC-F (JIS 6319-4) properties and I/O operations on a <pre><code> Tag </code></pre> . <p> Acquire a <pre><code> NfcF </code></pre> object using <pre><code> get(Tag) </code></pre> . <p> The primary NFC-F I/O operation is <pre><code> transceive(byte[]) </code></pre> . Applications must implement their own protocol stack on top of <pre><code> transceive(byte[]) </code></pre> . <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> NFC </code></pre> permission. </p><pre><code>public final class NfcF\nextends Object</code></pre></section>	https://developer.android.com/reference/android/nfc/tech/NfcF.html
NfcV	A										<section class="prog__container"><p> Provides access to NFC-V (ISO 15693) properties and I/O operations on a <pre><code> Tag </code></pre> . <p> Acquire a <pre><code> NfcV </code></pre> object using <pre><code> get(Tag) </code></pre> . <p> The primary NFC-V I/O operation is <pre><code> transceive(byte[]) </code></pre> . Applications must implement their own protocol stack on top of <pre><code> transceive(byte[]) </code></pre> . <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> NFC </code></pre> permission. </p><pre><code>public final class NfcV\nextends Object</code></pre></section>	https://developer.android.com/reference/android/nfc/tech/NfcV.html
android.nfc.tech	A										<section class="prog__container">These classes provide access to a tag technology's features, which vary by the typeof tag that is scanned. A scanned tag can support multiple technologies, and you can findout what they are by calling</section>	https://developer.android.com/reference/android/nfc/tech/package-summary.html
TagTechnology	A										<section class="prog__container"><p> <pre><code> TagTechnology </code></pre> is an interface to a technology in a <pre><code> Tag </code></pre> . <p> Obtain a <pre><code> TagTechnology </code></pre> implementation by calling the static method <pre><code> get() </code></pre> on the implementation class. <p> NFC tags are based on a number of independently developed technologies and offer a wide range of capabilities. The <pre><code> TagTechnology </code></pre> implementations provide access to these different technologies and capabilities. Some sub-classes map to technology specification (for example <pre><code> NfcA </code></pre> , <pre><code> IsoDep </code></pre> , others map to pseudo-technologies or capabilities (for example <pre><code> Ndef </code></pre> , <pre><code> NdefFormatable </code></pre> ). <p> It is mandatory for all Android NFC devices to provide the following <pre><code> TagTechnology </code></pre> implementations. <ul> <li> <pre><code> NfcA </code></pre> (also known as ISO 14443-3A) <li> <pre><code> NfcB </code></pre> (also known as ISO 14443-3B) <li> <pre><code> NfcF </code></pre> (also known as JIS 6319-4) <li> <pre><code> NfcV </code></pre> (also known as ISO 15693) <li> <pre><code> IsoDep </code></pre> <li> <pre><code> Ndef </code></pre> on NFC Forum Type 1, Type 2, Type 3 or Type 4 compliant tags </li> </li> </li> </li> </li> </li> </ul> It is optional for Android NFC devices to provide the following <pre><code> TagTechnology </code></pre> implementations. If it is not provided, the Android device will never enumerate that class via <pre><code> getTechList() </code></pre> . <ul> <li> <pre><code> MifareClassic </code></pre> <li> <pre><code> MifareUltralight </code></pre> <li> <pre><code> NfcBarcode </code></pre> <li> <pre><code> NdefFormatable </code></pre> must only be enumerated on tags for which this Android device is capable of formatting. Proprietary knowledge is often required to format a tag to make it NDEF compatible. </li> </li> </li> </li> </ul> <p> <pre><code> TagTechnology </code></pre> implementations provide methods that fall into two classes: <em> cached getters </em> and <em> I/O operations </em> . <h4> Cached getters </h4> These methods (usually prefixed by <pre><code> get </code></pre> or <pre><code> is </code></pre> ) return properties of the tag, as determined at discovery time. These methods will never block or cause RF activity, and do not require <pre><code> connect() </code></pre> to have been called. They also never update, for example if a property is changed by an I/O operation with a tag then the cached getter will still return the result from tag discovery time. <h4> I/O operations </h4> I/O operations may require RF activity, and may block. They have the following semantics. <ul> <li> <pre><code> connect() </code></pre> must be called before using any other I/O operation. <li> <pre><code> close() </code></pre> must be called after completing I/O operations with a <pre><code> TagTechnology </code></pre> , and it will cancel all other blocked I/O operations on other threads (including <pre><code> connect() </code></pre> with <pre><code> IOException </code></pre> . <li> Only one <pre><code> TagTechnology </code></pre> can be connected at a time. Other calls to <pre><code> connect() </code></pre> will return <pre><code> IOException </code></pre> . <li> I/O operations may block, and should never be called on the main application thread. </li> </li> </li> </li> </ul> <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> NFC </code></pre> permission. </p><pre><code>public interface TagTechnology\nimplements Closeable</code></pre></section>	https://developer.android.com/reference/android/nfc/tech/TagTechnology.html
EGL14	A										<section class="prog__container"><p> EGL 1.4</p><pre><code>public class EGL14\nextends Object</code></pre></section>	https://developer.android.com/reference/android/opengl/EGL14.html
EGLConfig	A										<section class="prog__container"><p> Wrapper class for native EGLConfig objects.</p><pre><code>public class EGLConfig\n</code></pre></section>	https://developer.android.com/reference/android/opengl/EGLConfig.html
EGLContext	A										<section class="prog__container"><p> Wrapper class for native EGLContext objects.</p><pre><code>public class EGLContext\n</code></pre></section>	https://developer.android.com/reference/android/opengl/EGLContext.html
EGLDisplay	A										<section class="prog__container"><p> Wrapper class for native EGLDisplay objects.</p><pre><code>public class EGLDisplay\n</code></pre></section>	https://developer.android.com/reference/android/opengl/EGLDisplay.html
EGLExt	A										<section class="prog__container"><p> EGL Extensions</p><pre><code>public class EGLExt\nextends Object</code></pre></section>	https://developer.android.com/reference/android/opengl/EGLExt.html
EGLObjectHandle	A										<section class="prog__container"><p> Base class for wrapped EGL objects.</p><pre><code>public abstract class EGLObjectHandle\nextends Object</code></pre></section>	https://developer.android.com/reference/android/opengl/EGLObjectHandle.html
EGLSurface	A										<section class="prog__container"><p> Wrapper class for native EGLSurface objects.</p><pre><code>public class EGLSurface\n</code></pre></section>	https://developer.android.com/reference/android/opengl/EGLSurface.html
ETC1	A										<section class="prog__container"><pre><code>public class ETC1\nextends Object</code></pre></section>	https://developer.android.com/reference/android/opengl/ETC1.html
ETC1Util.ETC1Texture	A										<section class="prog__container"><p> A utility class encapsulating a compressed ETC1 texture.</p><pre><code>public static class ETC1Util.ETC1Texture\nextends Object</code></pre></section>	https://developer.android.com/reference/android/opengl/ETC1Util.ETC1Texture.html
ETC1Util	A										<section class="prog__container"><p> Utility methods for using ETC1 compressed textures.</p><pre><code>public class ETC1Util\nextends Object</code></pre></section>	https://developer.android.com/reference/android/opengl/ETC1Util.html
GLDebugHelper	A										<section class="prog__container"><p> A helper class for debugging OpenGL ES applications. Wraps the supplied GL interface with a new GL interface that adds support for error checking and logging.</p><pre><code>public class GLDebugHelper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/opengl/GLDebugHelper.html
GLES10	A										<section class="prog__container"><pre><code>public class GLES10\nextends Object</code></pre></section>	https://developer.android.com/reference/android/opengl/GLES10.html
GLES10Ext	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public class GLES10Ext\nextends Object</code></pre></section>	https://developer.android.com/reference/android/opengl/GLES10Ext.html
GLES11	A										<section class="prog__container"><pre><code>public class GLES11\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLES11.html
GLES11Ext	A										<section class="prog__container"><pre><code>public class GLES11Ext\nextends Object</code></pre></section>	https://developer.android.com/reference/android/opengl/GLES11Ext.html
GLES20	A										<section class="prog__container"><p> OpenGL ES 2.0</p><pre><code>public class GLES20\nextends Object</code></pre></section>	https://developer.android.com/reference/android/opengl/GLES20.html
GLES30	A										<section class="prog__container"><p> OpenGL ES 3.0</p><pre><code>public class GLES30\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLES30.html
GLES31	A										<section class="prog__container"><p> OpenGL ES 3.1</p><pre><code>public class GLES31\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLES31.html
GLES31Ext.DebugProcKHR	A										<section class="prog__container"><pre><code>public static interface GLES31Ext.DebugProcKHR\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLES31Ext.DebugProcKHR.html
GLES31Ext	A										<section class="prog__container"><pre><code>public class GLES31Ext\nextends Object</code></pre></section>	https://developer.android.com/reference/android/opengl/GLES31Ext.html
GLES32.DebugProc	A										<section class="prog__container"><pre><code>public static interface GLES32.DebugProc\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLES32.DebugProc.html
GLES32	A										<section class="prog__container"><p> OpenGL ES 3.2</p><pre><code>public class GLES32\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLES32.html
GLException	A										<section class="prog__container"><p> An exception class for OpenGL errors.</p><pre><code>public class GLException\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLException.html
GLSurfaceView.EGLConfigChooser	A										<section class="prog__container"><p> An interface for choosing an EGLConfig configuration from a list of potential configurations. <p> This interface must be implemented by clients wishing to call <pre><code> setEGLConfigChooser(EGLConfigChooser) </code></pre> </p><pre><code>public static interface GLSurfaceView.EGLConfigChooser\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLSurfaceView.EGLConfigChooser.html
GLSurfaceView.EGLContextFactory	A										<section class="prog__container"><p> An interface for customizing the eglCreateContext and eglDestroyContext calls. <p> This interface must be implemented by clients wishing to call <pre><code> setEGLContextFactory(EGLContextFactory) </code></pre> </p><pre><code>public static interface GLSurfaceView.EGLContextFactory\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLSurfaceView.EGLContextFactory.html
GLSurfaceView.EGLWindowSurfaceFactory	A										<section class="prog__container"><p> An interface for customizing the eglCreateWindowSurface and eglDestroySurface calls. <p> This interface must be implemented by clients wishing to call <pre><code> setEGLWindowSurfaceFactory(EGLWindowSurfaceFactory) </code></pre> </p><pre><code>public static interface GLSurfaceView.EGLWindowSurfaceFactory\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLSurfaceView.EGLWindowSurfaceFactory.html
GLSurfaceView.GLWrapper	A										<section class="prog__container"><p> An interface used to wrap a GL interface. <p> Typically used for implementing debugging and tracing on top of the default GL interface. You would typically use this by creating your own class that implemented all the GL methods by delegating to another GL instance. Then you could add your own behavior before or after calling the delegate. All the GLWrapper would do was instantiate and return the wrapper GL instance: <pre class="prettyprint"> class MyGLWrapper implements GLWrapper { GL wrap(GL gl) { return new MyGLImplementation(gl); } static class MyGLImplementation implements GL,GL10,GL11,... { ... } } </pre> </p><pre><code>public static interface GLSurfaceView.GLWrapper\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLSurfaceView.GLWrapper.html
GLSurfaceView	A										<section class="prog__container"><p> An implementation of SurfaceView that uses the dedicated surface for displaying OpenGL rendering. <p> A GLSurfaceView provides the following features: <p> <ul> <li> Manages a surface, which is a special piece of memory that can be composited into the Android view system. <li> Manages an EGL display, which enables OpenGL to render into a surface. <li> Accepts a user-provided Renderer object that does the actual rendering. <li> Renders on a dedicated thread to decouple rendering performance from the UI thread. <li> Supports both on-demand and continuous rendering. <li> Optionally wraps, traces, and/or error-checks the renderer's OpenGL calls. </li> </li> </li> </li> </li> </li> </ul> </p><pre><code>public class GLSurfaceView\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLSurfaceView.html
GLSurfaceView.Renderer	A										<section class="prog__container"><pre><code>public static interface GLSurfaceView.Renderer\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html
GLU	A										<section class="prog__container"><p> A set of GL utilities inspired by the OpenGL Utility Toolkit.</p><pre><code>public class GLU\nextends Object</code></pre></section>	https://developer.android.com/reference/android/opengl/GLU.html
GLUtils	A										<section class="prog__container"><p> Utility class to help bridging OpenGL ES and Android APIs.</p><pre><code>public final class GLUtils\nextends Object</code></pre></section>	https://developer.android.com/reference/android/opengl/GLUtils.html
Matrix	A										<section class="prog__container"><p> Matrix math utilities. These methods operate on OpenGL ES format matrices and vectors stored in float arrays. <p> Matrices are 4 x 4 column-vector matrices stored in column-major order: <pre> m[offset + 0] m[offset + 4] m[offset + 8] m[offset + 12] m[offset + 1] m[offset + 5] m[offset + 9] m[offset + 13] m[offset + 2] m[offset + 6] m[offset + 10] m[offset + 14] m[offset + 3] m[offset + 7] m[offset + 11] m[offset + 15]</pre> Vectors are 4 x 1 column vectors stored in order: <pre> v[offset + 0] v[offset + 1] v[offset + 2] v[offset + 3]</pre> </p><pre><code>public class Matrix\nextends Object</code></pre></section>	https://developer.android.com/reference/android/opengl/Matrix.html
android.opengl	A										<section class="prog__container">Provides an OpenGL ES static interface and utilities.</section>	https://developer.android.com/reference/android/opengl/package-summary.html
Visibility	A										<section class="prog__container"><p> A collection of utility methods for computing the visibility of triangle meshes.</p><pre><code>public class Visibility\nextends Object</code></pre></section>	https://developer.android.com/reference/android/opengl/Visibility.html
AsyncTask	A										<section class="prog__container"><p> <p> AsyncTask enables proper and easy use of the UI thread. This class allows you to perform background operations and publish results on the UI thread without having to manipulate threads and/or handlers. </p><pre><code>public abstract class AsyncTask\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/AsyncTask.html
AsyncTask.Status	A										<section class="prog__container"><p> Indicates the current status of the task. Each status will be set only once during the lifetime of a task.</p><pre><code>public static final enum AsyncTask.Status\n</code></pre></section>	https://developer.android.com/reference/android/os/AsyncTask.Status.html
BadParcelableException	A										<section class="prog__container"><p> Exception thrown when a <pre><code> Parcelable </code></pre> is malformed or otherwise invalid. <p> This is typically encountered when a custom <pre><code> Parcelable </code></pre> object is passed to another process that doesn't have the same <pre><code> Parcelable </code></pre> class in its <pre><code> ClassLoader </code></pre> . </p><pre><code>public class BadParcelableException\n</code></pre></section>	https://developer.android.com/reference/android/os/BadParcelableException.html
BaseBundle	A										<section class="prog__container"><p> A mapping from String keys to values of various types. In most cases, you should work directly with either the <pre><code> Bundle </code></pre> or <pre><code> PersistableBundle </code></pre> subclass.</p><pre><code>public class BaseBundle\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/BaseBundle.html
BatteryManager	A										<section class="prog__container"><p> The BatteryManager class contains strings and constants used for values in the <pre><code> ACTION_BATTERY_CHANGED </code></pre> Intent, and provides a method for querying battery and charging properties.</p><pre><code>public class BatteryManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/BatteryManager.html
Binder	A										<section class="prog__container"><p> Base class for a remotable object, the core part of a lightweight remote procedure call mechanism defined by <pre><code> IBinder </code></pre> . This class is an implementation of IBinder that provides standard local implementation of such an object. <p> Most developers will not implement this class directly, instead using the aidl tool to describe the desired interface, having it generate the appropriate Binder subclass. You can, however, derive directly from Binder to implement your own custom RPC protocol or simply instantiate a raw Binder object directly to use as a token that can be shared across processes. <p> This class is just a basic IPC primitive; it has no impact on an application's lifecycle, and is valid only as long as the process that created it continues to run. To use this correctly, you must be doing so within the context of a top-level application component (a <pre><code> Service </code></pre> , <pre><code> Activity </code></pre> , or <pre><code> ContentProvider </code></pre> ) that lets the system know your process should remain running. </p><pre><code>public class Binder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/Binder.html
Build	A										<section class="prog__container"><p> Information about the current build, extracted from system properties.</p><pre><code>public class Build\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/Build.html
Build.VERSION	A										<section class="prog__container"><p> Various version strings.</p><pre><code>public static class Build.VERSION\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/Build.VERSION.html
Build.VERSION_CODES	A										<section class="prog__container"><p> Enumeration of the currently known SDK version codes. These are the values that can be found in <pre><code> SDK </code></pre> . Version numbers increment monotonically with each official platform release.</p><pre><code>public static class Build.VERSION_CODES\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/Build.VERSION_CODES.html
Bundle	A										<section class="prog__container"><p> A mapping from String keys to various <pre><code> Parcelable </code></pre> values.</p><pre><code>public final class Bundle\n</code></pre></section>	https://developer.android.com/reference/android/os/Bundle.html
CancellationSignal	A										<section class="prog__container"><p> Provides the ability to cancel an operation in progress.</p><pre><code>public final class CancellationSignal\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/CancellationSignal.html
CancellationSignal.OnCancelListener	A										<section class="prog__container"><p> Listens for cancellation.</p><pre><code>public static interface CancellationSignal.OnCancelListener\n</code></pre></section>	https://developer.android.com/reference/android/os/CancellationSignal.OnCancelListener.html
ConditionVariable	A										<section class="prog__container"><p> Class that implements the condition variable locking paradigm. <p> This differs from the built-in java.lang.Object wait() and notify() in that this class contains the condition to wait on itself. That means open(), close() and block() are sticky. If open() is called before block(), block() will not block, and instead return immediately. <p> This class uses itself as the object to wait on, so if you wait() or notify() on a ConditionVariable, the results are undefined. </p><pre><code>public class ConditionVariable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/ConditionVariable.html
CountDownTimer	A										<section class="prog__container"><p> Schedule a countdown until a time in the future, with regular notifications on intervals along the way. Example of showing a 30 second countdown in a text field: <pre class="prettyprint"> new CountDownTimer(30000, 1000) { public void onTick(long millisUntilFinished) { mTextField.setText("seconds remaining: " + millisUntilFinished / 1000); } public void onFinish() { mTextField.setText("done!"); } }.start(); </pre> The calls to <pre><code> onTick(long) </code></pre> are synchronized to this object so that one call to <pre><code> onTick(long) </code></pre> won't ever occur before the previous callback is complete. This is only relevant when the implementation of <pre><code> onTick(long) </code></pre> takes an amount of time to execute that is significant compared to the countdown interval.</p><pre><code>public abstract class CountDownTimer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/CountDownTimer.html
CpuUsageInfo	A										<section class="prog__container"><p> CPU usage information per core.</p><pre><code>public final class CpuUsageInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/CpuUsageInfo.html
DeadObjectException	A										<section class="prog__container"><p> The object you are calling has died, because its hosting process no longer exists.</p><pre><code>public class DeadObjectException\n</code></pre></section>	https://developer.android.com/reference/android/os/DeadObjectException.html
DeadSystemException	A										<section class="prog__container"><p> The core Android system has died and is going through a runtime restart. All running apps will be promptly killed.</p><pre><code>public class DeadSystemException\n</code></pre></section>	https://developer.android.com/reference/android/os/DeadSystemException.html
Debug	A										<section class="prog__container"><p> Provides various debugging methods for Android applications, including tracing and allocation counts. <p> <strong> Logging Trace Files </strong> </p><pre><code>public final class Debug\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/Debug.html
Debug.InstructionCount	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 23. </strong> <br/> Instruction counting is no longer supported. </p><pre><code>public static class Debug.InstructionCount\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/Debug.InstructionCount.html
Debug.MemoryInfo	A										<section class="prog__container"><p> This class is used to retrieved various statistics about the memory mappings for this process. The returned info is broken down by dalvik, native, and other. All results are in kB.</p><pre><code>public static class Debug.MemoryInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/Debug.MemoryInfo.html
DropBoxManager.Entry	A										<section class="prog__container"><p> A single entry retrieved from the drop box. This may include a reference to a stream, so you must call <pre><code> close() </code></pre> when you are done using it.</p><pre><code>public static class DropBoxManager.Entry\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/DropBoxManager.Entry.html
DropBoxManager	A										<section class="prog__container"><p> Enqueues chunks of data (from various sources -- application crashes, kernel log records, etc.). The queue is size bounded and will drop old data if the enqueued data exceeds the maximum size. You can think of this as a persistent, system-wide, blob-oriented "logcat". <p> You can obtain an instance of this class by calling <pre><code> getSystemService(Class <t> ) </t> </code></pre> with <pre><code> DROPBOX_SERVICE </code></pre> . <p> DropBoxManager entries are not sent anywhere directly, but other system services and debugging tools may scan and upload entries for processing. </p><pre><code>public class DropBoxManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/DropBoxManager.html
Environment	A										<section class="prog__container"><p> Provides access to environment variables.</p><pre><code>public class Environment\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/Environment.html
FileObserver	A										<section class="prog__container"><p> Monitors files (using inotify ) to fire an event after files are accessed or changed by by any process on the device (including this one). FileObserver is an abstract class; subclasses must implement the event handler <pre><code> onEvent(int, String) </code></pre> . <p> Each FileObserver instance monitors a single file or directory. If a directory is monitored, events will be triggered for all files and subdirectories inside the monitored directory. </p><pre><code>public abstract class FileObserver\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/FileObserver.html
FileUriExposedException	A										<section class="prog__container"><p> The exception that is thrown when an application exposes a <pre><code> file:// </code></pre> <pre><code> Uri </code></pre> to another app. <p> This exposure is discouraged since the receiving app may not have access to the shared path. For example, the receiving app may not have requested the <pre><code> READ_EXTERNAL_STORAGE </code></pre> runtime permission, or the platform may be sharing the <pre><code> Uri </code></pre> across user profile boundaries. <p> Instead, apps should use <pre><code> content:// </code></pre> Uris so the platform can extend temporary permission for the receiving app to access the resource. <p> This is only thrown for applications targeting <pre><code> N </code></pre> or higher. Applications targeting earlier SDK versions are allowed to share <pre><code> file:// </code></pre> <pre><code> Uri </code></pre> , but it's strongly discouraged. </p><pre><code>public class FileUriExposedException\n</code></pre></section>	https://developer.android.com/reference/android/os/FileUriExposedException.html
Handler.Callback	A										<section class="prog__container"><p> Callback interface you can use when instantiating a Handler to avoid having to implement your own subclass of Handler.</p><pre><code>public static interface Handler.Callback\n</code></pre></section>	https://developer.android.com/reference/android/os/Handler.Callback.html
Handler	A										<section class="prog__container"><p> A Handler allows you to send and process <pre><code> Message </code></pre> and Runnable objects associated with a thread's <pre><code> MessageQueue </code></pre> . Each Handler instance is associated with a single thread and that thread's message queue. When you create a new Handler, it is bound to the thread / message queue of the thread that is creating it -- from that point on, it will deliver messages and runnables to that message queue and execute them as they come out of the message queue. <p> There are two main uses for a Handler: (1) to schedule messages and runnables to be executed as some point in the future; and (2) to enqueue an action to be performed on a different thread than your own. <p> Scheduling messages is accomplished with the <pre><code> post(Runnable) </code></pre> , <pre><code> postAtTime(Runnable, long) </code></pre> , <pre><code> postDelayed(Runnable, long) </code></pre> , <pre><code> sendEmptyMessage(int) </code></pre> , <pre><code> sendMessage(Message) </code></pre> , <pre><code> sendMessageAtTime(Message, long) </code></pre> , and <pre><code> sendMessageDelayed(Message, long) </code></pre> methods. The <em> post </em> versions allow you to enqueue Runnable objects to be called by the message queue when they are received; the <em> sendMessage </em> versions allow you to enqueue a <pre><code> Message </code></pre> object containing a bundle of data that will be processed by the Handler's <pre><code> handleMessage(Message) </code></pre> method (requiring that you implement a subclass of Handler). <p> When posting or sending to a Handler, you can either allow the item to be processed as soon as the message queue is ready to do so, or specify a delay before it gets processed or absolute time for it to be processed. The latter two allow you to implement timeouts, ticks, and other timing-based behavior. <p> When a process is created for your application, its main thread is dedicated to running a message queue that takes care of managing the top-level application objects (activities, broadcast receivers, etc) and any windows they create. You can create your own threads, and communicate back with the main application thread through a Handler. This is done by calling the same <em> post </em> or <em> sendMessage </em> methods as before, but from your new thread. The given Runnable or Message will then be scheduled in the Handler's message queue and processed when appropriate. </p><pre><code>public class Handler\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/Handler.html
HandlerThread	A										<section class="prog__container"><p> Handy class for starting a new thread that has a looper. The looper can then be used to create handler classes. Note that start() must still be called.</p><pre><code>public class HandlerThread\n</code></pre></section>	https://developer.android.com/reference/android/os/HandlerThread.html
HardwarePropertiesManager	A										<section class="prog__container"><p> The HardwarePropertiesManager class provides a mechanism of accessing hardware state of a device: CPU, GPU and battery temperatures, CPU usage per core, fan speed, etc.</p><pre><code>public class HardwarePropertiesManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/HardwarePropertiesManager.html
IBinder.DeathRecipient	A										<section class="prog__container"><p> Interface for receiving a callback when the process hosting an IBinder has gone away.</p><pre><code>public static interface IBinder.DeathRecipient\n</code></pre></section>	https://developer.android.com/reference/android/os/IBinder.DeathRecipient.html
IBinder	A										<section class="prog__container"><p> Base interface for a remotable object, the core part of a lightweight remote procedure call mechanism designed for high performance when performing in-process and cross-process calls. This interface describes the abstract protocol for interacting with a remotable object. Do not implement this interface directly, instead extend from <pre><code> Binder </code></pre> . <p> The key IBinder API is <pre><code> transact() </code></pre> matched by <pre><code> Binder.onTransact() </code></pre> . These methods allow you to send a call to an IBinder object and receive a call coming in to a Binder object, respectively. This transaction API is synchronous, such that a call to <pre><code> transact() </code></pre> does not return until the target has returned from <pre><code> Binder.onTransact() </code></pre> ; this is the expected behavior when calling an object that exists in the local process, and the underlying inter-process communication (IPC) mechanism ensures that these same semantics apply when going across processes. <p> The data sent through transact() is a <pre><code> Parcel </code></pre> , a generic buffer of data that also maintains some meta-data about its contents. The meta data is used to manage IBinder object references in the buffer, so that those references can be maintained as the buffer moves across processes. This mechanism ensures that when an IBinder is written into a Parcel and sent to another process, if that other process sends a reference to that same IBinder back to the original process, then the original process will receive the same IBinder object back. These semantics allow IBinder/Binder objects to be used as a unique identity (to serve as a token or for other purposes) that can be managed across processes. <p> The system maintains a pool of transaction threads in each process that it runs in. These threads are used to dispatch all IPCs coming in from other processes. For example, when an IPC is made from process A to process B, the calling thread in A blocks in transact() as it sends the transaction to process B. The next available pool thread in B receives the incoming transaction, calls Binder.onTransact() on the target object, and replies with the result Parcel. Upon receiving its result, the thread in process A returns to allow its execution to continue. In effect, other processes appear to use as additional threads that you did not create executing in your own process. <p> The Binder system also supports recursion across processes. For example if process A performs a transaction to process B, and process B while handling that transaction calls transact() on an IBinder that is implemented in A, then the thread in A that is currently waiting for the original transaction to finish will take care of calling Binder.onTransact() on the object being called by B. This ensures that the recursion semantics when calling remote binder object are the same as when calling local objects. <p> When working with remote objects, you often want to find out when they are no longer valid. There are three ways this can be determined: <ul> <li> The <pre><code> transact() </code></pre> method will throw a <pre><code> RemoteException </code></pre> exception if you try to call it on an IBinder whose process no longer exists. <li> The <pre><code> pingBinder() </code></pre> method can be called, and will return false if the remote process no longer exists. <li> The <pre><code> linkToDeath() </code></pre> method can be used to register a <pre><code> IBinder.DeathRecipient </code></pre> with the IBinder, which will be called when its containing process goes away. </li> </li> </li> </ul> </p><pre><code>public interface IBinder\n</code></pre></section>	https://developer.android.com/reference/android/os/IBinder.html
IInterface	A										<section class="prog__container"><p> Base class for Binder interfaces. When defining a new interface, you must derive it from IInterface.</p><pre><code>public interface IInterface\n</code></pre></section>	https://developer.android.com/reference/android/os/IInterface.html
LocaleList	A										<section class="prog__container"><p> LocaleList is an immutable list of Locales, typically used to keep an ordered list of user preferences for locales.</p><pre><code>public final class LocaleList\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/LocaleList.html
Looper	A										<section class="prog__container"><p> Class used to run a message loop for a thread. Threads by default do not have a message loop associated with them; to create one, call <pre><code> prepare() </code></pre> in the thread that is to run the loop, and then <pre><code> loop() </code></pre> to have it process messages until the loop is stopped. <p> Most interaction with a message loop is through the <pre><code> Handler </code></pre> class. <p> This is a typical example of the implementation of a Looper thread, using the separation of <pre><code> prepare() </code></pre> and <pre><code> loop() </code></pre> to create an initial Handler to communicate with the Looper. <pre> class LooperThread extends Thread { public Handler mHandler; public void run() { Looper.prepare(); mHandler = new Handler() { public void handleMessage(Message msg) { // process incoming messages here } }; Looper.loop(); } }</pre> </p><pre><code>public final class Looper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/Looper.html
MemoryFile	A										<section class="prog__container"><p> MemoryFile is a wrapper for the Linux ashmem driver. MemoryFiles are backed by shared memory, which can be optionally set to be purgeable. Purgeable files may have their contents reclaimed by the kernel in low memory conditions (only if allowPurging is set to true). After a file is purged, attempts to read or write the file will cause an IOException to be thrown.</p><pre><code>public class MemoryFile\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/MemoryFile.html
Message	A										<section class="prog__container"><p> Defines a message containing a description and arbitrary data object that can be sent to a <pre><code> Handler </code></pre> . This object contains two extra int fields and an extra object field that allow you to not do allocations in many cases. <p class="note"> While the constructor of Message is public, the best way to get one of these is to call <pre><code> Message.obtain() </code></pre> or one of the <pre><code> Handler.obtainMessage() </code></pre> methods, which will pull them from a pool of recycled objects. </p><pre><code>public final class Message\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/Message.html
MessageQueue	A										<section class="prog__container"><p> Low-level class holding the list of messages to be dispatched by a <pre><code> Looper </code></pre> . Messages are not added directly to a MessageQueue, but rather through <pre><code> Handler </code></pre> objects associated with the Looper. <p> You can retrieve the MessageQueue for the current thread with <pre><code> Looper.myQueue() </code></pre> . </p><pre><code>public final class MessageQueue\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/MessageQueue.html
MessageQueue.IdleHandler	A										<section class="prog__container"><p> Callback interface for discovering when a thread is going to block waiting for more messages.</p><pre><code>public static interface MessageQueue.IdleHandler\n</code></pre></section>	https://developer.android.com/reference/android/os/MessageQueue.IdleHandler.html
MessageQueue.OnFileDescriptorEventListener	A										<section class="prog__container"><p> A listener which is invoked when file descriptor related events occur.</p><pre><code>public static interface MessageQueue.OnFileDescriptorEventListener\n</code></pre></section>	https://developer.android.com/reference/android/os/MessageQueue.OnFileDescriptorEventListener.html
Messenger	A										<section class="prog__container"><p> Reference to a Handler, which others can use to send messages to it. This allows for the implementation of message-based communication across processes, by creating a Messenger pointing to a Handler in one process, and handing that Messenger to another process. <p> Note: the implementation underneath is just a simple wrapper around a <pre><code> Binder </code></pre> that is used to perform the communication. This means semantically you should treat it as such: this class does not impact process lifecycle management (you must be using some higher-level component to tell the system that your process needs to continue running), the connection will break if your process goes away for any reason, etc. </p><pre><code>public final class Messenger\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/Messenger.html
NetworkOnMainThreadException	A										<section class="prog__container"><p> The exception that is thrown when an application attempts to perform a networking operation on its main thread. <p> This is only thrown for applications targeting the Honeycomb SDK or higher. Applications targeting earlier SDK versions are allowed to do networking on their main event loop threads, but it's heavily discouraged. See the document Designing for Responsiveness . <p> Also see <pre><code> StrictMode </code></pre> . </p><pre><code>public class NetworkOnMainThreadException\n</code></pre></section>	https://developer.android.com/reference/android/os/NetworkOnMainThreadException.html
OperationCanceledException	A										<section class="prog__container"><p> An exception type that is thrown when an operation in progress is canceled.</p><pre><code>public class OperationCanceledException\n</code></pre></section>	https://developer.android.com/reference/android/os/OperationCanceledException.html
android.os	A										<section class="prog__container">AsyncTask enables proper and easy use of the UI thread. </section>	https://developer.android.com/reference/android/os/package-summary.html
Parcel	A										<section class="prog__container"><p> Container for a message (data and object references) that can be sent through an IBinder. A Parcel can contain both flattened data that will be unflattened on the other side of the IPC (using the various methods here for writing specific types, or the general <pre><code> Parcelable </code></pre> interface), and references to live <pre><code> IBinder </code></pre> objects that will result in the other side receiving a proxy IBinder connected with the original IBinder in the Parcel. <p class="note"> Parcel is <strong> not </strong> a general-purpose serialization mechanism. This class (and the corresponding <pre><code> Parcelable </code></pre> API for placing arbitrary objects into a Parcel) is designed as a high-performance IPC transport. As such, it is not appropriate to place any Parcel data in to persistent storage: changes in the underlying implementation of any of the data in the Parcel can render older data unreadable. </p><pre><code>public final class Parcel\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/Parcel.html
Parcelable.ClassLoaderCreator	A										<section class="prog__container"><p> Specialization of <pre><code> Parcelable.Creator </code></pre> that allows you to receive the ClassLoader the object is being created in.</p><pre><code>public static interface Parcelable.ClassLoaderCreator\nimplements Creator&lt;T&gt;</code></pre></section>	https://developer.android.com/reference/android/os/Parcelable.ClassLoaderCreator.html
Parcelable.Creator	A										<section class="prog__container"><p> Interface that must be implemented and provided as a public CREATOR field that generates instances of your Parcelable class from a Parcel.</p><pre><code>public static interface Parcelable.Creator\n</code></pre></section>	https://developer.android.com/reference/android/os/Parcelable.Creator.html
Parcelable	A										<section class="prog__container"><p> Interface for classes whose instances can be written to and restored from a <pre><code> Parcel </code></pre> . Classes implementing the Parcelable interface must also have a non-null static field called <pre><code> CREATOR </code></pre> of a type that implements the <pre><code> Parcelable.Creator </code></pre> interface. <p> A typical implementation of Parcelable is: </p><pre><code>public interface Parcelable\n</code></pre></section>	https://developer.android.com/reference/android/os/Parcelable.html
ParcelFileDescriptor.AutoCloseInputStream	A										<section class="prog__container"><p> An InputStream you can create on a ParcelFileDescriptor, which will take care of calling <pre><code> ParcelFileDescriptor.close() </code></pre> for you when the stream is closed.</p><pre><code>public static class ParcelFileDescriptor.AutoCloseInputStream\n</code></pre></section>	https://developer.android.com/reference/android/os/ParcelFileDescriptor.AutoCloseInputStream.html
ParcelFileDescriptor.AutoCloseOutputStream	A										<section class="prog__container"><p> An OutputStream you can create on a ParcelFileDescriptor, which will take care of calling <pre><code> ParcelFileDescriptor.close() </code></pre> for you when the stream is closed.</p><pre><code>public static class ParcelFileDescriptor.AutoCloseOutputStream\n</code></pre></section>	https://developer.android.com/reference/android/os/ParcelFileDescriptor.AutoCloseOutputStream.html
ParcelFileDescriptor.FileDescriptorDetachedException	A										<section class="prog__container"><p> Exception that indicates that the file descriptor was detached.</p><pre><code>public static class ParcelFileDescriptor.FileDescriptorDetachedException\n</code></pre></section>	https://developer.android.com/reference/android/os/ParcelFileDescriptor.FileDescriptorDetachedException.html
ParcelFileDescriptor	A										<section class="prog__container"><p> The FileDescriptor returned by <pre><code> readFileDescriptor() </code></pre> , allowing you to close it when done with it.</p><pre><code>public class ParcelFileDescriptor\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/ParcelFileDescriptor.html
ParcelFileDescriptor.OnCloseListener	A										<section class="prog__container"><p> Callback indicating that a ParcelFileDescriptor has been closed.</p><pre><code>public static interface ParcelFileDescriptor.OnCloseListener\n</code></pre></section>	https://developer.android.com/reference/android/os/ParcelFileDescriptor.OnCloseListener.html
ParcelFormatException	A										<section class="prog__container"><p> The contents of a Parcel (usually during unmarshalling) does not contain the expected data.</p><pre><code>public class ParcelFormatException\n</code></pre></section>	https://developer.android.com/reference/android/os/ParcelFormatException.html
ParcelUuid	A										<section class="prog__container"><p> This class is a Parcelable wrapper around <pre><code> UUID </code></pre> which is an immutable representation of a 128-bit universally unique identifier.</p><pre><code>public final class ParcelUuid\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/ParcelUuid.html
PatternMatcher	A										<section class="prog__container"><p> A simple pattern matcher, which is safe to use on untrusted data: it does not provide full reg-exp support, only simple globbing that can not be used maliciously.</p><pre><code>public class PatternMatcher\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/PatternMatcher.html
PersistableBundle	A										<section class="prog__container"><p> A mapping from String keys to values of various types. The set of types supported by this class is purposefully restricted to simple objects that can safely be persisted to and restored from disk.</p><pre><code>public final class PersistableBundle\n</code></pre></section>	https://developer.android.com/reference/android/os/PersistableBundle.html
PowerManager	A										<section class="prog__container"><p> This class gives you control of the power state of the device. <p> <b> Device battery life will be significantly affected by the use of this API. </b> Do not acquire <pre><code> PowerManager.WakeLock </code></pre> s unless you really need them, use the minimum levels possible, and be sure to release them as soon as possible. </p><pre><code>public final class PowerManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/PowerManager.html
PowerManager.WakeLock	A										<section class="prog__container"><p> A wake lock is a mechanism to indicate that your application needs to have the device stay on. <p> Any application using a WakeLock must request the <pre><code> android.permission.WAKE_LOCK </code></pre> permission in an <pre><code> &lt;uses-permission&gt; </code></pre> element of the application's manifest. Obtain a wake lock by calling <pre><code> newWakeLock(int, String) </code></pre> . </p><pre><code>public final class PowerManager.WakeLock\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/PowerManager.WakeLock.html
Process	A										<section class="prog__container"><p> Tools for managing OS processes.</p><pre><code>public class Process\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/Process.html
RecoverySystem	A										<section class="prog__container"><p> RecoverySystem contains methods for interacting with the Android recovery system (the separate partition that can be used to install system updates, wipe user data, etc.)</p><pre><code>public class RecoverySystem\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/RecoverySystem.html
RecoverySystem.ProgressListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked regularly as verification proceeds.</p><pre><code>public static interface RecoverySystem.ProgressListener\n</code></pre></section>	https://developer.android.com/reference/android/os/RecoverySystem.ProgressListener.html
RemoteCallbackList	A										<section class="prog__container"><p> Takes care of the grunt work of maintaining a list of remote interfaces, typically for the use of performing callbacks from a <pre><code> Service </code></pre> to its clients. In particular, this: <ul> <li> Keeps track of a set of registered <pre><code> IInterface </code></pre> callbacks, taking care to identify them through their underlying unique <pre><code> IBinder </code></pre> (by calling <pre><code> IInterface.asBinder() </code></pre> . <li> Attaches a <pre><code> IBinder.DeathRecipient </code></pre> to each registered interface, so that it can be cleaned out of the list if its process goes away. <li> Performs locking of the underlying list of interfaces to deal with multithreaded incoming calls, and a thread-safe way to iterate over a snapshot of the list without holding its lock. </li> </li> </li> </ul> <p> To use this class, simply create a single instance along with your service, and call its <pre><code> register(E) </code></pre> and <pre><code> unregister(E) </code></pre> methods as client register and unregister with your service. To call back on to the registered clients, use <pre><code> beginBroadcast() </code></pre> , <pre><code> getBroadcastItem(int) </code></pre> , and <pre><code> finishBroadcast() </code></pre> . <p> If a registered callback's process goes away, this class will take care of automatically removing it from the list. If you want to do additional work in this situation, you can create a subclass that implements the <pre><code> onCallbackDied(E) </code></pre> method. </p><pre><code>public class RemoteCallbackList\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/RemoteCallbackList.html
RemoteException	A										<section class="prog__container"><p> Parent exception for all Binder remote-invocation errors</p><pre><code>public class RemoteException\n</code></pre></section>	https://developer.android.com/reference/android/os/RemoteException.html
ResultReceiver	A										<section class="prog__container"><p> Generic interface for receiving a callback result from someone. Use this by creating a subclass and implement <pre><code> onReceiveResult(int, Bundle) </code></pre> , which you can then pass to others and send through IPC, and receive results they supply with <pre><code> send(int, Bundle) </code></pre> . <p> Note: the implementation underneath is just a simple wrapper around a <pre><code> Binder </code></pre> that is used to perform the communication. This means semantically you should treat it as such: this class does not impact process lifecycle management (you must be using some higher-level component to tell the system that your process needs to continue running), the connection will break if your process goes away for any reason, etc. </p><pre><code>public class ResultReceiver\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/ResultReceiver.html
StatFs	A										<section class="prog__container"><p> Retrieve overall information about the space on a filesystem. This is a wrapper for Unix statvfs().</p><pre><code>public class StatFs\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/StatFs.html
StrictMode	A										<section class="prog__container"><p> <p> StrictMode is a developer tool which detects things you might be doing by accident and brings them to your attention so you can fix them. <p> StrictMode is most commonly used to catch accidental disk or network access on the application's main thread, where UI operations are received and animations take place. Keeping disk and network operations off the main thread makes for much smoother, more responsive applications. By keeping your application's main thread responsive, you also prevent ANR dialogs from being shown to users. <p class="note"> Note that even though an Android device's disk is often on flash memory, many devices run a filesystem on top of that memory with very limited concurrency. It's often the case that almost all disk accesses are fast, but may in individual cases be dramatically slower when certain I/O is happening in the background from other processes. If possible, it's best to assume that such things are not fast. </p><pre><code>public final class StrictMode\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/StrictMode.html
StrictMode.ThreadPolicy.Builder	A										<section class="prog__container"><p> Creates <pre><code> StrictMode.ThreadPolicy </code></pre> instances. Methods whose names start with <pre><code> detect </code></pre> specify what problems we should look for. Methods whose names start with <pre><code> penalty </code></pre> specify what we should do when we detect a problem. <p> You can call as many <pre><code> detect </code></pre> and <pre><code> penalty </code></pre> methods as you like. Currently order is insignificant: all penalties apply to all detected problems. <p> For example, detect everything and log anything that's found: <pre> StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder() .detectAll() .penaltyLog() .build(); StrictMode.setThreadPolicy(policy); </pre> </p><pre><code>public static final class StrictMode.ThreadPolicy.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html
StrictMode.ThreadPolicy	A										<section class="prog__container"><p> <pre><code> StrictMode </code></pre> policy applied to a certain thread. <p> The policy is enabled by <pre><code> setThreadPolicy(StrictMode.ThreadPolicy) </code></pre> . The current policy can be retrieved with <pre><code> getThreadPolicy() </code></pre> . <p> Note that multiple penalties may be provided and they're run in order from least to most severe (logging before process death, for example). There's currently no mechanism to choose different penalties for different detected actions. </p><pre><code>public static final class StrictMode.ThreadPolicy\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.html
StrictMode.VmPolicy.Builder	A										<section class="prog__container"><p> Creates <pre><code> StrictMode.VmPolicy </code></pre> instances. Methods whose names start with <pre><code> detect </code></pre> specify what problems we should look for. Methods whose names start with <pre><code> penalty </code></pre> specify what we should do when we detect a problem. <p> You can call as many <pre><code> detect </code></pre> and <pre><code> penalty </code></pre> methods as you like. Currently order is insignificant: all penalties apply to all detected problems. <p> For example, detect everything and log anything that's found: <pre> StrictMode.VmPolicy policy = new StrictMode.VmPolicy.Builder() .detectAll() .penaltyLog() .build(); StrictMode.setVmPolicy(policy); </pre> </p><pre><code>public static final class StrictMode.VmPolicy.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html
StrictMode.VmPolicy	A										<section class="prog__container"><p> <pre><code> StrictMode </code></pre> policy applied to all threads in the virtual machine's process. <p> The policy is enabled by <pre><code> setVmPolicy(StrictMode.VmPolicy) </code></pre> . </p><pre><code>public static final class StrictMode.VmPolicy\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/StrictMode.VmPolicy.html
SystemClock	A										<section class="prog__container"><p> Core timekeeping facilities. <p> Three different clocks are available, and they should not be confused: <ul> <li> <p> <pre><code> System.currentTimeMillis() </code></pre> is the standard "wall" clock (time and date) expressing milliseconds since the epoch. The wall clock can be set by the user or the phone network (see <pre><code> setCurrentTimeMillis(long) </code></pre> ), so the time may jump backwards or forwards unpredictably. This clock should only be used when correspondence with real-world dates and times is important, such as in a calendar or alarm clock application. Interval or elapsed time measurements should use a different clock. If you are using System.currentTimeMillis(), consider listening to the <pre><code> ACTION_TIME_TICK </code></pre> , <pre><code> ACTION_TIME_CHANGED </code></pre> and <pre><code> ACTION_TIMEZONE_CHANGED </code></pre> <pre><code> Intent </code></pre> broadcasts to find out when the time changes. <li> <p> <pre><code> uptimeMillis() </code></pre> is counted in milliseconds since the system was booted. This clock stops when the system enters deep sleep (CPU off, display dark, device waiting for external input), but is not affected by clock scaling, idle, or other power saving mechanisms. This is the basis for most interval timing such as <pre><code> Thread.sleep(millls) </code></pre> , <pre><code> Object.wait(millis) </code></pre> , and <pre><code> System.nanoTime() </code></pre> . This clock is guaranteed to be monotonic, and is suitable for interval timing when the interval does not span device sleep. Most methods that accept a timestamp value currently expect the <pre><code> uptimeMillis() </code></pre> clock. <li> <p> <pre><code> elapsedRealtime() </code></pre> and <pre><code> elapsedRealtimeNanos() </code></pre> return the time since the system was booted, and include deep sleep. This clock is guaranteed to be monotonic, and continues to tick even when the CPU is in power saving modes, so is the recommend basis for general purpose interval timing. </p><pre><code>public final class SystemClock\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/SystemClock.html
TokenWatcher	A										<section class="prog__container"><p> Helper class that helps you use IBinder objects as reference counted tokens. IBinders make good tokens because we find out when they are removed</p><pre><code>public abstract class TokenWatcher\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/TokenWatcher.html
Trace	A										<section class="prog__container"><p> Writes trace events to the system trace buffer. These trace events can be collected and visualized using the Systrace tool. <p> This tracing mechanism is independent of the method tracing mechanism offered by <pre><code> startMethodTracing() </code></pre> . In particular, it enables tracing of events that occur across multiple processes. <p> For information about using the Systrace tool, read Analyzing Display and Performance with Systrace . </p><pre><code>public final class Trace\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/Trace.html
TransactionTooLargeException	A										<section class="prog__container"><p> The Binder transaction failed because it was too large. <p> During a remote procedure call, the arguments and the return value of the call are transferred as <pre><code> Parcel </code></pre> objects stored in the Binder transaction buffer. If the arguments or the return value are too large to fit in the transaction buffer, then the call will fail and <pre><code> TransactionTooLargeException </code></pre> will be thrown. </p><pre><code>public class TransactionTooLargeException\n</code></pre></section>	https://developer.android.com/reference/android/os/TransactionTooLargeException.html
UserHandle	A										<section class="prog__container"><p> Representation of a user on the device.</p><pre><code>public final class UserHandle\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/UserHandle.html
UserManager	A										<section class="prog__container"><p> Manages users and user details on a multi-user system. There are two major categories of users: fully customizable users with their own login, and managed profiles that share a workspace with a related user. <p> Users are different from accounts, which are managed by <pre><code> AccountManager </code></pre> . Each user can have their own set of accounts. <p> See <pre><code> ACTION_PROVISION_MANAGED_PROFILE </code></pre> for more on managed profiles. </p><pre><code>public class UserManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/UserManager.html
Vibrator	A										<section class="prog__container"><p> Class that operates the vibrator on the device. <p> If your process exits, any vibration you started will stop. </p><pre><code>public abstract class Vibrator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/Vibrator.html
WorkSource	A										<section class="prog__container"><p> Describes the source of some work that may be done by someone else. Currently the public representation of what a work source is is not defined; this is an opaque container.</p><pre><code>public class WorkSource\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/WorkSource.html
HealthStats	A										<section class="prog__container"><p> A HealthStats object contains system health data about an application. <p> <b> Data Types </b> <br> Each of the keys references data in one of five data types: <p> A <b> measurement </b> metric contains a sinlge <pre><code> long </code></pre> value. That value may be a count, a time, or some other type of value. The unit for a measurement (COUNT, MS, etc) will always be in the name of the constant for the key to retrieve it. For example, the <pre><code> UidHealthStats.MEASUREMENT_WIFI_TX_MS </code></pre> value is the number of milliseconds (ms) that were spent transmitting on wifi by an application. The <pre><code> UidHealthStats.MEASUREMENT_MOBILE_RX_PACKETS </code></pre> measurement is the number of packets received on behalf of an application. The <pre><code> UidHealthStats.MEASUREMENT_TOUCH_USER_ACTIVITY_COUNT </code></pre> measurement is the number of times the user touched the screen, causing the screen to stay awake. <p> A <b> timer </b> metric contains an <pre><code> int </code></pre> count and a <pre><code> long </code></pre> time, measured in milliseconds. Timers track how many times a resource was used, and the total duration for that usage. For example, the <pre><code> TIMER_FLASHLIGHT </code></pre> timer tracks how many times the application turned on the flashlight, and for how many milliseconds total it kept it on. <p> A <b> measurement map </b> metric is a mapping of <pre><code> String </code></pre> names to <pre><code> Long </code></pre> values. The names typically are application provided names. For example, the <pre><code> PackageHealthStats.MEASUREMENTS_WAKEUP_ALARMS_COUNT </code></pre> measurement map is a mapping of the tag provided to the <pre><code> AlarmManager </code></pre> when the alarm is scheduled. <p> A <b> timer map </b> metric is a mapping of <pre><code> String </code></pre> names to <pre><code> TimerStat </code></pre> objects. The names are typically application provided names. For example, the <pre><code> UidHealthStats.TIMERS_WAKELOCKS_PARTIAL </code></pre> is a mapping of tag provided to the <pre><code> PowerManager </code></pre> when the wakelock is created to the number of times and for how long each wakelock was active. <p> Lastly, a <b> health stats </b> metric is a mapping of <pre><code> String </code></pre> names to a recursive <pre><code> HealthStats </code></pre> object containing more detailed information. For example, the <pre><code> UidHealthStats.STATS_PACKAGES </code></pre> metric is a mapping of the package names for each of the APKs sharing a uid to the information recorded for that apk. The returned HealthStats objects will each be associated with a different set of constants. For the HealthStats returned for UidHealthStats.STATS_PACKAGES, the keys come from the <pre><code> PackageHealthStats </code></pre> class. <p> The keys that are available are subject to change, depending on what a particular device or software version is capable of recording. Applications must handle the absence of data without crashing. </p><pre><code>public class HealthStats\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/health/HealthStats.html
android.os.health	A										<section class="prog__container">Applications running in the background are responsible for a significant amount of battery usage on a typical android device. There are several things that applications can do in order to reduce their impact. For example, by using</section>	https://developer.android.com/reference/android/os/health/package-summary.html
PackageHealthStats	A										<section class="prog__container"><p> Keys for <pre><code> HealthStats </code></pre> returned from <pre><code> HealthStats.getStats(int) </code></pre> with the <pre><code> UidHealthStats.STATS_PACKAGES </code></pre> key.</p><pre><code>public final class PackageHealthStats\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/health/PackageHealthStats.html
PidHealthStats	A										<section class="prog__container"><p> Keys for <pre><code> HealthStats </code></pre> returned from <pre><code> HealthStats.getStats(int) </code></pre> with the <pre><code> UidHealthStats.STATS_PIDS </code></pre> key. <p> The values coming from PidHealthStats are a little bit different from the other HealthStats values. These values are not aggregate or historical values, but instead live values from when the snapshot is taken. These tend to be more useful in debugging rogue processes than in gathering aggregate metrics across the fleet of devices. </p><pre><code>public final class PidHealthStats\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/health/PidHealthStats.html
ProcessHealthStats	A										<section class="prog__container"><p> Keys for <pre><code> HealthStats </code></pre> returned from <pre><code> HealthStats.getStats(int) </code></pre> with the <pre><code> UidHealthStats.STATS_PROCESSES </code></pre> key.</p><pre><code>public final class ProcessHealthStats\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/health/ProcessHealthStats.html
ServiceHealthStats	A										<section class="prog__container"><p> Keys for <pre><code> HealthStats </code></pre> returned from <pre><code> HealthStats.getStats(int) </code></pre> with the <pre><code> PackageHealthStats.STATS_SERVICES </code></pre> key.</p><pre><code>public final class ServiceHealthStats\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/health/ServiceHealthStats.html
SystemHealthManager	A										<section class="prog__container"><p> Provides access to data about how various system resources are used by applications.</p><pre><code>public class SystemHealthManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/health/SystemHealthManager.html
TimerStat	A										<section class="prog__container"><p> A TimerStat object stores a count and a time.</p><pre><code>public final class TimerStat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/health/TimerStat.html
UidHealthStats	A										<section class="prog__container"><p> Keys for <pre><code> HealthStats </code></pre> returned from <pre><code> SystemHealthManager.takeUidSnapshot(int) </code></pre> , <pre><code> SystemHealthManager.takeMyUidSnapshot() </code></pre> , and <pre><code> SystemHealthManager.takeUidSnapshots(int[]) </code></pre> .</p><pre><code>public final class UidHealthStats\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/health/UidHealthStats.html
OnObbStateChangeListener	A										<section class="prog__container"><p> Used for receiving notifications from <pre><code> StorageManager </code></pre> about OBB file states.</p><pre><code>public abstract class OnObbStateChangeListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/storage/OnObbStateChangeListener.html
android.os.storage	A										<section class="prog__container">Contains classes for the system storage service, which manages binary asset filesystemsknown as Opaque Binary Blobs (OBBs).</section>	https://developer.android.com/reference/android/os/storage/package-summary.html
StorageManager	A										<section class="prog__container"><p> StorageManager is the interface to the systems storage service. The storage manager handles storage-related items such as Opaque Binary Blobs (OBBs). <p> OBBs contain a filesystem that maybe be encrypted on disk and mounted on-demand from an application. OBBs are a good way of providing large amounts of binary assets without packaging them into APKs as they may be multiple gigabytes in size. However, due to their size, they're most likely stored in a shared storage pool accessible from all programs. The system does not guarantee the security of the OBB file itself: if any program modifies the OBB, there is no guarantee that a read from that OBB will produce the expected output. <p> Get an instance of this class by calling <pre><code> getSystemService(java.lang.String) </code></pre> with an argument of <pre><code> STORAGE_SERVICE </code></pre> . </p><pre><code>public class StorageManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/storage/StorageManager.html
StorageVolume	A										<section class="prog__container"><p> Information about a shared/external storage volume for a specific user. <p> A device always has one (and one only) primary storage volume, but it could have extra volumes, like SD cards and USB drives. This object represents the logical view of a storage volume for a specific user: different users might have different views for the same physical volume (for example, if the volume is a built-in emulated storage). <p> The storage volume is not necessarily mounted, applications should use <pre><code> getState() </code></pre> to verify its state. <p> Applications willing to read or write to this storage volume needs to get a permission from the user first, which can be achieved in the following ways: <ul> <li> To get access to standard directories (like the <pre><code> DIRECTORY_PICTURES </code></pre> ), they can use the <pre><code> createAccessIntent(String) </code></pre> . This is the recommend way, since it provides a simpler API and narrows the access to the given directory (and its descendants). <li> To get access to any directory (and its descendants), they can use the Storage Acess Framework APIs (such as <pre><code> ACTION_OPEN_DOCUMENT </code></pre> and <pre><code> ACTION_OPEN_DOCUMENT_TREE </code></pre> , although these APIs do not guarantee the user will select this specific volume. <li> To get read and write access to the primary storage volume, applications can declare the <pre><code> READ_EXTERNAL_STORAGE </code></pre> and <pre><code> WRITE_EXTERNAL_STORAGE </code></pre> permissions respectively, with the latter including the former. This approach is discouraged, since users may be hesitant to grant broad access to all files contained on a storage device. </li> </li> </li> </ul> <p> It can be obtained through <pre><code> getStorageVolumes() </code></pre> and <pre><code> getPrimaryStorageVolume() </code></pre> and also as an extra in some broadcasts (see <pre><code> EXTRA_STORAGE_VOLUME </code></pre> ). <p> See <pre><code> getExternalStorageDirectory() </code></pre> for more info about shared/external storage semantics. </p><pre><code>public final class StorageVolume\nextends Object</code></pre></section>	https://developer.android.com/reference/android/os/storage/StorageVolume.html
CheckBoxPreference	A										<section class="prog__container"><p> A <pre><code> Preference </code></pre> that provides checkbox widget functionality. <p> This preference will store a boolean into the SharedPreferences. </p><pre><code>public class CheckBoxPreference\n</code></pre></section>	https://developer.android.com/reference/android/preference/CheckBoxPreference.html
DialogPreference	A										<section class="prog__container"><p> A base class for <pre><code> Preference </code></pre> objects that are dialog-based. These preferences will, when clicked, open a dialog showing the actual preference controls.</p><pre><code>public abstract class DialogPreference\n</code></pre></section>	https://developer.android.com/reference/android/preference/DialogPreference.html
EditTextPreference	A										<section class="prog__container"><p> A <pre><code> Preference </code></pre> that allows for string input. <p> It is a subclass of <pre><code> DialogPreference </code></pre> and shows the <pre><code> EditText </code></pre> in a dialog. This <pre><code> EditText </code></pre> can be modified either programmatically via <pre><code> getEditText() </code></pre> , or through XML by setting any EditText attributes on the EditTextPreference. <p> This preference will store a string into the SharedPreferences. <p> See <pre><code> EditText Attributes </code></pre> . </p><pre><code>public class EditTextPreference\n</code></pre></section>	https://developer.android.com/reference/android/preference/EditTextPreference.html
ListPreference	A										<section class="prog__container"><p> A <pre><code> Preference </code></pre> that displays a list of entries as a dialog. <p> This preference will store a string into the SharedPreferences. This string will be the value from the <pre><code> setEntryValues(CharSequence[]) </code></pre> array. </p><pre><code>public class ListPreference\n</code></pre></section>	https://developer.android.com/reference/android/preference/ListPreference.html
MultiSelectListPreference	A										<section class="prog__container"><p> A <pre><code> Preference </code></pre> that displays a list of entries as a dialog. <p> This preference will store a set of strings into the SharedPreferences. This set will contain one or more values from the <pre><code> setEntryValues(CharSequence[]) </code></pre> array. </p><pre><code>public class MultiSelectListPreference\n</code></pre></section>	https://developer.android.com/reference/android/preference/MultiSelectListPreference.html
android.preference	A										<section class="prog__container">The preferences portion of an application should be ran as a separate</section>	https://developer.android.com/reference/android/preference/package-summary.html
Preference.BaseSavedState	A										<section class="prog__container"><p> A base class for managing the instance state of a <pre><code> Preference </code></pre> .</p><pre><code>public static class Preference.BaseSavedState\n</code></pre></section>	https://developer.android.com/reference/android/preference/Preference.BaseSavedState.html
Preference	A										<section class="prog__container"><p> Represents the basic Preference UI building block displayed by a <pre><code> PreferenceActivity </code></pre> in the form of a <pre><code> ListView </code></pre> . This class provides the <pre><code> View </code></pre> to be displayed in the activity and associates with a <pre><code> SharedPreferences </code></pre> to store/retrieve the preference data. <p> When specifying a preference hierarchy in XML, each element can point to a subclass of <pre><code> Preference </code></pre> , similar to the view hierarchy and layouts. <p> This class contains a <pre><code> key </code></pre> that will be used as the key into the <pre><code> SharedPreferences </code></pre> . It is up to the subclass to decide how to store the value. </p><pre><code>public class Preference\nextends Object</code></pre></section>	https://developer.android.com/reference/android/preference/Preference.html
Preference.OnPreferenceChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the value of this <pre><code> Preference </code></pre> has been changed by the user and is about to be set and/or persisted. This gives the client a chance to prevent setting and/or persisting the value.</p><pre><code>public static interface Preference.OnPreferenceChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/preference/Preference.OnPreferenceChangeListener.html
Preference.OnPreferenceClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a <pre><code> Preference </code></pre> is clicked.</p><pre><code>public static interface Preference.OnPreferenceClickListener\n</code></pre></section>	https://developer.android.com/reference/android/preference/Preference.OnPreferenceClickListener.html
PreferenceActivity.Header	A										<section class="prog__container"><p> Description of a single Header item that the user can select.</p><pre><code>public static final class PreferenceActivity.Header\nextends Object</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceActivity.Header.html
PreferenceActivity	A										<section class="prog__container"><p> This is the base class for an activity to show a hierarchy of preferences to the user. Prior to <pre><code> HONEYCOMB </code></pre> this class only allowed the display of a single set of preference; this functionality should now be found in the new <pre><code> PreferenceFragment </code></pre> class. If you are using PreferenceActivity in its old mode, the documentation there applies to the deprecated APIs here. <p> This activity shows one or more headers of preferences, each of which is associated with a <pre><code> PreferenceFragment </code></pre> to display the preferences of that header. The actual layout and display of these associations can however vary; currently there are two major approaches it may take: <ul> <li> On a small screen it may display only the headers as a single list when first launched. Selecting one of the header items will re-launch the activity with it only showing the PreferenceFragment of that header. <li> On a large screen in may display both the headers and current PreferenceFragment together as panes. Selecting a header item switches to showing the correct PreferenceFragment for that item. </li> </li> </ul> <p> Subclasses of PreferenceActivity should implement <pre><code> onBuildHeaders(List <preferenceactivity.header> ) </preferenceactivity.header> </code></pre> to populate the header list with the desired items. Doing this implicitly switches the class into its new "headers + fragments" mode rather than the old style of just showing a single preferences list. </p><pre><code>public abstract class PreferenceActivity\n</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceActivity.html
PreferenceCategory	A										<section class="prog__container"><p> Used to group <pre><code> Preference </code></pre> objects and provide a disabled title above the group. </p><pre><code>public class PreferenceCategory\n</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceCategory.html
PreferenceFragment	A										<section class="prog__container"><p> Shows a hierarchy of <pre><code> Preference </code></pre> objects as lists. These preferences will automatically save to <pre><code> SharedPreferences </code></pre> as the user interacts with them. To retrieve an instance of <pre><code> SharedPreferences </code></pre> that the preference hierarchy in this fragment will use, call <pre><code> getDefaultSharedPreferences(android.content.Context) </code></pre> with a context in the same package as this fragment. <p> Furthermore, the preferences shown will follow the visual style of system preferences. It is easy to create a hierarchy of preferences (that can be shown on multiple screens) via XML. For these reasons, it is recommended to use this fragment (as a superclass) to deal with preferences in applications. <p> A <pre><code> PreferenceScreen </code></pre> object should be at the top of the preference hierarchy. Furthermore, subsequent <pre><code> PreferenceScreen </code></pre> in the hierarchy denote a screen break--that is the preferences contained within subsequent <pre><code> PreferenceScreen </code></pre> should be shown on another screen. The preference framework handles showing these other screens from the preference hierarchy. <p> The preference hierarchy can be formed in multiple ways: <li> From an XML file specifying the hierarchy <li> From different <pre><code> Activities </code></pre> that each specify its own preferences in an XML file via <pre><code> Activity </code></pre> meta-data <li> From an object hierarchy rooted with <pre><code> PreferenceScreen </code></pre> <p> To inflate from XML, use the <pre><code> addPreferencesFromResource(int) </code></pre> . The root element should be a <pre><code> PreferenceScreen </code></pre> . Subsequent elements can point to actual <pre><code> Preference </code></pre> subclasses. As mentioned above, subsequent <pre><code> PreferenceScreen </code></pre> in the hierarchy will result in the screen break. <p> To specify an <pre><code> Intent </code></pre> to query <pre><code> Activities </code></pre> that each have preferences, use <pre><code> addPreferencesFromIntent(Intent) </code></pre> . Each <pre><code> Activity </code></pre> can specify meta-data in the manifest (via the key <pre><code> METADATA_KEY_PREFERENCES </code></pre> ) that points to an XML resource. These XML resources will be inflated into a single preference hierarchy and shown by this fragment. <p> To specify an object hierarchy rooted with <pre><code> PreferenceScreen </code></pre> , use <pre><code> setPreferenceScreen(PreferenceScreen) </code></pre> . <p> As a convenience, this fragment implements a click listener for any preference in the current hierarchy, see <pre><code> onPreferenceTreeClick(PreferenceScreen, Preference) </code></pre> . </p><pre><code>public abstract class PreferenceFragment\n</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceFragment.html
PreferenceFragment.OnPreferenceStartFragmentCallback	A										<section class="prog__container"><p> Interface that PreferenceFragment's containing activity should implement to be able to process preference items that wish to switch to a new fragment.</p><pre><code>public static interface PreferenceFragment.OnPreferenceStartFragmentCallback\n</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceFragment.OnPreferenceStartFragmentCallback.html
PreferenceGroup	A										<section class="prog__container"><p> A container for multiple <pre><code> Preference </code></pre> objects. It is a base class for Preference objects that are parents, such as <pre><code> PreferenceCategory </code></pre> and <pre><code> PreferenceScreen </code></pre> . </p><pre><code>public abstract class PreferenceGroup\n</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceGroup.html
PreferenceManager	A										<section class="prog__container"><p> Used to help create <pre><code> Preference </code></pre> hierarchies from activities or XML. <p> In most cases, clients should use <pre><code> addPreferencesFromIntent(Intent) </code></pre> or <pre><code> addPreferencesFromResource(int) </code></pre> . </p><pre><code>public class PreferenceManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceManager.html
PreferenceManager.OnActivityDestroyListener	A										<section class="prog__container"><p> Interface definition for a class that will be called when the container's activity is destroyed.</p><pre><code>public static interface PreferenceManager.OnActivityDestroyListener\n</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceManager.OnActivityDestroyListener.html
PreferenceManager.OnActivityResultListener	A										<section class="prog__container"><p> Interface definition for a class that will be called when the container's activity receives an activity result.</p><pre><code>public static interface PreferenceManager.OnActivityResultListener\n</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceManager.OnActivityResultListener.html
PreferenceManager.OnActivityStopListener	A										<section class="prog__container"><p> Interface definition for a class that will be called when the container's activity is stopped.</p><pre><code>public static interface PreferenceManager.OnActivityStopListener\n</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceManager.OnActivityStopListener.html
PreferenceScreen	A										<section class="prog__container"><p> Represents a top-level <pre><code> Preference </code></pre> that is the root of a Preference hierarchy. A <pre><code> PreferenceActivity </code></pre> points to an instance of this class to show the preferences. To instantiate this class, use <pre><code> createPreferenceScreen(Context) </code></pre> . <ul> This class can appear in two places: <li> When a <pre><code> PreferenceActivity </code></pre> points to this, it is used as the root and is not shown (only the contained preferences are shown). <li> When it appears inside another preference hierarchy, it is shown and serves as the gateway to another screen of preferences (either by showing another screen of preferences as a <pre><code> Dialog </code></pre> or via a <pre><code> startActivity(android.content.Intent) </code></pre> from the <pre><code> getIntent() </code></pre> ). The children of this <pre><code> PreferenceScreen </code></pre> are NOT shown in the screen that this <pre><code> PreferenceScreen </code></pre> is shown in. Instead, a separate screen will be shown when this preference is clicked. </li> </li> </ul> <p> Here's an example XML layout of a PreferenceScreen: </p><pre><code>public final class PreferenceScreen\n</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceScreen.html
RingtonePreference	A										<section class="prog__container"><p> A <pre><code> Preference </code></pre> that allows the user to choose a ringtone from those on the device. The chosen ringtone's URI will be persisted as a string. <p> If the user chooses the "Default" item, the saved string will be one of <pre><code> DEFAULT_RINGTONE_URI </code></pre> , <pre><code> DEFAULT_NOTIFICATION_URI </code></pre> , or <pre><code> DEFAULT_ALARM_ALERT_URI </code></pre> . If the user chooses the "Silent" item, the saved string will be an empty string. </p><pre><code>public class RingtonePreference\n</code></pre></section>	https://developer.android.com/reference/android/preference/RingtonePreference.html
SwitchPreference	A										<section class="prog__container"><p> A <pre><code> Preference </code></pre> that provides a two-state toggleable option. <p> This preference will store a boolean into the SharedPreferences. </p><pre><code>public class SwitchPreference\n</code></pre></section>	https://developer.android.com/reference/android/preference/SwitchPreference.html
TwoStatePreference	A										<section class="prog__container"><p> Common base class for preferences that have two selectable states, persist a boolean value in SharedPreferences, and may have dependent preferences that are enabled/disabled based on the current state.</p><pre><code>public abstract class TwoStatePreference\n</code></pre></section>	https://developer.android.com/reference/android/preference/TwoStatePreference.html
android.print	A										<section class="prog__container">Provides classes for implementing print support in applications and also contains allbase classes and abstractions involved in printing. These base classes are also usedby other more specialized printing related packages.</section>	https://developer.android.com/reference/android/print/package-summary.html
PageRange	A										<section class="prog__container"><p> Represents a range of pages. The start and end page indices of the range are zero based and inclusive.</p><pre><code>public final class PageRange\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PageRange.html
PrintAttributes.Builder	A										<section class="prog__container"><p> Builder for creating <pre><code> PrintAttributes </code></pre> .</p><pre><code>public static final class PrintAttributes.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrintAttributes.Builder.html
PrintAttributes	A										<section class="prog__container"><p> This class represents the attributes of a print job. These attributes describe how the printed content should be laid out. For example, the print attributes may state that the content should be laid out on a letter size with 300 DPI (dots per inch) resolution, have a margin of 10 mills (thousand of an inch) on all sides, and be black and white.</p><pre><code>public final class PrintAttributes\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrintAttributes.html
PrintAttributes.Margins	A										<section class="prog__container"><p> This class specifies content margins. Margins define the white space around the content where the left margin defines the amount of white space on the left of the content and so on.</p><pre><code>public static final class PrintAttributes.Margins\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrintAttributes.Margins.html
PrintAttributes.MediaSize	A										<section class="prog__container"><p> This class specifies a supported media size. Media size is the dimension of the media on which the content is printed. For example, the <pre><code> NA_LETTER </code></pre> media size designates a page with size 8.5" x 11".</p><pre><code>public static final class PrintAttributes.MediaSize\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrintAttributes.MediaSize.html
PrintAttributes.Resolution	A										<section class="prog__container"><p> This class specifies a supported resolution in DPI (dots per inch). Resolution defines how many points with different color can be placed on one inch in horizontal or vertical direction of the target media. For example, a printer with 600 DPI can produce higher quality images the one with 300 DPI resolution.</p><pre><code>public static final class PrintAttributes.Resolution\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrintAttributes.Resolution.html
PrintDocumentAdapter	A										<section class="prog__container"><p> Base class that provides the content of a document to be printed. </p><pre><code>public abstract class PrintDocumentAdapter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrintDocumentAdapter.html
PrintDocumentAdapter.LayoutResultCallback	A										<section class="prog__container"><p> Base class for implementing a callback for the result of <pre><code> onLayout(PrintAttributes, PrintAttributes, CancellationSignal, LayoutResultCallback, Bundle) </code></pre> .</p><pre><code>public static abstract class PrintDocumentAdapter.LayoutResultCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrintDocumentAdapter.LayoutResultCallback.html
PrintDocumentAdapter.WriteResultCallback	A										<section class="prog__container"><p> Base class for implementing a callback for the result of <pre><code> onWrite(PageRange[], ParcelFileDescriptor, CancellationSignal, WriteResultCallback) </code></pre> .</p><pre><code>public static abstract class PrintDocumentAdapter.WriteResultCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrintDocumentAdapter.WriteResultCallback.html
PrintDocumentInfo.Builder	A										<section class="prog__container"><p> Builder for creating a <pre><code> PrintDocumentInfo </code></pre> .</p><pre><code>public static final class PrintDocumentInfo.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrintDocumentInfo.Builder.html
PrintDocumentInfo	A										<section class="prog__container"><p> This class encapsulates information about a document for printing purposes. This meta-data is used by the platform and print services, components that interact with printers. For example, this class contains the number of pages contained in the document it describes and this number of pages is shown to the user allowing him/her to select the range to print. Also a print service may optimize the printing process based on the content type, such as document or photo. <p> Instances of this class are created by the printing application and passed to the <pre><code> PrintDocumentAdapter.LayoutResultCallback.onLayoutFinished( PrintDocumentInfo, boolean) </code></pre> callback after successfully laying out the content which is performed in <pre><code> PrintDocumentAdapter.onLayout(PrintAttributes, PrintAttributes, android.os.CancellationSignal, PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle) </code></pre> . </p><pre><code>public final class PrintDocumentInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrintDocumentInfo.html
PrinterCapabilitiesInfo.Builder	A										<section class="prog__container"><p> Builder for creating of a <pre><code> PrinterCapabilitiesInfo </code></pre> . This class is responsible to enforce that all required attributes have at least one default value. In other words, this class creates only well-formed <pre><code> PrinterCapabilitiesInfo </code></pre> s. <p> Look at the individual methods for a reference whether a property is required or if it is optional. </p><pre><code>public static final class PrinterCapabilitiesInfo.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrinterCapabilitiesInfo.Builder.html
PrinterCapabilitiesInfo	A										<section class="prog__container"><p> This class represents the capabilities of a printer. Instances of this class are created by a print service to report the capabilities of a printer it manages. The capabilities of a printer specify how it can print content. For example, what are the media sizes supported by the printer, what are the minimal margins of the printer based on its technical design, etc.</p><pre><code>public final class PrinterCapabilitiesInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrinterCapabilitiesInfo.html
PrinterId	A										<section class="prog__container"><p> This class represents the unique id of a printer.</p><pre><code>public final class PrinterId\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrinterId.html
PrinterInfo.Builder	A										<section class="prog__container"><p> Builder for creating of a <pre><code> PrinterInfo </code></pre> .</p><pre><code>public static final class PrinterInfo.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrinterInfo.Builder.html
PrinterInfo	A										<section class="prog__container"><p> This class represents the description of a printer. Instances of this class are created by print services to report to the system the printers they manage. The information of this class has two major components, printer properties such as name, id, status, description and printer capabilities which describe the various print modes a printer supports such as media sizes, margins, etc. <p> Once <pre><code> built </code></pre> the objects are immutable. </p><pre><code>public final class PrinterInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrinterInfo.html
PrintJob	A										<section class="prog__container"><p> This class represents a print job from the perspective of an application. It contains behavior methods for performing operations on it as well as methods for querying its state. A snapshot of the print job state is represented by the <pre><code> PrintJobInfo </code></pre> class. The state of a print job may change over time. An application receives instances of this class when creating a print job or querying for its print jobs.</p><pre><code>public final class PrintJob\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrintJob.html
PrintJobId	A										<section class="prog__container"><p> This class represents the id of a print job.</p><pre><code>public final class PrintJobId\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrintJobId.html
PrintJobInfo.Builder	A										<section class="prog__container"><p> Builder for creating a <pre><code> PrintJobInfo </code></pre> .</p><pre><code>public static final class PrintJobInfo.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrintJobInfo.Builder.html
PrintJobInfo	A										<section class="prog__container"><p> This class represents the description of a print job. The print job state includes properties such as its id, print attributes used for generating the content, and so on. Note that the print jobs state may change over time and this class represents a snapshot of this state.</p><pre><code>public final class PrintJobInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrintJobInfo.html
PrintManager	A										<section class="prog__container"><p> System level service for accessing the printing capabilities of the platform. <p> To obtain a handle to the print manager do the following: </p><pre><code>public final class PrintManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/print/PrintManager.html
android.print.pdf	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/print/pdf/package-summary.html
PrintedPdfDocument	A										<section class="prog__container"><p> This class is a helper for creating a PDF file for given print attributes. It is useful for implementing printing via the native Android graphics APIs. <p> This class computes the page width, page height, and content rectangle from the provided print attributes and these precomputed values can be accessed via <pre><code> getPageWidth() </code></pre> , <pre><code> getPageHeight() </code></pre> , and <pre><code> getPageContentRect() </code></pre> , respectively. The <pre><code> startPage(int) </code></pre> methods creates pages whose <pre><code> PageInfo </code></pre> is initialized with the precomputed values for width, height, and content rectangle. <p> A typical use of the APIs looks like this: </p><pre><code>public class PrintedPdfDocument\n</code></pre></section>	https://developer.android.com/reference/android/print/pdf/PrintedPdfDocument.html
CustomPrinterIconCallback	A										<section class="prog__container"><p> Callback for <pre><code> onRequestCustomPrinterIcon(PrinterId, CancellationSignal, CustomPrinterIconCallback) </code></pre> .</p><pre><code>public final class CustomPrinterIconCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/printservice/CustomPrinterIconCallback.html
android.printservice	A										<section class="prog__container">Provides classes for implementing print services. Print services are plug-in componentsthat know how to talk to printers via some standard protocols. These services serve as abridge between the system and the printers. Hence, the printer and print protocol specificimplementation is factored out of the system and can be independently developed and updated.</section>	https://developer.android.com/reference/android/printservice/package-summary.html
PrintDocument	A										<section class="prog__container"><p> This class represents a printed document from the perspective of a print service. It exposes APIs to query the document and obtain its data. <p> <strong> Note: </strong> All methods of this class must be executed on the main application thread. </p><pre><code>public final class PrintDocument\nextends Object</code></pre></section>	https://developer.android.com/reference/android/printservice/PrintDocument.html
PrinterDiscoverySession	A										<section class="prog__container"><p> This class encapsulates the interaction between a print service and the system during printer discovery. During printer discovery you are responsible for adding discovered printers, removing previously added printers that disappeared, and updating already added printers. <p> During the lifetime of this session you may be asked to start and stop performing printer discovery multiple times. You will receive a call to <pre><code> onStartPrinterDiscovery(List) </code></pre> to start printer discovery and a call to <pre><code> onStopPrinterDiscovery() </code></pre> to stop printer discovery. When the system is no longer interested in printers discovered by this session you will receive a call to <pre><code> onDestroy() </code></pre> at which point the system will no longer call into the session and all the session methods will do nothing. </p><pre><code>public abstract class PrinterDiscoverySession\nextends Object</code></pre></section>	https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html
PrintJob	A										<section class="prog__container"><p> This class represents a print job from the perspective of a print service. It provides APIs for observing the print job state and performing operations on the print job. <p> <strong> Note: </strong> All methods of this class must be invoked on the main application thread. </p><pre><code>public final class PrintJob\nextends Object</code></pre></section>	https://developer.android.com/reference/android/printservice/PrintJob.html
PrintService	A										<section class="prog__container"><p> <p> This is the base class for implementing print services. A print service knows how to discover and interact one or more printers via one or more protocols. </p><pre><code>public abstract class PrintService\n</code></pre></section>	https://developer.android.com/reference/android/printservice/PrintService.html
AlarmClock	A										<section class="prog__container"><p> The AlarmClock provider contains an Intent action and extras that can be used to start an Activity to set a new alarm or timer in an alarm clock application. Applications that wish to receive the ACTION_SET_ALARM and ACTION_SET_TIMER Intents should create an activity to handle the Intent that requires the permission com.android.alarm.permission.SET_ALARM. Applications that wish to create a new alarm or timer should use <pre><code> Context.startActivity() </code></pre> so that the user has the option of choosing which alarm clock application to use.</p><pre><code>public final class AlarmClock\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/AlarmClock.html
BaseColumns	A										<section class="prog__container"><p> The count of rows in a directory.</p><pre><code>public interface BaseColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/BaseColumns.html
BlockedNumberContract.BlockedNumbers	A										<section class="prog__container"><p> Constants to interact with the blocked numbers list.</p><pre><code>public static class BlockedNumberContract.BlockedNumbers\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/BlockedNumberContract.BlockedNumbers.html
BlockedNumberContract	A										<section class="prog__container"><p> <p> The contract between the blockednumber provider and applications. Contains definitions for the supported URIs and columns. </p><pre><code>public class BlockedNumberContract\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/BlockedNumberContract.html
Browser	A										<section class="prog__container"><p> The name of the extra data when starting the Browser from another application.</p><pre><code>public class Browser\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Browser.html
CalendarContract.Attendees	A										<section class="prog__container"><p> Fields and helpers for interacting with Attendees. Each row of this table represents a single attendee or guest of an event. Calling <pre><code> query(ContentResolver, long, String[]) </code></pre> will return a list of attendees for the event with the given eventId. Both apps and sync adapters may write to this table. There are six writable fields and all of them except <pre><code> ATTENDEE_NAME </code></pre> must be included when inserting a new attendee. They are: <ul> <li> <pre><code> EVENT_ID </code></pre> </li> <li> <pre><code> ATTENDEE_NAME </code></pre> </li> <li> <pre><code> ATTENDEE_EMAIL </code></pre> </li> <li> <pre><code> ATTENDEE_RELATIONSHIP </code></pre> </li> <li> <pre><code> ATTENDEE_TYPE </code></pre> </li> <li> <pre><code> ATTENDEE_STATUS </code></pre> </li> <li> <pre><code> ATTENDEE_IDENTITY </code></pre> </li> <li> <pre><code> ATTENDEE_ID_NAMESPACE </code></pre> </li> </ul></p><pre><code>public static final class CalendarContract.Attendees\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.Attendees.html
CalendarContract.AttendeesColumns	A										<section class="prog__container"><p> Columns from the Attendees table that other tables join into themselves.</p><pre><code>protected static interface CalendarContract.AttendeesColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.AttendeesColumns.html
CalendarContract.CalendarAlerts	A										<section class="prog__container"><p> Fields and helpers for accessing calendar alerts information. These fields are for tracking which alerts have been fired. Scheduled alarms will generate an intent using <pre><code> ACTION_EVENT_REMINDER </code></pre> . Apps that receive this action may update the <pre><code> STATE </code></pre> for the reminder when they have finished handling it. Apps that have their notifications disabled should not modify the table to ensure that they do not conflict with another app that is generating a notification. In general, apps should not need to write to this table directly except to update the state of a reminder.</p><pre><code>public static final class CalendarContract.CalendarAlerts\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.CalendarAlerts.html
CalendarContract.CalendarAlertsColumns	A										<section class="prog__container"><p> The alarm time of the event, in UTC.</p><pre><code>protected static interface CalendarContract.CalendarAlertsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.CalendarAlertsColumns.html
CalendarContract.CalendarCache	A										<section class="prog__container"><p> CalendarCache stores some settings for calendar including the current time zone for the instances. These settings are stored using a key/value scheme. A <pre><code> KEY </code></pre> must be specified when updating these values.</p><pre><code>public static final class CalendarContract.CalendarCache\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.CalendarCache.html
CalendarContract.CalendarCacheColumns	A										<section class="prog__container"><p> The key for the setting.</p><pre><code>protected static interface CalendarContract.CalendarCacheColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.CalendarCacheColumns.html
CalendarContract.CalendarColumns	A										<section class="prog__container"><p> Columns specific to the Calendars Uri that other Uris can query.</p><pre><code>protected static interface CalendarContract.CalendarColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.CalendarColumns.html
CalendarContract.CalendarEntity	A										<section class="prog__container"><p> Class that represents a Calendar Entity. There is one entry per calendar. This is a helper class to make batch operations easier.</p><pre><code>public static final class CalendarContract.CalendarEntity\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.CalendarEntity.html
CalendarContract.Calendars	A										<section class="prog__container"><p> Constants and helpers for the Calendars table, which contains details for individual calendars. </p><pre><code>public static final class CalendarContract.Calendars\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.Calendars.html
CalendarContract.CalendarSyncColumns	A										<section class="prog__container"><p> Generic columns for use by sync adapters. The specific functions of these columns are private to the sync adapter. Other clients of the API should not attempt to either read or write this column. These columns are editable as part of the Calendars Uri, but can only be read if accessed through any other Uri.</p><pre><code>protected static interface CalendarContract.CalendarSyncColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.CalendarSyncColumns.html
CalendarContract.Colors	A										<section class="prog__container"><p> Fields for accessing colors available for a given account. Colors are referenced by <pre><code> COLOR_KEY </code></pre> which must be unique for a given account name/type. These values can only be updated by the sync adapter. Only <pre><code> COLOR </code></pre> may be updated after the initial insert. In addition, a row can only be deleted once all references to that color have been removed from the <pre><code> CalendarContract.Calendars </code></pre> or <pre><code> CalendarContract.Events </code></pre> tables.</p><pre><code>public static final class CalendarContract.Colors\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.Colors.html
CalendarContract.ColorsColumns	A										<section class="prog__container"><p> The color as an 8-bit ARGB integer value.</p><pre><code>protected static interface CalendarContract.ColorsColumns\nimplements SyncStateContract.Columns</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.ColorsColumns.html
CalendarContract.EventDays	A										<section class="prog__container"><p> Fields and helpers for querying for a list of days that contain events.</p><pre><code>public static final class CalendarContract.EventDays\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.EventDays.html
CalendarContract.EventDaysColumns	A										<section class="prog__container"><p> The Julian ending day number.</p><pre><code>protected static interface CalendarContract.EventDaysColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.EventDaysColumns.html
CalendarContract.Events	A										<section class="prog__container"><p> Constants and helpers for the Events table, which contains details for individual events. </p><pre><code>public static final class CalendarContract.Events\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.Events.html
CalendarContract.EventsColumns	A										<section class="prog__container"><p> Columns from the Events table that other tables join into themselves.</p><pre><code>protected static interface CalendarContract.EventsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.EventsColumns.html
CalendarContract.EventsEntity	A										<section class="prog__container"><p> Class that represents an Event Entity. There is one entry per event. Recurring events show up as a single entry. This is a helper class to make batch operations easier. A <pre><code> ContentResolver </code></pre> or <pre><code> ContentProviderClient </code></pre> is required as the helper does additional queries to add reminders and attendees to each entry.</p><pre><code>public static final class CalendarContract.EventsEntity\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.EventsEntity.html
CalendarContract.ExtendedProperties	A										<section class="prog__container"><p> Fields for accessing the Extended Properties. This is a generic set of name/value pairs for use by sync adapters to add extra information to events. There are three writable columns and all three must be present when inserting a new value. They are: <ul> <li> <pre><code> EVENT_ID </code></pre> </li> <li> <pre><code> NAME </code></pre> </li> <li> <pre><code> VALUE </code></pre> </li> </ul></p><pre><code>public static final class CalendarContract.ExtendedProperties\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.ExtendedProperties.html
CalendarContract.ExtendedPropertiesColumns	A										<section class="prog__container"><p> The event the extended property belongs to.</p><pre><code>protected static interface CalendarContract.ExtendedPropertiesColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.ExtendedPropertiesColumns.html
CalendarContract	A										<section class="prog__container"><p> <p> The contract between the calendar provider and applications. Contains definitions for the supported URIs and data columns. </p><pre><code>public final class CalendarContract\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.html
CalendarContract.Instances	A										<section class="prog__container"><p> Fields and helpers for interacting with Instances. An instance is a single occurrence of an event including time zone specific start and end days and minutes. The instances table is not writable and only provides a way to query event occurrences.</p><pre><code>public static final class CalendarContract.Instances\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.Instances.html
CalendarContract.Reminders	A										<section class="prog__container"><p> Fields and helpers for accessing reminders for an event. Each row of this table represents a single reminder for an event. Calling <pre><code> query(ContentResolver, long, String[]) </code></pre> will return a list of reminders for the event with the given eventId. Both apps and sync adapters may write to this table. There are three writable fields and all of them must be included when inserting a new reminder. They are: <ul> <li> <pre><code> EVENT_ID </code></pre> </li> <li> <pre><code> MINUTES </code></pre> </li> <li> <pre><code> METHOD </code></pre> </li> </ul></p><pre><code>public static final class CalendarContract.Reminders\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.Reminders.html
CalendarContract.RemindersColumns	A										<section class="prog__container"><p> The event the reminder belongs to.</p><pre><code>protected static interface CalendarContract.RemindersColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.RemindersColumns.html
CalendarContract.SyncColumns	A										<section class="prog__container"><p> Columns for Sync information used by Calendars and Events tables. These have specific uses which are expected to be consistent by the app and sync adapter.</p><pre><code>protected static interface CalendarContract.SyncColumns\nimplements CalendarContract.CalendarSyncColumns</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.SyncColumns.html
CalendarContract.SyncState	A										<section class="prog__container"><p> A table provided for sync adapters to use for storing private sync state data.</p><pre><code>public static final class CalendarContract.SyncState\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.SyncState.html
CallLog.Calls	A										<section class="prog__container"><p> Contains the recent calls.</p><pre><code>public static class CallLog.Calls\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/CallLog.Calls.html
CallLog	A										<section class="prog__container"><p> The CallLog provider contains information about placed and received calls.</p><pre><code>public class CallLog\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/CallLog.html
Contacts.ContactMethods	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static final class Contacts.ContactMethods\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.ContactMethods.html
Contacts.ContactMethodsColumns	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static interface Contacts.ContactMethodsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.ContactMethodsColumns.html
Contacts.Extensions	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static final class Contacts.Extensions\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.Extensions.html
Contacts.ExtensionsColumns	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static interface Contacts.ExtensionsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.ExtensionsColumns.html
Contacts.GroupMembership	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static final class Contacts.GroupMembership\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.GroupMembership.html
Contacts.Groups	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static final class Contacts.Groups\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.Groups.html
Contacts.GroupsColumns	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static interface Contacts.GroupsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.GroupsColumns.html
Contacts	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> The APIs have been superseded by <pre><code> ContactsContract </code></pre> . The newer APIs allow access multiple accounts and support aggregation of similar contacts. These APIs continue to work but will only return data for the first Google account created, which matches the original behavior. </p><pre><code>public class Contacts\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.html
Contacts.Intents	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static final class Contacts.Intents\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.Intents.html
Contacts.Intents.Insert	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static final class Contacts.Intents.Insert\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.Intents.Insert.html
Contacts.Intents.UI	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> Do not use. This is not supported. </p><pre><code>public static final class Contacts.Intents.UI\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.Intents.UI.html
Contacts.OrganizationColumns	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static interface Contacts.OrganizationColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.OrganizationColumns.html
Contacts.Organizations	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static final class Contacts.Organizations\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.Organizations.html
Contacts.People.ContactMethods	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static final class Contacts.People.ContactMethods\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.People.ContactMethods.html
Contacts.People.Extensions	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static class Contacts.People.Extensions\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.People.Extensions.html
Contacts.People	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static final class Contacts.People\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.People.html
Contacts.People.Phones	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static final class Contacts.People.Phones\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.People.Phones.html
Contacts.PeopleColumns	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static interface Contacts.PeopleColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.PeopleColumns.html
Contacts.Phones	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static final class Contacts.Phones\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.Phones.html
Contacts.PhonesColumns	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static interface Contacts.PhonesColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.PhonesColumns.html
Contacts.Photos	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static final class Contacts.Photos\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.Photos.html
Contacts.PhotosColumns	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static interface Contacts.PhotosColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.PhotosColumns.html
Contacts.PresenceColumns	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static interface Contacts.PresenceColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.PresenceColumns.html
Contacts.Settings	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static final class Contacts.Settings\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.Settings.html
Contacts.SettingsColumns	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 5. </strong> <br/> see <pre><code> ContactsContract </code></pre> </p><pre><code>public static interface Contacts.SettingsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.SettingsColumns.html
ContactsContract.AggregationExceptions	A										<section class="prog__container"><p> <p> Constants for the contact aggregation exceptions table, which contains aggregation rules overriding those used by automatic aggregation. This type only supports query and update. Neither insert nor delete are supported. </p><pre><code>public static final class ContactsContract.AggregationExceptions\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.AggregationExceptions.html
ContactsContract.BaseSyncColumns	A										<section class="prog__container"><p> Generic columns for use by sync adapters. The specific functions of these columns are private to the sync adapter. Other clients of the API should not attempt to either read or write this column.</p><pre><code>protected static interface ContactsContract.BaseSyncColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.BaseSyncColumns.html
ContactsContract.CommonDataKinds.BaseTypes	A										<section class="prog__container"><p> The base types that all "Typed" data kinds support.</p><pre><code>public static interface ContactsContract.CommonDataKinds.BaseTypes\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.BaseTypes.html
ContactsContract.CommonDataKinds.Callable	A										<section class="prog__container"><p> <p> Convenient functionalities for "callable" data. Note that, this is NOT a separate data kind. </p><pre><code>public static final class ContactsContract.CommonDataKinds.Callable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Callable.html
ContactsContract.CommonDataKinds.CommonColumns	A										<section class="prog__container"><p> Columns common across the specific types.</p><pre><code>protected static interface ContactsContract.CommonDataKinds.CommonColumns\nimplements ContactsContract.CommonDataKinds.BaseTypes</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.CommonColumns.html
ContactsContract.CommonDataKinds.Contactables	A										<section class="prog__container"><p> A special class of data items, used to refer to types of data that can be used to attempt to start communicating with a person ( <pre><code> ContactsContract.CommonDataKinds.Phone </code></pre> and <pre><code> ContactsContract.CommonDataKinds.Email </code></pre> ). Note that this is NOT a separate data kind. This URI allows the ContactsProvider to return a unified result for data items that users can use to initiate communications with another contact. <pre><code> ContactsContract.CommonDataKinds.Phone </code></pre> and <pre><code> ContactsContract.CommonDataKinds.Email </code></pre> are the current data types in this category.</p><pre><code>public static final class ContactsContract.CommonDataKinds.Contactables\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Contactables.html
ContactsContract.CommonDataKinds.Email	A										<section class="prog__container"><p> <p> A data kind representing an email address. </p><pre><code>public static final class ContactsContract.CommonDataKinds.Email\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html
ContactsContract.CommonDataKinds.Event	A										<section class="prog__container"><p> <p> A data kind representing an event. </p><pre><code>public static final class ContactsContract.CommonDataKinds.Event\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Event.html
ContactsContract.CommonDataKinds.GroupMembership	A										<section class="prog__container"><p> <p> Group Membership. </p><pre><code>public static final class ContactsContract.CommonDataKinds.GroupMembership\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.GroupMembership.html
ContactsContract.CommonDataKinds	A										<section class="prog__container"><p> Container for definitions of common data types stored in the <pre><code> ContactsContract.Data </code></pre> table.</p><pre><code>public static final class ContactsContract.CommonDataKinds\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.html
ContactsContract.CommonDataKinds.Identity	A										<section class="prog__container"><p> A data kind representing an Identity related to the contact. <p> This can be used as a signal by the aggregator to combine raw contacts into contacts, e.g. if two contacts have Identity rows with the same NAMESPACE and IDENTITY values the aggregator can know that they refer to the same person. </p><pre><code>public static final class ContactsContract.CommonDataKinds.Identity\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Identity.html
ContactsContract.CommonDataKinds.Im	A										<section class="prog__container"><p> <p> A data kind representing an IM address </p><pre><code>public static final class ContactsContract.CommonDataKinds.Im\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html
ContactsContract.CommonDataKinds.Nickname	A										<section class="prog__container"><p> <p> A data kind representing the contact's nickname. For example, for Bob Parr ("Mr. Incredible"): <pre> ArrayList&lt;ContentProviderOperation&gt; ops = new ArrayList&lt;ContentProviderOperation&gt;(); ops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI) .withValue(Data.RAW_CONTACT_ID, rawContactId) .withValue(Data.MIMETYPE, StructuredName.CONTENT_ITEM_TYPE) .withValue(StructuredName.DISPLAY_NAME, "Bob Parr") .build()); ops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI) .withValue(Data.RAW_CONTACT_ID, rawContactId) .withValue(Data.MIMETYPE, Nickname.CONTENT_ITEM_TYPE) .withValue(Nickname.NAME, "Mr. Incredible") .withValue(Nickname.TYPE, Nickname.TYPE_CUSTOM) .withValue(Nickname.LABEL, "Superhero") .build()); getContentResolver().applyBatch(ContactsContract.AUTHORITY, ops); </pre> </p><pre><code>public static final class ContactsContract.CommonDataKinds.Nickname\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Nickname.html
ContactsContract.CommonDataKinds.Note	A										<section class="prog__container"><p> <p> Notes about the contact. </p><pre><code>public static final class ContactsContract.CommonDataKinds.Note\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Note.html
ContactsContract.CommonDataKinds.Organization	A										<section class="prog__container"><p> <p> A data kind representing an organization. </p><pre><code>public static final class ContactsContract.CommonDataKinds.Organization\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html
ContactsContract.CommonDataKinds.Phone	A										<section class="prog__container"><p> <p> A data kind representing a telephone number. </p><pre><code>public static final class ContactsContract.CommonDataKinds.Phone\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html
ContactsContract.CommonDataKinds.Photo	A										<section class="prog__container"><p> <p> A data kind representing a photo for the contact. </p><pre><code>public static final class ContactsContract.CommonDataKinds.Photo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Photo.html
ContactsContract.CommonDataKinds.Relation	A										<section class="prog__container"><p> <p> A data kind representing a relation. </p><pre><code>public static final class ContactsContract.CommonDataKinds.Relation\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html
ContactsContract.CommonDataKinds.SipAddress	A										<section class="prog__container"><p> <p> A data kind representing a SIP address for the contact. </p><pre><code>public static final class ContactsContract.CommonDataKinds.SipAddress\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.SipAddress.html
ContactsContract.CommonDataKinds.StructuredName	A										<section class="prog__container"><p> A data kind representing the contact's proper name. You can use all columns defined for <pre><code> ContactsContract.Data </code></pre> as well as the following aliases. </p><pre><code>public static final class ContactsContract.CommonDataKinds.StructuredName\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html
ContactsContract.CommonDataKinds.StructuredPostal	A										<section class="prog__container"><p> <p> A data kind representing a postal addresses. </p><pre><code>public static final class ContactsContract.CommonDataKinds.StructuredPostal\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html
ContactsContract.CommonDataKinds.Website	A										<section class="prog__container"><p> <p> A data kind representing a website related to the contact. </p><pre><code>public static final class ContactsContract.CommonDataKinds.Website\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Website.html
ContactsContract.ContactNameColumns	A										<section class="prog__container"><p> Contact name and contact name metadata columns in the RawContacts table.</p><pre><code>protected static interface ContactsContract.ContactNameColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.ContactNameColumns.html
ContactsContract.ContactOptionsColumns	A										<section class="prog__container"><p> Columns of <pre><code> ContactsContract.Contacts </code></pre> that track the user's preferences for, or interactions with, the contact.</p><pre><code>protected static interface ContactsContract.ContactOptionsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.ContactOptionsColumns.html
ContactsContract.Contacts.AggregationSuggestions.Builder	A										<section class="prog__container"><p> A convenience builder for aggregation suggestion content URIs.</p><pre><code>public static final class ContactsContract.Contacts.AggregationSuggestions.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Contacts.AggregationSuggestions.Builder.html
ContactsContract.Contacts.AggregationSuggestions	A										<section class="prog__container"><p> <p> A <i> read-only </i> sub-directory of a single contact aggregate that contains all aggregation suggestions (other contacts). The aggregation suggestions are computed based on approximate data matches with this contact. </p><pre><code>public static final class ContactsContract.Contacts.AggregationSuggestions\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Contacts.AggregationSuggestions.html
ContactsContract.Contacts.Data	A										<section class="prog__container"><p> A sub-directory of a single contact that contains all of the constituent raw contact <pre><code> ContactsContract.Data </code></pre> rows. This directory can be used either with a <pre><code> CONTENT_URI </code></pre> or <pre><code> CONTENT_LOOKUP_URI </code></pre> .</p><pre><code>public static final class ContactsContract.Contacts.Data\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Data.html
ContactsContract.Contacts.Entity	A										<section class="prog__container"><p> <p> A sub-directory of a contact that contains all of its <pre><code> ContactsContract.RawContacts </code></pre> as well as <pre><code> ContactsContract.Data </code></pre> rows. To access this directory append <pre><code> CONTENT_DIRECTORY </code></pre> to the contact URI. </p><pre><code>public static final class ContactsContract.Contacts.Entity\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Entity.html
ContactsContract.Contacts	A										<section class="prog__container"><p> Constants for the contacts table, which contains a record per aggregate of raw contacts representing the same person. </p><pre><code>public static class ContactsContract.Contacts\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html
ContactsContract.Contacts.Photo	A										<section class="prog__container"><p> A <i> read-only </i> sub-directory of a single contact that contains the contact's primary photo. The photo may be stored in up to two ways - the default "photo" is a thumbnail-sized image stored directly in the data row, while the "display photo", if present, is a larger version stored as a file. <p> Usage example: <dl> <dt> Retrieving the thumbnail-sized photo </dt> <dd> <pre> public InputStream openPhoto(long contactId) { Uri contactUri = ContentUris.withAppendedId(Contacts.CONTENT_URI, contactId); Uri photoUri = Uri.withAppendedPath(contactUri, Contacts.Photo.CONTENT_DIRECTORY); Cursor cursor = getContentResolver().query(photoUri, new String[] {Contacts.Photo.PHOTO}, null, null, null); if (cursor == null) { return null; } try { if (cursor.moveToFirst()) { byte[] data = cursor.getBlob(0); if (data != null) { return new ByteArrayInputStream(data); } } } finally { cursor.close(); } return null; } </pre> </dd> <dt> Retrieving the larger photo version </dt> <dd> <pre> public InputStream openDisplayPhoto(long contactId) { Uri contactUri = ContentUris.withAppendedId(Contacts.CONTENT_URI, contactId); Uri displayPhotoUri = Uri.withAppendedPath(contactUri, Contacts.Photo.DISPLAY_PHOTO); try { AssetFileDescriptor fd = getContentResolver().openAssetFileDescriptor(displayPhotoUri, "r"); return fd.createInputStream(); } catch (IOException e) { return null; } } </pre> </dd> </dl> </p><pre><code>public static final class ContactsContract.Contacts.Photo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Photo.html
ContactsContract.ContactsColumns	A										<section class="prog__container"><p> Columns of <pre><code> ContactsContract.Contacts </code></pre> that refer to intrinsic properties of the contact, as opposed to the user-specified options found in <pre><code> ContactsContract.ContactOptionsColumns </code></pre> .</p><pre><code>protected static interface ContactsContract.ContactsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.ContactsColumns.html
ContactsContract.ContactStatusColumns	A										<section class="prog__container"><p> <b> See also: </b></p><pre><code>protected static interface ContactsContract.ContactStatusColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.ContactStatusColumns.html
ContactsContract.Data	A										<section class="prog__container"><p> <p> Constants for the data table, which contains data points tied to a raw contact. Each row of the data table is typically used to store a single piece of contact information (such as a phone number) and its associated metadata (such as whether it is a work or home number). </p><pre><code>public static final class ContactsContract.Data\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Data.html
ContactsContract.DataColumns	A										<section class="prog__container"><p> Columns in the Data table.</p><pre><code>protected static interface ContactsContract.DataColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.DataColumns.html
ContactsContract.DataColumnsWithJoins	A										<section class="prog__container"><p> Combines all columns returned by <pre><code> ContactsContract.Data </code></pre> table queries.</p><pre><code>protected static interface ContactsContract.DataColumnsWithJoins\nimplements BaseColumns, ContactsContract.DataColumns, ContactsContract.StatusColumns, ContactsContract.RawContactsColumns, ContactsContract.ContactsColumns, ContactsContract.ContactNameColumns, ContactsContract.ContactOptionsColumns, ContactsContract.ContactStatusColumns, ContactsContract.DataUsageStatColumns</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.DataColumnsWithJoins.html
ContactsContract.DataUsageFeedback	A										<section class="prog__container"><p> <p> API allowing applications to send usage information for each <pre><code> ContactsContract.Contacts.Data </code></pre> row to the Contacts Provider. Applications can also clear all usage information. </p><pre><code>public static final class ContactsContract.DataUsageFeedback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.DataUsageFeedback.html
ContactsContract.DataUsageStatColumns	A										<section class="prog__container"><p> Columns in the Data_Usage_Stat table</p><pre><code>protected static interface ContactsContract.DataUsageStatColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.DataUsageStatColumns.html
ContactsContract.DeletedContacts	A										<section class="prog__container"><p> Constants for the deleted contact table. This table holds a log of deleted contacts. <p> Log older than <pre><code> DAYS_KEPT_MILLISECONDS </code></pre> may be deleted. </p><pre><code>public static final class ContactsContract.DeletedContacts\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.DeletedContacts.html
ContactsContract.DeletedContactsColumns	A										<section class="prog__container"><p> Time (milliseconds since epoch) that the contact was deleted.</p><pre><code>protected static interface ContactsContract.DeletedContactsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.DeletedContactsColumns.html
ContactsContract.Directory	A										<section class="prog__container"><p> A Directory represents a contacts corpus, e.g. Local contacts, Google Apps Global Address List or Corporate Global Address List. <p> A Directory is implemented as a content provider with its unique authority and the same API as the main Contacts Provider. However, there is no expectation that every directory provider will implement this Contract in its entirety. If a directory provider does not have an implementation for a specific request, it should throw an UnsupportedOperationException. </p><pre><code>public static final class ContactsContract.Directory\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Directory.html
ContactsContract.DisplayNameSources	A										<section class="prog__container"><p> Types of data used to produce the display name for a contact. In the order of increasing priority: <pre><code> EMAIL </code></pre> , <pre><code> PHONE </code></pre> , <pre><code> ORGANIZATION </code></pre> , <pre><code> NICKNAME </code></pre> , <pre><code> STRUCTURED_PHONETIC_NAME </code></pre> , <pre><code> STRUCTURED_NAME </code></pre> .</p><pre><code>public static interface ContactsContract.DisplayNameSources\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.DisplayNameSources.html
ContactsContract.DisplayPhoto	A										<section class="prog__container"><p> Helper class for accessing full-size photos by photo file ID. <p> Usage example: <dl> <dt> Retrieving a full-size photo by photo file ID (see <pre><code> PHOTO_FILE_ID </code></pre> ) </dt> <dd> <pre> public InputStream openDisplayPhoto(long photoFileId) { Uri displayPhotoUri = ContentUris.withAppendedId(DisplayPhoto.CONTENT_URI, photoKey); try { AssetFileDescriptor fd = getContentResolver().openAssetFileDescriptor( displayPhotoUri, "r"); return fd.createInputStream(); } catch (IOException e) { return null; } } </pre> </dd> </dl> </p><pre><code>public static final class ContactsContract.DisplayPhoto\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.DisplayPhoto.html
ContactsContract.FullNameStyle	A										<section class="prog__container"><p> Constants for various styles of combining given name, family name etc into a full name. For example, the western tradition follows the pattern 'given name' 'middle name' 'family name' with the alternative pattern being 'family name', 'given name' 'middle name'. The CJK tradition is 'family name' 'middle name' 'given name', with Japanese favoring a space between the names and Chinese omitting the space.</p><pre><code>public static interface ContactsContract.FullNameStyle\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.FullNameStyle.html
ContactsContract.Groups	A										<section class="prog__container"><p> Constants for the groups table. Only per-account groups are supported. </p><pre><code>public static final class ContactsContract.Groups\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Groups.html
ContactsContract.GroupsColumns	A										<section class="prog__container"><p> <b> See also: </b></p><pre><code>protected static interface ContactsContract.GroupsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.GroupsColumns.html
ContactsContract	A										<section class="prog__container"><p> <p> The contract between the contacts provider and applications. Contains definitions for the supported URIs and columns. These APIs supersede <pre><code> ContactsContract.Contacts </code></pre> . </p><pre><code>public final class ContactsContract\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.html
ContactsContract.Intents	A										<section class="prog__container"><p> Contains helper classes used to create or manage <pre><code> Intents </code></pre> that involve contacts.</p><pre><code>public static final class ContactsContract.Intents\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Intents.html
ContactsContract.Intents.Insert	A										<section class="prog__container"><p> Convenience class that contains string constants used to create contact <pre><code> Intents </code></pre> .</p><pre><code>public static final class ContactsContract.Intents.Insert\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html
ContactsContract.PhoneLookup	A										<section class="prog__container"><p> A table that represents the result of looking up a phone number, for example for caller ID. To perform a lookup you must append the number you want to find to <pre><code> CONTENT_FILTER_URI </code></pre> . This query is highly optimized. <pre> Uri uri = Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI, Uri.encode(phoneNumber)); resolver.query(uri, new String[]{PhoneLookup.DISPLAY_NAME,... </pre> </p><pre><code>public static final class ContactsContract.PhoneLookup\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.PhoneLookup.html
ContactsContract.PhoneLookupColumns	A										<section class="prog__container"><p> <b> See also: </b></p><pre><code>protected static interface ContactsContract.PhoneLookupColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.PhoneLookupColumns.html
ContactsContract.PhoneticNameStyle	A										<section class="prog__container"><p> Constants for various styles of capturing the pronunciation of a person's name.</p><pre><code>public static interface ContactsContract.PhoneticNameStyle\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.PhoneticNameStyle.html
ContactsContract.PinnedPositions	A										<section class="prog__container"><p> <p> Contact-specific information about whether or not a contact has been pinned by the user at a particular position within the system contact application's user interface. </p><pre><code>public static final class ContactsContract.PinnedPositions\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.PinnedPositions.html
ContactsContract.Presence	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> This old name was never meant to be made public. Do not use. </p><pre><code>public static final class ContactsContract.Presence\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Presence.html
ContactsContract.PresenceColumns	A										<section class="prog__container"><p> Additional data mixed in with <pre><code> ContactsContract.StatusColumns </code></pre> to link back to specific <pre><code> _ID </code></pre> entries.</p><pre><code>protected static interface ContactsContract.PresenceColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.PresenceColumns.html
ContactsContract.Profile	A										<section class="prog__container"><p> <p> Constants for the user's profile data, which is represented as a single contact on the device that represents the user. The profile contact is not aggregated together automatically in the same way that normal contacts are; instead, each account (including data set, if applicable) on the device may contribute a single raw contact representing the user's personal profile data from that source. </p><pre><code>public static final class ContactsContract.Profile\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Profile.html
ContactsContract.ProfileSyncState	A										<section class="prog__container"><p> A table provided for sync adapters to use for storing private sync state data for the user's personal profile.</p><pre><code>public static final class ContactsContract.ProfileSyncState\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.ProfileSyncState.html
ContactsContract.ProviderStatus	A										<section class="prog__container"><p> API for inquiring about the general status of the provider.</p><pre><code>public static final class ContactsContract.ProviderStatus\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.ProviderStatus.html
ContactsContract.QuickContact	A										<section class="prog__container"><p> Helper methods to display QuickContact dialogs that display all the information belonging to a specific <pre><code> Contacts </code></pre> entry.</p><pre><code>public static final class ContactsContract.QuickContact\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.QuickContact.html
ContactsContract.RawContacts.Data	A										<section class="prog__container"><p> A sub-directory of a single raw contact that contains all of its <pre><code> ContactsContract.Data </code></pre> rows. To access this directory append <pre><code> CONTENT_DIRECTORY </code></pre> to the raw contact URI.</p><pre><code>public static final class ContactsContract.RawContacts.Data\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.Data.html
ContactsContract.RawContacts.DisplayPhoto	A										<section class="prog__container"><p> <p> A sub-directory of a single raw contact that represents its primary display photo. To access this directory append <pre><code> CONTENT_DIRECTORY </code></pre> to the raw contact URI. The resulting URI represents an image file, and should be interacted with using ContentResolver.openAssetFileDescriptor. <p> <p> Note that this sub-directory also supports opening the photo as an asset file in write mode. Callers can create or replace the primary photo associated with this raw contact by opening the asset file and writing the full-size photo contents into it. When the file is closed, the image will be parsed, sized down if necessary for the full-size display photo and thumbnail dimensions, and stored. </p><pre><code>public static final class ContactsContract.RawContacts.DisplayPhoto\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.DisplayPhoto.html
ContactsContract.RawContacts.Entity	A										<section class="prog__container"><p> <p> A sub-directory of a single raw contact that contains all of its <pre><code> ContactsContract.Data </code></pre> rows. To access this directory append <pre><code> CONTENT_DIRECTORY </code></pre> to the raw contact URI. See <pre><code> ContactsContract.RawContactsEntity </code></pre> for a stand-alone table containing the same data. </p><pre><code>public static final class ContactsContract.RawContacts.Entity\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.Entity.html
ContactsContract.RawContacts	A										<section class="prog__container"><p> Constants for the raw contacts table, which contains one row of contact information for each person in each synced account. Sync adapters and contact management apps are the primary consumers of this API. </p><pre><code>public static final class ContactsContract.RawContacts\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.html
ContactsContract.RawContactsColumns	A										<section class="prog__container"><p> A concatenation of the account type and data set (delimited by a forward slash) - if the data set is empty, this will be the same as the account type.</p><pre><code>protected static interface ContactsContract.RawContactsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.RawContactsColumns.html
ContactsContract.RawContactsEntity	A										<section class="prog__container"><p> <p> Constants for the raw contacts entities table, which can be thought of as an outer join of the raw_contacts table with the data table. It is a strictly read-only table. </p><pre><code>public static final class ContactsContract.RawContactsEntity\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.RawContactsEntity.html
ContactsContract.SearchSnippets	A										<section class="prog__container"><p> Additional column returned by <pre><code> Contacts.CONTENT_FILTER_URI </code></pre> explaining why the filter matched the contact. This column will contain extracts from the contact's constituent <pre><code> Data </code></pre> items, formatted in a way that indicates the section of the snippet that matched the filter. <p> The following example searches for all contacts that match the query "presi" and requests the snippet column as well. <pre> Builder builder = Contacts.CONTENT_FILTER_URI.buildUpon(); builder.appendPath("presi"); // Defer snippeting to the client side if possible, for performance reasons. builder.appendQueryParameter(SearchSnippets.DEFERRED_SNIPPETING_KEY,"1"); Cursor cursor = getContentResolver().query(builder.build()); Bundle extras = cursor.getExtras(); if (extras.getBoolean(ContactsContract.DEFERRED_SNIPPETING)) { // Do our own snippet formatting. // For a contact with the email address (president@organization.com), the snippet // column will contain the string "president@organization.com". } else { // The snippet has already been pre-formatted, we can display it as is. // For a contact with the email address (president@organization.com), the snippet // column will contain the string "[presi]dent@organization.com". } </pre> </p><pre><code>public static class ContactsContract.SearchSnippets\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.SearchSnippets.html
ContactsContract.Settings	A										<section class="prog__container"><p> <p> Contacts-specific settings for various <pre><code> Account </code></pre> 's. </p><pre><code>public static final class ContactsContract.Settings\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Settings.html
ContactsContract.SettingsColumns	A										<section class="prog__container"><p> <b> See also: </b></p><pre><code>protected static interface ContactsContract.SettingsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.SettingsColumns.html
ContactsContract.StatusColumns	A										<section class="prog__container"><p> Social status update columns.</p><pre><code>protected static interface ContactsContract.StatusColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.StatusColumns.html
ContactsContract.StatusUpdates	A										<section class="prog__container"><p> <p> A status update is linked to a <pre><code> ContactsContract.Data </code></pre> row and captures the user's latest status update via the corresponding source, e.g. "Having lunch" via "Google Talk". </p><pre><code>public static class ContactsContract.StatusUpdates\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.StatusUpdates.html
ContactsContract.SyncColumns	A										<section class="prog__container"><p> Columns that appear when each row of a table belongs to a specific account, including sync information that an account may need.</p><pre><code>protected static interface ContactsContract.SyncColumns\nimplements ContactsContract.BaseSyncColumns</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.SyncColumns.html
ContactsContract.SyncState	A										<section class="prog__container"><p> A table provided for sync adapters to use for storing private sync state data for contacts.</p><pre><code>public static final class ContactsContract.SyncState\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.SyncState.html
DocumentsContract.Document	A										<section class="prog__container"><p> Constants related to a document, including <pre><code> Cursor </code></pre> column names and flags. <p> A document can be either an openable stream (with a specific MIME type), or a directory containing additional documents (with the <pre><code> MIME_TYPE_DIR </code></pre> MIME type). A directory represents the top of a subtree containing zero or more documents, which can recursively contain even more documents and directories. <p> All columns are <em> read-only </em> to client applications. </p><pre><code>public static final class DocumentsContract.Document\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/DocumentsContract.Document.html
DocumentsContract	A										<section class="prog__container"><p> Defines the contract between a documents provider and the platform. <p> To create a document provider, extend <pre><code> DocumentsProvider </code></pre> , which provides a foundational implementation of this contract. <p> All client apps must hold a valid URI permission grant to access documents, typically issued when a user makes a selection through <pre><code> ACTION_OPEN_DOCUMENT </code></pre> , <pre><code> ACTION_CREATE_DOCUMENT </code></pre> , <pre><code> ACTION_OPEN_DOCUMENT_TREE </code></pre> , or <pre><code> StorageVolume.createAccessIntent </code></pre> . </p><pre><code>public final class DocumentsContract\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/DocumentsContract.html
DocumentsContract.Root	A										<section class="prog__container"><p> Constants related to a root of documents, including <pre><code> Cursor </code></pre> column names and flags. A root is the start of a tree of documents, such as a physical storage device, or an account. Each root starts at the directory referenced by <pre><code> COLUMN_DOCUMENT_ID </code></pre> , which can recursively contain both documents and directories. <p> All columns are <em> read-only </em> to client applications. </p><pre><code>public static final class DocumentsContract.Root\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/DocumentsContract.Root.html
DocumentsProvider	A										<section class="prog__container"><p> Base class for a document provider. A document provider offers read and write access to durable files, such as files stored on a local disk, or files in a cloud storage service. To create a document provider, extend this class, implement the abstract methods, and add it to your manifest like this: <pre class="prettyprint">&lt;manifest&gt; ... &lt;application&gt; ... &lt;provider android:name="com.example.MyCloudProvider" android:authorities="com.example.mycloudprovider" android:exported="true" android:grantUriPermissions="true" android:permission="android.permission.MANAGE_DOCUMENTS" android:enabled="@bool/isAtLeastKitKat"&gt; &lt;intent-filter&gt; &lt;action android:name="android.content.action.DOCUMENTS_PROVIDER" /&gt; &lt;/intent-filter&gt; &lt;/provider&gt; ... &lt;/application&gt;&lt;/manifest&gt;</pre> <p> When defining your provider, you must protect it with <pre><code> MANAGE_DOCUMENTS </code></pre> , which is a permission only the system can obtain. Applications cannot use a documents provider directly; they must go through <pre><code> ACTION_OPEN_DOCUMENT </code></pre> or <pre><code> ACTION_CREATE_DOCUMENT </code></pre> which requires a user to actively navigate and select documents. When a user selects documents through that UI, the system issues narrow URI permission grants to the requesting application. </p><pre><code>public abstract class DocumentsProvider\n</code></pre></section>	https://developer.android.com/reference/android/provider/DocumentsProvider.html
LiveFolders	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 14. </strong> <br/> Live folders are no longer supported by Android. These have been replaced by the new AppWidget Collection APIs introduced in <pre><code> HONEYCOMB </code></pre> . These provide all of the features of live folders plus many more. The use of live folders is greatly discouraged because of security issues they introduce -- publishing a live folder requires making all data show for the live folder available to all applications with no permissions protecting it. </p><pre><code>public final class LiveFolders\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/LiveFolders.html
MediaStore.Audio.AlbumColumns	A										<section class="prog__container"><p> Columns representing an album</p><pre><code>public static interface MediaStore.Audio.AlbumColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.AlbumColumns.html
MediaStore.Audio.Albums	A										<section class="prog__container"><p> Contains artists for audio files</p><pre><code>public static final class MediaStore.Audio.Albums\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.Albums.html
MediaStore.Audio.ArtistColumns	A										<section class="prog__container"><p> Columns representing an artist</p><pre><code>public static interface MediaStore.Audio.ArtistColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.ArtistColumns.html
MediaStore.Audio.Artists.Albums	A										<section class="prog__container"><p> Sub-directory of each artist containing all albums on which a song by the artist appears.</p><pre><code>public static final class MediaStore.Audio.Artists.Albums\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.Artists.Albums.html
MediaStore.Audio.Artists	A										<section class="prog__container"><p> Contains artists for audio files</p><pre><code>public static final class MediaStore.Audio.Artists\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.Artists.html
MediaStore.Audio.AudioColumns	A										<section class="prog__container"><p> Columns for audio file that show up in multiple tables.</p><pre><code>public static interface MediaStore.Audio.AudioColumns\nimplements MediaStore.MediaColumns</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html
MediaStore.Audio.Genres	A										<section class="prog__container"><p> Contains all genres for audio files</p><pre><code>public static final class MediaStore.Audio.Genres\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.Genres.html
MediaStore.Audio.Genres.Members	A										<section class="prog__container"><p> Sub-directory of each genre containing all members.</p><pre><code>public static final class MediaStore.Audio.Genres.Members\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.Genres.Members.html
MediaStore.Audio.GenresColumns	A										<section class="prog__container"><p> Columns representing an audio genre</p><pre><code>public static interface MediaStore.Audio.GenresColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.GenresColumns.html
MediaStore.Audio	A										<section class="prog__container"><p> Container for all audio content.</p><pre><code>public static final class MediaStore.Audio\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.html
MediaStore.Audio.Media	A										<section class="prog__container"><p> The MIME type for this table.</p><pre><code>public static final class MediaStore.Audio.Media\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.Media.html
MediaStore.Audio.Playlists	A										<section class="prog__container"><p> Contains playlists for audio files</p><pre><code>public static final class MediaStore.Audio.Playlists\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.Playlists.html
MediaStore.Audio.Playlists.Members	A										<section class="prog__container"><p> Sub-directory of each playlist containing all members.</p><pre><code>public static final class MediaStore.Audio.Playlists.Members\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.Playlists.Members.html
MediaStore.Audio.PlaylistsColumns	A										<section class="prog__container"><p> Columns representing a playlist</p><pre><code>public static interface MediaStore.Audio.PlaylistsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.PlaylistsColumns.html
MediaStore.Audio.Radio	A										<section class="prog__container"><p> The MIME type for entries in this table.</p><pre><code>public static final class MediaStore.Audio.Radio\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.Radio.html
MediaStore.Files.FileColumns	A										<section class="prog__container"><p> Fields for master table for all media files. Table also contains MediaColumns._ID, DATA, SIZE and DATE_MODIFIED.</p><pre><code>public static interface MediaStore.Files.FileColumns\nimplements MediaStore.MediaColumns</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Files.FileColumns.html
MediaStore.Files	A										<section class="prog__container"><p> Media provider table containing an index of all files in the media storage, including non-media files. This should be used by applications that work with non-media file types (text, HTML, PDF, etc) as well as applications that need to work with multiple media file types in a single query.</p><pre><code>public static final class MediaStore.Files\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Files.html
MediaStore	A										<section class="prog__container"><p> The Media provider contains meta data for all available media on both internal and external storage devices.</p><pre><code>public final class MediaStore\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.html
MediaStore.Images	A										<section class="prog__container"><p> Contains meta data for all available images.</p><pre><code>public static final class MediaStore.Images\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Images.html
MediaStore.Images.ImageColumns	A										<section class="prog__container"><p> The bucket display name of the image.</p><pre><code>public static interface MediaStore.Images.ImageColumns\nimplements MediaStore.MediaColumns</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Images.ImageColumns.html
MediaStore.Images.Media	A										<section class="prog__container"><p> The MIME type of of this directory of images.</p><pre><code>public static final class MediaStore.Images.Media\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Images.Media.html
MediaStore.Images.Thumbnails	A										<section class="prog__container"><p> This class allows developers to query and get two kinds of thumbnails: MINI_KIND: 512 x 384 thumbnail MICRO_KIND: 96 x 96 thumbnail</p><pre><code>public static class MediaStore.Images.Thumbnails\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html
MediaStore.MediaColumns	A										<section class="prog__container"><p> Common fields for most MediaProvider tables</p><pre><code>public static interface MediaStore.MediaColumns\nimplements BaseColumns</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html
MediaStore.Video	A										<section class="prog__container"><pre><code>public static final class MediaStore.Video\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Video.html
MediaStore.Video.Media	A										<section class="prog__container"><p> The MIME type for this table.</p><pre><code>public static final class MediaStore.Video.Media\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Video.Media.html
MediaStore.Video.Thumbnails	A										<section class="prog__container"><p> This class allows developers to query and get two kinds of thumbnails: MINI_KIND: 512 x 384 thumbnail MICRO_KIND: 96 x 96 thumbnail</p><pre><code>public static class MediaStore.Video.Thumbnails\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Video.Thumbnails.html
MediaStore.Video.VideoColumns	A										<section class="prog__container"><p> The album the video file is from, if any <p> Type: TEXT </p><pre><code>public static interface MediaStore.Video.VideoColumns\nimplements MediaStore.MediaColumns</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Video.VideoColumns.html
OpenableColumns	A										<section class="prog__container"><p> These are standard columns for openable URIs. Providers that serve openable URIs <em> must </em> support at least these columns when queried. <p> To find the content type of a URI, use <pre><code> getType(android.net.Uri) </code></pre> . </p><pre><code>public interface OpenableColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/OpenableColumns.html
android.provider	A										<section class="prog__container">Provides convenience classes to access the content providers supplied byAndroid.</section>	https://developer.android.com/reference/android/provider/package-summary.html
SearchRecentSuggestions	A										<section class="prog__container"><p> This is a utility class providing access to <pre><code> SearchRecentSuggestionsProvider </code></pre> . <p> Unlike some utility classes, this one must be instantiated and properly initialized, so that it can be configured to operate with the search suggestions provider that you have created. <p> Typically, you will do this in your searchable activity, each time you receive an incoming <pre><code> ACTION_SEARCH </code></pre> Intent. The code to record each incoming query is as follows: <pre class="prettyprint"> SearchSuggestions suggestions = new SearchSuggestions(this, MySuggestionsProvider.AUTHORITY, MySuggestionsProvider.MODE); suggestions.saveRecentQuery(queryString, null); </pre> <p> For a working example, see SearchSuggestionSampleProvider and SearchQueryResults in samples/ApiDemos/app. </p><pre><code>public class SearchRecentSuggestions\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/SearchRecentSuggestions.html
Settings.Global	A										<section class="prog__container"><p> Global system settings, containing preferences that always apply identically to all defined users. Applications can read these but are not allowed to write; like the "Secure" settings, these are for preferences that the user must explicitly modify through the system UI or specialized APIs for those values.</p><pre><code>public static final class Settings.Global\n</code></pre></section>	https://developer.android.com/reference/android/provider/Settings.Global.html
Settings	A										<section class="prog__container"><p> The Settings provider contains global system-level device preferences.</p><pre><code>public final class Settings\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Settings.html
Settings.NameValueTable	A										<section class="prog__container"><p> Common base for tables of name/value settings.</p><pre><code>public static class Settings.NameValueTable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Settings.NameValueTable.html
Settings.Secure	A										<section class="prog__container"><p> Secure system settings, containing system preferences that applications can read but are not allowed to write. These are for preferences that the user must explicitly modify through the system UI or specialized APIs for those values, not modified directly by applications.</p><pre><code>public static final class Settings.Secure\n</code></pre></section>	https://developer.android.com/reference/android/provider/Settings.Secure.html
Settings.SettingNotFoundException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p><pre><code>public static class Settings.SettingNotFoundException\n</code></pre></section>	https://developer.android.com/reference/android/provider/Settings.SettingNotFoundException.html
Settings.System	A										<section class="prog__container"><p> System settings, containing miscellaneous system preferences. This table holds simple name/value pairs. There are convenience functions for accessing individual settings entries.</p><pre><code>public static final class Settings.System\n</code></pre></section>	https://developer.android.com/reference/android/provider/Settings.System.html
SyncStateContract.Columns	A										<section class="prog__container"><p> A reference to the name of the account to which this data belongs <p> Type: STRING </p><pre><code>public static interface SyncStateContract.Columns\nimplements BaseColumns</code></pre></section>	https://developer.android.com/reference/android/provider/SyncStateContract.Columns.html
SyncStateContract.Constants	A										<section class="prog__container"><pre><code>public static class SyncStateContract.Constants\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/SyncStateContract.Constants.html
SyncStateContract.Helpers	A										<section class="prog__container"><p> Get the sync state that is associated with the account or null.</p><pre><code>public static final class SyncStateContract.Helpers\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/SyncStateContract.Helpers.html
SyncStateContract	A										<section class="prog__container"><p> The ContentProvider contract for associating data with ana data array account. This may be used by providers that want to store this data in a standard way.</p><pre><code>public class SyncStateContract\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/SyncStateContract.html
Telephony.BaseMmsColumns	A										<section class="prog__container"><p> Base columns for tables that contain MMSs.</p><pre><code>public static interface Telephony.BaseMmsColumns\nimplements BaseColumns</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.BaseMmsColumns.html
Telephony.CanonicalAddressesColumns	A										<section class="prog__container"><p> Columns for the "canonical_addresses" table used by MMS and SMS.</p><pre><code>public static interface Telephony.CanonicalAddressesColumns\nimplements BaseColumns</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.CanonicalAddressesColumns.html
Telephony.Carriers	A										<section class="prog__container"><p> Carriers class contains information about APNs, including MMSC information.</p><pre><code>public static final class Telephony.Carriers\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Carriers.html
Telephony	A										<section class="prog__container"><p> The Telephony provider contains data related to phone operation, specifically SMS and MMS messages and access to the APN list, including the MMSC to use. <p class="note"> <strong> Note: </strong> These APIs are not available on all Android-powered devices. If your app depends on telephony features such as for managing SMS messages, include a <pre><code> &lt;uses-feature&gt; </code></pre> element in your manifest that declares the <pre><code> "android.hardware.telephony" </code></pre> hardware feature. Alternatively, you can check for telephony availability at runtime using either <pre><code> hasSystemFeature(PackageManager.FEATURE_TELEPHONY) </code></pre> or <pre><code> getPhoneType() </code></pre> . </p><pre><code>public final class Telephony\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.html
Telephony.Mms.Addr	A										<section class="prog__container"><p> Contains address information for an MMS message.</p><pre><code>public static final class Telephony.Mms.Addr\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Mms.Addr.html
Telephony.Mms.Draft	A										<section class="prog__container"><p> Contains all MMS messages in the MMS app drafts folder.</p><pre><code>public static final class Telephony.Mms.Draft\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Mms.Draft.html
Telephony.Mms	A										<section class="prog__container"><p> Contains all MMS messages.</p><pre><code>public static final class Telephony.Mms\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Mms.html
Telephony.Mms.Inbox	A										<section class="prog__container"><p> Contains all MMS messages in the MMS app inbox.</p><pre><code>public static final class Telephony.Mms.Inbox\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Mms.Inbox.html
Telephony.Mms.Intents	A										<section class="prog__container"><p> Intents class.</p><pre><code>public static final class Telephony.Mms.Intents\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Mms.Intents.html
Telephony.Mms.Outbox	A										<section class="prog__container"><p> Contains all MMS messages in the MMS app outbox.</p><pre><code>public static final class Telephony.Mms.Outbox\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Mms.Outbox.html
Telephony.Mms.Part	A										<section class="prog__container"><p> Contains message parts.</p><pre><code>public static final class Telephony.Mms.Part\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Mms.Part.html
Telephony.Mms.Rate	A										<section class="prog__container"><p> Message send rate table.</p><pre><code>public static final class Telephony.Mms.Rate\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Mms.Rate.html
Telephony.Mms.Sent	A										<section class="prog__container"><p> Contains all MMS messages in the MMS app sent folder.</p><pre><code>public static final class Telephony.Mms.Sent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Mms.Sent.html
Telephony.MmsSms	A										<section class="prog__container"><p> Contains all MMS and SMS messages.</p><pre><code>public static final class Telephony.MmsSms\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.MmsSms.html
Telephony.MmsSms.PendingMessages	A										<section class="prog__container"><p> Contains pending messages info.</p><pre><code>public static final class Telephony.MmsSms.PendingMessages\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.MmsSms.PendingMessages.html
Telephony.Sms.Conversations	A										<section class="prog__container"><p> Contains all sent text-based SMS messages in the SMS app.</p><pre><code>public static final class Telephony.Sms.Conversations\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Sms.Conversations.html
Telephony.Sms.Draft	A										<section class="prog__container"><p> Contains all sent text-based SMS messages in the SMS app.</p><pre><code>public static final class Telephony.Sms.Draft\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Sms.Draft.html
Telephony.Sms	A										<section class="prog__container"><p> Contains all text-based SMS messages.</p><pre><code>public static final class Telephony.Sms\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Sms.html
Telephony.Sms.Inbox	A										<section class="prog__container"><p> Contains all text-based SMS messages in the SMS app inbox.</p><pre><code>public static final class Telephony.Sms.Inbox\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Sms.Inbox.html
Telephony.Sms.Intents	A										<section class="prog__container"><p> Contains constants for SMS related Intents that are broadcast.</p><pre><code>public static final class Telephony.Sms.Intents\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Sms.Intents.html
Telephony.Sms.Outbox	A										<section class="prog__container"><p> Contains all pending outgoing text-based SMS messages.</p><pre><code>public static final class Telephony.Sms.Outbox\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Sms.Outbox.html
Telephony.Sms.Sent	A										<section class="prog__container"><p> Contains all sent text-based SMS messages in the SMS app.</p><pre><code>public static final class Telephony.Sms.Sent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Sms.Sent.html
Telephony.TextBasedSmsColumns	A										<section class="prog__container"><p> Base columns for tables that contain text-based SMSs.</p><pre><code>public static interface Telephony.TextBasedSmsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.TextBasedSmsColumns.html
Telephony.Threads	A										<section class="prog__container"><p> Helper functions for the "threads" table used by MMS and SMS.</p><pre><code>public static final class Telephony.Threads\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Threads.html
Telephony.ThreadsColumns	A										<section class="prog__container"><p> Columns for the "threads" table used by MMS and SMS.</p><pre><code>public static interface Telephony.ThreadsColumns\nimplements BaseColumns</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.ThreadsColumns.html
UserDictionary	A										<section class="prog__container"><p> A provider of user defined words for input methods to use for predictive text input. Applications and input methods may add words into the dictionary. Words can have associated frequency information and locale information. <p> <strong> NOTE: </strong> Starting on API 23, the user dictionary is only accessible through IME and spellchecker. </p><pre><code>public class UserDictionary\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/UserDictionary.html
UserDictionary.Words	A										<section class="prog__container"><p> Contains the user defined words.</p><pre><code>public static class UserDictionary.Words\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/UserDictionary.Words.html
VoicemailContract	A										<section class="prog__container"><p> The contract between the voicemail provider and applications. Contains definitions for the supported URIs and columns. <p> The content providers exposes two tables through this interface: <ul> <li> Voicemails table: This stores the actual voicemail records. The columns and URIs for accessing this table are defined by the <pre><code> VoicemailContract.Voicemails </code></pre> class. </li> <li> Status table: This provides a way for the voicemail source application to convey its current state to the system. The columns and URIS for accessing this table are defined by the <pre><code> VoicemailContract.Status </code></pre> class. </li> </ul> <p> The minimum permission needed to access this content provider is <pre><code> ADD_VOICEMAIL </code></pre> <p> Voicemails are inserted by what is called as a "voicemail source" application, which is responsible for syncing voicemail data between a remote server and the local voicemail content provider. "voicemail source" application should always set the <pre><code> PARAM_KEY_SOURCE_PACKAGE </code></pre> in the URI to identify its package. <p> In addition to the <pre><code> ContentObserver </code></pre> notifications the voicemail provider also generates broadcast intents to notify change for applications that are not active and therefore cannot listen to ContentObserver notifications. Broadcast intents with following actions are generated: <ul> <li> <pre><code> ACTION_NEW_VOICEMAIL </code></pre> is generated for each new voicemail inserted. </li> <li> <pre><code> ACTION_PROVIDER_CHANGED </code></pre> is generated for any change made into the database, including new voicemail. </li> </ul> </p><pre><code>public class VoicemailContract\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/VoicemailContract.html
VoicemailContract.Status	A										<section class="prog__container"><p> Defines fields exposed through the /status path of this content provider.</p><pre><code>public static final class VoicemailContract.Status\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/VoicemailContract.Status.html
VoicemailContract.Voicemails	A										<section class="prog__container"><p> Defines fields exposed through the /voicemail path of this content provider.</p><pre><code>public static final class VoicemailContract.Voicemails\nextends Object</code></pre></section>	https://developer.android.com/reference/android/provider/VoicemailContract.Voicemails.html
Allocation	A										<section class="prog__container"><p> <p> This class provides the primary method through which data is passed to and from RenderScript kernels. An Allocation provides the backing store for a given <pre><code> Type </code></pre> . </p><pre><code>public class Allocation\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Allocation.html
Allocation.MipmapControl	A										<section class="prog__container"><p> Controls mipmap behavior when using the bitmap creation and update functions.</p><pre><code>public static final enum Allocation.MipmapControl\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Allocation.MipmapControl.html
Allocation.OnBufferAvailableListener	A										<section class="prog__container"><p> Interface to handle notification when new buffers are available via <pre><code> USAGE_IO_INPUT </code></pre> . An application will receive one notification when a buffer is available. Additional buffers will not trigger new notifications until a buffer is processed.</p><pre><code>public static interface Allocation.OnBufferAvailableListener\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Allocation.OnBufferAvailableListener.html
AllocationAdapter	A										<section class="prog__container"><p> Only intended for use by generated reflected code.</p><pre><code>public class AllocationAdapter\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/AllocationAdapter.html
BaseObj	A										<section class="prog__container"><p> BaseObj is the base class for all RenderScript objects owned by a RS context. It is responsible for lifetime management and resource tracking. This class should not be used by a user application.</p><pre><code>public class BaseObj\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/BaseObj.html
Byte2	A										<section class="prog__container"><p> Class for exposing the native RenderScript byte2 type back to the Android system.</p><pre><code>public class Byte2\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Byte2.html
Byte3	A										<section class="prog__container"><p> Class for exposing the native RenderScript byte3 type back to the Android system.</p><pre><code>public class Byte3\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Byte3.html
Byte4	A										<section class="prog__container"><p> Class for exposing the native RenderScript byte4 type back to the Android system.</p><pre><code>public class Byte4\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Byte4.html
Double2	A										<section class="prog__container"><p> Vector version of the basic double type. Provides two double fields packed.</p><pre><code>public class Double2\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Double2.html
Double3	A										<section class="prog__container"><p> Vector version of the basic double type. Provides three double fields packed.</p><pre><code>public class Double3\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Double3.html
Double4	A										<section class="prog__container"><p> Vector version of the basic double type. Provides four double fields packed.</p><pre><code>public class Double4\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Double4.html
Element.Builder	A										<section class="prog__container"><p> Builder class for producing complex elements with matching field and name pairs. The builder starts empty. The order in which elements are added is retained for the layout in memory.</p><pre><code>public static class Element.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Element.Builder.html
Element.DataKind	A										<section class="prog__container"><p> The special interpretation of the data if required. This is primarly useful for graphical data. USER indicates no special interpretation is expected. PIXEL is used in conjunction with the standard data types for representing texture formats.</p><pre><code>public static final enum Element.DataKind\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Element.DataKind.html
Element.DataType	A										<section class="prog__container"><p> DataType represents the basic type information for a basic element. The naming convention follows. For numeric types it is FLOAT, SIGNED, or UNSIGNED followed by the _BITS where BITS is the size of the data. BOOLEAN is a true / false (1,0) represented in an 8 bit container. The UNSIGNED variants with multiple bit definitions are for packed graphical data formats and represent vectors with per vector member sizes which are treated as a single unit for packing and alignment purposes. MATRIX the three matrix types contain FLOAT_32 elements and are treated as 32 bits for alignment purposes. RS_* objects: opaque handles with implementation dependent sizes.</p><pre><code>public static final enum Element.DataType\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Element.DataType.html
Element	A										<section class="prog__container"><p> <p> An Element represents one item within an <pre><code> Allocation </code></pre> . An Element is roughly equivalent to a C type in a RenderScript kernel. Elements may be basic or complex. Some basic elements are </p><pre><code>public class Element\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Element.html
FieldPacker	A										<section class="prog__container"><p> Utility class for packing arguments and structures from Android system objects to RenderScript objects. This class is only intended to be used to support the reflected code generated by the RS tool chain. It should not be called directly.</p><pre><code>public class FieldPacker\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/FieldPacker.html
Float2	A										<section class="prog__container"><p> Vector version of the basic float type. Provides two float fields packed.</p><pre><code>public class Float2\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Float2.html
Float3	A										<section class="prog__container"><p> Vector version of the basic float type. Provides three float fields packed.</p><pre><code>public class Float3\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Float3.html
Float4	A										<section class="prog__container"><p> Vector version of the basic float type. Provides four float fields packed.</p><pre><code>public class Float4\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Float4.html
Int2	A										<section class="prog__container"><p> Vector version of the basic int type. Provides two int fields packed.</p><pre><code>public class Int2\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Int2.html
Int3	A										<section class="prog__container"><p> Vector version of the basic int type. Provides three int fields packed.</p><pre><code>public class Int3\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Int3.html
Int4	A										<section class="prog__container"><p> Vector version of the basic int type. Provides four int fields packed.</p><pre><code>public class Int4\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Int4.html
Long2	A										<section class="prog__container"><p> Vector version of the basic long type. Provides two long fields packed.</p><pre><code>public class Long2\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Long2.html
Long3	A										<section class="prog__container"><p> Vector version of the basic long type. Provides three long fields packed.</p><pre><code>public class Long3\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Long3.html
Long4	A										<section class="prog__container"><p> Vector version of the basic long type. Provides four long fields packed.</p><pre><code>public class Long4\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Long4.html
Matrix2f	A										<section class="prog__container"><p> Class for exposing the native RenderScript rs_matrix2x2 type back to the Android system.</p><pre><code>public class Matrix2f\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Matrix2f.html
Matrix3f	A										<section class="prog__container"><p> Class for exposing the native RenderScript rs_matrix3x3 type back to the Android system.</p><pre><code>public class Matrix3f\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Matrix3f.html
Matrix4f	A										<section class="prog__container"><p> Class for exposing the native RenderScript rs_matrix4x4 type back to the Android system.</p><pre><code>public class Matrix4f\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Matrix4f.html
android.renderscript	A										<section class="prog__container">RenderScript provides support for high-performance computation across heterogeneous processors.</section>	https://developer.android.com/reference/android/renderscript/package-summary.html
RenderScript.ContextType	A										<section class="prog__container"><p> ContextType specifies the specific type of context to be created.</p><pre><code>public static final enum RenderScript.ContextType\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/RenderScript.ContextType.html
RenderScript	A										<section class="prog__container"><p> This class provides access to a RenderScript context, which controls RenderScript initialization, resource management, and teardown. An instance of the RenderScript class must be created before any other RS objects can be created. </p><pre><code>public class RenderScript\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/RenderScript.html
RenderScript.Priority	A										<section class="prog__container"><p> RenderScript worker thread priority enumeration. The default value is NORMAL. Applications wishing to do background processing should set their priority to LOW to avoid starving forground processes.</p><pre><code>public static final enum RenderScript.Priority\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/RenderScript.Priority.html
RenderScript.RSErrorHandler	A										<section class="prog__container"><p> The runtime error handler base class. An application should derive from this class if it wishes to install an error handler. When errors occur at runtime, the fields in this class will be filled, and the run method will be called.</p><pre><code>public static class RenderScript.RSErrorHandler\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/RenderScript.RSErrorHandler.html
RenderScript.RSMessageHandler	A										<section class="prog__container"><p> The base class from which an application should derive in order to receive RS messages from scripts. When a script calls <pre><code> rsSendToClient </code></pre> , the data fields will be filled, and the run method will be called on a separate thread. This will occur some time after <pre><code> rsSendToClient </code></pre> completes in the script, as <pre><code> rsSendToClient </code></pre> is asynchronous. Message handlers are not guaranteed to have completed when <pre><code> finish() </code></pre> returns.</p><pre><code>public static class RenderScript.RSMessageHandler\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/RenderScript.RSMessageHandler.html
RSDriverException	A										<section class="prog__container"><p> Base class for all exceptions thrown by the Android RenderScript</p><pre><code>public class RSDriverException\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/RSDriverException.html
RSIllegalArgumentException	A										<section class="prog__container"><p> Base class for all exceptions thrown by the Android RenderScript</p><pre><code>public class RSIllegalArgumentException\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/RSIllegalArgumentException.html
RSInvalidStateException	A										<section class="prog__container"><p> Base class for all exceptions thrown by the Android RenderScript</p><pre><code>public class RSInvalidStateException\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/RSInvalidStateException.html
RSRuntimeException	A										<section class="prog__container"><p> Base class for all exceptions thrown by the Android RenderScript</p><pre><code>public class RSRuntimeException\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/RSRuntimeException.html
Sampler.Builder	A										<section class="prog__container"><p> Builder for creating non-standard samplers. This is only necessary if a Sampler with different min and mag modes is desired.</p><pre><code>public static class Sampler.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Sampler.Builder.html
Sampler	A										<section class="prog__container"><p> Sampler object that defines how Allocations can be read as textures within a kernel. Samplers are used in conjunction with the <pre><code> rsSample </code></pre> runtime function to return values from normalized coordinates. Any Allocation used with a Sampler must have been created with <pre><code> USAGE_GRAPHICS_TEXTURE </code></pre> ; using a Sampler on an <pre><code> Allocation </code></pre> that was not created with <pre><code> USAGE_GRAPHICS_TEXTURE </code></pre> is undefined.</p><pre><code>public class Sampler\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Sampler.html
Sampler.Value	A										<section class="prog__container"><pre><code>public static final enum Sampler.Value\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Sampler.Value.html
Script.Builder	A										<section class="prog__container"><p> Only intended for use by generated reflected code.</p><pre><code>public static class Script.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Script.Builder.html
Script.FieldBase	A										<section class="prog__container"><p> Only intended for use by generated reflected code.</p><pre><code>public static class Script.FieldBase\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Script.FieldBase.html
Script.FieldID	A										<section class="prog__container"><p> FieldID is an identifier for a Script + exported field pair. It is used as an identifier for ScriptGroup creation. This class should not be directly created. Instead use the method in the reflected or intrinsic code "getFieldID_funcname()".</p><pre><code>public static final class Script.FieldID\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Script.FieldID.html
Script	A										<section class="prog__container"><p> The parent class for all executable scripts. This should not be used by applications.</p><pre><code>public class Script\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Script.html
Script.InvokeID	A										<section class="prog__container"><p> InvokeID is an identifier for an invoke function. It is used as an identifier for ScriptGroup creation. This class should not be directly created. Instead use the method in the reflected or intrinsic code "getInvokeID_funcname()".</p><pre><code>public static final class Script.InvokeID\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Script.InvokeID.html
Script.KernelID	A										<section class="prog__container"><p> KernelID is an identifier for a Script + root function pair. It is used as an identifier for ScriptGroup creation. This class should not be directly created. Instead use the method in the reflected or intrinsic code "getKernelID_funcname()".</p><pre><code>public static final class Script.KernelID\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Script.KernelID.html
Script.LaunchOptions	A										<section class="prog__container"><p> Class for specifying the specifics about how a kernel will be launched. This class can specify a potential range of cells on which to run a kernel. If no set is called for a dimension then this class will have no impact on that dimension when the kernel is executed. The forEach kernel launch will operate over the intersection of the dimensions. Example: LaunchOptions with setX(5, 15) Allocation with dimension X=10, Y=10 The resulting forEach run would execute over: x = 5 to 9 (inclusive) and y = 0 to 9 (inclusive).</p><pre><code>public static final class Script.LaunchOptions\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Script.LaunchOptions.html
ScriptC	A										<section class="prog__container"><p> The superclass for all user-defined scripts. This is only intended to be used by the generated derived classes.</p><pre><code>public class ScriptC\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptC.html
ScriptGroup.Binding	A										<section class="prog__container"><p> Represents a binding of a value to a global variable in a kernel or invocable function. Used in closure creation.</p><pre><code>public static final class ScriptGroup.Binding\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptGroup.Binding.html
ScriptGroup.Builder	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 23. </strong> <br/> Use <pre><code> ScriptGroup.Builder2 </code></pre> instead. </p><pre><code>public static final class ScriptGroup.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptGroup.Builder.html
ScriptGroup.Builder2	A										<section class="prog__container"><p> The builder class for creating script groups <p> A script group is created using closures (see class <pre><code> ScriptGroup.Closure </code></pre> ). A closure is a function call to a kernel or invocable function. Each function argument or global variable accessed inside the function is bound to 1) a known value, 2) a script group input (see class <pre><code> ScriptGroup.Input </code></pre> ), or 3) a future (see class <pre><code> ScriptGroup.Future </code></pre> ). A future is the output of a closure, either the return value of the function or a global variable written by that function. <p> Closures are created using the <pre><code> addKernel(Script.KernelID, Type, Object...) </code></pre> or <pre><code> addInvoke(Script.InvokeID, Object...) </code></pre> methods. When a closure is created, futures from previously created closures can be used as its inputs. External script group inputs can be used as inputs to individual closures as well. An external script group input is created using the <pre><code> addInput() </code></pre> method. A script group is created by a call to the <pre><code> create(String, ScriptGroup.Future...) </code></pre> method, which accepts an array of futures as the outputs for the script group. <p> Closures in a script group can be evaluated in any order as long as the following conditions are met: 1) a closure must be evaluated before any other closures that take its futures as inputs; 2) all closures added before an invoke closure must be evaluated before it; and 3) all closures added after an invoke closure must be evaluated after it. As a special case, the order that the closures are added is a legal evaluation order. However, other evaluation orders are possible, including concurrently evaluating independent closures. </p><pre><code>public static final class ScriptGroup.Builder2\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptGroup.Builder2.html
ScriptGroup.Closure	A										<section class="prog__container"><p> An opaque class for closures <p> A closure represents a function call to a kernel or invocable function, combined with arguments and values for global variables. A closure is created using the <pre><code> addKernel(Script.KernelID, Type, Object...) </code></pre> or <pre><code> addInvoke(Script.InvokeID, Object...) </code></pre> method. </p><pre><code>public static final class ScriptGroup.Closure\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptGroup.Closure.html
ScriptGroup.Future	A										<section class="prog__container"><p> An opaque class for futures <p> A future represents an output of a closure, either the return value of the function, or the value of a global variable written by the function. A future is created by calling the <pre><code> getReturn() </code></pre> or <pre><code> getGlobal(Script.FieldID) </code></pre> method. </p><pre><code>public static final class ScriptGroup.Future\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptGroup.Future.html
ScriptGroup	A										<section class="prog__container"><p> A group of kernels that are executed together with one execution call as if they were a single kernel <p> In addition to kernels, a script group may contain invocable functions as well. A script group may take inputs and generate outputs, which are consumed and produced by its member kernels. Inside a script group, outputs from one kernel can be passed to another kernel as inputs. The API disallows cyclic dependencies among kernels in a script group, effectively making it a directed acyclic graph (DAG) of kernels. <p> Grouping kernels together allows for more efficient execution. For example, runtime and compiler optimization can be applied to reduce computation and communication overhead, and to make better use of the CPU and the GPU. </p><pre><code>public final class ScriptGroup\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptGroup.html
ScriptGroup.Input	A										<section class="prog__container"><p> An opaque class for script group inputs <p> Created by calling the <pre><code> addInput() </code></pre> method. The value is assigned in <pre><code> execute(Object) </code></pre> method as one of its arguments. Arguments to the execute method should be in the same order as intputs are added using the addInput method. </p><pre><code>public static final class ScriptGroup.Input\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptGroup.Input.html
ScriptIntrinsic	A										<section class="prog__container"><p> Base class for all Intrinsic scripts. An intrinsic a script which implements a pre-defined function. Intrinsics are provided to provide effecient implemtations of common operations. Not intended for direct use.</p><pre><code>public abstract class ScriptIntrinsic\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsic.html
ScriptIntrinsic3DLUT	A										<section class="prog__container"><p> Intrinsic for converting RGB to RGBA by using a 3D lookup table. The incoming r,g,b values are use as normalized x,y,z coordinates into a 3D allocation. The 8 nearest values are sampled and linearly interpolated. The result is placed in the output.</p><pre><code>public final class ScriptIntrinsic3DLUT\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsic3DLUT.html
ScriptIntrinsicBLAS	A										<section class="prog__container"><p> ScriptIntrinsicBLAS class provides high performance RenderScript APIs to BLAS. The BLAS (Basic Linear Algebra Subprograms) are routines that provide standard building blocks for performing basic vector and matrix operations. For detailed description of BLAS, please refer to http://www.netlib.org/blas/</p><pre><code>public final class ScriptIntrinsicBLAS\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html
ScriptIntrinsicBlend	A										<section class="prog__container"><p> Intrinsic kernels for blending two <pre><code> Allocation </code></pre> objects.</p><pre><code>public class ScriptIntrinsicBlend\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBlend.html
ScriptIntrinsicBlur	A										<section class="prog__container"><p> Intrinsic Gausian blur filter. Applies a gaussian blur of the specified radius to all elements of an allocation.</p><pre><code>public final class ScriptIntrinsicBlur\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBlur.html
ScriptIntrinsicColorMatrix	A										<section class="prog__container"><p> Intrinsic for applying a color matrix to allocations. If the element type is <pre><code> UNSIGNED_8 </code></pre> , it is converted to <pre><code> FLOAT_32 </code></pre> and normalized from (0-255) to (0-1). If the incoming vector size is less than four, a <pre><code> F32_4(RenderScript) </code></pre> is created by filling the missing vector channels with zero. This value is then multiplied by the 4x4 color matrix as performed by rsMatrixMultiply(), adding a <pre><code> F32_4(RenderScript) </code></pre> , and then writing it to the output <pre><code> Allocation </code></pre> . If the ouptut type is unsigned, the value is normalized from (0-1) to (0-255) and converted. If the output vector size is less than four, the unused channels are discarded. Supported elements types are <pre><code> U8(RenderScript) </code></pre> , <pre><code> U8_2(RenderScript) </code></pre> , <pre><code> U8_3(RenderScript) </code></pre> , <pre><code> U8_4(RenderScript) </code></pre> , <pre><code> F32(RenderScript) </code></pre> , <pre><code> F32_2(RenderScript) </code></pre> , <pre><code> F32_3(RenderScript) </code></pre> , and <pre><code> F32_4(RenderScript) </code></pre> .</p><pre><code>public final class ScriptIntrinsicColorMatrix\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicColorMatrix.html
ScriptIntrinsicConvolve3x3	A										<section class="prog__container"><p> Intrinsic for applying a 3x3 convolve to an allocation.</p><pre><code>public final class ScriptIntrinsicConvolve3x3\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicConvolve3x3.html
ScriptIntrinsicConvolve5x5	A										<section class="prog__container"><p> Intrinsic for applying a 5x5 convolve to an allocation.</p><pre><code>public final class ScriptIntrinsicConvolve5x5\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicConvolve5x5.html
ScriptIntrinsicHistogram	A										<section class="prog__container"><p> Intrinsic Histogram filter.</p><pre><code>public final class ScriptIntrinsicHistogram\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html
ScriptIntrinsicLUT	A										<section class="prog__container"><p> Intrinsic for applying a per-channel lookup table. Each channel of the input has an independant lookup table. The tables are 256 entries in size and can cover the full value range of <pre><code> U8_4(RenderScript) </code></pre> .</p><pre><code>public final class ScriptIntrinsicLUT\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicLUT.html
ScriptIntrinsicResize	A										<section class="prog__container"><p> Intrinsic for performing a resize of a 2D allocation.</p><pre><code>public final class ScriptIntrinsicResize\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicResize.html
ScriptIntrinsicYuvToRGB	A										<section class="prog__container"><p> Intrinsic for converting an Android YUV buffer to RGB. The input allocation should be supplied in a supported YUV format as a YUV element Allocation. The output is RGBA; the alpha channel will be set to 255.</p><pre><code>public final class ScriptIntrinsicYuvToRGB\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicYuvToRGB.html
Short2	A										<section class="prog__container"><p> Class for exposing the native RenderScript Short2 type back to the Android system. Vector version of the basic short type. Provides two short fields packed.</p><pre><code>public class Short2\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Short2.html
Short3	A										<section class="prog__container"><p> Vector version of the basic short type. Provides three short fields packed.</p><pre><code>public class Short3\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Short3.html
Short4	A										<section class="prog__container"><p> Vector version of the basic short type. Provides four short fields packed.</p><pre><code>public class Short4\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Short4.html
Type.Builder	A										<section class="prog__container"><p> Builder class for Type.</p><pre><code>public static class Type.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/renderscript/Type.Builder.html
Type.CubemapFace	A										<section class="prog__container"><pre><code>public static final enum Type.CubemapFace\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Type.CubemapFace.html
Type	A										<section class="prog__container"><p> <p> A Type describes the <pre><code> Element </code></pre> and dimensions used for an <pre><code> Allocation </code></pre> or a parallel operation. Types are created through <pre><code> Type.Builder </code></pre> . </p><pre><code>public class Type\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Type.html
Element	A										<section class="prog__container"><p> An XML element. Provides access to child elements and hooks to listen for events related to this element.</p><pre><code>public class Element\nextends Object</code></pre></section>	https://developer.android.com/reference/android/sax/Element.html
ElementListener	A										<section class="prog__container"><p> Listens for the beginning and ending of elements.</p><pre><code>public interface ElementListener\nimplements StartElementListener, EndElementListener</code></pre></section>	https://developer.android.com/reference/android/sax/ElementListener.html
EndElementListener	A										<section class="prog__container"><p> Listens for the end of elements.</p><pre><code>public interface EndElementListener\n</code></pre></section>	https://developer.android.com/reference/android/sax/EndElementListener.html
EndTextElementListener	A										<section class="prog__container"><p> Listens for the end of text elements.</p><pre><code>public interface EndTextElementListener\n</code></pre></section>	https://developer.android.com/reference/android/sax/EndTextElementListener.html
android.sax	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/sax/package-summary.html
RootElement	A										<section class="prog__container"><p> The root XML element. The entry point for this API. Not safe for concurrent use. <p> For example, passing this XML: <pre> &lt;feed xmlns='http://www.w3.org/2005/Atom'&gt; &lt;entry&gt; &lt;id&gt;bob&lt;/id&gt; &lt;/entry&gt; &lt;/feed&gt; </pre> to this code: <pre> static final String ATOM_NAMESPACE = "http://www.w3.org/2005/Atom"; ... RootElement root = new RootElement(ATOM_NAMESPACE, "feed"); Element entry = root.getChild(ATOM_NAMESPACE, "entry"); entry.getChild(ATOM_NAMESPACE, "id").setEndTextElementListener( new EndTextElementListener() { public void end(String body) { System.out.println("Entry ID: " + body); } }); XMLReader reader = ...; reader.setContentHandler(root.getContentHandler()); reader.parse(...); </pre> would output: <pre> Entry ID: bob </pre> </p><pre><code>public class RootElement\n</code></pre></section>	https://developer.android.com/reference/android/sax/RootElement.html
StartElementListener	A										<section class="prog__container"><p> Listens for the beginning of elements.</p><pre><code>public interface StartElementListener\n</code></pre></section>	https://developer.android.com/reference/android/sax/StartElementListener.html
TextElementListener	A										<section class="prog__container"><p> Listens for the beginning and ending of text elements.</p><pre><code>public interface TextElementListener\nimplements StartElementListener, EndTextElementListener</code></pre></section>	https://developer.android.com/reference/android/sax/TextElementListener.html
KeyChain	A										<section class="prog__container"><p> The <pre><code> KeyChain </code></pre> class provides access to private keys and their corresponding certificate chains in credential storage. <p> Applications accessing the <pre><code> KeyChain </code></pre> normally go through these steps: <ol> <li> Receive a callback from an <pre><code> X509KeyManager </code></pre> that a private key is requested. <li> Call <pre><code> choosePrivateKeyAlias </code></pre> to allow the user to select from a list of currently available private keys and corresponding certificate chains. The chosen alias will be returned by the callback <pre><code> alias(String) </code></pre> , or null if no private key is available or the user cancels the request. <li> Call <pre><code> getPrivateKey(Context, String) </code></pre> and <pre><code> getCertificateChain(Context, String) </code></pre> to retrieve the credentials to return to the corresponding <pre><code> X509KeyManager </code></pre> callbacks. </li> </li> </li> </ol> <p> An application may remember the value of a selected alias to avoid prompting the user with <pre><code> choosePrivateKeyAlias </code></pre> on subsequent connections. If the alias is no longer valid, null will be returned on lookups using that value <p> An application can request the installation of private keys and certificates via the <pre><code> Intent </code></pre> provided by <pre><code> createInstallIntent() </code></pre> . Private keys installed via this <pre><code> Intent </code></pre> will be accessible via <pre><code> choosePrivateKeyAlias(Activity, KeyChainAliasCallback, String[], Principal[], Uri, String) </code></pre> while Certificate Authority (CA) certificates will be trusted by all applications through the default <pre><code> X509TrustManager </code></pre> . </p><pre><code>public final class KeyChain\nextends Object</code></pre></section>	https://developer.android.com/reference/android/security/KeyChain.html
KeyChainAliasCallback	A										<section class="prog__container"><p> The KeyChainAliasCallback is the callback for <pre><code> choosePrivateKeyAlias(Activity, KeyChainAliasCallback, String[], Principal[], Uri, String) </code></pre> .</p><pre><code>public interface KeyChainAliasCallback\n</code></pre></section>	https://developer.android.com/reference/android/security/KeyChainAliasCallback.html
KeyChainException	A										<section class="prog__container"><p> Thrown on problems accessing the <pre><code> KeyChain </code></pre> .</p><pre><code>public class KeyChainException\n</code></pre></section>	https://developer.android.com/reference/android/security/KeyChainException.html
KeyPairGeneratorSpec.Builder	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 23. </strong> <br/> Use <pre><code> KeyGenParameterSpec.Builder </code></pre> instead. </p><pre><code>public static final class KeyPairGeneratorSpec.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/security/KeyPairGeneratorSpec.Builder.html
KeyPairGeneratorSpec	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 23. </strong> <br/> Use <pre><code> KeyGenParameterSpec </code></pre> instead. </p><pre><code>public final class KeyPairGeneratorSpec\nextends Object</code></pre></section>	https://developer.android.com/reference/android/security/KeyPairGeneratorSpec.html
KeyStoreParameter.Builder	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 23. </strong> <br/> Use <pre><code> KeyProtection.Builder </code></pre> instead. </p><pre><code>public static final class KeyStoreParameter.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/security/KeyStoreParameter.Builder.html
KeyStoreParameter	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 23. </strong> <br/> Use <pre><code> KeyProtection </code></pre> instead. </p><pre><code>public final class KeyStoreParameter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/security/KeyStoreParameter.html
NetworkSecurityPolicy	A										<section class="prog__container"><p> Network security policy. <p> Network stacks/components should honor this policy to make it possible to centrally control the relevant aspects of network security behavior. <p> The policy currently consists of a single flag: whether cleartext network traffic is permitted. See <pre><code> isCleartextTrafficPermitted() </code></pre> . </p><pre><code>public class NetworkSecurityPolicy\nextends Object</code></pre></section>	https://developer.android.com/reference/android/security/NetworkSecurityPolicy.html
android.security	A										<section class="prog__container">Provides access to a few facilities of the Android security subsystems.</section>	https://developer.android.com/reference/android/security/package-summary.html
KeyExpiredException	A										<section class="prog__container"><p> Indicates that a cryptographic operation failed because the employed key's validity end date is in the past.</p><pre><code>public class KeyExpiredException\n</code></pre></section>	https://developer.android.com/reference/android/security/keystore/KeyExpiredException.html
KeyGenParameterSpec.Builder	A										<section class="prog__container"><p> Builder of <pre><code> KeyGenParameterSpec </code></pre> instances.</p><pre><code>public static final class KeyGenParameterSpec.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.Builder.html
KeyGenParameterSpec	A										<section class="prog__container"><pre><code>public final class KeyGenParameterSpec\nextends Object</code></pre></section>	https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.html
KeyInfo	A										<section class="prog__container"><pre><code>public class KeyInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/security/keystore/KeyInfo.html
KeyNotYetValidException	A										<section class="prog__container"><p> Indicates that a cryptographic operation failed because the employed key's validity start date is in the future.</p><pre><code>public class KeyNotYetValidException\n</code></pre></section>	https://developer.android.com/reference/android/security/keystore/KeyNotYetValidException.html
KeyPermanentlyInvalidatedException	A										<section class="prog__container"><p> Indicates that the key can no longer be used because it has been permanently invalidated. <p> This only occurs for keys which are authorized to be used only if the user has been authenticated. Such keys are permanently and irreversibly invalidated once the secure lock screen is disabled (i.e., reconfigured to None, Swipe or other mode which does not authenticate the user) or when the secure lock screen is forcibly reset (e.g., by Device Admin). Additionally, keys configured to require user authentication to take place for every of the keys, are also permanently invalidated once a new fingerprint is enrolled or once no more fingerprints are enrolled. </p><pre><code>public class KeyPermanentlyInvalidatedException\n</code></pre></section>	https://developer.android.com/reference/android/security/keystore/KeyPermanentlyInvalidatedException.html
KeyProperties	A										<section class="prog__container"><p> Properties of Android Keystore keys.</p><pre><code>public abstract class KeyProperties\nextends Object</code></pre></section>	https://developer.android.com/reference/android/security/keystore/KeyProperties.html
KeyProtection.Builder	A										<section class="prog__container"><p> Builder of <pre><code> KeyProtection </code></pre> instances.</p><pre><code>public static final class KeyProtection.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/security/keystore/KeyProtection.Builder.html
KeyProtection	A										<section class="prog__container"><pre><code>public final class KeyProtection\nextends Object</code></pre></section>	https://developer.android.com/reference/android/security/keystore/KeyProtection.html
android.security.keystore	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/security/keystore/package-summary.html
UserNotAuthenticatedException	A										<section class="prog__container"><p> Indicates that a cryptographic operation could not be performed because the user has not been authenticated recently enough. Authenticating the user will resolve this issue.</p><pre><code>public class UserNotAuthenticatedException\n</code></pre></section>	https://developer.android.com/reference/android/security/keystore/UserNotAuthenticatedException.html
CarrierIdentifier	A										<section class="prog__container"><p> Used to pass info to CarrierConfigService implementations so they can decide what values to return.</p><pre><code>public class CarrierIdentifier\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/carrier/CarrierIdentifier.html
CarrierMessagingService	A										<section class="prog__container"><p> A service that receives calls from the system when new SMS and MMS are sent or received. <p> To extend this class, you must declare the service in your manifest file with the <pre><code> BIND_CARRIER_SERVICES </code></pre> permission and include an intent filter with the <pre><code> SERVICE_INTERFACE </code></pre> action. For example: </p><pre><code>public abstract class CarrierMessagingService\n</code></pre></section>	https://developer.android.com/reference/android/service/carrier/CarrierMessagingService.html
CarrierMessagingService.ResultCallback	A										<section class="prog__container"><p> A callback interface used to provide results asynchronously.</p><pre><code>public static interface CarrierMessagingService.ResultCallback\n</code></pre></section>	https://developer.android.com/reference/android/service/carrier/CarrierMessagingService.ResultCallback.html
CarrierMessagingService.SendMmsResult	A										<section class="prog__container"><p> The result of sending an MMS.</p><pre><code>public static final class CarrierMessagingService.SendMmsResult\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/carrier/CarrierMessagingService.SendMmsResult.html
CarrierMessagingService.SendMultipartSmsResult	A										<section class="prog__container"><p> The result of sending a multipart SMS.</p><pre><code>public static final class CarrierMessagingService.SendMultipartSmsResult\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/carrier/CarrierMessagingService.SendMultipartSmsResult.html
CarrierMessagingService.SendSmsResult	A										<section class="prog__container"><p> The result of sending an SMS.</p><pre><code>public static final class CarrierMessagingService.SendSmsResult\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/carrier/CarrierMessagingService.SendSmsResult.html
CarrierService	A										<section class="prog__container"><p> A service that exposes carrier-specific functionality to the system. <p> To extend this class, you must declare the service in your manifest file to require the <pre><code> BIND_CARRIER_SERVICES </code></pre> permission and include an intent filter with the <pre><code> CARRIER_SERVICE_INTERFACE </code></pre> . If the service should have a long-lived binding, set android.service.carrier.LONG_LIVED_BINDING to true in the service's metadata. For example: </p><pre><code>public abstract class CarrierService\n</code></pre></section>	https://developer.android.com/reference/android/service/carrier/CarrierService.html
MessagePdu	A										<section class="prog__container"><p> A parcelable list of PDUs representing contents of a possibly multi-part SMS.</p><pre><code>public final class MessagePdu\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/carrier/MessagePdu.html
android.service.carrier	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/carrier/package-summary.html
ChooserTarget	A										<section class="prog__container"><p> A ChooserTarget represents a deep-link into an application as returned by a <pre><code> ChooserTargetService </code></pre> . <p> A chooser target represents a specific deep link target into an application exposed for selection by the user. This might be a frequently emailed contact, a recently active group messaging conversation, a folder in a cloud storage app, a collection of related items published on a social media service or any other contextually relevant grouping of target app + relevant metadata. </p><pre><code>public final class ChooserTarget\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/chooser/ChooserTarget.html
ChooserTargetService	A										<section class="prog__container"><p> A service that receives calls from the system when the user is asked to choose a target for an intent explicitly by another app. The calling app must have invoked <pre><code> ACTION_CHOOSER </code></pre> as handled by the system; applications do not have the ability to query a ChooserTargetService directly. <p> Which ChooserTargetServices are queried depends on a system-level policy decision made at the moment the chooser is invoked, including but not limited to user time spent with the app package or associated components in the foreground, recency of usage or frequency of usage. These will generally correlate with the order that app targets are shown in the list of intent handlers shown in the system chooser or resolver. </p><pre><code>public abstract class ChooserTargetService\n</code></pre></section>	https://developer.android.com/reference/android/service/chooser/ChooserTargetService.html
android.service.chooser	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/chooser/package-summary.html
DreamService	A										<section class="prog__container"><p> Extend this class to implement a custom dream (available to the user as a "Daydream"). <p> Dreams are interactive screensavers launched when a charging device is idle, or docked in a desk dock. Dreams provide another modality for apps to express themselves, tailored for an exhibition/lean-back experience. </p><pre><code>public class DreamService\n</code></pre></section>	https://developer.android.com/reference/android/service/dreams/DreamService.html
android.service.dreams	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/dreams/package-summary.html
CameraPrewarmService	A										<section class="prog__container"><p> Extend this class to implement a camera prewarm service. See <pre><code> META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE </code></pre> .</p><pre><code>public abstract class CameraPrewarmService\n</code></pre></section>	https://developer.android.com/reference/android/service/media/CameraPrewarmService.html
MediaBrowserService.BrowserRoot	A										<section class="prog__container"><p> Contains information that the browser service needs to send to the client when first connected.</p><pre><code>public static final class MediaBrowserService.BrowserRoot\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/media/MediaBrowserService.BrowserRoot.html
MediaBrowserService	A										<section class="prog__container"><p> Base class for media browse services. <p> Media browse services enable applications to browse media content provided by an application and ask the application to start playing it. They may also be used to control content that is already playing by way of a <pre><code> MediaSession </code></pre> . </p><pre><code>public abstract class MediaBrowserService\n</code></pre></section>	https://developer.android.com/reference/android/service/media/MediaBrowserService.html
MediaBrowserService.Result	A										<section class="prog__container"><p> Completion handler for asynchronous callback methods in <pre><code> MediaBrowserService </code></pre> . <p> Each of the methods that takes one of these to send the result must call <pre><code> sendResult(T) </code></pre> to respond to the caller with the given results. If those functions return without calling <pre><code> sendResult(T) </code></pre> , they must instead call <pre><code> detach() </code></pre> before returning, and then may call <pre><code> sendResult(T) </code></pre> when they are done. If more than one of those methods is called, an exception will be thrown. </p><pre><code>public class MediaBrowserService.Result\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/media/MediaBrowserService.Result.html
android.service.media	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/media/package-summary.html
Condition	A										<section class="prog__container"><p> The current condition of an <pre><code> AutomaticZenRule </code></pre> , provided by the <pre><code> ConditionProviderService </code></pre> that owns the rule. Used to tell the system to enter Do Not Disturb mode and request that the system exit Do Not Disturb mode.</p><pre><code>public final class Condition\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/notification/Condition.html
ConditionProviderService	A										<section class="prog__container"><p> A service that provides conditions about boolean state. <p> To extend this class, you must declare the service in your manifest file with the <pre><code> BIND_CONDITION_PROVIDER_SERVICE </code></pre> permission and include an intent filter with the <pre><code> SERVICE_INTERFACE </code></pre> action. If you want users to be able to create and update conditions for this service to monitor, include the <pre><code> META_DATA_RULE_TYPE </code></pre> and <pre><code> META_DATA_CONFIGURATION_ACTIVITY </code></pre> tags and request the <pre><code> ACCESS_NOTIFICATION_POLICY </code></pre> permission. For example: </p><pre><code>public abstract class ConditionProviderService\n</code></pre></section>	https://developer.android.com/reference/android/service/notification/ConditionProviderService.html
NotificationListenerService	A										<section class="prog__container"><p> A service that receives calls from the system when new notifications are posted or removed, or their ranking changed. <p> To extend this class, you must declare the service in your manifest file with the <pre><code> BIND_NOTIFICATION_LISTENER_SERVICE </code></pre> permission and include an intent filter with the <pre><code> SERVICE_INTERFACE </code></pre> action. For example: </p><pre><code>public abstract class NotificationListenerService\n</code></pre></section>	https://developer.android.com/reference/android/service/notification/NotificationListenerService.html
NotificationListenerService.Ranking	A										<section class="prog__container"><p> Stores ranking related information on a currently active notification. <p> Ranking objects aren't automatically updated as notification events occur. Instead, ranking information has to be retrieved again via the current <pre><code> NotificationListenerService.RankingMap </code></pre> . </p><pre><code>public static class NotificationListenerService.Ranking\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html
NotificationListenerService.RankingMap	A										<section class="prog__container"><p> Provides access to ranking information on currently active notifications. <p> Note that this object represents a ranking snapshot that only applies to notifications active at the time of retrieval. </p><pre><code>public static class NotificationListenerService.RankingMap\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/notification/NotificationListenerService.RankingMap.html
android.service.notification	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/notification/package-summary.html
StatusBarNotification	A										<section class="prog__container"><p> Class encapsulating a Notification. Sent by the NotificationManagerService to clients including the status bar and any <pre><code> NotificationListenerService </code></pre> s.</p><pre><code>public class StatusBarNotification\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/notification/StatusBarNotification.html
android.service.quicksettings	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/quicksettings/package-summary.html
Tile	A										<section class="prog__container"><p> A Tile holds the state of a tile that will be displayed in Quick Settings. A tile in Quick Settings exists as an icon with an accompanied label. It also may have content description for accessibility usability. The style and layout of the tile may change to match a given device.</p><pre><code>public final class Tile\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/quicksettings/Tile.html
TileService	A										<section class="prog__container"><p> A TileService provides the user a tile that can be added to Quick Settings. Quick Settings is a space provided that allows the user to change settings and take quick actions without leaving the context of their current app. <p> The lifecycle of a TileService is different from some other services in that it may be unbound during parts of its lifecycle. Any of the following lifecycle events can happen indepently in a separate binding/creation of the service. </p><pre><code>public class TileService\n</code></pre></section>	https://developer.android.com/reference/android/service/quicksettings/TileService.html
android.service.restrictions	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/restrictions/package-summary.html
RestrictionsReceiver	A										<section class="prog__container"><p> Abstract implementation of a Restrictions Provider BroadcastReceiver. To implement a Restrictions Provider, extend from this class and implement the abstract methods. Export this receiver in the manifest. A profile owner device admin can then register this component as a Restrictions Provider using <pre><code> setRestrictionsProvider(ComponentName, ComponentName) </code></pre> . <p> The function of a Restrictions Provider is to transport permission requests from apps on this device to an administrator (most likely on a remote device or computer) and deliver back responses. The response should be sent back to the app via <pre><code> notifyPermissionResponse(String, PersistableBundle) </code></pre> . </p><pre><code>public abstract class RestrictionsReceiver\n</code></pre></section>	https://developer.android.com/reference/android/service/restrictions/RestrictionsReceiver.html
android.service.textservice	A										<section class="prog__container">Provides classes that allow you to create spell checkers in a manner similar to theinput method framework (for IMEs).</section>	https://developer.android.com/reference/android/service/textservice/package-summary.html
SpellCheckerService	A										<section class="prog__container"><p> SpellCheckerService provides an abstract base class for a spell checker. This class combines a service to the system with the spell checker service interface that spell checker must implement. <p> In addition to the normal Service lifecycle methods, this class introduces a new specific callback that subclasses should override <pre><code> createSession() </code></pre> to provide a spell checker session that is corresponding to requested language and so on. The spell checker session returned by this method should extend <pre><code> SpellCheckerService.Session </code></pre> . </p><pre><code>public abstract class SpellCheckerService\n</code></pre></section>	https://developer.android.com/reference/android/service/textservice/SpellCheckerService.html
SpellCheckerService.Session	A										<section class="prog__container"><p> This abstract class should be overridden by a concrete implementation of a spell checker.</p><pre><code>public static abstract class SpellCheckerService.Session\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/textservice/SpellCheckerService.Session.html
AlwaysOnHotwordDetector.Callback	A										<section class="prog__container"><p> Callbacks for always-on hotword detection.</p><pre><code>public static abstract class AlwaysOnHotwordDetector.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/voice/AlwaysOnHotwordDetector.Callback.html
AlwaysOnHotwordDetector.EventPayload	A										<section class="prog__container"><p> Additional payload for <pre><code> onDetected(AlwaysOnHotwordDetector.EventPayload) </code></pre> .</p><pre><code>public static class AlwaysOnHotwordDetector.EventPayload\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/voice/AlwaysOnHotwordDetector.EventPayload.html
AlwaysOnHotwordDetector	A										<section class="prog__container"><p> A class that lets a VoiceInteractionService implementation interact with always-on keyphrase detection APIs.</p><pre><code>public class AlwaysOnHotwordDetector\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/voice/AlwaysOnHotwordDetector.html
android.service.voice	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/voice/package-summary.html
VoiceInteractionService	A										<section class="prog__container"><p> Top-level service of the current global voice interactor, which is providing support for hotwording, the back-end of a <pre><code> VoiceInteractor </code></pre> , etc. The current VoiceInteractionService that has been selected by the user is kept always running by the system, to allow it to do things like listen for hotwords in the background to instigate voice interactions. <p> Because this service is always running, it should be kept as lightweight as possible. Heavy-weight operations (including showing UI) should be implemented in the associated <pre><code> VoiceInteractionSessionService </code></pre> when an actual voice interaction is taking place, and that service should run in a separate process from this one. </p><pre><code>public class VoiceInteractionService\n</code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionService.html
VoiceInteractionSession.AbortVoiceRequest	A										<section class="prog__container"><p> A request to report that the current user interaction can not be completed with voice, as per <pre><code> VoiceInteractor.AbortVoiceRequest </code></pre> .</p><pre><code>public static final class VoiceInteractionSession.AbortVoiceRequest\n</code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.AbortVoiceRequest.html
VoiceInteractionSession.CommandRequest	A										<section class="prog__container"><p> A generic vendor-specific request, as per <pre><code> VoiceInteractor.CommandRequest </code></pre> .</p><pre><code>public static final class VoiceInteractionSession.CommandRequest\n</code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.CommandRequest.html
VoiceInteractionSession.CompleteVoiceRequest	A										<section class="prog__container"><p> A request to simply inform the user that the voice operation has completed, as per <pre><code> VoiceInteractor.CompleteVoiceRequest </code></pre> .</p><pre><code>public static final class VoiceInteractionSession.CompleteVoiceRequest\n</code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.CompleteVoiceRequest.html
VoiceInteractionSession.ConfirmationRequest	A										<section class="prog__container"><p> A request for confirmation from the user of an operation, as per <pre><code> VoiceInteractor.ConfirmationRequest </code></pre> .</p><pre><code>public static final class VoiceInteractionSession.ConfirmationRequest\n</code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.ConfirmationRequest.html
VoiceInteractionSession	A										<section class="prog__container"><p> An active voice interaction session, providing a facility for the implementation to interact with the user in the voice interaction layer. The user interface is initially shown by default, and can be created be overriding <pre><code> onCreateContentView() </code></pre> in which the UI can be built. <p> A voice interaction session can be self-contained, ultimately calling <pre><code> finish() </code></pre> when done. It can also initiate voice interactions with applications by calling <pre><code> startVoiceActivity(Intent) </code></pre> </p><pre><code>public class VoiceInteractionSession\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html
VoiceInteractionSession.Insets	A										<section class="prog__container"><p> Information about where interesting parts of the input method UI appear.</p><pre><code>public static final class VoiceInteractionSession.Insets\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.Insets.html
VoiceInteractionSession.PickOptionRequest	A										<section class="prog__container"><p> A request for the user to pick from a set of option, as per <pre><code> VoiceInteractor.PickOptionRequest </code></pre> .</p><pre><code>public static final class VoiceInteractionSession.PickOptionRequest\n</code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.PickOptionRequest.html
VoiceInteractionSession.Request	A										<section class="prog__container"><p> Base class representing a request from a voice-driver app to perform a particular voice operation with the user. See related subclasses for the types of requests that are possible.</p><pre><code>public static class VoiceInteractionSession.Request\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.Request.html
VoiceInteractionSessionService	A										<section class="prog__container"><p> An active voice interaction session, initiated by a <pre><code> VoiceInteractionService </code></pre> .</p><pre><code>public abstract class VoiceInteractionSessionService\n</code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionSessionService.html
android.service.vr	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/vr/package-summary.html
VrListenerService	A										<section class="prog__container"><p> A service that is bound from the system while running in virtual reality (VR) mode. <p> To extend this class, you must declare the service in your manifest file with the <pre><code> BIND_VR_LISTENER_SERVICE </code></pre> permission and include an intent filter with the <pre><code> SERVICE_INTERFACE </code></pre> action. For example: </p><pre><code>public abstract class VrListenerService\n</code></pre></section>	https://developer.android.com/reference/android/service/vr/VrListenerService.html
android.service.wallpaper	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/wallpaper/package-summary.html
WallpaperService.Engine	A										<section class="prog__container"><p> The actual implementation of a wallpaper. A wallpaper service may have multiple instances running (for example as a real wallpaper and as a preview), each of which is represented by its own Engine instance. You must implement <pre><code> onCreateEngine() </code></pre> to return your concrete Engine implementation.</p><pre><code>public class WallpaperService.Engine\nextends Object</code></pre></section>	https://developer.android.com/reference/android/service/wallpaper/WallpaperService.Engine.html
WallpaperService	A										<section class="prog__container"><p> A wallpaper service is responsible for showing a live wallpaper behind applications that would like to sit on top of it. This service object itself does very little -- its only purpose is to generate instances of <pre><code> WallpaperService.Engine </code></pre> as needed. Implementing a wallpaper thus involves subclassing from this, subclassing an Engine implementation, and implementing <pre><code> onCreateEngine() </code></pre> to return a new instance of your engine.</p><pre><code>public abstract class WallpaperService\n</code></pre></section>	https://developer.android.com/reference/android/service/wallpaper/WallpaperService.html
android.speech	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/speech/package-summary.html
RecognitionListener	A										<section class="prog__container"><p> Used for receiving notifications from the SpeechRecognizer when the recognition related events occur. All the callbacks are executed on the Application main thread.</p><pre><code>public interface RecognitionListener\n</code></pre></section>	https://developer.android.com/reference/android/speech/RecognitionListener.html
RecognitionService.Callback	A										<section class="prog__container"><p> This class receives callbacks from the speech recognition service and forwards them to the user. An instance of this class is passed to the <pre><code> onStartListening(Intent, Callback) </code></pre> method. Recognizers may call these methods on any thread.</p><pre><code>public class RecognitionService.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/speech/RecognitionService.Callback.html
RecognitionService	A										<section class="prog__container"><p> This class provides a base class for recognition service implementations. This class should be extended only in case you wish to implement a new speech recognizer. Please note that the implementation of this service is stateless.</p><pre><code>public abstract class RecognitionService\n</code></pre></section>	https://developer.android.com/reference/android/speech/RecognitionService.html
RecognizerIntent	A										<section class="prog__container"><p> Constants for supporting speech recognition through starting an <pre><code> Intent </code></pre></p><pre><code>public class RecognizerIntent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/speech/RecognizerIntent.html
RecognizerResultsIntent	A										<section class="prog__container"><p> Constants for intents related to showing speech recognition results. These constants should not be needed for normal utilization of speech recognition. They would only be called if you wanted to trigger a view of voice search results in your application, or implemented if you wanted to offer a different view for voice search results with your application. The standard behavior here for someone receiving an <pre><code> ACTION_VOICE_SEARCH_RESULTS </code></pre> is to first retrieve the list of <pre><code> EXTRA_VOICE_SEARCH_RESULT_STRINGS </code></pre> , and use any provided HTML for that result in <pre><code> EXTRA_VOICE_SEARCH_RESULT_HTML </code></pre> , if available, to display the search results. If that is not available, then the corresponding url for that result in <pre><code> EXTRA_VOICE_SEARCH_RESULT_URLS </code></pre> should be used. And if even that is not available, then a search url should be constructed from the actual recognition result string.</p><pre><code>public class RecognizerResultsIntent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/speech/RecognizerResultsIntent.html
SpeechRecognizer	A										<section class="prog__container"><p> This class provides access to the speech recognition service. This service allows access to the speech recognizer. Do not instantiate this class directly, instead, call <pre><code> createSpeechRecognizer(Context) </code></pre> . This class's methods must be invoked only from the main application thread. <p> The implementation of this API is likely to stream audio to remote servers to perform speech recognition. As such this API is not intended to be used for continuous recognition, which would consume a significant amount of battery and bandwidth. <p> Please note that the application must have <pre><code> RECORD_AUDIO </code></pre> permission to use this class. </p><pre><code>public class SpeechRecognizer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/speech/SpeechRecognizer.html
android.speech.tts	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/speech/tts/package-summary.html
SynthesisCallback	A										<section class="prog__container"><p> A callback to return speech data synthesized by a text to speech engine. The engine can provide streaming audio by calling <pre><code> start(int, int, int) </code></pre> , then <pre><code> audioAvailable(byte[], int, int) </code></pre> until all audio has been provided, then finally <pre><code> done() </code></pre> . <pre><code> error() </code></pre> can be called at any stage in the synthesis process to indicate that an error has occurred, but if the call is made after a call to <pre><code> done() </code></pre> , it might be discarded. <pre><code> done() </code></pre> must be called at the end of synthesis, regardless of errors. All methods can be only called on the synthesis thread.</p><pre><code>public interface SynthesisCallback\n</code></pre></section>	https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html
SynthesisRequest	A										<section class="prog__container"><p> Contains data required by engines to synthesize speech. This data is: <ul> <li> The text to synthesize </li> <li> The synthesis locale, represented as a language, country and a variant. The language is an ISO 639-3 letter language code, and the country is an ISO 3166 alpha 3 code. The variant is not specified. </li> <li> The name of the voice requested for this synthesis. May be empty if the client uses <pre><code> setLanguage(Locale) </code></pre> instead of <pre><code> setVoice(Voice) </code></pre> </li> <li> The synthesis speech rate, with 100 being the normal, and higher values representing higher speech rates. </li> <li> The voice pitch, with 100 being the default pitch. </li> </ul> Any additional parameters sent to the text to speech service are passed in uninterpreted, see the <pre><code> params </code></pre> argument in <pre><code> speak(CharSequence, int, Bundle, String) </code></pre> and <pre><code> synthesizeToFile(CharSequence, Bundle, File, String) </code></pre> .</p><pre><code>public final class SynthesisRequest\nextends Object</code></pre></section>	https://developer.android.com/reference/android/speech/tts/SynthesisRequest.html
TextToSpeech.Engine	A										<section class="prog__container"><p> Constants and parameter names for controlling text-to-speech. These include: <ul> <li> Intents to ask engine to install data or check its data and extras for a TTS engine's check data activity. </li> <li> Keys for the parameters passed with speak commands, e.g. <pre><code> KEY_PARAM_UTTERANCE_ID </code></pre> , <pre><code> KEY_PARAM_STREAM </code></pre> . </li> <li> A list of feature strings that engines might support, e.g <pre><code> KEY_FEATURE_NETWORK_SYNTHESIS </code></pre> . These values may be passed in to <pre><code> speak(CharSequence, int, Bundle, String) </code></pre> and <pre><code> synthesizeToFile(CharSequence, Bundle, File, String) </code></pre> to modify engine behaviour. The engine can be queried for the set of features it supports through <pre><code> getFeatures(java.util.Locale) </code></pre> . </li> </ul></p><pre><code>public class TextToSpeech.Engine\nextends Object</code></pre></section>	https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html
TextToSpeech.EngineInfo	A										<section class="prog__container"><p> Information about an installed text-to-speech engine.</p><pre><code>public static class TextToSpeech.EngineInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/speech/tts/TextToSpeech.EngineInfo.html
TextToSpeech	A										<section class="prog__container"><p> Synthesizes speech from text for immediate playback or to create a sound file. <p> A TextToSpeech instance can only be used to synthesize text once it has completed its initialization. Implement the <pre><code> TextToSpeech.OnInitListener </code></pre> to be notified of the completion of the initialization. <br> When you are done using the TextToSpeech instance, call the <pre><code> shutdown() </code></pre> method to release the native resources used by the TextToSpeech engine. </br> </p><pre><code>public class TextToSpeech\nextends Object</code></pre></section>	https://developer.android.com/reference/android/speech/tts/TextToSpeech.html
TextToSpeech.OnInitListener	A										<section class="prog__container"><p> Interface definition of a callback to be invoked indicating the completion of the TextToSpeech engine initialization.</p><pre><code>public static interface TextToSpeech.OnInitListener\n</code></pre></section>	https://developer.android.com/reference/android/speech/tts/TextToSpeech.OnInitListener.html
TextToSpeech.OnUtteranceCompletedListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 18. </strong> <br/> Use <pre><code> UtteranceProgressListener </code></pre> instead. </p><pre><code>public static interface TextToSpeech.OnUtteranceCompletedListener\n</code></pre></section>	https://developer.android.com/reference/android/speech/tts/TextToSpeech.OnUtteranceCompletedListener.html
TextToSpeechService	A										<section class="prog__container"><p> Abstract base class for TTS engine implementations. The following methods need to be implemented: <ul> <li> <pre><code> onIsLanguageAvailable(String, String, String) </code></pre> </li> <li> <pre><code> onLoadLanguage(String, String, String) </code></pre> </li> <li> <pre><code> onGetLanguage() </code></pre> </li> <li> <pre><code> onSynthesizeText(SynthesisRequest, SynthesisCallback) </code></pre> </li> <li> <pre><code> onStop() </code></pre> </li> </ul> The first three deal primarily with language management, and are used to query the engine for it's support for a given language and indicate to it that requests in a given language are imminent. <pre><code> onSynthesizeText(SynthesisRequest, SynthesisCallback) </code></pre> is central to the engine implementation. The implementation should synthesize text as per the request parameters and return synthesized data via the supplied callback. This class and its helpers will then consume that data, which might mean queuing it for playback or writing it to a file or similar. All calls to this method will be on a single thread, which will be different from the main thread of the service. Synthesis must be synchronous which means the engine must NOT hold on to the callback or call any methods on it after the method returns. <pre><code> onStop() </code></pre> tells the engine that it should stop all ongoing synthesis, if any. Any pending data from the current synthesis will be discarded. <pre><code> onGetLanguage() </code></pre> is not required as of JELLYBEAN_MR2 (API 18) and later, it is only called on earlier versions of Android. API Level 20 adds support for Voice objects. Voices are an abstraction that allow the TTS service to expose multiple backends for a single locale. Each one of them can have a different features set. In order to fully take advantage of voices, an engine should implement the following methods: <ul> <li> <pre><code> onGetVoices() </code></pre> </li> <li> <pre><code> onIsValidVoiceName(String) </code></pre> </li> <li> <pre><code> onLoadVoice(String) </code></pre> </li> <li> <pre><code> onGetDefaultVoiceNameFor(String, String, String) </code></pre> </li> </ul> The first three methods are siblings of the <pre><code> onGetLanguage() </code></pre> , <pre><code> onIsLanguageAvailable(String, String, String) </code></pre> and <pre><code> onLoadLanguage(String, String, String) </code></pre> methods. The last one, <pre><code> onGetDefaultVoiceNameFor(String, String, String) </code></pre> is a link between locale and voice based methods. Since API level 21 <pre><code> setLanguage(Locale) </code></pre> is implemented by calling <pre><code> setVoice(Voice) </code></pre> with the voice returned by <pre><code> onGetDefaultVoiceNameFor(String, String, String) </code></pre> . If the client uses a voice instead of a locale, <pre><code> SynthesisRequest </code></pre> will contain the requested voice name. The default implementations of Voice-related methods implement them using the pre-existing locale-based implementation.</p><pre><code>public abstract class TextToSpeechService\n</code></pre></section>	https://developer.android.com/reference/android/speech/tts/TextToSpeechService.html
UtteranceProgressListener	A										<section class="prog__container"><p> Listener for events relating to the progress of an utterance through the synthesis queue. Each utterance is associated with a call to <pre><code> speak(CharSequence, int, Bundle, String) </code></pre> or <pre><code> synthesizeToFile(CharSequence, Bundle, File, String) </code></pre> with an associated utterance identifier, as per <pre><code> KEY_PARAM_UTTERANCE_ID </code></pre> . The callbacks specified in this method can be called from multiple threads.</p><pre><code>public abstract class UtteranceProgressListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/speech/tts/UtteranceProgressListener.html
Voice	A										<section class="prog__container"><p> Characteristics and features of a Text-To-Speech Voice. Each TTS Engine can expose multiple voices for each locale, with different set of features.</p><pre><code>public class Voice\nextends Object</code></pre></section>	https://developer.android.com/reference/android/speech/tts/Voice.html
AnimatorRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be an animator resource reference (e.g. <pre><code> android.R.animator.fade_in </code></pre> ).</p><pre><code>public abstract @interface AnimatorRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/AnimatorRes.html
AnimRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be an anim resource reference (e.g. <pre><code> android.R.anim.fade_in </code></pre> ).</p><pre><code>public abstract @interface AnimRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/AnimRes.html
AnyRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a resource reference of any type. If the specific type is known, use one of the more specific annotations instead, such as <pre><code> StringRes </code></pre> or <pre><code> DrawableRes </code></pre> .</p><pre><code>public abstract @interface AnyRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/AnyRes.html
AnyThread	A										<section class="prog__container"><p> Denotes that the annotated method can be called from any thread (e.g. it is "thread safe".) If the annotated element is a class, then all methods in the class can be called from any thread. <p> The main purpose of this method is to indicate that you believe a method can be called from any thread; static tools can then check that nothing you call from within this method or class have more strict threading requirements. <p> Example: <pre><pre><code> @AnyThread public void deliverResult(D data) { ... } </code></pre></pre> </p><pre><code>public abstract @interface AnyThread\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/AnyThread.html
ArrayRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be an array resource reference (e.g. <pre><code> android.R.array.phoneTypes </code></pre> ).</p><pre><code>public abstract @interface ArrayRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/ArrayRes.html
AttrRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be an attribute reference (e.g. <pre><code> android.R.attr.action </code></pre> ).</p><pre><code>public abstract @interface AttrRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/AttrRes.html
BinderThread	A										<section class="prog__container"><p> Denotes that the annotated method should only be called on the binder thread. If the annotated element is a class, then all methods in the class should be called on the binder thread. <p> Example: <pre><pre><code> @BinderThread public BeamShareData createBeamShareData() { ... } </code></pre></pre> </p><pre><code>public abstract @interface BinderThread\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/BinderThread.html
BoolRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a boolean resource reference.</p><pre><code>public abstract @interface BoolRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/BoolRes.html
CallSuper	A										<section class="prog__container"><p> Denotes that any overriding methods should invoke this method as well. <p> Example: <pre><pre><code> @CallSuper public abstract void onFocusLost(); </code></pre></pre> </p><pre><code>public abstract @interface CallSuper\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/CallSuper.html
CheckResult	A										<section class="prog__container"><p> Denotes that the annotated method returns a result that it typically is an error to ignore. This is usually used for methods that have no side effect, so calling it without actually looking at the result usually means the developer has misunderstood what the method does. <p> Example: <pre><pre><code>public @CheckResult String trim(String s) { return s.trim(); } ... s.trim(); // this is probably an error s = s.trim(); // ok </code></pre></pre> </p><pre><code>public abstract @interface CheckResult\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/CheckResult.html
ColorInt	A										<section class="prog__container"><p> Denotes that the annotated element represents a packed color int, <pre><code> AARRGGBB </code></pre> . If applied to an int array, every element in the array represents a color integer. <p> Example: <pre><pre><code>public abstract void setTextColor(@ColorInt int color); </code></pre></pre> </p><pre><code>public abstract @interface ColorInt\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/ColorInt.html
ColorRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a color resource reference (e.g. <pre><code> android.R.color.black </code></pre> ).</p><pre><code>public abstract @interface ColorRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/ColorRes.html
DimenRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a dimension resource reference (e.g. <pre><code> android.R.dimen.app_icon_size </code></pre> ).</p><pre><code>public abstract @interface DimenRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/DimenRes.html
Dimension	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to represent a dimension.</p><pre><code>public abstract @interface Dimension\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/Dimension.html
DrawableRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a drawable resource reference (e.g. <pre><code> android.R.attr.alertDialogIcon </code></pre> ).</p><pre><code>public abstract @interface DrawableRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/DrawableRes.html
FloatRange	A										<section class="prog__container"><p> Denotes that the annotated element should be a float or double in the given range <p> Example: <pre><pre><code> @FloatRange(from=0.0,to=1.0) public float getAlpha() { ... } </code></pre></pre> </p><pre><code>public abstract @interface FloatRange\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/FloatRange.html
FractionRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a fraction resource reference.</p><pre><code>public abstract @interface FractionRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/FractionRes.html
IdRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be an id resource reference (e.g. <pre><code> android.R.id.copy </code></pre> ).</p><pre><code>public abstract @interface IdRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/IdRes.html
IntDef	A										<section class="prog__container"><p> Denotes that the annotated element of integer type, represents a logical type and that its value should be one of the explicitly named constants. If the IntDef#flag() attribute is set to true, multiple constants can be combined. <p> Example: <pre><pre><code> @Retention(SOURCE) @IntDef({NAVIGATION_MODE_STANDARD, NAVIGATION_MODE_LIST, NAVIGATION_MODE_TABS}) public @interface NavigationMode {} public static final int NAVIGATION_MODE_STANDARD = 0; public static final int NAVIGATION_MODE_LIST = 1; public static final int NAVIGATION_MODE_TABS = 2; ... public abstract void setNavigationMode(@NavigationMode int mode); @NavigationMode public abstract int getNavigationMode(); </code></pre></pre> For a flag, set the flag attribute: <pre><pre><code> @IntDef( flag = true, value = {NAVIGATION_MODE_STANDARD, NAVIGATION_MODE_LIST, NAVIGATION_MODE_TABS}) </code></pre></pre> </p><pre><code>public abstract @interface IntDef\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/IntDef.html
IntegerRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be an integer resource reference (e.g. <pre><code> android.R.integer.config_shortAnimTime </code></pre> ).</p><pre><code>public abstract @interface IntegerRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/IntegerRes.html
InterpolatorRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be an interpolator resource reference (e.g. <pre><code> android.R.interpolator.cycle </code></pre> ).</p><pre><code>public abstract @interface InterpolatorRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/InterpolatorRes.html
IntRange	A										<section class="prog__container"><p> Denotes that the annotated element should be an int or long in the given range <p> Example: <pre><pre><code> @IntRange(from=0,to=255) public int getAlpha() { ... } </code></pre></pre> </p><pre><code>public abstract @interface IntRange\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/IntRange.html
Keep	A										<section class="prog__container"><p> Denotes that the annotated element should not be removed when the code is minified at build time. This is typically used on methods and classes that are accessed only via reflection so a compiler may think that the code is unused. <p> Example: <pre><pre><code> @Keep public void foo() { ... } </code></pre></pre> </p><pre><code>public abstract @interface Keep\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/Keep.html
LayoutRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a layout resource reference (e.g. <pre><code> android.R.layout.list_content </code></pre> ).</p><pre><code>public abstract @interface LayoutRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/LayoutRes.html
MainThread	A										<section class="prog__container"><p> Denotes that the annotated method should only be called on the main thread. If the annotated element is a class, then all methods in the class should be called on the main thread. <p> Example: <pre><pre><code> @MainThread public void deliverResult(D data) { ... } </code></pre></pre> </p><pre><code>public abstract @interface MainThread\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/MainThread.html
MenuRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a menu resource reference.</p><pre><code>public abstract @interface MenuRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/MenuRes.html
NonNull	A										<section class="prog__container"><p> Denotes that a parameter, field or method return value can never be null. <p> This is a marker annotation and it has no specific attributes. </p><pre><code>public abstract @interface NonNull\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/NonNull.html
Nullable	A										<section class="prog__container"><p> Denotes that a parameter, field or method return value can be null. <p> When decorating a method call parameter, this denotes that the parameter can legitimately be null and the method will gracefully deal with it. Typically used on optional parameters. <p> When decorating a method, this denotes the method might legitimately return null. <p> This is a marker annotation and it has no specific attributes. </p><pre><code>public abstract @interface Nullable\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/Nullable.html
android.support.annotation	A										<section class="prog__container">Example:</section>	https://developer.android.com/reference/android/support/annotation/package-summary.html
PluralsRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a plurals resource reference.</p><pre><code>public abstract @interface PluralsRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/PluralsRes.html
Px	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to represent a pixel dimension.</p><pre><code>public abstract @interface Px\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/Px.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/annotation/R.html
RawRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a raw resource reference.</p><pre><code>public abstract @interface RawRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/RawRes.html
RequiresApi	A										<section class="prog__container"><p> Denotes that the annotated element should only be called on the given API level or higher. <p> This is similar in purpose to the older <pre><code> @TargetApi </code></pre> annotation, but more clearly expresses that this is a requirement on the caller, rather than being used to "suppress" warnings within the method that exceed the <pre><code> minSdkVersion </code></pre> . </p><pre><code>public abstract @interface RequiresApi\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/RequiresApi.html
RequiresPermission	A										<section class="prog__container"><p> Denotes that the annotated element requires (or may require) one or more permissions. <p> Example of requiring a single permission: <pre><pre><code> @RequiresPermission(Manifest.permission.SET_WALLPAPER) public abstract void setWallpaper(Bitmap bitmap) throws IOException; @RequiresPermission(ACCESS_COARSE_LOCATION) public abstract Location getLastKnownLocation(String provider); </code></pre></pre> Example of requiring at least one permission from a set: <pre><pre><code> @RequiresPermission(anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}) public abstract Location getLastKnownLocation(String provider); </code></pre></pre> Example of requiring multiple permissions: <pre><pre><code> @RequiresPermission(allOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}) public abstract Location getLastKnownLocation(String provider); </code></pre></pre> Example of requiring separate read and write permissions for a content provider: <pre><pre><code> @RequiresPermission.Read(@RequiresPermission(READ_HISTORY_BOOKMARKS)) @RequiresPermission.Write(@RequiresPermission(WRITE_HISTORY_BOOKMARKS)) public static final Uri BOOKMARKS_URI = Uri.parse("content://browser/bookmarks"); </code></pre></pre> <p> When specified on a parameter, the annotation indicates that the method requires a permission which depends on the value of the parameter. For example, consider <pre><code> android.app.Activity.startActivity(android.content.Intent) </code></pre> : <pre><pre><code>public void startActivity(@RequiresPermission Intent intent) { ... } </code></pre></pre> Notice how there are no actual permission names listed in the annotation. The actual permissions required will depend on the particular intent passed in. For example, the code may look like this: <pre><pre><code>Intent intent = new Intent(Intent.ACTION_CALL); startActivity(intent); </code></pre></pre> and the actual permission requirement for this particular intent is described on the Intent name itself: <pre><pre><code> @RequiresPermission(Manifest.permission.CALL_PHONE) public static final String ACTION_CALL = "android.intent.action.CALL"; </code></pre></pre> </p><pre><code>public abstract @interface RequiresPermission\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/RequiresPermission.html
RequiresPermission.Read	A										<section class="prog__container"><p> Specifies that the given permission is required for read operations. <p> When specified on a parameter, the annotation indicates that the method requires a permission which depends on the value of the parameter (and typically the corresponding field passed in will be one of a set of constants which have been annotated with a <pre><code> @RequiresPermission </code></pre> annotation.) </p><pre><code>public static abstract @interface RequiresPermission.Read\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/RequiresPermission.Read.html
RequiresPermission.Write	A										<section class="prog__container"><p> Specifies that the given permission is required for write operations. <p> When specified on a parameter, the annotation indicates that the method requires a permission which depends on the value of the parameter (and typically the corresponding field passed in will be one of a set of constants which have been annotated with a <pre><code> @RequiresPermission </code></pre> annotation.) </p><pre><code>public static abstract @interface RequiresPermission.Write\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/RequiresPermission.Write.html
RestrictTo	A										<section class="prog__container"><p> Denotes that the annotated element should only be accessed from within a specific scope (as defined by <pre><code> RestrictTo.Scope </code></pre> ). <p> Example of restricting usage within a library (based on gradle group ID): <pre><pre><code> @RestrictTo(GROUP_ID) public void resetPaddingToInitialValues() { ... </code></pre></pre> Example of restricting usage to tests: <pre><pre><code> @RestrictScope(TESTS) public abstract int getUserId(); </code></pre></pre> Example of restricting usage to subclasses: <pre><pre><code> @RestrictScope(SUBCLASSES) public void onDrawForeground(Canvas canvas) { ... </code></pre></pre> </p><pre><code>public abstract @interface RestrictTo\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/RestrictTo.html
RestrictTo.Scope	A										<section class="prog__container"><p> <em> This field is deprecated. Use <pre><code> LIBRARY_GROUP </code></pre> instead </em></p><pre><code>public static final enum RestrictTo.Scope\n</code></pre></section>	https://developer.android.com/reference/android/support/annotation/RestrictTo.Scope.html
Size	A										<section class="prog__container"><p> Denotes that the annotated element should have a given size or length. Note that "-1" means "unset". Typically used with a parameter or return value of type array or collection. <p> Example: <pre><pre><code>public void getLocationInWindow(@Size(2) int[] location) { ... } </code></pre></pre> </p><pre><code>public abstract @interface Size\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/Size.html
StringDef	A										<section class="prog__container"><p> Denotes that the annotated String element, represents a logical type and that its value should be one of the explicitly named constants. <p> Example: <pre><pre><code> @Retention(SOURCE) @StringDef({ POWER_SERVICE, WINDOW_SERVICE, LAYOUT_INFLATER_SERVICE }) public @interface ServiceName {} public static final String POWER_SERVICE = "power"; public static final String WINDOW_SERVICE = "window"; public static final String LAYOUT_INFLATER_SERVICE = "layout_inflater"; ... public abstract Object getSystemService(@ServiceName String name); </code></pre></pre> </p><pre><code>public abstract @interface StringDef\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/StringDef.html
StringRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a String resource reference (e.g. <pre><code> android.R.string.ok </code></pre> ).</p><pre><code>public abstract @interface StringRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/StringRes.html
StyleableRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a styleable resource reference (e.g. <pre><code> android.R.styleable.TextView_text </code></pre> ).</p><pre><code>public abstract @interface StyleableRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/StyleableRes.html
StyleRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a style resource reference (e.g. <pre><code> android.R.style.TextAppearance </code></pre> ).</p><pre><code>public abstract @interface StyleRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/StyleRes.html
TransitionRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a transition resource reference.</p><pre><code>public abstract @interface TransitionRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/TransitionRes.html
UiThread	A										<section class="prog__container"><p> Denotes that the annotated method or constructor should only be called on the UI thread. If the annotated element is a class, then all methods in the class should be called on the UI thread. <p> Example: <pre><pre><code> @UiThread public abstract void setText(@NonNull String text) { ... } </code></pre></pre> </p><pre><code>public abstract @interface UiThread\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/UiThread.html
VisibleForTesting	A										<section class="prog__container"><p> Denotes that the class, method or field has its visibility relaxed, so that it is more widely visible than otherwise necessary to make code testable. <p> You can optionally specify what the visibility <b> should </b> have been if not for testing; this allows tools to catch unintended access from within production code. <p> Example: <pre><pre><code> @VisibleForTesting(otherwise = VisibleForTesting.PROTECTED) public String printDiagnostics() { ... } </code></pre></pre> If not specified, the intended visibility is assumed to be private. </p><pre><code>public abstract @interface VisibleForTesting\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/VisibleForTesting.html
WorkerThread	A										<section class="prog__container"><p> Denotes that the annotated method should only be called on a worker thread. If the annotated element is a class, then all methods in the class should be called on a worker thread. <p> Example: <pre><pre><code> @WorkerThread protected abstract FilterResults performFiltering(CharSequence constraint); </code></pre></pre> </p><pre><code>public abstract @interface WorkerThread\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/WorkerThread.html
XmlRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be an XML resource reference.</p><pre><code>public abstract @interface XmlRes\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/annotation/XmlRes.html
android.support.annotations	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/annotations/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/annotations/R.html
ContentRecommendation.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> ContentRecommendation </code></pre> objects. Provides a convenient way to set the various fields of a <pre><code> ContentRecommendation </code></pre> . <p> Example: <pre class="prettyprint"> ContentRecommendation rec = new ContentRecommendation.Builder() .setIdInfo(id, "MyTagId") .setTitle("My Content Recommendation") .setText("An example of content recommendation") .setContentImage(myBitmap) .setBadgeIcon(R.drawable.app_icon) .setGroup("Trending") .build(); </pre> </p><pre><code>public static final class ContentRecommendation.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/app/recommendation/ContentRecommendation.Builder.html
ContentRecommendation.ContentMaturity	A										<section class="prog__container"><p> Returns the annotation type of this annotation.</p><pre><code>public static abstract @interface ContentRecommendation.ContentMaturity\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/app/recommendation/ContentRecommendation.ContentMaturity.html
ContentRecommendation.ContentPricing	A										<section class="prog__container"><p> Returns the annotation type of this annotation.</p><pre><code>public static abstract @interface ContentRecommendation.ContentPricing\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/app/recommendation/ContentRecommendation.ContentPricing.html
ContentRecommendation.ContentStatus	A										<section class="prog__container"><p> Returns the annotation type of this annotation.</p><pre><code>public static abstract @interface ContentRecommendation.ContentStatus\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/app/recommendation/ContentRecommendation.ContentStatus.html
ContentRecommendation.ContentType	A										<section class="prog__container"><p> Returns the annotation type of this annotation.</p><pre><code>public static abstract @interface ContentRecommendation.ContentType\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/app/recommendation/ContentRecommendation.ContentType.html
ContentRecommendation	A										<section class="prog__container"><p> The ContentRecommendation object encapsulates all application provided data for a single content recommendation item.</p><pre><code>public final class ContentRecommendation\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/app/recommendation/ContentRecommendation.html
ContentRecommendation.IntentData	A										<section class="prog__container"><p> Object used to encapsulate the data to be used to build the <pre><code> PendingIntent </code></pre> object associated with a given content recommendation, at the time this recommendation gets posted to the home Screen. <p> The members of this object correspond to the fields passed into the <pre><code> PendingIntent </code></pre> factory methods, when creating a new PendingIntent. </p><pre><code>public static class ContentRecommendation.IntentData\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/app/recommendation/ContentRecommendation.IntentData.html
ContentRecommendation.IntentType	A										<section class="prog__container"><p> Returns the annotation type of this annotation.</p><pre><code>public static abstract @interface ContentRecommendation.IntentType\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/app/recommendation/ContentRecommendation.IntentType.html
android.support.app.recommendation	A										<section class="prog__container">Helper class to add content info extensions to notifications. </section>	https://developer.android.com/reference/android/support/app/recommendation/package-summary.html
RecommendationExtender	A										<section class="prog__container"><p> <p> Helper class to add content info extensions to notifications. To create a notification with content info extensions: <ol> <li> Create an <pre><code> Notification.Action.Builder </code></pre> , setting any desired properties. <li> Create a <pre><code> RecommendationExtender </code></pre> . <li> Set content info specific properties using the <pre><code> add </code></pre> and <pre><code> set </code></pre> methods of <pre><code> RecommendationExtender </code></pre> . <li> Call <pre><code> Notification.Builder.extend(Notification.Extender) </code></pre> to apply the extensions to a notification. </li> </li> </li> </li> </ol> <pre class="prettyprint">Notification notification = new Notification.Builder(context) * ... * .extend(new RecommendationExtender() * .set*(...)) * .build(); * </pre> <p> Content info extensions can be accessed on an existing notification by using the <pre><code> RecommendationExtender(Notification) </code></pre> constructor, and then using the <pre><code> get </code></pre> methods to access values. </p><pre><code>public final class RecommendationExtender\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/app/recommendation/RecommendationExtender.html
android.support.compat	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/compat/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/compat/R.html
android.support.coreui	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/coreui/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/coreui/R.html
android.support.coreutils	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/coreutils/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/coreutils/R.html
CustomTabsCallback	A										<section class="prog__container"><p> A callback class for custom tabs client to get messages regarding events in their custom tabs.</p><pre><code>public class CustomTabsCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/customtabs/CustomTabsCallback.html
CustomTabsClient	A										<section class="prog__container"><p> Class to communicate with a <pre><code> CustomTabsService </code></pre> and create <pre><code> CustomTabsSession </code></pre> from it.</p><pre><code>public class CustomTabsClient\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html
CustomTabsIntent.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> CustomTabsIntent </code></pre> objects.</p><pre><code>public static final class CustomTabsIntent.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/customtabs/CustomTabsIntent.Builder.html
CustomTabsIntent	A										<section class="prog__container"><p> Class holding the <pre><code> Intent </code></pre> and start bundle for a Custom Tabs Activity. <p> <strong> Note: </strong> The constants below are public for the browser implementation's benefit. You are strongly encouraged to use <pre><code> CustomTabsIntent.Builder </code></pre> . </p><pre><code>public final class CustomTabsIntent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/customtabs/CustomTabsIntent.html
CustomTabsService	A										<section class="prog__container"><p> Abstract service class for implementing Custom Tabs related functionality. The service should be responding to the action ACTION_CUSTOM_TABS_CONNECTION. This class should be used by implementers that want to provide Custom Tabs functionality, not by clients that want to launch Custom Tabs.</p><pre><code>public abstract class CustomTabsService\n</code></pre></section>	https://developer.android.com/reference/android/support/customtabs/CustomTabsService.html
CustomTabsServiceConnection	A										<section class="prog__container"><p> Abstract <pre><code> ServiceConnection </code></pre> to use while binding to a <pre><code> CustomTabsService </code></pre> . Any client implementing this is responsible for handling changes related with the lifetime of the connection like rebinding on disconnect.</p><pre><code>public abstract class CustomTabsServiceConnection\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/customtabs/CustomTabsServiceConnection.html
CustomTabsSession	A										<section class="prog__container"><p> A class to be used for Custom Tabs related communication. Clients that want to launch Custom Tabs can use this class exclusively to handle all related communication.</p><pre><code>public final class CustomTabsSession\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/customtabs/CustomTabsSession.html
CustomTabsSessionToken	A										<section class="prog__container"><p> Wrapper class that can be used as a unique identifier for a session. Also contains an accessor for the <pre><code> CustomTabsCallback </code></pre> for the session if there was any.</p><pre><code>public class CustomTabsSessionToken\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/customtabs/CustomTabsSessionToken.html
android.support.customtabs	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/customtabs/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/customtabs/R.html
android.support.design	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/design/package-summary.html
R.anim	A										<section class="prog__container"><pre><code>public static final class R.anim\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/R.anim.html
R.animator	A										<section class="prog__container"><pre><code>public static final class R.animator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/R.animator.html
R.attr	A										<section class="prog__container"><p> Background for the FloatingActionButton <p> May be a reference to another resource, in the form " <pre><code> @[+][ <i> package </i> :] <i> type </i> / <i> name </i> </code></pre> " or a theme attribute in the form " <pre><code> ?[ <i> package </i> :] <i> type </i> / <i> name </i> </code></pre> ". </p><pre><code>public static final class R.attr\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/R.attr.html
R.color	A										<section class="prog__container"><pre><code>public static final class R.color\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/R.color.html
R.dimen	A										<section class="prog__container"><pre><code>public static final class R.dimen\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/R.dimen.html
R.drawable	A										<section class="prog__container"><pre><code>public static final class R.drawable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/R.drawable.html
R	A										<section class="prog__container"><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/R.html
R.id	A										<section class="prog__container"><pre><code>public static final class R.id\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/R.id.html
R.integer	A										<section class="prog__container"><pre><code>public static final class R.integer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/R.integer.html
R.layout	A										<section class="prog__container"><pre><code>public static final class R.layout\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/R.layout.html
R.string	A										<section class="prog__container"><p> The class name to the ScrollingChildBehavior required for AppBarLayout</p><pre><code>public static final class R.string\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/R.string.html
R.style	A										<section class="prog__container"><pre><code>public static final class R.style\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/R.style.html
R.styleable	A										<section class="prog__container"><p> Attributes that can be used with a AppBarLayout.</p><pre><code>public static final class R.styleable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/R.styleable.html
AppBarLayout.Behavior.DragCallback	A										<section class="prog__container"><p> Callback to allow control over any <pre><code> AppBarLayout </code></pre> dragging.</p><pre><code>public static abstract class AppBarLayout.Behavior.DragCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/AppBarLayout.Behavior.DragCallback.html
AppBarLayout.Behavior	A										<section class="prog__container"><p> The default <pre><code> AppBarLayout.Behavior </code></pre> for <pre><code> AppBarLayout </code></pre> . Implements the necessary nested scroll handling with offsetting.</p><pre><code>public static class AppBarLayout.Behavior\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/AppBarLayout.Behavior.html
AppBarLayout.Behavior.SavedState	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> describeContents() </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p><pre><code>protected static class AppBarLayout.Behavior.SavedState\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/AppBarLayout.Behavior.SavedState.html
AppBarLayout	A										<section class="prog__container"><p> AppBarLayout is a vertical <pre><code> LinearLayout </code></pre> which implements many of the features of material designs app bar concept, namely scrolling gestures. <p> Children should provide their desired scrolling behavior through <pre><code> setScrollFlags(int) </code></pre> and the associated layout xml attribute: <pre><code> app:layout_scrollFlags </code></pre> . <p> This view depends heavily on being used as a direct child within a <pre><code> CoordinatorLayout </code></pre> . If you use AppBarLayout within a different <pre><code> ViewGroup </code></pre> , most of it's functionality will not work. <p> AppBarLayout also requires a separate scrolling sibling in order to know when to scroll. The binding is done through the <pre><code> AppBarLayout.ScrollingViewBehavior </code></pre> behavior class, meaning that you should set your scrolling view's behavior to be an instance of <pre><code> AppBarLayout.ScrollingViewBehavior </code></pre> . A string resource containing the full class name is available. <pre> &lt;android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;android.support.v4.widget.NestedScrollView android:layout_width="match_parent" android:layout_height="match_parent" app:layout_behavior="@string/appbar_scrolling_view_behavior"&gt; &lt;!-- Your scrolling content --&gt; &lt;/android.support.v4.widget.NestedScrollView&gt; &lt;android.support.design.widget.AppBarLayout android:layout_height="wrap_content" android:layout_width="match_parent"&gt; &lt;android.support.v7.widget.Toolbar ... app:layout_scrollFlags="scroll|enterAlways"/&gt; &lt;android.support.design.widget.TabLayout ... app:layout_scrollFlags="scroll|enterAlways"/&gt; &lt;/android.support.design.widget.AppBarLayout&gt; &lt;/android.support.design.widget.CoordinatorLayout&gt; </pre> </p><pre><code>public class AppBarLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/AppBarLayout.html
AppBarLayout.LayoutParams	A										<section class="prog__container"><p> When entering (scrolling on screen) the view will scroll on any downwards scroll event, regardless of whether the scrolling view is also scrolling.</p><pre><code>public static class AppBarLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/AppBarLayout.LayoutParams.html
AppBarLayout.OnOffsetChangedListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when an <pre><code> AppBarLayout </code></pre> 's vertical offset changes.</p><pre><code>public static interface AppBarLayout.OnOffsetChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/AppBarLayout.OnOffsetChangedListener.html
AppBarLayout.ScrollingViewBehavior	A										<section class="prog__container"><p> Behavior which should be used by <pre><code> View </code></pre> s which can scroll vertically and support nested scrolling to automatically scroll any <pre><code> AppBarLayout </code></pre> siblings.</p><pre><code>public static class AppBarLayout.ScrollingViewBehavior\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/AppBarLayout.ScrollingViewBehavior.html
BaseTransientBottomBar.BaseCallback	A										<section class="prog__container"><p> Base class for <pre><code> BaseTransientBottomBar </code></pre> callbacks.</p><pre><code>public static abstract class BaseTransientBottomBar.BaseCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BaseTransientBottomBar.BaseCallback.html
BaseTransientBottomBar.ContentViewCallback	A										<section class="prog__container"><p> Interface that defines the behavior of the main content of a transient bottom bar.</p><pre><code>public static interface BaseTransientBottomBar.ContentViewCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BaseTransientBottomBar.ContentViewCallback.html
BaseTransientBottomBar	A										<section class="prog__container"><p> Base class for lightweight transient bars that are displayed along the bottom edge of the application window.</p><pre><code>public abstract class BaseTransientBottomBar\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BaseTransientBottomBar.html
BottomNavigationView	A										<section class="prog__container"><p> <p> Represents a standard bottom navigation bar for application. It is an implementation of material design bottom navigation . </p><pre><code>public class BottomNavigationView\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BottomNavigationView.html
BottomNavigationView.OnNavigationItemSelectedListener	A										<section class="prog__container"><p> Listener for handling events on bottom navigation items.</p><pre><code>public static interface BottomNavigationView.OnNavigationItemSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BottomNavigationView.OnNavigationItemSelectedListener.html
BottomSheetBehavior.BottomSheetCallback	A										<section class="prog__container"><p> Callback for monitoring events about bottom sheets.</p><pre><code>public static abstract class BottomSheetBehavior.BottomSheetCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BottomSheetBehavior.BottomSheetCallback.html
BottomSheetBehavior	A										<section class="prog__container"><p> An interaction behavior plugin for a child view of <pre><code> CoordinatorLayout </code></pre> to make it work as a bottom sheet.</p><pre><code>public class BottomSheetBehavior\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BottomSheetBehavior.html
BottomSheetBehavior.SavedState	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> describeContents() </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p><pre><code>protected static class BottomSheetBehavior.SavedState\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BottomSheetBehavior.SavedState.html
BottomSheetDialog	A										<section class="prog__container"><p> Base class for <pre><code> Dialog </code></pre> s styled as a bottom sheet.</p><pre><code>public class BottomSheetDialog\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BottomSheetDialog.html
BottomSheetDialogFragment	A										<section class="prog__container"><p> Modal bottom sheet. This is a version of <pre><code> DialogFragment </code></pre> that shows a bottom sheet using <pre><code> BottomSheetDialog </code></pre> instead of a floating dialog.</p><pre><code>public class BottomSheetDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BottomSheetDialogFragment.html
CollapsingToolbarLayout	A										<section class="prog__container"><p> CollapsingToolbarLayout is a wrapper for <pre><code> Toolbar </code></pre> which implements a collapsing app bar. It is designed to be used as a direct child of a <pre><code> AppBarLayout </code></pre> . CollapsingToolbarLayout contains the following features: <h4> Collapsing title </h4> A title which is larger when the layout is fully visible but collapses and becomes smaller as the layout is scrolled off screen. You can set the title to display via <pre><code> setTitle(CharSequence) </code></pre> . The title appearance can be tweaked via the <pre><code> collapsedTextAppearance </code></pre> and <pre><code> expandedTextAppearance </code></pre> attributes. <h4> Content scrim </h4> A full-bleed scrim which is show or hidden when the scroll position has hit a certain threshold. You can change this via <pre><code> setContentScrim(Drawable) </code></pre> . <h4> Status bar scrim </h4> A scrim which is show or hidden behind the status bar when the scroll position has hit a certain threshold. You can change this via <pre><code> setStatusBarScrim(Drawable) </code></pre> . This only works on <pre><code> LOLLIPOP </code></pre> devices when we set to fit system windows. <h4> Parallax scrolling children </h4> Child views can opt to be scrolled within this layout in a parallax fashion. See <pre><code> COLLAPSE_MODE_PARALLAX </code></pre> and <pre><code> setParallaxMultiplier(float) </code></pre> . <h4> Pinned position children </h4> Child views can opt to be pinned in space globally. This is useful when implementing a collapsing as it allows the <pre><code> Toolbar </code></pre> to be fixed in place even though this layout is moving. See <pre><code> COLLAPSE_MODE_PIN </code></pre> . <p> <strong> Do not manually add views to the Toolbar at run time </strong> . We will add a 'dummy view' to the Toolbar which allows us to work out the available space for the title. This can interfere with any views which you add. </p><pre><code>public class CollapsingToolbarLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html
CollapsingToolbarLayout.LayoutParams	A										<section class="prog__container"><p> The view will act as normal with no collapsing behavior.</p><pre><code>public static class CollapsingToolbarLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.LayoutParams.html
CoordinatorLayout.Behavior	A										<section class="prog__container"><p> Interaction behavior plugin for child views of <pre><code> CoordinatorLayout </code></pre> . <p> A Behavior implements one or more interactions that a user can take on a child view. These interactions may include drags, swipes, flings, or any other gestures. </p><pre><code>public static abstract class CoordinatorLayout.Behavior\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html
CoordinatorLayout.DefaultBehavior	A										<section class="prog__container"><p> Defines the default <pre><code> CoordinatorLayout.Behavior </code></pre> of a <pre><code> View </code></pre> class. <p> When writing a custom view, use this annotation to define the default behavior when used as a direct child of an <pre><code> CoordinatorLayout </code></pre> . The default behavior can be overridden using <pre><code> setBehavior(CoordinatorLayout.Behavior) </code></pre> . </p><pre><code>public static abstract @interface CoordinatorLayout.DefaultBehavior\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.DefaultBehavior.html
CoordinatorLayout	A										<section class="prog__container"><p> CoordinatorLayout is a super-powered <pre><code> FrameLayout </code></pre> . <p> CoordinatorLayout is intended for two primary use cases: </p><pre><code>public class CoordinatorLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html
CoordinatorLayout.LayoutParams	A										<section class="prog__container"><p> Parameters describing the desired layout for a child of a <pre><code> CoordinatorLayout </code></pre> .</p><pre><code>public static class CoordinatorLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.LayoutParams.html
CoordinatorLayout.SavedState	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> describeContents() </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p><pre><code>protected static class CoordinatorLayout.SavedState\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.SavedState.html
FloatingActionButton.Behavior	A										<section class="prog__container"><p> Behavior designed for use with <pre><code> FloatingActionButton </code></pre> instances. Its main function is to move <pre><code> FloatingActionButton </code></pre> views so that any displayed <pre><code> Snackbar </code></pre> s do not cover them.</p><pre><code>public static class FloatingActionButton.Behavior\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/FloatingActionButton.Behavior.html
FloatingActionButton	A										<section class="prog__container"><p> Floating action buttons are used for a special type of promoted action. They are distinguished by a circled icon floating above the UI and have special motion behaviors related to morphing, launching, and the transferring anchor point. <p> Floating action buttons come in two sizes: the default and the mini. The size can be controlled with the <pre><code> fabSize </code></pre> attribute. </p><pre><code>public class FloatingActionButton\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/FloatingActionButton.html
FloatingActionButton.OnVisibilityChangedListener	A										<section class="prog__container"><p> Callback to be invoked when the visibility of a FloatingActionButton changes.</p><pre><code>public static abstract class FloatingActionButton.OnVisibilityChangedListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/FloatingActionButton.OnVisibilityChangedListener.html
NavigationView	A										<section class="prog__container"><p> Represents a standard navigation menu for application. The menu contents can be populated by a menu resource file. <p> NavigationView is typically placed inside a <pre><code> DrawerLayout </code></pre> . </p><pre><code>public class NavigationView\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/NavigationView.html
NavigationView.OnNavigationItemSelectedListener	A										<section class="prog__container"><p> Listener for handling events on navigation items.</p><pre><code>public static interface NavigationView.OnNavigationItemSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/NavigationView.OnNavigationItemSelectedListener.html
NavigationView.SavedState	A										<section class="prog__container"><p> User interface state that is stored by NavigationView for implementing onSaveInstanceState().</p><pre><code>public static class NavigationView.SavedState\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/NavigationView.SavedState.html
android.support.design.widget	A										<section class="prog__container">Represents a standard bottom navigation bar for application. </section>	https://developer.android.com/reference/android/support/design/widget/package-summary.html
Snackbar.Callback	A										<section class="prog__container"><p> Callback class for <pre><code> Snackbar </code></pre> instances. Note: this class is here to provide backwards-compatible way for apps written before the existence of the base <pre><code> BaseTransientBottomBar </code></pre> class.</p><pre><code>public static class Snackbar.Callback\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/Snackbar.Callback.html
Snackbar	A										<section class="prog__container"><p> Snackbars provide lightweight feedback about an operation. They show a brief message at the bottom of the screen on mobile and lower left on larger devices. Snackbars appear above all other elements on screen and only one can be displayed at a time. <p> They automatically disappear after a timeout or after user interaction elsewhere on the screen, particularly after interactions that summon a new surface or activity. Snackbars can be swiped off screen. <p> Snackbars can contain an action which is set via <pre><code> setAction(CharSequence, android.view.View.OnClickListener) </code></pre> . <p> To be notified when a snackbar has been shown or dismissed, you can provide a <pre><code> Snackbar.Callback </code></pre> via <pre><code> addCallback(BaseCallback) </code></pre> . </p><pre><code>public final class Snackbar\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/Snackbar.html
SwipeDismissBehavior	A										<section class="prog__container"><p> An interaction behavior plugin for child views of <pre><code> CoordinatorLayout </code></pre> to provide support for the 'swipe-to-dismiss' gesture.</p><pre><code>public class SwipeDismissBehavior\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/SwipeDismissBehavior.html
SwipeDismissBehavior.OnDismissListener	A										<section class="prog__container"><p> Callback interface used to notify the application that the view has been dismissed.</p><pre><code>public static interface SwipeDismissBehavior.OnDismissListener\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/SwipeDismissBehavior.OnDismissListener.html
TabItem	A										<section class="prog__container"><p> TabItem is a special 'view' which allows you to declare tab items for a <pre><code> TabLayout </code></pre> within a layout. This view is not actually added to TabLayout, it is just a dummy which allows setting of a tab items's text, icon and custom layout. See TabLayout for more information on how to use it.</p><pre><code>public final class TabItem\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/TabItem.html
TabLayout	A										<section class="prog__container"><p> TabLayout provides a horizontal layout to display tabs. <p> Population of the tabs to display is done through <pre><code> TabLayout.Tab </code></pre> instances. You create tabs via <pre><code> newTab() </code></pre> . From there you can change the tab's label or icon via <pre><code> setText(int) </code></pre> and <pre><code> setIcon(int) </code></pre> respectively. To display the tab, you need to add it to the layout via one of the <pre><code> addTab(Tab) </code></pre> methods. For example: <pre> TabLayout tabLayout = ...; tabLayout.addTab(tabLayout.newTab().setText("Tab 1")); tabLayout.addTab(tabLayout.newTab().setText("Tab 2")); tabLayout.addTab(tabLayout.newTab().setText("Tab 3")); </pre> You should set a listener via <pre><code> setOnTabSelectedListener(OnTabSelectedListener) </code></pre> to be notified when any tab's selection state has been changed. <p> You can also add items to TabLayout in your layout through the use of <pre><code> TabItem </code></pre> . An example usage is like so: </p><pre><code>public class TabLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/TabLayout.html
TabLayout.OnTabSelectedListener	A										<section class="prog__container"><p> Callback interface invoked when a tab's selection state changes.</p><pre><code>public static interface TabLayout.OnTabSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/TabLayout.OnTabSelectedListener.html
TabLayout.Tab	A										<section class="prog__container"><p> A tab in this layout. Instances can be created via <pre><code> newTab() </code></pre> .</p><pre><code>public static final class TabLayout.Tab\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/TabLayout.Tab.html
TabLayout.TabLayoutOnPageChangeListener	A										<section class="prog__container"><p> A <pre><code> ViewPager.OnPageChangeListener </code></pre> class which contains the necessary calls back to the provided <pre><code> TabLayout </code></pre> so that the tab position is kept in sync. <p> This class stores the provided TabLayout weakly, meaning that you can use <pre><code> addOnPageChangeListener(OnPageChangeListener) </code></pre> without removing the listener and not cause a leak. </p><pre><code>public static class TabLayout.TabLayoutOnPageChangeListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/TabLayout.TabLayoutOnPageChangeListener.html
TabLayout.ViewPagerOnTabSelectedListener	A										<section class="prog__container"><p> A <pre><code> TabLayout.OnTabSelectedListener </code></pre> class which contains the necessary calls back to the provided <pre><code> ViewPager </code></pre> so that the tab position is kept in sync.</p><pre><code>public static class TabLayout.ViewPagerOnTabSelectedListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/TabLayout.ViewPagerOnTabSelectedListener.html
TextInputEditText	A										<section class="prog__container"><p> A special sub-class of <pre><code> EditText </code></pre> designed for use as a child of <pre><code> TextInputLayout </code></pre> . <p> Using this class allows us to display a hint in the IME when in 'extract' mode. </p><pre><code>public class TextInputEditText\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/TextInputEditText.html
TextInputLayout	A										<section class="prog__container"><p> Layout which wraps an <pre><code> EditText </code></pre> (or descendant) to show a floating label when the hint is hidden due to the user inputting text. <p> Also supports showing an error via <pre><code> setErrorEnabled(boolean) </code></pre> and <pre><code> setError(CharSequence) </code></pre> , and a character counter via <pre><code> setCounterEnabled(boolean) </code></pre> . </p><pre><code>public class TextInputLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/TextInputLayout.html
android.support.fragment	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/fragment/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/fragment/R.html
AnimatedVectorDrawableCompat	A										<section class="prog__container"><p> For API 24 and above, this class is delegating to the framework's <pre><code> AnimatedVectorDrawable </code></pre> . For older API version, this class uses <pre><code> ObjectAnimator </code></pre> and <pre><code> AnimatorSet </code></pre> to animate the properties of a <pre><code> VectorDrawableCompat </code></pre> to create an animated drawable. <p> AnimatedVectorDrawableCompat are defined in the same XML format as <pre><code> AnimatedVectorDrawable </code></pre> . </p><pre><code>public class AnimatedVectorDrawableCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/graphics/drawable/AnimatedVectorDrawableCompat.html
android.support.graphics.drawable	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/graphics/drawable/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/graphics/drawable/R.html
VectorDrawableCompat	A										<section class="prog__container"><pre><code>public class VectorDrawableCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/graphics/drawable/VectorDrawableCompat.html
android.support.mediacompat	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/mediacompat/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/mediacompat/R.html
MultiDex	A										<section class="prog__container"><pre><code>public final class MultiDex\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/multidex/MultiDex.html
MultiDexApplication	A										<section class="prog__container"><p> Minimal MultiDex capable application. To use the legacy multidex library there is 3 possibility: <ul> <li> Declare this class as the application in your AndroidManifest.xml. </li> <li> Have your <pre><code> Application </code></pre> extends this class. </li> <li> Have your <pre><code> Application </code></pre> override attachBaseContext starting with <br> <pre><code> protected void attachBaseContext(Context base) { <br> super.attachBaseContext(base); <br> MultiDex.install(this); </br> </br> </code></pre> </br> </li> <ul> </ul> </ul></p><pre><code>public class MultiDexApplication\n</code></pre></section>	https://developer.android.com/reference/android/support/multidex/MultiDexApplication.html
android.support.multidex	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/multidex/package-summary.html
android.support.percent	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/percent/package-summary.html
PercentFrameLayout	A										<section class="prog__container"><p> Subclass of <pre><code> FrameLayout </code></pre> that supports percentage based dimensions and margins. You can specify dimension or a margin of child by using attributes with "Percent" suffix. Follow this example: <pre class="prettyprint"> &lt;android.support.percent.PercentFrameLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;ImageView app:layout_widthPercent="50%" app:layout_heightPercent="50%" app:layout_marginTopPercent="25%" app:layout_marginLeftPercent="25%"/&gt; &lt;/android.support.percent.PercentFrameLayout&gt; </pre> The attributes that you can use are: <ul> <li> <pre><code> layout_widthPercent </code></pre> <li> <pre><code> layout_heightPercent </code></pre> <li> <pre><code> layout_marginPercent </code></pre> <li> <pre><code> layout_marginLeftPercent </code></pre> <li> <pre><code> layout_marginTopPercent </code></pre> <li> <pre><code> layout_marginRightPercent </code></pre> <li> <pre><code> layout_marginBottomPercent </code></pre> <li> <pre><code> layout_marginStartPercent </code></pre> <li> <pre><code> layout_marginEndPercent </code></pre> <li> <pre><code> layout_aspectRatio </code></pre> </li> </li> </li> </li> </li> </li> </li> </li> </li> </li> </ul> It is not necessary to specify <pre><code> layout_width/height </code></pre> if you specify <pre><code> layout_widthPercent. </code></pre> However, if you want the view to be able to take up more space than what percentage value permits, you can add <pre><code> layout_width/height="wrap_content" </code></pre> . In that case if the percentage size is too small for the View's content, it will be resized using <pre><code> wrap_content </code></pre> rule. <p> You can also make one dimension be a fraction of the other by setting only width or height and using <pre><code> layout_aspectRatio </code></pre> for the second one to be calculated automatically. For example, if you would like to achieve 16:9 aspect ratio, you can write: <pre class="prettyprint"> android:layout_width="300dp" app:layout_aspectRatio="178%" </pre> This will make the aspect ratio 16:9 (1.78:1) with the width fixed at 300dp and height adjusted accordingly. </p><pre><code>public class PercentFrameLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/percent/PercentFrameLayout.html
PercentFrameLayout.LayoutParams	A										<section class="prog__container"><p> Value for <pre><code> gravity </code></pre> indicating that a gravity has not been explicitly specified.</p><pre><code>public static class PercentFrameLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/percent/PercentFrameLayout.LayoutParams.html
PercentLayoutHelper	A										<section class="prog__container"><p> Helper for layouts that want to support percentage based dimensions. <p> This class collects utility methods that are involved in extracting percentage based dimension attributes and applying them to ViewGroup's children. If you would like to implement a layout that supports percentage based dimensions, you need to take several steps: <ol> <li> You need a <pre><code> ViewGroup.LayoutParams </code></pre> subclass in your ViewGroup that implements <pre><code> PercentLayoutHelper.PercentLayoutParams </code></pre> . <li> In your <pre><code> LayoutParams(Context c, AttributeSet attrs) </code></pre> constructor create an instance of <pre><code> PercentLayoutHelper.PercentLayoutInfo </code></pre> by calling <pre><code> getPercentLayoutInfo(Context, AttributeSet) </code></pre> . Return this object from <pre><code> public PercentLayoutHelper.PercentLayoutInfo getPercentLayoutInfo() </code></pre> method that you implemented for <pre><code> PercentLayoutHelper.PercentLayoutParams </code></pre> interface. <li> Override <pre><code> setBaseAttributes(TypedArray, int, int) </code></pre> with a single line implementation <pre><code> PercentLayoutHelper.fetchWidthAndHeight(this, a, widthAttr, heightAttr); </code></pre> <li> In your ViewGroup override <pre><code> generateLayoutParams(AttributeSet) </code></pre> to return your LayoutParams. <li> In your <pre><code> onMeasure(int, int) </code></pre> override, you need to implement following pattern: <pre class="prettyprint"> protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { mHelper.adjustChildren(widthMeasureSpec, heightMeasureSpec); super.onMeasure(widthMeasureSpec, heightMeasureSpec); if (mHelper.handleMeasuredStateTooSmall()) { super.onMeasure(widthMeasureSpec, heightMeasureSpec); } } </pre> <li> In your <pre><code> onLayout(boolean, int, int, int, int) </code></pre> override, you need to implement following pattern: <pre class="prettyprint"> protected void onLayout(boolean changed, int left, int top, int right, int bottom) { super.onLayout(changed, left, top, right, bottom); mHelper.restoreOriginalParams(); } </pre> </li> </li> </li> </li> </li> </li> </ol> </p><pre><code>public class PercentLayoutHelper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/percent/PercentLayoutHelper.html
PercentLayoutHelper.PercentLayoutInfo	A										<section class="prog__container"><p> Container for information about percentage dimensions and margins. It acts as an extension for <pre><code> LayoutParams </code></pre> .</p><pre><code>public static class PercentLayoutHelper.PercentLayoutInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/percent/PercentLayoutHelper.PercentLayoutInfo.html
PercentLayoutHelper.PercentLayoutParams	A										<section class="prog__container"><p> If a layout wants to support percentage based dimensions and use this helper class, its <pre><code> LayoutParams </code></pre> subclass must implement this interface. Your <pre><code> LayoutParams </code></pre> subclass should contain an instance of <pre><code> PercentLayoutInfo </code></pre> and the implementation of this interface should be a simple accessor.</p><pre><code>public static interface PercentLayoutHelper.PercentLayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/percent/PercentLayoutHelper.PercentLayoutParams.html
PercentRelativeLayout	A										<section class="prog__container"><p> Subclass of <pre><code> RelativeLayout </code></pre> that supports percentage based dimensions and margins. You can specify dimension or a margin of child by using attributes with "Percent" suffix. Follow this example: <pre class="prettyprint"> &lt;android.support.percent.PercentRelativeLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;ImageView app:layout_widthPercent="50%" app:layout_heightPercent="50%" app:layout_marginTopPercent="25%" app:layout_marginLeftPercent="25%"/&gt; &lt;/android.support.percent.PercentRelativeLayout&gt; </pre> The attributes that you can use are: <ul> <li> <pre><code> layout_widthPercent </code></pre> <li> <pre><code> layout_heightPercent </code></pre> <li> <pre><code> layout_marginPercent </code></pre> <li> <pre><code> layout_marginLeftPercent </code></pre> <li> <pre><code> layout_marginTopPercent </code></pre> <li> <pre><code> layout_marginRightPercent </code></pre> <li> <pre><code> layout_marginBottomPercent </code></pre> <li> <pre><code> layout_marginStartPercent </code></pre> <li> <pre><code> layout_marginEndPercent </code></pre> <li> <pre><code> layout_aspectRatio </code></pre> </li> </li> </li> </li> </li> </li> </li> </li> </li> </li> </ul> It is not necessary to specify <pre><code> layout_width/height </code></pre> if you specify <pre><code> layout_widthPercent. </code></pre> However, if you want the view to be able to take up more space than what percentage value permits, you can add <pre><code> layout_width/height="wrap_content" </code></pre> . In that case if the percentage size is too small for the View's content, it will be resized using <pre><code> wrap_content </code></pre> rule. <p> You can also make one dimension be a fraction of the other by setting only width or height and using <pre><code> layout_aspectRatio </code></pre> for the second one to be calculated automatically. For example, if you would like to achieve 16:9 aspect ratio, you can write: <pre class="prettyprint"> android:layout_width="300dp" app:layout_aspectRatio="178%" </pre> This will make the aspect ratio 16:9 (1.78:1) with the width fixed at 300dp and height adjusted accordingly. </p><pre><code>public class PercentRelativeLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/percent/PercentRelativeLayout.html
PercentRelativeLayout.LayoutParams	A										<section class="prog__container"><p> Special value for the height or width requested by a View.</p><pre><code>public static class PercentRelativeLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/percent/PercentRelativeLayout.LayoutParams.html
R.attr	A										<section class="prog__container"><p> <p> May be a fractional value, which is a floating point number appended with either % or %p, such as " <pre><code> 14.5% </code></pre> ". </p><pre><code>public static final class R.attr\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/percent/R.attr.html
R	A										<section class="prog__container"><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/percent/R.html
R.styleable	A										<section class="prog__container"><p> Attributes that can be used with a PercentLayout_Layout.</p><pre><code>public static final class R.styleable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/percent/R.styleable.html
android.support.provider	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/provider/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/provider/R.html
AutoTransition	A										<section class="prog__container"><p> Utility class for creating a default transition that automatically fades, moves, and resizes views during a scene change. <p> Unlike the platform version, this does not support use in XML resources. </p><pre><code>public class AutoTransition\n</code></pre></section>	https://developer.android.com/reference/android/support/transition/AutoTransition.html
ChangeBounds	A										<section class="prog__container"><p> This transition captures the layout bounds of target views before and after the scene change and animates those changes during the transition. <p> Unlike the platform version, this does not support use in XML resources. </p><pre><code>public class ChangeBounds\n</code></pre></section>	https://developer.android.com/reference/android/support/transition/ChangeBounds.html
Fade	A										<section class="prog__container"><p> This transition tracks changes to the visibility of target views in the start and end scenes and fades views in or out when they become visible or non-visible. Visibility is determined by both the <pre><code> setVisibility(int) </code></pre> state of the view as well as whether it is parented in the current view hierarchy. <p> The ability of this transition to fade out a particular view, and the way that that fading operation takes place, is based on the situation of the view in the view hierarchy. For example, if a view was simply removed from its parent, then the view will be added into a <pre><code> ViewGroupOverlay </code></pre> while fading. If a visible view is changed to be <pre><code> GONE </code></pre> or <pre><code> INVISIBLE </code></pre> , then the visibility will be changed to <pre><code> VISIBLE </code></pre> for the duration of the animation. However, if a view is in a hierarchy which is also altering its visibility, the situation can be more complicated. In general, if a view that is no longer in the hierarchy in the end scene still has a parent (so its parent hierarchy was removed, but it was not removed from its parent), then it will be left alone to avoid side-effects from improperly removing it from its parent. The only exception to this is if the previous <pre><code> Scene </code></pre> was <pre><code> created from a layout resource file </code></pre> , then it is considered safe to un-parent the starting scene view in order to fade it out. </p><pre><code>public class Fade\n</code></pre></section>	https://developer.android.com/reference/android/support/transition/Fade.html
android.support.transition	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/transition/package-summary.html
R	A										<section class="prog__container"><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/transition/R.html
R.id	A										<section class="prog__container"><pre><code>public static final class R.id\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/transition/R.id.html
Scene	A										<section class="prog__container"><p> A scene represents the collection of values that various properties in the View hierarchy will have when the scene is applied. A Scene can be configured to automatically run a Transition when it is applied, which will animate the various property changes that take place during the scene change.</p><pre><code>public class Scene\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/transition/Scene.html
Transition	A										<section class="prog__container"><p> A Transition holds information about animations that will be run on its targets during a scene change. Subclasses of this abstract class may choreograph several child transitions ( <pre><code> TransitionSet </code></pre> or they may perform custom animations themselves. Any Transition has two main jobs: (1) capture property values, and (2) play animations based on changes to captured property values. A custom transition knows what property values on View objects are of interest to it, and also knows how to animate changes to those values. For example, the <pre><code> Fade </code></pre> transition tracks changes to visibility-related properties and is able to construct and run animations that fade items in or out based on changes to those properties. <p> Note: Transitions may not work correctly with either <pre><code> SurfaceView </code></pre> or <pre><code> TextureView </code></pre> , due to the way that these views are displayed on the screen. For SurfaceView, the problem is that the view is updated from a non-UI thread, so changes to the view due to transitions (such as moving and resizing the view) may be out of sync with the display inside those bounds. TextureView is more compatible with transitions in general, but some specific transitions (such as <pre><code> Fade </code></pre> ) may not be compatible with TextureView because they rely on <pre><code> ViewOverlay </code></pre> functionality, which does not currently work with TextureView. </p><pre><code>public abstract class Transition\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/transition/Transition.html
Transition.TransitionListener	A										<section class="prog__container"><p> A transition listener receives notifications from a transition. Notifications indicate transition lifecycle events.</p><pre><code>public static interface Transition.TransitionListener\n</code></pre></section>	https://developer.android.com/reference/android/support/transition/Transition.TransitionListener.html
TransitionManager	A										<section class="prog__container"><p> This class manages the set of transitions that fire when there is a change of <pre><code> Scene </code></pre> . To use the manager, add scenes along with transition objects with calls to <pre><code> setTransition(Scene, Transition) </code></pre> or <pre><code> setTransition(Scene, Scene, Transition) </code></pre> . Setting specific transitions for scene changes is not required; by default, a Scene change will use <pre><code> AutoTransition </code></pre> to do something reasonable for most situations. Specifying other transitions for particular scene changes is only necessary if the application wants different transition behavior in these situations. <p> Unlike the platform version, this does not support declaration by XML resources. </p><pre><code>public class TransitionManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/transition/TransitionManager.html
TransitionSet	A										<section class="prog__container"><p> A TransitionSet is a parent of child transitions (including other TransitionSets). Using TransitionSets enables more complex choreography of transitions, where some sets play <pre><code> ORDERING_TOGETHER </code></pre> and others play <pre><code> ORDERING_SEQUENTIAL </code></pre> . For example, <pre><code> AutoTransition </code></pre> uses a TransitionSet to sequentially play a Fade(Fade.OUT), followed by a <pre><code> ChangeBounds </code></pre> , followed by a Fade(Fade.OUT) transition. <p> Unlike the platform version, this does not support declaration by XML resources. </p><pre><code>public class TransitionSet\n</code></pre></section>	https://developer.android.com/reference/android/support/transition/TransitionSet.html
TransitionValues	A										<section class="prog__container"><p> Data structure which holds cached values for the transition. The view field is the target which all of the values pertain to. The values field is a map which holds information for fields according to names selected by the transitions. These names should be unique to avoid clobbering values stored by other transitions, such as the convention project:transition_name:property_name. For example, the platform might store a property "alpha" in a transition "Fader" as "android:fader:alpha". <p> These values are cached during the <pre><code> captureStartValues(TransitionValues) </code></pre> capture} phases of a scene change, once when the start values are captured and again when the end values are captured. These start/end values are then passed into the transitions via the for <pre><code> createAnimator(android.view.ViewGroup, TransitionValues, TransitionValues) </code></pre> method. </p><pre><code>public class TransitionValues\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/transition/TransitionValues.html
Visibility	A										<section class="prog__container"><p> This transition tracks changes to the visibility of target views in the start and end scenes. Visibility is determined not just by the <pre><code> setVisibility(int) </code></pre> state of views, but also whether views exist in the current view hierarchy. The class is intended to be a utility for subclasses such as <pre><code> Fade </code></pre> , which use this visibility information to determine the specific animations to run when visibility changes occur. Subclasses should implement one or both of the methods <pre><code> onAppear(ViewGroup, TransitionValues, int, TransitionValues, int) </code></pre> , <pre><code> onDisappear(ViewGroup, TransitionValues, int, TransitionValues, int) </code></pre> ,</p><pre><code>public abstract class Visibility\n</code></pre></section>	https://developer.android.com/reference/android/support/transition/Visibility.html
android.support.v13	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v13/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v13/R.html
ActivityCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> Activity </code></pre> introduced after API level 13 in a backwards compatible fashion.</p><pre><code>public class ActivityCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v13/app/ActivityCompat.html
FragmentCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> Fragment </code></pre> introduced after API level 13 in a backwards compatible fashion.</p><pre><code>public class FragmentCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v13/app/FragmentCompat.html
FragmentCompat.OnRequestPermissionsResultCallback	A										<section class="prog__container"><p> This interface is the contract for receiving the results for permission requests.</p><pre><code>public static interface FragmentCompat.OnRequestPermissionsResultCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v13/app/FragmentCompat.OnRequestPermissionsResultCallback.html
FragmentPagerAdapter	A										<section class="prog__container"><p> Implementation of <pre><code> PagerAdapter </code></pre> that represents each page as a <pre><code> Fragment </code></pre> that is persistently kept in the fragment manager as long as the user can return to the page. <p> This version of the pager is best for use when there are a handful of typically more static fragments to be paged through, such as a set of tabs. The fragment of each page the user visits will be kept in memory, though its view hierarchy may be destroyed when not visible. This can result in using a significant amount of memory since fragment instances can hold on to an arbitrary amount of state. For larger sets of pages, consider <pre><code> FragmentStatePagerAdapter </code></pre> . <p> When using FragmentPagerAdapter the host ViewPager must have a valid ID set. </p><pre><code>public abstract class FragmentPagerAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v13/app/FragmentPagerAdapter.html
FragmentStatePagerAdapter	A										<section class="prog__container"><p> Implementation of <pre><code> PagerAdapter </code></pre> that uses a <pre><code> Fragment </code></pre> to manage each page. This class also handles saving and restoring of fragment's state. <p> This version of the pager is more useful when there are a large number of pages, working more like a list view. When pages are not visible to the user, their entire fragment may be destroyed, only keeping the saved state of that fragment. This allows the pager to hold on to much less memory associated with each visited page as compared to <pre><code> FragmentPagerAdapter </code></pre> at the cost of potentially more overhead when switching between pages. <p> When using FragmentPagerAdapter the host ViewPager must have a valid ID set. </p><pre><code>public abstract class FragmentStatePagerAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v13/app/FragmentStatePagerAdapter.html
FragmentTabHost	A										<section class="prog__container"><p> Version of <pre><code> FragmentTabHost </code></pre> that can be used with the platform <pre><code> Fragment </code></pre> APIs. You will not normally use this, instead using action bar tabs.</p><pre><code>public class FragmentTabHost\n</code></pre></section>	https://developer.android.com/reference/android/support/v13/app/FragmentTabHost.html
android.support.v13.app	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v13/app/package-summary.html
DragAndDropPermissionsCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> DragAndDropPermissions </code></pre> introduced after API level 13 in a backwards compatible fashion.</p><pre><code>public final class DragAndDropPermissionsCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v13/view/DragAndDropPermissionsCompat.html
DragStartHelper	A										<section class="prog__container"><p> DragStartHelper is a utility class for implementing drag and drop support. <p> It detects gestures commonly used to start drag (long click for any input source, click and drag for mouse). <p> It also keeps track of the screen location where the drag started, and helps determining the hot spot position for a drag shadow. <p> Implement <pre><code> DragStartHelper.OnDragStartListener </code></pre> to start the drag operation: <pre> DragStartHelper.OnDragStartListener listener = new DragStartHelper.OnDragStartListener { protected void onDragStart(View view, DragStartHelper helper) { View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(view) { public void onProvideShadowMetrics(Point shadowSize, Point shadowTouchPoint) { super.onProvideShadowMetrics(shadowSize, shadowTouchPoint); helper.getTouchPosition(shadowTouchPoint); } }; view.startDrag(mClipData, shadowBuilder, mLocalState, mDragFlags); } }; mDragStartHelper = new DragStartHelper(mDraggableView, listener); </pre> Once created, DragStartHelper can be attached to a view (this will replace existing long click and touch listeners): <pre> mDragStartHelper.attach(); </pre> It may also be used in combination with existing listeners: <pre> public boolean onTouch(View view, MotionEvent event) { if (mDragStartHelper.onTouch(view, event)) { return true; } return handleTouchEvent(view, event); } public boolean onLongClick(View view) { if (mDragStartHelper.onLongClick(view)) { return true; } return handleLongClickEvent(view); } </pre> </p><pre><code>public class DragStartHelper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v13/view/DragStartHelper.html
DragStartHelper.OnDragStartListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a drag start gesture is detected.</p><pre><code>public static interface DragStartHelper.OnDragStartListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v13/view/DragStartHelper.OnDragStartListener.html
android.support.v13.view	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v13/view/package-summary.html
ViewCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> View </code></pre> introduced after API level 13 in a backwards compatible fashion.</p><pre><code>public class ViewCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v13/view/ViewCompat.html
EditorInfoCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> EditorInfo </code></pre> introduced after API level 13 in a backwards compatible fashion.</p><pre><code>public final class EditorInfoCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v13/view/inputmethod/EditorInfoCompat.html
InputConnectionCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> InputConnection </code></pre> introduced after API level 13 in a backwards compatible fashion.</p><pre><code>public final class InputConnectionCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v13/view/inputmethod/InputConnectionCompat.html
InputConnectionCompat.OnCommitContentListener	A										<section class="prog__container"><p> Listener for commitContent method call, in a backwards compatible fashion.</p><pre><code>public static interface InputConnectionCompat.OnCommitContentListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v13/view/inputmethod/InputConnectionCompat.OnCommitContentListener.html
InputContentInfoCompat	A										<section class="prog__container"><p> Helper for accessing features in InputContentInfo introduced after API level 13 in a backwards compatible fashion.</p><pre><code>public final class InputContentInfoCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v13/view/inputmethod/InputContentInfoCompat.html
android.support.v13.view.inputmethod	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v13/view/inputmethod/package-summary.html
EditTextPreferenceDialogFragment	A										<section class="prog__container"><pre><code>public class EditTextPreferenceDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/EditTextPreferenceDialogFragment.html
ListPreferenceDialogFragment	A										<section class="prog__container"><pre><code>public class ListPreferenceDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/ListPreferenceDialogFragment.html
MultiSelectListPreference	A										<section class="prog__container"><p> A <pre><code> Preference </code></pre> that displays a list of entries as a dialog. <p> This preference will store a set of strings into the SharedPreferences. This set will contain one or more values from the <pre><code> setEntryValues(CharSequence[]) </code></pre> array. </p><pre><code>public class MultiSelectListPreference\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/MultiSelectListPreference.html
MultiSelectListPreferenceDialogFragment	A										<section class="prog__container"><pre><code>public class MultiSelectListPreferenceDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/MultiSelectListPreferenceDialogFragment.html
android.support.v14.preference	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v14/preference/package-summary.html
PreferenceDialogFragment	A										<section class="prog__container"><p> Abstract base class which presents a dialog associated with a <pre><code> DialogPreference </code></pre> . Since the preference object may not be available during fragment re-creation, the necessary information for displaying the dialog is read once during the initial call to <pre><code> onCreate(Bundle) </code></pre> and saved/restored in the saved instance state. Custom subclasses should also follow this pattern.</p><pre><code>public abstract class PreferenceDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/PreferenceDialogFragment.html
PreferenceFragment	A										<section class="prog__container"><p> Shows a hierarchy of <pre><code> Preference </code></pre> objects as lists. These preferences will automatically save to <pre><code> SharedPreferences </code></pre> as the user interacts with them. To retrieve an instance of <pre><code> SharedPreferences </code></pre> that the preference hierarchy in this fragment will use, call <pre><code> getDefaultSharedPreferences(android.content.Context) </code></pre> with a context in the same package as this fragment. <p> Furthermore, the preferences shown will follow the visual style of system preferences. It is easy to create a hierarchy of preferences (that can be shown on multiple screens) via XML. For these reasons, it is recommended to use this fragment (as a superclass) to deal with preferences in applications. <p> A <pre><code> PreferenceScreen </code></pre> object should be at the top of the preference hierarchy. Furthermore, subsequent <pre><code> PreferenceScreen </code></pre> in the hierarchy denote a screen break--that is the preferences contained within subsequent <pre><code> PreferenceScreen </code></pre> should be shown on another screen. The preference framework handles this by calling <pre><code> onNavigateToScreen(PreferenceScreen) </code></pre> . <p> The preference hierarchy can be formed in multiple ways: <li> From an XML file specifying the hierarchy <li> From different <pre><code> Activities </code></pre> that each specify its own preferences in an XML file via <pre><code> Activity </code></pre> meta-data <li> From an object hierarchy rooted with <pre><code> PreferenceScreen </code></pre> <p> To inflate from XML, use the <pre><code> addPreferencesFromResource(int) </code></pre> . The root element should be a <pre><code> PreferenceScreen </code></pre> . Subsequent elements can point to actual <pre><code> Preference </code></pre> subclasses. As mentioned above, subsequent <pre><code> PreferenceScreen </code></pre> in the hierarchy will result in the screen break. <p> To specify an object hierarchy rooted with <pre><code> PreferenceScreen </code></pre> , use <pre><code> setPreferenceScreen(PreferenceScreen) </code></pre> . <p> As a convenience, this fragment implements a click listener for any preference in the current hierarchy, see <pre><code> onPreferenceTreeClick(Preference) </code></pre> . </p><pre><code>public abstract class PreferenceFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/PreferenceFragment.html
PreferenceFragment.OnPreferenceDisplayDialogCallback	A										<section class="prog__container"><pre><code>public static interface PreferenceFragment.OnPreferenceDisplayDialogCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/PreferenceFragment.OnPreferenceDisplayDialogCallback.html
PreferenceFragment.OnPreferenceStartFragmentCallback	A										<section class="prog__container"><p> Interface that PreferenceFragment's containing activity should implement to be able to process preference items that wish to switch to a specified fragment.</p><pre><code>public static interface PreferenceFragment.OnPreferenceStartFragmentCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/PreferenceFragment.OnPreferenceStartFragmentCallback.html
PreferenceFragment.OnPreferenceStartScreenCallback	A										<section class="prog__container"><p> Interface that PreferenceFragment's containing activity should implement to be able to process preference items that wish to switch to a new screen of preferences.</p><pre><code>public static interface PreferenceFragment.OnPreferenceStartScreenCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/PreferenceFragment.OnPreferenceStartScreenCallback.html
R.attr	A										<section class="prog__container"><p> The state (true for on, or false for off) that causes dependents to be disabled.</p><pre><code>public static final class R.attr\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/R.attr.html
R.color	A										<section class="prog__container"><p> Fallback color for versions of the system where ?android:attr/colorAccent is not available</p><pre><code>public static final class R.color\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/R.color.html
R.drawable	A										<section class="prog__container"><pre><code>public static final class R.drawable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/R.drawable.html
R	A										<section class="prog__container"><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/R.html
R.id	A										<section class="prog__container"><pre><code>public static final class R.id\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/R.id.html
R.layout	A										<section class="prog__container"><pre><code>public static final class R.layout\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/R.layout.html
R.style	A										<section class="prog__container"><pre><code>public static final class R.style\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/R.style.html
R.styleable	A										<section class="prog__container"><p> Base attributes available to PreferenceFragment.</p><pre><code>public static final class R.styleable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/R.styleable.html
SwitchPreference	A										<section class="prog__container"><p> A <pre><code> Preference </code></pre> that provides a two-state toggleable option. <p> This preference will store a boolean into the SharedPreferences. </p><pre><code>public class SwitchPreference\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/SwitchPreference.html
android.support.v17.leanback	A										<section class="prog__container">Support classes for building Leanback user experiences.</section>	https://developer.android.com/reference/android/support/v17/leanback/package-summary.html
R.animator	A										<section class="prog__container"><pre><code>public static final class R.animator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.animator.html
R.attr	A										<section class="prog__container"><p> Defines the duration in milliseconds of the activated animation for a card layout.</p><pre><code>public static final class R.attr\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.attr.html
R.color	A										<section class="prog__container"><pre><code>public static final class R.color\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.color.html
R.dimen	A										<section class="prog__container"><pre><code>public static final class R.dimen\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.dimen.html
R.drawable	A										<section class="prog__container"><pre><code>public static final class R.drawable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.drawable.html
R.fraction	A										<section class="prog__container"><pre><code>public static final class R.fraction\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.fraction.html
R	A										<section class="prog__container"><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.html
R.id	A										<section class="prog__container"><pre><code>public static final class R.id\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.id.html
R.integer	A										<section class="prog__container"><pre><code>public static final class R.integer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.integer.html
R.layout	A										<section class="prog__container"><pre><code>public static final class R.layout\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.layout.html
R.raw	A										<section class="prog__container"><pre><code>public static final class R.raw\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.raw.html
R.string	A										<section class="prog__container"><p> Onscreen label for the control button to fast forward media playback at a given speed multiplier</p><pre><code>public static final class R.string\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.string.html
R.style	A										<section class="prog__container"><pre><code>public static final class R.style\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.style.html
R.styleable	A										<section class="prog__container"><p> <p> Theme attribute for the style of the breadcrumb in a GuidanceStylist. </p><pre><code>public static final class R.styleable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.styleable.html
R.transition	A										<section class="prog__container"><pre><code>public static final class R.transition\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.transition.html
BackgroundManager	A										<section class="prog__container"><p> Supports background image continuity between multiple Activities. <p> An Activity should instantiate a BackgroundManager and <pre><code> attach(Window) </code></pre> to the Activity's window. When the Activity is started, the background is initialized to the current background values stored in a continuity service. The background continuity service is updated as the background is updated. <p> At some point, for example when it is stopped, the Activity may release its background state. <p> When an Activity is resumed, if the BackgroundManager has not been released, the continuity service is updated from the BackgroundManager state. If the BackgroundManager was released, the BackgroundManager inherits the current state from the continuity service. <p> When the last Activity is destroyed, the background state is reset. <p> Backgrounds consist of several layers, from back to front: <ul> <li> the background Drawable of the theme </li> <li> a solid color (set via <pre><code> setColor(int) </code></pre> ) </li> <li> two Drawables, previous and current (set via <pre><code> setBitmap(Bitmap) </code></pre> or <pre><code> setDrawable(Drawable) </code></pre> ), which may be in transition </li> </ul> <p> BackgroundManager holds references to potentially large bitmap Drawables. Call <pre><code> release() </code></pre> to release these references when the Activity is not visible. </p><pre><code>public final class BackgroundManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BackgroundManager.html
BrandedFragment	A										<section class="prog__container"><p> Fragment class for managing search and branding using a view that implements <pre><code> TitleViewAdapter.Provider </code></pre> .</p><pre><code>public class BrandedFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrandedFragment.html
BrandedSupportFragment	A										<section class="prog__container"><p> Fragment class for managing search and branding using a view that implements <pre><code> TitleViewAdapter.Provider </code></pre> .</p><pre><code>public class BrandedSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrandedSupportFragment.html
BrowseFragment.BrowseTransitionListener	A										<section class="prog__container"><p> Listener for transitions between browse headers and rows.</p><pre><code>public static class BrowseFragment.BrowseTransitionListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.BrowseTransitionListener.html
BrowseFragment.FragmentFactory	A										<section class="prog__container"><p> Factory class responsible for creating fragment given the current item. <pre><code> ListRow </code></pre> should returns <pre><code> RowsFragment </code></pre> or it's subclass whereas <pre><code> PageRow </code></pre> can return any fragment class.</p><pre><code>public static abstract class BrowseFragment.FragmentFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.FragmentFactory.html
BrowseFragment.FragmentHost	A										<section class="prog__container"><p> Possible set of actions that <pre><code> BrowseFragment </code></pre> exposes to clients. Custom fragments can interact with <pre><code> BrowseFragment </code></pre> using this interface.</p><pre><code>public static interface BrowseFragment.FragmentHost\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.FragmentHost.html
BrowseFragment	A										<section class="prog__container"><p> A fragment for creating Leanback browse screens. It is composed of a RowsFragment and a HeadersFragment. <p> A BrowseFragment renders the elements of its <pre><code> ObjectAdapter </code></pre> as a set of rows in a vertical list. The elements in this adapter must be subclasses of <pre><code> Row </code></pre> . <p> The HeadersFragment can be set to be either shown or hidden by default, or may be disabled entirely. See <pre><code> setHeadersState(int) </code></pre> for details. <p> By default the BrowseFragment includes support for returning to the headers when the user presses Back. For Activities that customize <pre><code> onBackPressed() </code></pre> , you must disable this default Back key support by calling <pre><code> setHeadersTransitionOnBackEnabled(boolean) </code></pre> with false and use <pre><code> BrowseFragment.BrowseTransitionListener </code></pre> and <pre><code> startHeadersTransition(boolean) </code></pre> . <p> The recommended theme to use with a BrowseFragment is <pre><code> Theme_Leanback_Browse </code></pre> . </p><pre><code>public class BrowseFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.html
BrowseFragment.ListRowFragmentFactory	A										<section class="prog__container"><p> FragmentFactory implementation for <pre><code> ListRow </code></pre> .</p><pre><code>public static class BrowseFragment.ListRowFragmentFactory\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.ListRowFragmentFactory.html
BrowseFragment.MainFragmentAdapter	A										<section class="prog__container"><p> Interface that defines the interaction between <pre><code> BrowseFragment </code></pre> and it's main content fragment. The key method is <pre><code> getFragment() </code></pre> , it will be used to get the fragment to be shown in the content section. Clients can provide any implementation of fragment and customize it's interaction with <pre><code> BrowseFragment </code></pre> by overriding the necessary methods. <p> Clients are expected to provide an instance of <pre><code> BrowseFragment.MainFragmentAdapterRegistry </code></pre> which will be responsible for providing implementations of <pre><code> BrowseFragment.MainFragmentAdapter </code></pre> for given content types. Currently we support different types of content - <pre><code> ListRow </code></pre> , <pre><code> PageRow </code></pre> or any subtype of <pre><code> Row </code></pre> . We provide an out of the box adapter implementation for any rows other than <pre><code> PageRow </code></pre> - <pre><code> RowsFragment.MainFragmentAdapter </code></pre> . <p> <pre><code> PageRow </code></pre> is intended to give full flexibility to developers in terms of Fragment design. Users will have to provide an implementation of <pre><code> BrowseFragment.MainFragmentAdapter </code></pre> and provide that through <pre><code> BrowseFragment.MainFragmentAdapterRegistry </code></pre> . <pre><code> BrowseFragment.MainFragmentAdapter </code></pre> implementation can supply any fragment and override just those interactions that makes sense. </p><pre><code>public static class BrowseFragment.MainFragmentAdapter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.MainFragmentAdapter.html
BrowseFragment.MainFragmentAdapterProvider	A										<section class="prog__container"><p> Interface to be implemented by all fragments for providing an instance of <pre><code> BrowseFragment.MainFragmentAdapter </code></pre> . Both <pre><code> RowsFragment </code></pre> and custom fragment provided against <pre><code> PageRow </code></pre> will need to implement this interface.</p><pre><code>public static interface BrowseFragment.MainFragmentAdapterProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.MainFragmentAdapterProvider.html
BrowseFragment.MainFragmentAdapterRegistry	A										<section class="prog__container"><p> Registry class maintaining the mapping of <pre><code> Row </code></pre> subclasses to <pre><code> BrowseFragment.FragmentFactory </code></pre> . BrowseRowFragment automatically registers <pre><code> BrowseFragment.ListRowFragmentFactory </code></pre> for handling <pre><code> ListRow </code></pre> . Developers can override that and also if they want to use custom fragment, they can register a custom <pre><code> BrowseFragment.FragmentFactory </code></pre> against <pre><code> PageRow </code></pre> .</p><pre><code>public static final class BrowseFragment.MainFragmentAdapterRegistry\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.MainFragmentAdapterRegistry.html
BrowseFragment.MainFragmentRowsAdapter	A										<section class="prog__container"><p> This is used to pass information to <pre><code> RowsFragment </code></pre> or its subclasses. <pre><code> BrowseFragment </code></pre> uses this interface to pass row based interaction events to the target fragment.</p><pre><code>public static class BrowseFragment.MainFragmentRowsAdapter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.MainFragmentRowsAdapter.html
BrowseFragment.MainFragmentRowsAdapterProvider	A										<section class="prog__container"><p> Interface to be implemented by <pre><code> RowsFragment </code></pre> and it's subclasses for providing an instance of <pre><code> BrowseFragment.MainFragmentRowsAdapter </code></pre> .</p><pre><code>public static interface BrowseFragment.MainFragmentRowsAdapterProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.MainFragmentRowsAdapterProvider.html
BrowseSupportFragment.BrowseTransitionListener	A										<section class="prog__container"><p> Listener for transitions between browse headers and rows.</p><pre><code>public static class BrowseSupportFragment.BrowseTransitionListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.BrowseTransitionListener.html
BrowseSupportFragment.FragmentFactory	A										<section class="prog__container"><p> Factory class responsible for creating fragment given the current item. <pre><code> ListRow </code></pre> should returns <pre><code> RowsSupportFragment </code></pre> or it's subclass whereas <pre><code> PageRow </code></pre> can return any fragment class.</p><pre><code>public static abstract class BrowseSupportFragment.FragmentFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.FragmentFactory.html
BrowseSupportFragment.FragmentHost	A										<section class="prog__container"><p> Possible set of actions that <pre><code> BrowseSupportFragment </code></pre> exposes to clients. Custom fragments can interact with <pre><code> BrowseSupportFragment </code></pre> using this interface.</p><pre><code>public static interface BrowseSupportFragment.FragmentHost\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.FragmentHost.html
BrowseSupportFragment	A										<section class="prog__container"><p> A fragment for creating Leanback browse screens. It is composed of a RowsSupportFragment and a HeadersSupportFragment. <p> A BrowseSupportFragment renders the elements of its <pre><code> ObjectAdapter </code></pre> as a set of rows in a vertical list. The elements in this adapter must be subclasses of <pre><code> Row </code></pre> . <p> The HeadersSupportFragment can be set to be either shown or hidden by default, or may be disabled entirely. See <pre><code> setHeadersState(int) </code></pre> for details. <p> By default the BrowseSupportFragment includes support for returning to the headers when the user presses Back. For Activities that customize <pre><code> onBackPressed() </code></pre> , you must disable this default Back key support by calling <pre><code> setHeadersTransitionOnBackEnabled(boolean) </code></pre> with false and use <pre><code> BrowseSupportFragment.BrowseTransitionListener </code></pre> and <pre><code> startHeadersTransition(boolean) </code></pre> . <p> The recommended theme to use with a BrowseSupportFragment is <pre><code> Theme_Leanback_Browse </code></pre> . </p><pre><code>public class BrowseSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.html
BrowseSupportFragment.ListRowFragmentFactory	A										<section class="prog__container"><p> FragmentFactory implementation for <pre><code> ListRow </code></pre> .</p><pre><code>public static class BrowseSupportFragment.ListRowFragmentFactory\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.ListRowFragmentFactory.html
BrowseSupportFragment.MainFragmentAdapter	A										<section class="prog__container"><p> Interface that defines the interaction between <pre><code> BrowseSupportFragment </code></pre> and it's main content fragment. The key method is <pre><code> getFragment() </code></pre> , it will be used to get the fragment to be shown in the content section. Clients can provide any implementation of fragment and customize it's interaction with <pre><code> BrowseSupportFragment </code></pre> by overriding the necessary methods. <p> Clients are expected to provide an instance of <pre><code> BrowseSupportFragment.MainFragmentAdapterRegistry </code></pre> which will be responsible for providing implementations of <pre><code> BrowseSupportFragment.MainFragmentAdapter </code></pre> for given content types. Currently we support different types of content - <pre><code> ListRow </code></pre> , <pre><code> PageRow </code></pre> or any subtype of <pre><code> Row </code></pre> . We provide an out of the box adapter implementation for any rows other than <pre><code> PageRow </code></pre> - <pre><code> RowsSupportFragment.MainFragmentAdapter </code></pre> . <p> <pre><code> PageRow </code></pre> is intended to give full flexibility to developers in terms of Fragment design. Users will have to provide an implementation of <pre><code> BrowseSupportFragment.MainFragmentAdapter </code></pre> and provide that through <pre><code> BrowseSupportFragment.MainFragmentAdapterRegistry </code></pre> . <pre><code> BrowseSupportFragment.MainFragmentAdapter </code></pre> implementation can supply any fragment and override just those interactions that makes sense. </p><pre><code>public static class BrowseSupportFragment.MainFragmentAdapter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.MainFragmentAdapter.html
BrowseSupportFragment.MainFragmentAdapterProvider	A										<section class="prog__container"><p> Interface to be implemented by all fragments for providing an instance of <pre><code> BrowseSupportFragment.MainFragmentAdapter </code></pre> . Both <pre><code> RowsSupportFragment </code></pre> and custom fragment provided against <pre><code> PageRow </code></pre> will need to implement this interface.</p><pre><code>public static interface BrowseSupportFragment.MainFragmentAdapterProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.MainFragmentAdapterProvider.html
BrowseSupportFragment.MainFragmentAdapterRegistry	A										<section class="prog__container"><p> Registry class maintaining the mapping of <pre><code> Row </code></pre> subclasses to <pre><code> BrowseSupportFragment.FragmentFactory </code></pre> . BrowseRowFragment automatically registers <pre><code> BrowseSupportFragment.ListRowFragmentFactory </code></pre> for handling <pre><code> ListRow </code></pre> . Developers can override that and also if they want to use custom fragment, they can register a custom <pre><code> BrowseSupportFragment.FragmentFactory </code></pre> against <pre><code> PageRow </code></pre> .</p><pre><code>public static final class BrowseSupportFragment.MainFragmentAdapterRegistry\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.MainFragmentAdapterRegistry.html
BrowseSupportFragment.MainFragmentRowsAdapter	A										<section class="prog__container"><p> This is used to pass information to <pre><code> RowsSupportFragment </code></pre> or its subclasses. <pre><code> BrowseSupportFragment </code></pre> uses this interface to pass row based interaction events to the target fragment.</p><pre><code>public static class BrowseSupportFragment.MainFragmentRowsAdapter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.MainFragmentRowsAdapter.html
BrowseSupportFragment.MainFragmentRowsAdapterProvider	A										<section class="prog__container"><p> Interface to be implemented by <pre><code> RowsSupportFragment </code></pre> and it's subclasses for providing an instance of <pre><code> BrowseSupportFragment.MainFragmentRowsAdapter </code></pre> .</p><pre><code>public static interface BrowseSupportFragment.MainFragmentRowsAdapterProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.MainFragmentRowsAdapterProvider.html
DetailsFragment	A										<section class="prog__container"><p> A fragment for creating Leanback details screens. <p> A DetailsFragment renders the elements of its <pre><code> ObjectAdapter </code></pre> as a set of rows in a vertical list.The Adapter's <pre><code> PresenterSelector </code></pre> must maintain subclasses of <pre><code> RowPresenter </code></pre> . </p><pre><code>public class DetailsFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/DetailsFragment.html
DetailsSupportFragment	A										<section class="prog__container"><p> A fragment for creating Leanback details screens. <p> A DetailsSupportFragment renders the elements of its <pre><code> ObjectAdapter </code></pre> as a set of rows in a vertical list.The Adapter's <pre><code> PresenterSelector </code></pre> must maintain subclasses of <pre><code> RowPresenter </code></pre> . </p><pre><code>public class DetailsSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/DetailsSupportFragment.html
ErrorFragment	A										<section class="prog__container"><p> A fragment for displaying an error indication.</p><pre><code>public class ErrorFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/ErrorFragment.html
ErrorSupportFragment	A										<section class="prog__container"><p> A fragment for displaying an error indication.</p><pre><code>public class ErrorSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/ErrorSupportFragment.html
GuidedStepFragment	A										<section class="prog__container"><pre><code>public class GuidedStepFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/GuidedStepFragment.html
GuidedStepSupportFragment	A										<section class="prog__container"><pre><code>public class GuidedStepSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/GuidedStepSupportFragment.html
HeadersFragment	A										<section class="prog__container"><p> An internal fragment containing a list of row headers.</p><pre><code>public class HeadersFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/HeadersFragment.html
HeadersFragment.OnHeaderClickedListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a header item is clicked.</p><pre><code>public static interface HeadersFragment.OnHeaderClickedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/HeadersFragment.OnHeaderClickedListener.html
HeadersFragment.OnHeaderViewSelectedListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a header item is selected.</p><pre><code>public static interface HeadersFragment.OnHeaderViewSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/HeadersFragment.OnHeaderViewSelectedListener.html
HeadersSupportFragment	A										<section class="prog__container"><p> An internal fragment containing a list of row headers.</p><pre><code>public class HeadersSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/HeadersSupportFragment.html
HeadersSupportFragment.OnHeaderClickedListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a header item is clicked.</p><pre><code>public static interface HeadersSupportFragment.OnHeaderClickedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/HeadersSupportFragment.OnHeaderClickedListener.html
HeadersSupportFragment.OnHeaderViewSelectedListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a header item is selected.</p><pre><code>public static interface HeadersSupportFragment.OnHeaderViewSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/HeadersSupportFragment.OnHeaderViewSelectedListener.html
MediaControllerGlue	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> MediaControllerGlue </code></pre> . </p><pre><code>public abstract class MediaControllerGlue\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/MediaControllerGlue.html
OnboardingFragment	A										<section class="prog__container"><pre><code>public abstract class OnboardingFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/OnboardingFragment.html
OnboardingSupportFragment	A										<section class="prog__container"><pre><code>public abstract class OnboardingSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/OnboardingSupportFragment.html
android.support.v17.leanback.app	A										<section class="prog__container">Support classes providing high level Leanback user interface building blocks: fragments and helpers.</section>	https://developer.android.com/reference/android/support/v17/leanback/app/package-summary.html
PlaybackControlGlue	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> PlaybackControlGlue </code></pre> </p><pre><code>public abstract class PlaybackControlGlue\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackControlGlue.html
PlaybackControlGlue.InputEventHandler	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface is deprecated. </strong> <br/> Use <pre><code> setOnKeyInterceptListener(View.OnKeyListener) </code></pre> . </p><pre><code>public static interface PlaybackControlGlue.InputEventHandler\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackControlGlue.InputEventHandler.html
PlaybackControlSupportGlue	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> PlaybackControlGlue </code></pre> and <pre><code> PlaybackSupportFragmentGlueHost </code></pre> for <pre><code> PlaybackSupportFragment </code></pre> . </p><pre><code>public abstract class PlaybackControlSupportGlue\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackControlSupportGlue.html
PlaybackFragment	A										<section class="prog__container"><p> A fragment for displaying playback controls and related content. <p> A PlaybackFragment renders the elements of its <pre><code> ObjectAdapter </code></pre> as a set of rows in a vertical list. The Adapter's <pre><code> PresenterSelector </code></pre> must maintain subclasses of <pre><code> RowPresenter </code></pre> . </p><pre><code>public class PlaybackFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackFragment.html
PlaybackFragmentGlueHost	A										<section class="prog__container"><p> <pre><code> PlaybackGlueHost </code></pre> implementation the interaction between this class and <pre><code> PlaybackFragment </code></pre> .</p><pre><code>public class PlaybackFragmentGlueHost\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackFragmentGlueHost.html
PlaybackOverlayFragment	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> PlaybackFragment </code></pre> . </p><pre><code>public class PlaybackOverlayFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackOverlayFragment.html
PlaybackOverlayFragment.InputEventHandler	A										<section class="prog__container"><p> Called when an <pre><code> InputEvent </code></pre> is received.</p><pre><code>public static interface PlaybackOverlayFragment.InputEventHandler\nimplements PlaybackControlGlue.InputEventHandler</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackOverlayFragment.InputEventHandler.html
PlaybackOverlayFragment.OnFadeCompleteListener	A										<section class="prog__container"><p> Listener allowing the application to receive notification of fade in and/or fade out completion events.</p><pre><code>public static class PlaybackOverlayFragment.OnFadeCompleteListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackOverlayFragment.OnFadeCompleteListener.html
PlaybackOverlaySupportFragment	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> PlaybackSupportFragment </code></pre> . </p><pre><code>public class PlaybackOverlaySupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackOverlaySupportFragment.html
PlaybackOverlaySupportFragment.InputEventHandler	A										<section class="prog__container"><p> Called when an <pre><code> InputEvent </code></pre> is received.</p><pre><code>public static interface PlaybackOverlaySupportFragment.InputEventHandler\nimplements PlaybackControlGlue.InputEventHandler</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackOverlaySupportFragment.InputEventHandler.html
PlaybackOverlaySupportFragment.OnFadeCompleteListener	A										<section class="prog__container"><p> Listener allowing the application to receive notification of fade in and/or fade out completion events.</p><pre><code>public static class PlaybackOverlaySupportFragment.OnFadeCompleteListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackOverlaySupportFragment.OnFadeCompleteListener.html
PlaybackSupportFragment	A										<section class="prog__container"><p> A fragment for displaying playback controls and related content. <p> A PlaybackSupportFragment renders the elements of its <pre><code> ObjectAdapter </code></pre> as a set of rows in a vertical list. The Adapter's <pre><code> PresenterSelector </code></pre> must maintain subclasses of <pre><code> RowPresenter </code></pre> . </p><pre><code>public class PlaybackSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackSupportFragment.html
PlaybackSupportFragmentGlueHost	A										<section class="prog__container"><p> <pre><code> PlaybackGlueHost </code></pre> implementation the interaction between this class and <pre><code> PlaybackSupportFragment </code></pre> .</p><pre><code>public class PlaybackSupportFragmentGlueHost\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackSupportFragmentGlueHost.html
ProgressBarManager	A										<section class="prog__container"><p> Manager for showing/hiding progress bar widget. This class lets user specify an initial delay after which the progress bar will be shown. This is currently being used in <pre><code> BrowseFragment </code></pre> &amp; <pre><code> VerticalGridFragment </code></pre> to show <pre><code> ProgressBar </code></pre> while the data is being loaded.</p><pre><code>public final class ProgressBarManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/ProgressBarManager.html
RowsFragment	A										<section class="prog__container"><p> An ordered set of rows of leanback widgets. <p> A RowsFragment renders the elements of its <pre><code> ObjectAdapter </code></pre> as a set of rows in a vertical list. The Adapter's <pre><code> PresenterSelector </code></pre> must maintain subclasses of <pre><code> RowPresenter </code></pre> . </p><pre><code>public class RowsFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/RowsFragment.html
RowsFragment.MainFragmentAdapter	A										<section class="prog__container"><p> Returns whether its scrolling.</p><pre><code>public static class RowsFragment.MainFragmentAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/RowsFragment.MainFragmentAdapter.html
RowsFragment.MainFragmentRowsAdapter	A										<section class="prog__container"><p> Set the visibility titles/hover of browse rows.</p><pre><code>public static class RowsFragment.MainFragmentRowsAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/RowsFragment.MainFragmentRowsAdapter.html
RowsSupportFragment	A										<section class="prog__container"><p> An ordered set of rows of leanback widgets. <p> A RowsSupportFragment renders the elements of its <pre><code> ObjectAdapter </code></pre> as a set of rows in a vertical list. The Adapter's <pre><code> PresenterSelector </code></pre> must maintain subclasses of <pre><code> RowPresenter </code></pre> . </p><pre><code>public class RowsSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/RowsSupportFragment.html
RowsSupportFragment.MainFragmentAdapter	A										<section class="prog__container"><p> Returns whether its scrolling.</p><pre><code>public static class RowsSupportFragment.MainFragmentAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/RowsSupportFragment.MainFragmentAdapter.html
RowsSupportFragment.MainFragmentRowsAdapter	A										<section class="prog__container"><p> Set the visibility titles/hover of browse rows.</p><pre><code>public static class RowsSupportFragment.MainFragmentRowsAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/RowsSupportFragment.MainFragmentRowsAdapter.html
SearchFragment	A										<section class="prog__container"><p> A fragment to handle searches. An application will supply an implementation of the <pre><code> SearchFragment.SearchResultProvider </code></pre> interface to handle the search and return an <pre><code> ObjectAdapter </code></pre> containing the results. The results are rendered into a <pre><code> RowsFragment </code></pre> , in the same way that they are in a <pre><code> BrowseFragment </code></pre> . <p> If you do not supply a callback via <pre><code> setSpeechRecognitionCallback(SpeechRecognitionCallback) </code></pre> , an internal speech recognizer will be used for which your application will need to declare android.permission.RECORD_AUDIO in AndroidManifest file. If app's target version is &gt;= 23 and the device version is &gt;= 23, a permission dialog will show first time using speech recognition. 0 will be used as requestCode in requestPermissions() call. </p><pre><code>public class SearchFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/SearchFragment.html
SearchFragment.SearchResultProvider	A										<section class="prog__container"><p> Search API to be provided by the application.</p><pre><code>public static interface SearchFragment.SearchResultProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/SearchFragment.SearchResultProvider.html
SearchSupportFragment	A										<section class="prog__container"><p> A fragment to handle searches. An application will supply an implementation of the <pre><code> SearchSupportFragment.SearchResultProvider </code></pre> interface to handle the search and return an <pre><code> ObjectAdapter </code></pre> containing the results. The results are rendered into a <pre><code> RowsSupportFragment </code></pre> , in the same way that they are in a <pre><code> BrowseSupportFragment </code></pre> . <p> If you do not supply a callback via <pre><code> setSpeechRecognitionCallback(SpeechRecognitionCallback) </code></pre> , an internal speech recognizer will be used for which your application will need to declare android.permission.RECORD_AUDIO in AndroidManifest file. If app's target version is &gt;= 23 and the device version is &gt;= 23, a permission dialog will show first time using speech recognition. 0 will be used as requestCode in requestPermissions() call. </p><pre><code>public class SearchSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/SearchSupportFragment.html
SearchSupportFragment.SearchResultProvider	A										<section class="prog__container"><p> Search API to be provided by the application.</p><pre><code>public static interface SearchSupportFragment.SearchResultProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/SearchSupportFragment.SearchResultProvider.html
VerticalGridFragment	A										<section class="prog__container"><p> A fragment for creating leanback vertical grids. <p> Renders a vertical grid of objects given a <pre><code> VerticalGridPresenter </code></pre> and an <pre><code> ObjectAdapter </code></pre> . </p><pre><code>public class VerticalGridFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/VerticalGridFragment.html
VerticalGridSupportFragment	A										<section class="prog__container"><p> A fragment for creating leanback vertical grids. <p> Renders a vertical grid of objects given a <pre><code> VerticalGridPresenter </code></pre> and an <pre><code> ObjectAdapter </code></pre> . </p><pre><code>public class VerticalGridSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/VerticalGridSupportFragment.html
CursorMapper	A										<section class="prog__container"><p> Abstract class used to convert the current <pre><code> Cursor </code></pre> row to a single object.</p><pre><code>public abstract class CursorMapper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/database/CursorMapper.html
android.support.v17.leanback.database	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v17/leanback/database/package-summary.html
ColorFilterCache	A										<section class="prog__container"><p> Cache of <pre><code> ColorFilter </code></pre> s for a given color at different alpha levels.</p><pre><code>public final class ColorFilterCache\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/graphics/ColorFilterCache.html
ColorFilterDimmer	A										<section class="prog__container"><p> Helper class for applying a dim level to a View. The ColorFilterDimmer uses a ColorFilter in a Paint object to dim the view according to the currently active level.</p><pre><code>public final class ColorFilterDimmer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/graphics/ColorFilterDimmer.html
ColorOverlayDimmer	A										<section class="prog__container"><p> Helper class for assigning a dim color to Paint. It holds the alpha value for the current active level.</p><pre><code>public final class ColorOverlayDimmer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/graphics/ColorOverlayDimmer.html
android.support.v17.leanback.graphics	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v17/leanback/graphics/package-summary.html
android.support.v17.leanback.system	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v17/leanback/system/package-summary.html
Settings	A										<section class="prog__container"><p> Provides various preferences affecting Leanback runtime behavior. <p> Note this class is not thread safe and its methods should only be invoked from the UI thread </p><pre><code>public class Settings\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/system/Settings.html
AbstractDetailsDescriptionPresenter	A										<section class="prog__container"><p> An abstract <pre><code> Presenter </code></pre> for rendering a detailed description of an item. Typically this Presenter will be used in a <pre><code> DetailsOverviewRowPresenter </code></pre> or <pre><code> PlaybackControlsRowPresenter </code></pre> . <p> Subclasses must override <pre><code> onBindDescription(AbstractDetailsDescriptionPresenter.ViewHolder, Object) </code></pre> to implement the data binding for this Presenter. </p><pre><code>public abstract class AbstractDetailsDescriptionPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractDetailsDescriptionPresenter.html
AbstractDetailsDescriptionPresenter.ViewHolder	A										<section class="prog__container"><p> The ViewHolder for the <pre><code> AbstractDetailsDescriptionPresenter </code></pre> .</p><pre><code>public static class AbstractDetailsDescriptionPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractDetailsDescriptionPresenter.ViewHolder.html
AbstractMediaItemPresenter	A										<section class="prog__container"><p> Abstract <pre><code> Presenter </code></pre> class for rendering media items in a playlist format. Media item data provided for this presenter can implement the interface <pre><code> MultiActionsProvider </code></pre> , if the media rows wish to contain custom actions. Media items in the playlist are arranged as a vertical list with each row holding each media item's details provided by the user of this class and a set of optional custom actions. Each media item's details and actions are separately focusable. The appearance of each one of the media row components can be controlled through setting theme's attributes. Each media item row provides a view flipper for switching between different views depending on the playback state. A default layout is provided by this presenter for rendering different playback states, or a custom layout can be provided by the user by overriding the playbackMediaItemNumberViewFlipperLayout attribute in the currently specified theme. Subclasses should also override <pre><code> getMediaPlayState(Object) </code></pre> to provide the current play state of their media item model in case they wish to use different views depending on the playback state. The presenter can optionally provide line separators between media rows by setting <pre><code> setHasMediaRowSeparator(boolean) </code></pre> to true. <p> Subclasses must override <pre><code> onBindMediaDetails(AbstractMediaItemPresenter.ViewHolder, Object) </code></pre> to implement their media item model data binding to each row view. </p><pre><code>public abstract class AbstractMediaItemPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractMediaItemPresenter.html
AbstractMediaItemPresenter.ViewHolder	A										<section class="prog__container"><p> The ViewHolder for the <pre><code> AbstractMediaItemPresenter </code></pre> . It references different views that place different meta-data corresponding to a media item details, actions, selector, listeners, and presenters,</p><pre><code>public static class AbstractMediaItemPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractMediaItemPresenter.ViewHolder.html
AbstractMediaListHeaderPresenter	A										<section class="prog__container"><p> Abstract presenter class for rendering the header for a list of media items in a playlist. The presenter creates a <pre><code> AbstractMediaListHeaderPresenter.ViewHolder </code></pre> for the TextView holding the header text. <p> Subclasses of this class must override <pre><code> onBindMediaListHeaderViewHolder(ViewHolder, Object) </code></pre> in order to bind their header text to the media list header view. </p><pre><code>public abstract class AbstractMediaListHeaderPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractMediaListHeaderPresenter.html
AbstractMediaListHeaderPresenter.ViewHolder	A										<section class="prog__container"><p> The ViewHolder for the <pre><code> AbstractMediaListHeaderPresenter </code></pre> . It references the TextView that places the header text provided by the data binder.</p><pre><code>public static class AbstractMediaListHeaderPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractMediaListHeaderPresenter.ViewHolder.html
Action	A										<section class="prog__container"><p> An action contains one or two lines of text, an optional image and an optional id. It may also be invoked by one or more keycodes.</p><pre><code>public class Action\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/Action.html
ArrayObjectAdapter	A										<section class="prog__container"><p> An <pre><code> ObjectAdapter </code></pre> implemented with an <pre><code> ArrayList </code></pre> .</p><pre><code>public class ArrayObjectAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ArrayObjectAdapter.html
BaseCardView	A										<section class="prog__container"><p> A card style layout that responds to certain state changes. It arranges its children in a vertical column, with different regions becoming visible at different times. <p> A BaseCardView will draw its children based on its type, the region visibilities of the child types, and the state of the widget. A child may be marked as belonging to one of three regions: main, info, or extra. The main region is always visible, while the info and extra regions can be set to display based on the activated or selected state of the View. The card states are set by calling <pre><code> setActivated </code></pre> and <pre><code> setSelected </code></pre> . <p> See <pre><code> BaseCardView.LayoutParams </code></pre> for layout attributes. </p><pre><code>public class BaseCardView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/BaseCardView.html
BaseCardView.LayoutParams	A										<section class="prog__container"><p> Per-child layout information associated with BaseCardView.</p><pre><code>public static class BaseCardView.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/BaseCardView.LayoutParams.html
BaseOnItemViewClickedListener	A										<section class="prog__container"><p> Interface for receiving notification when an item view holder is clicked.</p><pre><code>public interface BaseOnItemViewClickedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/BaseOnItemViewClickedListener.html
BaseOnItemViewSelectedListener	A										<section class="prog__container"><p> Interface for receiving notification when a row or item becomes selected. The concept of current selection is different than focus. A row or item can be selected without having focus; for example, when a row header view gains focus then the corresponding row view becomes selected.</p><pre><code>public interface BaseOnItemViewSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/BaseOnItemViewSelectedListener.html
BrowseFrameLayout	A										<section class="prog__container"><p> A ViewGroup for managing focus behavior between overlapping views.</p><pre><code>public class BrowseFrameLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/BrowseFrameLayout.html
BrowseFrameLayout.OnChildFocusListener	A										<section class="prog__container"><p> Interface for managing child focus in a BrowseFrameLayout.</p><pre><code>public static interface BrowseFrameLayout.OnChildFocusListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/BrowseFrameLayout.OnChildFocusListener.html
BrowseFrameLayout.OnFocusSearchListener	A										<section class="prog__container"><p> Interface for selecting a focused view in a BrowseFrameLayout when the system focus finder couldn't find a view to focus.</p><pre><code>public static interface BrowseFrameLayout.OnFocusSearchListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/BrowseFrameLayout.OnFocusSearchListener.html
ClassPresenterSelector	A										<section class="prog__container"><p> A ClassPresenterSelector selects a <pre><code> Presenter </code></pre> based on the item's Java class.</p><pre><code>public final class ClassPresenterSelector\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ClassPresenterSelector.html
ControlButtonPresenterSelector	A										<section class="prog__container"><p> Displays primary and secondary controls for a <pre><code> PlaybackControlsRow </code></pre> . Binds to items of type <pre><code> Action </code></pre> .</p><pre><code>public class ControlButtonPresenterSelector\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ControlButtonPresenterSelector.html
CursorObjectAdapter	A										<section class="prog__container"><p> An <pre><code> ObjectAdapter </code></pre> implemented with a <pre><code> Cursor </code></pre> .</p><pre><code>public class CursorObjectAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/CursorObjectAdapter.html
DetailsOverviewLogoPresenter	A										<section class="prog__container"><p> Presenter that responsible to create a ImageView and bind to DetailsOverviewRow. The default implementation uses <pre><code> getImageDrawable() </code></pre> and binds to <pre><code> ImageView </code></pre> . <p> Default implementation assumes no scaleType on ImageView and uses intrinsic width and height of <pre><code> getImageDrawable() </code></pre> to initialize ImageView's layout params. To specify a fixed size and/or specify a scapeType, subclass should change ImageView's layout params and scaleType in <pre><code> onCreateView(ViewGroup) </code></pre> . <p> Subclass may override and has its own image view. Subclass may also download image from URL instead of using <pre><code> getImageDrawable() </code></pre> . It's subclass's responsibility to call <pre><code> notifyOnBindLogo(FullWidthDetailsOverviewRowPresenter.ViewHolder) </code></pre> whenever <pre><code> isBoundToImage(ViewHolder, DetailsOverviewRow) </code></pre> turned to true so that activity transition can be started. </p><pre><code>public class DetailsOverviewLogoPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewLogoPresenter.html
DetailsOverviewLogoPresenter.ViewHolder	A										<section class="prog__container"><p> ViewHolder for Logo view of DetailsOverviewRow.</p><pre><code>public static class DetailsOverviewLogoPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewLogoPresenter.ViewHolder.html
DetailsOverviewRow	A										<section class="prog__container"><p> An overview <pre><code> Row </code></pre> for a details fragment. This row consists of an image, a description view, and optionally a series of <pre><code> Action </code></pre> s that can be taken for the item. </p><pre><code>public class DetailsOverviewRow\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewRow.html
DetailsOverviewRow.Listener	A										<section class="prog__container"><p> Listener for changes of DetailsOverviewRow.</p><pre><code>public static class DetailsOverviewRow.Listener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewRow.Listener.html
DetailsOverviewRowPresenter	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> FullWidthDetailsOverviewRowPresenter </code></pre> </p><pre><code>public class DetailsOverviewRowPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewRowPresenter.html
DetailsOverviewRowPresenter.ViewHolder	A										<section class="prog__container"><p> A ViewHolder for the DetailsOverviewRow.</p><pre><code>public final class DetailsOverviewRowPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewRowPresenter.ViewHolder.html
DividerPresenter	A										<section class="prog__container"><p> DividerPresenter provides a default presentation for <pre><code> DividerRow </code></pre> in HeadersFragment.</p><pre><code>public class DividerPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/DividerPresenter.html
DividerRow	A										<section class="prog__container"><p> Used to represent divider in HeadersFragment.</p><pre><code>public class DividerRow\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/DividerRow.html
FacetProvider	A										<section class="prog__container"><p> This is the query interface to supply optional features(aka facets) on an object without the need of letting the object to subclass or implement java interfaces.</p><pre><code>public interface FacetProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FacetProvider.html
FacetProviderAdapter	A										<section class="prog__container"><p> Optional interface that implemented by <pre><code> RecyclerView.Adapter </code></pre> to query <pre><code> FacetProvider </code></pre> for a given type within Adapter. Note that <pre><code> RecyclerView.ViewHolder </code></pre> may also implement <pre><code> FacetProvider </code></pre> which has a higher priority than the one returned from the FacetProviderAdapter.</p><pre><code>public interface FacetProviderAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FacetProviderAdapter.html
FocusHighlight	A										<section class="prog__container"><p> Interface for highlighting the item that has focus.</p><pre><code>public interface FocusHighlight\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FocusHighlight.html
FocusHighlightHelper	A										<section class="prog__container"><p> Sets up the highlighting behavior when an item gains focus.</p><pre><code>public class FocusHighlightHelper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FocusHighlightHelper.html
FragmentAnimationProvider	A										<section class="prog__container"><p> FragmentAnimationProvider supplies animations for use during a fragment's onCreateAnimator callback. Animators added here will be added to an animation set and played together. This allows presenters used by a fragment to control their own fragment lifecycle animations.</p><pre><code>public interface FragmentAnimationProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FragmentAnimationProvider.html
FullWidthDetailsOverviewRowPresenter	A										<section class="prog__container"><p> Renders a <pre><code> DetailsOverviewRow </code></pre> to display an overview of an item. Typically this row will be the first row in a fragment such as the <pre><code> DetailsFragment </code></pre> . The View created by the FullWidthDetailsOverviewRowPresenter is made in three parts: logo view on the left, action list view on the top and a customizable detailed description view on the right. <p> The detailed description is rendered using a <pre><code> Presenter </code></pre> passed in <pre><code> FullWidthDetailsOverviewRowPresenter(Presenter) </code></pre> . Typically this will be an instance of <pre><code> AbstractDetailsDescriptionPresenter </code></pre> . The application can access the detailed description ViewHolder from <pre><code> getDetailsDescriptionViewHolder() </code></pre> . </p><pre><code>public class FullWidthDetailsOverviewRowPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FullWidthDetailsOverviewRowPresenter.html
FullWidthDetailsOverviewRowPresenter.Listener	A										<section class="prog__container"><p> Listeners for events on ViewHolder.</p><pre><code>public static abstract class FullWidthDetailsOverviewRowPresenter.Listener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FullWidthDetailsOverviewRowPresenter.Listener.html
FullWidthDetailsOverviewRowPresenter.ViewHolder.DetailsOverviewRowListener	A										<section class="prog__container"><p> Called when DetailsOverviewRow has changed actions adapter.</p><pre><code>public class FullWidthDetailsOverviewRowPresenter.ViewHolder.DetailsOverviewRowListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FullWidthDetailsOverviewRowPresenter.ViewHolder.DetailsOverviewRowListener.html
FullWidthDetailsOverviewRowPresenter.ViewHolder	A										<section class="prog__container"><p> A ViewHolder for the DetailsOverviewRow.</p><pre><code>public class FullWidthDetailsOverviewRowPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FullWidthDetailsOverviewRowPresenter.ViewHolder.html
FullWidthDetailsOverviewSharedElementHelper	A										<section class="prog__container"><p> Helper class to assist delayed shared element activity transition for view created by <pre><code> FullWidthDetailsOverviewRowPresenter </code></pre> . User must call <pre><code> setSharedElementEnterTransition(Activity, String, long) </code></pre> during activity onCreate() and call <pre><code> setListener(FullWidthDetailsOverviewRowPresenter.Listener) </code></pre> . The helper implements <pre><code> FullWidthDetailsOverviewRowPresenter.Listener </code></pre> and starts delayed activity transition once <pre><code> onBindLogo(ViewHolder) </code></pre> is called.</p><pre><code>public class FullWidthDetailsOverviewSharedElementHelper\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FullWidthDetailsOverviewSharedElementHelper.html
GuidanceStylist.Guidance	A										<section class="prog__container"><p> A data class representing contextual information for a <pre><code> GuidedStepFragment </code></pre> . Guidance consists of a short title, a longer description, a breadcrumb to help with global navigation (often indicating where the back button will lead), and an optional icon. All this information is intended to provide users with the appropriate context to make the decision(s) required by the current step. <p> Clients may provide a subclass of this if they wish to remember auxiliary data for use in a customized GuidanceStylist. </p><pre><code>public static class GuidanceStylist.Guidance\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidanceStylist.Guidance.html
GuidanceStylist	A										<section class="prog__container"><p> GuidanceStylist is used within a <pre><code> GuidedStepFragment </code></pre> to display contextual information for the decision(s) required at that step. <p> Many aspects of the base GuidanceStylist can be customized through theming; see the theme attributes below. Note that these attributes are not set on individual elements in layout XML, but instead would be set in a custom theme. See Styles and Themes for more information. <p> If these hooks are insufficient, this class may also be subclassed. Subclasses may wish to override the <pre><code> onProvideLayoutId() </code></pre> method to change the layout file used to display the guidance; more complex layouts may be supported by also providing a subclass of <pre><code> GuidanceStylist.Guidance </code></pre> with extra fields. <p> Note: If an alternate layout is provided, the following view IDs should be used to refer to base elements: <ul> <li> <pre><code> guidance_title </code></pre> </li> <li> <pre><code> guidance_description </code></pre> </li> <li> <pre><code> guidance_breadcrumb </code></pre> </li> <li> <pre><code> guidance_icon </code></pre> </li> </ul> <p> View IDs are allowed to be missing, in which case the corresponding views will be null. </p><pre><code>public class GuidanceStylist\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidanceStylist.html
GuidedAction.Builder	A										<section class="prog__container"><p> Builds a <pre><code> GuidedAction </code></pre> object.</p><pre><code>public static class GuidedAction.Builder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedAction.Builder.html
GuidedAction.BuilderBase	A										<section class="prog__container"><p> Base builder class to build a <pre><code> GuidedAction </code></pre> object. When subclass GuidedAction, you can override this BuilderBase class, implements your build() method which should call <pre><code> applyValues(GuidedAction) </code></pre> . When using GuidedAction directly, use <pre><code> GuidedAction.Builder </code></pre> .</p><pre><code>public static abstract class GuidedAction.BuilderBase\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedAction.BuilderBase.html
GuidedAction	A										<section class="prog__container"><p> A data class which represents an action within a <pre><code> GuidedStepFragment </code></pre> . GuidedActions contain at minimum a title and a description, and typically also an icon. <p> A GuidedAction typically represents a single action a user may take, but may also represent a possible choice out of a group of mutually exclusive choices (similar to radio buttons), or an information-only label (in which case the item cannot be clicked). <p> GuidedActions may optionally be checked. They may also indicate that they will request further user input on selection, in which case they will be displayed with a chevron indicator. <p> GuidedAction recommends to use <pre><code> GuidedAction.Builder </code></pre> . When application subclass GuidedAction, it can subclass <pre><code> GuidedAction.BuilderBase </code></pre> , implement its own builder() method where it should call <pre><code> applyValues(GuidedAction) </code></pre> . </p><pre><code>public class GuidedAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedAction.html
GuidedActionEditText	A										<section class="prog__container"><p> A custom EditText that satisfies the IME key monitoring requirements of GuidedStepFragment.</p><pre><code>public class GuidedActionEditText\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedActionEditText.html
GuidedActionsStylist	A										<section class="prog__container"><p> GuidedActionsStylist is used within a <pre><code> GuidedStepFragment </code></pre> to supply the right-side panel where users can take actions. It consists of a container for the list of actions, and a stationary selector view that indicates visually the location of focus. GuidedActionsStylist has two different layouts: default is for normal actions including text, radio, checkbox, DatePicker, etc, the other when <pre><code> setAsButtonActions() </code></pre> is called is recommended for button actions such as "yes", "no". <p> Many aspects of the base GuidedActionsStylist can be customized through theming; see the theme attributes below. Note that these attributes are not set on individual elements in layout XML, but instead would be set in a custom theme. See Styles and Themes for more information. <p> If these hooks are insufficient, this class may also be subclassed. Subclasses may wish to override the <pre><code> onProvideLayoutId() </code></pre> method to change the layout used to display the list container and selector; override <pre><code> onProvideItemLayoutId(int) </code></pre> and <pre><code> getItemViewType(GuidedAction) </code></pre> method to change the layout used to display each action. <p> To support a "click to activate" view similar to DatePicker, app needs: <li> Override <pre><code> onProvideItemLayoutId(int) </code></pre> and <pre><code> getItemViewType(GuidedAction) </code></pre> , provides a layout id for the action. <li> The layout must include a widget with id "guidedactions_activator_item", the widget is toggled edit mode by <pre><code> setActivated(boolean) </code></pre> . <li> Override <pre><code> onBindActivatorView(ViewHolder, GuidedAction) </code></pre> to populate values into View. <li> Override <pre><code> onUpdateActivatorView(ViewHolder, GuidedAction) </code></pre> to update action. <p> Note: If an alternate list layout is provided, the following view IDs must be supplied: <ul> <li> <pre><code> guidedactions_list </code></pre> </li> </ul> <p> These view IDs must be present in order for the stylist to function. The list ID must correspond to a <pre><code> VerticalGridView </code></pre> or subclass. <p> If an alternate item layout is provided, the following view IDs should be used to refer to base elements: <ul> <li> <pre><code> guidedactions_item_content </code></pre> </li> <li> <pre><code> guidedactions_item_title </code></pre> </li> <li> <pre><code> guidedactions_item_description </code></pre> </li> <li> <pre><code> guidedactions_item_icon </code></pre> </li> <li> <pre><code> guidedactions_item_checkmark </code></pre> </li> <li> <pre><code> guidedactions_item_chevron </code></pre> </li> </ul> <p> These view IDs are allowed to be missing, in which case the corresponding views in <pre><code> GuidedActionsStylist.ViewHolder </code></pre> will be null. <p> In order to support editable actions, the view associated with guidedactions_item_title should be a subclass of <pre><code> EditText </code></pre> , and should satisfy the <pre><code> ImeKeyMonitor </code></pre> interface. </p><pre><code>public class GuidedActionsStylist\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedActionsStylist.html
GuidedActionsStylist.ViewHolder	A										<section class="prog__container"><p> ViewHolder caches information about the action item layouts' subviews. Subclasses of <pre><code> GuidedActionsStylist </code></pre> may also wish to subclass this in order to add fields.</p><pre><code>public static class GuidedActionsStylist.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedActionsStylist.ViewHolder.html
GuidedDatePickerAction.Builder	A										<section class="prog__container"><p> Builder class to build a GuidedDatePickerAction.</p><pre><code>public static final class GuidedDatePickerAction.Builder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedDatePickerAction.Builder.html
GuidedDatePickerAction.BuilderBase	A										<section class="prog__container"><p> Base Builder class to build GuidedDatePickerAction. Subclass this BuilderBase when app needs to subclass GuidedDatePickerAction, implement your build() which should call <pre><code> applyDatePickerValues(GuidedDatePickerAction) </code></pre> . When using GuidedDatePickerAction directly, use <pre><code> GuidedDatePickerAction.Builder </code></pre> .</p><pre><code>public static abstract class GuidedDatePickerAction.BuilderBase\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedDatePickerAction.BuilderBase.html
GuidedDatePickerAction	A										<section class="prog__container"><p> Subclass of GuidedAction that can choose a date. The Action is editable by default; to make it read only, call hasEditableActivatorView(false) on the Builder.</p><pre><code>public class GuidedDatePickerAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedDatePickerAction.html
HeaderItem	A										<section class="prog__container"><p> A header item describes the metadata of a <pre><code> Row </code></pre> , such as a category of media items. May be subclassed to add more information.</p><pre><code>public class HeaderItem\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/HeaderItem.html
HorizontalGridView	A										<section class="prog__container"><p> A <pre><code> ViewGroup </code></pre> that shows items in a horizontal scrolling list. The items come from the <pre><code> RecyclerView.Adapter </code></pre> associated with this view. <p> <pre><code> RecyclerView.Adapter </code></pre> can optionally implement <pre><code> FacetProviderAdapter </code></pre> which provides <pre><code> FacetProvider </code></pre> for a given view type; <pre><code> RecyclerView.ViewHolder </code></pre> can also implement <pre><code> FacetProvider </code></pre> . Facet from ViewHolder has a higher priority than the one from FacetProviderAdapter associated with viewType. Supported optional facets are: <ol> <li> <pre><code> ItemAlignmentFacet </code></pre> When this facet is provided by ViewHolder or FacetProviderAdapter, it will override the item alignment settings set on HorizontalGridView. This facet also allows multiple alignment positions within one ViewHolder. </li> </ol> </p><pre><code>public class HorizontalGridView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/HorizontalGridView.html
HorizontalHoverCardSwitcher	A										<section class="prog__container"><p> A helper class for showing a hover card view below a <pre><code> HorizontalGridView </code></pre> . The hover card is aligned to the starting edge of the selected child view. If there is no space when scrolling to the end, the ending edge of the hover card will be aligned to the ending edge of the parent view, excluding padding.</p><pre><code>public final class HorizontalHoverCardSwitcher\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/HorizontalHoverCardSwitcher.html
ImageCardView	A										<section class="prog__container"><pre><code>public class ImageCardView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ImageCardView.html
ImeKeyMonitor	A										<section class="prog__container"><p> Interface for an EditText subclass that can delegate calls to onKeyPreIme up to a registered listener. <p> Used in editable actions within <pre><code> GuidedStepFragment </code></pre> to allow for custom back key handling. Specifically, this is used to implement the behavior that dismissing the IME also clears edit text focus. Clients who need to supply custom layouts for <pre><code> GuidedActionsStylist </code></pre> with their own EditText classes should satisfy this interface in order to inherit this behavior. </p><pre><code>public interface ImeKeyMonitor\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ImeKeyMonitor.html
ImeKeyMonitor.ImeKeyListener	A										<section class="prog__container"><p> Listener interface for key events intercepted pre-IME by edit text objects.</p><pre><code>public static interface ImeKeyMonitor.ImeKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ImeKeyMonitor.ImeKeyListener.html
ItemAlignmentFacet	A										<section class="prog__container"><p> Optional facet provided by <pre><code> RecyclerView.Adapter </code></pre> or <pre><code> RecyclerView.ViewHolder </code></pre> for use in <pre><code> HorizontalGridView </code></pre> and <pre><code> VerticalGridView </code></pre> . Apps using <pre><code> Presenter </code></pre> may set facet using <pre><code> setFacet(Class, Object) </code></pre> or <pre><code> setFacet(Class, Object) </code></pre> . Facet on ViewHolder has a higher priority than Presenter or Adapter. <p> ItemAlignmentFacet contains single or multiple <pre><code> ItemAlignmentFacet.ItemAlignmentDef </code></pre> s. First <pre><code> ItemAlignmentFacet.ItemAlignmentDef </code></pre> describes the default alignment position for ViewHolder, it also overrides the default item alignment settings on <pre><code> VerticalGridView </code></pre> and <pre><code> HorizontalGridView </code></pre> . When there are multiple <pre><code> ItemAlignmentFacet.ItemAlignmentDef </code></pre> s, the extra <pre><code> ItemAlignmentFacet.ItemAlignmentDef </code></pre> s are used to calculate deltas from first alignment position. When a descendant view is focused within the ViewHolder, grid view will visit focused view and its ancestors till the root of ViewHolder to match extra <pre><code> ItemAlignmentFacet.ItemAlignmentDef </code></pre> s' <pre><code> getItemAlignmentViewId() </code></pre> . Once a match found, the <pre><code> ItemAlignmentFacet.ItemAlignmentDef </code></pre> is used to adjust a scroll delta from default alignment position. </p><pre><code>public final class ItemAlignmentFacet\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ItemAlignmentFacet.html
ItemAlignmentFacet.ItemAlignmentDef	A										<section class="prog__container"><p> Definition of an alignment position under a view.</p><pre><code>public static class ItemAlignmentFacet.ItemAlignmentDef\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ItemAlignmentFacet.ItemAlignmentDef.html
ItemBridgeAdapter.AdapterListener	A										<section class="prog__container"><p> Interface for listening to ViewHolder operations.</p><pre><code>public static class ItemBridgeAdapter.AdapterListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ItemBridgeAdapter.AdapterListener.html
ItemBridgeAdapter	A										<section class="prog__container"><p> Bridge from <pre><code> Presenter </code></pre> to <pre><code> RecyclerView.Adapter </code></pre> . Public to allow use by third party Presenters.</p><pre><code>public class ItemBridgeAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ItemBridgeAdapter.html
ItemBridgeAdapter.ViewHolder	A										<section class="prog__container"><p> ViewHolder for the ItemBridgeAdapter.</p><pre><code>public class ItemBridgeAdapter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ItemBridgeAdapter.ViewHolder.html
ItemBridgeAdapter.Wrapper	A										<section class="prog__container"><p> Interface for wrapping a view created by a Presenter into another view. The wrapper must be the immediate parent of the wrapped view.</p><pre><code>public static abstract class ItemBridgeAdapter.Wrapper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ItemBridgeAdapter.Wrapper.html
ItemBridgeAdapterShadowOverlayWrapper	A										<section class="prog__container"><p> A wrapper class working with <pre><code> ItemBridgeAdapter </code></pre> to wrap item view in a <pre><code> ShadowOverlayContainer </code></pre> . The ShadowOverlayContainer is created from conditions of <pre><code> ShadowOverlayHelper </code></pre> .</p><pre><code>public class ItemBridgeAdapterShadowOverlayWrapper\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ItemBridgeAdapterShadowOverlayWrapper.html
ListRow	A										<section class="prog__container"><p> A <pre><code> Row </code></pre> composed of a optional <pre><code> HeaderItem </code></pre> , and an <pre><code> ObjectAdapter </code></pre> describing the items in the list.</p><pre><code>public class ListRow\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ListRow.html
ListRowHoverCardView	A										<section class="prog__container"><p> ListRowHoverCardView contains a title and description.</p><pre><code>public final class ListRowHoverCardView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ListRowHoverCardView.html
ListRowPresenter	A										<section class="prog__container"><p> ListRowPresenter renders <pre><code> ListRow </code></pre> using a <pre><code> HorizontalGridView </code></pre> hosted in a <pre><code> ListRowView </code></pre> . </p><pre><code>public class ListRowPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ListRowPresenter.html
ListRowPresenter.SelectItemViewHolderTask	A										<section class="prog__container"><p> A task on the ListRowPresenter.ViewHolder that can select an item by position in the HorizontalGridView and perform an optional item task on it.</p><pre><code>public static class ListRowPresenter.SelectItemViewHolderTask\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ListRowPresenter.SelectItemViewHolderTask.html
ListRowPresenter.ViewHolder	A										<section class="prog__container"><p> ViewHolder for the ListRowPresenter.</p><pre><code>public static class ListRowPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ListRowPresenter.ViewHolder.html
ListRowView	A										<section class="prog__container"><p> ListRowView is a <pre><code> ViewGroup </code></pre> which always contains a <pre><code> HorizontalGridView </code></pre> , and may optionally include a hover card.</p><pre><code>public final class ListRowView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ListRowView.html
MultiActionsProvider	A										<section class="prog__container"><p> An interface implemented by the user if they wish to provide actions for a media item row to be displayed by an <pre><code> AbstractMediaItemPresenter </code></pre> . A media row consists of media item details together with a number of custom actions, following the media item details. Classes implementing <pre><code> MultiActionsProvider </code></pre> can define their own media data model within their derived classes. <p> The actions are provided by overriding <pre><code> getActions() </code></pre> Provided actions should be instances of <pre><code> MultiActionsProvider.MultiAction </code></pre> . </p><pre><code>public interface MultiActionsProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/MultiActionsProvider.html
MultiActionsProvider.MultiAction	A										<section class="prog__container"><p> MultiAction represents an action that can have multiple states. <pre><code> getIndex() </code></pre> returns the current index within the drawables. Both list of drawables and index can be updated dynamically in the program, and the UI could be updated by notifying the listeners provided in <pre><code> AbstractMediaItemPresenter.ViewHolder </code></pre> .</p><pre><code>public static class MultiActionsProvider.MultiAction\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/MultiActionsProvider.MultiAction.html
ObjectAdapter.DataObserver	A										<section class="prog__container"><p> A DataObserver can be notified when an ObjectAdapter's underlying data changes. Separate methods provide notifications about different types of changes.</p><pre><code>public static abstract class ObjectAdapter.DataObserver\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.DataObserver.html
ObjectAdapter	A										<section class="prog__container"><p> Base class adapter to be used in leanback activities. Provides access to a data model and is decoupled from the presentation of the items via <pre><code> PresenterSelector </code></pre> .</p><pre><code>public abstract class ObjectAdapter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html
OnActionClickedListener	A										<section class="prog__container"><p> Interface for receiving notification when an <pre><code> Action </code></pre> is clicked.</p><pre><code>public interface OnActionClickedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/OnActionClickedListener.html
OnChildLaidOutListener	A										<section class="prog__container"><p> Interface for receiving notification when a child of this ViewGroup has been laid out.</p><pre><code>public interface OnChildLaidOutListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/OnChildLaidOutListener.html
OnChildSelectedListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface is deprecated. </strong> <br/> Use <pre><code> OnChildViewHolderSelectedListener </code></pre> </p><pre><code>public interface OnChildSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/OnChildSelectedListener.html
OnChildViewHolderSelectedListener	A										<section class="prog__container"><p> Interface for receiving notification when a child of this ViewGroup has been selected. There are two methods: <li> {link <pre><code> onChildViewHolderSelected(RecyclerView, RecyclerView.ViewHolder, int, int) </code></pre> } is called when the view holder is about to be selected. The listener could change size of the view holder in this callback. </li> <li> {link <pre><code> onChildViewHolderSelectedAndPositioned(RecyclerView, RecyclerView.ViewHolder, int, int) </code></pre> is called when view holder has been selected and laid out in RecyclerView. </li></p><pre><code>public abstract class OnChildViewHolderSelectedListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/OnChildViewHolderSelectedListener.html
OnItemViewClickedListener	A										<section class="prog__container"><p> Interface for receiving notification when a item view holder is clicked. This interface expects row object to be sub class of <pre><code> Row </code></pre> .</p><pre><code>public interface OnItemViewClickedListener\nimplements BaseOnItemViewClickedListener&lt;Row&gt;</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/OnItemViewClickedListener.html
OnItemViewSelectedListener	A										<section class="prog__container"><p> Interface for receiving notification when a row or item becomes selected. The concept of current selection is different than focus. A row or item can be selected without having focus; for example, when a row header view gains focus then the corresponding row view becomes selected. This interface expects row object to be sub class of <pre><code> Row </code></pre> .</p><pre><code>public interface OnItemViewSelectedListener\nimplements BaseOnItemViewSelectedListener&lt;Row&gt;</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/OnItemViewSelectedListener.html
android.support.v17.leanback.widget	A										<section class="prog__container">Support classes providing low level Leanback user interface building blocks: widgets and helpers.</section>	https://developer.android.com/reference/android/support/v17/leanback/widget/package-summary.html
PageRow	A										<section class="prog__container"><p> Used to represent content spanning full page.</p><pre><code>public class PageRow\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PageRow.html
PlaybackControlsRow.ClosedCaptioningAction	A										<section class="prog__container"><p> An action for displaying a CC (Closed Captioning) icon.</p><pre><code>public static class PlaybackControlsRow.ClosedCaptioningAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.ClosedCaptioningAction.html
PlaybackControlsRow.FastForwardAction	A										<section class="prog__container"><p> An action displaying an icon for fast forward.</p><pre><code>public static class PlaybackControlsRow.FastForwardAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.FastForwardAction.html
PlaybackControlsRow.HighQualityAction	A										<section class="prog__container"><p> An action for displaying a HQ (High Quality) icon.</p><pre><code>public static class PlaybackControlsRow.HighQualityAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.HighQualityAction.html
PlaybackControlsRow	A										<section class="prog__container"><p> A <pre><code> Row </code></pre> of playback controls to be displayed by a <pre><code> PlaybackControlsRowPresenter </code></pre> . This row consists of some optional item detail, a series of primary actions, and an optional series of secondary actions. <p> Controls are specified via an <pre><code> ObjectAdapter </code></pre> containing one or more <pre><code> Action </code></pre> s. </p><pre><code>public class PlaybackControlsRow\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.html
PlaybackControlsRow.MoreActions	A										<section class="prog__container"><p> An action displaying an icon for "more actions".</p><pre><code>public static class PlaybackControlsRow.MoreActions\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.MoreActions.html
PlaybackControlsRow.MultiAction	A										<section class="prog__container"><p> Base class for an action comprised of a series of icons.</p><pre><code>public static abstract class PlaybackControlsRow.MultiAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.MultiAction.html
PlaybackControlsRow.PictureInPictureAction	A										<section class="prog__container"><p> An action displaying an icon for picture-in-picture.</p><pre><code>public static class PlaybackControlsRow.PictureInPictureAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.PictureInPictureAction.html
PlaybackControlsRow.PlayPauseAction	A										<section class="prog__container"><p> An action displaying icons for play and pause.</p><pre><code>public static class PlaybackControlsRow.PlayPauseAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.PlayPauseAction.html
PlaybackControlsRow.RepeatAction	A										<section class="prog__container"><p> An action for displaying three repeat states: none, one, or all.</p><pre><code>public static class PlaybackControlsRow.RepeatAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.RepeatAction.html
PlaybackControlsRow.RewindAction	A										<section class="prog__container"><p> An action displaying an icon for rewind.</p><pre><code>public static class PlaybackControlsRow.RewindAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.RewindAction.html
PlaybackControlsRow.ShuffleAction	A										<section class="prog__container"><p> An action for displaying a shuffle icon.</p><pre><code>public static class PlaybackControlsRow.ShuffleAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.ShuffleAction.html
PlaybackControlsRow.SkipNextAction	A										<section class="prog__container"><p> An action displaying an icon for skip next.</p><pre><code>public static class PlaybackControlsRow.SkipNextAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.SkipNextAction.html
PlaybackControlsRow.SkipPreviousAction	A										<section class="prog__container"><p> An action displaying an icon for skip previous.</p><pre><code>public static class PlaybackControlsRow.SkipPreviousAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.SkipPreviousAction.html
PlaybackControlsRow.ThumbsAction	A										<section class="prog__container"><p> A base class for displaying a thumbs action.</p><pre><code>public static abstract class PlaybackControlsRow.ThumbsAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.ThumbsAction.html
PlaybackControlsRow.ThumbsDownAction	A										<section class="prog__container"><p> An action displaying an icon for thumbs down.</p><pre><code>public static class PlaybackControlsRow.ThumbsDownAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.ThumbsDownAction.html
PlaybackControlsRow.ThumbsUpAction	A										<section class="prog__container"><p> An action displaying an icon for thumbs up.</p><pre><code>public static class PlaybackControlsRow.ThumbsUpAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.ThumbsUpAction.html
PlaybackControlsRowPresenter	A										<section class="prog__container"><p> A PlaybackControlsRowPresenter renders a <pre><code> PlaybackControlsRow </code></pre> to display a series of playback control buttons. Typically this row will be the first row in a fragment such as the <pre><code> PlaybackOverlayFragment </code></pre> . <p> The detailed description is rendered using a <pre><code> Presenter </code></pre> passed in <pre><code> PlaybackControlsRowPresenter(Presenter) </code></pre> . Typically this will be an instance of <pre><code> AbstractDetailsDescriptionPresenter </code></pre> . The application can access the detailed description ViewHolder from <pre><code> mDescriptionViewHolder </code></pre> . </p><pre><code>public class PlaybackControlsRowPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRowPresenter.html
PlaybackControlsRowPresenter.ViewHolder	A										<section class="prog__container"><p> A ViewHolder for the PlaybackControlsRow.</p><pre><code>public class PlaybackControlsRowPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRowPresenter.ViewHolder.html
PlaybackRowPresenter	A										<section class="prog__container"><p> Subclass of <pre><code> RowPresenter </code></pre> that can define the desired behavior when the view reappears. This is presently used by <pre><code> PlaybackControlsRowPresenter </code></pre> to update the UI after we show/hide the controls view.</p><pre><code>public abstract class PlaybackRowPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackRowPresenter.html
PlaybackRowPresenter.ViewHolder	A										<section class="prog__container"><p> This container is used for trapping click events and passing them to the playback controls.</p><pre><code>public static class PlaybackRowPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackRowPresenter.ViewHolder.html
Presenter	A										<section class="prog__container"><p> A Presenter is used to generate <pre><code> View </code></pre> s and bind Objects to them on demand. It is closely related to the concept of an <pre><code> RecyclerView.Adapter </code></pre> , but is not position-based. The leanback framework implements the adapter concept using <pre><code> ObjectAdapter </code></pre> which refers to a Presenter (or <pre><code> PresenterSelector </code></pre> ) instance. <p> Presenters should be stateless. Presenters typically extend <pre><code> Presenter.ViewHolder </code></pre> to store all necessary view state information, such as references to child views to be used when binding to avoid expensive calls to <pre><code> findViewById(int) </code></pre> . </p><pre><code>public abstract class Presenter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.html
Presenter.ViewHolder	A										<section class="prog__container"><p> ViewHolder can be subclassed and used to cache any view accessors needed to improve binding performance (for example, results of findViewById) without needing to subclass a View.</p><pre><code>public static class Presenter.ViewHolder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.ViewHolder.html
Presenter.ViewHolderTask	A										<section class="prog__container"><p> Base class to perform a task on Presenter.ViewHolder.</p><pre><code>public static abstract class Presenter.ViewHolderTask\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.ViewHolderTask.html
PresenterSelector	A										<section class="prog__container"><p> A PresenterSelector is used to obtain a <pre><code> Presenter </code></pre> for a given Object. Similar to <pre><code> Presenter </code></pre> , PresenterSelector is stateless.</p><pre><code>public abstract class PresenterSelector\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PresenterSelector.html
PresenterSwitcher	A										<section class="prog__container"><p> An abstract helper class that switches a view in its parent view using a <pre><code> PresenterSelector </code></pre> . A subclass should implement <pre><code> insertView(View) </code></pre> to define how to add the view in parent, and may optionally override <pre><code> onViewSelected(View) </code></pre> .</p><pre><code>public abstract class PresenterSwitcher\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PresenterSwitcher.html
Row	A										<section class="prog__container"><p> The base class for all rows. A commonly used subclass is the <pre><code> ListRow </code></pre> . Custom subclasses may define other types of rows.</p><pre><code>public class Row\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/Row.html
RowHeaderPresenter	A										<section class="prog__container"><p> RowHeaderPresenter provides a default presentation for <pre><code> HeaderItem </code></pre> using a <pre><code> RowHeaderView </code></pre> and optionally a TextView for description. If a subclass creates its own view, the subclass must also override <pre><code> onCreateViewHolder(ViewGroup) </code></pre> , <pre><code> onSelectLevelChanged(ViewHolder) </code></pre> .</p><pre><code>public class RowHeaderPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/RowHeaderPresenter.html
RowHeaderPresenter.ViewHolder	A										<section class="prog__container"><p> A ViewHolder for the RowHeaderPresenter.</p><pre><code>public static class RowHeaderPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/RowHeaderPresenter.ViewHolder.html
RowHeaderView	A										<section class="prog__container"><p> RowHeaderView is a header text view.</p><pre><code>public final class RowHeaderView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/RowHeaderView.html
RowPresenter	A										<section class="prog__container"><p> An abstract <pre><code> Presenter </code></pre> that renders an Object in RowsFragment, the object can be subclass <pre><code> Row </code></pre> or a generic one. When the object is not <pre><code> Row </code></pre> class, <pre><code> getRow() </code></pre> returns null. </p><pre><code>public abstract class RowPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/RowPresenter.html
RowPresenter.ViewHolder	A										<section class="prog__container"><p> A ViewHolder for a <pre><code> Row </code></pre> .</p><pre><code>public static class RowPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/RowPresenter.ViewHolder.html
SearchBar	A										<section class="prog__container"><p> A search widget containing a search orb and a text entry view. <p> Note: When <pre><code> SpeechRecognitionCallback </code></pre> is not used, i.e. using <pre><code> SpeechRecognizer </code></pre> , your application will need to declare android.permission.RECORD_AUDIO in manifest file. If your application target &gt;= 23 and the device is running &gt;= 23, it needs implement <pre><code> SearchBar.SearchBarPermissionListener </code></pre> where requests runtime permission. </p><pre><code>public class SearchBar\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SearchBar.html
SearchBar.SearchBarListener	A										<section class="prog__container"><p> Interface for receiving notification of search query changes.</p><pre><code>public static interface SearchBar.SearchBarListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SearchBar.SearchBarListener.html
SearchBar.SearchBarPermissionListener	A										<section class="prog__container"><p> Interface that handles runtime permissions requests. App sets listener on SearchBar via <pre><code> setPermissionListener(SearchBarPermissionListener) </code></pre> .</p><pre><code>public static interface SearchBar.SearchBarPermissionListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SearchBar.SearchBarPermissionListener.html
SearchEditText	A										<section class="prog__container"><p> EditText widget that monitors keyboard changes.</p><pre><code>public class SearchEditText\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SearchEditText.html
SearchEditText.OnKeyboardDismissListener	A										<section class="prog__container"><p> Interface for receiving notification when the keyboard is dismissed.</p><pre><code>public static interface SearchEditText.OnKeyboardDismissListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SearchEditText.OnKeyboardDismissListener.html
SearchOrbView.Colors	A										<section class="prog__container"><p> A set of colors used to display the search orb.</p><pre><code>public static class SearchOrbView.Colors\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SearchOrbView.Colors.html
SearchOrbView	A										<section class="prog__container"><p> <p> A widget that draws a search affordance, represented by a round background and an icon. </p><pre><code>public class SearchOrbView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SearchOrbView.html
SectionRow	A										<section class="prog__container"><p> Used to represent section item in HeadersFragment. Unlike a normal Row, it's not focusable.</p><pre><code>public class SectionRow\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SectionRow.html
ShadowOverlayContainer	A										<section class="prog__container"><p> Provides an SDK version-independent wrapper to support shadows, color overlays, and rounded corners. It's not always preferred to create a ShadowOverlayContainer, use <pre><code> ShadowOverlayHelper </code></pre> instead. <p> <pre><code> prepareParentForShadow(ViewGroup) </code></pre> must be called on parent of container before using shadow. Depending on sdk version, optical bounds might be applied to parent. </p><pre><code>public class ShadowOverlayContainer\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ShadowOverlayContainer.html
ShadowOverlayHelper.Builder	A										<section class="prog__container"><p> Builder for creating ShadowOverlayHelper.</p><pre><code>public static final class ShadowOverlayHelper.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ShadowOverlayHelper.Builder.html
ShadowOverlayHelper	A										<section class="prog__container"><p> ShadowOverlayHelper is a helper class for shadow, overlay color and rounded corner. There are many choices to implement Shadow, overlay color. Initialize it with ShadowOverlayHelper.Builder and it decides the best strategy based on options user choose and current platform version. <li> For shadow: it may use 9-patch with opticalBounds or Z-value based shadow for API &gt;= 21. When 9-patch is used, it requires a ShadowOverlayContainer to include 9-patch views. <li> For overlay: it may use ShadowOverlayContainer which overrides draw() or it may use setForeground(new ColorDrawable()) for API&gt;=23. The foreground support might be disabled if rounded corner is applied due to performance reason. <li> For rounded-corner: it uses a ViewOutlineProvider for API&gt;=21. There are two different strategies: use Wrapper with a ShadowOverlayContainer; or apply rounded corner, overlay and rounded-corner to the view itself. Below is an example of how helper is used. <pre><code> ShadowOverlayHelper mHelper = new ShadowOverlayHelper.Builder(). .needsOverlay(true).needsRoundedCorner(true).needsShadow(true) .build(); mHelper.prepareParentForShadow(parentView); // apply optical-bounds for 9-patch shadow. mHelper.setOverlayColor(view, Color.argb(0x80, 0x80, 0x80, 0x80)); mHelper.setShadowFocusLevel(view, 1.0f); ... View initializeView(View view) { if (mHelper.needsWrapper()) { ShadowOverlayContainer wrapper = mHelper.createShadowOverlayContainer(context); wrapper.wrap(view); return wrapper; } else { mHelper.onViewCreated(view); return view; } } ... </code></pre> </li> </li> </li></p><pre><code>public final class ShadowOverlayHelper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ShadowOverlayHelper.html
ShadowOverlayHelper.Options	A										<section class="prog__container"><p> Option values for ShadowOverlayContainer.</p><pre><code>public static final class ShadowOverlayHelper.Options\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ShadowOverlayHelper.Options.html
SinglePresenterSelector	A										<section class="prog__container"><p> A <pre><code> PresenterSelector </code></pre> that always returns the same <pre><code> Presenter </code></pre> . Useful for rows of items of the same type that are all rendered the same way.</p><pre><code>public final class SinglePresenterSelector\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SinglePresenterSelector.html
SparseArrayObjectAdapter	A										<section class="prog__container"><p> An <pre><code> ObjectAdapter </code></pre> implemented with a <pre><code> SparseArray </code></pre> . This class maintains an array of objects where each object is associated with an integer key which determines its order relative to other objects.</p><pre><code>public class SparseArrayObjectAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SparseArrayObjectAdapter.html
SpeechOrbView	A										<section class="prog__container"><p> A subclass of <pre><code> SearchOrbView </code></pre> that visualizes the state of an ongoing speech recognition.</p><pre><code>public class SpeechOrbView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SpeechOrbView.html
SpeechRecognitionCallback	A										<section class="prog__container"><p> Interface for receiving notification that speech recognition should be initiated.</p><pre><code>public interface SpeechRecognitionCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SpeechRecognitionCallback.html
TitleHelper	A										<section class="prog__container"><p> Helper for managing <pre><code> TitleView </code></pre> , including transitions and focus movement. Assumes the TitleView is overlayed on the topmost portion of the scene root view.</p><pre><code>public class TitleHelper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/TitleHelper.html
TitleView	A										<section class="prog__container"><p> Title view for a leanback fragment.</p><pre><code>public class TitleView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/TitleView.html
TitleViewAdapter	A										<section class="prog__container"><p> This class allows a customized widget class to implement <pre><code> TitleViewAdapter.Provider </code></pre> and expose <pre><code> TitleViewAdapter </code></pre> methods to containing fragment (e.g. BrowseFragment or DetailsFragment). The title view must have a search orb view ( <pre><code> getSearchAffordanceView() </code></pre> aligned to start and can typically have a branding Drawable and or title text aligned to end. The branding part is fully open to customization: not necessary to be a drawable or text.</p><pre><code>public abstract class TitleViewAdapter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/TitleViewAdapter.html
TitleViewAdapter.Provider	A										<section class="prog__container"><p> Interface to be implemented by a customized widget class to implement <pre><code> TitleViewAdapter </code></pre> .</p><pre><code>public static interface TitleViewAdapter.Provider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/TitleViewAdapter.Provider.html
VerticalGridPresenter	A										<section class="prog__container"><p> A presenter that renders objects in a <pre><code> VerticalGridView </code></pre> .</p><pre><code>public class VerticalGridPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/VerticalGridPresenter.html
VerticalGridPresenter.ViewHolder	A										<section class="prog__container"><p> ViewHolder for the VerticalGridPresenter.</p><pre><code>public static class VerticalGridPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/VerticalGridPresenter.ViewHolder.html
VerticalGridView	A										<section class="prog__container"><p> A <pre><code> ViewGroup </code></pre> that shows items in a vertically scrolling list. The items come from the <pre><code> RecyclerView.Adapter </code></pre> associated with this view. <p> <pre><code> RecyclerView.Adapter </code></pre> can optionally implement <pre><code> FacetProviderAdapter </code></pre> which provides <pre><code> FacetProvider </code></pre> for a given view type; <pre><code> RecyclerView.ViewHolder </code></pre> can also implement <pre><code> FacetProvider </code></pre> . Facet from ViewHolder has a higher priority than the one from FacetProviderAdapter associated with viewType. Supported optional facets are: <ol> <li> <pre><code> ItemAlignmentFacet </code></pre> When this facet is provided by ViewHolder or FacetProviderAdapter, it will override the item alignment settings set on VerticalGridView. This facet also allows multiple alignment positions within one ViewHolder. </li> </ol> </p><pre><code>public class VerticalGridView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/VerticalGridView.html
ViewHolderTask	A										<section class="prog__container"><p> Interface for schedule task on a ViewHolder.</p><pre><code>public interface ViewHolderTask\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ViewHolderTask.html
android.support.v17.leanback.widget.picker	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v17/leanback/widget/picker/package-summary.html
Picker	A										<section class="prog__container"><p> Picker is a widget showing multiple customized <pre><code> PickerColumn </code></pre> s. The PickerColumns are initialized in <pre><code> setColumns(List) </code></pre> . Call <pre><code> setColumnAt(int, PickerColumn) </code></pre> if the column value range or labels change. Call <pre><code> setColumnValue(int, int, boolean) </code></pre> to update the current value of PickerColumn. <p> Picker has two states and will change height: <li> <pre><code> isActivated() </code></pre> is true: Picker shows typically three items vertically (see <pre><code> getActivatedVisibleItemCount() </code></pre> }. Columns other than <pre><code> getSelectedColumn() </code></pre> still shows one item if the Picker is focused. On a touch screen device, the Picker will not get focus so it always show three items on all columns. On a non-touch device (a TV), the Picker will show three items only on currently activated column. If the Picker has focus, it will intercept DPAD directions and select activated column. <li> <pre><code> isActivated() </code></pre> is false: Picker shows one item vertically (see <pre><code> getVisibleItemCount() </code></pre> ) on all columns. The size of Picker shrinks. </li> </li> </p><pre><code>public class Picker\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/picker/Picker.html
Picker.PickerValueListener	A										<section class="prog__container"><pre><code>public static interface Picker.PickerValueListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/picker/Picker.PickerValueListener.html
PickerColumn	A										<section class="prog__container"><p> Picker column class used by <pre><code> Picker </code></pre> , defines a contiguous value ranges and associated labels. A PickerColumn has a minValue and maxValue to choose between. The Picker column has a current value. The labels can be dynamically generated from value by <pre><code> setLabelFormat(String) </code></pre> or a list of static labels set by <pre><code> setStaticLabels(CharSequence[]) </code></pre> .</p><pre><code>public class PickerColumn\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/picker/PickerColumn.html
BaseLeanbackPreferenceFragment	A										<section class="prog__container"><p> This fragment provides a preference fragment with leanback-style behavior, suitable for embedding into broader UI elements.</p><pre><code>public abstract class BaseLeanbackPreferenceFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/BaseLeanbackPreferenceFragment.html
LeanbackListPreferenceDialogFragment.AdapterMulti	A										<section class="prog__container"><p> Returns the total number of items in the data set held by the adapter.</p><pre><code>public class LeanbackListPreferenceDialogFragment.AdapterMulti\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/LeanbackListPreferenceDialogFragment.AdapterMulti.html
LeanbackListPreferenceDialogFragment.AdapterSingle	A										<section class="prog__container"><p> Returns the total number of items in the data set held by the adapter.</p><pre><code>public class LeanbackListPreferenceDialogFragment.AdapterSingle\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/LeanbackListPreferenceDialogFragment.AdapterSingle.html
LeanbackListPreferenceDialogFragment	A										<section class="prog__container"><pre><code>public class LeanbackListPreferenceDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/LeanbackListPreferenceDialogFragment.html
LeanbackListPreferenceDialogFragment.ViewHolder	A										<section class="prog__container"><pre><code>public static class LeanbackListPreferenceDialogFragment.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/LeanbackListPreferenceDialogFragment.ViewHolder.html
LeanbackListPreferenceDialogFragment.ViewHolder.OnItemClickListener	A										<section class="prog__container"><pre><code>public static interface LeanbackListPreferenceDialogFragment.ViewHolder.OnItemClickListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/LeanbackListPreferenceDialogFragment.ViewHolder.OnItemClickListener.html
LeanbackPreferenceDialogFragment	A										<section class="prog__container"><pre><code>public class LeanbackPreferenceDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/LeanbackPreferenceDialogFragment.html
LeanbackPreferenceFragment	A										<section class="prog__container"><p> This fragment provides a fully decorated leanback-style preference fragment, including a list background and header. <p> The following sample code shows a simple leanback preference fragment that is populated from a resource. The resource it loads is: </p><pre><code>public abstract class LeanbackPreferenceFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/LeanbackPreferenceFragment.html
LeanbackSettingsFragment	A										<section class="prog__container"><p> This fragment provides a container for displaying a <pre><code> LeanbackPreferenceFragment </code></pre> <p> The following sample code shows a simple leanback preference fragment that is populated from a resource. The resource it loads is: </p><pre><code>public abstract class LeanbackSettingsFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/LeanbackSettingsFragment.html
android.support.v17.preference	A										<section class="prog__container">The following sample code shows a simple leanback preference fragment that is populated from a resource. </section>	https://developer.android.com/reference/android/support/v17/preference/package-summary.html
R.color	A										<section class="prog__container"><pre><code>public static final class R.color\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/R.color.html
R.dimen	A										<section class="prog__container"><pre><code>public static final class R.dimen\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/R.dimen.html
R	A										<section class="prog__container"><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/R.html
R.id	A										<section class="prog__container"><pre><code>public static final class R.id\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/R.id.html
R.layout	A										<section class="prog__container"><pre><code>public static final class R.layout\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/R.layout.html
R.style	A										<section class="prog__container"><pre><code>public static final class R.style\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/R.style.html
android.support.v4	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/R.html
AccessibilityServiceInfoCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> AccessibilityService </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class AccessibilityServiceInfoCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/accessibilityservice/AccessibilityServiceInfoCompat.html
android.support.v4.accessibilityservice	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/accessibilityservice/package-summary.html
ActionBarDrawerToggle.Delegate	A										<section class="prog__container"><p> Set the Action Bar's up indicator content description.</p><pre><code>public static interface ActionBarDrawerToggle.Delegate\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ActionBarDrawerToggle.Delegate.html
ActionBarDrawerToggle.DelegateProvider	A										<section class="prog__container"><p> Allows an implementing Activity to return an <pre><code> ActionBarDrawerToggle.Delegate </code></pre> to use with ActionBarDrawerToggle.</p><pre><code>public static interface ActionBarDrawerToggle.DelegateProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ActionBarDrawerToggle.DelegateProvider.html
ActionBarDrawerToggle	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Please use ActionBarDrawerToggle in support-v7-appcompat. <p> This class provides a handy way to tie together the functionality of <pre><code> DrawerLayout </code></pre> and the framework <pre><code> ActionBar </code></pre> to implement the recommended design for navigation drawers. <p> To use <pre><code> ActionBarDrawerToggle </code></pre> , create one in your Activity and call through to the following methods corresponding to your Activity callbacks: </p><pre><code>public class ActionBarDrawerToggle\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ActionBarDrawerToggle.html
ActivityCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> Activity </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public class ActivityCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ActivityCompat.html
ActivityCompat.OnRequestPermissionsResultCallback	A										<section class="prog__container"><p> This interface is the contract for receiving the results for permission requests.</p><pre><code>public static interface ActivityCompat.OnRequestPermissionsResultCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ActivityCompat.OnRequestPermissionsResultCallback.html
ActivityManagerCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> ActivityManager </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class ActivityManagerCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ActivityManagerCompat.html
ActivityOptionsCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> ActivityOptions </code></pre> introduced in API level 16 in a backwards compatible fashion.</p><pre><code>public class ActivityOptionsCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ActivityOptionsCompat.html
AppLaunchChecker	A										<section class="prog__container"><p> This class provides APIs for determining how an app has been launched. This can be useful if you want to confirm that a user has launched your app through its front door activity from their launcher/home screen, rather than just if the app has been opened in the past in order to view a link, open a document or perform some other service for other apps on the device.</p><pre><code>public class AppLaunchChecker\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/AppLaunchChecker.html
AppOpsManagerCompat	A										<section class="prog__container"><p> Helper for accessing features in android.app.AppOpsManager introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class AppOpsManagerCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/AppOpsManagerCompat.html
BundleCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> Bundle </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class BundleCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/BundleCompat.html
DialogFragment	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> DialogFragment </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p><pre><code>public class DialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/DialogFragment.html
Fragment	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> Fragment </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework <pre><code> Fragment </code></pre> documentation for a class overview. <p> The main differences when using this support version instead of the framework version are: <ul> <li> Your activity must extend <pre><code> FragmentActivity </code></pre> <li> You must call <pre><code> getSupportFragmentManager() </code></pre> to get the <pre><code> FragmentManager </code></pre> </li> </li> </ul> </p><pre><code>public class Fragment\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/Fragment.html
Fragment.InstantiationException	A										<section class="prog__container"><p> Thrown by <pre><code> instantiate(Context, String, Bundle) </code></pre> when there is an instantiation failure.</p><pre><code>public static class Fragment.InstantiationException\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/Fragment.InstantiationException.html
Fragment.SavedState	A										<section class="prog__container"><p> State information that has been retrieved from a fragment instance through <pre><code> FragmentManager.saveFragmentInstanceState </code></pre> .</p><pre><code>public static class Fragment.SavedState\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/Fragment.SavedState.html
FragmentActivity	A										<section class="prog__container"><p> Base class for activities that want to use the support-based <pre><code> Fragment </code></pre> and <pre><code> Loader </code></pre> APIs. <p> When using this class as opposed to new platform's built-in fragment and loader support, you must use the <pre><code> getSupportFragmentManager() </code></pre> and <pre><code> getSupportLoaderManager() </code></pre> methods respectively to access those features. <p> Known limitations: </p><pre><code>public class FragmentActivity\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentActivity.html
FragmentContainer	A										<section class="prog__container"><p> Callbacks to a <pre><code> Fragment </code></pre> 's container.</p><pre><code>public abstract class FragmentContainer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentContainer.html
FragmentController	A										<section class="prog__container"><p> Provides integration points with a <pre><code> FragmentManager </code></pre> for a fragment host. <p> It is the responsibility of the host to take care of the Fragment's lifecycle. The methods provided by <pre><code> FragmentController </code></pre> are for that purpose. </p><pre><code>public class FragmentController\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentController.html
FragmentHostCallback	A										<section class="prog__container"><p> Integration points with the Fragment host. <p> Fragments may be hosted by any object; such as an <pre><code> Activity </code></pre> . In order to host fragments, implement <pre><code> FragmentHostCallback </code></pre> , overriding the methods applicable to the host. </p><pre><code>public abstract class FragmentHostCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentHostCallback.html
FragmentManager.BackStackEntry	A										<section class="prog__container"><p> Representation of an entry on the fragment back stack, as created with <pre><code> FragmentTransaction.addToBackStack() </code></pre> . Entries can later be retrieved with <pre><code> FragmentManager.getBackStackEntryAt() </code></pre> . <p> Note that you should never hold on to a BackStackEntry object; the identifier as returned by <pre><code> getId() </code></pre> is the only thing that will be persisted across activity instances. </p><pre><code>public static interface FragmentManager.BackStackEntry\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentManager.BackStackEntry.html
FragmentManager.FragmentLifecycleCallbacks	A										<section class="prog__container"><p> Callback interface for listening to fragment state changes that happen within a given FragmentManager.</p><pre><code>public static abstract class FragmentManager.FragmentLifecycleCallbacks\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentManager.FragmentLifecycleCallbacks.html
FragmentManager	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> FragmentManager </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework <pre><code> FragmentManager </code></pre> documentation for a class overview. <p> Your activity must derive from <pre><code> FragmentActivity </code></pre> to use this. From such an activity, you can acquire the <pre><code> FragmentManager </code></pre> by calling <pre><code> getSupportFragmentManager() </code></pre> . </p><pre><code>public abstract class FragmentManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentManager.html
FragmentManager.OnBackStackChangedListener	A										<section class="prog__container"><p> Interface to watch for changes to the back stack.</p><pre><code>public static interface FragmentManager.OnBackStackChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentManager.OnBackStackChangedListener.html
FragmentManagerNonConfig	A										<section class="prog__container"><p> FragmentManagerNonConfig stores the retained instance fragments across activity recreation events. <p> Apps should treat objects of this type as opaque, returned by and passed to the state save and restore process for fragments in <pre><code> retainNonConfig() </code></pre> and <pre><code> restoreAllState(Parcelable, FragmentManagerNonConfig) </code></pre> . </p><pre><code>public class FragmentManagerNonConfig\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentManagerNonConfig.html
FragmentPagerAdapter	A										<section class="prog__container"><p> Implementation of <pre><code> PagerAdapter </code></pre> that represents each page as a <pre><code> Fragment </code></pre> that is persistently kept in the fragment manager as long as the user can return to the page. <p> This version of the pager is best for use when there are a handful of typically more static fragments to be paged through, such as a set of tabs. The fragment of each page the user visits will be kept in memory, though its view hierarchy may be destroyed when not visible. This can result in using a significant amount of memory since fragment instances can hold on to an arbitrary amount of state. For larger sets of pages, consider <pre><code> FragmentStatePagerAdapter </code></pre> . <p> When using FragmentPagerAdapter the host ViewPager must have a valid ID set. </p><pre><code>public abstract class FragmentPagerAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentPagerAdapter.html
FragmentStatePagerAdapter	A										<section class="prog__container"><p> Implementation of <pre><code> PagerAdapter </code></pre> that uses a <pre><code> Fragment </code></pre> to manage each page. This class also handles saving and restoring of fragment's state. <p> This version of the pager is more useful when there are a large number of pages, working more like a list view. When pages are not visible to the user, their entire fragment may be destroyed, only keeping the saved state of that fragment. This allows the pager to hold on to much less memory associated with each visited page as compared to <pre><code> FragmentPagerAdapter </code></pre> at the cost of potentially more overhead when switching between pages. <p> When using FragmentPagerAdapter the host ViewPager must have a valid ID set. </p><pre><code>public abstract class FragmentStatePagerAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentStatePagerAdapter.html
FragmentTabHost	A										<section class="prog__container"><p> Special TabHost that allows the use of <pre><code> Fragment </code></pre> objects for its tab content. When placing this in a view hierarchy, after inflating the hierarchy you must call <pre><code> setup(Context, FragmentManager, int) </code></pre> to complete the initialization of the tab host. <p> Here is a simple example of using a FragmentTabHost in an Activity: <pre>import com.example.android.supportv4.R;import android.os.Bundle;import android.support.v4.app.FragmentActivity;import android.support.v4.app.FragmentTabHost;/** * This demonstrates how you can implement switching between the tabs of a * TabHost through fragments, using FragmentTabHost. */public class FragmentTabs extends FragmentActivity { private FragmentTabHost mTabHost; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.fragment_tabs); mTabHost = (FragmentTabHost)findViewById(android.R.id.tabhost); mTabHost.setup(this, getSupportFragmentManager(), R.id.realtabcontent); mTabHost.addTab(mTabHost.newTabSpec("simple").setIndicator("Simple"), FragmentStackSupport.CountingFragment.class, null); mTabHost.addTab(mTabHost.newTabSpec("contacts").setIndicator("Contacts"), LoaderCursorSupport.CursorLoaderListFragment.class, null); mTabHost.addTab(mTabHost.newTabSpec("custom").setIndicator("Custom"), LoaderCustomSupport.AppListFragment.class, null); mTabHost.addTab(mTabHost.newTabSpec("throttle").setIndicator("Throttle"), LoaderThrottleSupport.ThrottledLoaderListFragment.class, null); }}</pre> <p> This can also be used inside of a fragment through fragment nesting: <pre>import com.example.android.supportv4.R;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentTabHost;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;public class FragmentTabsFragmentSupport extends Fragment { private FragmentTabHost mTabHost; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { mTabHost = new FragmentTabHost(getActivity()); mTabHost.setup(getActivity(), getChildFragmentManager(), R.id.fragment1); mTabHost.addTab(mTabHost.newTabSpec("simple").setIndicator("Simple"), FragmentStackSupport.CountingFragment.class, null); mTabHost.addTab(mTabHost.newTabSpec("contacts").setIndicator("Contacts"), LoaderCursorSupport.CursorLoaderListFragment.class, null); mTabHost.addTab(mTabHost.newTabSpec("custom").setIndicator("Custom"), LoaderCustomSupport.AppListFragment.class, null); mTabHost.addTab(mTabHost.newTabSpec("throttle").setIndicator("Throttle"), LoaderThrottleSupport.ThrottledLoaderListFragment.class, null); return mTabHost; } @Override public void onDestroyView() { super.onDestroyView(); mTabHost = null; }}</pre> </p><pre><code>public class FragmentTabHost\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentTabHost.html
FragmentTransaction	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> FragmentTransaction </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p><pre><code>public abstract class FragmentTransaction\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentTransaction.html
ListFragment	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> ListFragment </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p><pre><code>public class ListFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ListFragment.html
LoaderManager	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> LoaderManager </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview. <p> Your activity must derive from <pre><code> FragmentActivity </code></pre> to use this. </p><pre><code>public abstract class LoaderManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/LoaderManager.html
LoaderManager.LoaderCallbacks	A										<section class="prog__container"><p> Callback interface for a client to interact with the manager.</p><pre><code>public static interface LoaderManager.LoaderCallbacks\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/LoaderManager.LoaderCallbacks.html
NavUtils	A										<section class="prog__container"><p> NavUtils provides helper functionality for applications implementing recommended Android UI navigation patterns. For information about recommended navigation patterns see Tasks and Back Stack from the developer guide and Navigation from the design guide.</p><pre><code>public final class NavUtils\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NavUtils.html
NotificationCompat.Action.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> NotificationCompat.Action </code></pre> objects.</p><pre><code>public static final class NotificationCompat.Action.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Action.Builder.html
NotificationCompat.Action.Extender	A										<section class="prog__container"><p> Extender interface for use with <pre><code> extend(NotificationCompat.Extender) </code></pre> . Extenders may be used to add metadata or change options on an action builder.</p><pre><code>public static interface NotificationCompat.Action.Extender\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Action.Extender.html
NotificationCompat.Action	A										<section class="prog__container"><p> Structure to encapsulate a named action that can be shown as part of this notification. It must include an icon, a label, and a <pre><code> PendingIntent </code></pre> to be fired when the action is selected by the user. Action buttons won't appear on platforms prior to Android 4.1. <p> Apps should use <pre><code> addAction(int, CharSequence, PendingIntent) </code></pre> or <pre><code> addAction(NotificationCompat.Action) </code></pre> to attach actions. </p><pre><code>public static class NotificationCompat.Action\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Action.html
NotificationCompat.Action.WearableExtender	A										<section class="prog__container"><p> Wearable extender for notification actions. To add extensions to an action, create a new <pre><code> NotificationCompat.Action.WearableExtender </code></pre> object using the <pre><code> WearableExtender() </code></pre> constructor and apply it to a <pre><code> NotificationCompat.Action.Builder </code></pre> using <pre><code> extend(NotificationCompat.Action.Extender) </code></pre> . <pre class="prettyprint"> NotificationCompat.Action action = new NotificationCompat.Action.Builder( R.drawable.archive_all, "Archive all", actionIntent) .extend(new NotificationCompat.Action.WearableExtender() .setAvailableOffline(false)) .build();</pre></p><pre><code>public static final class NotificationCompat.Action.WearableExtender\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Action.WearableExtender.html
NotificationCompat.BigPictureStyle	A										<section class="prog__container"><p> Helper class for generating large-format notifications that include a large image attachment. <br> If the platform does not provide large-format notifications, this method has no effect. The user will always see the normal notification view. <br> This class is a "rebuilder": It attaches to a Builder object and modifies its behavior, like so: <pre class="prettyprint"> Notification notif = new Notification.Builder(mContext) .setContentTitle("New photo from " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_post) .setLargeIcon(aBitmap) .setStyle(new Notification.BigPictureStyle() .bigPicture(aBigBitmap)) .build(); </pre> </br> </br></p><pre><code>public static class NotificationCompat.BigPictureStyle\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.BigPictureStyle.html
NotificationCompat.BigTextStyle	A										<section class="prog__container"><p> Helper class for generating large-format notifications that include a lot of text. <br> If the platform does not provide large-format notifications, this method has no effect. The user will always see the normal notification view. <br> This class is a "rebuilder": It attaches to a Builder object and modifies its behavior, like so: <pre class="prettyprint"> Notification notif = new Notification.Builder(mContext) .setContentTitle("New mail from " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_mail) .setLargeIcon(aBitmap) .setStyle(new Notification.BigTextStyle() .bigText(aVeryLongString)) .build(); </pre> </br> </br></p><pre><code>public static class NotificationCompat.BigTextStyle\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.BigTextStyle.html
NotificationCompat.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> NotificationCompat </code></pre> objects. Allows easier control over all the flags, as well as help constructing the typical notification layouts. <p> On platform versions that don't offer expanded notifications, methods that depend on expanded notifications have no effect. </p><pre><code>public static class NotificationCompat.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html
NotificationCompat.CarExtender	A										<section class="prog__container"><p> <p> Helper class to add Android Auto extensions to notifications. To create a notification with car extensions: <ol> <li> Create an <pre><code> NotificationCompat.Builder </code></pre> , setting any desired properties. <li> Create a <pre><code> NotificationCompat.CarExtender </code></pre> . <li> Set car-specific properties using the <pre><code> add </code></pre> and <pre><code> set </code></pre> methods of <pre><code> NotificationCompat.CarExtender </code></pre> . <li> Call <pre><code> extend(NotificationCompat.Extender) </code></pre> to apply the extensions to a notification. <li> Post the notification to the notification system with the <pre><code> NotificationManagerCompat.notify(...) </code></pre> methods and not the <pre><code> NotificationManager.notify(...) </code></pre> methods. </li> </li> </li> </li> </li> </ol> <pre class="prettyprint"> Notification notification = new NotificationCompat.Builder(context) ... .extend(new CarExtender() .set*(...)) .build(); </pre> <p> Car extensions can be accessed on an existing notification by using the <pre><code> CarExtender(Notification) </code></pre> constructor, and then using the <pre><code> get </code></pre> methods to access values. </p><pre><code>public static final class NotificationCompat.CarExtender\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.CarExtender.html
NotificationCompat.CarExtender.UnreadConversation.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> NotificationCompat.CarExtender.UnreadConversation </code></pre> objects.</p><pre><code>public static class NotificationCompat.CarExtender.UnreadConversation.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.CarExtender.UnreadConversation.Builder.html
NotificationCompat.CarExtender.UnreadConversation	A										<section class="prog__container"><p> A class which holds the unread messages from a conversation.</p><pre><code>public static class NotificationCompat.CarExtender.UnreadConversation\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.CarExtender.UnreadConversation.html
NotificationCompat.Extender	A										<section class="prog__container"><p> Extender interface for use with <pre><code> extend(NotificationCompat.Extender) </code></pre> . Extenders may be used to add metadata or change options on a notification builder.</p><pre><code>public static interface NotificationCompat.Extender\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Extender.html
NotificationCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> Notification </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public class NotificationCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html
NotificationCompat.InboxStyle	A										<section class="prog__container"><p> Helper class for generating large-format notifications that include a list of (up to 5) strings. <br> If the platform does not provide large-format notifications, this method has no effect. The user will always see the normal notification view. <br> This class is a "rebuilder": It attaches to a Builder object and modifies its behavior, like so: <pre class="prettyprint"> Notification noti = new Notification.Builder() .setContentTitle("5 New mails from " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_mail) .setLargeIcon(aBitmap) .setStyle(new Notification.InboxStyle() .addLine(str1) .addLine(str2) .setContentTitle("") .setSummaryText("+3 more")) .build(); </pre> </br> </br></p><pre><code>public static class NotificationCompat.InboxStyle\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.InboxStyle.html
NotificationCompat.MessagingStyle	A										<section class="prog__container"><p> Helper class for generating large-format notifications that include multiple back-and-forth messages of varying types between any number of people. <br> In order to get a backwards compatible behavior, the app needs to use the v7 version of the notification builder together with this style, otherwise the user will see the normal notification view. <br> Use <pre><code> setConversationTitle(CharSequence) </code></pre> to set a conversation title for group chats with more than two people. This could be the user-created name of the group or, if it doesn't have a specific name, a list of the participants in the conversation. Do not set a conversation title for one-on-one chats, since platforms use the existence of this field as a hint that the conversation is a group. <br> This class is a "rebuilder": It attaches to a Builder object and modifies its behavior, like so: <pre class="prettyprint"> Notification noti = new Notification.Builder() .setContentTitle("2 new messages wtih " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_message) .setLargeIcon(aBitmap) .setStyle(new Notification.MessagingStyle(resources.getString(R.string.reply_name)) .addMessage(messages[0].getText(), messages[0].getTime(), messages[0].getSender()) .addMessage(messages[1].getText(), messages[1].getTime(), messages[1].getSender())) .build(); </pre> </br> </br> </br></p><pre><code>public static class NotificationCompat.MessagingStyle\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.MessagingStyle.html
NotificationCompat.MessagingStyle.Message	A										<section class="prog__container"><p> Constructor</p><pre><code>public static final class NotificationCompat.MessagingStyle.Message\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.MessagingStyle.Message.html
NotificationCompat.Style	A										<section class="prog__container"><p> An object that can apply a rich notification style to a <pre><code> Notification.Action.Builder </code></pre> object. <br> If the platform does not provide rich notification styles, methods in this class have no effect. </br></p><pre><code>public static abstract class NotificationCompat.Style\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Style.html
NotificationCompat.WearableExtender	A										<section class="prog__container"><p> Helper class to add wearable extensions to notifications. <p class="note"> See Creating Notifications for Android Wear for more information on how to use this class. <p> To create a notification with wearable extensions: <ol> <li> Create a <pre><code> NotificationCompat.Builder </code></pre> , setting any desired properties. <li> Create a <pre><code> NotificationCompat.WearableExtender </code></pre> . <li> Set wearable-specific properties using the <pre><code> add </code></pre> and <pre><code> set </code></pre> methods of <pre><code> NotificationCompat.WearableExtender </code></pre> . <li> Call <pre><code> extend(NotificationCompat.Extender) </code></pre> to apply the extensions to a notification. <li> Post the notification to the notification system with the <pre><code> NotificationManagerCompat.notify(...) </code></pre> methods and not the <pre><code> NotificationManager.notify(...) </code></pre> methods. </li> </li> </li> </li> </li> </ol> <pre class="prettyprint"> Notification notif = new NotificationCompat.Builder(mContext) .setContentTitle("New mail from " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_mail) .extend(new NotificationCompat.WearableExtender() .setContentIcon(R.drawable.new_mail)) .build(); NotificationManagerCompat.from(mContext).notify(0, notif);</pre> <p> Wearable extensions can be accessed on an existing notification by using the <pre><code> WearableExtender(Notification) </code></pre> constructor, and then using the <pre><code> get </code></pre> methods to access values. <pre class="prettyprint"> NotificationCompat.WearableExtender wearableExtender = new NotificationCompat.WearableExtender(notification); List&lt;Notification&gt; pages = wearableExtender.getPages();</pre> </p><pre><code>public static final class NotificationCompat.WearableExtender\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.WearableExtender.html
NotificationCompatExtras	A										<section class="prog__container"><p> Well-known extras used by <pre><code> NotificationCompat </code></pre> for backwards compatibility.</p><pre><code>public final class NotificationCompatExtras\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompatExtras.html
NotificationCompatSideChannelService	A										<section class="prog__container"><p> Abstract service to receive side channel notifications sent from <pre><code> NotificationManagerCompat </code></pre> . <p> To receive side channel notifications, extend this service and register it in your android manifest with an intent filter for the BIND_NOTIFICATION_SIDE_CHANNEL action. Note: you must also have an enabled <pre><code> NotificationListenerService </code></pre> within your package. <p> Example AndroidManifest.xml addition: <pre> &lt;service android:name="com.example.NotificationSideChannelService"&gt; &lt;intent-filter&gt; &lt;action android:name="android.support.BIND_NOTIFICATION_SIDE_CHANNEL" /&gt; &lt;/intent-filter&gt; &lt;/service&gt;</pre> </p><pre><code>public abstract class NotificationCompatSideChannelService\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompatSideChannelService.html
NotificationManagerCompat	A										<section class="prog__container"><p> Compatibility library for NotificationManager with fallbacks for older platforms. <p> To use this class, call the static function <pre><code> from(Context) </code></pre> to get a <pre><code> NotificationManagerCompat </code></pre> object, and then call one of its methods to post or cancel notifications. </p><pre><code>public final class NotificationManagerCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationManagerCompat.html
android.support.v4.app	A										<section class="prog__container">This class provides a handy way to tie together the functionality of</section>	https://developer.android.com/reference/android/support/v4/app/package-summary.html
RemoteInput.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> RemoteInput </code></pre> objects.</p><pre><code>public static final class RemoteInput.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/RemoteInput.Builder.html
RemoteInput	A										<section class="prog__container"><p> Helper for using the <pre><code> RemoteInput </code></pre> API introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class RemoteInput\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/RemoteInput.html
ServiceCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> Service </code></pre> introduced after API level 9 in a backwards compatible fashion.</p><pre><code>public final class ServiceCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ServiceCompat.html
ShareCompat	A										<section class="prog__container"><p> Extra helper functionality for sharing data between activities. ShareCompat provides functionality to extend the <pre><code> ACTION_SEND </code></pre> / <pre><code> ACTION_SEND_MULTIPLE </code></pre> protocol and support retrieving more info about the activity that invoked a social sharing action. <pre><code> ShareCompat.IntentBuilder </code></pre> provides helper functions for constructing a sharing intent that always includes data about the calling activity and app. This lets the called activity provide attribution for the app that shared content. Constructing an intent this way can be done in a method-chaining style. To obtain an IntentBuilder with info about your calling activity, use the static method <pre><code> from(Activity) </code></pre> . <pre><code> ShareCompat.IntentReader </code></pre> provides helper functions for parsing the defined extras within an <pre><code> ACTION_SEND </code></pre> or <pre><code> ACTION_SEND_MULTIPLE </code></pre> intent used to launch an activity. You can also obtain a Drawable for the caller's application icon and the application's localized label (the app's human-readable name). Social apps that enable sharing content are encouraged to use this information to call out the app that the content was shared from.</p><pre><code>public final class ShareCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ShareCompat.html
ShareCompat.IntentBuilder	A										<section class="prog__container"><p> IntentBuilder is a helper for constructing <pre><code> ACTION_SEND </code></pre> and <pre><code> ACTION_SEND_MULTIPLE </code></pre> sharing intents and starting activities to share content. The ComponentName and package name of the calling activity will be included.</p><pre><code>public static class ShareCompat.IntentBuilder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ShareCompat.IntentBuilder.html
ShareCompat.IntentReader	A										<section class="prog__container"><p> IntentReader is a helper for reading the data contained within a sharing (ACTION_SEND) Intent. It provides methods to parse standard elements included with a share in addition to extra metadata about the app that shared the content. <p> Social sharing apps are encouraged to provide attribution for the app that shared the content. IntentReader offers access to the application label, calling activity info, and application icon of the app that shared the content. This data may have been provided voluntarily by the calling app and should always be displayed to the user before submission for manual verification. The user should be offered the option to omit this information from shared posts if desired. </p><pre><code>public static class ShareCompat.IntentReader\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ShareCompat.IntentReader.html
SharedElementCallback	A										<section class="prog__container"><p> Listener provided in <pre><code> setEnterSharedElementCallback(SharedElementCallback) </code></pre> and <pre><code> setExitSharedElementCallback(SharedElementCallback) </code></pre> to monitor the Activity transitions. The events can be used to customize Activity Transition behavior.</p><pre><code>public abstract class SharedElementCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/SharedElementCallback.html
SharedElementCallback.OnSharedElementsReadyListener	A										<section class="prog__container"><p> Listener to be called after <pre><code> onSharedElementsArrived(List, List, OnSharedElementsReadyListener) </code></pre> when the shared elements are ready to be hidden in the source Activity and shown in the destination Activity.</p><pre><code>public static interface SharedElementCallback.OnSharedElementsReadyListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/SharedElementCallback.OnSharedElementsReadyListener.html
TaskStackBuilder	A										<section class="prog__container"><p> Utility class for constructing synthetic back stacks for cross-task navigation on Android 3.0 and newer. <p> In API level 11 (Android 3.0/Honeycomb) the recommended conventions for app navigation using the back key changed. The back key's behavior is local to the current task and does not capture navigation across different tasks. Navigating across tasks and easily reaching the previous task is accomplished through the "recents" UI, accessible through the software-provided Recents key on the navigation or system bar. On devices with the older hardware button configuration the recents UI can be accessed with a long press on the Home key. </p><pre><code>public final class TaskStackBuilder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/TaskStackBuilder.html
TaskStackBuilder.SupportParentable	A										<section class="prog__container"><pre><code>public static interface TaskStackBuilder.SupportParentable\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/TaskStackBuilder.SupportParentable.html
AsyncTaskLoader	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> AsyncTaskLoader </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p><pre><code>public abstract class AsyncTaskLoader\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/AsyncTaskLoader.html
ContentResolverCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> ContentResolver </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class ContentResolverCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/ContentResolverCompat.html
ContextCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> Context </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public class ContextCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/ContextCompat.html
CursorLoader	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> CursorLoader </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p><pre><code>public class CursorLoader\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/CursorLoader.html
FileProvider	A										<section class="prog__container"><p> FileProvider is a special subclass of <pre><code> ContentProvider </code></pre> that facilitates secure sharing of files associated with an app by creating a <pre><code> content:// </code></pre> <pre><code> Uri </code></pre> for a file instead of a <pre><code> file:/// </code></pre> <pre><code> Uri </code></pre> . <p> A content URI allows you to grant read and write access using temporary access permissions. When you create an <pre><code> Intent </code></pre> containing a content URI, in order to send the content URI to a client app, you can also call <pre><code> Intent.setFlags() </code></pre> to add permissions. These permissions are available to the client app for as long as the stack for a receiving <pre><code> Activity </code></pre> is active. For an <pre><code> Intent </code></pre> going to a <pre><code> Service </code></pre> , the permissions are available as long as the <pre><code> Service </code></pre> is running. <p> In comparison, to control access to a <pre><code> file:/// </code></pre> <pre><code> Uri </code></pre> you have to modify the file system permissions of the underlying file. The permissions you provide become available to <em> any </em> app, and remain in effect until you change them. This level of access is fundamentally insecure. <p> The increased level of file access security offered by a content URI makes FileProvider a key part of Android's security infrastructure. <p> This overview of FileProvider includes the following topics: </p><pre><code>public class FileProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/FileProvider.html
IntentCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> Intent </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class IntentCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/IntentCompat.html
Loader.ForceLoadContentObserver	A										<section class="prog__container"><p> An implementation of a ContentObserver that takes care of connecting it to the Loader to have the loader re-load its data when the observer is told it has changed. You do not normally need to use this yourself; it is used for you by <pre><code> CursorLoader </code></pre> to take care of executing an update when the cursor's backing data changes.</p><pre><code>public final class Loader.ForceLoadContentObserver\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/Loader.ForceLoadContentObserver.html
Loader	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> Loader </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p><pre><code>public class Loader\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/Loader.html
Loader.OnLoadCanceledListener	A										<section class="prog__container"><p> Interface that is implemented to discover when a Loader has been canceled before it finished loading its data. You do not normally need to implement this yourself; it is used in the implementation of <pre><code> LoaderManager </code></pre> to find out when a Loader it is managing has been canceled so that it can schedule the next Loader. This interface should only be used if a Loader is not being used in conjunction with LoaderManager.</p><pre><code>public static interface Loader.OnLoadCanceledListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/Loader.OnLoadCanceledListener.html
Loader.OnLoadCompleteListener	A										<section class="prog__container"><p> Interface that is implemented to discover when a Loader has finished loading its data. You do not normally need to implement this yourself; it is used in the implementation of <pre><code> LoaderManager </code></pre> to find out when a Loader it is managing has completed so that this can be reported to its client. This interface should only be used if a Loader is not being used in conjunction with LoaderManager.</p><pre><code>public static interface Loader.OnLoadCompleteListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/Loader.OnLoadCompleteListener.html
LocalBroadcastManager	A										<section class="prog__container"><p> Helper to register for and send broadcasts of Intents to local objects within your process. This has a number of advantages over sending global broadcasts with <pre><code> sendBroadcast(Intent) </code></pre> : <ul> <li> You know that the data you are broadcasting won't leave your app, so don't need to worry about leaking private data. <li> It is not possible for other applications to send these broadcasts to your app, so you don't need to worry about having security holes they can exploit. <li> It is more efficient than sending a global broadcast through the system. </li> </li> </li> </ul></p><pre><code>public final class LocalBroadcastManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/LocalBroadcastManager.html
android.support.v4.content	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/content/package-summary.html
ParallelExecutorCompat	A										<section class="prog__container"><p> Helper for accessing a shared parallel Executor instance introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class ParallelExecutorCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/ParallelExecutorCompat.html
PermissionChecker	A										<section class="prog__container"><p> This class provides permission check APIs that verify both the permission and the associated app op for this permission if such is defined. <p> In the new permission model permissions with protection level dangerous are runtime permissions. For apps targeting <pre><code> M </code></pre> and above the user may not grant such permissions or revoke them at any time. For apps targeting API lower than <pre><code> M </code></pre> these permissions are always granted as such apps do not expect permission revocations and would crash. Therefore, when the user disables a permission for a legacy app in the UI the platform disables the APIs guarded by this permission making them a no-op which is doing nothing or returning an empty result or default error. </p><pre><code>public final class PermissionChecker\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/PermissionChecker.html
PermissionChecker.PermissionResult	A										<section class="prog__container"><p> Returns the annotation type of this annotation.</p><pre><code>public static abstract @interface PermissionChecker.PermissionResult\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/PermissionChecker.PermissionResult.html
SharedPreferencesCompat.EditorCompat	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public static final class SharedPreferencesCompat.EditorCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/SharedPreferencesCompat.EditorCompat.html
SharedPreferencesCompat	A										<section class="prog__container"><pre><code>public final class SharedPreferencesCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/SharedPreferencesCompat.html
WakefulBroadcastReceiver	A										<section class="prog__container"><p> Helper for the common pattern of implementing a <pre><code> BroadcastReceiver </code></pre> that receives a device wakeup event and then passes the work off to a <pre><code> Service </code></pre> , while ensuring that the device does not go back to sleep during the transition. <p> This class takes care of creating and managing a partial wake lock for you; you must request the <pre><code> WAKE_LOCK </code></pre> permission to use it. </p><pre><code>public abstract class WakefulBroadcastReceiver\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/WakefulBroadcastReceiver.html
ActivityInfoCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> ActivityInfo </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class ActivityInfoCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/pm/ActivityInfoCompat.html
android.support.v4.content.pm	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/content/pm/package-summary.html
ConfigurationHelper	A										<section class="prog__container"><p> Helper class which allows access to properties of <pre><code> Configuration </code></pre> in a backward compatible fashion.</p><pre><code>public final class ConfigurationHelper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/res/ConfigurationHelper.html
android.support.v4.content.res	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/content/res/package-summary.html
ResourcesCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> Resources </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class ResourcesCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/res/ResourcesCompat.html
DatabaseUtilsCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> DatabaseUtils </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class DatabaseUtilsCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/database/DatabaseUtilsCompat.html
android.support.v4.database	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/database/package-summary.html
BitmapCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> Bitmap </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class BitmapCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/graphics/BitmapCompat.html
ColorUtils	A										<section class="prog__container"><p> A set of color-related utility methods, building upon those available in <pre><code> Color </code></pre> .</p><pre><code>public final class ColorUtils\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/graphics/ColorUtils.html
android.support.v4.graphics	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/graphics/package-summary.html
DrawableCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> Drawable </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class DrawableCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/graphics/drawable/DrawableCompat.html
android.support.v4.graphics.drawable	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/graphics/drawable/package-summary.html
RoundedBitmapDrawable	A										<section class="prog__container"><p> A Drawable that wraps a bitmap and can be drawn with rounded corners. You can create a RoundedBitmapDrawable from a file path, an input stream, or from a <pre><code> Bitmap </code></pre> object. <p> Also see the <pre><code> Bitmap </code></pre> class, which handles the management and transformation of raw bitmap graphics, and should be used when drawing to a <pre><code> Canvas </code></pre> . </p><pre><code>public abstract class RoundedBitmapDrawable\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/graphics/drawable/RoundedBitmapDrawable.html
RoundedBitmapDrawableFactory	A										<section class="prog__container"><p> Constructs <pre><code> RoundedBitmapDrawable </code></pre> objects, either from Bitmaps directly, or from streams and files.</p><pre><code>public final class RoundedBitmapDrawableFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/graphics/drawable/RoundedBitmapDrawableFactory.html
DisplayManagerCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> DisplayManager </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public abstract class DisplayManagerCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/hardware/display/DisplayManagerCompat.html
android.support.v4.hardware.display	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/hardware/display/package-summary.html
FingerprintManagerCompat.AuthenticationCallback	A										<section class="prog__container"><p> Callback structure provided to <pre><code> authenticate(CryptoObject, int, CancellationSignal, AuthenticationCallback, Handler) </code></pre> . Users of <pre><code> authenticate(CryptoObject, int, CancellationSignal, AuthenticationCallback, Handler) </code></pre> must provide an implementation of this for listening to fingerprint events.</p><pre><code>public static abstract class FingerprintManagerCompat.AuthenticationCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/hardware/fingerprint/FingerprintManagerCompat.AuthenticationCallback.html
FingerprintManagerCompat.AuthenticationResult	A										<section class="prog__container"><p> Container for callback data from <pre><code> authenticate(CryptoObject, int, CancellationSignal, AuthenticationCallback, Handler) </code></pre> .</p><pre><code>public static final class FingerprintManagerCompat.AuthenticationResult\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/hardware/fingerprint/FingerprintManagerCompat.AuthenticationResult.html
FingerprintManagerCompat.CryptoObject	A										<section class="prog__container"><p> A wrapper class for the crypto objects supported by FingerprintManager. Currently the framework supports <pre><code> Signature </code></pre> and <pre><code> Cipher </code></pre> objects.</p><pre><code>public static class FingerprintManagerCompat.CryptoObject\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/hardware/fingerprint/FingerprintManagerCompat.CryptoObject.html
FingerprintManagerCompat	A										<section class="prog__container"><p> A class that coordinates access to the fingerprint hardware. <p> On platforms before <pre><code> M </code></pre> , this class behaves as there would be no fingerprint hardware available. </p><pre><code>public final class FingerprintManagerCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/hardware/fingerprint/FingerprintManagerCompat.html
android.support.v4.hardware.fingerprint	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/hardware/fingerprint/package-summary.html
MediaBrowserCompat.ConnectionCallback	A										<section class="prog__container"><p> Callbacks for connection related events.</p><pre><code>public static class MediaBrowserCompat.ConnectionCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaBrowserCompat.ConnectionCallback.html
MediaBrowserCompat	A										<section class="prog__container"><p> Browses media content offered by a <pre><code> MediaBrowserServiceCompat </code></pre> . <p> This object is not thread-safe. All calls should happen on the thread on which the browser was constructed. </p><pre><code>public final class MediaBrowserCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaBrowserCompat.html
MediaBrowserCompat.ItemCallback	A										<section class="prog__container"><p> Callback for receiving the result of <pre><code> getItem(String, MediaBrowserCompat.ItemCallback) </code></pre> .</p><pre><code>public static abstract class MediaBrowserCompat.ItemCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaBrowserCompat.ItemCallback.html
MediaBrowserCompat.MediaItem	A										<section class="prog__container"><p> A class with information on a single media item for use in browsing media.</p><pre><code>public static class MediaBrowserCompat.MediaItem\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaBrowserCompat.MediaItem.html
MediaBrowserCompat.SubscriptionCallback	A										<section class="prog__container"><p> Callbacks for subscription related events.</p><pre><code>public static abstract class MediaBrowserCompat.SubscriptionCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaBrowserCompat.SubscriptionCallback.html
MediaBrowserServiceCompat.BrowserRoot	A										<section class="prog__container"><p> Contains information that the browser service needs to send to the client when first connected.</p><pre><code>public static final class MediaBrowserServiceCompat.BrowserRoot\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaBrowserServiceCompat.BrowserRoot.html
MediaBrowserServiceCompat	A										<section class="prog__container"><p> Base class for media browse services. <p> Media browse services enable applications to browse media content provided by an application and ask the application to start playing it. They may also be used to control content that is already playing by way of a <pre><code> MediaSessionCompat </code></pre> . </p><pre><code>public abstract class MediaBrowserServiceCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaBrowserServiceCompat.html
MediaBrowserServiceCompat.Result	A										<section class="prog__container"><p> Completion handler for asynchronous callback methods in <pre><code> MediaBrowserServiceCompat </code></pre> . <p> Each of the methods that takes one of these to send the result must call <pre><code> sendResult(T) </code></pre> to respond to the caller with the given results. If those functions return without calling <pre><code> sendResult(T) </code></pre> , they must instead call <pre><code> detach() </code></pre> before returning, and then may call <pre><code> sendResult(T) </code></pre> when they are done. If more than one of those methods is called, an exception will be thrown. </p><pre><code>public static class MediaBrowserServiceCompat.Result\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaBrowserServiceCompat.Result.html
MediaDescriptionCompat.Builder	A										<section class="prog__container"><p> Builder for <pre><code> MediaDescriptionCompat </code></pre> objects.</p><pre><code>public static final class MediaDescriptionCompat.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaDescriptionCompat.Builder.html
MediaDescriptionCompat	A										<section class="prog__container"><p> A simple set of metadata for a media item suitable for display. This can be created using the Builder or retrieved from existing metadata using <pre><code> getDescription() </code></pre> .</p><pre><code>public final class MediaDescriptionCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaDescriptionCompat.html
MediaMetadataCompat.Builder	A										<section class="prog__container"><p> Use to build MediaMetadata objects. The system defined metadata keys must use the appropriate data type.</p><pre><code>public static final class MediaMetadataCompat.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaMetadataCompat.Builder.html
MediaMetadataCompat	A										<section class="prog__container"><p> Contains metadata about an item, such as the title, artist, etc.</p><pre><code>public final class MediaMetadataCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaMetadataCompat.html
android.support.v4.media	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/media/package-summary.html
RatingCompat	A										<section class="prog__container"><p> A class to encapsulate rating information used as content metadata. A rating is defined by its rating style (see <pre><code> RATING_HEART </code></pre> , <pre><code> RATING_THUMB_UP_DOWN </code></pre> , <pre><code> RATING_3_STARS </code></pre> , <pre><code> RATING_4_STARS </code></pre> , <pre><code> RATING_5_STARS </code></pre> or <pre><code> RATING_PERCENTAGE </code></pre> ) and the actual rating value (which may be defined as "unrated"), both of which are defined when the rating instance is constructed through one of the factory methods.</p><pre><code>public final class RatingCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/RatingCompat.html
TransportController	A										<section class="prog__container"><p> Base interface to controlling a media transport. This is the interface for implementing things like on-screen controls: it allows them to request changes in playback, retrieve the current playback state, and monitor for changes to the playback state.</p><pre><code>public abstract class TransportController\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/TransportController.html
TransportMediator	A										<section class="prog__container"><p> Helper for implementing a media transport control (with play, pause, skip, and other media actions). Takes care of both key events and advanced features like <pre><code> RemoteControlClient </code></pre> . This class is intended to serve as an intermediary between transport controls (whether they be on-screen controls, hardware buttons, remote controls) and the actual player. The player is represented by a single <pre><code> TransportPerformer </code></pre> that must be supplied to this class. On-screen controls that want to control and show the state of the player should do this through calls to the <pre><code> TransportController </code></pre> interface. <p> Here is a simple but fairly complete sample of a video player that is built around this class. Note that the MediaController class used here is not the one included in the standard Android framework, but a custom implementation. Real applications often implement their own transport controls, or you can copy the implementation here out of Support4Demos. </p><pre><code>public class TransportMediator\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/TransportMediator.html
TransportPerformer	A										<section class="prog__container"><p> Implemented by the playback side of the media system, to respond to requests to perform actions and to retrieve its current state. These requests may either come from key events dispatched directly to your UI, or events sent over a media button event receiver that this class keeps active while your window is in focus.</p><pre><code>public abstract class TransportPerformer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/TransportPerformer.html
TransportStateListener	A										<section class="prog__container"><p> A listener for playback changes that can be registered with <pre><code> TransportController </code></pre> .</p><pre><code>public class TransportStateListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/TransportStateListener.html
VolumeProviderCompat.Callback	A										<section class="prog__container"><p> Listens for changes to the volume.</p><pre><code>public static abstract class VolumeProviderCompat.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/VolumeProviderCompat.Callback.html
VolumeProviderCompat	A										<section class="prog__container"><p> Handles requests to adjust or set the volume on a session. This is also used to push volume updates back to the session after a request has been handled. You can set a volume provider on a session by calling <pre><code> setPlaybackToRemote(VolumeProviderCompat) </code></pre> .</p><pre><code>public abstract class VolumeProviderCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/VolumeProviderCompat.html
MediaButtonReceiver	A										<section class="prog__container"><pre><code>public class MediaButtonReceiver\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaButtonReceiver.html
MediaControllerCompat.Callback	A										<section class="prog__container"><p> Callback for receiving updates on from the session. A Callback can be registered using <pre><code> registerCallback(MediaControllerCompat.Callback) </code></pre></p><pre><code>public static abstract class MediaControllerCompat.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaControllerCompat.Callback.html
MediaControllerCompat	A										<section class="prog__container"><p> Allows an app to interact with an ongoing media session. Media buttons and other commands can be sent to the session. A callback may be registered to receive updates from the session, such as metadata and play state changes. <p> A MediaController can be created if you have a <pre><code> MediaSessionCompat.Token </code></pre> from the session owner. <p> MediaController objects are thread-safe. <p> This is a helper for accessing features in <pre><code> MediaSession </code></pre> introduced after API level 4 in a backwards compatible fashion. </p><pre><code>public final class MediaControllerCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaControllerCompat.html
MediaControllerCompat.PlaybackInfo	A										<section class="prog__container"><p> Holds information about the way volume is handled for this session.</p><pre><code>public static final class MediaControllerCompat.PlaybackInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaControllerCompat.PlaybackInfo.html
MediaControllerCompat.TransportControls	A										<section class="prog__container"><p> Interface for controlling media playback on a session. This allows an app to send media transport commands to the session.</p><pre><code>public static abstract class MediaControllerCompat.TransportControls\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaControllerCompat.TransportControls.html
MediaSessionCompat.Callback	A										<section class="prog__container"><p> Receives transport controls, media buttons, and commands from controllers and the system. The callback may be set using <pre><code> setCallback(MediaSessionCompat.Callback) </code></pre> .</p><pre><code>public static abstract class MediaSessionCompat.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.Callback.html
MediaSessionCompat	A										<section class="prog__container"><p> Allows interaction with media controllers, volume keys, media buttons, and transport controls. <p> A MediaSession should be created when an app wants to publish media playback information or handle media keys. In general an app only needs one session for all playback, though multiple sessions can be created to provide finer grain controls of media. <p> Once a session is created the owner of the session may pass its <pre><code> session token </code></pre> to other processes to allow them to create a <pre><code> MediaControllerCompat </code></pre> to interact with the session. <p> To receive commands, media keys, and other events a <pre><code> MediaSessionCompat.Callback </code></pre> must be set with <pre><code> setCallback(Callback) </code></pre> . <p> When an app is finished performing playback it must call <pre><code> release() </code></pre> to clean up the session and notify any controllers. <p> MediaSessionCompat objects are not thread safe and all calls should be made from the same thread. <p> This is a helper for accessing features in <pre><code> MediaSession </code></pre> introduced after API level 4 in a backwards compatible fashion. </p><pre><code>public class MediaSessionCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html
MediaSessionCompat.OnActiveChangeListener	A										<section class="prog__container"><pre><code>public static interface MediaSessionCompat.OnActiveChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.OnActiveChangeListener.html
MediaSessionCompat.QueueItem	A										<section class="prog__container"><p> A single item that is part of the play queue. It contains a description of the item and its id in the queue.</p><pre><code>public static final class MediaSessionCompat.QueueItem\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.QueueItem.html
MediaSessionCompat.Token	A										<section class="prog__container"><p> Represents an ongoing session. This may be passed to apps by the session owner to allow them to create a <pre><code> MediaControllerCompat </code></pre> to communicate with the session.</p><pre><code>public static final class MediaSessionCompat.Token\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.Token.html
android.support.v4.media.session	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/media/session/package-summary.html
ParcelableVolumeInfo	A										<section class="prog__container"><p> Convenience class for passing information about the audio configuration of a <pre><code> MediaSessionCompat </code></pre> .</p><pre><code>public class ParcelableVolumeInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/ParcelableVolumeInfo.html
PlaybackStateCompat.Builder	A										<section class="prog__container"><p> Builder for <pre><code> PlaybackStateCompat </code></pre> objects.</p><pre><code>public static final class PlaybackStateCompat.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.Builder.html
PlaybackStateCompat.CustomAction.Builder	A										<section class="prog__container"><p> Builder for <pre><code> PlaybackStateCompat.CustomAction </code></pre> objects.</p><pre><code>public static final class PlaybackStateCompat.CustomAction.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.CustomAction.Builder.html
PlaybackStateCompat.CustomAction	A										<section class="prog__container"><p> <pre><code> CustomActions </code></pre> can be used to extend the capabilities of the standard transport controls by exposing app specific actions to <pre><code> Controllers </code></pre> .</p><pre><code>public static final class PlaybackStateCompat.CustomAction\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.CustomAction.html
PlaybackStateCompat	A										<section class="prog__container"><p> Playback state for a <pre><code> MediaSessionCompat </code></pre> . This includes a state like <pre><code> STATE_PLAYING </code></pre> , the current playback position, and the current control capabilities.</p><pre><code>public final class PlaybackStateCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html
ConnectivityManagerCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> ConnectivityManager </code></pre> introduced after API level 16 in a backwards compatible fashion.</p><pre><code>public final class ConnectivityManagerCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/net/ConnectivityManagerCompat.html
android.support.v4.net	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/net/package-summary.html
TrafficStatsCompat	A										<section class="prog__container"><p> Helper for accessing features in TrafficStats introduced after API level 14 in a backwards compatible fashion.</p><pre><code>public final class TrafficStatsCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/net/TrafficStatsCompat.html
AsyncTaskCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> AsyncTask </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class AsyncTaskCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/os/AsyncTaskCompat.html
BuildCompat	A										<section class="prog__container"><p> BuildCompat contains additional platform version checking methods for testing compatibility with new features.</p><pre><code>public class BuildCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/os/BuildCompat.html
CancellationSignal	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> CancellationSignal </code></pre> . Used to write apps that run on platforms prior to Android 4.1. See the framework SDK documentation for a class overview.</p><pre><code>public final class CancellationSignal\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/os/CancellationSignal.html
CancellationSignal.OnCancelListener	A										<section class="prog__container"><p> Listens for cancellation.</p><pre><code>public static interface CancellationSignal.OnCancelListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/os/CancellationSignal.OnCancelListener.html
EnvironmentCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> Environment </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class EnvironmentCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/os/EnvironmentCompat.html
OperationCanceledException	A										<section class="prog__container"><p> An exception type that is thrown when an operation in progress is canceled.</p><pre><code>public class OperationCanceledException\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/os/OperationCanceledException.html
android.support.v4.os	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/os/package-summary.html
ParcelableCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> Parcelable </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class ParcelableCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/os/ParcelableCompat.html
ParcelableCompatCreatorCallbacks	A										<section class="prog__container"><p> Callbacks a <pre><code> Parcelable </code></pre> creator should implement.</p><pre><code>public interface ParcelableCompatCreatorCallbacks\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/os/ParcelableCompatCreatorCallbacks.html
TraceCompat	A										<section class="prog__container"><p> Writes trace events to the system trace buffer. These trace events can be collected and visualized using the Systrace tool. <p> This tracing mechanism is independent of the method tracing mechanism offered by <pre><code> startMethodTracing() </code></pre> . In particular, it enables tracing of events that occur across multiple processes. <p> For information about using the Systrace tool, read Analyzing Display and Performance with Systrace . </p><pre><code>public final class TraceCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/os/TraceCompat.html
UserManagerCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> UserManager </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public class UserManagerCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/os/UserManagerCompat.html
android.support.v4.print	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/print/package-summary.html
PrintHelper	A										<section class="prog__container"><p> Helper for printing bitmaps.</p><pre><code>public final class PrintHelper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/print/PrintHelper.html
PrintHelper.OnPrintFinishCallback	A										<section class="prog__container"><p> Callback for observing when a print operation is completed. When print is finished either the system acquired the document to print or printing was cancelled.</p><pre><code>public static interface PrintHelper.OnPrintFinishCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/print/PrintHelper.OnPrintFinishCallback.html
DocumentFile	A										<section class="prog__container"><p> Representation of a document backed by either a <pre><code> DocumentsProvider </code></pre> or a raw file on disk. This is a utility class designed to emulate the traditional <pre><code> File </code></pre> interface. It offers a simplified view of a tree of documents, but it has substantial overhead. For optimal performance and a richer feature set, use the <pre><code> DocumentsContract </code></pre> methods and constants directly. <p> There are several differences between documents and traditional files: <ul> <li> Documents express their display name and MIME type as separate fields, instead of relying on file extensions. Some documents providers may still choose to append extensions to their display names, but that's an implementation detail. <li> A single document may appear as the child of multiple directories, so it doesn't inherently know who its parent is. That is, documents don't have a strong notion of path. You can easily traverse a tree of documents from parent to child, but not from child to parent. <li> Each document has a unique identifier within that provider. This identifier is an <em> opaque </em> implementation detail of the provider, and as such it must not be parsed. </li> </li> </li> </ul> <p> Before using this class, first consider if you really need access to an entire subtree of documents. The principle of least privilege dictates that you should only ask for access to documents you really need. If you only need the user to pick a single file, use <pre><code> ACTION_OPEN_DOCUMENT </code></pre> or <pre><code> ACTION_GET_CONTENT </code></pre> . If you want to let the user pick multiple files, add <pre><code> EXTRA_ALLOW_MULTIPLE </code></pre> . If you only need the user to save a single file, use <pre><code> ACTION_CREATE_DOCUMENT </code></pre> . If you use these APIs, you can pass the resulting <pre><code> getData() </code></pre> into <pre><code> fromSingleUri(Context, Uri) </code></pre> to work with that document. <p> If you really do need full access to an entire subtree of documents, start by launching <pre><code> ACTION_OPEN_DOCUMENT_TREE </code></pre> to let the user pick a directory. Then pass the resulting <pre><code> getData() </code></pre> into <pre><code> fromTreeUri(Context, Uri) </code></pre> to start working with the user selected tree. <p> As you navigate the tree of DocumentFile instances, you can always use <pre><code> getUri() </code></pre> to obtain the Uri representing the underlying document for that object, for use with <pre><code> openInputStream(Uri) </code></pre> , etc. <p> To simplify your code on devices running <pre><code> KITKAT </code></pre> or earlier, you can use <pre><code> fromFile(File) </code></pre> which emulates the behavior of a <pre><code> DocumentsProvider </code></pre> . </p><pre><code>public abstract class DocumentFile\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/provider/DocumentFile.html
android.support.v4.provider	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/provider/package-summary.html
BidiFormatter.Builder	A										<section class="prog__container"><p> A class for building a BidiFormatter with non-default options.</p><pre><code>public static final class BidiFormatter.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/text/BidiFormatter.Builder.html
BidiFormatter	A										<section class="prog__container"><p> Utility class for formatting text for display in a potentially opposite-directionality context without garbling. The directionality of the context is set at formatter creation and the directionality of the text can be either estimated or passed in when known. Provides the following functionality: <p> 1. Bidi Wrapping When text in one language is mixed into a document in another, opposite-directionality language, e.g. when an English business name is embedded in a Hebrew web page, both the inserted string and the text surrounding it may be displayed incorrectly unless the inserted string is explicitly separated from the surrounding text in a "wrapper" that: <p> - Declares its directionality so that the string is displayed correctly. This can be done in Unicode bidi formatting codes by <pre><code> unicodeWrap(CharSequence) </code></pre> and similar methods. <p> - Isolates the string's directionality, so it does not unduly affect the surrounding content. Currently, this can only be done using invisible Unicode characters of the same direction as the context (LRM or RLM) in addition to the directionality declaration above, thus "resetting" the directionality to that of the context. The "reset" may need to be done at both ends of the string. Without "reset" after the string, the string will "stick" to a number or logically separate opposite-direction text that happens to follow it in-line (even if separated by neutral content like spaces and punctuation). Without "reset" before the string, the same can happen there, but only with more opposite-direction text, not a number. One approach is to "reset" the direction only after each string, on the theory that if the preceding opposite- direction text is itself bidi-wrapped, the "reset" after it will prevent the sticking. (Doing the "reset" only before each string definitely does not work because we do not want to require bidi-wrapping numbers, and a bidi-wrapped opposite-direction string could be followed by a number.) Still, the safest policy is to do the "reset" on both ends of each string, since RTL message translations often contain untranslated Latin-script brand names and technical terms, and one of these can be followed by a bidi-wrapped inserted value. On the other hand, when one has such a message, it is best to do the "reset" manually in the message translation itself, since the message's opposite-direction text could be followed by an inserted number, which we would not bidi-wrap anyway. Thus, "reset" only after the string is the current default. In an alternative to "reset", recent additions to the HTML, CSS, and Unicode standards allow the isolation to be part of the directionality declaration. This form of isolation is better than "reset" because it takes less space, does not require knowing the context directionality, has a gentler effect than "reset", and protects both ends of the string. However, we do not yet allow using it because required platforms do not yet support it. <p> Providing these wrapping services is the basic purpose of the bidi formatter. <p> 2. Directionality estimation How does one know whether a string about to be inserted into surrounding text has the same directionality? Well, in many cases, one knows that this must be the case when writing the code doing the insertion, e.g. when a localized message is inserted into a localized page. In such cases there is no need to involve the bidi formatter at all. In some other cases, it need not be the same as the context, but is either constant (e.g. urls are always LTR) or otherwise known. In the remaining cases, e.g. when the string is user-entered or comes from a database, the language of the string (and thus its directionality) is not known a priori, and must be estimated at run-time. The bidi formatter can do this automatically using the default first-strong estimation algorithm. It can also be configured to use a custom directionality estimation object. </p><pre><code>public final class BidiFormatter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/text/BidiFormatter.html
ICUCompat	A										<section class="prog__container"><p> Returns the script for a given Locale.</p><pre><code>public final class ICUCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/text/ICUCompat.html
android.support.v4.text	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/text/package-summary.html
TextDirectionHeuristicCompat	A										<section class="prog__container"><p> Interface for objects that use a heuristic for guessing at the paragraph direction by examining text.</p><pre><code>public interface TextDirectionHeuristicCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/text/TextDirectionHeuristicCompat.html
TextDirectionHeuristicsCompat	A										<section class="prog__container"><p> Some objects that implement TextDirectionHeuristic.</p><pre><code>public final class TextDirectionHeuristicsCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/text/TextDirectionHeuristicsCompat.html
TextUtilsCompat	A										<section class="prog__container"><pre><code>public final class TextUtilsCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/text/TextUtilsCompat.html
LinkifyCompat	A										<section class="prog__container"><p> LinkifyCompat brings in <pre><code> Linkify </code></pre> improvements for URLs and email addresses to older API levels.</p><pre><code>public final class LinkifyCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/text/util/LinkifyCompat.html
LinkifyCompat.LinkifyMask	A										<section class="prog__container"><p> Returns the annotation type of this annotation.</p><pre><code>public static abstract @interface LinkifyCompat.LinkifyMask\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/v4/text/util/LinkifyCompat.LinkifyMask.html
android.support.v4.text.util	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/text/util/package-summary.html
ArrayMap	A										<section class="prog__container"><p> ArrayMap is a generic key-&gt;value mapping data structure that is designed to be more memory efficient than a traditional <pre><code> HashMap </code></pre> , this implementation is a version of the platform's <pre><code> ArrayMap </code></pre> that can be used on older versions of the platform. It keeps its mappings in an array data structure -- an integer array of hash codes for each item, and an Object array of the key/value pairs. This allows it to avoid having to create an extra object for every entry put in to the map, and it also tries to control the growth of the size of these arrays more aggressively (since growing them only requires copying the entries in the array, not rebuilding a hash map). <p> If you don't need the standard Java container APIs provided here (iterators etc), consider using <pre><code> SimpleArrayMap </code></pre> instead. </p><pre><code>public class ArrayMap\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/util/ArrayMap.html
ArraySet	A										<section class="prog__container"><p> ArraySet is a generic set data structure that is designed to be more memory efficient than a traditional <pre><code> HashSet </code></pre> . The design is very similar to <pre><code> ArrayMap </code></pre> , with all of the caveats described there. This implementation is separate from ArrayMap, however, so the Object array contains only one item for each entry in the set (instead of a pair for a mapping). <p> Note that this implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashSet, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. </p><pre><code>public final class ArraySet\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/util/ArraySet.html
AtomicFile	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> AtomicFile </code></pre> , a helper class for performing atomic operations on a file by creating a backup file until a write has successfully completed. <p> Atomic file guarantees file integrity by ensuring that a file has been completely written and sync'd to disk before removing its backup. As long as the backup file exists, the original file is considered to be invalid (left over from a previous attempt to write the file). </p><pre><code>public class AtomicFile\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/util/AtomicFile.html
CircularArray	A										<section class="prog__container"><p> CircularArray is a generic circular array data structure that provides O(1) random read, O(1) prepend and O(1) append. The CircularArray automatically grows its capacity when number of added items is over its capacity.</p><pre><code>public final class CircularArray\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/util/CircularArray.html
CircularIntArray	A										<section class="prog__container"><p> CircularIntArray is a circular integer array data structure that provides O(1) random read, O(1) prepend and O(1) append. The CircularIntArray automatically grows its capacity when number of added integers is over its capacity.</p><pre><code>public final class CircularIntArray\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/util/CircularIntArray.html
LongSparseArray	A										<section class="prog__container"><p> SparseArray mapping longs to Objects, a version of the platform's <pre><code> LongSparseArray </code></pre> that can be used on older versions of the platform. Unlike a normal array of Objects, there can be gaps in the indices. It is intended to be more memory efficient than using a HashMap to map Longs to Objects, both because it avoids auto-boxing keys and its data structure doesn't rely on an extra entry object for each mapping. <p> Note that this container keeps its mappings in an array data structure, using a binary search to find keys. The implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashMap, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. </p><pre><code>public class LongSparseArray\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/util/LongSparseArray.html
LruCache	A										<section class="prog__container"><p> Static library version of <pre><code> LruCache </code></pre> . Used to write apps that run on API levels prior to 12. When running on API level 12 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p><pre><code>public class LruCache\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/util/LruCache.html
android.support.v4.util	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/util/package-summary.html
Pair	A										<section class="prog__container"><p> Container to ease passing around a tuple of two objects. This object provides a sensible implementation of equals(), returning true if equals() is true on each of the contained objects.</p><pre><code>public class Pair\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/util/Pair.html
PatternsCompat	A										<section class="prog__container"><p> Commonly used regular expression patterns.</p><pre><code>public final class PatternsCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/util/PatternsCompat.html
Pools	A										<section class="prog__container"><p> Helper class for creating pools of objects. An example use looks like this: <pre> public class MyPooledClass { private static final SynchronizedPool<mypooledclass> sPool = new SynchronizedPool<mypooledclass>(10); public static MyPooledClass obtain() { MyPooledClass instance = sPool.acquire(); return (instance != null) ? instance : new MyPooledClass(); } public void recycle() { // Clear state if needed. sPool.release(this); } . . . } </mypooledclass></mypooledclass></pre></p><pre><code>public final class Pools\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/util/Pools.html
Pools.Pool	A										<section class="prog__container"><p> Interface for managing a pool of objects.</p><pre><code>public static interface Pools.Pool\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/util/Pools.Pool.html
Pools.SimplePool	A										<section class="prog__container"><p> Simple (non-synchronized) pool of objects.</p><pre><code>public static class Pools.SimplePool\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/util/Pools.SimplePool.html
Pools.SynchronizedPool	A										<section class="prog__container"><p> Synchronized) pool of objects.</p><pre><code>public static class Pools.SynchronizedPool\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/util/Pools.SynchronizedPool.html
SimpleArrayMap	A										<section class="prog__container"><p> Base implementation of <pre><code> ArrayMap </code></pre> that doesn't include any standard Java container API interoperability. These features are generally heavier-weight ways to interact with the container, so discouraged, but they can be useful to make it easier to use as a drop-in replacement for HashMap. If you don't need them, this class can be preferrable since it doesn't bring in any of the implementation of those APIs, allowing that code to be stripped by ProGuard.</p><pre><code>public class SimpleArrayMap\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/util/SimpleArrayMap.html
SparseArrayCompat	A										<section class="prog__container"><p> A copy of the current platform (currently <pre><code> KITKAT </code></pre> version of <pre><code> SparseArray </code></pre> ; provides a removeAt() method and other things.</p><pre><code>public class SparseArrayCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/util/SparseArrayCompat.html
AbsSavedState	A										<section class="prog__container"><p> A <pre><code> Parcelable </code></pre> implementation that should be used by inheritance hierarchies to ensure the state of all classes along the chain is saved.</p><pre><code>public abstract class AbsSavedState\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/AbsSavedState.html
AccessibilityDelegateCompat	A										<section class="prog__container"><p> Helper for accessing <pre><code> View.AccessibilityDelegate </code></pre> introduced after API level 4 in a backwards compatible fashion. <p> <strong> Note: </strong> On platform versions prior to <pre><code> API 23 </code></pre> , delegate methods on views in the <pre><code> android.widget.* </code></pre> package are called <i> before </i> host methods. This prevents certain properties such as class name from being modified by overriding <pre><code> onInitializeAccessibilityNodeInfo(View, AccessibilityNodeInfoCompat) </code></pre> , as any changes will be overwritten by the host class. <p> Starting in <pre><code> API 23 </code></pre> , delegate methods are called <i> after </i> host methods, which all properties to be modified without being overwritten by the host class. </p><pre><code>public class AccessibilityDelegateCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html
ActionProvider	A										<section class="prog__container"><p> This class is a mediator for accomplishing a given task, for example sharing a file. It is responsible for creating a view that performs an action that accomplishes the task. This class also implements other functions such a performing a default action. <p class="note"> <strong> Note: </strong> This class is included in the support library for compatibility with API level 4 and higher. If you're developing your app for API level 14 and higher <em> only </em> , you should instead use the framework <pre><code> ActionProvider </code></pre> class. </p><pre><code>public abstract class ActionProvider\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ActionProvider.html
ActionProvider.VisibilityListener	A										<section class="prog__container"><p> Listens to changes in visibility as reported by <pre><code> refreshVisibility() </code></pre> .</p><pre><code>public static interface ActionProvider.VisibilityListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ActionProvider.VisibilityListener.html
AsyncLayoutInflater	A										<section class="prog__container"><p> <p> Helper class for inflating layouts asynchronously. To use, construct an instance of <pre><code> AsyncLayoutInflater </code></pre> on the UI thread and call <pre><code> inflate(int, ViewGroup, OnInflateFinishedListener) </code></pre> . The <pre><code> AsyncLayoutInflater.OnInflateFinishedListener </code></pre> will be invoked on the UI thread when the inflate request has completed. <p> This is intended for parts of the UI that are created lazily or in response to user interactions. This allows the UI thread to continue to be responsive &amp; animate while the relatively heavy inflate is being performed. <p> For a layout to be inflated asynchronously it needs to have a parent whose <pre><code> generateLayoutParams(AttributeSet) </code></pre> is thread-safe and all the Views being constructed as part of inflation must not create any <pre><code> Handler </code></pre> s or otherwise call <pre><code> myLooper() </code></pre> . If the layout that is trying to be inflated cannot be constructed asynchronously for whatever reason, <pre><code> AsyncLayoutInflater </code></pre> will automatically fall back to inflating on the UI thread. <p> NOTE that the inflated View hierarchy is NOT added to the parent. It is equivalent to calling <pre><code> inflate(int, ViewGroup, boolean) </code></pre> with attachToRoot set to false. Callers will likely want to call <pre><code> addView(View) </code></pre> in the <pre><code> AsyncLayoutInflater.OnInflateFinishedListener </code></pre> callback at a minimum. <p> This inflater does not support setting a <pre><code> LayoutInflater.Factory </code></pre> nor <pre><code> LayoutInflater.Factory2 </code></pre> . Similarly it does not support inflating layouts that contain fragments. </p><pre><code>public final class AsyncLayoutInflater\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/AsyncLayoutInflater.html
AsyncLayoutInflater.OnInflateFinishedListener	A										<section class="prog__container"><pre><code>public static interface AsyncLayoutInflater.OnInflateFinishedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/AsyncLayoutInflater.OnInflateFinishedListener.html
GestureDetectorCompat	A										<section class="prog__container"><p> Detects various gestures and events using the supplied <pre><code> MotionEvent </code></pre> s. The <pre><code> GestureDetector.OnGestureListener </code></pre> callback will notify users when a particular motion event has occurred. This class should only be used with <pre><code> MotionEvent </code></pre> s reported via touch (don't use for trackball events). <p> This compatibility implementation of the framework's GestureDetector guarantees the newer focal point scrolling behavior from Jellybean MR1 on all platform versions. </p><pre><code>public final class GestureDetectorCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/GestureDetectorCompat.html
GravityCompat	A										<section class="prog__container"><p> Compatibility shim for accessing newer functionality from <pre><code> Gravity </code></pre> .</p><pre><code>public final class GravityCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/GravityCompat.html
InputDeviceCompat	A										<section class="prog__container"><p> Helper class for accessing values in <pre><code> InputDevice </code></pre> .</p><pre><code>public final class InputDeviceCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/InputDeviceCompat.html
KeyEventCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> KeyEvent </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class KeyEventCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/KeyEventCompat.html
LayoutInflaterCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> LayoutInflater </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class LayoutInflaterCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/LayoutInflaterCompat.html
LayoutInflaterFactory	A										<section class="prog__container"><p> Used with <pre><code> LayoutInflaterCompat.setFactory() </code></pre> . Offers the same API as <pre><code> LayoutInflater.Factory2 </code></pre> .</p><pre><code>public interface LayoutInflaterFactory\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/LayoutInflaterFactory.html
MarginLayoutParamsCompat	A										<section class="prog__container"><p> Helper for accessing API features in <pre><code> MarginLayoutParams </code></pre> added after API 4.</p><pre><code>public final class MarginLayoutParamsCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/MarginLayoutParamsCompat.html
MenuCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> Menu </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class MenuCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/MenuCompat.html
MenuItemCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> MenuItem </code></pre> introduced after API level 4 in a backwards compatible fashion. <p class="note"> <strong> Note: </strong> You cannot get an instance of this class. Instead, it provides <em> static </em> methods that correspond to the methods in <pre><code> MenuItem </code></pre> , but take a <pre><code> MenuItem </code></pre> object as an additional argument. </p><pre><code>public final class MenuItemCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/MenuItemCompat.html
MenuItemCompat.OnActionExpandListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a menu item marked with <pre><code> SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW </code></pre> is expanded or collapsed.</p><pre><code>public static interface MenuItemCompat.OnActionExpandListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/MenuItemCompat.OnActionExpandListener.html
MotionEventCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> MotionEvent </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class MotionEventCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/MotionEventCompat.html
NestedScrollingChild	A										<section class="prog__container"><p> This interface should be implemented by <pre><code> View </code></pre> subclasses that wish to support dispatching nested scrolling operations to a cooperating parent <pre><code> ViewGroup </code></pre> . <p> Classes implementing this interface should create a final instance of a <pre><code> NestedScrollingChildHelper </code></pre> as a field and delegate any View methods to the <pre><code> NestedScrollingChildHelper </code></pre> methods of the same signature. </p><pre><code>public interface NestedScrollingChild\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/NestedScrollingChild.html
NestedScrollingChildHelper	A										<section class="prog__container"><p> Helper class for implementing nested scrolling child views compatible with Android platform versions earlier than Android 5.0 Lollipop (API 21). <p> <pre><code> View </code></pre> subclasses should instantiate a final instance of this class as a field at construction. For each <pre><code> View </code></pre> method that has a matching method signature in this class, delegate the operation to the helper instance in an overridden method implementation. This implements the standard framework policy for nested scrolling. </p><pre><code>public class NestedScrollingChildHelper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/NestedScrollingChildHelper.html
NestedScrollingParent	A										<section class="prog__container"><p> This interface should be implemented by <pre><code> ViewGroup </code></pre> subclasses that wish to support scrolling operations delegated by a nested child view. <p> Classes implementing this interface should create a final instance of a <pre><code> NestedScrollingParentHelper </code></pre> as a field and delegate any View or ViewGroup methods to the <pre><code> NestedScrollingParentHelper </code></pre> methods of the same signature. </p><pre><code>public interface NestedScrollingParent\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/NestedScrollingParent.html
NestedScrollingParentHelper	A										<section class="prog__container"><p> Helper class for implementing nested scrolling parent views compatible with Android platform versions earlier than Android 5.0 Lollipop (API 21). <p> <pre><code> ViewGroup </code></pre> subclasses should instantiate a final instance of this class as a field at construction. For each <pre><code> ViewGroup </code></pre> method that has a matching method signature in this class, delegate the operation to the helper instance in an overridden method implementation. This implements the standard framework policy for nested scrolling. </p><pre><code>public class NestedScrollingParentHelper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/NestedScrollingParentHelper.html
OnApplyWindowInsetsListener	A										<section class="prog__container"><p> Listener for applying window insets on a view in a custom way. <p> Apps may choose to implement this interface if they want to apply custom policy to the way that window insets are treated for a view. If an OnApplyWindowInsetsListener is set, it's <pre><code> onApplyWindowInsets </code></pre> method will be called instead of the View's own <pre><code> onApplyWindowInsets </code></pre> method. The listener may optionally call the parameter View's <pre><code> onApplyWindowInsets </code></pre> method to apply the View's normal behavior as part of its own. </p><pre><code>public interface OnApplyWindowInsetsListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/OnApplyWindowInsetsListener.html
android.support.v4.view	A										<section class="prog__container">An animation listener receives notifications from an animation. </section>	https://developer.android.com/reference/android/support/v4/view/package-summary.html
PagerAdapter	A										<section class="prog__container"><p> Base class providing the adapter to populate pages inside of a <pre><code> ViewPager </code></pre> . You will most likely want to use a more specific implementation of this, such as <pre><code> FragmentPagerAdapter </code></pre> or <pre><code> FragmentStatePagerAdapter </code></pre> . <p> When you implement a PagerAdapter, you must override the following methods at minimum: </p><pre><code>public abstract class PagerAdapter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/PagerAdapter.html
PagerTabStrip	A										<section class="prog__container"><p> PagerTabStrip is an interactive indicator of the current, next, and previous pages of a <pre><code> ViewPager </code></pre> . It is intended to be used as a child view of a ViewPager widget in your XML layout. Add it as a child of a ViewPager in your layout file and set its android:layout_gravity to TOP or BOTTOM to pin it to the top or bottom of the ViewPager. The title from each page is supplied by the method <pre><code> getPageTitle(int) </code></pre> in the adapter supplied to the ViewPager. <p> For a non-interactive indicator, see <pre><code> PagerTitleStrip </code></pre> . </p><pre><code>public class PagerTabStrip\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/PagerTabStrip.html
PagerTitleStrip	A										<section class="prog__container"><p> PagerTitleStrip is a non-interactive indicator of the current, next, and previous pages of a <pre><code> ViewPager </code></pre> . It is intended to be used as a child view of a ViewPager widget in your XML layout. Add it as a child of a ViewPager in your layout file and set its android:layout_gravity to TOP or BOTTOM to pin it to the top or bottom of the ViewPager. The title from each page is supplied by the method <pre><code> getPageTitle(int) </code></pre> in the adapter supplied to the ViewPager. <p> For an interactive indicator, see <pre><code> PagerTabStrip </code></pre> . </p><pre><code>public class PagerTitleStrip\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/PagerTitleStrip.html
PointerIconCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> PointerIcon </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class PointerIconCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/PointerIconCompat.html
ScaleGestureDetectorCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> ScaleGestureDetector </code></pre> introduced after API level 19 (KitKat) in a backwards compatible fashion.</p><pre><code>public final class ScaleGestureDetectorCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ScaleGestureDetectorCompat.html
ScrollingView	A										<section class="prog__container"><p> An interface that can be implemented by Views to provide scroll related APIs.</p><pre><code>public interface ScrollingView\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ScrollingView.html
TintableBackgroundView	A										<section class="prog__container"><p> Interface which allows a <pre><code> View </code></pre> to receive background tinting calls from <pre><code> ViewCompat </code></pre> when running on API v20 devices or lower.</p><pre><code>public interface TintableBackgroundView\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/TintableBackgroundView.html
VelocityTrackerCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> VelocityTracker </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class VelocityTrackerCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/VelocityTrackerCompat.html
ViewCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> View </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public class ViewCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewCompat.html
ViewConfigurationCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> ViewConfiguration </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class ViewConfigurationCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewConfigurationCompat.html
ViewGroupCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> ViewGroup </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class ViewGroupCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewGroupCompat.html
ViewPager.DecorView	A										<section class="prog__container"><p> Annotation which allows marking of views to be decoration views when added to a view pager. <p> Views marked with this annotation can be added to the view pager with a layout resource. An example being <pre><code> PagerTitleStrip </code></pre> . </p><pre><code>public static abstract @interface ViewPager.DecorView\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPager.DecorView.html
ViewPager	A										<section class="prog__container"><p> Layout manager that allows the user to flip left and right through pages of data. You supply an implementation of a <pre><code> PagerAdapter </code></pre> to generate the pages that the view shows. <p> ViewPager is most often used in conjunction with <pre><code> Fragment </code></pre> , which is a convenient way to supply and manage the lifecycle of each page. There are standard adapters implemented for using fragments with the ViewPager, which cover the most common use cases. These are <pre><code> FragmentPagerAdapter </code></pre> and <pre><code> FragmentStatePagerAdapter </code></pre> ; each of these classes have simple code showing how to build a full user interface with them. <p> Views which are annotated with the <pre><code> ViewPager.DecorView </code></pre> annotation are treated as part of the view pagers 'decor'. Each decor view's position can be controlled via its <pre><code> android:layout_gravity </code></pre> attribute. For example: <pre> &lt;android.support.v4.view.ViewPager android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;android.support.v4.view.PagerTitleStrip android:layout_width="match_parent" android:layout_height="wrap_content" android:layout_gravity="top" /&gt; &lt;/android.support.v4.view.ViewPager&gt; </pre> <p> For more information about how to use ViewPager, read Creating Swipe Views with Tabs . </p><pre><code>public class ViewPager\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPager.html
ViewPager.LayoutParams	A										<section class="prog__container"><p> Layout parameters that should be supplied for views added to a ViewPager.</p><pre><code>public static class ViewPager.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPager.LayoutParams.html
ViewPager.OnAdapterChangeListener	A										<section class="prog__container"><p> Callback interface for responding to adapter changes.</p><pre><code>public static interface ViewPager.OnAdapterChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPager.OnAdapterChangeListener.html
ViewPager.OnPageChangeListener	A										<section class="prog__container"><p> Callback interface for responding to changing state of the selected page.</p><pre><code>public static interface ViewPager.OnPageChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPager.OnPageChangeListener.html
ViewPager.PageTransformer	A										<section class="prog__container"><p> A PageTransformer is invoked whenever a visible/attached page is scrolled. This offers an opportunity for the application to apply a custom transformation to the page views using animation properties. <p> As property animation is only supported as of Android 3.0 and forward, setting a PageTransformer on a ViewPager on earlier platform versions will be ignored. </p><pre><code>public static interface ViewPager.PageTransformer\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPager.PageTransformer.html
ViewPager.SavedState	A										<section class="prog__container"><p> This is the persistent state that is saved by ViewPager. Only needed if you are creating a sublass of ViewPager that must save its own state, in which case it should implement a subclass of this which contains that state.</p><pre><code>public static class ViewPager.SavedState\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPager.SavedState.html
ViewPager.SimpleOnPageChangeListener	A										<section class="prog__container"><p> Simple implementation of the <pre><code> ViewPager.OnPageChangeListener </code></pre> interface with stub implementations of each method. Extend this if you do not intend to override every method of <pre><code> ViewPager.OnPageChangeListener </code></pre> .</p><pre><code>public static class ViewPager.SimpleOnPageChangeListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPager.SimpleOnPageChangeListener.html
ViewParentCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> ViewParent </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class ViewParentCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewParentCompat.html
ViewPropertyAnimatorCompat	A										<section class="prog__container"><p> This method will cause the View's <pre><code> alpha </code></pre> property to be animated to the specified value.</p><pre><code>public final class ViewPropertyAnimatorCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPropertyAnimatorCompat.html
ViewPropertyAnimatorListener	A										<section class="prog__container"><p> <p> An animation listener receives notifications from an animation. Notifications indicate animation related events, such as the end or the start of the animation. </p><pre><code>public interface ViewPropertyAnimatorListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPropertyAnimatorListener.html
ViewPropertyAnimatorListenerAdapter	A										<section class="prog__container"><p> This adapter class provides empty implementations of the methods from <pre><code> ViewPropertyAnimatorListener </code></pre> . Any custom listener that cares only about a subset of the methods of this listener can simply subclass this adapter class instead of implementing the interface directly.</p><pre><code>public class ViewPropertyAnimatorListenerAdapter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPropertyAnimatorListenerAdapter.html
ViewPropertyAnimatorUpdateListener	A										<section class="prog__container"><p> Implementors of this interface can add themselves as update listeners to an <pre><code> ViewPropertyAnimatorCompat </code></pre> instance to receive callbacks on every animation frame, after the current frame's values have been calculated for that <pre><code> ViewPropertyAnimatorCompat </code></pre> .</p><pre><code>public interface ViewPropertyAnimatorUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPropertyAnimatorUpdateListener.html
WindowCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> Window </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class WindowCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/WindowCompat.html
WindowInsetsCompat	A										<section class="prog__container"><p> Describes a set of insets for window content. <p> WindowInsetsCompats are immutable and may be expanded to include more inset types in the future. To adjust insets, use one of the supplied clone methods to obtain a new WindowInsetsCompat instance with the adjusted properties. </p><pre><code>public class WindowInsetsCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/WindowInsetsCompat.html
AccessibilityEventCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> AccessibilityEvent </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class AccessibilityEventCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityEventCompat.html
AccessibilityManagerCompat.AccessibilityStateChangeListener	A										<section class="prog__container"><p> Listener for the accessibility state.</p><pre><code>public static interface AccessibilityManagerCompat.AccessibilityStateChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityManagerCompat.AccessibilityStateChangeListener.html
AccessibilityManagerCompat.AccessibilityStateChangeListenerCompat	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> AccessibilityManagerCompat.AccessibilityStateChangeListener </code></pre> instead. </p><pre><code>public static abstract class AccessibilityManagerCompat.AccessibilityStateChangeListenerCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityManagerCompat.AccessibilityStateChangeListenerCompat.html
AccessibilityManagerCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> AccessibilityManager </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class AccessibilityManagerCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityManagerCompat.html
AccessibilityManagerCompat.TouchExplorationStateChangeListener	A										<section class="prog__container"><p> Listener for the system touch exploration state. To listen for changes to the touch exploration state on the device, implement this interface and register it with the system by calling <pre><code> addTouchExplorationStateChangeListener(AccessibilityManager, AccessibilityManagerCompat.TouchExplorationStateChangeListener) </code></pre> .</p><pre><code>public static interface AccessibilityManagerCompat.TouchExplorationStateChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityManagerCompat.TouchExplorationStateChangeListener.html
AccessibilityNodeInfoCompat.AccessibilityActionCompat	A										<section class="prog__container"><p> Action that gives accessibility focus to the node.</p><pre><code>public static class AccessibilityNodeInfoCompat.AccessibilityActionCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityNodeInfoCompat.AccessibilityActionCompat.html
AccessibilityNodeInfoCompat.CollectionInfoCompat	A										<section class="prog__container"><p> Class with information if a node is a collection. <p> A collection of items has rows and columns and may be hierarchical. For example, a horizontal list is a collection with one column, as many rows as the list items, and is not hierarchical; A table is a collection with several rows, several columns, and is not hierarchical; A vertical tree is a hierarchical collection with one column and as many rows as the first level children. </p><pre><code>public static class AccessibilityNodeInfoCompat.CollectionInfoCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityNodeInfoCompat.CollectionInfoCompat.html
AccessibilityNodeInfoCompat.CollectionItemInfoCompat	A										<section class="prog__container"><p> Class with information if a node is a collection item. <p> A collection item is contained in a collection, it starts at a given row and column in the collection, and spans one or more rows and columns. For example, a header of two related table columns starts at the first row and the first column, spans one row and two columns. </p><pre><code>public static class AccessibilityNodeInfoCompat.CollectionItemInfoCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityNodeInfoCompat.CollectionItemInfoCompat.html
AccessibilityNodeInfoCompat	A										<section class="prog__container"><p> Helper for accessing <pre><code> AccessibilityNodeInfo </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public class AccessibilityNodeInfoCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityNodeInfoCompat.html
AccessibilityNodeInfoCompat.RangeInfoCompat	A										<section class="prog__container"><p> Class with information if a node is a range.</p><pre><code>public static class AccessibilityNodeInfoCompat.RangeInfoCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityNodeInfoCompat.RangeInfoCompat.html
AccessibilityNodeProviderCompat	A										<section class="prog__container"><p> Helper for accessing <pre><code> AccessibilityNodeProvider </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public class AccessibilityNodeProviderCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityNodeProviderCompat.html
AccessibilityRecordCompat	A										<section class="prog__container"><p> Helper for accessing <pre><code> AccessibilityRecord </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public class AccessibilityRecordCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityRecordCompat.html
AccessibilityWindowInfoCompat	A										<section class="prog__container"><p> Helper for accessing <pre><code> AccessibilityWindowInfo </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public class AccessibilityWindowInfoCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityWindowInfoCompat.html
android.support.v4.view.accessibility	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/view/accessibility/package-summary.html
FastOutLinearInInterpolator	A										<section class="prog__container"><p> Interpolator corresponding to <pre><code> fast_out_linear_in </code></pre> . Uses a lookup table for the Bezier curve from (0,0) to (1,1) with control points: P0 (0, 0) P1 (0.4, 0) P2 (1.0, 1.0) P3 (1.0, 1.0)</p><pre><code>public class FastOutLinearInInterpolator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/animation/FastOutLinearInInterpolator.html
FastOutSlowInInterpolator	A										<section class="prog__container"><p> Interpolator corresponding to <pre><code> fast_out_slow_in </code></pre> . Uses a lookup table for the Bezier curve from (0,0) to (1,1) with control points: P0 (0, 0) P1 (0.4, 0) P2 (0.2, 1.0) P3 (1.0, 1.0)</p><pre><code>public class FastOutSlowInInterpolator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/animation/FastOutSlowInInterpolator.html
LinearOutSlowInInterpolator	A										<section class="prog__container"><p> Interpolator corresponding to <pre><code> linear_out_slow_in </code></pre> . Uses a lookup table for the Bezier curve from (0,0) to (1,1) with control points: P0 (0, 0) P1 (0, 0) P2 (0.2, 1.0) P3 (1.0, 1.0)</p><pre><code>public class LinearOutSlowInInterpolator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/animation/LinearOutSlowInInterpolator.html
android.support.v4.view.animation	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/view/animation/package-summary.html
PathInterpolatorCompat	A										<section class="prog__container"><p> Helper for creating path-based <pre><code> Interpolator </code></pre> instances. On API 21 or newer, the platform implementation will be used and on older platforms a compatible alternative implementation will be used.</p><pre><code>public final class PathInterpolatorCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/animation/PathInterpolatorCompat.html
AutoScrollHelper	A										<section class="prog__container"><p> AutoScrollHelper is a utility class for adding automatic edge-triggered scrolling to Views. <p> <b> Note: </b> Implementing classes are responsible for overriding the <pre><code> scrollTargetBy(int, int) </code></pre> , <pre><code> canTargetScrollHorizontally(int) </code></pre> , and <pre><code> canTargetScrollVertically(int) </code></pre> methods. See <pre><code> ListViewAutoScrollHelper </code></pre> for a <pre><code> ListView </code></pre> -specific implementation. <p> <h1> Activation </h1> Automatic scrolling starts when the user touches within an activation area. By default, activation areas are defined as the top, left, right, and bottom 20% of the host view's total area. Touching within the top activation area scrolls up, left scrolls to the left, and so on. <p> As the user touches closer to the extreme edge of the activation area, scrolling accelerates up to a maximum velocity. When using the default edge type, <pre><code> EDGE_TYPE_INSIDE_EXTEND </code></pre> , moving outside of the view bounds will scroll at the maximum velocity. <p> The following activation properties may be configured: <ul> <li> Delay after entering activation area before auto-scrolling begins, see <pre><code> setActivationDelay(int) </code></pre> . Default value is <pre><code> getTapTimeout() </code></pre> to avoid conflicting with taps. <li> Location of activation areas, see <pre><code> setEdgeType(int) </code></pre> . Default value is <pre><code> EDGE_TYPE_INSIDE_EXTEND </code></pre> . <li> Size of activation areas relative to view size, see <pre><code> setRelativeEdges(float, float) </code></pre> . Default value is 20% for both vertical and horizontal edges. <li> Maximum size used to constrain relative size, see <pre><code> setMaximumEdges(float, float) </code></pre> . Default value is <pre><code> NO_MAX </code></pre> . </li> </li> </li> </li> </ul> <h1> Scrolling </h1> When automatic scrolling is active, the helper will repeatedly call <pre><code> scrollTargetBy(int, int) </code></pre> to apply new scrolling offsets. <p> The following scrolling properties may be configured: <ul> <li> Acceleration ramp-up duration, see <pre><code> setRampUpDuration(int) </code></pre> . Default value is 500 milliseconds. <li> Acceleration ramp-down duration, see <pre><code> setRampDownDuration(int) </code></pre> . Default value is 500 milliseconds. <li> Target velocity relative to view size, see <pre><code> setRelativeVelocity(float, float) </code></pre> . Default value is 100% per second for both vertical and horizontal. <li> Minimum velocity used to constrain relative velocity, see <pre><code> setMinimumVelocity(float, float) </code></pre> . When set, scrolling will accelerate to the larger of either this value or the relative target value. Default value is approximately 5 centimeters or 315 dips per second. <li> Maximum velocity used to constrain relative velocity, see <pre><code> setMaximumVelocity(float, float) </code></pre> . Default value is approximately 25 centimeters or 1575 dips per second. </li> </li> </li> </li> </li> </ul> </p><pre><code>public abstract class AutoScrollHelper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/AutoScrollHelper.html
CompoundButtonCompat	A										<section class="prog__container"><p> Helper for accessing <pre><code> CompoundButton </code></pre> methods introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class CompoundButtonCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/CompoundButtonCompat.html
ContentLoadingProgressBar	A										<section class="prog__container"><p> ContentLoadingProgressBar implements a ProgressBar that waits a minimum time to be dismissed before showing. Once visible, the progress bar will be visible for a minimum amount of time to avoid "flashes" in the UI when an event could take a largely variable time to complete (from none, to a user perceivable amount)</p><pre><code>public class ContentLoadingProgressBar\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/ContentLoadingProgressBar.html
CursorAdapter	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> CursorAdapter </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p><pre><code>public abstract class CursorAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/CursorAdapter.html
DrawerLayout.DrawerListener	A										<section class="prog__container"><p> Listener for monitoring events about drawers.</p><pre><code>public static interface DrawerLayout.DrawerListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/DrawerLayout.DrawerListener.html
DrawerLayout	A										<section class="prog__container"><p> DrawerLayout acts as a top-level container for window content that allows for interactive "drawer" views to be pulled out from one or both vertical edges of the window. <p> Drawer positioning and layout is controlled using the <pre><code> android:layout_gravity </code></pre> attribute on child views corresponding to which side of the view you want the drawer to emerge from: left or right (or start/end on platform versions that support layout direction.) Note that you can only have one drawer view for each vertical edge of the window. If your layout configures more than one drawer view per vertical edge of the window, an exception will be thrown at runtime. </p><pre><code>public class DrawerLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/DrawerLayout.html
DrawerLayout.LayoutParams	A										<section class="prog__container"><p> Special value for the height or width requested by a View.</p><pre><code>public static class DrawerLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/DrawerLayout.LayoutParams.html
DrawerLayout.SavedState	A										<section class="prog__container"><p> State persisted across instances</p><pre><code>protected static class DrawerLayout.SavedState\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/DrawerLayout.SavedState.html
DrawerLayout.SimpleDrawerListener	A										<section class="prog__container"><p> Stub/no-op implementations of all methods of <pre><code> DrawerLayout.DrawerListener </code></pre> . Override this if you only care about a few of the available callback methods.</p><pre><code>public static abstract class DrawerLayout.SimpleDrawerListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/DrawerLayout.SimpleDrawerListener.html
EdgeEffectCompat	A										<section class="prog__container"><p> Helper for accessing <pre><code> EdgeEffect </code></pre> introduced after API level 4 in a backwards compatible fashion. This class is used to access <pre><code> EdgeEffect </code></pre> on platform versions that support it. When running on older platforms it will result in no-ops. It should be used by views that wish to use the standard Android visual effects at the edges of scrolling containers.</p><pre><code>public final class EdgeEffectCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/EdgeEffectCompat.html
ExploreByTouchHelper	A										<section class="prog__container"><p> ExploreByTouchHelper is a utility class for implementing accessibility support in custom <pre><code> View </code></pre> s that represent a collection of View-like logical items. It extends <pre><code> AccessibilityNodeProviderCompat </code></pre> and simplifies many aspects of providing information to accessibility services and managing accessibility focus. This class does not currently support hierarchies of logical items. <p> Clients should override abstract methods on this class and attach it to the host view using <pre><code> setAccessibilityDelegate(View, AccessibilityDelegateCompat) </code></pre> : <p> <pre> class MyCustomView extends View { private MyVirtualViewHelper mVirtualViewHelper; public MyCustomView(Context context, ...) { ... mVirtualViewHelper = new MyVirtualViewHelper(this); ViewCompat.setAccessibilityDelegate(this, mVirtualViewHelper); } @Override public boolean dispatchHoverEvent(MotionEvent event) { return mHelper.dispatchHoverEvent(this, event) || super.dispatchHoverEvent(event); } @Override public boolean dispatchKeyEvent(KeyEvent event) { return mHelper.dispatchKeyEvent(event) || super.dispatchKeyEvent(event); } @Override public boolean onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect) { super.onFocusChanged(gainFocus, direction, previouslyFocusedRect); mHelper.onFocusChanged(gainFocus, direction, previouslyFocusedRect); } } mAccessHelper = new MyExploreByTouchHelper(someView); ViewCompat.setAccessibilityDelegate(someView, mAccessHelper); </pre> </p><pre><code>public abstract class ExploreByTouchHelper\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/ExploreByTouchHelper.html
ListPopupWindowCompat	A										<section class="prog__container"><p> Helper for accessing features in ListPopupWindow introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class ListPopupWindowCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/ListPopupWindowCompat.html
ListViewAutoScrollHelper	A										<section class="prog__container"><p> An implementation of <pre><code> AutoScrollHelper </code></pre> that knows how to scroll through a <pre><code> ListView </code></pre> .</p><pre><code>public class ListViewAutoScrollHelper\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/ListViewAutoScrollHelper.html
ListViewCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> ListView </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class ListViewCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/ListViewCompat.html
NestedScrollView	A										<section class="prog__container"><p> NestedScrollView is just like <pre><code> ScrollView </code></pre> , but it supports acting as both a nested scrolling parent and child on both new and old versions of Android. Nested scrolling is enabled by default.</p><pre><code>public class NestedScrollView\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/NestedScrollView.html
NestedScrollView.OnScrollChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the scroll X or Y positions of a view change. <p> This version of the interface works on all versions of Android, back to API v4. </p><pre><code>public static interface NestedScrollView.OnScrollChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/NestedScrollView.OnScrollChangeListener.html
android.support.v4.widget	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/widget/package-summary.html
PopupMenuCompat	A										<section class="prog__container"><p> Helper for accessing features in PopupMenu introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class PopupMenuCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/PopupMenuCompat.html
PopupWindowCompat	A										<section class="prog__container"><p> Helper for accessing features in PopupWindow introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class PopupWindowCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/PopupWindowCompat.html
ResourceCursorAdapter	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> ResourceCursorAdapter </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p><pre><code>public abstract class ResourceCursorAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/ResourceCursorAdapter.html
ScrollerCompat	A										<section class="prog__container"><p> Provides access to new <pre><code> Scroller </code></pre> APIs when available. <p> This class provides a platform version-independent mechanism for obeying the current device's preferred scroll physics and fling behavior. It offers a subset of the APIs from Scroller or OverScroller. </p><pre><code>public final class ScrollerCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/ScrollerCompat.html
SearchViewCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> SearchView </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class SearchViewCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SearchViewCompat.html
SearchViewCompat.OnCloseListener	A										<section class="prog__container"><p> Callback for closing the query UI.</p><pre><code>public static interface SearchViewCompat.OnCloseListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SearchViewCompat.OnCloseListener.html
SearchViewCompat.OnCloseListenerCompat	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> SearchViewCompat.OnCloseListener </code></pre> instead. </p><pre><code>public static abstract class SearchViewCompat.OnCloseListenerCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SearchViewCompat.OnCloseListenerCompat.html
SearchViewCompat.OnQueryTextListener	A										<section class="prog__container"><p> Callbacks for changes to the query text.</p><pre><code>public static interface SearchViewCompat.OnQueryTextListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SearchViewCompat.OnQueryTextListener.html
SearchViewCompat.OnQueryTextListenerCompat	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> SearchViewCompat.OnQueryTextListener </code></pre> instead. </p><pre><code>public static abstract class SearchViewCompat.OnQueryTextListenerCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SearchViewCompat.OnQueryTextListenerCompat.html
SimpleCursorAdapter.CursorToStringConverter	A										<section class="prog__container"><p> This class can be used by external clients of SimpleCursorAdapter to define how the Cursor should be converted to a String.</p><pre><code>public static interface SimpleCursorAdapter.CursorToStringConverter\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SimpleCursorAdapter.CursorToStringConverter.html
SimpleCursorAdapter	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> SimpleCursorAdapter </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p><pre><code>public class SimpleCursorAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SimpleCursorAdapter.html
SimpleCursorAdapter.ViewBinder	A										<section class="prog__container"><p> This class can be used by external clients of SimpleCursorAdapter to bind values fom the Cursor to views. You should use this class to bind values from the Cursor to views that are not directly supported by SimpleCursorAdapter or to change the way binding occurs for views supported by SimpleCursorAdapter.</p><pre><code>public static interface SimpleCursorAdapter.ViewBinder\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SimpleCursorAdapter.ViewBinder.html
SlidingPaneLayout	A										<section class="prog__container"><p> SlidingPaneLayout provides a horizontal, multi-pane layout for use at the top level of a UI. A left (or first) pane is treated as a content list or browser, subordinate to a primary detail view for displaying content. <p> Child views may overlap if their combined width exceeds the available width in the SlidingPaneLayout. When this occurs the user may slide the topmost view out of the way by dragging it, or by navigating in the direction of the overlapped view using a keyboard. If the content of the dragged child view is itself horizontally scrollable, the user may grab it by the very edge. </p><pre><code>public class SlidingPaneLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SlidingPaneLayout.html
SlidingPaneLayout.LayoutParams	A										<section class="prog__container"><p> Special value for the height or width requested by a View.</p><pre><code>public static class SlidingPaneLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SlidingPaneLayout.LayoutParams.html
SlidingPaneLayout.PanelSlideListener	A										<section class="prog__container"><p> Listener for monitoring events about sliding panes.</p><pre><code>public static interface SlidingPaneLayout.PanelSlideListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SlidingPaneLayout.PanelSlideListener.html
SlidingPaneLayout.SimplePanelSlideListener	A										<section class="prog__container"><p> No-op stubs for <pre><code> SlidingPaneLayout.PanelSlideListener </code></pre> . If you only want to implement a subset of the listener methods you can extend this instead of implement the full interface.</p><pre><code>public static class SlidingPaneLayout.SimplePanelSlideListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SlidingPaneLayout.SimplePanelSlideListener.html
Space	A										<section class="prog__container"><p> Space is a lightweight <pre><code> View </code></pre> subclass that may be used to create gaps between components in general purpose layouts.</p><pre><code>public class Space\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/Space.html
SwipeRefreshLayout	A										<section class="prog__container"><p> The SwipeRefreshLayout should be used whenever the user can refresh the contents of a view via a vertical swipe gesture. The activity that instantiates this view should add an OnRefreshListener to be notified whenever the swipe to refresh gesture is completed. The SwipeRefreshLayout will notify the listener each and every time the gesture is completed again; the listener is responsible for correctly determining when to actually initiate a refresh of its content. If the listener determines there should not be a refresh, it must call setRefreshing(false) to cancel any visual indication of a refresh. If an activity wishes to show just the progress animation, it should call setRefreshing(true). To disable the gesture and progress animation, call setEnabled(false) on the view. <p> This layout should be made the parent of the view that will be refreshed as a result of the gesture and can only support one direct child. This view will also be made the target of the gesture and will be forced to match both the width and the height supplied in this layout. The SwipeRefreshLayout does not provide accessibility events; instead, a menu item must be provided to allow refresh of the content wherever this gesture is used. </p><pre><code>public class SwipeRefreshLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SwipeRefreshLayout.html
SwipeRefreshLayout.OnChildScrollUpCallback	A										<section class="prog__container"><p> Classes that wish to override <pre><code> canChildScrollUp() </code></pre> method behavior should implement this interface.</p><pre><code>public static interface SwipeRefreshLayout.OnChildScrollUpCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SwipeRefreshLayout.OnChildScrollUpCallback.html
SwipeRefreshLayout.OnRefreshListener	A										<section class="prog__container"><p> Classes that wish to be notified when the swipe gesture correctly triggers a refresh should implement this interface.</p><pre><code>public static interface SwipeRefreshLayout.OnRefreshListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SwipeRefreshLayout.OnRefreshListener.html
TextViewCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> TextView </code></pre> introduced after API level 4 in a backwards compatible fashion.</p><pre><code>public final class TextViewCompat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/TextViewCompat.html
TintableCompoundButton	A										<section class="prog__container"><p> Interface which allows a <pre><code> CompoundButton </code></pre> to receive tinting calls from <pre><code> CompoundButtonCompat </code></pre> when running on API v20 devices or lower.</p><pre><code>public interface TintableCompoundButton\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/TintableCompoundButton.html
ViewDragHelper.Callback	A										<section class="prog__container"><p> A Callback is used as a communication channel with the ViewDragHelper back to the parent view using it. <pre><code> on* </code></pre> methods are invoked on siginficant events and several accessor methods are expected to provide the ViewDragHelper with more information about the state of the parent view upon request. The callback also makes decisions governing the range and draggability of child views.</p><pre><code>public static abstract class ViewDragHelper.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/ViewDragHelper.Callback.html
ViewDragHelper	A										<section class="prog__container"><p> ViewDragHelper is a utility class for writing custom ViewGroups. It offers a number of useful operations and state tracking for allowing a user to drag and reposition views within their parent ViewGroup.</p><pre><code>public class ViewDragHelper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/ViewDragHelper.html
ActionBar	A										<section class="prog__container"><p> A primary toolbar within the activity that may display the activity title, application-level navigation affordances, and other interactive items. <p> The action bar appears at the top of an activity's window when the activity uses the AppCompat's <pre><code> AppCompat </code></pre> theme (or one of its descendant themes). You may otherwise add the action bar by calling <pre><code> requestFeature(FEATURE_SUPPORT_ACTION_BAR) </code></pre> or by declaring it in a custom theme with the <pre><code> windowActionBar </code></pre> property. </p><pre><code>public abstract class ActionBar\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBar.html
ActionBar.LayoutParams	A										<section class="prog__container"><p> Per-child layout information associated with action bar custom views.</p><pre><code>public static class ActionBar.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBar.LayoutParams.html
ActionBar.OnMenuVisibilityListener	A										<section class="prog__container"><p> Listener for receiving events when action bar menus are shown or hidden.</p><pre><code>public static interface ActionBar.OnMenuVisibilityListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBar.OnMenuVisibilityListener.html
ActionBar.OnNavigationListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface is deprecated. </strong> <br/> Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead. </p><pre><code>public static interface ActionBar.OnNavigationListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBar.OnNavigationListener.html
ActionBar.Tab	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead. </p><pre><code>public static abstract class ActionBar.Tab\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBar.Tab.html
ActionBar.TabListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface is deprecated. </strong> <br/> Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead. </p><pre><code>public static interface ActionBar.TabListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBar.TabListener.html
ActionBarActivity	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> AppCompatActivity </code></pre> instead. </p><pre><code>public class ActionBarActivity\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBarActivity.html
ActionBarDrawerToggle.Delegate	A										<section class="prog__container"><p> Returns the context of ActionBar</p><pre><code>public static interface ActionBarDrawerToggle.Delegate\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBarDrawerToggle.Delegate.html
ActionBarDrawerToggle.DelegateProvider	A										<section class="prog__container"><p> Allows an implementing Activity to return an <pre><code> ActionBarDrawerToggle.Delegate </code></pre> to use with ActionBarDrawerToggle.</p><pre><code>public static interface ActionBarDrawerToggle.DelegateProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBarDrawerToggle.DelegateProvider.html
ActionBarDrawerToggle	A										<section class="prog__container"><p> This class provides a handy way to tie together the functionality of <pre><code> DrawerLayout </code></pre> and the framework <pre><code> ActionBar </code></pre> to implement the recommended design for navigation drawers. <p> To use <pre><code> ActionBarDrawerToggle </code></pre> , create one in your Activity and call through to the following methods corresponding to your Activity callbacks: </p><pre><code>public class ActionBarDrawerToggle\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBarDrawerToggle.html
AlertDialog.Builder	A										<section class="prog__container"><p> Creates a builder for an alert dialog that uses the default alert dialog theme.</p><pre><code>public static class AlertDialog.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/AlertDialog.Builder.html
AlertDialog	A										<section class="prog__container"><p> A subclass of Dialog that can display one, two or three buttons. If you only want to display a String in this dialog box, use the setMessage() method. If you want to display a more complex view, look up the FrameLayout called "custom" and add your view to it: <pre> FrameLayout fl = (FrameLayout) findViewById(android.R.id.custom); fl.addView(myView, new LayoutParams(MATCH_PARENT, WRAP_CONTENT)); </pre> <p> The AlertDialog class takes care of automatically setting <pre><code> android.view.WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM </code></pre> for you based on whether any views in the dialog return true from <pre><code> View.onCheckIsTextEditor() </code></pre> . Generally you want this set for a Dialog without text editors, so that it will be placed on top of the current input method UI. You can modify this behavior by forcing the flag to your desired mode after calling <pre><code> onCreate(Bundle) </code></pre> . </p><pre><code>public class AlertDialog\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/AlertDialog.html
AppCompatActivity	A										<section class="prog__container"><p> Base class for activities that use the support library action bar features. <p> You can add an <pre><code> ActionBar </code></pre> to your activity when running on API level 7 or higher by extending this class for your activity and setting the activity theme to <pre><code> Theme.AppCompat </code></pre> or a similar theme. </p><pre><code>public class AppCompatActivity\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html
AppCompatCallback	A										<section class="prog__container"><p> Implemented this in order for AppCompat to be able to callback in certain situations. <p> This should be provided to <pre><code> create(android.app.Activity, AppCompatCallback) </code></pre> . </p><pre><code>public interface AppCompatCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/AppCompatCallback.html
AppCompatDelegate	A										<section class="prog__container"><p> This class represents a delegate which you can use to extend AppCompat's support to any <pre><code> Activity </code></pre> . <p> When using an <pre><code> AppCompatDelegate </code></pre> , you should call the following methods instead of the <pre><code> Activity </code></pre> method of the same name: </p><pre><code>public abstract class AppCompatDelegate\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/AppCompatDelegate.html
AppCompatDialog	A										<section class="prog__container"><p> Base class for AppCompat themed <pre><code> Dialog </code></pre> s.</p><pre><code>public class AppCompatDialog\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/AppCompatDialog.html
AppCompatDialogFragment	A										<section class="prog__container"><p> A special version of <pre><code> DialogFragment </code></pre> which uses an <pre><code> AppCompatDialog </code></pre> in place of a platform-styled dialog.</p><pre><code>public class AppCompatDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/AppCompatDialogFragment.html
MediaRouteActionProvider	A										<section class="prog__container"><p> The media route action provider displays a <pre><code> media route button </code></pre> in the application's <pre><code> ActionBar </code></pre> to allow the user to select routes and to control the currently selected route. <p> The application must specify the kinds of routes that the user should be allowed to select by specifying a <pre><code> selector </code></pre> with the <pre><code> setRouteSelector(MediaRouteSelector) </code></pre> method. </p><pre><code>public class MediaRouteActionProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/MediaRouteActionProvider.html
MediaRouteButton	A										<section class="prog__container"><p> The media route button allows the user to select routes and to control the currently selected route. <p> The application must specify the kinds of routes that the user should be allowed to select by specifying a <pre><code> selector </code></pre> with the <pre><code> setRouteSelector(MediaRouteSelector) </code></pre> method. </p><pre><code>public class MediaRouteButton\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/MediaRouteButton.html
MediaRouteChooserDialog	A										<section class="prog__container"><p> This class implements the route chooser dialog for <pre><code> MediaRouter </code></pre> . <p> This dialog allows the user to choose a route that matches a given selector. </p><pre><code>public class MediaRouteChooserDialog\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/MediaRouteChooserDialog.html
MediaRouteChooserDialogFragment	A										<section class="prog__container"><p> Media route chooser dialog fragment. <p> Creates a <pre><code> MediaRouteChooserDialog </code></pre> . The application may subclass this dialog fragment to customize the media route chooser dialog. </p><pre><code>public class MediaRouteChooserDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/MediaRouteChooserDialogFragment.html
MediaRouteControllerDialog	A										<section class="prog__container"><p> This class implements the route controller dialog for <pre><code> MediaRouter </code></pre> . <p> This dialog allows the user to control or disconnect from the currently selected route. </p><pre><code>public class MediaRouteControllerDialog\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/MediaRouteControllerDialog.html
MediaRouteControllerDialogFragment	A										<section class="prog__container"><p> Media route controller dialog fragment. <p> Creates a <pre><code> MediaRouteControllerDialog </code></pre> . The application may subclass this dialog fragment to customize the media route controller dialog. </p><pre><code>public class MediaRouteControllerDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/MediaRouteControllerDialogFragment.html
MediaRouteDialogFactory	A										<section class="prog__container"><p> The media route dialog factory is responsible for creating the media route chooser and controller dialogs as needed. <p> The application can customize the dialogs by providing a subclass of the dialog factory to the <pre><code> MediaRouteButton </code></pre> using the <pre><code> setDialogFactory </code></pre> method. </p><pre><code>public class MediaRouteDialogFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/MediaRouteDialogFactory.html
MediaRouteDiscoveryFragment	A										<section class="prog__container"><p> Media route discovery fragment. <p> This fragment takes care of registering a callback for media route discovery during the <pre><code> onStart() </code></pre> phase and removing it during the <pre><code> onStop() </code></pre> phase. </p><pre><code>public class MediaRouteDiscoveryFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/MediaRouteDiscoveryFragment.html
NotificationCompat.Builder	A										<section class="prog__container"><p> See <pre><code> NotificationCompat </code></pre> . In addition to the builder in v4, this builder also supports <pre><code> NotificationCompat.MediaStyle </code></pre> .</p><pre><code>public static class NotificationCompat.Builder\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/NotificationCompat.Builder.html
NotificationCompat.DecoratedCustomViewStyle	A										<section class="prog__container"><p> Notification style for custom views that are decorated by the system. <p> Instead of providing a notification that is completely custom, a developer can set this style and still obtain system decorations like the notification header with the expand affordance and actions. <p> Use <pre><code> setCustomContentView(RemoteViews) </code></pre> , <pre><code> setCustomBigContentView(RemoteViews) </code></pre> and <pre><code> setCustomHeadsUpContentView(RemoteViews) </code></pre> to set the corresponding custom views to display. <p> To use this style with your Notification, feed it to <pre><code> setStyle(Style) </code></pre> like so: <pre class="prettyprint"> Notification noti = new NotificationCompat.Builder() .setSmallIcon(R.drawable.ic_stat_player) .setLargeIcon(albumArtBitmap)) .setCustomContentView(contentView); .setStyle(<b>new NotificationCompat.DecoratedCustomViewStyle()</b>) .build(); </pre> <p> If you are using this style, consider using the corresponding styles like <pre><code> TextAppearance_AppCompat_Notification </code></pre> or <pre><code> TextAppearance_AppCompat_Notification_Title </code></pre> in your custom views in order to get the correct styling on each platform version. </p><pre><code>public static class NotificationCompat.DecoratedCustomViewStyle\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/NotificationCompat.DecoratedCustomViewStyle.html
NotificationCompat.DecoratedMediaCustomViewStyle	A										<section class="prog__container"><p> Notification style for media custom views that are decorated by the system. <p> Instead of providing a media notification that is completely custom, a developer can set this style and still obtain system decorations like the notification header with the expand affordance and actions. <p> Use <pre><code> setCustomContentView(RemoteViews) </code></pre> , <pre><code> setCustomBigContentView(RemoteViews) </code></pre> and <pre><code> setCustomHeadsUpContentView(RemoteViews) </code></pre> to set the corresponding custom views to display. <p> To use this style with your Notification, feed it to <pre><code> setStyle(Style) </code></pre> like so: <pre class="prettyprint"> Notification noti = new Notification.Builder() .setSmallIcon(R.drawable.ic_stat_player) .setLargeIcon(albumArtBitmap)) .setCustomContentView(contentView); .setStyle(<b>new NotificationCompat.DecoratedMediaCustomViewStyle()</b> .setMediaSession(mySession)) .build(); </pre> <p> If you are using this style, consider using the corresponding styles like <pre><code> TextAppearance_AppCompat_Notification_Media </code></pre> or <pre><code> TextAppearance_AppCompat_Notification_Title_Media </code></pre> in your custom views in order to get the correct styling on each platform version. </p><pre><code>public static class NotificationCompat.DecoratedMediaCustomViewStyle\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/NotificationCompat.DecoratedMediaCustomViewStyle.html
NotificationCompat	A										<section class="prog__container"><p> An extension of <pre><code> NotificationCompat </code></pre> which supports <pre><code> NotificationCompat.MediaStyle </code></pre> , <pre><code> NotificationCompat.DecoratedCustomViewStyle </code></pre> , and <pre><code> NotificationCompat.DecoratedMediaCustomViewStyle </code></pre> . You should start using this variant if you need support any of these styles.</p><pre><code>public class NotificationCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/NotificationCompat.html
NotificationCompat.MediaStyle	A										<section class="prog__container"><p> Notification style for media playback notifications. In the expanded form, <pre><code> bigContentView </code></pre> , up to 5 <pre><code> NotificationCompat.Action </code></pre> s specified with <pre><code> addAction </code></pre> will be shown as icon-only pushbuttons, suitable for transport controls. The Bitmap given to <pre><code> setLargeIcon() </code></pre> will be treated as album artwork. Unlike the other styles provided here, MediaStyle can also modify the standard-size <pre><code> contentView </code></pre> ; by providing action indices to <pre><code> setShowActionsInCompactView(int) </code></pre> you can promote up to 3 actions to be displayed in the standard view alongside the usual content. Notifications created with MediaStyle will have their category set to <pre><code> CATEGORY_TRANSPORT </code></pre> unless you set a different category using <pre><code> setCategory() </code></pre> . Finally, if you attach a <pre><code> MediaSession.Token </code></pre> using <pre><code> setMediaSession(MediaSessionCompat.Token) </code></pre> , the System UI can identify this as a notification representing an active media session and respond accordingly (by showing album artwork in the lockscreen, for example). To use this style with your Notification, feed it to <pre><code> setStyle(NotificationCompat.Style) </code></pre> like so: <pre class="prettyprint"> Notification noti = new NotificationCompat.Builder() .setSmallIcon(R.drawable.ic_stat_player) .setContentTitle("Track title") .setContentText("Artist - Album") .setLargeIcon(albumArtBitmap)) .setStyle(<b>new NotificationCompat.MediaStyle()</b> .setMediaSession(mySession)) .build(); </pre></p><pre><code>public static class NotificationCompat.MediaStyle\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/NotificationCompat.MediaStyle.html
android.support.v7.app	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/app/package-summary.html
android.support.v7.appcompat	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/appcompat/package-summary.html
R.anim	A										<section class="prog__container"><pre><code>public static final class R.anim\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.anim.html
R.attr	A										<section class="prog__container"><p> Custom divider drawable to use for elements in the action bar.</p><pre><code>public static final class R.attr\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html
R.bool	A										<section class="prog__container"><pre><code>public static final class R.bool\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.bool.html
R.color	A										<section class="prog__container"><pre><code>public static final class R.color\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.color.html
R.dimen	A										<section class="prog__container"><p> Default content inset of an action bar.</p><pre><code>public static final class R.dimen\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.dimen.html
R.drawable	A										<section class="prog__container"><pre><code>public static final class R.drawable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.drawable.html
R	A										<section class="prog__container"><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.html
R.id	A										<section class="prog__container"><pre><code>public static final class R.id\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.id.html
R.integer	A										<section class="prog__container"><pre><code>public static final class R.integer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.integer.html
R.layout	A										<section class="prog__container"><pre><code>public static final class R.layout\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.layout.html
R.string	A										<section class="prog__container"><p> Content description for the action bar "home" affordance.</p><pre><code>public static final class R.string\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.string.html
R.style	A										<section class="prog__container"><pre><code>public static final class R.style\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.style.html
R.styleable	A										<section class="prog__container"><p> Attributes used to style the Action Bar.</p><pre><code>public static final class R.styleable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.styleable.html
android.support.v7.cardview	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/cardview/package-summary.html
R.attr	A										<section class="prog__container"><p> Background color for CardView.</p><pre><code>public static final class R.attr\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/cardview/R.attr.html
R.color	A										<section class="prog__container"><p> Background color for dark CardView.</p><pre><code>public static final class R.color\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/cardview/R.color.html
R.dimen	A										<section class="prog__container"><p> Inset shadow for RoundRectDrawableWithShadow.</p><pre><code>public static final class R.dimen\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/cardview/R.dimen.html
R	A										<section class="prog__container"><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/cardview/R.html
R.style	A										<section class="prog__container"><pre><code>public static final class R.style\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/cardview/R.style.html
R.styleable	A										<section class="prog__container"><p> Attributes that can be used with a CardView.</p><pre><code>public static final class R.styleable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/cardview/R.styleable.html
AppCompatResources	A										<section class="prog__container"><p> Class for accessing an application's resources through AppCompat, and thus any backward compatible functionality.</p><pre><code>public final class AppCompatResources\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/content/res/AppCompatResources.html
android.support.v7.content.res	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/content/res/package-summary.html
android.support.v7.graphics	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/graphics/package-summary.html
Palette.Builder	A										<section class="prog__container"><p> Builder class for generating <pre><code> Palette </code></pre> instances.</p><pre><code>public static final class Palette.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/graphics/Palette.Builder.html
Palette.Filter	A										<section class="prog__container"><p> A Filter provides a mechanism for exercising fine-grained control over which colors are valid within a resulting <pre><code> Palette </code></pre> .</p><pre><code>public static interface Palette.Filter\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/graphics/Palette.Filter.html
Palette	A										<section class="prog__container"><p> A helper class to extract prominent colors from an image. <p> A number of colors with different profiles are extracted from the image: <ul> <li> Vibrant </li> <li> Vibrant Dark </li> <li> Vibrant Light </li> <li> Muted </li> <li> Muted Dark </li> <li> Muted Light </li> </ul> These can be retrieved from the appropriate getter method. <p> Instances are created with a <pre><code> Palette.Builder </code></pre> which supports several options to tweak the generated Palette. See that class' documentation for more information. <p> Generation should always be completed on a background thread, ideally the one in which you load your image on. <pre><code> Palette.Builder </code></pre> supports both synchronous and asynchronous generation: <pre> // Synchronous Palette p = Palette.from(bitmap).generate(); // Asynchronous Palette.from(bitmap).generate(new PaletteAsyncListener() { public void onGenerated(Palette p) { // Use generated instance } }); </pre> </p><pre><code>public final class Palette\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/graphics/Palette.html
Palette.PaletteAsyncListener	A										<section class="prog__container"><p> Listener to be used with <pre><code> generateAsync(Bitmap, PaletteAsyncListener) </code></pre> or <pre><code> generateAsync(Bitmap, int, PaletteAsyncListener) </code></pre></p><pre><code>public static interface Palette.PaletteAsyncListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/graphics/Palette.PaletteAsyncListener.html
Palette.Swatch	A										<section class="prog__container"><p> Represents a color swatch generated from an image's palette. The RGB color can be retrieved by calling <pre><code> getRgb() </code></pre> .</p><pre><code>public static final class Palette.Swatch\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/graphics/Palette.Swatch.html
Target.Builder	A										<section class="prog__container"><p> Builder class for generating custom <pre><code> Target </code></pre> instances.</p><pre><code>public static final class Target.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/graphics/Target.Builder.html
Target	A										<section class="prog__container"><p> A class which allows custom selection of colors in a <pre><code> Palette </code></pre> 's generation. Instances can be created via the <pre><code> Target.Builder </code></pre> class. <p> To use the target, use the <pre><code> addTarget(Target) </code></pre> API when building a Palette. </p><pre><code>public final class Target\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/graphics/Target.html
DrawerArrowDrawable	A										<section class="prog__container"><p> A drawable that can draw a "Drawer hamburger" menu or an arrow and animate between them. <p> The progress between the two states is controlled via <pre><code> setProgress(float) </code></pre> . </p><pre><code>public class DrawerArrowDrawable\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/graphics/drawable/DrawerArrowDrawable.html
android.support.v7.graphics.drawable	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/graphics/drawable/package-summary.html
android.support.v7.gridlayout	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/gridlayout/package-summary.html
R.attr	A										<section class="prog__container"><p> When set to alignMargins, causes alignment to take place between the outer boundary of a view, as defined by its margins.</p><pre><code>public static final class R.attr\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/gridlayout/R.attr.html
R.dimen	A										<section class="prog__container"><p> The default gap between components in a layout.</p><pre><code>public static final class R.dimen\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/gridlayout/R.dimen.html
R	A										<section class="prog__container"><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/gridlayout/R.html
R.id	A										<section class="prog__container"><pre><code>public static final class R.id\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/gridlayout/R.id.html
R.styleable	A										<section class="prog__container"><p> Attributes that can be used with a GridLayout.</p><pre><code>public static final class R.styleable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/gridlayout/R.styleable.html
MediaControlIntent	A										<section class="prog__container"><p> Constants for media control intents. <p> This class declares a set of standard media control intent categories and actions that applications can use to identify the capabilities of media routes and control them. </p><pre><code>public final class MediaControlIntent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaControlIntent.html
MediaItemMetadata	A										<section class="prog__container"><p> Constants for specifying metadata about a media item as a <pre><code> Bundle </code></pre> . <p> This class is part of the remote playback protocol described by the <pre><code> MediaControlIntent </code></pre> class. </p><pre><code>public final class MediaItemMetadata\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaItemMetadata.html
MediaItemStatus.Builder	A										<section class="prog__container"><p> Builder for <pre><code> media item status objects </code></pre> .</p><pre><code>public static final class MediaItemStatus.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaItemStatus.Builder.html
MediaItemStatus	A										<section class="prog__container"><p> Describes the playback status of a media item. <p> This class is part of the remote playback protocol described by the <pre><code> MediaControlIntent </code></pre> class. </p><pre><code>public final class MediaItemStatus\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaItemStatus.html
MediaRouteDescriptor.Builder	A										<section class="prog__container"><p> Builder for <pre><code> media route descriptors </code></pre> .</p><pre><code>public static final class MediaRouteDescriptor.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteDescriptor.Builder.html
MediaRouteDescriptor	A										<section class="prog__container"><p> Describes the properties of a route. <p> Each route is uniquely identified by an opaque id string. This token may take any form as long as it is unique within the media route provider. </p><pre><code>public final class MediaRouteDescriptor\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteDescriptor.html
MediaRouteDiscoveryRequest	A										<section class="prog__container"><p> Describes the kinds of routes that the media router would like to discover and whether to perform active scanning. <p> This object is immutable once created. </p><pre><code>public final class MediaRouteDiscoveryRequest\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteDiscoveryRequest.html
MediaRouteProvider.Callback	A										<section class="prog__container"><p> Callback which is invoked when route information becomes available or changes.</p><pre><code>public static abstract class MediaRouteProvider.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteProvider.Callback.html
MediaRouteProvider	A										<section class="prog__container"><p> Media route providers are used to publish additional media routes for use within an application. Media route providers may also be declared as a service to publish additional media routes to all applications in the system. <p> The purpose of a media route provider is to discover media routes that satisfy the criteria specified by the current <pre><code> MediaRouteDiscoveryRequest </code></pre> and publish a <pre><code> MediaRouteProviderDescriptor </code></pre> with information about each route by calling <pre><code> setDescriptor(MediaRouteProviderDescriptor) </code></pre> to notify the currently registered <pre><code> MediaRouteProvider.Callback </code></pre> . </p><pre><code>public abstract class MediaRouteProvider\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteProvider.html
MediaRouteProvider.ProviderMetadata	A										<section class="prog__container"><p> Describes properties of the route provider's implementation. <p> This object is immutable once created. </p><pre><code>public static final class MediaRouteProvider.ProviderMetadata\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteProvider.ProviderMetadata.html
MediaRouteProvider.RouteController	A										<section class="prog__container"><p> Provides control over a particular route. <p> The media router obtains a route controller for a route whenever it needs to control a route. When a route is selected, the media router invokes the <pre><code> onSelect() </code></pre> method of its route controller. While selected, the media router may call other methods of the route controller to request that it perform certain actions to the route. When a route is unselected, the media router invokes the <pre><code> onUnselect() </code></pre> method of its route controller. When the media route no longer needs the route controller it will invoke the <pre><code> onRelease() </code></pre> method to allow the route controller to free its resources. </p><pre><code>public static abstract class MediaRouteProvider.RouteController\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteProvider.RouteController.html
MediaRouteProviderDescriptor.Builder	A										<section class="prog__container"><p> Builder for <pre><code> media route provider descriptors </code></pre> .</p><pre><code>public static final class MediaRouteProviderDescriptor.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteProviderDescriptor.Builder.html
MediaRouteProviderDescriptor	A										<section class="prog__container"><p> Describes the state of a media route provider and the routes that it publishes. <p> This object is immutable once created using a <pre><code> MediaRouteProviderDescriptor.Builder </code></pre> instance. </p><pre><code>public final class MediaRouteProviderDescriptor\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteProviderDescriptor.html
MediaRouteProviderService	A										<section class="prog__container"><p> Base class for media route provider services. <p> A media router will bind to media route provider services when a callback is added via <pre><code> addCallback(MediaRouteSelector, MediaRouter.Callback, int) </code></pre> with a discovery flag: <pre><code> CALLBACK_FLAG_REQUEST_DISCOVERY </code></pre> , <pre><code> CALLBACK_FLAG_FORCE_DISCOVERY </code></pre> , or <pre><code> CALLBACK_FLAG_PERFORM_ACTIVE_SCAN </code></pre> , and will unbind when the callback is removed via <pre><code> removeCallback(MediaRouter.Callback) </code></pre> . </p><pre><code>public abstract class MediaRouteProviderService\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteProviderService.html
MediaRouter.Callback	A										<section class="prog__container"><p> Interface for receiving events about media routing changes. All methods of this interface will be called from the application's main thread. <p> A Callback will only receive events relevant to routes that the callback was registered for unless the <pre><code> CALLBACK_FLAG_UNFILTERED_EVENTS </code></pre> flag was specified in <pre><code> addCallback(MediaRouteSelector, Callback, int) </code></pre> . </p><pre><code>public static abstract class MediaRouter.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouter.Callback.html
MediaRouter.ControlRequestCallback	A										<section class="prog__container"><p> Callback which is invoked with the result of a media control request.</p><pre><code>public static abstract class MediaRouter.ControlRequestCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouter.ControlRequestCallback.html
MediaRouter	A										<section class="prog__container"><p> MediaRouter allows applications to control the routing of media channels and streams from the current device to external speakers and destination devices. <p> A MediaRouter instance is retrieved through <pre><code> getInstance(Context) </code></pre> . Applications can query the media router about the currently selected route and its capabilities to determine how to send content to the route's destination. Applications can also <pre><code> send control requests </code></pre> to the route to ask the route's destination to perform certain remote control functions such as playing media. </p><pre><code>public final class MediaRouter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouter.html
MediaRouter.ProviderInfo	A										<section class="prog__container"><p> Provides information about a media route provider. <p> This object may be used to determine which media route provider has published a particular route. </p><pre><code>public static final class MediaRouter.ProviderInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouter.ProviderInfo.html
MediaRouter.RouteInfo	A										<section class="prog__container"><p> Provides information about a media route. <p> Each media route has a list of <pre><code> media control </code></pre> <pre><code> intent filters </code></pre> that describe the capabilities of the route and the manner in which it is used and controlled. </p><pre><code>public static class MediaRouter.RouteInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouter.RouteInfo.html
MediaRouteSelector.Builder	A										<section class="prog__container"><p> Builder for <pre><code> media route selectors </code></pre> .</p><pre><code>public static final class MediaRouteSelector.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteSelector.Builder.html
MediaRouteSelector	A										<section class="prog__container"><p> Describes the capabilities of routes that applications would like to discover and use. <p> This object is immutable once created using a <pre><code> MediaRouteSelector.Builder </code></pre> instance. </p><pre><code>public final class MediaRouteSelector\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteSelector.html
MediaSessionStatus.Builder	A										<section class="prog__container"><p> Builder for <pre><code> media session status objects </code></pre> .</p><pre><code>public static final class MediaSessionStatus.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaSessionStatus.Builder.html
MediaSessionStatus	A										<section class="prog__container"><p> Describes the playback status of a media session. <p> This class is part of the remote playback protocol described by the <pre><code> MediaControlIntent </code></pre> class. </p><pre><code>public final class MediaSessionStatus\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaSessionStatus.html
android.support.v7.media	A										<section class="prog__container">Contains APIs that control the routing of media channels and streams from the current device to external speakers and destination devices.</section>	https://developer.android.com/reference/android/support/v7/media/package-summary.html
RemotePlaybackClient.ActionCallback	A										<section class="prog__container"><p> Base callback type for remote playback requests.</p><pre><code>public static abstract class RemotePlaybackClient.ActionCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/RemotePlaybackClient.ActionCallback.html
RemotePlaybackClient	A										<section class="prog__container"><p> A helper class for playing media on remote routes using the remote playback protocol defined by <pre><code> MediaControlIntent </code></pre> . <p> The client maintains session state and offers a simplified interface for issuing remote playback media control intents to a single route. </p><pre><code>public class RemotePlaybackClient\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/RemotePlaybackClient.html
RemotePlaybackClient.ItemActionCallback	A										<section class="prog__container"><p> Callback for remote playback requests that operate on items.</p><pre><code>public static abstract class RemotePlaybackClient.ItemActionCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/RemotePlaybackClient.ItemActionCallback.html
RemotePlaybackClient.OnMessageReceivedListener	A										<section class="prog__container"><p> A callback that will receive messages from media sessions.</p><pre><code>public static interface RemotePlaybackClient.OnMessageReceivedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/RemotePlaybackClient.OnMessageReceivedListener.html
RemotePlaybackClient.SessionActionCallback	A										<section class="prog__container"><p> Callback for remote playback requests that operate on sessions.</p><pre><code>public static abstract class RemotePlaybackClient.SessionActionCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/RemotePlaybackClient.SessionActionCallback.html
RemotePlaybackClient.StatusCallback	A										<section class="prog__container"><p> A callback that will receive media status updates.</p><pre><code>public static abstract class RemotePlaybackClient.StatusCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/RemotePlaybackClient.StatusCallback.html
android.support.v7.mediarouter	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/mediarouter/package-summary.html
R.attr	A										<section class="prog__container"><p> Tint to apply to the media route button <p> May be a reference to another resource, in the form " <pre><code> @[+][ <i> package </i> :] <i> type </i> / <i> name </i> </code></pre> " or a theme attribute in the form " <pre><code> ?[ <i> package </i> :] <i> type </i> / <i> name </i> </code></pre> ". </p><pre><code>public static final class R.attr\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.attr.html
R.dimen	A										<section class="prog__container"><p> Height of volume group item.</p><pre><code>public static final class R.dimen\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.dimen.html
R.drawable	A										<section class="prog__container"><pre><code>public static final class R.drawable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.drawable.html
R	A										<section class="prog__container"><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.html
R.id	A										<section class="prog__container"><pre><code>public static final class R.id\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.id.html
R.integer	A										<section class="prog__container"><p> Group list expand/collapse animation duration.</p><pre><code>public static final class R.integer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.integer.html
R.interpolator	A										<section class="prog__container"><pre><code>public static final class R.interpolator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.interpolator.html
R.layout	A										<section class="prog__container"><pre><code>public static final class R.layout\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.layout.html
R.string	A										<section class="prog__container"><p> String to be shown as a tooltip of MediaRouteButton Cast is the standard android verb for sending content to a remote device.</p><pre><code>public static final class R.string\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.string.html
R.style	A										<section class="prog__container"><pre><code>public static final class R.style\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.style.html
R.styleable	A										<section class="prog__container"><p> Attributes that can be used with a MediaRouteButton.</p><pre><code>public static final class R.styleable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.styleable.html
android.support.v7.palette	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/palette/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/palette/R.html
CheckBoxPreference	A										<section class="prog__container"><p> A <pre><code> Preference </code></pre> that provides checkbox widget functionality. <p> This preference will store a boolean into the SharedPreferences. </p><pre><code>public class CheckBoxPreference\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/CheckBoxPreference.html
DialogPreference	A										<section class="prog__container"><p> A base class for <pre><code> Preference </code></pre> objects that are dialog-based. These preferences will, when clicked, open a dialog showing the actual preference controls.</p><pre><code>public abstract class DialogPreference\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/DialogPreference.html
DialogPreference.TargetFragment	A										<section class="prog__container"><pre><code>public static interface DialogPreference.TargetFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/DialogPreference.TargetFragment.html
DropDownPreference	A										<section class="prog__container"><p> A version of <pre><code> ListPreference </code></pre> that presents the options in a drop down menu rather than a dialog.</p><pre><code>public class DropDownPreference\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/DropDownPreference.html
EditTextPreference	A										<section class="prog__container"><p> A <pre><code> Preference </code></pre> that allows for string input. <p> It is a subclass of <pre><code> DialogPreference </code></pre> and shows the <pre><code> EditText </code></pre> in a dialog. <p> This preference will store a string into the SharedPreferences. </p><pre><code>public class EditTextPreference\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/EditTextPreference.html
EditTextPreferenceDialogFragmentCompat	A										<section class="prog__container"><pre><code>public class EditTextPreferenceDialogFragmentCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/EditTextPreferenceDialogFragmentCompat.html
ListPreference	A										<section class="prog__container"><p> A <pre><code> Preference </code></pre> that displays a list of entries as a dialog. <p> This preference will store a string into the SharedPreferences. This string will be the value from the <pre><code> setEntryValues(CharSequence[]) </code></pre> array. </p><pre><code>public class ListPreference\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/ListPreference.html
ListPreferenceDialogFragmentCompat	A										<section class="prog__container"><pre><code>public class ListPreferenceDialogFragmentCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/ListPreferenceDialogFragmentCompat.html
MultiSelectListPreferenceDialogFragmentCompat	A										<section class="prog__container"><pre><code>public class MultiSelectListPreferenceDialogFragmentCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/MultiSelectListPreferenceDialogFragmentCompat.html
android.support.v7.preference	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/preference/package-summary.html
Preference.BaseSavedState	A										<section class="prog__container"><p> A base class for managing the instance state of a <pre><code> Preference </code></pre> .</p><pre><code>public static class Preference.BaseSavedState\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/Preference.BaseSavedState.html
Preference	A										<section class="prog__container"><p> Represents the basic Preference UI building block displayed by a <pre><code> PreferenceFragmentCompat </code></pre> in the form of a <pre><code> RecyclerView </code></pre> . This class provides data for the <pre><code> View </code></pre> to be displayed in the list and associates with a <pre><code> SharedPreferences </code></pre> to store/retrieve the preference data. <p> When specifying a preference hierarchy in XML, each element can point to a subclass of <pre><code> Preference </code></pre> , similar to the view hierarchy and layouts. <p> This class contains a <pre><code> key </code></pre> that will be used as the key into the <pre><code> SharedPreferences </code></pre> . It is up to the subclass to decide how to store the value. </p><pre><code>public class Preference\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/Preference.html
Preference.OnPreferenceChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the value of this <pre><code> Preference </code></pre> has been changed by the user and is about to be set and/or persisted. This gives the client a chance to prevent setting and/or persisting the value.</p><pre><code>public static interface Preference.OnPreferenceChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/Preference.OnPreferenceChangeListener.html
Preference.OnPreferenceClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a <pre><code> Preference </code></pre> is clicked.</p><pre><code>public static interface Preference.OnPreferenceClickListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/Preference.OnPreferenceClickListener.html
PreferenceCategory	A										<section class="prog__container"><p> Used to group <pre><code> Preference </code></pre> objects and provide a disabled title above the group. </p><pre><code>public class PreferenceCategory\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceCategory.html
PreferenceDialogFragmentCompat	A										<section class="prog__container"><p> Abstract base class which presents a dialog associated with a <pre><code> DialogPreference </code></pre> . Since the preference object may not be available during fragment re-creation, the necessary information for displaying the dialog is read once during the initial call to <pre><code> onCreate(Bundle) </code></pre> and saved/restored in the saved instance state. Custom subclasses should also follow this pattern.</p><pre><code>public abstract class PreferenceDialogFragmentCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceDialogFragmentCompat.html
PreferenceFragmentCompat	A										<section class="prog__container"><p> Shows a hierarchy of <pre><code> Preference </code></pre> objects as lists. These preferences will automatically save to <pre><code> SharedPreferences </code></pre> as the user interacts with them. To retrieve an instance of <pre><code> SharedPreferences </code></pre> that the preference hierarchy in this fragment will use, call <pre><code> getDefaultSharedPreferences(android.content.Context) </code></pre> with a context in the same package as this fragment. <p> Furthermore, the preferences shown will follow the visual style of system preferences. It is easy to create a hierarchy of preferences (that can be shown on multiple screens) via XML. For these reasons, it is recommended to use this fragment (as a superclass) to deal with preferences in applications. <p> A <pre><code> PreferenceScreen </code></pre> object should be at the top of the preference hierarchy. Furthermore, subsequent <pre><code> PreferenceScreen </code></pre> in the hierarchy denote a screen break--that is the preferences contained within subsequent <pre><code> PreferenceScreen </code></pre> should be shown on another screen. The preference framework handles this by calling <pre><code> onNavigateToScreen(PreferenceScreen) </code></pre> . <p> The preference hierarchy can be formed in multiple ways: <li> From an XML file specifying the hierarchy <li> From different <pre><code> Activities </code></pre> that each specify its own preferences in an XML file via <pre><code> Activity </code></pre> meta-data <li> From an object hierarchy rooted with <pre><code> PreferenceScreen </code></pre> <p> To inflate from XML, use the <pre><code> addPreferencesFromResource(int) </code></pre> . The root element should be a <pre><code> PreferenceScreen </code></pre> . Subsequent elements can point to actual <pre><code> Preference </code></pre> subclasses. As mentioned above, subsequent <pre><code> PreferenceScreen </code></pre> in the hierarchy will result in the screen break. <p> To specify an object hierarchy rooted with <pre><code> PreferenceScreen </code></pre> , use <pre><code> setPreferenceScreen(PreferenceScreen) </code></pre> . <p> As a convenience, this fragment implements a click listener for any preference in the current hierarchy, see <pre><code> onPreferenceTreeClick(Preference) </code></pre> . </p><pre><code>public abstract class PreferenceFragmentCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceFragmentCompat.html
PreferenceFragmentCompat.OnPreferenceDisplayDialogCallback	A										<section class="prog__container"><pre><code>public static interface PreferenceFragmentCompat.OnPreferenceDisplayDialogCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceFragmentCompat.OnPreferenceDisplayDialogCallback.html
PreferenceFragmentCompat.OnPreferenceStartFragmentCallback	A										<section class="prog__container"><p> Interface that PreferenceFragment's containing activity should implement to be able to process preference items that wish to switch to a specified fragment.</p><pre><code>public static interface PreferenceFragmentCompat.OnPreferenceStartFragmentCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceFragmentCompat.OnPreferenceStartFragmentCallback.html
PreferenceFragmentCompat.OnPreferenceStartScreenCallback	A										<section class="prog__container"><p> Interface that PreferenceFragment's containing activity should implement to be able to process preference items that wish to switch to a new screen of preferences.</p><pre><code>public static interface PreferenceFragmentCompat.OnPreferenceStartScreenCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceFragmentCompat.OnPreferenceStartScreenCallback.html
PreferenceGroup	A										<section class="prog__container"><p> A container for multiple <pre><code> Preference </code></pre> objects. It is a base class for Preference objects that are parents, such as <pre><code> PreferenceCategory </code></pre> and <pre><code> PreferenceScreen </code></pre> . </p><pre><code>public abstract class PreferenceGroup\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceGroup.html
PreferenceGroup.PreferencePositionCallback	A										<section class="prog__container"><p> Interface for PreferenceGroup Adapters to implement so that <pre><code> scrollToPreference(String) </code></pre> and <pre><code> scrollToPreference(Preference) </code></pre> or <pre><code> scrollToPreference(String) </code></pre> and <pre><code> scrollToPreference(Preference) </code></pre> can determine the correct scroll position to request.</p><pre><code>public static interface PreferenceGroup.PreferencePositionCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceGroup.PreferencePositionCallback.html
PreferenceManager	A										<section class="prog__container"><p> Used to help create <pre><code> Preference </code></pre> hierarchies from activities or XML. <p> In most cases, clients should use <pre><code> addPreferencesFromResource(int) </code></pre> , or <pre><code> addPreferencesFromResource(int) </code></pre> . </p><pre><code>public class PreferenceManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceManager.html
PreferenceManager.OnDisplayPreferenceDialogListener	A										<section class="prog__container"><p> Interface definition for a class that will be called when a <pre><code> Preference </code></pre> requests to display a dialog.</p><pre><code>public static interface PreferenceManager.OnDisplayPreferenceDialogListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceManager.OnDisplayPreferenceDialogListener.html
PreferenceManager.OnNavigateToScreenListener	A										<section class="prog__container"><p> Interface definition for a class that will be called when a <pre><code> PreferenceScreen </code></pre> requests navigation.</p><pre><code>public static interface PreferenceManager.OnNavigateToScreenListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceManager.OnNavigateToScreenListener.html
PreferenceManager.OnPreferenceTreeClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a <pre><code> Preference </code></pre> in the hierarchy rooted at this <pre><code> PreferenceScreen </code></pre> is clicked.</p><pre><code>public static interface PreferenceManager.OnPreferenceTreeClickListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceManager.OnPreferenceTreeClickListener.html
PreferenceManager.PreferenceComparisonCallback	A										<section class="prog__container"><p> Callback class to be used by the <pre><code> RecyclerView.Adapter </code></pre> associated with the <pre><code> PreferenceScreen </code></pre> , used to determine when two <pre><code> Preference </code></pre> objects are semantically and visually the same.</p><pre><code>public static abstract class PreferenceManager.PreferenceComparisonCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceManager.PreferenceComparisonCallback.html
PreferenceManager.SimplePreferenceComparisonCallback	A										<section class="prog__container"><p> A basic implementation of <pre><code> PreferenceManager.PreferenceComparisonCallback </code></pre> suitable for use with the default <pre><code> Preference </code></pre> classes. If the <pre><code> PreferenceScreen </code></pre> contains custom <pre><code> Preference </code></pre> subclasses, you must override <pre><code> arePreferenceContentsTheSame(Preference, Preference) </code></pre></p><pre><code>public static class PreferenceManager.SimplePreferenceComparisonCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceManager.SimplePreferenceComparisonCallback.html
PreferenceScreen	A										<section class="prog__container"><p> Represents a top-level <pre><code> Preference </code></pre> that is the root of a Preference hierarchy. A <pre><code> PreferenceFragmentCompat </code></pre> points to an instance of this class to show the preferences. To instantiate this class, use <pre><code> createPreferenceScreen(android.content.Context) </code></pre> . <ul> This class can appear in two places: <li> When a <pre><code> PreferenceFragmentCompat </code></pre> points to this, it is used as the root and is not shown (only the contained preferences are shown). <li> When it appears inside another preference hierarchy, it is shown and serves as the gateway to another screen of preferences (either by showing another screen of preferences as a <pre><code> Dialog </code></pre> or via a <pre><code> startActivity(android.content.Intent) </code></pre> from the <pre><code> getIntent() </code></pre> ). The children of this <pre><code> PreferenceScreen </code></pre> are NOT shown in the screen that this <pre><code> PreferenceScreen </code></pre> is shown in. Instead, a separate screen will be shown when this preference is clicked. </li> </li> </ul> <p> Here's an example XML layout of a PreferenceScreen: </p><pre><code>public final class PreferenceScreen\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html
PreferenceViewHolder	A										<section class="prog__container"><p> A <pre><code> RecyclerView.ViewHolder </code></pre> class which caches views associated with the default <pre><code> Preference </code></pre> layouts. Cached views can be retrieved by calling <pre><code> findViewById(int) </code></pre> .</p><pre><code>public class PreferenceViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceViewHolder.html
R.attr	A										<section class="prog__container"><p> Attribute indicating whether the slider within this preference can be adjusted, that is pressing left/right keys when this preference is focused will move the slider accordingly (e.g.</p><pre><code>public static final class R.attr\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/R.attr.html
R.dimen	A										<section class="prog__container"><p> Minimum space to allocate to the left of a preference item for an icon.</p><pre><code>public static final class R.dimen\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/R.dimen.html
R	A										<section class="prog__container"><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/R.html
R.id	A										<section class="prog__container"><pre><code>public static final class R.id\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/R.id.html
R.layout	A										<section class="prog__container"><pre><code>public static final class R.layout\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/R.layout.html
R.string	A										<section class="prog__container"><pre><code>public static final class R.string\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/R.string.html
R.style	A										<section class="prog__container"><pre><code>public static final class R.style\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/R.style.html
R.styleable	A										<section class="prog__container"><p> Used to access some android attrs <p> Includes the following attributes: </p><pre><code>public static final class R.styleable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/R.styleable.html
SeekBarPreference	A										<section class="prog__container"><p> Preference based on android.preference.SeekBarPreference but uses support v7 preference as base. It contains a title and a seekbar and an optional seekbar value TextView. The actual preference layout is customizable by setting <pre><code> android:layout </code></pre> on the preference widget layout or <pre><code> seekBarPreferenceStyle </code></pre> attribute. The seekbar within the preference can be defined adjustable or not by setting <pre><code> adjustable </code></pre> attribute. If adjustable, the preference will be responsive to DPAD left/right keys. Otherwise, it skips those keys. The seekbar value view can be shown or disabled by setting <pre><code> showSeekBarValue </code></pre> attribute to true or false, respectively. Other SeekBar specific attributes (e.g. <pre><code> title, summary, defaultValue, min, max </code></pre> ) can be set directly on the preference widget layout.</p><pre><code>public class SeekBarPreference\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/SeekBarPreference.html
SwitchPreferenceCompat	A										<section class="prog__container"><p> A <pre><code> Preference </code></pre> that provides a two-state toggleable option. <p> This preference will store a boolean into the SharedPreferences. </p><pre><code>public class SwitchPreferenceCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/SwitchPreferenceCompat.html
TwoStatePreference	A										<section class="prog__container"><p> Common base class for preferences that have two selectable states, persist a boolean value in SharedPreferences, and may have dependent preferences that are enabled/disabled based on the current state.</p><pre><code>public abstract class TwoStatePreference\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/TwoStatePreference.html
android.support.v7.recyclerview	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/recyclerview/package-summary.html
R.attr	A										<section class="prog__container"><p> Class name of the Layout Manager to be used.</p><pre><code>public static final class R.attr\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/recyclerview/R.attr.html
R.dimen	A										<section class="prog__container"><p> The max amount of scroll ItemTouchHelper will trigger if dragged view is out of RecyclerView's bounds.</p><pre><code>public static final class R.dimen\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/recyclerview/R.dimen.html
R	A										<section class="prog__container"><pre><code>public final class R\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/recyclerview/R.html
R.id	A										<section class="prog__container"><p> ItemTouchHelper uses this id to save a View's original elevation.</p><pre><code>public static final class R.id\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/recyclerview/R.id.html
R.styleable	A										<section class="prog__container"><p> Attributes that can be used with a RecyclerView.</p><pre><code>public static final class R.styleable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/recyclerview/R.styleable.html
AsyncListUtil.DataCallback	A										<section class="prog__container"><p> The callback that provides data access for <pre><code> AsyncListUtil </code></pre> . <p> All methods are called on the background thread. </p><pre><code>public static abstract class AsyncListUtil.DataCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/util/AsyncListUtil.DataCallback.html
AsyncListUtil	A										<section class="prog__container"><p> A utility class that supports asynchronous content loading. <p> It can be used to load Cursor data in chunks without querying the Cursor on the UI Thread while keeping UI and cache synchronous for better user experience. <p> It loads the data on a background thread and keeps only a limited number of fixed sized chunks in memory at all times. <p> <pre><code> AsyncListUtil </code></pre> queries the currently visible range through <pre><code> AsyncListUtil.ViewCallback </code></pre> , loads the required data items in the background through <pre><code> AsyncListUtil.DataCallback </code></pre> , and notifies a <pre><code> AsyncListUtil.ViewCallback </code></pre> when the data is loaded. It may load some extra items for smoother scrolling. <p> Note that this class uses a single thread to load the data, so it suitable to load data from secondary storage such as disk, but not from network. <p> This class is designed to work with <pre><code> RecyclerView </code></pre> , but it does not depend on it and can be used with other list views. </p><pre><code>public class AsyncListUtil\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/util/AsyncListUtil.html
AsyncListUtil.ViewCallback	A										<section class="prog__container"><p> The callback that links <pre><code> AsyncListUtil </code></pre> with the list view. <p> All methods are called on the main thread. </p><pre><code>public static abstract class AsyncListUtil.ViewCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/util/AsyncListUtil.ViewCallback.html
BatchingListUpdateCallback	A										<section class="prog__container"><p> Wraps a <pre><code> ListUpdateCallback </code></pre> callback and batches operations that can be merged. <p> For instance, when 2 add operations comes that adds 2 consecutive elements, BatchingListUpdateCallback merges them and calls the wrapped callback only once. <p> This is a general purpose class and is also used by <pre><code> DiffResult </code></pre> and <pre><code> SortedList </code></pre> to minimize the number of updates that are dispatched. <p> If you use this class to batch updates, you must call <pre><code> dispatchLastEvent() </code></pre> when the stream of update events drain. </p><pre><code>public class BatchingListUpdateCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/util/BatchingListUpdateCallback.html
DiffUtil.Callback	A										<section class="prog__container"><p> A Callback class used by DiffUtil while calculating the diff between two lists.</p><pre><code>public static abstract class DiffUtil.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/util/DiffUtil.Callback.html
DiffUtil.DiffResult	A										<section class="prog__container"><p> This class holds the information about the result of a <pre><code> calculateDiff(Callback, boolean) </code></pre> call. <p> You can consume the updates in a DiffResult via <pre><code> dispatchUpdatesTo(ListUpdateCallback) </code></pre> or directly stream the results into a <pre><code> RecyclerView.Adapter </code></pre> via <pre><code> dispatchUpdatesTo(RecyclerView.Adapter) </code></pre> . </p><pre><code>public static class DiffUtil.DiffResult\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/util/DiffUtil.DiffResult.html
DiffUtil	A										<section class="prog__container"><p> DiffUtil is a utility class that can calculate the difference between two lists and output a list of update operations that converts the first list into the second one. <p> It can be used to calculate updates for a RecyclerView Adapter. <p> DiffUtil uses Eugene W. Myers's difference algorithm to calculate the minimal number of updates to convert one list into another. Myers's algorithm does not handle items that are moved so DiffUtil runs a second pass on the result to detect items that were moved. <p> If the lists are large, this operation may take significant time so you are advised to run this on a background thread, get the <pre><code> DiffUtil.DiffResult </code></pre> then apply it on the RecyclerView on the main thread. <p> This algorithm is optimized for space and uses O(N) space to find the minimal number of addition and removal operations between the two lists. It has O(N + D^2) expected time performance where D is the length of the edit script. <p> If move detection is enabled, it takes an additional O(N^2) time where N is the total number of added and removed items. If your lists are already sorted by the same constraint (e.g. a created timestamp for a list of posts), you can disable move detection to improve performance. <p> The actual runtime of the algorithm significantly depends on the number of changes in the list and the cost of your comparison methods. Below are some average run times for reference: (The test list is composed of random UUID Strings and the tests are run on Nexus 5X with M) <ul> <li> 100 items and 10 modifications: avg: 0.39 ms, median: 0.35 ms <li> 100 items and 100 modifications: 3.82 ms, median: 3.75 ms <li> 100 items and 100 modifications without moves: 2.09 ms, median: 2.06 ms <li> 1000 items and 50 modifications: avg: 4.67 ms, median: 4.59 ms <li> 1000 items and 50 modifications without moves: avg: 3.59 ms, median: 3.50 ms <li> 1000 items and 200 modifications: 27.07 ms, median: 26.92 ms <li> 1000 items and 200 modifications without moves: 13.54 ms, median: 13.36 ms </li> </li> </li> </li> </li> </li> </li> </ul> <p> Due to implementation constraints, the max size of the list can be 2^26. </p><pre><code>public class DiffUtil\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/util/DiffUtil.html
ListUpdateCallback	A										<section class="prog__container"><p> An interface that can receive Update operations that are applied to a list. <p> This class can be used together with DiffUtil to detect changes between two lists. </p><pre><code>public interface ListUpdateCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/util/ListUpdateCallback.html
android.support.v7.util	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/util/package-summary.html
SortedList.BatchedCallback	A										<section class="prog__container"><p> A callback implementation that can batch notify events dispatched by the SortedList. <p> This class can be useful if you want to do multiple operations on a SortedList but don't want to dispatch each event one by one, which may result in a performance issue. <p> For example, if you are going to add multiple items to a SortedList, BatchedCallback call convert individual <pre><code> onInserted(index, 1) </code></pre> calls into one <pre><code> onInserted(index, N) </code></pre> if items are added into consecutive indices. This change can help RecyclerView resolve changes much more easily. <p> If consecutive changes in the SortedList are not suitable for batching, BatchingCallback dispatches them as soon as such case is detected. After your edits on the SortedList is complete, you <b> must </b> always call <pre><code> dispatchLastEvent() </code></pre> to flush all changes to the Callback. </p><pre><code>public static class SortedList.BatchedCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/util/SortedList.BatchedCallback.html
SortedList.Callback	A										<section class="prog__container"><p> The class that controls the behavior of the <pre><code> SortedList </code></pre> . <p> It defines how items should be sorted and how duplicates should be handled. <p> SortedList calls the callback methods on this class to notify changes about the underlying data. </p><pre><code>public static abstract class SortedList.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/util/SortedList.Callback.html
SortedList	A										<section class="prog__container"><p> A Sorted list implementation that can keep items in order and also notify for changes in the list such that it can be bound to a <pre><code> RecyclerView.Adapter </code></pre> . <p> It keeps items ordered using the <pre><code> compare(Object, Object) </code></pre> method and uses binary search to retrieve items. If the sorting criteria of your items may change, make sure you call appropriate methods while editing them to avoid data inconsistencies. <p> You can control the order of items and change notifications via the <pre><code> SortedList.Callback </code></pre> parameter. </p><pre><code>public class SortedList\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/util/SortedList.html
ActionMode.Callback	A										<section class="prog__container"><p> Callback interface for action modes. Supplied to <pre><code> startSupportActionMode(Callback) </code></pre> (Callback)}, a Callback configures and handles events raised by a user's interaction with an action mode. <p> An action mode's lifecycle is as follows: <ul> <li> <pre><code> onCreateActionMode(ActionMode, Menu) </code></pre> once on initial creation </li> <li> <pre><code> onPrepareActionMode(ActionMode, Menu) </code></pre> after creation and any time the <pre><code> ActionMode </code></pre> is invalidated </li> <li> <pre><code> onActionItemClicked(ActionMode, MenuItem) </code></pre> any time a contextual action button is clicked </li> <li> <pre><code> onDestroyActionMode(ActionMode) </code></pre> when the action mode is closed </li> </ul> </p><pre><code>public static interface ActionMode.Callback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/view/ActionMode.Callback.html
ActionMode	A										<section class="prog__container"><p> Represents a contextual mode of the user interface. Action modes can be used to provide alternative interaction modes and replace parts of the normal UI until finished. Examples of good action modes include text selection and contextual actions. </p><pre><code>public abstract class ActionMode\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/view/ActionMode.html
CollapsibleActionView	A										<section class="prog__container"><p> When a <pre><code> View </code></pre> implements this interface it will receive callbacks when expanded or collapsed as an action view alongside the optional, app-specified callbacks to <pre><code> MenuItemCompat.OnActionExpandListener </code></pre> . <p> See <pre><code> MenuItemCompat </code></pre> for more information about action views. See <pre><code> ActionBar </code></pre> for more information about the action bar. </p><pre><code>public interface CollapsibleActionView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/view/CollapsibleActionView.html
android.support.v7.view	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/view/package-summary.html
ActionMenuView	A										<section class="prog__container"><p> ActionMenuView is a presentation of a series of menu options as a View. It provides several top level options as action buttons while spilling remaining options over as items in an overflow menu. This allows applications to present packs of actions inline with specific or repeating content.</p><pre><code>public class ActionMenuView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/ActionMenuView.html
ActionMenuView.LayoutParams	A										<section class="prog__container"><p> Special value for the height or width requested by a View.</p><pre><code>public static class ActionMenuView.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/ActionMenuView.LayoutParams.html
ActionMenuView.OnMenuItemClickListener	A										<section class="prog__container"><p> Interface responsible for receiving menu item click events if the items themselves do not have individual item click listeners.</p><pre><code>public static interface ActionMenuView.OnMenuItemClickListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/ActionMenuView.OnMenuItemClickListener.html
AppCompatAutoCompleteTextView	A										<section class="prog__container"><p> A <pre><code> AutoCompleteTextView </code></pre> which supports compatible features on older version of the platform, including: <ul> <li> Supports <pre><code> textAllCaps </code></pre> style attribute which works back to <pre><code> Gingerbread </code></pre> . </li> <li> Allows dynamic tint of it background via the background tint methods in <pre><code> ViewCompat </code></pre> . </li> <li> Allows setting of the background tint using <pre><code> backgroundTint </code></pre> and <pre><code> backgroundTintMode </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> AutoCompleteTextView </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p><pre><code>public class AppCompatAutoCompleteTextView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatAutoCompleteTextView.html
AppCompatButton	A										<section class="prog__container"><p> A <pre><code> Button </code></pre> which supports compatible features on older version of the platform, including: <ul> <li> Supports <pre><code> textAllCaps </code></pre> style attribute which works back to <pre><code> Gingerbread </code></pre> . </li> <li> Allows dynamic tint of it background via the background tint methods in <pre><code> ViewCompat </code></pre> . </li> <li> Allows setting of the background tint using <pre><code> backgroundTint </code></pre> and <pre><code> backgroundTintMode </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> Button </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p><pre><code>public class AppCompatButton\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatButton.html
AppCompatCheckBox	A										<section class="prog__container"><p> A <pre><code> CheckBox </code></pre> which supports compatible features on older version of the platform, including: <ul> <li> Allows dynamic tint of it background via the background tint methods in <pre><code> CompoundButtonCompat </code></pre> . </li> <li> Allows setting of the background tint using <pre><code> buttonTint </code></pre> and <pre><code> buttonTintMode </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> CheckBox </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p><pre><code>public class AppCompatCheckBox\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatCheckBox.html
AppCompatCheckedTextView	A										<section class="prog__container"><p> A <pre><code> CheckedTextView </code></pre> which supports compatible features on older version of the platform. <p> This will automatically be used when you use <pre><code> CheckedTextView </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p><pre><code>public class AppCompatCheckedTextView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatCheckedTextView.html
AppCompatEditText	A										<section class="prog__container"><p> A <pre><code> EditText </code></pre> which supports compatible features on older version of the platform, including: <ul> <li> Supports <pre><code> textAllCaps </code></pre> style attribute which works back to <pre><code> Gingerbread </code></pre> . </li> <li> Allows dynamic tint of it background via the background tint methods in <pre><code> ViewCompat </code></pre> . </li> <li> Allows setting of the background tint using <pre><code> backgroundTint </code></pre> and <pre><code> backgroundTintMode </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> EditText </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p><pre><code>public class AppCompatEditText\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatEditText.html
AppCompatImageButton	A										<section class="prog__container"><p> A <pre><code> ImageButton </code></pre> which supports compatible features on older version of the platform, including: <ul> <li> Allows dynamic tint of it background via the background tint methods in <pre><code> ViewCompat </code></pre> . </li> <li> Allows setting of the background tint using <pre><code> backgroundTint </code></pre> and <pre><code> backgroundTintMode </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> ImageButton </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p><pre><code>public class AppCompatImageButton\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatImageButton.html
AppCompatImageView	A										<section class="prog__container"><p> A <pre><code> ImageView </code></pre> which supports compatible features on older version of the platform, including: <ul> <li> Allows dynamic tint of it background via the background tint methods in <pre><code> ViewCompat </code></pre> . </li> <li> Allows setting of the background tint using <pre><code> backgroundTint </code></pre> and <pre><code> backgroundTintMode </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> ImageView </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p><pre><code>public class AppCompatImageView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatImageView.html
AppCompatMultiAutoCompleteTextView	A										<section class="prog__container"><p> A <pre><code> MultiAutoCompleteTextView </code></pre> which supports compatible features on older version of the platform, including: <ul> <li> Supports <pre><code> textAllCaps </code></pre> style attribute which works back to <pre><code> Gingerbread </code></pre> . </li> <li> Allows dynamic tint of it background via the background tint methods in <pre><code> ViewCompat </code></pre> . </li> <li> Allows setting of the background tint using <pre><code> backgroundTint </code></pre> and <pre><code> backgroundTintMode </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> MultiAutoCompleteTextView </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p><pre><code>public class AppCompatMultiAutoCompleteTextView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatMultiAutoCompleteTextView.html
AppCompatRadioButton	A										<section class="prog__container"><p> A <pre><code> RadioButton </code></pre> which supports compatible features on older version of the platform, including: <ul> <li> Allows dynamic tint of it background via the background tint methods in <pre><code> CompoundButtonCompat </code></pre> . </li> <li> Allows setting of the background tint using <pre><code> buttonTint </code></pre> and <pre><code> buttonTintMode </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> RadioButton </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p><pre><code>public class AppCompatRadioButton\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatRadioButton.html
AppCompatRatingBar	A										<section class="prog__container"><p> A <pre><code> RatingBar </code></pre> which supports compatible features on older version of the platform. <p> This will automatically be used when you use <pre><code> RatingBar </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p><pre><code>public class AppCompatRatingBar\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatRatingBar.html
AppCompatSeekBar	A										<section class="prog__container"><p> A <pre><code> SeekBar </code></pre> which supports compatible features on older version of the platform. <p> This will automatically be used when you use <pre><code> SeekBar </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p><pre><code>public class AppCompatSeekBar\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatSeekBar.html
AppCompatSpinner	A										<section class="prog__container"><p> A <pre><code> Spinner </code></pre> which supports compatible features on older versions of the platform, including: <ul> <li> Dynamic tinting of the background via the background tint methods in <pre><code> ViewCompat </code></pre> . </li> <li> Configuring the background tint using <pre><code> backgroundTint </code></pre> and <pre><code> backgroundTintMode </code></pre> . </li> <li> Setting the popup theme using <pre><code> popupTheme </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> Spinner </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p><pre><code>public class AppCompatSpinner\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatSpinner.html
AppCompatTextView	A										<section class="prog__container"><p> A <pre><code> TextView </code></pre> which supports compatible features on older version of the platform, including: <ul> <li> Supports <pre><code> textAllCaps </code></pre> style attribute which works back to <pre><code> Gingerbread </code></pre> . </li> <li> Allows dynamic tint of it background via the background tint methods in <pre><code> ViewCompat </code></pre> . </li> <li> Allows setting of the background tint using <pre><code> backgroundTint </code></pre> and <pre><code> backgroundTintMode </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> TextView </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p><pre><code>public class AppCompatTextView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatTextView.html
CardView	A										<section class="prog__container"><p> A FrameLayout with a rounded corner background and shadow. <p> CardView uses <pre><code> elevation </code></pre> property on Lollipop for shadows and falls back to a custom emulated shadow implementation on older platforms. <p> Due to expensive nature of rounded corner clipping, on platforms before Lollipop, CardView does not clip its children that intersect with rounded corners. Instead, it adds padding to avoid such intersection (See <pre><code> setPreventCornerOverlap(boolean) </code></pre> to change this behavior). <p> Before Lollipop, CardView adds padding to its content and draws shadows to that area. This padding amount is equal to <pre><code> maxCardElevation + (1 - cos45) * cornerRadius </code></pre> on the sides and <pre><code> maxCardElevation * 1.5 + (1 - cos45) * cornerRadius </code></pre> on top and bottom. <p> Since padding is used to offset content for shadows, you cannot set padding on CardView. Instead, you can use content padding attributes in XML or <pre><code> setContentPadding(int, int, int, int) </code></pre> in code to set the padding between the edges of the CardView and children of CardView. <p> Note that, if you specify exact dimensions for the CardView, because of the shadows, its content area will be different between platforms before Lollipop and after Lollipop. By using api version specific resource values, you can avoid these changes. Alternatively, If you want CardView to add inner padding on platforms Lollipop and after as well, you can call <pre><code> setUseCompatPadding(boolean) </code></pre> and pass <pre><code> true </code></pre> . <p> To change CardView's elevation in a backward compatible way, use <pre><code> setCardElevation(float) </code></pre> . CardView will use elevation API on Lollipop and before Lollipop, it will change the shadow size. To avoid moving the View while shadow size is changing, shadow size is clamped by <pre><code> getMaxCardElevation() </code></pre> . If you want to change elevation dynamically, you should call <pre><code> setMaxCardElevation(float) </code></pre> when CardView is initialized. </p><pre><code>public class CardView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/CardView.html
DefaultItemAnimator	A										<section class="prog__container"><p> This implementation of <pre><code> RecyclerView.ItemAnimator </code></pre> provides basic animations on remove, add, and move events that happen to the items in a RecyclerView. RecyclerView uses a DefaultItemAnimator by default.</p><pre><code>public class DefaultItemAnimator\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/DefaultItemAnimator.html
DividerItemDecoration	A										<section class="prog__container"><p> DividerItemDecoration is a <pre><code> RecyclerView.ItemDecoration </code></pre> that can be used as a divider between items of a <pre><code> LinearLayoutManager </code></pre> . It supports both <pre><code> HORIZONTAL </code></pre> and <pre><code> VERTICAL </code></pre> orientations. <pre> mDividerItemDecoration = new DividerItemDecoration(recyclerView.getContext(), mLayoutManager.getOrientation()); recyclerView.addItemDecoration(mDividerItemDecoration); </pre></p><pre><code>public class DividerItemDecoration\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/DividerItemDecoration.html
GridLayout.Alignment	A										<section class="prog__container"><p> Alignments specify where a view should be placed within a cell group and what size it should be. <p> The <pre><code> GridLayout.LayoutParams </code></pre> class contains a <pre><code> rowSpec </code></pre> and a <pre><code> columnSpec </code></pre> each of which contains an <pre><code> alignment </code></pre> . Overall placement of the view in the cell group is specified by the two alignments which act along each axis independently. <p> The GridLayout class defines the most common alignments used in general layout: <pre><code> TOP </code></pre> , <pre><code> LEFT </code></pre> , <pre><code> BOTTOM </code></pre> , <pre><code> RIGHT </code></pre> , <pre><code> START </code></pre> , <pre><code> END </code></pre> , <pre><code> CENTER </code></pre> , <pre><code> BASELINE </code></pre> and <pre><code> FILL </code></pre> . </p><pre><code>public static abstract class GridLayout.Alignment\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/GridLayout.Alignment.html
GridLayout	A										<section class="prog__container"><p> A layout that places its children in a rectangular <em> grid </em> . <p> The grid is composed of a set of infinitely thin lines that separate the viewing area into <em> cells </em> . Throughout the API, grid lines are referenced by grid <em> indices </em> . A grid with <pre><code> N </code></pre> columns has <pre><code> N + 1 </code></pre> grid indices that run from <pre><code> 0 </code></pre> through <pre><code> N </code></pre> inclusive. Regardless of how GridLayout is configured, grid index <pre><code> 0 </code></pre> is fixed to the leading edge of the container and grid index <pre><code> N </code></pre> is fixed to its trailing edge (after padding is taken into account). <h4> Row and Column Specs </h4> Children occupy one or more contiguous cells, as defined by their <pre><code> rowSpec </code></pre> and <pre><code> columnSpec </code></pre> layout parameters. Each spec defines the set of rows or columns that are to be occupied; and how children should be aligned within the resulting group of cells. Although cells do not normally overlap in a GridLayout, GridLayout does not prevent children being defined to occupy the same cell or group of cells. In this case however, there is no guarantee that children will not themselves overlap after the layout operation completes. <h4> Default Cell Assignment </h4> If a child does not specify the row and column indices of the cell it wishes to occupy, GridLayout assigns cell locations automatically using its: <pre><code> orientation </code></pre> , <pre><code> rowCount </code></pre> and <pre><code> columnCount </code></pre> properties. <h4> Space </h4> Space between children may be specified either by using instances of the dedicated <pre><code> Space </code></pre> view or by setting the <pre><code> leftMargin </code></pre> , <pre><code> topMargin </code></pre> , <pre><code> rightMargin </code></pre> and <pre><code> bottomMargin </code></pre> layout parameters. When the <pre><code> useDefaultMargins </code></pre> property is set, default margins around children are automatically allocated based on the prevailing UI style guide for the platform. Each of the margins so defined may be independently overridden by an assignment to the appropriate layout parameter. Default values will generally produce a reasonable spacing between components but values may change between different releases of the platform. <h4> Excess Space Distribution </h4> GridLayout's distribution of excess space accommodates the principle of weight. In the event that no weights are specified, columns and rows are taken as flexible if their views specify some form of alignment within their groups. <p> The flexibility of a view is therefore influenced by its alignment which is, in turn, typically defined by setting the <pre><code> gravity </code></pre> property of the child's layout parameters. If either a weight or alignment were defined along a given axis then the component is taken as <em> flexible </em> in that direction. If no weight or alignment was set, the component is instead assumed to be <em> inflexible </em> . <p> Multiple components in the same row or column group are considered to act in <em> parallel </em> . Such a group is flexible only if <em> all </em> of the components within it are flexible. Row and column groups that sit either side of a common boundary are instead considered to act in <em> series </em> . The composite group made of these two elements is flexible if <em> one </em> of its elements is flexible. <p> To make a column stretch, make sure all of the components inside it define a weight or a gravity. To prevent a column from stretching, ensure that one of the components in the column does not define a weight or a gravity. <p> When the principle of flexibility does not provide complete disambiguation, GridLayout's algorithms favour rows and columns that are closer to its <em> right </em> and <em> bottom </em> edges. To be more precise, GridLayout treats each of its layout parameters as a constraint in the a set of variables that define the grid-lines along a given axis. During layout, GridLayout solves the constraints so as to return the unique solution to those constraints for which all variables are less-than-or-equal-to the corresponding value in any other valid solution. <h4> Interpretation of GONE </h4> For layout purposes, GridLayout treats views whose visibility status is <pre><code> GONE </code></pre> , as having zero width and height. This is subtly different from the policy of ignoring views that are marked as GONE outright. If, for example, a gone-marked view was alone in a column, that column would itself collapse to zero width if and only if no gravity was defined on the view. If gravity was defined, then the gone-marked view has no effect on the layout and the container should be laid out as if the view had never been added to it. GONE views are taken to have zero weight during excess space distribution. <p> These statements apply equally to rows as well as columns, and to groups of rows or columns. <p> See <pre><code> GridLayout.LayoutParams </code></pre> for a full description of the layout parameters used by GridLayout. </p><pre><code>public class GridLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/GridLayout.html
GridLayout.LayoutParams	A										<section class="prog__container"><p> Layout information associated with each of the children of a GridLayout. <p> GridLayout supports both row and column spanning and arbitrary forms of alignment within each cell group. The fundamental parameters associated with each cell group are gathered into their vertical and horizontal components and stored in the <pre><code> rowSpec </code></pre> and <pre><code> columnSpec </code></pre> layout parameters. <pre><code> Specs </code></pre> are immutable structures and may be shared between the layout parameters of different children. <p> The row and column specs contain the leading and trailing indices along each axis and together specify the four grid indices that delimit the cells of this cell group. <p> The alignment properties of the row and column specs together specify both aspects of alignment within the cell group. It is also possible to specify a child's alignment within its cell group by using the <pre><code> setGravity(int) </code></pre> method. <p> The weight property is also included in Spec and specifies the proportion of any excess space that is due to the associated view. <h4> WRAP_CONTENT and MATCH_PARENT </h4> Because the default values of the <pre><code> width </code></pre> and <pre><code> height </code></pre> properties are both <pre><code> WRAP_CONTENT </code></pre> , this value never needs to be explicitly declared in the layout parameters of GridLayout's children. In addition, GridLayout does not distinguish the special size value <pre><code> MATCH_PARENT </code></pre> from <pre><code> WRAP_CONTENT </code></pre> . A component's ability to expand to the size of the parent is instead controlled by the principle of <em> flexibility </em> , as discussed in <pre><code> GridLayout </code></pre> . <h4> Summary </h4> You should not need to use either of the special size values: <pre><code> WRAP_CONTENT </code></pre> or <pre><code> MATCH_PARENT </code></pre> when configuring the children of a GridLayout. <h4> Default values </h4> <ul> <li> <pre><code> width </code></pre> = <pre><code> WRAP_CONTENT </code></pre> </li> <li> <pre><code> height </code></pre> = <pre><code> WRAP_CONTENT </code></pre> </li> <li> <pre><code> topMargin </code></pre> = 0 when <pre><code> useDefaultMargins </code></pre> is <pre><code> false </code></pre> ; otherwise <pre><code> UNDEFINED </code></pre> , to indicate that a default value should be computed on demand. </li> <li> <pre><code> leftMargin </code></pre> = 0 when <pre><code> useDefaultMargins </code></pre> is <pre><code> false </code></pre> ; otherwise <pre><code> UNDEFINED </code></pre> , to indicate that a default value should be computed on demand. </li> <li> <pre><code> bottomMargin </code></pre> = 0 when <pre><code> useDefaultMargins </code></pre> is <pre><code> false </code></pre> ; otherwise <pre><code> UNDEFINED </code></pre> , to indicate that a default value should be computed on demand. </li> <li> <pre><code> rightMargin </code></pre> = 0 when <pre><code> useDefaultMargins </code></pre> is <pre><code> false </code></pre> ; otherwise <pre><code> UNDEFINED </code></pre> , to indicate that a default value should be computed on demand. </li> <li> <pre><code> rowSpec </code></pre> <pre><code> .row </code></pre> = <pre><code> UNDEFINED </code></pre> </li> <li> <pre><code> rowSpec </code></pre> <pre><code> .rowSpan </code></pre> = 1 </li> <li> <pre><code> rowSpec </code></pre> <pre><code> .alignment </code></pre> = <pre><code> BASELINE </code></pre> </li> <li> <pre><code> rowSpec </code></pre> <pre><code> .weight </code></pre> = 0 </li> <li> <pre><code> columnSpec </code></pre> <pre><code> .column </code></pre> = <pre><code> UNDEFINED </code></pre> </li> <li> <pre><code> columnSpec </code></pre> <pre><code> .columnSpan </code></pre> = 1 </li> <li> <pre><code> columnSpec </code></pre> <pre><code> .alignment </code></pre> = <pre><code> START </code></pre> </li> <li> <pre><code> columnSpec </code></pre> <pre><code> .weight </code></pre> = 0 </li> </ul> See <pre><code> GridLayout </code></pre> for a more complete description of the conventions used by GridLayout in the interpretation of the properties of this class. </p><pre><code>public static class GridLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html
GridLayout.Spec	A										<section class="prog__container"><p> A Spec defines the horizontal or vertical characteristics of a group of cells. Each spec. defines the <em> grid indices </em> and <em> alignment </em> along the appropriate axis. <p> The <em> grid indices </em> are the leading and trailing edges of this cell group. See <pre><code> GridLayout </code></pre> for a description of the conventions used by GridLayout for grid indices. <p> The <em> alignment </em> property specifies how cells should be aligned in this group. For row groups, this specifies the vertical alignment. For column groups, this specifies the horizontal alignment. <p> Use the following static methods to create specs: <ul> <li> <pre><code> spec(int) </code></pre> </li> <li> <pre><code> spec(int, int) </code></pre> </li> <li> <pre><code> spec(int, Alignment) </code></pre> </li> <li> <pre><code> spec(int, int, Alignment) </code></pre> </li> <li> <pre><code> spec(int, float) </code></pre> </li> <li> <pre><code> spec(int, int, float) </code></pre> </li> <li> <pre><code> spec(int, Alignment, float) </code></pre> </li> <li> <pre><code> spec(int, int, Alignment, float) </code></pre> </li> </ul> </p><pre><code>public static class GridLayout.Spec\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/GridLayout.Spec.html
GridLayoutManager.DefaultSpanSizeLookup	A										<section class="prog__container"><p> Default implementation for <pre><code> GridLayoutManager.SpanSizeLookup </code></pre> . Each item occupies 1 span.</p><pre><code>public static final class GridLayoutManager.DefaultSpanSizeLookup\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/GridLayoutManager.DefaultSpanSizeLookup.html
GridLayoutManager	A										<section class="prog__container"><p> A <pre><code> RecyclerView.LayoutManager </code></pre> implementations that lays out items in a grid. <p> By default, each item occupies 1 span. You can change it by providing a custom <pre><code> GridLayoutManager.SpanSizeLookup </code></pre> instance via <pre><code> setSpanSizeLookup(SpanSizeLookup) </code></pre> . </p><pre><code>public class GridLayoutManager\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/GridLayoutManager.html
GridLayoutManager.LayoutParams	A										<section class="prog__container"><p> LayoutParams used by GridLayoutManager. <p> Note that if the orientation is <pre><code> VERTICAL </code></pre> , the width parameter is ignored and if the orientation is <pre><code> HORIZONTAL </code></pre> the height parameter is ignored because child view is expected to fill all of the space given to it. </p><pre><code>public static class GridLayoutManager.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/GridLayoutManager.LayoutParams.html
GridLayoutManager.SpanSizeLookup	A										<section class="prog__container"><p> A helper class to provide the number of spans each item occupies. <p> Default implementation sets each item to occupy exactly 1 span. </p><pre><code>public static abstract class GridLayoutManager.SpanSizeLookup\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/GridLayoutManager.SpanSizeLookup.html
LinearLayoutCompat	A										<section class="prog__container"><p> A Layout that arranges its children in a single column or a single row. The direction of the row can be set by calling <pre><code> setOrientation() </code></pre> . You can also specify gravity, which specifies the alignment of all the child elements by calling <pre><code> setGravity() </code></pre> or specify that specific children grow to fill up any remaining space in the layout by setting the <em> weight </em> member of <pre><code> LinearLayoutCompat.LayoutParams </code></pre> . The default orientation is horizontal. <p> See the Linear Layout guide. </p><pre><code>public class LinearLayoutCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/LinearLayoutCompat.html
LinearLayoutCompat.LayoutParams	A										<section class="prog__container"><p> Per-child layout information associated with ViewLinearLayout.</p><pre><code>public static class LinearLayoutCompat.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/LinearLayoutCompat.LayoutParams.html
LinearLayoutManager	A										<section class="prog__container"><p> A <pre><code> RecyclerView.LayoutManager </code></pre> implementation which provides similar functionality to <pre><code> ListView </code></pre> .</p><pre><code>public class LinearLayoutManager\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.html
LinearLayoutManager.LayoutChunkResult	A										<section class="prog__container"><pre><code>protected static class LinearLayoutManager.LayoutChunkResult\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.LayoutChunkResult.html
LinearSmoothScroller	A										<section class="prog__container"><p> <pre><code> RecyclerView.SmoothScroller </code></pre> implementation which uses a <pre><code> LinearInterpolator </code></pre> until the target position becomes a child of the RecyclerView and then uses a <pre><code> DecelerateInterpolator </code></pre> to slowly approach to target position. <p> If the <pre><code> RecyclerView.LayoutManager </code></pre> you are using does not implement the <pre><code> RecyclerView.SmoothScroller.ScrollVectorProvider </code></pre> interface, then you must override the <pre><code> computeScrollVectorForPosition(int) </code></pre> method. All the LayoutManagers bundled with the support library implement this interface. </p><pre><code>public class LinearSmoothScroller\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/LinearSmoothScroller.html
LinearSnapHelper	A										<section class="prog__container"><p> Implementation of the <pre><code> SnapHelper </code></pre> supporting snapping in either vertical or horizontal orientation. <p> The implementation will snap the center of the target child view to the center of the attached <pre><code> RecyclerView </code></pre> . If you intend to change this behavior then override <pre><code> calculateDistanceToFinalSnap(RecyclerView.LayoutManager, View) </code></pre> . </p><pre><code>public class LinearSnapHelper\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/LinearSnapHelper.html
ListPopupWindow	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> ListPopupWindow </code></pre> . Used to write apps that run on platforms prior to Android L. When running on Android L or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p><pre><code>public class ListPopupWindow\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/ListPopupWindow.html
OrientationHelper	A										<section class="prog__container"><p> Helper class for LayoutManagers to abstract measurements depending on the View's orientation. <p> It is developed to easily support vertical and horizontal orientations in a LayoutManager but can also be used to abstract calls around view bounds and child measurements with margins and decorations. </p><pre><code>public abstract class OrientationHelper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/OrientationHelper.html
android.support.v7.widget	A										<section class="prog__container">Adapters provide a binding from an app-specific data set to views that are displayed within a</section>	https://developer.android.com/reference/android/support/v7/widget/package-summary.html
PagerSnapHelper	A										<section class="prog__container"><p> Implementation of the <pre><code> SnapHelper </code></pre> supporting pager style snapping in either vertical or horizontal orientation. <p> PagerSnapHelper can help achieve a similar behavior to <pre><code> ViewPager </code></pre> . Set both <pre><code> RecyclerView </code></pre> and <pre><code> RecyclerView.Adapter </code></pre> to have MATCH_PARENT height and width and then attach PagerSnapHelper to the <pre><code> RecyclerView </code></pre> using <pre><code> attachToRecyclerView(RecyclerView) </code></pre> . </p><pre><code>public class PagerSnapHelper\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/PagerSnapHelper.html
PopupMenu	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> PopupMenu </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p><pre><code>public class PopupMenu\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/PopupMenu.html
PopupMenu.OnDismissListener	A										<section class="prog__container"><p> Callback interface used to notify the application that the menu has closed.</p><pre><code>public static interface PopupMenu.OnDismissListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/PopupMenu.OnDismissListener.html
PopupMenu.OnMenuItemClickListener	A										<section class="prog__container"><p> Interface responsible for receiving menu item click events if the items themselves do not have individual item click listeners.</p><pre><code>public static interface PopupMenu.OnMenuItemClickListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/PopupMenu.OnMenuItemClickListener.html
RecyclerView.Adapter	A										<section class="prog__container"><p> Base class for an Adapter <p> Adapters provide a binding from an app-specific data set to views that are displayed within a <pre><code> RecyclerView </code></pre> . </p><pre><code>public static abstract class RecyclerView.Adapter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html
RecyclerView.AdapterDataObserver	A										<section class="prog__container"><p> Observer base class for watching changes to an <pre><code> RecyclerView.Adapter </code></pre> . See <pre><code> registerAdapterDataObserver(AdapterDataObserver) </code></pre> .</p><pre><code>public static abstract class RecyclerView.AdapterDataObserver\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.AdapterDataObserver.html
RecyclerView.ChildDrawingOrderCallback	A										<section class="prog__container"><p> A callback interface that can be used to alter the drawing order of RecyclerView children. <p> It works using the <pre><code> getChildDrawingOrder(int, int) </code></pre> method, so any case that applies to that method also applies to this callback. For example, changing the drawing order of two views will not have any effect if their elevation values are different since elevation overrides the result of this callback. </p><pre><code>public static interface RecyclerView.ChildDrawingOrderCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ChildDrawingOrderCallback.html
RecyclerView	A										<section class="prog__container"><p> A flexible view for providing a limited window into a large data set. </p><pre><code>public class RecyclerView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html
RecyclerView.ItemAnimator.AdapterChanges	A										<section class="prog__container"><p> The set of flags that might be passed to <pre><code> recordPreLayoutInformation(State, ViewHolder, int, List) </code></pre> .</p><pre><code>public static abstract @interface RecyclerView.ItemAnimator.AdapterChanges\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.AdapterChanges.html
RecyclerView.ItemAnimator	A										<section class="prog__container"><p> This class defines the animations that take place on items as changes are made to the adapter. Subclasses of ItemAnimator can be used to implement custom animations for actions on ViewHolder items. The RecyclerView will manage retaining these items while they are being animated, but implementors must call <pre><code> dispatchAnimationFinished(ViewHolder) </code></pre> when a ViewHolder's animation is finished. In other words, there must be a matching <pre><code> dispatchAnimationFinished(ViewHolder) </code></pre> call for each <pre><code> animateAppearance() </code></pre> , <pre><code> animateChange() </code></pre> <pre><code> animatePersistence() </code></pre> , and <pre><code> animateDisappearance() </code></pre> call. <p> By default, RecyclerView uses <pre><code> DefaultItemAnimator </code></pre> . </p><pre><code>public static abstract class RecyclerView.ItemAnimator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html
RecyclerView.ItemAnimator.ItemAnimatorFinishedListener	A										<section class="prog__container"><p> This interface is used to inform listeners when all pending or running animations in an ItemAnimator are finished. This can be used, for example, to delay an action in a data set until currently-running animations are complete.</p><pre><code>public static interface RecyclerView.ItemAnimator.ItemAnimatorFinishedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.ItemAnimatorFinishedListener.html
RecyclerView.ItemAnimator.ItemHolderInfo	A										<section class="prog__container"><p> A simple data structure that holds information about an item's bounds. This information is used in calculating item animations. Default implementation of <pre><code> recordPreLayoutInformation(RecyclerView.State, ViewHolder, int, List) </code></pre> and <pre><code> recordPostLayoutInformation(RecyclerView.State, ViewHolder) </code></pre> returns this data structure. You can extend this class if you would like to keep more information about the Views. <p> If you want to provide your own implementation but still use `super` methods to record basic information, you can override <pre><code> obtainHolderInfo() </code></pre> to provide your own instances. </p><pre><code>public static class RecyclerView.ItemAnimator.ItemHolderInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.ItemHolderInfo.html
RecyclerView.ItemDecoration	A										<section class="prog__container"><p> An ItemDecoration allows the application to add a special drawing and layout offset to specific item views from the adapter's data set. This can be useful for drawing dividers between items, highlights, visual grouping boundaries and more. <p> All ItemDecorations are drawn in the order they were added, before the item views (in <pre><code> onDraw() </code></pre> and after the items (in <pre><code> onDrawOver(Canvas, RecyclerView, RecyclerView.State) </code></pre> . </p><pre><code>public static abstract class RecyclerView.ItemDecoration\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemDecoration.html
RecyclerView.LayoutManager	A										<section class="prog__container"><pre><code>public static abstract class RecyclerView.LayoutManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html
RecyclerView.LayoutManager.LayoutPrefetchRegistry	A										<section class="prog__container"><p> Interface for LayoutManagers to request items to be prefetched, based on position, with specified distance from viewport, which indicates priority.</p><pre><code>public static interface RecyclerView.LayoutManager.LayoutPrefetchRegistry\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.LayoutPrefetchRegistry.html
RecyclerView.LayoutManager.Properties	A										<section class="prog__container"><p> Some general properties that a LayoutManager may want to use.</p><pre><code>public static class RecyclerView.LayoutManager.Properties\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.Properties.html
RecyclerView.LayoutParams	A										<section class="prog__container"><p> <pre><code> LayoutParams </code></pre> subclass for children of <pre><code> RecyclerView </code></pre> . Custom <pre><code> layout managers </code></pre> are encouraged to create their own subclass of this <pre><code> LayoutParams </code></pre> class to store any additional required per-child view metadata about the layout.</p><pre><code>public static class RecyclerView.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutParams.html
RecyclerView.OnChildAttachStateChangeListener	A										<section class="prog__container"><p> A Listener interface that can be attached to a RecylcerView to get notified whenever a ViewHolder is attached to or detached from RecyclerView.</p><pre><code>public static interface RecyclerView.OnChildAttachStateChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.OnChildAttachStateChangeListener.html
RecyclerView.OnFlingListener	A										<section class="prog__container"><p> This class defines the behavior of fling if the developer wishes to handle it. <p> Subclasses of <pre><code> RecyclerView.OnFlingListener </code></pre> can be used to implement custom fling behavior. </p><pre><code>public static abstract class RecyclerView.OnFlingListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.OnFlingListener.html
RecyclerView.OnItemTouchListener	A										<section class="prog__container"><p> An OnItemTouchListener allows the application to intercept touch events in progress at the view hierarchy level of the RecyclerView before those touch events are considered for RecyclerView's own scrolling behavior. <p> This can be useful for applications that wish to implement various forms of gestural manipulation of item views within the RecyclerView. OnItemTouchListeners may intercept a touch interaction already in progress even if the RecyclerView is already handling that gesture stream itself for the purposes of scrolling. </p><pre><code>public static interface RecyclerView.OnItemTouchListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.OnItemTouchListener.html
RecyclerView.OnScrollListener	A										<section class="prog__container"><pre><code>public static abstract class RecyclerView.OnScrollListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.OnScrollListener.html
RecyclerView.RecycledViewPool	A										<section class="prog__container"><p> RecycledViewPool lets you share Views between multiple RecyclerViews. <p> If you want to recycle views across RecyclerViews, create an instance of RecycledViewPool and use <pre><code> setRecycledViewPool(RecycledViewPool) </code></pre> . <p> RecyclerView automatically creates a pool for itself if you don't provide one. </p><pre><code>public static class RecyclerView.RecycledViewPool\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.RecycledViewPool.html
RecyclerView.Recycler	A										<section class="prog__container"><p> A Recycler is responsible for managing scrapped or detached item views for reuse. <p> A "scrapped" view is a view that is still attached to its parent RecyclerView but that has been marked for removal or reuse. </p><pre><code>public final class RecyclerView.Recycler\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Recycler.html
RecyclerView.RecyclerListener	A										<section class="prog__container"><p> A RecyclerListener can be set on a RecyclerView to receive messages whenever a view is recycled.</p><pre><code>public static interface RecyclerView.RecyclerListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.RecyclerListener.html
RecyclerView.SimpleOnItemTouchListener	A										<section class="prog__container"><p> An implementation of <pre><code> RecyclerView.OnItemTouchListener </code></pre> that has empty method bodies and default return values. <p> You may prefer to extend this class if you don't need to override all methods. Another benefit of using this class is future compatibility. As the interface may change, we'll always provide a default implementation on this class so that your code won't break when you update to a new version of the support library. </p><pre><code>public static class RecyclerView.SimpleOnItemTouchListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.SimpleOnItemTouchListener.html
RecyclerView.SmoothScroller.Action	A										<section class="prog__container"><p> Holds information about a smooth scroll request by a <pre><code> RecyclerView.SmoothScroller </code></pre> .</p><pre><code>public static class RecyclerView.SmoothScroller.Action\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.SmoothScroller.Action.html
RecyclerView.SmoothScroller	A										<section class="prog__container"><p> <p> Base class for smooth scrolling. Handles basic tracking of the target view position and provides methods to trigger a programmatic scroll. </p><pre><code>public static abstract class RecyclerView.SmoothScroller\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.SmoothScroller.html
RecyclerView.SmoothScroller.ScrollVectorProvider	A										<section class="prog__container"><p> An interface which is optionally implemented by custom <pre><code> RecyclerView.LayoutManager </code></pre> to provide a hint to a <pre><code> RecyclerView.SmoothScroller </code></pre> about the location of the target position.</p><pre><code>public static interface RecyclerView.SmoothScroller.ScrollVectorProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.SmoothScroller.ScrollVectorProvider.html
RecyclerView.State	A										<section class="prog__container"><p> <p> Contains useful information about the current RecyclerView state like target scroll position or view focus. State object can also keep arbitrary data, identified by resource ids. </p><pre><code>public static class RecyclerView.State\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.State.html
RecyclerView.ViewCacheExtension	A										<section class="prog__container"><p> ViewCacheExtension is a helper class to provide an additional layer of view caching that can be controlled by the developer. <p> When <pre><code> getViewForPosition(int) </code></pre> is called, Recycler checks attached scrap and first level cache to find a matching View. If it cannot find a suitable View, Recycler will call the <pre><code> getViewForPositionAndType(Recycler, int, int) </code></pre> before checking <pre><code> RecyclerView.RecycledViewPool </code></pre> . <p> Note that, Recycler never sends Views to this method to be cached. It is developers responsibility to decide whether they want to keep their Views in this custom cache or let the default recycling policy handle it. </p><pre><code>public static abstract class RecyclerView.ViewCacheExtension\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewCacheExtension.html
RecyclerView.ViewHolder	A										<section class="prog__container"><p> A ViewHolder describes an item view and metadata about its place within the RecyclerView. <p> <pre><code> RecyclerView.Adapter </code></pre> implementations should subclass ViewHolder and add fields for caching potentially expensive <pre><code> findViewById(int) </code></pre> results. </p><pre><code>public static abstract class RecyclerView.ViewHolder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html
RecyclerViewAccessibilityDelegate	A										<section class="prog__container"><p> The AccessibilityDelegate used by RecyclerView. <p> This class handles basic accessibility actions and delegates them to LayoutManager. </p><pre><code>public class RecyclerViewAccessibilityDelegate\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerViewAccessibilityDelegate.html
SearchView	A										<section class="prog__container"><p> A widget that provides a user interface for the user to enter a search query and submit a request to a search provider. Shows a list of query suggestions or results, if available, and allows the user to pick a suggestion or result to launch into. <p class="note"> <strong> Note: </strong> This class is included in the support library for compatibility with API level 7 and higher. If you're developing your app for API level 11 and higher <em> only </em> , you should instead use the framework <pre><code> SearchView </code></pre> class. </p><pre><code>public class SearchView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/SearchView.html
SearchView.OnCloseListener	A										<section class="prog__container"><p> The user is attempting to close the SearchView.</p><pre><code>public static interface SearchView.OnCloseListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/SearchView.OnCloseListener.html
SearchView.OnQueryTextListener	A										<section class="prog__container"><p> Callbacks for changes to the query text.</p><pre><code>public static interface SearchView.OnQueryTextListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/SearchView.OnQueryTextListener.html
SearchView.OnSuggestionListener	A										<section class="prog__container"><p> Callback interface for selection events on suggestions. These callbacks are only relevant when a SearchableInfo has been specified by <pre><code> setSearchableInfo(SearchableInfo) </code></pre> .</p><pre><code>public static interface SearchView.OnSuggestionListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/SearchView.OnSuggestionListener.html
ShareActionProvider	A										<section class="prog__container"><p> Provides a share action, which is suitable for an activity's app bar. Creates views that enable data sharing. If the provider appears in the overflow menu, it creates a submenu with the appropriate sharing actions. </p><pre><code>public class ShareActionProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/ShareActionProvider.html
ShareActionProvider.OnShareTargetSelectedListener	A										<section class="prog__container"><p> Listener for the event of selecting a share target.</p><pre><code>public static interface ShareActionProvider.OnShareTargetSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/ShareActionProvider.OnShareTargetSelectedListener.html
SimpleItemAnimator	A										<section class="prog__container"><p> A wrapper class for ItemAnimator that records View bounds and decides whether it should run move, change, add or remove animations. This class also replicates the original ItemAnimator API. <p> It uses <pre><code> RecyclerView.ItemAnimator.ItemHolderInfo </code></pre> to track the bounds information of the Views. If you would like to extend this class, you can override <pre><code> obtainHolderInfo() </code></pre> method to provide your own info class that extends <pre><code> RecyclerView.ItemAnimator.ItemHolderInfo </code></pre> . </p><pre><code>public abstract class SimpleItemAnimator\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/SimpleItemAnimator.html
SnapHelper	A										<section class="prog__container"><p> Class intended to support snapping for a <pre><code> RecyclerView </code></pre> . <p> SnapHelper tries to handle fling as well but for this to work properly, the <pre><code> RecyclerView.LayoutManager </code></pre> must implement the <pre><code> RecyclerView.SmoothScroller.ScrollVectorProvider </code></pre> interface or you should override <pre><code> onFling(int, int) </code></pre> and handle fling manually. </p><pre><code>public abstract class SnapHelper\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/SnapHelper.html
StaggeredGridLayoutManager	A										<section class="prog__container"><p> A LayoutManager that lays out children in a staggered grid formation. It supports horizontal &amp; vertical layout as well as an ability to layout children in reverse. <p> Staggered grids are likely to have gaps at the edges of the layout. To avoid these gaps, StaggeredGridLayoutManager can offset spans independently or move items between spans. You can control this behavior via <pre><code> setGapStrategy(int) </code></pre> . </p><pre><code>public class StaggeredGridLayoutManager\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/StaggeredGridLayoutManager.html
StaggeredGridLayoutManager.LayoutParams	A										<section class="prog__container"><p> LayoutParams used by StaggeredGridLayoutManager. <p> Note that if the orientation is <pre><code> VERTICAL </code></pre> , the width parameter is ignored and if the orientation is <pre><code> HORIZONTAL </code></pre> the height parameter is ignored because child view is expected to fill all of the space given to it. </p><pre><code>public static class StaggeredGridLayoutManager.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/StaggeredGridLayoutManager.LayoutParams.html
SwitchCompat	A										<section class="prog__container"><p> SwitchCompat is a version of the Switch widget which on devices back to API v7. It does not make any attempt to use the platform provided widget on those devices which it is available normally. <p> A Switch is a two-state toggle switch widget that can select between two options. The user may drag the "thumb" back and forth to choose the selected option, or simply tap to toggle as if it were a checkbox. The <pre><code> text </code></pre> property controls the text displayed in the label for the switch, whereas the <pre><code> off </code></pre> and <pre><code> on </code></pre> text controls the text on the thumb. Similarly, the <pre><code> textAppearance </code></pre> and the related setTypeface() methods control the typeface and style of label text, whereas the <pre><code> switchTextAppearance </code></pre> and the related setSwitchTypeface() methods control that of the thumb. <p> See the Toggle Buttons guide. </p><pre><code>public class SwitchCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/SwitchCompat.html
ThemedSpinnerAdapter.Helper	A										<section class="prog__container"><p> A helper class which allows easy integration of <pre><code> ThemedSpinnerAdapter </code></pre> into existing <pre><code> SpinnerAdapter </code></pre> s in a backwards compatible way. <p> An example <pre><code> BaseAdapter </code></pre> implementation would be: </p><pre><code>public static final class ThemedSpinnerAdapter.Helper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/ThemedSpinnerAdapter.Helper.html
ThemedSpinnerAdapter	A										<section class="prog__container"><p> An extension of SpinnerAdapter that is capable of inflating drop-down views against a different theme than normal views. <p> Classes that implement this interface should use the theme provided to <pre><code> setDropDownViewTheme(Theme) </code></pre> when creating views in <pre><code> getDropDownView(int, View, ViewGroup) </code></pre> . <p> The <pre><code> ThemedSpinnerAdapter.Helper </code></pre> class is provided to aide implementation in a backwards compatible way. </p><pre><code>public interface ThemedSpinnerAdapter\nimplements SpinnerAdapter</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/ThemedSpinnerAdapter.html
Toolbar	A										<section class="prog__container"><p> A standard toolbar for use within application content. <p> A Toolbar is a generalization of <pre><code> action bars </code></pre> for use within application layouts. While an action bar is traditionally part of an <pre><code> Activity's </code></pre> opaque window decor controlled by the framework, a Toolbar may be placed at any arbitrary level of nesting within a view hierarchy. An application may choose to designate a Toolbar as the action bar for an Activity using the <pre><code> setSupportActionBar() </code></pre> method. </p><pre><code>public class Toolbar\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/Toolbar.html
Toolbar.LayoutParams	A										<section class="prog__container"><p> Layout information for child views of Toolbars. <p> Toolbar.LayoutParams extends ActionBar.LayoutParams for compatibility with existing ActionBar API. See <pre><code> AppCompatActivity.setSupportActionBar </code></pre> for more info on how to use a Toolbar as your Activity's ActionBar. </p><pre><code>public static class Toolbar.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/Toolbar.LayoutParams.html
Toolbar.OnMenuItemClickListener	A										<section class="prog__container"><p> Interface responsible for receiving menu item click events if the items themselves do not have individual item click listeners.</p><pre><code>public static interface Toolbar.OnMenuItemClickListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/Toolbar.OnMenuItemClickListener.html
Toolbar.SavedState	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> describeContents() </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p><pre><code>public static class Toolbar.SavedState\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/Toolbar.SavedState.html
ItemTouchHelper.Callback	A										<section class="prog__container"><p> This class is the contract between ItemTouchHelper and your application. It lets you control which touch behaviors are enabled per each ViewHolder and also receive callbacks when user performs these actions. <p> To control which actions user can take on each view, you should override <pre><code> getMovementFlags(RecyclerView, ViewHolder) </code></pre> and return appropriate set of direction flags. ( <pre><code> LEFT </code></pre> , <pre><code> RIGHT </code></pre> , <pre><code> START </code></pre> , <pre><code> END </code></pre> , <pre><code> UP </code></pre> , <pre><code> DOWN </code></pre> ). You can use <pre><code> makeMovementFlags(int, int) </code></pre> to easily construct it. Alternatively, you can use <pre><code> ItemTouchHelper.SimpleCallback </code></pre> . <p> If user drags an item, ItemTouchHelper will call <pre><code> onMove(recyclerView, dragged, target) </code></pre> . Upon receiving this callback, you should move the item from the old position ( <pre><code> dragged.getAdapterPosition() </code></pre> ) to new position ( <pre><code> target.getAdapterPosition() </code></pre> ) in your adapter and also call <pre><code> notifyItemMoved(int, int) </code></pre> . To control where a View can be dropped, you can override <pre><code> canDropOver(RecyclerView, ViewHolder, ViewHolder) </code></pre> . When a dragging View overlaps multiple other views, Callback chooses the closest View with which dragged View might have changed positions. Although this approach works for many use cases, if you have a custom LayoutManager, you can override <pre><code> chooseDropTarget(ViewHolder, java.util.List, int, int) </code></pre> to select a custom drop target. <p> When a View is swiped, ItemTouchHelper animates it until it goes out of bounds, then calls <pre><code> onSwiped(ViewHolder, int) </code></pre> . At this point, you should update your adapter (e.g. remove the item) and call related Adapter#notify event. </p><pre><code>public static abstract class ItemTouchHelper.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html
ItemTouchHelper	A										<section class="prog__container"><pre><code>public class ItemTouchHelper\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html
ItemTouchHelper.SimpleCallback	A										<section class="prog__container"><p> A simple wrapper to the default Callback which you can construct with drag and swipe directions and this class will handle the flag callbacks. You should still override onMove or onSwiped depending on your use case. <pre> ItemTouchHelper mIth = new ItemTouchHelper( new ItemTouchHelper.SimpleCallback(ItemTouchHelper.UP | ItemTouchHelper.DOWN, ItemTouchHelper.LEFT) { public abstract boolean onMove(RecyclerView recyclerView, ViewHolder viewHolder, ViewHolder target) { final int fromPos = viewHolder.getAdapterPosition(); final int toPos = target.getAdapterPosition(); // move item in `fromPos` to `toPos` in adapter. return true;// true if moved, false otherwise } public void onSwiped(ViewHolder viewHolder, int direction) { // remove from adapter } }); </pre></p><pre><code>public static abstract class ItemTouchHelper.SimpleCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.SimpleCallback.html
ItemTouchHelper.ViewDropHandler	A										<section class="prog__container"><p> An interface which can be implemented by LayoutManager for better integration with <pre><code> ItemTouchHelper </code></pre> .</p><pre><code>public static interface ItemTouchHelper.ViewDropHandler\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.ViewDropHandler.html
ItemTouchUIUtil	A										<section class="prog__container"><pre><code>public interface ItemTouchUIUtil\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchUIUtil.html
android.support.v7.widget.helper	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/widget/helper/package-summary.html
android.support.v7.widget.util	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/widget/util/package-summary.html
SortedListAdapterCallback	A										<section class="prog__container"><p> A <pre><code> SortedList.Callback </code></pre> implementation that can bind a <pre><code> SortedList </code></pre> to a <pre><code> RecyclerView.Adapter </code></pre> .</p><pre><code>public abstract class SortedListAdapterCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/util/SortedListAdapterCallback.html
Allocation	A										<section class="prog__container"><p> <p> This class provides the primary method through which data is passed to and from RenderScript kernels. An Allocation provides the backing store for a given <pre><code> Type </code></pre> . </p><pre><code>public class Allocation\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Allocation.html
Allocation.MipmapControl	A										<section class="prog__container"><p> Controls mipmap behavior when using the bitmap creation and update functions.</p><pre><code>public static final enum Allocation.MipmapControl\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Allocation.MipmapControl.html
BaseObj	A										<section class="prog__container"><p> BaseObj is the base class for all RenderScript objects owned by a RS context. It is responsible for lifetime management and resource tracking. This class should not be used by a user application.</p><pre><code>public class BaseObj\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/BaseObj.html
Byte2	A										<section class="prog__container"><p> Class for exposing the native RenderScript byte2 type back to the Android system.</p><pre><code>public class Byte2\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Byte2.html
Byte3	A										<section class="prog__container"><p> Class for exposing the native RenderScript byte3 type back to the Android system.</p><pre><code>public class Byte3\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Byte3.html
Byte4	A										<section class="prog__container"><p> Class for exposing the native RenderScript byte4 type back to the Android system.</p><pre><code>public class Byte4\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Byte4.html
Double2	A										<section class="prog__container"><p> Class for exposing the native RenderScript double2 type back to the Android system.</p><pre><code>public class Double2\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Double2.html
Double3	A										<section class="prog__container"><p> Class for exposing the native RenderScript double3 type back to the Android system.</p><pre><code>public class Double3\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Double3.html
Double4	A										<section class="prog__container"><p> Class for exposing the native RenderScript double4 type back to the Android system.</p><pre><code>public class Double4\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Double4.html
Element.Builder	A										<section class="prog__container"><p> Builder class for producing complex elements with matching field and name pairs. The builder starts empty. The order in which elements are added is retained for the layout in memory.</p><pre><code>public static class Element.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Element.Builder.html
Element.DataKind	A										<section class="prog__container"><p> The special interpretation of the data if required. This is primarly useful for graphical data. USER indicates no special interpretation is expected. PIXEL is used in conjunction with the standard data types for representing texture formats.</p><pre><code>public static final enum Element.DataKind\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Element.DataKind.html
Element.DataType	A										<section class="prog__container"><p> DataType represents the basic type information for a basic element. The naming convention follows. For numeric types it is FLOAT, SIGNED, or UNSIGNED followed by the _BITS where BITS is the size of the data. BOOLEAN is a true / false (1,0) represented in an 8 bit container. The UNSIGNED variants with multiple bit definitions are for packed graphical data formats and represent vectors with per vector member sizes which are treated as a single unit for packing and alignment purposes. MATRIX the three matrix types contain FLOAT_32 elements and are treated as 32 bits for alignment purposes. RS_* objects. 32 bit opaque handles.</p><pre><code>public static final enum Element.DataType\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Element.DataType.html
Element	A										<section class="prog__container"><p> <p> An Element represents one item within an <pre><code> Allocation </code></pre> . An Element is roughly equivalent to a C type in a RenderScript kernel. Elements may be basic or complex. Some basic elements are </p><pre><code>public class Element\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Element.html
FieldPacker	A										<section class="prog__container"><p> Utility class for packing arguments and structures from Android system objects to RenderScript objects. This class is only intended to be used to support the reflected code generated by the RS tool chain. It should not be called directly.</p><pre><code>public class FieldPacker\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/FieldPacker.html
Float2	A										<section class="prog__container"><p> Class for exposing the native RenderScript float2 type back to the Android system.</p><pre><code>public class Float2\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Float2.html
Float3	A										<section class="prog__container"><p> Class for exposing the native RenderScript float2 type back to the Android system.</p><pre><code>public class Float3\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Float3.html
Float4	A										<section class="prog__container"><p> Class for exposing the native RenderScript float2 type back to the Android system.</p><pre><code>public class Float4\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Float4.html
Int2	A										<section class="prog__container"><p> Class for exposing the native RenderScript int2 type back to the Android system.</p><pre><code>public class Int2\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Int2.html
Int3	A										<section class="prog__container"><p> Class for exposing the native RenderScript int3 type back to the Android system.</p><pre><code>public class Int3\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Int3.html
Int4	A										<section class="prog__container"><p> Class for exposing the native RenderScript int4 type back to the Android system.</p><pre><code>public class Int4\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Int4.html
Long2	A										<section class="prog__container"><p> Class for exposing the native RenderScript long2 type back to the Android system.</p><pre><code>public class Long2\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Long2.html
Long3	A										<section class="prog__container"><p> Class for exposing the native RenderScript long3 type back to the Android system.</p><pre><code>public class Long3\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Long3.html
Long4	A										<section class="prog__container"><p> Class for exposing the native RenderScript long4 type back to the Android system.</p><pre><code>public class Long4\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Long4.html
Matrix2f	A										<section class="prog__container"><p> Class for exposing the native RenderScript rs_matrix2x2 type back to the Android system.</p><pre><code>public class Matrix2f\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Matrix2f.html
Matrix3f	A										<section class="prog__container"><p> Class for exposing the native RenderScript rs_matrix3x3 type back to the Android system.</p><pre><code>public class Matrix3f\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Matrix3f.html
Matrix4f	A										<section class="prog__container"><p> Class for exposing the native RenderScript rs_matrix4x4 type back to the Android system.</p><pre><code>public class Matrix4f\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Matrix4f.html
android.support.v8.renderscript	A										<section class="prog__container">This class provides the primary method through which data is passed to and from RenderScript kernels. </section>	https://developer.android.com/reference/android/support/v8/renderscript/package-summary.html
RenderScript.ContextType	A										<section class="prog__container"><p> ContextType specifies the specific type of context to be created.</p><pre><code>public static final enum RenderScript.ContextType\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/RenderScript.ContextType.html
RenderScript	A										<section class="prog__container"><p> This class provides access to a RenderScript context, which controls RenderScript initialization, resource management, and teardown. An instance of the RenderScript class must be created before any other RS objects can be created. </p><pre><code>public class RenderScript\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/RenderScript.html
RenderScript.Priority	A										<section class="prog__container"><p> RenderScript worker thread priority enumeration. The default value is NORMAL. Applications wishing to do background processing should set their priority to LOW to avoid starving forground processes.</p><pre><code>public static final enum RenderScript.Priority\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/RenderScript.Priority.html
RenderScript.RSErrorHandler	A										<section class="prog__container"><p> The runtime error handler base class. An application should derive from this class if it wishes to install an error handler. When errors occur at runtime, the fields in this class will be filled, and the run method will be called.</p><pre><code>public static class RenderScript.RSErrorHandler\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/RenderScript.RSErrorHandler.html
RenderScript.RSMessageHandler	A										<section class="prog__container"><p> The base class from which an application should derive in order to receive RS messages from scripts. When a script calls <pre><code> rsSendToClient </code></pre> , the data fields will be filled, and the run method will be called on a separate thread. This will occur some time after <pre><code> rsSendToClient </code></pre> completes in the script, as <pre><code> rsSendToClient </code></pre> is asynchronous. Message handlers are not guaranteed to have completed when <pre><code> finish() </code></pre> returns.</p><pre><code>public static class RenderScript.RSMessageHandler\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/RenderScript.RSMessageHandler.html
RSDriverException	A										<section class="prog__container"><p> Base class for all exceptions thrown by the Android RenderScript</p><pre><code>public class RSDriverException\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/RSDriverException.html
RSIllegalArgumentException	A										<section class="prog__container"><p> Base class for all exceptions thrown by the Android RenderScript</p><pre><code>public class RSIllegalArgumentException\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/RSIllegalArgumentException.html
RSInvalidStateException	A										<section class="prog__container"><p> Base class for all exceptions thrown by the Android RenderScript</p><pre><code>public class RSInvalidStateException\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/RSInvalidStateException.html
RSRuntimeException	A										<section class="prog__container"><p> Base class for all exceptions thrown by the Android RenderScript</p><pre><code>public class RSRuntimeException\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/RSRuntimeException.html
Sampler.Builder	A										<section class="prog__container"><p> Builder for creating non-standard samplers. This is only necessary if a Sampler with different min and mag modes is desired.</p><pre><code>public static class Sampler.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Sampler.Builder.html
Sampler	A										<section class="prog__container"><p> Sampler object that defines how Allocations can be read as textures within a kernel. Samplers are used in conjunction with the <pre><code> rsSample </code></pre> runtime function to return values from normalized coordinates. Any Allocation used with a Sampler must have been created with <pre><code> USAGE_GRAPHICS_TEXTURE </code></pre> ; using a Sampler on an <pre><code> Allocation </code></pre> that was not created with <pre><code> USAGE_GRAPHICS_TEXTURE </code></pre> is undefined.</p><pre><code>public class Sampler\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Sampler.html
Sampler.Value	A										<section class="prog__container"><pre><code>public static final enum Sampler.Value\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Sampler.Value.html
Script.Builder	A										<section class="prog__container"><p> Only intended for use by generated reflected code.</p><pre><code>public static class Script.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Script.Builder.html
Script.FieldBase	A										<section class="prog__container"><p> Only intended for use by generated reflected code.</p><pre><code>public static class Script.FieldBase\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Script.FieldBase.html
Script.FieldID	A										<section class="prog__container"><p> FieldID is an identifier for a Script + exported field pair. It is used as an identifier for ScriptGroup creation. This class should not be directly created. Instead use the method in the reflected or intrinsic code "getFieldID_funcname()".</p><pre><code>public static final class Script.FieldID\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Script.FieldID.html
Script	A										<section class="prog__container"><p> The parent class for all executable scripts. This should not be used by applications.</p><pre><code>public class Script\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Script.html
Script.InvokeID	A										<section class="prog__container"><p> InvokeID is an identifier for a invoke function. It is used as an identifier for ScriptGroup creation. This class should not be directly created. Instead use the method in the reflected or intrinsic code "getInvokeID_funcname()".</p><pre><code>public static final class Script.InvokeID\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Script.InvokeID.html
Script.KernelID	A										<section class="prog__container"><p> KernelID is an identifier for a Script + root function pair. It is used as an identifier for ScriptGroup creation. This class should not be directly created. Instead use the method in the reflected or intrinsic code "getKernelID_funcname()".</p><pre><code>public static final class Script.KernelID\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Script.KernelID.html
Script.LaunchOptions	A										<section class="prog__container"><p> Class for specifying the specifics about how a kernel will be launched. This class can specify a potential range of cells on which to run a kernel. If no set is called for a dimension then this class will have no impact on that dimension when the kernel is executed. The forEach kernel launch will operate over the intersection of the dimensions. Example: LaunchOptions with setX(5, 15) Allocation with dimension X=10, Y=10 The resulting forEach run would execute over: x = 5 to 9 (inclusive) and y = 0 to 9 (inclusive).</p><pre><code>public static final class Script.LaunchOptions\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Script.LaunchOptions.html
ScriptC	A										<section class="prog__container"><p> The superclass for all user-defined scripts. This is only intended to be used by the generated derived classes.</p><pre><code>public class ScriptC\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptC.html
ScriptGroup.Binding	A										<section class="prog__container"><p> Represents a binding of a value to a global variable in a kernel or invocable function. Used in closure creation.</p><pre><code>public static final class ScriptGroup.Binding\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Binding.html
ScriptGroup.Builder	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> ScriptGroup.Builder2 </code></pre> instead. </p><pre><code>public static final class ScriptGroup.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Builder.html
ScriptGroup.Builder2	A										<section class="prog__container"><p> The builder class for creating script groups <p> A script group is created using closures (see class <pre><code> ScriptGroup.Closure </code></pre> ). A closure is a function call to a kernel or invocable function. Each function argument or global variable accessed inside the function is bound to 1) a known value, 2) a script group input (see class <pre><code> ScriptGroup.Input </code></pre> ), or 3) a future (see class <pre><code> ScriptGroup.Future </code></pre> ). A future is the output of a closure, either the return value of the function or a global variable written by that function. <p> Closures are created using the <pre><code> addKernel(Script.KernelID, Type, Object...) </code></pre> or <pre><code> addInvoke(Script.InvokeID, Object...) </code></pre> methods. When a closure is created, futures from previously created closures can be used as its inputs. External script group inputs can be used as inputs to individual closures as well. An external script group input is created using the <pre><code> addInput() </code></pre> method. A script group is created by a call to the <pre><code> create(String, ScriptGroup.Future...) </code></pre> method, which accepts an array of futures as the outputs for the script group. <p> Closures in a script group can be evaluated in any order as long as the following conditions are met: 1) a closure must be evaluated before any other closures that take its futures as inputs; 2) all closures added before an invoke closure must be evaluated before it; and 3) all closures added after an invoke closure must be evaluated after it. As a special case, the order that the closures are added is a legal evaluation order. However, other evaluation orders are possible, including concurrently evaluating independent closures. </p><pre><code>public static final class ScriptGroup.Builder2\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Builder2.html
ScriptGroup.Closure	A										<section class="prog__container"><p> An opaque class for closures <p> A closure represents a function call to a kernel or invocable function, combined with arguments and values for global variables. A closure is created using the <pre><code> addKernel(Script.KernelID, Type, Object...) </code></pre> or <pre><code> addInvoke(Script.InvokeID, Object...) </code></pre> method. </p><pre><code>public static final class ScriptGroup.Closure\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Closure.html
ScriptGroup.Future	A										<section class="prog__container"><p> An opaque class for futures <p> A future represents an output of a closure, either the return value of the function, or the value of a global variable written by the function. A future is created by calling the <pre><code> getReturn() </code></pre> or <pre><code> getGlobal(Script.FieldID) </code></pre> method. </p><pre><code>public static final class ScriptGroup.Future\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Future.html
ScriptGroup	A										<section class="prog__container"><p> A group of kernels that are executed together with one execution call as if they were a single kernel <p> In addition to kernels, a script group may contain invocable functions as well. A script group may take inputs and generate outputs, which are consumed and produced by its member kernels. Inside a script group, outputs from one kernel can be passed to another kernel as inputs. The API disallows cyclic dependencies among kernels in a script group, effectively making it a directed acyclic graph (DAG) of kernels. <p> Grouping kernels together allows for more efficient execution. For example, runtime and compiler optimization can be applied to reduce computation and communication overhead, and to make better use of the CPU and the GPU. </p><pre><code>public final class ScriptGroup\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.html
ScriptGroup.Input	A										<section class="prog__container"><p> An opaque class for unbound values (used for script group inputs) <p> Created by calling the <pre><code> addInput() </code></pre> method. The value is assigned in <pre><code> execute(Object) </code></pre> method as one of its arguments. Arguments to the execute method should be in the same order as intputs are added using the addInput method. </p><pre><code>public static final class ScriptGroup.Input\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Input.html
ScriptIntrinsic	A										<section class="prog__container"><p> Base class for all Intrinsic scripts. An intrinsic a script which implements a pre-defined function. Intrinsics are provided to provide effecient implemtations of common operations. Not intended for direct use.</p><pre><code>public abstract class ScriptIntrinsic\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsic.html
ScriptIntrinsic3DLUT	A										<section class="prog__container"><p> Intrinsic for converting RGB to RGBA by using a 3D lookup table. The incoming r,g,b values are use as normalized x,y,z coordinates into a 3D allocation. The 8 nearest values are sampled and linearly interpolated. The result is placed in the output.</p><pre><code>public class ScriptIntrinsic3DLUT\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsic3DLUT.html
ScriptIntrinsicBLAS	A										<section class="prog__container"><p> ScriptIntrinsicBLAS class provides high performance RenderScript APIs to BLAS. The BLAS (Basic Linear Algebra Subprograms) are routines that provide standard building blocks for performing basic vector and matrix operations. For detailed description of BLAS, please refer to http://www.netlib.org/blas/</p><pre><code>public final class ScriptIntrinsicBLAS\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicBLAS.html
ScriptIntrinsicBlend	A										<section class="prog__container"><p> Intrinsic kernels for blending two <pre><code> Allocation </code></pre> objects.</p><pre><code>public class ScriptIntrinsicBlend\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicBlend.html
ScriptIntrinsicBlur	A										<section class="prog__container"><p> Intrinsic Gausian blur filter. Applies a gaussian blur of the specified radius to all elements of an allocation.</p><pre><code>public class ScriptIntrinsicBlur\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicBlur.html
ScriptIntrinsicColorMatrix	A										<section class="prog__container"><p> Intrinsic for applying a color matrix to allocations. This has the same effect as loading each element and converting it to a <pre><code> F32_4(RenderScript) </code></pre> , multiplying the result by the 4x4 color matrix as performed by rsMatrixMultiply() and writing it to the output after conversion back to <pre><code> U8_4(RenderScript) </code></pre> .</p><pre><code>public class ScriptIntrinsicColorMatrix\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicColorMatrix.html
ScriptIntrinsicConvolve3x3	A										<section class="prog__container"><p> Intrinsic for applying a 3x3 convolve to an allocation.</p><pre><code>public class ScriptIntrinsicConvolve3x3\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicConvolve3x3.html
ScriptIntrinsicConvolve5x5	A										<section class="prog__container"><p> Intrinsic for applying a 5x5 convolve to an allocation.</p><pre><code>public class ScriptIntrinsicConvolve5x5\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicConvolve5x5.html
ScriptIntrinsicHistogram	A										<section class="prog__container"><p> Intrinsic Histogram filter.</p><pre><code>public class ScriptIntrinsicHistogram\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicHistogram.html
ScriptIntrinsicLUT	A										<section class="prog__container"><p> Intrinsic for applying a per-channel lookup table. Each channel of the input has an independant lookup table. The tables are 256 entries in size and can cover the full value range of <pre><code> U8_4(RenderScript) </code></pre> .</p><pre><code>public class ScriptIntrinsicLUT\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicLUT.html
ScriptIntrinsicResize	A										<section class="prog__container"><p> Intrinsic for performing a resize of a 2D allocation.</p><pre><code>public class ScriptIntrinsicResize\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicResize.html
ScriptIntrinsicYuvToRGB	A										<section class="prog__container"><p> Intrinsic for converting an Android YUV buffer to RGB. The input allocation is supplied in NV21 format as a U8 element type. The output is RGBA, the alpha channel will be set to 255.</p><pre><code>public class ScriptIntrinsicYuvToRGB\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicYuvToRGB.html
Short2	A										<section class="prog__container"><p> Class for exposing the native RenderScript Short2 type back to the Android system.</p><pre><code>public class Short2\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Short2.html
Short3	A										<section class="prog__container"><p> Class for exposing the native RenderScript short3 type back to the Android system.</p><pre><code>public class Short3\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Short3.html
Short4	A										<section class="prog__container"><p> Class for exposing the native RenderScript short4 type back to the Android system.</p><pre><code>public class Short4\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Short4.html
Type.Builder	A										<section class="prog__container"><p> Builder class for Type.</p><pre><code>public static class Type.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Type.Builder.html
Type.CubemapFace	A										<section class="prog__container"><pre><code>public static final enum Type.CubemapFace\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Type.CubemapFace.html
Type	A										<section class="prog__container"><p> <p> A Type describes the <pre><code> Element </code></pre> and dimensions used for an <pre><code> Allocation </code></pre> or a parallel operation. Types are created through <pre><code> Type.Builder </code></pre> . </p><pre><code>public class Type\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Type.html
ErrnoException	A										<section class="prog__container"><p> A checked exception thrown when <pre><code> Os </code></pre> methods fail. This exception contains the native errno value, for comparison against the constants in <pre><code> OsConstants </code></pre> , should sophisticated callers need to adjust their behavior based on the exact failure.</p><pre><code>public final class ErrnoException\n</code></pre></section>	https://developer.android.com/reference/android/system/ErrnoException.html
Os	A										<section class="prog__container"><p> Access to low-level system functionality. Most of these are system calls. Most users will want to use higher-level APIs where available, but this class provides access to the underlying primitives used to implement the higher-level APIs. <p> The corresponding constants can be found in <pre><code> OsConstants </code></pre> . </p><pre><code>public final class Os\nextends Object</code></pre></section>	https://developer.android.com/reference/android/system/Os.html
OsConstants	A										<section class="prog__container"><p> Constants and helper functions for use with <pre><code> Os </code></pre> .</p><pre><code>public final class OsConstants\nextends Object</code></pre></section>	https://developer.android.com/reference/android/system/OsConstants.html
android.system	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/system/package-summary.html
StructPollfd	A										<section class="prog__container"><p> Used as an in/out parameter to <pre><code> poll(StructPollfd[], int) </code></pre> . Corresponds to C's <pre><code> struct pollfd </code></pre> from <pre><code> &lt;poll.h&gt; </code></pre> .</p><pre><code>public final class StructPollfd\nextends Object</code></pre></section>	https://developer.android.com/reference/android/system/StructPollfd.html
StructStat	A										<section class="prog__container"><p> File information returned by <pre><code> fstat(FileDescriptor) </code></pre> , <pre><code> lstat(String) </code></pre> , and <pre><code> stat(String) </code></pre> . Corresponds to C's <pre><code> struct stat </code></pre> from <pre><code> &lt;stat.h&gt; </code></pre> .</p><pre><code>public final class StructStat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/system/StructStat.html
StructStatVfs	A										<section class="prog__container"><p> File information returned by <pre><code> fstatvfs(FileDescriptor) </code></pre> and <pre><code> statvfs(String) </code></pre> .</p><pre><code>public final class StructStatVfs\nextends Object</code></pre></section>	https://developer.android.com/reference/android/system/StructStatVfs.html
StructUtsname	A										<section class="prog__container"><p> Information returned by <pre><code> uname() </code></pre> . Corresponds to C's <pre><code> struct utsname </code></pre> from <pre><code> &lt;sys/utsname.h&gt; </code></pre> .</p><pre><code>public final class StructUtsname\nextends Object</code></pre></section>	https://developer.android.com/reference/android/system/StructUtsname.html
Call.Callback	A										<section class="prog__container"><p> Defines callbacks which inform the <pre><code> InCallService </code></pre> of changes to a <pre><code> Call </code></pre> . These callbacks can originate from the Telecom framework, or a <pre><code> ConnectionService </code></pre> implementation. <p> You can handle these callbacks by extending the <pre><code> Call.Callback </code></pre> class and overriding the callbacks that your <pre><code> InCallService </code></pre> is interested in. The callback methods include the <pre><code> Call </code></pre> for which the callback applies, allowing reuse of a single instance of your <pre><code> Call.Callback </code></pre> implementation, if desired. <p> Use <pre><code> registerCallback(Callback) </code></pre> to register your callback(s). Ensure <pre><code> unregisterCallback(Callback) </code></pre> is called when you no longer require callbacks (typically in <pre><code> onCallRemoved(Call) </code></pre> ). Note: Callbacks which occur before you call <pre><code> registerCallback(Callback) </code></pre> will not reach your implementation of <pre><code> Call.Callback </code></pre> , so it is important to register your callback as soon as your <pre><code> InCallService </code></pre> is notified of a new call via <pre><code> onCallAdded(Call) </code></pre> . </p><pre><code>public static abstract class Call.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/Call.Callback.html
Call.Details	A										<section class="prog__container"><p> When set, prevents a video <pre><code> Call </code></pre> from being downgraded to an audio-only call.</p><pre><code>public static class Call.Details\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/Call.Details.html
Call	A										<section class="prog__container"><p> Represents an ongoing phone call that the in-call app should present to the user.</p><pre><code>public final class Call\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/Call.html
CallAudioState	A										<section class="prog__container"><p> Encapsulates the telecom audio state, including the current audio routing, supported audio routing and mute.</p><pre><code>public final class CallAudioState\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/CallAudioState.html
CallScreeningService.CallResponse.Builder	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public static class CallScreeningService.CallResponse.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/CallScreeningService.CallResponse.Builder.html
CallScreeningService.CallResponse	A										<section class="prog__container"><pre><code>public static class CallScreeningService.CallResponse\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/CallScreeningService.CallResponse.html
CallScreeningService	A										<section class="prog__container"><p> This service can be implemented by the default dialer (see <pre><code> getDefaultDialerPackage() </code></pre> ) to allow or disallow incoming calls before they are shown to a user. <p> Below is an example manifest registration for a <pre><code> CallScreeningService </code></pre> . <pre> <pre><code>&lt;service android:name="your.package.YourCallScreeningServiceImplementation" android:permission="android.permission.BIND_SCREENING_SERVICE"&gt; &lt;intent-filter&gt; &lt;action android:name="android.telecom.CallScreeningService"/&gt; &lt;/intent-filter&gt; &lt;/service&gt; </code></pre> </pre> </p><pre><code>public abstract class CallScreeningService\n</code></pre></section>	https://developer.android.com/reference/android/telecom/CallScreeningService.html
Conference	A										<section class="prog__container"><p> Represents a conference call which can contain any number of <pre><code> Connection </code></pre> objects.</p><pre><code>public abstract class Conference\n</code></pre></section>	https://developer.android.com/reference/android/telecom/Conference.html
Conferenceable	A										<section class="prog__container"><p> Interface used to identify entities with which another entity can participate in a conference call with. The <pre><code> ConnectionService </code></pre> implementation will only recognize <pre><code> Conferenceable </code></pre> s which are <pre><code> Connection </code></pre> s or <pre><code> Conference </code></pre> s.</p><pre><code>public abstract class Conferenceable\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/Conferenceable.html
Connection	A										<section class="prog__container"><p> Represents a phone call or connection to a remote endpoint that carries voice and/or video traffic. <p> Implementations create a custom subclass of <pre><code> Connection </code></pre> and return it to the framework as the return value of <pre><code> onCreateIncomingConnection(PhoneAccountHandle, ConnectionRequest) </code></pre> or <pre><code> onCreateOutgoingConnection(PhoneAccountHandle, ConnectionRequest) </code></pre> . Implementations are then responsible for updating the state of the <pre><code> Connection </code></pre> , and must call <pre><code> destroy() </code></pre> to signal to the framework that the <pre><code> Connection </code></pre> is no longer used and associated resources may be recovered. <p> Subclasses of <pre><code> Connection </code></pre> override the <pre><code> on* </code></pre> methods to provide the the <pre><code> ConnectionService </code></pre> 's implementation of calling functionality. The <pre><code> on* </code></pre> methods are called by Telecom to inform an instance of a <pre><code> Connection </code></pre> of actions specific to that <pre><code> Connection </code></pre> instance. <p> Basic call support requires overriding the following methods: <pre><code> onAnswer() </code></pre> , <pre><code> onDisconnect() </code></pre> , <pre><code> onReject() </code></pre> , <pre><code> onAbort() </code></pre> <p> Where a <pre><code> Connection </code></pre> has <pre><code> CAPABILITY_SUPPORT_HOLD </code></pre> , the <pre><code> onHold() </code></pre> and <pre><code> onUnhold() </code></pre> methods should be overridden to provide hold support for the <pre><code> Connection </code></pre> . <p> Where a <pre><code> Connection </code></pre> supports a variation of video calling (e.g. the <pre><code> CAPABILITY_SUPPORTS_VT_* </code></pre> capability bits), <pre><code> onAnswer(int) </code></pre> should be overridden to support answering a call as a video call. <p> Where a <pre><code> Connection </code></pre> has <pre><code> PROPERTY_IS_EXTERNAL_CALL </code></pre> and <pre><code> CAPABILITY_CAN_PULL_CALL </code></pre> , <pre><code> onPullExternalCall() </code></pre> should be overridden to provide support for pulling the external call. <p> Where a <pre><code> Connection </code></pre> supports conference calling <pre><code> onSeparate() </code></pre> should be overridden. <p> There are a number of other <pre><code> on* </code></pre> methods which a <pre><code> Connection </code></pre> can choose to implement, depending on whether it is concerned with the associated calls from Telecom. If, for example, call events from a <pre><code> InCallService </code></pre> are handled, <pre><code> onCallEvent(String, Bundle) </code></pre> should be overridden. Another example is <pre><code> onExtrasChanged(Bundle) </code></pre> , which should be overridden if the <pre><code> Connection </code></pre> wishes to make use of extra information provided via the <pre><code> putExtras(Bundle) </code></pre> and <pre><code> removeExtras(String) </code></pre> methods. </p><pre><code>public abstract class Connection\n</code></pre></section>	https://developer.android.com/reference/android/telecom/Connection.html
Connection.VideoProvider	A										<section class="prog__container"><p> Provides a means of controlling the video session associated with a <pre><code> Connection </code></pre> . <p> Implementations create a custom subclass of <pre><code> Connection.VideoProvider </code></pre> and the <pre><code> ConnectionService </code></pre> creates an instance sets it on the <pre><code> Connection </code></pre> using <pre><code> setVideoProvider(VideoProvider) </code></pre> . Any connection which supports video should set the <pre><code> Connection.VideoProvider </code></pre> . <p> The <pre><code> Connection.VideoProvider </code></pre> serves two primary purposes: it provides a means for Telecom and <pre><code> InCallService </code></pre> implementations to issue requests related to the video session; it provides a means for the <pre><code> ConnectionService </code></pre> to report events and information related to the video session to Telecom and the <pre><code> InCallService </code></pre> implementations. <p> <pre><code> InCallService </code></pre> implementations interact with the <pre><code> Connection.VideoProvider </code></pre> via <pre><code> InCallService.VideoCall </code></pre> . </p><pre><code>public static abstract class Connection.VideoProvider\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html
ConnectionRequest	A										<section class="prog__container"><p> Simple data container encapsulating a request to some entity to create a new <pre><code> Connection </code></pre> .</p><pre><code>public final class ConnectionRequest\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/ConnectionRequest.html
ConnectionService	A										<section class="prog__container"><p> An abstract service that should be implemented by any apps which can make phone calls (VoIP or otherwise) and want those calls to be integrated into the built-in phone app. Once implemented, the <pre><code> ConnectionService </code></pre> needs two additional steps before it will be integrated into the phone app: <p> 1. <i> Registration in AndroidManifest.xml </i> <br/> <pre> &lt;service android:name="com.example.package.MyConnectionService" android:label="@string/some_label_for_my_connection_service" android:permission="android.permission.BIND_TELECOM_CONNECTION_SERVICE"&gt; &lt;intent-filter&gt; &lt;action android:name="android.telecom.ConnectionService" /&gt; &lt;/intent-filter&gt; &lt;/service&gt; </pre> <p> 2. <i> Registration of <pre><code> PhoneAccount </code></pre> with <pre><code> TelecomManager </code></pre> . </i> <br/> See <pre><code> PhoneAccount </code></pre> and <pre><code> registerPhoneAccount(PhoneAccount) </code></pre> for more information. <p> Once registered and enabled by the user in the phone app settings, telecom will bind to a <pre><code> ConnectionService </code></pre> implementation when it wants that <pre><code> ConnectionService </code></pre> to place a call or the service has indicated that is has an incoming call through <pre><code> addNewIncomingCall(PhoneAccountHandle, Bundle) </code></pre> . The <pre><code> ConnectionService </code></pre> can then expect a call to <pre><code> onCreateIncomingConnection(PhoneAccountHandle, ConnectionRequest) </code></pre> or <pre><code> onCreateOutgoingConnection(PhoneAccountHandle, ConnectionRequest) </code></pre> wherein it should provide a new instance of a <pre><code> Connection </code></pre> object. It is through this <pre><code> Connection </code></pre> object that telecom receives state updates and the <pre><code> ConnectionService </code></pre> receives call-commands such as answer, reject, hold and disconnect. <p> When there are no more live calls, telecom will unbind from the <pre><code> ConnectionService </code></pre> . </p><pre><code>public abstract class ConnectionService\n</code></pre></section>	https://developer.android.com/reference/android/telecom/ConnectionService.html
DisconnectCause	A										<section class="prog__container"><p> Describes the cause of a disconnected call. This always includes a code describing the generic cause of the disconnect. Optionally, it may include a label and/or description to display to the user. It is the responsibility of the <pre><code> ConnectionService </code></pre> to provide localized versions of the label and description. It also may contain a reason for the disconnect, which is intended for logging and not for display to the user.</p><pre><code>public final class DisconnectCause\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/DisconnectCause.html
GatewayInfo	A										<section class="prog__container"><p> Encapsulated gateway address information for outgoing call. When calls are made, the system provides a facility to specify two addresses for the call: one to display as the address being dialed and a separate (gateway) address to actually dial. Telecom provides this information to <pre><code> ConnectionService </code></pre> s when placing the call as an instance of <pre><code> GatewayInfo </code></pre> . <p> The data consists of an address to call, an address to display and the package name of the service. This data is used in two ways: <ol> <li> Call the appropriate gateway address. <li> Display information about how the call is being routed to the user. </li> </li> </ol> </p><pre><code>public class GatewayInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/GatewayInfo.html
InCallService	A										<section class="prog__container"><p> This service is implemented by any app that wishes to provide the user-interface for managing phone calls. Telecom binds to this service while there exists a live (active or incoming) call, and uses it to notify the in-call app of any live and recently disconnected calls. An app must first be set as the default phone app (See <pre><code> getDefaultDialerPackage() </code></pre> ) before the telecom service will bind to its <pre><code> InCallService </code></pre> implementation. <p> Below is an example manifest registration for an <pre><code> InCallService </code></pre> . The meta-data ( <pre><code> METADATA_IN_CALL_SERVICE_UI </code></pre> ) indicates that this particular <pre><code> InCallService </code></pre> implementation intends to replace the built-in in-call UI. <pre> <pre><code>&lt;service android:name="your.package.YourInCallServiceImplementation" android:permission="android.permission.BIND_INCALL_SERVICE"&gt; &lt;meta-data android:name="android.telecom.IN_CALL_SERVICE_UI" android:value="true" /&gt; &lt;intent-filter&gt; &lt;action android:name="android.telecom.InCallService"/&gt; &lt;/intent-filter&gt; &lt;/service&gt; </code></pre> </pre> </p><pre><code>public abstract class InCallService\n</code></pre></section>	https://developer.android.com/reference/android/telecom/InCallService.html
InCallService.VideoCall.Callback	A										<section class="prog__container"><p> The <pre><code> InCallService </code></pre> extends this class to provide a means of receiving callbacks from the <pre><code> Connection.VideoProvider </code></pre> . <p> When the <pre><code> InCallService </code></pre> receives the <pre><code> onVideoCallChanged(Call, VideoCall) </code></pre> callback, it should create an instance its <pre><code> InCallService.VideoCall.Callback </code></pre> implementation and set it on the <pre><code> InCallService.VideoCall </code></pre> using <pre><code> registerCallback(Callback) </code></pre> . </p><pre><code>public static abstract class InCallService.VideoCall.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/InCallService.VideoCall.Callback.html
InCallService.VideoCall	A										<section class="prog__container"><p> Used to issue commands to the <pre><code> Connection.VideoProvider </code></pre> associated with a <pre><code> Call </code></pre> .</p><pre><code>public static abstract class InCallService.VideoCall\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html
android.telecom	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/telecom/package-summary.html
PhoneAccount.Builder	A										<section class="prog__container"><p> Helper class for creating a <pre><code> PhoneAccount </code></pre> .</p><pre><code>public static class PhoneAccount.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/PhoneAccount.Builder.html
PhoneAccount	A										<section class="prog__container"><p> Represents a distinct method to place or receive a phone call. Apps which can place calls and want those calls to be integrated into the dialer and in-call UI should build an instance of this class and register it with the system using <pre><code> TelecomManager </code></pre> . <p> <pre><code> TelecomManager </code></pre> uses registered <pre><code> PhoneAccount </code></pre> s to present the user with alternative options when placing a phone call. When building a <pre><code> PhoneAccount </code></pre> , the app should supply a valid <pre><code> PhoneAccountHandle </code></pre> that references the connection service implementation Telecom will use to interact with the app. </p><pre><code>public final class PhoneAccount\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/PhoneAccount.html
PhoneAccountHandle	A										<section class="prog__container"><p> The unique identifier for a <pre><code> PhoneAccount </code></pre> . A <pre><code> PhoneAccountHandle </code></pre> is made of two parts: <ul> <li> The component name of the associated connection service. </li> <li> A string identifier that is unique across <pre><code> PhoneAccountHandle </code></pre> s with the same component name. </li> </ul> Note: This Class requires a non-null <pre><code> ComponentName </code></pre> and <pre><code> UserHandle </code></pre> to operate properly. Passing in invalid parameters will generate a log warning. See <pre><code> PhoneAccount </code></pre> , <pre><code> TelecomManager </code></pre> .</p><pre><code>public final class PhoneAccountHandle\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/PhoneAccountHandle.html
RemoteConference.Callback	A										<section class="prog__container"><p> Callback base class for <pre><code> RemoteConference </code></pre> .</p><pre><code>public static abstract class RemoteConference.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/RemoteConference.Callback.html
RemoteConference	A										<section class="prog__container"><p> A conference provided to a <pre><code> ConnectionService </code></pre> by another <pre><code> ConnectionService </code></pre> through <pre><code> conferenceRemoteConnections(RemoteConnection, RemoteConnection) </code></pre> . Once created, a <pre><code> RemoteConference </code></pre> can be used to control the conference call or monitor changes through <pre><code> RemoteConnection.Callback </code></pre> .</p><pre><code>public final class RemoteConference\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/RemoteConference.html
RemoteConnection.Callback	A										<section class="prog__container"><p> Callback base class for <pre><code> RemoteConnection </code></pre> .</p><pre><code>public static abstract class RemoteConnection.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/RemoteConnection.Callback.html
RemoteConnection	A										<section class="prog__container"><p> A connection provided to a <pre><code> ConnectionService </code></pre> by another <pre><code> ConnectionService </code></pre> running in a different process.</p><pre><code>public final class RemoteConnection\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/RemoteConnection.html
RemoteConnection.VideoProvider.Callback	A										<section class="prog__container"><p> Callback class used by the <pre><code> RemoteConnection.VideoProvider </code></pre> to relay events from the <pre><code> Connection.VideoProvider </code></pre> .</p><pre><code>public static abstract class RemoteConnection.VideoProvider.Callback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/RemoteConnection.VideoProvider.Callback.html
RemoteConnection.VideoProvider	A										<section class="prog__container"><p> <pre><code> RemoteConnection.VideoProvider </code></pre> associated with a <pre><code> RemoteConnection </code></pre> . Used to receive video related events and control the video associated with a <pre><code> RemoteConnection </code></pre> .</p><pre><code>public static class RemoteConnection.VideoProvider\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/RemoteConnection.VideoProvider.html
StatusHints	A										<section class="prog__container"><p> Contains status label and icon displayed in the in-call UI.</p><pre><code>public final class StatusHints\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/StatusHints.html
TelecomManager	A										<section class="prog__container"><p> Provides access to information about active calls and registration/call-management functionality. Apps can use methods in this class to determine the current call state. <p> Apps do not instantiate this class directly; instead, they retrieve a reference to an instance through <pre><code> Context.getSystemService(Context.TELECOM_SERVICE) </code></pre> . <p> Note that access to some telecom information is permission-protected. Your app cannot access the protected information or gain access to protected functionality unless it has the appropriate permissions declared in its manifest file. Where permissions apply, they are noted in the method descriptions. </p><pre><code>public class TelecomManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/TelecomManager.html
VideoProfile.CameraCapabilities	A										<section class="prog__container"><p> Represents the camera capabilities important to a Video Telephony provider.</p><pre><code>public static final class VideoProfile.CameraCapabilities\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/VideoProfile.CameraCapabilities.html
VideoProfile	A										<section class="prog__container"><p> Represents attributes of video calls.</p><pre><code>public class VideoProfile\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telecom/VideoProfile.html
CarrierConfigManager	A										<section class="prog__container"><p> Provides access to telephony configuration values that are carrier-specific. <p> Users should obtain an instance of this class by calling <pre><code> mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE); </code></pre> </p><pre><code>public class CarrierConfigManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/CarrierConfigManager.html
CellIdentityCdma	A										<section class="prog__container"><p> CellIdentity is to represent a unique CDMA cell</p><pre><code>public final class CellIdentityCdma\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/CellIdentityCdma.html
CellIdentityGsm	A										<section class="prog__container"><p> CellIdentity to represent a unique GSM cell</p><pre><code>public final class CellIdentityGsm\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/CellIdentityGsm.html
CellIdentityLte	A										<section class="prog__container"><p> CellIdentity is to represent a unique LTE cell</p><pre><code>public final class CellIdentityLte\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/CellIdentityLte.html
CellIdentityWcdma	A										<section class="prog__container"><p> CellIdentity to represent a unique UMTS cell</p><pre><code>public final class CellIdentityWcdma\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/CellIdentityWcdma.html
CellInfo	A										<section class="prog__container"><p> Immutable cell information from a point in time.</p><pre><code>public abstract class CellInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/CellInfo.html
CellInfoCdma	A										<section class="prog__container"><p> Immutable cell information from a point in time.</p><pre><code>public final class CellInfoCdma\n</code></pre></section>	https://developer.android.com/reference/android/telephony/CellInfoCdma.html
CellInfoGsm	A										<section class="prog__container"><p> Immutable cell information from a point in time.</p><pre><code>public final class CellInfoGsm\n</code></pre></section>	https://developer.android.com/reference/android/telephony/CellInfoGsm.html
CellInfoLte	A										<section class="prog__container"><p> Immutable cell information from a point in time.</p><pre><code>public final class CellInfoLte\n</code></pre></section>	https://developer.android.com/reference/android/telephony/CellInfoLte.html
CellInfoWcdma	A										<section class="prog__container"><p> Immutable cell information from a point in time.</p><pre><code>public final class CellInfoWcdma\n</code></pre></section>	https://developer.android.com/reference/android/telephony/CellInfoWcdma.html
CellLocation	A										<section class="prog__container"><pre><code>public abstract class CellLocation\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/CellLocation.html
CellSignalStrength	A										<section class="prog__container"><p> Abstract base class for cell phone signal strength related information.</p><pre><code>public abstract class CellSignalStrength\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/CellSignalStrength.html
CellSignalStrengthCdma	A										<section class="prog__container"><p> Signal strength related information.</p><pre><code>public final class CellSignalStrengthCdma\n</code></pre></section>	https://developer.android.com/reference/android/telephony/CellSignalStrengthCdma.html
CellSignalStrengthGsm	A										<section class="prog__container"><p> GSM signal strength related information.</p><pre><code>public final class CellSignalStrengthGsm\n</code></pre></section>	https://developer.android.com/reference/android/telephony/CellSignalStrengthGsm.html
CellSignalStrengthLte	A										<section class="prog__container"><p> LTE signal strength related information.</p><pre><code>public final class CellSignalStrengthLte\n</code></pre></section>	https://developer.android.com/reference/android/telephony/CellSignalStrengthLte.html
CellSignalStrengthWcdma	A										<section class="prog__container"><p> Wcdma signal strength related information.</p><pre><code>public final class CellSignalStrengthWcdma\n</code></pre></section>	https://developer.android.com/reference/android/telephony/CellSignalStrengthWcdma.html
IccOpenLogicalChannelResponse	A										<section class="prog__container"><p> Response to the <pre><code> iccOpenLogicalChannel(String) </code></pre> command.</p><pre><code>public class IccOpenLogicalChannelResponse\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/IccOpenLogicalChannelResponse.html
NeighboringCellInfo	A										<section class="prog__container"><p> Represents the neighboring cell information, including Received Signal Strength and Cell ID location.</p><pre><code>public class NeighboringCellInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/NeighboringCellInfo.html
android.telephony	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/telephony/package-summary.html
PhoneNumberFormattingTextWatcher	A										<section class="prog__container"><p> Watches a <pre><code> TextView </code></pre> and if a phone number is entered will format it. <p> Stop formatting when the user <ul> <li> Inputs non-dialable characters </li> <li> Removes the separator in the middle of string. </li> </ul> <p> The formatting will be restarted once the text is cleared. </p><pre><code>public class PhoneNumberFormattingTextWatcher\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/PhoneNumberFormattingTextWatcher.html
PhoneNumberUtils	A										<section class="prog__container"><p> Various utilities for dealing with phone number strings.</p><pre><code>public class PhoneNumberUtils\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/PhoneNumberUtils.html
PhoneStateListener	A										<section class="prog__container"><p> A listener class for monitoring changes in specific telephony states on the device, including service state, signal strength, message waiting indicator (voicemail), and others. <p> Override the methods for the state that you wish to receive updates for, and pass your PhoneStateListener object, along with bitwise-or of the LISTEN_ flags to <pre><code> TelephonyManager.listen() </code></pre> . <p> Note that access to some telephony information is permission-protected. Your application won't receive updates for protected information unless it has the appropriate permissions declared in its manifest file. Where permissions apply, they are noted in the appropriate LISTEN_ flags. </p><pre><code>public class PhoneStateListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/PhoneStateListener.html
ServiceState	A										<section class="prog__container"><p> Contains phone state and service related information. The following phone information is included in returned ServiceState: <ul> <li> Service state: IN_SERVICE, OUT_OF_SERVICE, EMERGENCY_ONLY, POWER_OFF <li> Roaming indicator <li> Operator name, short name and numeric id <li> Network selection mode </li> </li> </li> </li> </ul></p><pre><code>public class ServiceState\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/ServiceState.html
SignalStrength	A										<section class="prog__container"><p> Contains phone signal strength related information.</p><pre><code>public class SignalStrength\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/SignalStrength.html
SmsManager	A										<section class="prog__container"><p> Manages SMS operations such as sending data, text, and pdu SMS messages. Get this object by calling the static method <pre><code> getDefault() </code></pre> . <p> For information about how to behave as the default SMS app on Android 4.4 (API level 19) and higher, see <pre><code> Telephony </code></pre> . </p><pre><code>public final class SmsManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/SmsManager.html
SmsMessage	A										<section class="prog__container"><p> A Short Message Service message.</p><pre><code>public class SmsMessage\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/SmsMessage.html
SmsMessage.MessageClass	A										<section class="prog__container"><p> SMS Class enumeration. See TS 23.038.</p><pre><code>public static final enum SmsMessage.MessageClass\n</code></pre></section>	https://developer.android.com/reference/android/telephony/SmsMessage.MessageClass.html
SmsMessage.SubmitPdu	A										<section class="prog__container"><pre><code>public static class SmsMessage.SubmitPdu\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/SmsMessage.SubmitPdu.html
SubscriptionInfo	A										<section class="prog__container"><p> A Parcelable class for Subscription Information.</p><pre><code>public class SubscriptionInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/SubscriptionInfo.html
SubscriptionManager	A										<section class="prog__container"><p> SubscriptionManager is the application interface to SubscriptionController and provides information about the current Telephony Subscriptions. * <p> You do not instantiate this class directly; instead, you retrieve a reference to an instance through <pre><code> from(Context) </code></pre> . <p> All SDK public methods require android.Manifest.permission.READ_PHONE_STATE. </p><pre><code>public class SubscriptionManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/SubscriptionManager.html
SubscriptionManager.OnSubscriptionsChangedListener	A										<section class="prog__container"><p> A listener class for monitoring changes to <pre><code> SubscriptionInfo </code></pre> records. <p> Override the onSubscriptionsChanged method in the object that extends this class and pass it to <pre><code> addOnSubscriptionsChangedListener(OnSubscriptionsChangedListener) </code></pre> to register your listener and to unregister invoke <pre><code> removeOnSubscriptionsChangedListener(OnSubscriptionsChangedListener) </code></pre> <p> Permissions android.Manifest.permission.READ_PHONE_STATE is required for #onSubscriptionsChanged to be invoked. </p><pre><code>public static class SubscriptionManager.OnSubscriptionsChangedListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/SubscriptionManager.OnSubscriptionsChangedListener.html
TelephonyManager	A										<section class="prog__container"><p> Provides access to information about the telephony services on the device. Applications can use the methods in this class to determine telephony services and states, as well as to access some types of subscriber information. Applications can also register a listener to receive notification of telephony state changes. <p> You do not instantiate this class directly; instead, you retrieve a reference to an instance through <pre><code> Context.getSystemService(Context.TELEPHONY_SERVICE) </code></pre> . The returned TelephonyManager will use the default subscription for all calls. To call an API for a specific subscription, use <pre><code> createForSubscriptionId(int) </code></pre> . e.g. <pre><code> telephonyManager = defaultSubTelephonyManager.createForSubscriptionId(subId); </code></pre> <p> Note that access to some telephony information is permission-protected. Your application cannot access the protected information unless it has the appropriate permissions declared in its manifest file. Where permissions apply, they are noted in the the methods through which you access the protected information. </p><pre><code>public class TelephonyManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/TelephonyManager.html
CdmaCellLocation	A										<section class="prog__container"><p> Represents the cell location on a CDMA phone.</p><pre><code>public class CdmaCellLocation\n</code></pre></section>	https://developer.android.com/reference/android/telephony/cdma/CdmaCellLocation.html
android.telephony.cdma	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/telephony/cdma/package-summary.html
GsmCellLocation	A										<section class="prog__container"><p> Represents the cell location on a GSM phone.</p><pre><code>public class GsmCellLocation\n</code></pre></section>	https://developer.android.com/reference/android/telephony/gsm/GsmCellLocation.html
android.telephony.gsm	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/telephony/gsm/package-summary.html
SmsManager	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 4. </strong> <br/> Replaced by android.telephony.SmsManager that supports both GSM and CDMA. </p><pre><code>public final class SmsManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/gsm/SmsManager.html
SmsMessage	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 4. </strong> <br/> Replaced by android.telephony.SmsMessage that supports both GSM and CDMA. </p><pre><code>public class SmsMessage\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/gsm/SmsMessage.html
SmsMessage.MessageClass	A										<section class="prog__container"><p> <p class="caution"> <strong> This enum was deprecated in API level 4. </strong> <br/> Use android.telephony.SmsMessage. </p><pre><code>public static final enum SmsMessage.MessageClass\n</code></pre></section>	https://developer.android.com/reference/android/telephony/gsm/SmsMessage.MessageClass.html
SmsMessage.SubmitPdu	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 4. </strong> <br/> Use android.telephony.SmsMessage. </p><pre><code>public static class SmsMessage.SubmitPdu\nextends Object</code></pre></section>	https://developer.android.com/reference/android/telephony/gsm/SmsMessage.SubmitPdu.html
ActivityInstrumentationTestCase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 3. </strong> <br/> new tests should be written using <pre><code> ActivityInstrumentationTestCase2 </code></pre> , which provides more options for configuring the Activity under test </p><pre><code>public abstract class ActivityInstrumentationTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/ActivityInstrumentationTestCase.html
ActivityInstrumentationTestCase2	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use ActivityTestRule instead. New tests should be written using the Android Testing Support Library . </p><pre><code>public abstract class ActivityInstrumentationTestCase2\n</code></pre></section>	https://developer.android.com/reference/android/test/ActivityInstrumentationTestCase2.html
ActivityTestCase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> New tests should be written using the Android Testing Support Library . </p><pre><code>public abstract class ActivityTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/ActivityTestCase.html
ActivityUnitTestCase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Write Local Unit Tests instead. </p><pre><code>public abstract class ActivityUnitTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/ActivityUnitTestCase.html
AndroidTestCase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use InstrumentationRegistry instead. New tests should be written using the Android Testing Support Library . </p><pre><code>public class AndroidTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/AndroidTestCase.html
AndroidTestRunner	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use AndroidJUnitRunner instead. New tests should be written using the Android Testing Support Library . </p><pre><code>public class AndroidTestRunner\n</code></pre></section>	https://developer.android.com/reference/android/test/AndroidTestRunner.html
ApplicationTestCase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use InstrumentationRegistry instead. New tests should be written using the Android Testing Support Library . </p><pre><code>public abstract class ApplicationTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/ApplicationTestCase.html
AssertionFailedError	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 16. </strong> <br/> use junit.framework.AssertionFailedError </p><pre><code>public class AssertionFailedError\n</code></pre></section>	https://developer.android.com/reference/android/test/AssertionFailedError.html
ComparisonFailure	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 16. </strong> <br/> use junit.framework.ComparisonFailure </p><pre><code>public class ComparisonFailure\n</code></pre></section>	https://developer.android.com/reference/android/test/ComparisonFailure.html
FlakyTest	A										<section class="prog__container"><p> <p class="caution"> <strong> This @interface was deprecated in API level 24. </strong> <br/> Use FlakyTest instead. New tests should be written using the Android Testing Support Library . </p><pre><code>public abstract @interface FlakyTest\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/test/FlakyTest.html
InstrumentationTestCase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use InstrumentationRegistry instead. New tests should be written using the Android Testing Support Library . </p><pre><code>public class InstrumentationTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/InstrumentationTestCase.html
InstrumentationTestRunner	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use AndroidJUnitRunner instead. New tests should be written using the Android Testing Support Library . </p><pre><code>public class InstrumentationTestRunner\n</code></pre></section>	https://developer.android.com/reference/android/test/InstrumentationTestRunner.html
InstrumentationTestSuite	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use InstrumentationRegistry instead. New tests should be written using the Android Testing Support Library . </p><pre><code>public class InstrumentationTestSuite\n</code></pre></section>	https://developer.android.com/reference/android/test/InstrumentationTestSuite.html
IsolatedContext	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> New tests should be written using the Android Testing Support Library . </p><pre><code>public class IsolatedContext\n</code></pre></section>	https://developer.android.com/reference/android/test/IsolatedContext.html
LoaderTestCase	A										<section class="prog__container"><p> A convenience class for testing <pre><code> Loader </code></pre> s. This test case provides a simple way to synchronously get the result from a Loader making it easy to assert that the Loader returns the expected result.</p><pre><code>public class LoaderTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/LoaderTestCase.html
MoreAsserts	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use Hamcrest matchers instead. </p><pre><code>public final class MoreAsserts\nextends Object</code></pre></section>	https://developer.android.com/reference/android/test/MoreAsserts.html
android.test	A										<section class="prog__container">A framework for writing Android test cases and suites.</section>	https://developer.android.com/reference/android/test/package-summary.html
PerformanceTestCase	A										<section class="prog__container"><p> More complex interface performance for test cases. If you want your test to be used as a performance test, you must implement this interface.</p><pre><code>public interface PerformanceTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/PerformanceTestCase.html
PerformanceTestCase.Intermediates	A										<section class="prog__container"><p> Callbacks for <pre><code> PerformanceTestCase </code></pre> .</p><pre><code>public static interface PerformanceTestCase.Intermediates\n</code></pre></section>	https://developer.android.com/reference/android/test/PerformanceTestCase.Intermediates.html
ProviderTestCase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 3. </strong> <br/> this class extends InstrumentationTestCase but should extend AndroidTestCase. Use ProviderTestCase2, which corrects this problem, instead. </p><pre><code>public abstract class ProviderTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/ProviderTestCase.html
ProviderTestCase2	A										<section class="prog__container"><p> This test case class provides a framework for testing a single <pre><code> ContentProvider </code></pre> and for testing your app code with an isolated content provider. Instead of using the system map of providers that is based on the manifests of other applications, the test case creates its own internal map. It then uses this map to resolve providers given an authority. This allows you to inject test providers and to null out providers that you do not want to use. <p> This test case also sets up the following mock objects: </p><pre><code>public abstract class ProviderTestCase2\n</code></pre></section>	https://developer.android.com/reference/android/test/ProviderTestCase2.html
RenamingDelegatingContext	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> New tests should be written using the Android Testing Support Library . </p><pre><code>public class RenamingDelegatingContext\n</code></pre></section>	https://developer.android.com/reference/android/test/RenamingDelegatingContext.html
ServiceTestCase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use ServiceTestRule instead. New tests should be written using the Android Testing Support Library . </p><pre><code>public abstract class ServiceTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/ServiceTestCase.html
SingleLaunchActivityTestCase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use ActivityTestRule instead. New tests should be written using the Android Testing Support Library . </p><pre><code>public abstract class SingleLaunchActivityTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/SingleLaunchActivityTestCase.html
SyncBaseInstrumentation	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use InstrumentationRegistry instead. New tests should be written using the Android Testing Support Library . </p><pre><code>public class SyncBaseInstrumentation\n</code></pre></section>	https://developer.android.com/reference/android/test/SyncBaseInstrumentation.html
TestSuiteProvider	A										<section class="prog__container"><p> Implementors will know how to get a test suite.</p><pre><code>public interface TestSuiteProvider\n</code></pre></section>	https://developer.android.com/reference/android/test/TestSuiteProvider.html
TouchUtils	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use Espresso UI testing framework instead. New tests should be written using the Android Testing Support Library . </p><pre><code>public class TouchUtils\nextends Object</code></pre></section>	https://developer.android.com/reference/android/test/TouchUtils.html
UiThreadTest	A										<section class="prog__container"><p> <p class="caution"> <strong> This @interface was deprecated in API level 24. </strong> <br/> Use UiThreadTest instead. New tests should be written using the Android Testing Support Library . </p><pre><code>public abstract @interface UiThreadTest\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/test/UiThreadTest.html
ViewAsserts	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use Espresso View Matchers instead. New test should be written using the Android Testing Support Library . For more information about UI testing, take the Espresso UI testing training. </p><pre><code>public class ViewAsserts\nextends Object</code></pre></section>	https://developer.android.com/reference/android/test/ViewAsserts.html
MockApplication	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use a mocking framework like Mockito . New tests should be written using the Android Testing Support Library . </p><pre><code>public class MockApplication\n</code></pre></section>	https://developer.android.com/reference/android/test/mock/MockApplication.html
MockContentProvider	A										<section class="prog__container"><p> Mock implementation of ContentProvider. All methods are non-functional and throw <pre><code> UnsupportedOperationException </code></pre> . Tests can extend this class to implement behavior needed for tests.</p><pre><code>public class MockContentProvider\n</code></pre></section>	https://developer.android.com/reference/android/test/mock/MockContentProvider.html
MockContentResolver	A										<section class="prog__container"><p> <p> An extension of <pre><code> ContentResolver </code></pre> that is designed for testing. </p><pre><code>public class MockContentResolver\n</code></pre></section>	https://developer.android.com/reference/android/test/mock/MockContentResolver.html
MockContext	A										<section class="prog__container"><p> A mock <pre><code> Context </code></pre> class. All methods are non-functional and throw <pre><code> UnsupportedOperationException </code></pre> . You can use this to inject other dependencies, mocks, or monitors into the classes you are testing.</p><pre><code>public class MockContext\n</code></pre></section>	https://developer.android.com/reference/android/test/mock/MockContext.html
MockCursor	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use a mocking framework like Mockito . New tests should be written using the Android Testing Support Library . </p><pre><code>public class MockCursor\nextends Object</code></pre></section>	https://developer.android.com/reference/android/test/mock/MockCursor.html
MockDialogInterface	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use a mocking framework like Mockito . New tests should be written using the Android Testing Support Library . </p><pre><code>public class MockDialogInterface\nextends Object</code></pre></section>	https://developer.android.com/reference/android/test/mock/MockDialogInterface.html
MockPackageManager	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use a mocking framework like Mockito . New tests should be written using the Android Testing Support Library . </p><pre><code>public class MockPackageManager\n</code></pre></section>	https://developer.android.com/reference/android/test/mock/MockPackageManager.html
MockResources	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use a mocking framework like Mockito . New tests should be written using the Android Testing Support Library . </p><pre><code>public class MockResources\n</code></pre></section>	https://developer.android.com/reference/android/test/mock/MockResources.html
android.test.mock	A										<section class="prog__container">Utility classes providing stubs or mocks of various Android framework building blocks.</section>	https://developer.android.com/reference/android/test/mock/package-summary.html
android.test.suitebuilder	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/test/suitebuilder/package-summary.html
TestMethod	A										<section class="prog__container"><p> Represents a test to be run. Can be constructed without instantiating the TestCase or even loading the class.</p><pre><code>public class TestMethod\nextends Object</code></pre></section>	https://developer.android.com/reference/android/test/suitebuilder/TestMethod.html
TestSuiteBuilder.FailedToCreateTests	A										<section class="prog__container"><p> A special <pre><code> TestCase </code></pre> used to indicate a failure during the build() step.</p><pre><code>public static class TestSuiteBuilder.FailedToCreateTests\n</code></pre></section>	https://developer.android.com/reference/android/test/suitebuilder/TestSuiteBuilder.FailedToCreateTests.html
TestSuiteBuilder	A										<section class="prog__container"><p> Build suites based on a combination of included packages, excluded packages, and predicates that must be satisfied.</p><pre><code>public class TestSuiteBuilder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/test/suitebuilder/TestSuiteBuilder.html
LargeTest	A										<section class="prog__container"><p> <p class="caution"> <strong> This @interface was deprecated in API level 24. </strong> <br/> Use LargeTest instead. New tests should be written using the Android Testing Support Library . </p><pre><code>public abstract @interface LargeTest\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/test/suitebuilder/annotation/LargeTest.html
MediumTest	A										<section class="prog__container"><p> <p class="caution"> <strong> This @interface was deprecated in API level 24. </strong> <br/> Use MediumTest instead. New tests should be written using the Android Testing Support Library . </p><pre><code>public abstract @interface MediumTest\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/test/suitebuilder/annotation/MediumTest.html
android.test.suitebuilder.annotation	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/test/suitebuilder/annotation/package-summary.html
SmallTest	A										<section class="prog__container"><p> <p class="caution"> <strong> This @interface was deprecated in API level 24. </strong> <br/> Use SmallTest instead. New tests should be written using the Android Testing Support Library . </p><pre><code>public abstract @interface SmallTest\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/test/suitebuilder/annotation/SmallTest.html
Smoke	A										<section class="prog__container"><p> <p class="caution"> <strong> This @interface was deprecated in API level 24. </strong> <br/> New tests should be written using the Android Testing Support Library . </p><pre><code>public abstract @interface Smoke\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/test/suitebuilder/annotation/Smoke.html
Suppress	A										<section class="prog__container"><p> <p class="caution"> <strong> This @interface was deprecated in API level 24. </strong> <br/> Use Suppress instead. New tests should be written using the Android Testing Support Library . </p><pre><code>public abstract @interface Suppress\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/test/suitebuilder/annotation/Suppress.html
AlteredCharSequence	A										<section class="prog__container"><p> An AlteredCharSequence is a CharSequence that is largely mirrored from another CharSequence, except that a specified range of characters are mirrored from a different char array instead.</p><pre><code>public class AlteredCharSequence\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/AlteredCharSequence.html
AndroidCharacter	A										<section class="prog__container"><p> AndroidCharacter exposes some character properties that are not easily accessed from java.lang.Character.</p><pre><code>public class AndroidCharacter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/AndroidCharacter.html
Annotation	A										<section class="prog__container"><p> Annotations are simple key-value pairs that are preserved across TextView save/restore cycles and can be used to keep application-specific data that needs to be maintained for regions of text.</p><pre><code>public class Annotation\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/Annotation.html
AutoText	A										<section class="prog__container"><p> This class accesses a dictionary of corrections to frequent misspellings.</p><pre><code>public class AutoText\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/AutoText.html
BidiFormatter.Builder	A										<section class="prog__container"><p> A class for building a BidiFormatter with non-default options.</p><pre><code>public static final class BidiFormatter.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/BidiFormatter.Builder.html
BidiFormatter	A										<section class="prog__container"><p> Utility class for formatting text for display in a potentially opposite-directionality context without garbling. The directionality of the context is set at formatter creation and the directionality of the text can be either estimated or passed in when known. <p> To support versions lower than <pre><code> JELLY_BEAN_MR2 </code></pre> , you can use the support library's <pre><code> BidiFormatter </code></pre> class. <p> These APIs provides the following functionality: <p> 1. Bidi Wrapping When text in one language is mixed into a document in another, opposite-directionality language, e.g. when an English business name is embedded in some Hebrew text, both the inserted string and the text surrounding it may be displayed incorrectly unless the inserted string is explicitly separated from the surrounding text in a "wrapper" that: <p> - Declares its directionality so that the string is displayed correctly. This can be done in Unicode bidi formatting codes by <pre><code> unicodeWrap(String) </code></pre> and similar methods. <p> - Isolates the string's directionality, so it does not unduly affect the surrounding content. Currently, this can only be done using invisible Unicode characters of the same direction as the context (LRM or RLM) in addition to the directionality declaration above, thus "resetting" the directionality to that of the context. The "reset" may need to be done at both ends of the string. Without "reset" after the string, the string will "stick" to a number or logically separate opposite-direction text that happens to follow it in-line (even if separated by neutral content like spaces and punctuation). Without "reset" before the string, the same can happen there, but only with more opposite-direction text, not a number. One approach is to "reset" the direction only after each string, on the theory that if the preceding opposite- direction text is itself bidi-wrapped, the "reset" after it will prevent the sticking. (Doing the "reset" only before each string definitely does not work because we do not want to require bidi-wrapping numbers, and a bidi-wrapped opposite-direction string could be followed by a number.) Still, the safest policy is to do the "reset" on both ends of each string, since RTL message translations often contain untranslated Latin-script brand names and technical terms, and one of these can be followed by a bidi-wrapped inserted value. On the other hand, when one has such a message, it is best to do the "reset" manually in the message translation itself, since the message's opposite-direction text could be followed by an inserted number, which we would not bidi-wrap anyway. Thus, "reset" only after the string is the current default. In an alternative to "reset", recent additions to the HTML, CSS, and Unicode standards allow the isolation to be part of the directionality declaration. This form of isolation is better than "reset" because it takes less space, does not require knowing the context directionality, has a gentler effect than "reset", and protects both ends of the string. However, we do not yet allow using it because required platforms do not yet support it. <p> Providing these wrapping services is the basic purpose of the bidi formatter. <p> 2. Directionality estimation How does one know whether a string about to be inserted into surrounding text has the same directionality? Well, in many cases, one knows that this must be the case when writing the code doing the insertion, e.g. when a localized message is inserted into a localized page. In such cases there is no need to involve the bidi formatter at all. In some other cases, it need not be the same as the context, but is either constant (e.g. urls are always LTR) or otherwise known. In the remaining cases, e.g. when the string is user-entered or comes from a database, the language of the string (and thus its directionality) is not known a priori, and must be estimated at run-time. The bidi formatter can do this automatically using the default first-strong estimation algorithm. It can also be configured to use a custom directionality estimation object. </p><pre><code>public final class BidiFormatter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/BidiFormatter.html
BoringLayout	A										<section class="prog__container"><p> A BoringLayout is a very simple Layout implementation for text that fits on a single line and is all left-to-right characters. You will probably never want to make one of these yourself; if you do, be sure to call <pre><code> isBoring(CharSequence, TextPaint) </code></pre> first to make sure the text meets the criteria. <p> This class is used by widgets to control text layout. You should not need to use this class directly unless you are implementing your own widget or custom display object, in which case you are encouraged to use a Layout instead of calling <pre><code> Canvas.drawText() </code></pre> directly. </p><pre><code>public class BoringLayout\n</code></pre></section>	https://developer.android.com/reference/android/text/BoringLayout.html
BoringLayout.Metrics	A										<section class="prog__container"><pre><code>public static class BoringLayout.Metrics\n</code></pre></section>	https://developer.android.com/reference/android/text/BoringLayout.Metrics.html
ClipboardManager	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 11. </strong> <br/> Old text-only interface to the clipboard. See <pre><code> ClipboardManager </code></pre> for the modern API. </p><pre><code>public abstract class ClipboardManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/ClipboardManager.html
DynamicLayout	A										<section class="prog__container"><p> DynamicLayout is a text layout that updates itself as the text is edited. <p> This is used by widgets to control text layout. You should not need to use this class directly unless you are implementing your own widget or custom display object, or need to call <pre><code> Canvas.drawText() </code></pre> directly. </p><pre><code>public class DynamicLayout\n</code></pre></section>	https://developer.android.com/reference/android/text/DynamicLayout.html
Editable.Factory	A										<section class="prog__container"><p> Factory used by TextView to create new Editables. You can subclass it to provide something other than SpannableStringBuilder.</p><pre><code>public static class Editable.Factory\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/Editable.Factory.html
Editable	A										<section class="prog__container"><p> This is the interface for text whose content and markup can be changed (as opposed to immutable text like Strings). If you make a <pre><code> DynamicLayout </code></pre> of an Editable, the layout will be reflowed as the text is changed.</p><pre><code>public interface Editable\nimplements CharSequence, GetChars, Spannable, Appendable</code></pre></section>	https://developer.android.com/reference/android/text/Editable.html
GetChars	A										<section class="prog__container"><p> Please implement this interface if your CharSequence has a getChars() method like the one in String that is faster than calling charAt() multiple times.</p><pre><code>public interface GetChars\nimplements CharSequence</code></pre></section>	https://developer.android.com/reference/android/text/GetChars.html
Html	A										<section class="prog__container"><p> This class processes HTML strings into displayable styled text. Not all HTML tags are supported.</p><pre><code>public class Html\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/Html.html
Html.ImageGetter	A										<section class="prog__container"><p> Retrieves images for HTML &lt;img&gt; tags.</p><pre><code>public static interface Html.ImageGetter\n</code></pre></section>	https://developer.android.com/reference/android/text/Html.ImageGetter.html
Html.TagHandler	A										<section class="prog__container"><p> Is notified when HTML tags are encountered that the parser does not know how to interpret.</p><pre><code>public static interface Html.TagHandler\n</code></pre></section>	https://developer.android.com/reference/android/text/Html.TagHandler.html
InputFilter.AllCaps	A										<section class="prog__container"><p> This filter will capitalize all the lower case letters that are added through edits.</p><pre><code>public static class InputFilter.AllCaps\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/InputFilter.AllCaps.html
InputFilter	A										<section class="prog__container"><p> InputFilters can be attached to <pre><code> Editable </code></pre> s to constrain the changes that can be made to them.</p><pre><code>public interface InputFilter\n</code></pre></section>	https://developer.android.com/reference/android/text/InputFilter.html
InputFilter.LengthFilter	A										<section class="prog__container"><p> This filter will constrain edits not to make the length of the text greater than the specified length.</p><pre><code>public static class InputFilter.LengthFilter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/InputFilter.LengthFilter.html
InputType	A										<section class="prog__container"><p> Bit definitions for an integer defining the basic content type of text held in an <pre><code> Editable </code></pre> object. Supported classes may be combined with variations and flags to indicate desired behaviors. </p><pre><code>public interface InputType\n</code></pre></section>	https://developer.android.com/reference/android/text/InputType.html
Layout.Alignment	A										<section class="prog__container"><pre><code>public static final enum Layout.Alignment\n</code></pre></section>	https://developer.android.com/reference/android/text/Layout.Alignment.html
Layout.Directions	A										<section class="prog__container"><p> Stores information about bidirectional (left-to-right or right-to-left) text within the layout of a line.</p><pre><code>public static class Layout.Directions\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/Layout.Directions.html
Layout	A										<section class="prog__container"><p> A base class that manages text layout in visual elements on the screen. <p> For text that will be edited, use a <pre><code> DynamicLayout </code></pre> , which will be updated as the text changes. For text that will not change, use a <pre><code> StaticLayout </code></pre> . </p><pre><code>public abstract class Layout\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/Layout.html
LoginFilter	A										<section class="prog__container"><p> Abstract class for filtering login-related text (user names and passwords)</p><pre><code>public abstract class LoginFilter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/LoginFilter.html
LoginFilter.PasswordFilterGMail	A										<section class="prog__container"><p> This filter is compatible with GMail passwords which restricts characters to the Latin-1 (ISO8859-1) char set.</p><pre><code>public static class LoginFilter.PasswordFilterGMail\n</code></pre></section>	https://developer.android.com/reference/android/text/LoginFilter.PasswordFilterGMail.html
LoginFilter.UsernameFilterGeneric	A										<section class="prog__container"><p> This filter rejects characters in the user name that are not compatible with Google login. It is slightly less restrictive than the above filter in that it allows [a-zA-Z0-9._-+].</p><pre><code>public static class LoginFilter.UsernameFilterGeneric\n</code></pre></section>	https://developer.android.com/reference/android/text/LoginFilter.UsernameFilterGeneric.html
LoginFilter.UsernameFilterGMail	A										<section class="prog__container"><p> This filter rejects characters in the user name that are not compatible with GMail account creation. It prevents the user from entering user names with characters other than [a-zA-Z0-9.].</p><pre><code>public static class LoginFilter.UsernameFilterGMail\n</code></pre></section>	https://developer.android.com/reference/android/text/LoginFilter.UsernameFilterGMail.html
NoCopySpan.Concrete	A										<section class="prog__container"><p> Convenience equivalent for when you would just want a new Object() for a span but want it to be no-copy. Use this instead.</p><pre><code>public static class NoCopySpan.Concrete\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/NoCopySpan.Concrete.html
NoCopySpan	A										<section class="prog__container"><p> This interface should be added to a span object that should not be copied into a new Spanned when performing a slice or copy operation on the original Spanned it was placed in.</p><pre><code>public interface NoCopySpan\n</code></pre></section>	https://developer.android.com/reference/android/text/NoCopySpan.html
android.text	A										<section class="prog__container">Provides classes used to render or track text and text spans on the screen.</section>	https://developer.android.com/reference/android/text/package-summary.html
ParcelableSpan	A										<section class="prog__container"><p> A special kind of Parcelable for objects that will serve as text spans. This can only be used by code in the framework; it is not intended for applications to implement their own Parcelable spans.</p><pre><code>public interface ParcelableSpan\nimplements Parcelable</code></pre></section>	https://developer.android.com/reference/android/text/ParcelableSpan.html
Selection	A										<section class="prog__container"><p> Utility class for manipulating cursors and selections in CharSequences. A cursor is a selection where the start and end are at the same offset.</p><pre><code>public class Selection\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/Selection.html
Spannable.Factory	A										<section class="prog__container"><p> Factory used by TextView to create new Spannables. You can subclass it to provide something other than SpannableString.</p><pre><code>public static class Spannable.Factory\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/Spannable.Factory.html
Spannable	A										<section class="prog__container"><p> This is the interface for text to which markup objects can be attached and detached. Not all Spannable classes have mutable text; see <pre><code> Editable </code></pre> for that.</p><pre><code>public interface Spannable\nimplements Spanned</code></pre></section>	https://developer.android.com/reference/android/text/Spannable.html
SpannableString	A										<section class="prog__container"><p> This is the class for text whose content is immutable but to which markup objects can be attached and detached. For mutable text, see <pre><code> SpannableStringBuilder </code></pre> .</p><pre><code>public class SpannableString\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/SpannableString.html
SpannableStringBuilder	A										<section class="prog__container"><p> This is the class for text whose content and markup can both be changed.</p><pre><code>public class SpannableStringBuilder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/SpannableStringBuilder.html
Spanned	A										<section class="prog__container"><p> This is the interface for text that has markup objects attached to ranges of it. Not all text classes have mutable markup or text; see <pre><code> Spannable </code></pre> for mutable markup and <pre><code> Editable </code></pre> for mutable text.</p><pre><code>public interface Spanned\nimplements CharSequence</code></pre></section>	https://developer.android.com/reference/android/text/Spanned.html
SpannedString	A										<section class="prog__container"><p> This is the class for text whose content and markup are immutable. For mutable markup, see <pre><code> SpannableString </code></pre> ; for mutable text, see <pre><code> SpannableStringBuilder </code></pre> .</p><pre><code>public final class SpannedString\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/SpannedString.html
SpanWatcher	A										<section class="prog__container"><p> When an object of this type is attached to a Spannable, its methods will be called to notify it that other markup objects have been added, changed, or removed.</p><pre><code>public interface SpanWatcher\nimplements NoCopySpan</code></pre></section>	https://developer.android.com/reference/android/text/SpanWatcher.html
StaticLayout.Builder	A										<section class="prog__container"><p> Builder for static layouts. The builder is a newer pattern for constructing StaticLayout objects and should be preferred over the constructors, particularly to access newer features. To build a static layout, first call <pre><code> obtain(CharSequence, int, int, TextPaint, int) </code></pre> with the required arguments (text, paint, and width), then call setters for optional parameters, and finally <pre><code> build() </code></pre> to build the StaticLayout object. Parameters not explicitly set will get default values.</p><pre><code>public static final class StaticLayout.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/StaticLayout.Builder.html
StaticLayout	A										<section class="prog__container"><p> StaticLayout is a Layout for text that will not be edited after it is laid out. Use <pre><code> DynamicLayout </code></pre> for text that may change. <p> This is used by widgets to control text layout. You should not need to use this class directly unless you are implementing your own widget or custom display object, or would be tempted to call <pre><code> Canvas.drawText() </code></pre> directly. </p><pre><code>public class StaticLayout\n</code></pre></section>	https://developer.android.com/reference/android/text/StaticLayout.html
TextDirectionHeuristic	A										<section class="prog__container"><p> Interface for objects that use a heuristic for guessing at the paragraph direction by examining text.</p><pre><code>public interface TextDirectionHeuristic\n</code></pre></section>	https://developer.android.com/reference/android/text/TextDirectionHeuristic.html
TextDirectionHeuristics	A										<section class="prog__container"><p> Some objects that implement <pre><code> TextDirectionHeuristic </code></pre> . Use these with the <pre><code> unicodeWrap() </code></pre> methods in <pre><code> BidiFormatter </code></pre> . Also notice that these direction heuristics correspond to the same types of constants provided in the <pre><code> View </code></pre> class for <pre><code> setTextDirection() </code></pre> , such as <pre><code> TEXT_DIRECTION_RTL </code></pre> . <p> To support versions lower than <pre><code> JELLY_BEAN_MR2 </code></pre> , you can use the support library's <pre><code> TextDirectionHeuristicsCompat </code></pre> class. </p><pre><code>public class TextDirectionHeuristics\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/TextDirectionHeuristics.html
TextPaint	A										<section class="prog__container"><p> TextPaint is an extension of Paint that leaves room for some extra data used during text measuring and drawing.</p><pre><code>public class TextPaint\n</code></pre></section>	https://developer.android.com/reference/android/text/TextPaint.html
TextUtils.EllipsizeCallback	A										<section class="prog__container"><p> This method is called to report that the specified region of text was ellipsized away by a call to <pre><code> ellipsize(CharSequence, TextPaint, float, TextUtils.TruncateAt) </code></pre> .</p><pre><code>public static interface TextUtils.EllipsizeCallback\n</code></pre></section>	https://developer.android.com/reference/android/text/TextUtils.EllipsizeCallback.html
TextUtils	A										<section class="prog__container"><pre><code>public class TextUtils\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/TextUtils.html
TextUtils.SimpleStringSplitter	A										<section class="prog__container"><p> A simple string splitter. <p> If the final character in the string to split is the delimiter then no empty string will be returned for the empty string after that delimeter. That is, splitting <tt> "a,b," </tt> on comma will return <tt> "a", "b" </tt> , not <tt> "a", "b", "" </tt> . </p><pre><code>public static class TextUtils.SimpleStringSplitter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/TextUtils.SimpleStringSplitter.html
TextUtils.StringSplitter	A										<section class="prog__container"><p> An interface for splitting strings according to rules that are opaque to the user of this interface. This also has less overhead than split, which uses regular expressions and allocates an array to hold the results. <p> The most efficient way to use this class is: <pre> // Once TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(delimiter); // Once per string to split splitter.setString(string); for (String s : splitter) { ... } </pre> </p><pre><code>public static interface TextUtils.StringSplitter\nimplements Iterable&lt;String&gt;</code></pre></section>	https://developer.android.com/reference/android/text/TextUtils.StringSplitter.html
TextUtils.TruncateAt	A										<section class="prog__container"><pre><code>public static final enum TextUtils.TruncateAt\n</code></pre></section>	https://developer.android.com/reference/android/text/TextUtils.TruncateAt.html
TextWatcher	A										<section class="prog__container"><p> When an object of a type is attached to an Editable, its methods will be called when the text is changed.</p><pre><code>public interface TextWatcher\nimplements NoCopySpan</code></pre></section>	https://developer.android.com/reference/android/text/TextWatcher.html
DateFormat	A										<section class="prog__container"><p> Utility class for producing strings with formatted date/time. <p> Most callers should avoid supplying their own format strings to this class' <pre><code> format </code></pre> methods and rely on the correctly localized ones supplied by the system. This class' factory methods return appropriately-localized <pre><code> DateFormat </code></pre> instances, suitable for both formatting and parsing dates. For the canonical documentation of format strings, see <pre><code> SimpleDateFormat </code></pre> . <p> In cases where the system does not provide a suitable pattern, this class offers the <pre><code> getBestDateTimePattern(Locale, String) </code></pre> method. <p> The <pre><code> format </code></pre> methods in this class implement a subset of Unicode UTS #35 patterns. The subset currently supported by this class includes the following format characters: <pre><code> acdEHhLKkLMmsyz </code></pre> . Up to API level 17, only <pre><code> adEhkMmszy </code></pre> were supported. Note that this class incorrectly implements <pre><code> k </code></pre> as if it were <pre><code> H </code></pre> for backwards compatibility. <p> See <pre><code> SimpleDateFormat </code></pre> for more documentation about patterns, or if you need a more complete or correct implementation. Note that the non- <pre><code> format </code></pre> methods in this class are implemented by <pre><code> SimpleDateFormat </code></pre> . </p><pre><code>public class DateFormat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/format/DateFormat.html
DateUtils	A										<section class="prog__container"><p> This class contains various date-related utilities for creating text for things like elapsed time and date ranges, strings for days of the week and months, and AM/PM text etc.</p><pre><code>public class DateUtils\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/format/DateUtils.html
Formatter	A										<section class="prog__container"><p> Utility class to aid in formatting common values that are not covered by the <pre><code> Formatter </code></pre> class in <pre><code> java.util </code></pre></p><pre><code>public final class Formatter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/format/Formatter.html
android.text.format	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/text/format/package-summary.html
Time	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 22. </strong> <br/> Use <pre><code> GregorianCalendar </code></pre> instead. </p><pre><code>public class Time\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/format/Time.html
ArrowKeyMovementMethod	A										<section class="prog__container"><p> A movement method that provides cursor movement and selection. Supports displaying the context menu on DPad Center.</p><pre><code>public class ArrowKeyMovementMethod\n</code></pre></section>	https://developer.android.com/reference/android/text/method/ArrowKeyMovementMethod.html
BaseKeyListener	A										<section class="prog__container"><pre><code>public abstract class BaseKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/BaseKeyListener.html
BaseMovementMethod	A										<section class="prog__container"><p> Base classes for movement methods.</p><pre><code>public class BaseMovementMethod\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/method/BaseMovementMethod.html
CharacterPickerDialog	A										<section class="prog__container"><p> Dialog for choosing accented characters related to a base character.</p><pre><code>public class CharacterPickerDialog\n</code></pre></section>	https://developer.android.com/reference/android/text/method/CharacterPickerDialog.html
DateKeyListener	A										<section class="prog__container"><pre><code>public class DateKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/DateKeyListener.html
DateTimeKeyListener	A										<section class="prog__container"><pre><code>public class DateTimeKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/DateTimeKeyListener.html
DialerKeyListener	A										<section class="prog__container"><pre><code>public class DialerKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/DialerKeyListener.html
DigitsKeyListener	A										<section class="prog__container"><pre><code>public class DigitsKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/DigitsKeyListener.html
HideReturnsTransformationMethod	A										<section class="prog__container"><p> This transformation method causes any carriage return characters (\r) to be hidden by displaying them as zero-width non-breaking space characters (﻿).</p><pre><code>public class HideReturnsTransformationMethod\n</code></pre></section>	https://developer.android.com/reference/android/text/method/HideReturnsTransformationMethod.html
KeyListener	A										<section class="prog__container"><pre><code>public interface KeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/KeyListener.html
LinkMovementMethod	A										<section class="prog__container"><p> A movement method that traverses links in the text buffer and scrolls if necessary. Supports clicking on links with DPad Center or Enter.</p><pre><code>public class LinkMovementMethod\n</code></pre></section>	https://developer.android.com/reference/android/text/method/LinkMovementMethod.html
MetaKeyKeyListener	A										<section class="prog__container"><p> This base class encapsulates the behavior for tracking the state of meta keys such as SHIFT, ALT and SYM as well as the pseudo-meta state of selecting text. <p> Key listeners that care about meta state should inherit from this class; you should not instantiate this class directly in a client. </p><pre><code>public abstract class MetaKeyKeyListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/method/MetaKeyKeyListener.html
MovementMethod	A										<section class="prog__container"><p> Provides cursor positioning, scrolling and text selection functionality in a <pre><code> TextView </code></pre> . <p> The <pre><code> TextView </code></pre> delegates handling of key events, trackball motions and touches to the movement method for purposes of content navigation. The framework automatically selects an appropriate movement method based on the content of the <pre><code> TextView </code></pre> . </p><pre><code>public interface MovementMethod\n</code></pre></section>	https://developer.android.com/reference/android/text/method/MovementMethod.html
MultiTapKeyListener	A										<section class="prog__container"><pre><code>public class MultiTapKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/MultiTapKeyListener.html
NumberKeyListener	A										<section class="prog__container"><pre><code>public abstract class NumberKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/NumberKeyListener.html
android.text.method	A										<section class="prog__container">Provides classes that monitor or modify keypad input.</section>	https://developer.android.com/reference/android/text/method/package-summary.html
PasswordTransformationMethod	A										<section class="prog__container"><p> This method is called to notify you that, somewhere within <pre><code> s </code></pre> , the text has been changed.</p><pre><code>public class PasswordTransformationMethod\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/method/PasswordTransformationMethod.html
QwertyKeyListener	A										<section class="prog__container"><pre><code>public class QwertyKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/QwertyKeyListener.html
ReplacementTransformationMethod	A										<section class="prog__container"><p> This transformation method causes the characters in the <pre><code> getOriginal() </code></pre> array to be replaced by the corresponding characters in the <pre><code> getReplacement() </code></pre> array.</p><pre><code>public abstract class ReplacementTransformationMethod\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/method/ReplacementTransformationMethod.html
ScrollingMovementMethod	A										<section class="prog__container"><p> A movement method that interprets movement keys by scrolling the text buffer.</p><pre><code>public class ScrollingMovementMethod\n</code></pre></section>	https://developer.android.com/reference/android/text/method/ScrollingMovementMethod.html
SingleLineTransformationMethod	A										<section class="prog__container"><p> This transformation method causes any newline characters (\n) to be displayed as spaces instead of causing line breaks, and causes carriage return characters (\r) to have no appearance.</p><pre><code>public class SingleLineTransformationMethod\n</code></pre></section>	https://developer.android.com/reference/android/text/method/SingleLineTransformationMethod.html
TextKeyListener.Capitalize	A										<section class="prog__container"><pre><code>public static final enum TextKeyListener.Capitalize\n</code></pre></section>	https://developer.android.com/reference/android/text/method/TextKeyListener.Capitalize.html
TextKeyListener	A										<section class="prog__container"><pre><code>public class TextKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/TextKeyListener.html
TimeKeyListener	A										<section class="prog__container"><pre><code>public class TimeKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/TimeKeyListener.html
Touch	A										<section class="prog__container"><p> Handles touch events for dragging.</p><pre><code>public class Touch\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/method/Touch.html
TransformationMethod	A										<section class="prog__container"><p> TextView uses TransformationMethods to do things like replacing the characters of passwords with dots, or keeping the newline characters from causing line breaks in single-line text fields.</p><pre><code>public interface TransformationMethod\n</code></pre></section>	https://developer.android.com/reference/android/text/method/TransformationMethod.html
AbsoluteSizeSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> describeContents() </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p><pre><code>public class AbsoluteSizeSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/AbsoluteSizeSpan.html
AlignmentSpan	A										<section class="prog__container"><pre><code>public interface AlignmentSpan\nimplements ParagraphStyle</code></pre></section>	https://developer.android.com/reference/android/text/style/AlignmentSpan.html
AlignmentSpan.Standard	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> describeContents() </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p><pre><code>public static class AlignmentSpan.Standard\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/style/AlignmentSpan.Standard.html
BackgroundColorSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> describeContents() </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p><pre><code>public class BackgroundColorSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/BackgroundColorSpan.html
BulletSpan	A										<section class="prog__container"><pre><code>public class BulletSpan\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/style/BulletSpan.html
CharacterStyle	A										<section class="prog__container"><p> The classes that affect character-level text formatting extend this class. Most extend its subclass <pre><code> MetricAffectingSpan </code></pre> , but simple ones may just implement <pre><code> UpdateAppearance </code></pre> .</p><pre><code>public abstract class CharacterStyle\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/style/CharacterStyle.html
ClickableSpan	A										<section class="prog__container"><p> If an object of this type is attached to the text of a TextView with a movement method of LinkMovementMethod, the affected spans of text can be selected. If clicked, the <pre><code> onClick(View) </code></pre> method will be called.</p><pre><code>public abstract class ClickableSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/ClickableSpan.html
DrawableMarginSpan	A										<section class="prog__container"><p> Renders the leading margin.</p><pre><code>public class DrawableMarginSpan\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/style/DrawableMarginSpan.html
DynamicDrawableSpan	A										<section class="prog__container"><pre><code>public abstract class DynamicDrawableSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/DynamicDrawableSpan.html
EasyEditSpan	A										<section class="prog__container"><p> Provides an easy way to edit a portion of text. <p> The <pre><code> TextView </code></pre> uses this span to allow the user to delete a chuck of text in one click. <p> <pre><code> TextView </code></pre> removes the span when the user deletes the whole text or modifies it. <p> This span can be also used to receive notification when the user deletes or modifies the text; </p><pre><code>public class EasyEditSpan\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/style/EasyEditSpan.html
ForegroundColorSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> describeContents() </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p><pre><code>public class ForegroundColorSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/ForegroundColorSpan.html
IconMarginSpan	A										<section class="prog__container"><p> Renders the leading margin.</p><pre><code>public class IconMarginSpan\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/style/IconMarginSpan.html
ImageSpan	A										<section class="prog__container"><p> A constant indicating that the bottom of this span should be aligned with the baseline of the surrounding text.</p><pre><code>public class ImageSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/ImageSpan.html
LeadingMarginSpan	A										<section class="prog__container"><p> A paragraph style affecting the leading margin. There can be multiple leading margin spans on a single paragraph; they will be rendered in order, each adding its margin to the ones before it. The leading margin is on the right for lines in a right-to-left paragraph. <p> LeadingMarginSpans should be attached from the first character to the last character of a single paragraph. </p><pre><code>public interface LeadingMarginSpan\nimplements ParagraphStyle</code></pre></section>	https://developer.android.com/reference/android/text/style/LeadingMarginSpan.html
LeadingMarginSpan.LeadingMarginSpan2	A										<section class="prog__container"><p> An extended version of <pre><code> LeadingMarginSpan </code></pre> , which allows the implementor to specify the number of lines of the paragraph to which this object is attached that the "first line of paragraph" margin width will be applied to. <p> There should only be one LeadingMarginSpan2 per paragraph. The leading margin line count affects all LeadingMarginSpans in the paragraph, adjusting the number of lines to which the first line margin is applied. <p> As with LeadingMarginSpans, LeadingMarginSpan2s should be attached from the beginning to the end of a paragraph. </p><pre><code>public static interface LeadingMarginSpan.LeadingMarginSpan2\nimplements LeadingMarginSpan, WrapTogetherSpan</code></pre></section>	https://developer.android.com/reference/android/text/style/LeadingMarginSpan.LeadingMarginSpan2.html
LeadingMarginSpan.Standard	A										<section class="prog__container"><p> The standard implementation of LeadingMarginSpan, which adjusts the margin but does not do any rendering.</p><pre><code>public static class LeadingMarginSpan.Standard\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/style/LeadingMarginSpan.Standard.html
LineBackgroundSpan	A										<section class="prog__container"><pre><code>public interface LineBackgroundSpan\nimplements ParagraphStyle</code></pre></section>	https://developer.android.com/reference/android/text/style/LineBackgroundSpan.html
LineHeightSpan	A										<section class="prog__container"><pre><code>public interface LineHeightSpan\nimplements ParagraphStyle, WrapTogetherSpan</code></pre></section>	https://developer.android.com/reference/android/text/style/LineHeightSpan.html
LineHeightSpan.WithDensity	A										<section class="prog__container"><pre><code>public static interface LineHeightSpan.WithDensity\nimplements LineHeightSpan</code></pre></section>	https://developer.android.com/reference/android/text/style/LineHeightSpan.WithDensity.html
LocaleSpan	A										<section class="prog__container"><p> Changes the <pre><code> Locale </code></pre> of the text to which the span is attached.</p><pre><code>public class LocaleSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/LocaleSpan.html
MaskFilterSpan	A										<section class="prog__container"><p> Returns "this" for most CharacterStyles, but for CharacterStyles that were generated by <pre><code> wrap(CharacterStyle) </code></pre> , returns the underlying CharacterStyle.</p><pre><code>public class MaskFilterSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/MaskFilterSpan.html
MetricAffectingSpan	A										<section class="prog__container"><p> The classes that affect character-level text formatting in a way that changes the width or height of characters extend this class.</p><pre><code>public abstract class MetricAffectingSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/MetricAffectingSpan.html
android.text.style	A										<section class="prog__container">Provides classes used to view or change the style of a span of text in a View object.The classes with a subclass Standard are passed in to</section>	https://developer.android.com/reference/android/text/style/package-summary.html
ParagraphStyle	A										<section class="prog__container"><p> The classes that affect paragraph-level text formatting implement this interface.</p><pre><code>public interface ParagraphStyle\n</code></pre></section>	https://developer.android.com/reference/android/text/style/ParagraphStyle.html
QuoteSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> describeContents() </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p><pre><code>public class QuoteSpan\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/style/QuoteSpan.html
RasterizerSpan	A										<section class="prog__container"><p> Returns "this" for most CharacterStyles, but for CharacterStyles that were generated by <pre><code> wrap(CharacterStyle) </code></pre> , returns the underlying CharacterStyle.</p><pre><code>public class RasterizerSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/RasterizerSpan.html
RelativeSizeSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> describeContents() </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p><pre><code>public class RelativeSizeSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/RelativeSizeSpan.html
ReplacementSpan	A										<section class="prog__container"><p> Draws the span into the canvas.</p><pre><code>public abstract class ReplacementSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/ReplacementSpan.html
ScaleXSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> describeContents() </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p><pre><code>public class ScaleXSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/ScaleXSpan.html
StrikethroughSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> describeContents() </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p><pre><code>public class StrikethroughSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/StrikethroughSpan.html
StyleSpan	A										<section class="prog__container"><p> Describes a style in a span. Note that styles are cumulative -- if both bold and italic are set in separate spans, or if the base style is bold and a span calls for italic, you get bold italic. You can't turn off a style from the base style.</p><pre><code>public class StyleSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/StyleSpan.html
SubscriptSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> describeContents() </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p><pre><code>public class SubscriptSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/SubscriptSpan.html
SuggestionSpan	A										<section class="prog__container"><p> Holds suggestion candidates for the text enclosed in this span. When such a span is edited in an EditText, double tapping on the text enclosed in this span will display a popup dialog listing suggestion replacement for that text. The user can then replace the original text by one of the suggestions. These spans should typically be created by the input method to provide correction and alternates for the text.</p><pre><code>public class SuggestionSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/SuggestionSpan.html
SuperscriptSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> describeContents() </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p><pre><code>public class SuperscriptSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/SuperscriptSpan.html
TabStopSpan	A										<section class="prog__container"><p> Represents a single tab stop on a line.</p><pre><code>public interface TabStopSpan\nimplements ParagraphStyle</code></pre></section>	https://developer.android.com/reference/android/text/style/TabStopSpan.html
TabStopSpan.Standard	A										<section class="prog__container"><p> The default implementation of TabStopSpan.</p><pre><code>public static class TabStopSpan.Standard\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/style/TabStopSpan.Standard.html
TextAppearanceSpan	A										<section class="prog__container"><p> Sets the text color, size, style, and typeface to match a TextAppearance resource.</p><pre><code>public class TextAppearanceSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TextAppearanceSpan.html
TtsSpan.Builder	A										<section class="prog__container"><p> A simple builder for TtsSpans. This builder can be used directly, but the more specific subclasses of this builder like <pre><code> TtsSpan.TextBuilder </code></pre> and <pre><code> TtsSpan.CardinalBuilder </code></pre> are likely more useful. This class uses generics so methods from this class can return instances of its child classes, resulting in a fluent API (CRTP pattern).</p><pre><code>public static class TtsSpan.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.Builder.html
TtsSpan.CardinalBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> TYPE_CARDINAL </code></pre> .</p><pre><code>public static class TtsSpan.CardinalBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.CardinalBuilder.html
TtsSpan.DateBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> TYPE_DATE </code></pre> .</p><pre><code>public static class TtsSpan.DateBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.DateBuilder.html
TtsSpan.DecimalBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> TYPE_DECIMAL </code></pre> .</p><pre><code>public static class TtsSpan.DecimalBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.DecimalBuilder.html
TtsSpan.DigitsBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> TYPE_DIGITS </code></pre> .</p><pre><code>public static class TtsSpan.DigitsBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.DigitsBuilder.html
TtsSpan.ElectronicBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> TYPE_ELECTRONIC </code></pre> .</p><pre><code>public static class TtsSpan.ElectronicBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.ElectronicBuilder.html
TtsSpan.FractionBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> TYPE_FRACTION </code></pre> .</p><pre><code>public static class TtsSpan.FractionBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.FractionBuilder.html
TtsSpan	A										<section class="prog__container"><p> A span that supplies additional meta-data for the associated text intended for text-to-speech engines. If the text is being processed by a text-to-speech engine, the engine may use the data in this span in addition to or instead of its associated text. Each instance of a TtsSpan has a type, for example <pre><code> TYPE_DATE </code></pre> or <pre><code> TYPE_MEASURE </code></pre> . And a list of arguments, provided as key-value pairs in a bundle. The inner classes are there for convenience and provide builders for each TtsSpan type.</p><pre><code>public class TtsSpan\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.html
TtsSpan.MeasureBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> TYPE_MEASURE </code></pre> .</p><pre><code>public static class TtsSpan.MeasureBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.MeasureBuilder.html
TtsSpan.MoneyBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> TYPE_MONEY </code></pre> .</p><pre><code>public static class TtsSpan.MoneyBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.MoneyBuilder.html
TtsSpan.OrdinalBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> TYPE_ORDINAL </code></pre> .</p><pre><code>public static class TtsSpan.OrdinalBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.OrdinalBuilder.html
TtsSpan.SemioticClassBuilder	A										<section class="prog__container"><p> A builder for TtsSpans, has setters for morphosyntactic features. This builder can be used directly, but the more specific subclasses of this builder like <pre><code> TtsSpan.TextBuilder </code></pre> and <pre><code> TtsSpan.CardinalBuilder </code></pre> are likely more useful.</p><pre><code>public static class TtsSpan.SemioticClassBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.SemioticClassBuilder.html
TtsSpan.TelephoneBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> TYPE_TELEPHONE </code></pre> .</p><pre><code>public static class TtsSpan.TelephoneBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.TelephoneBuilder.html
TtsSpan.TextBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> TYPE_TEXT </code></pre> .</p><pre><code>public static class TtsSpan.TextBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.TextBuilder.html
TtsSpan.TimeBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> TYPE_TIME </code></pre> .</p><pre><code>public static class TtsSpan.TimeBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.TimeBuilder.html
TtsSpan.VerbatimBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> TYPE_VERBATIM </code></pre> .</p><pre><code>public static class TtsSpan.VerbatimBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.VerbatimBuilder.html
TypefaceSpan	A										<section class="prog__container"><p> Changes the typeface family of the text to which the span is attached.</p><pre><code>public class TypefaceSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TypefaceSpan.html
UnderlineSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> describeContents() </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p><pre><code>public class UnderlineSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/UnderlineSpan.html
UpdateAppearance	A										<section class="prog__container"><p> The classes that affect character-level text in a way that modifies their appearance when one is added or removed must implement this interface. Note that if the class also impacts size or other metrics, it should instead implement <pre><code> UpdateLayout </code></pre> .</p><pre><code>public interface UpdateAppearance\n</code></pre></section>	https://developer.android.com/reference/android/text/style/UpdateAppearance.html
UpdateLayout	A										<section class="prog__container"><p> The classes that affect character-level text formatting in a way that triggers a text layout update when one is added or removed must implement this interface. This interface also includes <pre><code> UpdateAppearance </code></pre> since such a change implicitly also impacts the appearance.</p><pre><code>public interface UpdateLayout\nimplements UpdateAppearance</code></pre></section>	https://developer.android.com/reference/android/text/style/UpdateLayout.html
URLSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> describeContents() </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p><pre><code>public class URLSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/URLSpan.html
WrapTogetherSpan	A										<section class="prog__container"><p class="dac-footer-copyright"> Except as noted, this content is licensed under Creative Commons Attribution 2.5 . For details and restrictions, see the Content License .</p><pre><code>public interface WrapTogetherSpan\nimplements ParagraphStyle</code></pre></section>	https://developer.android.com/reference/android/text/style/WrapTogetherSpan.html
Linkify	A										<section class="prog__container"><p> Linkify take a piece of text and a regular expression and turns all of the regex matches in the text into clickable links. This is particularly useful for matching things like email addresses, web URLs, etc. and making them actionable. Alone with the pattern that is to be matched, a URL scheme prefix is also required. Any pattern match that does not begin with the supplied scheme will have the scheme prepended to the matched text when the clickable URL is created. For instance, if you are matching web URLs you would supply the scheme <pre><code> http:// </code></pre> . If the pattern matches example.com, which does not have a URL scheme prefix, the supplied scheme will be prepended to create <pre><code> http://example.com </code></pre> when the clickable URL link is created.</p><pre><code>public class Linkify\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/util/Linkify.html
Linkify.MatchFilter	A										<section class="prog__container"><p> MatchFilter enables client code to have more control over what is allowed to match and become a link, and what is not. For example: when matching web URLs you would like things like http://www.example.com to match, as well as just example.com itelf. However, you would not want to match against the domain in support@example.com. So, when matching against a web URL pattern you might also include a MatchFilter that disallows the match if it is immediately preceded by an at-sign (@).</p><pre><code>public static interface Linkify.MatchFilter\n</code></pre></section>	https://developer.android.com/reference/android/text/util/Linkify.MatchFilter.html
Linkify.TransformFilter	A										<section class="prog__container"><p> TransformFilter enables client code to have more control over how matched patterns are represented as URLs. For example: when converting a phone number such as (919) 555-1212 into a tel: URL the parentheses, white space, and hyphen need to be removed to produce tel:9195551212.</p><pre><code>public static interface Linkify.TransformFilter\n</code></pre></section>	https://developer.android.com/reference/android/text/util/Linkify.TransformFilter.html
android.text.util	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/text/util/package-summary.html
Rfc822Token	A										<section class="prog__container"><p> This class stores an RFC 822-like name, address, and comment, and provides methods to convert them to quoted strings.</p><pre><code>public class Rfc822Token\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/util/Rfc822Token.html
Rfc822Tokenizer	A										<section class="prog__container"><p> This class works as a Tokenizer for MultiAutoCompleteTextView for address list fields, and also provides a method for converting a string of addresses (such as might be typed into such a field) into a series of Rfc822Tokens.</p><pre><code>public class Rfc822Tokenizer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/text/util/Rfc822Tokenizer.html
ArcMotion	A										<section class="prog__container"><p> A PathMotion that generates a curved path along an arc on an imaginary circle containing the two points. If the horizontal distance between the points is less than the vertical distance, then the circle's center point will be horizontally aligned with the end point. If the vertical distance is less than the horizontal distance then the circle's center point will be vertically aligned with the end point. <p> When the two points are near horizontal or vertical, the curve of the motion will be small as the center of the circle will be far from both points. To force curvature of the path, <pre><code> setMinimumHorizontalAngle(float) </code></pre> and <pre><code> setMinimumVerticalAngle(float) </code></pre> may be used to set the minimum angle of the arc between two points. </p><pre><code>public class ArcMotion\n</code></pre></section>	https://developer.android.com/reference/android/transition/ArcMotion.html
AutoTransition	A										<section class="prog__container"><p> Utility class for creating a default transition that automatically fades, moves, and resizes views during a scene change. <p> An AutoTransition can be described in a resource file by using the tag <pre><code> autoTransition </code></pre> , along with the other standard attributes of <pre><code> Transition </code></pre> . </p><pre><code>public class AutoTransition\n</code></pre></section>	https://developer.android.com/reference/android/transition/AutoTransition.html
ChangeBounds	A										<section class="prog__container"><p> This transition captures the layout bounds of target views before and after the scene change and animates those changes during the transition. <p> A ChangeBounds transition can be described in a resource file by using the tag <pre><code> changeBounds </code></pre> , using its attributes of <pre><code> ChangeBounds </code></pre> along with the other standard attributes of <pre><code> Transition </code></pre> . </p><pre><code>public class ChangeBounds\n</code></pre></section>	https://developer.android.com/reference/android/transition/ChangeBounds.html
ChangeClipBounds	A										<section class="prog__container"><p> ChangeClipBounds captures the <pre><code> getClipBounds() </code></pre> before and after the scene change and animates those changes during the transition.</p><pre><code>public class ChangeClipBounds\n</code></pre></section>	https://developer.android.com/reference/android/transition/ChangeClipBounds.html
ChangeImageTransform	A										<section class="prog__container"><p> This Transition captures an ImageView's matrix before and after the scene change and animates it during the transition. <p> In combination with ChangeBounds, ChangeImageTransform allows ImageViews that change size, shape, or <pre><code> ImageView.ScaleType </code></pre> to animate contents smoothly. </p><pre><code>public class ChangeImageTransform\n</code></pre></section>	https://developer.android.com/reference/android/transition/ChangeImageTransform.html
ChangeScroll	A										<section class="prog__container"><p> This transition captures the scroll properties of targets before and after the scene change and animates any changes.</p><pre><code>public class ChangeScroll\n</code></pre></section>	https://developer.android.com/reference/android/transition/ChangeScroll.html
ChangeTransform	A										<section class="prog__container"><p> This Transition captures scale and rotation for Views before and after the scene change and animates those changes during the transition. A change in parent is handled as well by capturing the transforms from the parent before and after the scene change and animating those during the transition.</p><pre><code>public class ChangeTransform\n</code></pre></section>	https://developer.android.com/reference/android/transition/ChangeTransform.html
CircularPropagation	A										<section class="prog__container"><p> A propagation that varies with the distance to the epicenter of the Transition or center of the scene if no epicenter exists. When a View is visible in the start of the transition, Views farther from the epicenter will transition sooner than Views closer to the epicenter. When a View is not in the start of the transition or is not visible at the start of the transition, it will transition sooner when closer to the epicenter and later when farther from the epicenter. This is the default TransitionPropagation used with <pre><code> Explode </code></pre> .</p><pre><code>public class CircularPropagation\n</code></pre></section>	https://developer.android.com/reference/android/transition/CircularPropagation.html
Explode	A										<section class="prog__container"><p> This transition tracks changes to the visibility of target views in the start and end scenes and moves views in or out from the edges of the scene. Visibility is determined by both the <pre><code> setVisibility(int) </code></pre> state of the view as well as whether it is parented in the current view hierarchy. Disappearing Views are limited as described in <pre><code> onDisappear(android.view.ViewGroup, TransitionValues, int, TransitionValues, int) </code></pre> . <p> Views move away from the focal View or the center of the Scene if no epicenter was provided. </p><pre><code>public class Explode\n</code></pre></section>	https://developer.android.com/reference/android/transition/Explode.html
Fade	A										<section class="prog__container"><p> This transition tracks changes to the visibility of target views in the start and end scenes and fades views in or out when they become visible or non-visible. Visibility is determined by both the <pre><code> setVisibility(int) </code></pre> state of the view as well as whether it is parented in the current view hierarchy. <p> The ability of this transition to fade out a particular view, and the way that that fading operation takes place, is based on the situation of the view in the view hierarchy. For example, if a view was simply removed from its parent, then the view will be added into a <pre><code> ViewGroupOverlay </code></pre> while fading. If a visible view is changed to be <pre><code> GONE </code></pre> or <pre><code> INVISIBLE </code></pre> , then the visibility will be changed to <pre><code> VISIBLE </code></pre> for the duration of the animation. However, if a view is in a hierarchy which is also altering its visibility, the situation can be more complicated. In general, if a view that is no longer in the hierarchy in the end scene still has a parent (so its parent hierarchy was removed, but it was not removed from its parent), then it will be left alone to avoid side-effects from improperly removing it from its parent. The only exception to this is if the previous <pre><code> Scene </code></pre> was <pre><code> created from a layout resource file </code></pre> , then it is considered safe to un-parent the starting scene view in order to fade it out. </p><pre><code>public class Fade\n</code></pre></section>	https://developer.android.com/reference/android/transition/Fade.html
android.transition	A										<section class="prog__container">The classes in this package enable "scenes & transitions" functionality forview hiearchies.</section>	https://developer.android.com/reference/android/transition/package-summary.html
PathMotion	A										<section class="prog__container"><p> This base class can be extended to provide motion along a Path to Transitions. <p> Transitions such as <pre><code> ChangeBounds </code></pre> move Views, typically in a straight path between the start and end positions. Applications that desire to have these motions move in a curve can change how Views interpolate in two dimensions by extending PathMotion and implementing <pre><code> getPath(float, float, float, float) </code></pre> . </p><pre><code>public abstract class PathMotion\nextends Object</code></pre></section>	https://developer.android.com/reference/android/transition/PathMotion.html
PatternPathMotion	A										<section class="prog__container"><p> A PathMotion that takes a Path pattern and applies it to the separation between two points. The starting point of the Path will be moved to the origin and the end point will be scaled and rotated so that it matches with the target end point. <p> This may be used in XML as an element inside a transition. </p><pre><code>public class PatternPathMotion\n</code></pre></section>	https://developer.android.com/reference/android/transition/PatternPathMotion.html
Scene	A										<section class="prog__container"><p> A scene represents the collection of values that various properties in the View hierarchy will have when the scene is applied. A Scene can be configured to automatically run a Transition when it is applied, which will animate the various property changes that take place during the scene change.</p><pre><code>public final class Scene\nextends Object</code></pre></section>	https://developer.android.com/reference/android/transition/Scene.html
SidePropagation	A										<section class="prog__container"><p> A <pre><code> TransitionPropagation </code></pre> that propagates based on the distance to the side and, orthogonally, the distance to epicenter. If the transitioning View is visible in the start of the transition, then it will transition sooner when closer to the side and later when farther. If the view is not visible in the start of the transition, then it will transition later when closer to the side and sooner when farther from the edge. This is the default TransitionPropagation used with <pre><code> Slide </code></pre> .</p><pre><code>public class SidePropagation\n</code></pre></section>	https://developer.android.com/reference/android/transition/SidePropagation.html
Slide	A										<section class="prog__container"><p> This transition tracks changes to the visibility of target views in the start and end scenes and moves views in or out from one of the edges of the scene. Visibility is determined by both the <pre><code> setVisibility(int) </code></pre> state of the view as well as whether it is parented in the current view hierarchy. Disappearing Views are limited as described in <pre><code> onDisappear(android.view.ViewGroup, TransitionValues, int, TransitionValues, int) </code></pre> .</p><pre><code>public class Slide\n</code></pre></section>	https://developer.android.com/reference/android/transition/Slide.html
Transition.EpicenterCallback	A										<section class="prog__container"><p> Class to get the epicenter of Transition. Use <pre><code> setEpicenterCallback(android.transition.Transition.EpicenterCallback) </code></pre> to set the callback used to calculate the epicenter of the Transition. Override <pre><code> getEpicenter() </code></pre> to return the rectangular region in screen coordinates of the epicenter of the transition.</p><pre><code>public static abstract class Transition.EpicenterCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/transition/Transition.EpicenterCallback.html
Transition	A										<section class="prog__container"><p> A Transition holds information about animations that will be run on its targets during a scene change. Subclasses of this abstract class may choreograph several child transitions ( <pre><code> TransitionSet </code></pre> or they may perform custom animations themselves. Any Transition has two main jobs: (1) capture property values, and (2) play animations based on changes to captured property values. A custom transition knows what property values on View objects are of interest to it, and also knows how to animate changes to those values. For example, the <pre><code> Fade </code></pre> transition tracks changes to visibility-related properties and is able to construct and run animations that fade items in or out based on changes to those properties. <p> Note: Transitions may not work correctly with either <pre><code> SurfaceView </code></pre> or <pre><code> TextureView </code></pre> , due to the way that these views are displayed on the screen. For SurfaceView, the problem is that the view is updated from a non-UI thread, so changes to the view due to transitions (such as moving and resizing the view) may be out of sync with the display inside those bounds. TextureView is more compatible with transitions in general, but some specific transitions (such as <pre><code> Fade </code></pre> ) may not be compatible with TextureView because they rely on <pre><code> ViewOverlay </code></pre> functionality, which does not currently work with TextureView. </p><pre><code>public abstract class Transition\nextends Object</code></pre></section>	https://developer.android.com/reference/android/transition/Transition.html
Transition.TransitionListener	A										<section class="prog__container"><p> A transition listener receives notifications from a transition. Notifications indicate transition lifecycle events.</p><pre><code>public static interface Transition.TransitionListener\n</code></pre></section>	https://developer.android.com/reference/android/transition/Transition.TransitionListener.html
TransitionInflater	A										<section class="prog__container"><p> This class inflates scenes and transitions from resource files. Information on XML resource descriptions for transitions can be found for <pre><code> Transition </code></pre> , <pre><code> TransitionSet </code></pre> , <pre><code> TransitionTarget </code></pre> , <pre><code> Fade </code></pre> , and <pre><code> TransitionManager </code></pre> .</p><pre><code>public class TransitionInflater\nextends Object</code></pre></section>	https://developer.android.com/reference/android/transition/TransitionInflater.html
TransitionManager	A										<section class="prog__container"><p> This class manages the set of transitions that fire when there is a change of <pre><code> Scene </code></pre> . To use the manager, add scenes along with transition objects with calls to <pre><code> setTransition(Scene, Transition) </code></pre> or <pre><code> setTransition(Scene, Scene, Transition) </code></pre> . Setting specific transitions for scene changes is not required; by default, a Scene change will use <pre><code> AutoTransition </code></pre> to do something reasonable for most situations. Specifying other transitions for particular scene changes is only necessary if the application wants different transition behavior in these situations. <p> TransitionManagers can be declared in XML resource files inside the <pre><code> res/transition </code></pre> directory. TransitionManager resources consist of the <pre><code> transitionManager </code></pre> tag name, containing one or more <pre><code> transition </code></pre> tags, each of which describe the relationship of that transition to the from/to scene information in that tag. For example, here is a resource file that declares several scene transitions: </p><pre><code>public class TransitionManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/transition/TransitionManager.html
TransitionPropagation	A										<section class="prog__container"><p> Extend <pre><code> TransitionPropagation </code></pre> to customize start delays for Animators created in <pre><code> createAnimator(ViewGroup, TransitionValues, TransitionValues) </code></pre> . A Transition such as <pre><code> Explode </code></pre> defaults to using <pre><code> CircularPropagation </code></pre> and Views closer to the epicenter will move out of the scene later and into the scene sooner than Views farther from the epicenter, giving the appearance of inertia. With no TransitionPropagation, all Views will react simultaneously to the start of the transition.</p><pre><code>public abstract class TransitionPropagation\nextends Object</code></pre></section>	https://developer.android.com/reference/android/transition/TransitionPropagation.html
TransitionSet	A										<section class="prog__container"><p> A TransitionSet is a parent of child transitions (including other TransitionSets). Using TransitionSets enables more complex choreography of transitions, where some sets play <pre><code> ORDERING_TOGETHER </code></pre> and others play <pre><code> ORDERING_SEQUENTIAL </code></pre> . For example, <pre><code> AutoTransition </code></pre> uses a TransitionSet to sequentially play a Fade(Fade.OUT), followed by a <pre><code> ChangeBounds </code></pre> , followed by a Fade(Fade.OUT) transition. <p> A TransitionSet can be described in a resource file by using the tag <pre><code> transitionSet </code></pre> , along with the standard attributes of <pre><code> TransitionSet </code></pre> and <pre><code> Transition </code></pre> . Child transitions of the TransitionSet object can be loaded by adding those child tags inside the enclosing <pre><code> transitionSet </code></pre> tag. For example, the following xml describes a TransitionSet that plays a Fade and then a ChangeBounds transition on the affected view targets: </p><pre><code>public class TransitionSet\n</code></pre></section>	https://developer.android.com/reference/android/transition/TransitionSet.html
TransitionValues	A										<section class="prog__container"><p> Data structure which holds cached values for the transition. The view field is the target which all of the values pertain to. The values field is a map which holds information for fields according to names selected by the transitions. These names should be unique to avoid clobbering values stored by other transitions, such as the convention project:transition_name:property_name. For example, the platform might store a property "alpha" in a transition "Fader" as "android:fader:alpha". <p> These values are cached during the <pre><code> captureStartValues(TransitionValues) </code></pre> capture} phases of a scene change, once when the start values are captured and again when the end values are captured. These start/end values are then passed into the transitions via the for <pre><code> createAnimator(ViewGroup, TransitionValues, TransitionValues) </code></pre> method. </p><pre><code>public class TransitionValues\nextends Object</code></pre></section>	https://developer.android.com/reference/android/transition/TransitionValues.html
Visibility	A										<section class="prog__container"><p> This transition tracks changes to the visibility of target views in the start and end scenes. Visibility is determined not just by the <pre><code> setVisibility(int) </code></pre> state of views, but also whether views exist in the current view hierarchy. The class is intended to be a utility for subclasses such as <pre><code> Fade </code></pre> , which use this visibility information to determine the specific animations to run when visibility changes occur. Subclasses should implement one or both of the methods <pre><code> onAppear(ViewGroup, TransitionValues, int, TransitionValues, int) </code></pre> , <pre><code> onDisappear(ViewGroup, TransitionValues, int, TransitionValues, int) </code></pre> or <pre><code> onAppear(ViewGroup, View, TransitionValues, TransitionValues) </code></pre> , <pre><code> onDisappear(ViewGroup, View, TransitionValues, TransitionValues) </code></pre> .</p><pre><code>public abstract class Visibility\n</code></pre></section>	https://developer.android.com/reference/android/transition/Visibility.html
VisibilityPropagation	A										<section class="prog__container"><p> Base class for <pre><code> TransitionPropagation </code></pre> s that care about View Visibility and the center position of the View.</p><pre><code>public abstract class VisibilityPropagation\n</code></pre></section>	https://developer.android.com/reference/android/transition/VisibilityPropagation.html
AndroidException	A										<section class="prog__container"><p> Base class for all checked exceptions thrown by the Android frameworks.</p><pre><code>public class AndroidException\n</code></pre></section>	https://developer.android.com/reference/android/util/AndroidException.html
AndroidRuntimeException	A										<section class="prog__container"><p> Base class for all unchecked exceptions thrown by the Android frameworks.</p><pre><code>public class AndroidRuntimeException\n</code></pre></section>	https://developer.android.com/reference/android/util/AndroidRuntimeException.html
ArrayMap	A										<section class="prog__container"><p> ArrayMap is a generic key-&gt;value mapping data structure that is designed to be more memory efficient than a traditional <pre><code> HashMap </code></pre> . It keeps its mappings in an array data structure -- an integer array of hash codes for each item, and an Object array of the key/value pairs. This allows it to avoid having to create an extra object for every entry put in to the map, and it also tries to control the growth of the size of these arrays more aggressively (since growing them only requires copying the entries in the array, not rebuilding a hash map). <p> Note that this implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashMap, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. </p><pre><code>public final class ArrayMap\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/ArrayMap.html
ArraySet	A										<section class="prog__container"><p> ArraySet is a generic set data structure that is designed to be more memory efficient than a traditional <pre><code> HashSet </code></pre> . The design is very similar to <pre><code> ArrayMap </code></pre> , with all of the caveats described there. This implementation is separate from ArrayMap, however, so the Object array contains only one item for each entry in the set (instead of a pair for a mapping). <p> Note that this implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashSet, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. </p><pre><code>public final class ArraySet\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/ArraySet.html
AtomicFile	A										<section class="prog__container"><p> Helper class for performing atomic operations on a file by creating a backup file until a write has successfully completed. If you need this on older versions of the platform you can use <pre><code> AtomicFile </code></pre> in the v4 support library. <p> Atomic file guarantees file integrity by ensuring that a file has been completely written and sync'd to disk before removing its backup. As long as the backup file exists, the original file is considered to be invalid (left over from a previous attempt to write the file). </p><pre><code>public class AtomicFile\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/AtomicFile.html
AttributeSet	A										<section class="prog__container"><p> A collection of attributes, as found associated with a tag in an XML document. Often you will not want to use this interface directly, instead passing it to <pre><code> Resources.Theme.obtainStyledAttributes() </code></pre> which will take care of parsing the attributes for you. In particular, the Resources API will convert resource references (attribute values such as "@string/my_label" in the original XML) to the desired type for you; if you use AttributeSet directly then you will need to manually check for resource references (with <pre><code> getAttributeResourceValue(int, int) </code></pre> ) and do the resource lookup yourself if needed. Direct use of AttributeSet also prevents the application of themes and styles when retrieving attribute values. <p> This interface provides an efficient mechanism for retrieving data from compiled XML files, which can be retrieved for a particular XmlPullParser through <pre><code> Xml.asAttributeSet() </code></pre> . Normally this will return an implementation of the interface that works on top of a generic XmlPullParser, however it is more useful in conjunction with compiled XML resources: <pre> XmlPullParser parser = resources.getXml(myResource); AttributeSet attributes = Xml.asAttributeSet(parser);</pre> <p> The implementation returned here, unlike using the implementation on top of a generic XmlPullParser, is highly optimized by retrieving pre-computed information that was generated by aapt when compiling your resources. For example, the <pre><code> getAttributeFloatValue(int, float) </code></pre> method returns a floating point number previous stored in the compiled resource instead of parsing at runtime the string originally in the XML file. <p> This interface also provides additional information contained in the compiled XML resource that is not available in a normal XML file, such as <pre><code> getAttributeNameResource(int) </code></pre> which returns the resource identifier associated with a particular XML attribute name. </p><pre><code>public interface AttributeSet\n</code></pre></section>	https://developer.android.com/reference/android/util/AttributeSet.html
Base64	A										<section class="prog__container"><p> Utilities for encoding and decoding the Base64 representation of binary data. See RFCs 2045 and 3548 .</p><pre><code>public class Base64\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/Base64.html
Base64DataException	A										<section class="prog__container"><p> This exception is thrown by <pre><code> Base64InputStream </code></pre> or <pre><code> Base64OutputStream </code></pre> when an error is detected in the data being decoded. This allows problems with the base64 data to be disambiguated from errors in the underlying streams (e.g. actual connection errors.)</p><pre><code>public class Base64DataException\n</code></pre></section>	https://developer.android.com/reference/android/util/Base64DataException.html
Base64InputStream	A										<section class="prog__container"><p> An InputStream that does Base64 decoding on the data read through it.</p><pre><code>public class Base64InputStream\n</code></pre></section>	https://developer.android.com/reference/android/util/Base64InputStream.html
Base64OutputStream	A										<section class="prog__container"><p> An OutputStream that does Base64 encoding on the data written to it, writing the resulting data to another OutputStream.</p><pre><code>public class Base64OutputStream\n</code></pre></section>	https://developer.android.com/reference/android/util/Base64OutputStream.html
Config	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 14. </strong> <br/> This class is not useful, it just returns the same value for all constants, and has always done this. Do not use it. </p><pre><code>public final class Config\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/Config.html
DebugUtils	A										<section class="prog__container"><p> <p> Various utilities for debugging and logging. </p><pre><code>public class DebugUtils\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/DebugUtils.html
DisplayMetrics	A										<section class="prog__container"><p> A structure describing general information about a display, such as its size, density, and font scaling. <p> To access the DisplayMetrics members, initialize an object like this: </p><pre><code>public class DisplayMetrics\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/DisplayMetrics.html
EventLog.Event	A										<section class="prog__container"><p> A previously logged event read from the logs. Instances are thread safe.</p><pre><code>public static final class EventLog.Event\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/EventLog.Event.html
EventLog	A										<section class="prog__container"><p> Access to the system diagnostic event record. System diagnostic events are used to record certain system-level events (such as garbage collection, activity manager state, system watchdogs, and other low level activity), which may be automatically collected and analyzed during system development. <p> This is <b> not </b> the main "logcat" debugging log ( <pre><code> Log </code></pre> )! These diagnostic events are for system integrators, not application authors. <p> Events use integer tag codes corresponding to /system/etc/event-log-tags. They carry a payload of one or more int, long, or String values. The event-log-tags file defines the payload contents for each type code. </p><pre><code>public class EventLog\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/EventLog.html
EventLogTags.Description	A										<section class="prog__container"><pre><code>public static class EventLogTags.Description\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/EventLogTags.Description.html
EventLogTags	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 8. </strong> <br/> This class is no longer functional. Use <pre><code> EventLog </code></pre> instead. </p><pre><code>public class EventLogTags\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/EventLogTags.html
FloatMath	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 22. </strong> <br/> Use <pre><code> Math </code></pre> instead. </p><pre><code>public class FloatMath\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/FloatMath.html
FloatProperty	A										<section class="prog__container"><p> An implementation of <pre><code> Property </code></pre> to be used specifically with fields of type <pre><code> float </code></pre> . This type-specific subclass enables performance benefit by allowing calls to a <pre><code> setValue() </code></pre> function that takes the primitive <pre><code> float </code></pre> type and avoids autoboxing and other overhead associated with the <pre><code> Float </code></pre> class.</p><pre><code>public abstract class FloatProperty\n</code></pre></section>	https://developer.android.com/reference/android/util/FloatProperty.html
IntProperty	A										<section class="prog__container"><p> An implementation of <pre><code> Property </code></pre> to be used specifically with fields of type <pre><code> int </code></pre> . This type-specific subclass enables performance benefit by allowing calls to a <pre><code> setValue() </code></pre> function that takes the primitive <pre><code> int </code></pre> type and avoids autoboxing and other overhead associated with the <pre><code> Integer </code></pre> class.</p><pre><code>public abstract class IntProperty\n</code></pre></section>	https://developer.android.com/reference/android/util/IntProperty.html
JsonReader	A										<section class="prog__container"><p> Reads a JSON ( RFC 4627 ) encoded value as a stream of tokens. This stream includes both literal values (strings, numbers, booleans, and nulls) as well as the begin and end delimiters of objects and arrays. The tokens are traversed in depth-first order, the same order that they appear in the JSON document. Within JSON objects, name/value pairs are represented by a single token. </p><pre><code>public final class JsonReader\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/JsonReader.html
JsonToken	A										<section class="prog__container"><p> A structure, name or value type in a JSON-encoded string.</p><pre><code>public final enum JsonToken\n</code></pre></section>	https://developer.android.com/reference/android/util/JsonToken.html
JsonWriter	A										<section class="prog__container"><p> Writes a JSON ( RFC 4627 ) encoded value to a stream, one token at a time. The stream includes both literal values (strings, numbers, booleans and nulls) as well as the begin and end delimiters of objects and arrays. </p><pre><code>public final class JsonWriter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/JsonWriter.html
LayoutDirection	A										<section class="prog__container"><p> A class for defining layout directions. A layout direction can be left-to-right (LTR) or right-to-left (RTL). It can also be inherited (from a parent) or deduced from the default language script of a locale.</p><pre><code>public final class LayoutDirection\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/LayoutDirection.html
Log	A										<section class="prog__container"><p> API for sending log output. <p> Generally, use the Log.v() Log.d() Log.i() Log.w() and Log.e() methods. <p> The order in terms of verbosity, from least to most is ERROR, WARN, INFO, DEBUG, VERBOSE. Verbose should never be compiled into an application except during development. Debug logs are compiled in but stripped at runtime. Error, warning and info logs are always kept. <p> <b> Tip: </b> A good convention is to declare a <pre><code> TAG </code></pre> constant in your class: <pre>private static final String TAG = "MyActivity";</pre> and use that in subsequent calls to the log methods. </p><pre><code>public final class Log\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/Log.html
LogPrinter	A										<section class="prog__container"><p> Implementation of a <pre><code> Printer </code></pre> that sends its output to the system log.</p><pre><code>public class LogPrinter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/LogPrinter.html
LongSparseArray	A										<section class="prog__container"><p> SparseArray mapping longs to Objects. Unlike a normal array of Objects, there can be gaps in the indices. It is intended to be more memory efficient than using a HashMap to map Longs to Objects, both because it avoids auto-boxing keys and its data structure doesn't rely on an extra entry object for each mapping. <p> Note that this container keeps its mappings in an array data structure, using a binary search to find keys. The implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashMap, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. </p><pre><code>public class LongSparseArray\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/LongSparseArray.html
LruCache	A										<section class="prog__container"><p> A cache that holds strong references to a limited number of values. Each time a value is accessed, it is moved to the head of a queue. When a value is added to a full cache, the value at the end of that queue is evicted and may become eligible for garbage collection. <p> If your cached values hold resources that need to be explicitly released, override <pre><code> entryRemoved(boolean, K, V, V) </code></pre> . <p> If a cache miss should be computed on demand for the corresponding keys, override <pre><code> create(K) </code></pre> . This simplifies the calling code, allowing it to assume a value will always be returned, even when there's a cache miss. <p> By default, the cache size is measured in the number of entries. Override <pre><code> sizeOf(K, V) </code></pre> to size the cache in different units. For example, this cache is limited to 4MiB of bitmaps: <pre> <pre><code>int cacheSize = 4 * 1024 * 1024; // 4MiB LruCache&lt;String, Bitmap&gt; bitmapCache = new LruCache&lt;String, Bitmap&gt;(cacheSize) { protected int sizeOf(String key, Bitmap value) { return value.getByteCount(); } }</code></pre></pre> <p> This class is thread-safe. Perform multiple cache operations atomically by synchronizing on the cache: <pre> <pre><code>synchronized (cache) { if (cache.get(key) == null) { cache.put(key, value); } }</code></pre></pre> <p> This class does not allow null to be used as a key or value. A return value of null from <pre><code> get(K) </code></pre> , <pre><code> put(K, V) </code></pre> or <pre><code> remove(K) </code></pre> is unambiguous: the key was not in the cache. <p> This class appeared in Android 3.1 (Honeycomb MR1); it's available as part of Android's Support Package for earlier releases. </p><pre><code>public class LruCache\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/LruCache.html
MalformedJsonException	A										<section class="prog__container"><p> Thrown when a reader encounters malformed JSON. Some syntax errors can be ignored by calling <pre><code> setLenient(boolean) </code></pre> .</p><pre><code>public final class MalformedJsonException\n</code></pre></section>	https://developer.android.com/reference/android/util/MalformedJsonException.html
MonthDisplayHelper	A										<section class="prog__container"><p> Helps answer common questions that come up when displaying a month in a 6 row calendar grid format. Not thread safe.</p><pre><code>public class MonthDisplayHelper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/MonthDisplayHelper.html
MutableBoolean	A										<section class="prog__container"><pre><code>public final class MutableBoolean\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/MutableBoolean.html
MutableByte	A										<section class="prog__container"><pre><code>public final class MutableByte\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/MutableByte.html
MutableChar	A										<section class="prog__container"><pre><code>public final class MutableChar\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/MutableChar.html
MutableDouble	A										<section class="prog__container"><pre><code>public final class MutableDouble\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/MutableDouble.html
MutableFloat	A										<section class="prog__container"><pre><code>public final class MutableFloat\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/MutableFloat.html
MutableInt	A										<section class="prog__container"><pre><code>public final class MutableInt\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/MutableInt.html
MutableLong	A										<section class="prog__container"><pre><code>public final class MutableLong\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/MutableLong.html
MutableShort	A										<section class="prog__container"><pre><code>public final class MutableShort\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/MutableShort.html
NoSuchPropertyException	A										<section class="prog__container"><p> Thrown when code requests a <pre><code> Property </code></pre> on a class that does not expose the appropriate method or field.</p><pre><code>public class NoSuchPropertyException\n</code></pre></section>	https://developer.android.com/reference/android/util/NoSuchPropertyException.html
android.util	A										<section class="prog__container">Various utilities for debugging and logging. </section>	https://developer.android.com/reference/android/util/package-summary.html
Pair	A										<section class="prog__container"><p> Container to ease passing around a tuple of two objects. This object provides a sensible implementation of equals(), returning true if equals() is true on each of the contained objects.</p><pre><code>public class Pair\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/Pair.html
Patterns	A										<section class="prog__container"><p> Commonly used regular expression patterns.</p><pre><code>public class Patterns\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/Patterns.html
Printer	A										<section class="prog__container"><p> Simple interface for printing text, allowing redirection to various targets. Standard implementations are <pre><code> LogPrinter </code></pre> , <pre><code> StringBuilderPrinter </code></pre> , and <pre><code> PrintWriterPrinter </code></pre> .</p><pre><code>public interface Printer\n</code></pre></section>	https://developer.android.com/reference/android/util/Printer.html
PrintStreamPrinter	A										<section class="prog__container"><p> Implementation of a <pre><code> Printer </code></pre> that sends its output to a <pre><code> PrintStream </code></pre> .</p><pre><code>public class PrintStreamPrinter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/PrintStreamPrinter.html
PrintWriterPrinter	A										<section class="prog__container"><p> Implementation of a <pre><code> Printer </code></pre> that sends its output to a <pre><code> PrintWriter </code></pre> .</p><pre><code>public class PrintWriterPrinter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/PrintWriterPrinter.html
Property	A										<section class="prog__container"><p> A property is an abstraction that can be used to represent a <emb> mutable </emb></p><pre><code>public abstract class Property\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/Property.html
Range	A										<section class="prog__container"><p> Immutable class for describing the range of two numeric values. <p> A range (or "interval") defines the inclusive boundaries around a contiguous span of values of some <pre><code> Comparable </code></pre> type; for example, "integers from 1 to 100 inclusive." </p><pre><code>public final class Range\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/Range.html
Rational	A										<section class="prog__container"><p> <p> An immutable data type representation a rational number. </p><pre><code>public final class Rational\n</code></pre></section>	https://developer.android.com/reference/android/util/Rational.html
Size	A										<section class="prog__container"><p> Immutable class for describing width and height dimensions in pixels.</p><pre><code>public final class Size\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/Size.html
SizeF	A										<section class="prog__container"><p> Immutable class for describing width and height dimensions in some arbitrary unit. <p> Width and height are finite values stored as a floating point representation. </p><pre><code>public final class SizeF\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/SizeF.html
SparseArray	A										<section class="prog__container"><p> SparseArrays map integers to Objects. Unlike a normal array of Objects, there can be gaps in the indices. It is intended to be more memory efficient than using a HashMap to map Integers to Objects, both because it avoids auto-boxing keys and its data structure doesn't rely on an extra entry object for each mapping. <p> Note that this container keeps its mappings in an array data structure, using a binary search to find keys. The implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashMap, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. </p><pre><code>public class SparseArray\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/SparseArray.html
SparseBooleanArray	A										<section class="prog__container"><p> SparseBooleanArrays map integers to booleans. Unlike a normal array of booleans there can be gaps in the indices. It is intended to be more memory efficient than using a HashMap to map Integers to Booleans, both because it avoids auto-boxing keys and values and its data structure doesn't rely on an extra entry object for each mapping. <p> Note that this container keeps its mappings in an array data structure, using a binary search to find keys. The implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashMap, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. </p><pre><code>public class SparseBooleanArray\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/SparseBooleanArray.html
SparseIntArray	A										<section class="prog__container"><p> SparseIntArrays map integers to integers. Unlike a normal array of integers, there can be gaps in the indices. It is intended to be more memory efficient than using a HashMap to map Integers to Integers, both because it avoids auto-boxing keys and values and its data structure doesn't rely on an extra entry object for each mapping. <p> Note that this container keeps its mappings in an array data structure, using a binary search to find keys. The implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashMap, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. </p><pre><code>public class SparseIntArray\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/SparseIntArray.html
SparseLongArray	A										<section class="prog__container"><p> SparseLongArrays map integers to longs. Unlike a normal array of longs, there can be gaps in the indices. It is intended to be more memory efficient than using a HashMap to map Integers to Longs, both because it avoids auto-boxing keys and values and its data structure doesn't rely on an extra entry object for each mapping. <p> Note that this container keeps its mappings in an array data structure, using a binary search to find keys. The implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashMap, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. </p><pre><code>public class SparseLongArray\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/SparseLongArray.html
StateSet	A										<section class="prog__container"><p> State sets are arrays of positive ints where each element represents the state of a <pre><code> View </code></pre> (e.g. focused, selected, visible, etc.). A <pre><code> View </code></pre> may be in one or more of those states. A state spec is an array of signed ints where each element represents a required (if positive) or an undesired (if negative) <pre><code> View </code></pre> state. Utils dealing with state sets. In theory we could encapsulate the state set and state spec arrays and not have static methods here but there is some concern about performance since these methods are called during view drawing.</p><pre><code>public class StateSet\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/StateSet.html
StringBuilderPrinter	A										<section class="prog__container"><p> Implementation of a <pre><code> Printer </code></pre> that sends its output to a <pre><code> StringBuilder </code></pre> .</p><pre><code>public class StringBuilderPrinter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/StringBuilderPrinter.html
TimeFormatException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p><pre><code>public class TimeFormatException\n</code></pre></section>	https://developer.android.com/reference/android/util/TimeFormatException.html
TimeUtils	A										<section class="prog__container"><p> A class containing utility methods related to time zones.</p><pre><code>public class TimeUtils\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/TimeUtils.html
TimingLogger	A										<section class="prog__container"><p> A utility class to help log timings splits throughout a method call. Typical usage is: <pre> TimingLogger timings = new TimingLogger(TAG, "methodA"); // ... do some work A ... timings.addSplit("work A"); // ... do some work B ... timings.addSplit("work B"); // ... do some work C ... timings.addSplit("work C"); timings.dumpToLog(); </pre> <p> The dumpToLog call would add the following to the log: </p><pre><code>public class TimingLogger\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/TimingLogger.html
TypedValue	A										<section class="prog__container"><p> Container for a dynamically typed data value. Primarily used with <pre><code> Resources </code></pre> for holding resource values.</p><pre><code>public class TypedValue\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/TypedValue.html
Xml.Encoding	A										<section class="prog__container"><p> Supported character encodings.</p><pre><code>public static final enum Xml.Encoding\n</code></pre></section>	https://developer.android.com/reference/android/util/Xml.Encoding.html
Xml	A										<section class="prog__container"><p> XML utility methods.</p><pre><code>public class Xml\nextends Object</code></pre></section>	https://developer.android.com/reference/android/util/Xml.html
AbsSavedState	A										<section class="prog__container"><p> A <pre><code> Parcelable </code></pre> implementation that should be used by inheritance hierarchies to ensure the state of all classes along the chain is saved.</p><pre><code>public abstract class AbsSavedState\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/AbsSavedState.html
ActionMode.Callback	A										<section class="prog__container"><p> Callback interface for action modes. Supplied to <pre><code> startActionMode(Callback) </code></pre> , a Callback configures and handles events raised by a user's interaction with an action mode. <p> An action mode's lifecycle is as follows: <ul> <li> <pre><code> onCreateActionMode(ActionMode, Menu) </code></pre> once on initial creation </li> <li> <pre><code> onPrepareActionMode(ActionMode, Menu) </code></pre> after creation and any time the <pre><code> ActionMode </code></pre> is invalidated </li> <li> <pre><code> onActionItemClicked(ActionMode, MenuItem) </code></pre> any time a contextual action button is clicked </li> <li> <pre><code> onDestroyActionMode(ActionMode) </code></pre> when the action mode is closed </li> </ul> </p><pre><code>public static interface ActionMode.Callback\n</code></pre></section>	https://developer.android.com/reference/android/view/ActionMode.Callback.html
ActionMode.Callback2	A										<section class="prog__container"><p> Extension of <pre><code> ActionMode.Callback </code></pre> to provide content rect information. This is required for ActionModes with dynamic positioning such as the ones with type <pre><code> TYPE_FLOATING </code></pre> to ensure the positioning doesn't obscure app content. If an app fails to provide a subclass of this class, a default implementation will be used.</p><pre><code>public static abstract class ActionMode.Callback2\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/ActionMode.Callback2.html
ActionMode	A										<section class="prog__container"><p> Represents a contextual mode of the user interface. Action modes can be used to provide alternative interaction modes and replace parts of the normal UI until finished. Examples of good action modes include text selection and contextual actions. </p><pre><code>public abstract class ActionMode\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/ActionMode.html
ActionProvider	A										<section class="prog__container"><p> An ActionProvider defines rich menu interaction in a single component. ActionProvider can generate action views for use in the action bar, dynamically populate submenus of a MenuItem, and handle default menu item invocations. <p> An ActionProvider can be optionally specified for a <pre><code> MenuItem </code></pre> and will be responsible for creating the action view that appears in the <pre><code> ActionBar </code></pre> in place of a simple button in the bar. When the menu item is presented in a way that does not allow custom action views, (e.g. in an overflow menu,) the ActionProvider can perform a default action. </p><pre><code>public abstract class ActionProvider\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/ActionProvider.html
ActionProvider.VisibilityListener	A										<section class="prog__container"><p> Listens to changes in visibility as reported by <pre><code> refreshVisibility() </code></pre> .</p><pre><code>public static interface ActionProvider.VisibilityListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ActionProvider.VisibilityListener.html
Choreographer.FrameCallback	A										<section class="prog__container"><p> Implement this interface to receive a callback when a new display frame is being rendered. The callback is invoked on the <pre><code> Looper </code></pre> thread to which the <pre><code> Choreographer </code></pre> is attached.</p><pre><code>public static interface Choreographer.FrameCallback\n</code></pre></section>	https://developer.android.com/reference/android/view/Choreographer.FrameCallback.html
Choreographer	A										<section class="prog__container"><p> Coordinates the timing of animations, input and drawing. <p> The choreographer receives timing pulses (such as vertical synchronization) from the display subsystem then schedules work to occur as part of rendering the next display frame. </p><pre><code>public final class Choreographer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/Choreographer.html
CollapsibleActionView	A										<section class="prog__container"><p> When a <pre><code> View </code></pre> implements this interface it will receive callbacks when expanded or collapsed as an action view alongside the optional, app-specified callbacks to <pre><code> MenuItem.OnActionExpandListener </code></pre> . <p> See <pre><code> MenuItem </code></pre> for more information about action views. See <pre><code> ActionBar </code></pre> for more information about the action bar. </p><pre><code>public interface CollapsibleActionView\n</code></pre></section>	https://developer.android.com/reference/android/view/CollapsibleActionView.html
ContextMenu.ContextMenuInfo	A										<section class="prog__container"><p> Additional information regarding the creation of the context menu. For example, <pre><code> AdapterView </code></pre> s use this to pass the exact item position within the adapter that initiated the context menu.</p><pre><code>public static interface ContextMenu.ContextMenuInfo\n</code></pre></section>	https://developer.android.com/reference/android/view/ContextMenu.ContextMenuInfo.html
ContextMenu	A										<section class="prog__container"><p> Extension of <pre><code> Menu </code></pre> for context menus providing functionality to modify the header of the context menu. <p> Context menus do not support item shortcuts and item icons. <p> To show a context menu on long click, most clients will want to call <pre><code> registerForContextMenu(View) </code></pre> and override <pre><code> onCreateContextMenu(ContextMenu, View, ContextMenu.ContextMenuInfo) </code></pre> . </p><pre><code>public interface ContextMenu\nimplements Menu</code></pre></section>	https://developer.android.com/reference/android/view/ContextMenu.html
ContextThemeWrapper	A										<section class="prog__container"><p> A context wrapper that allows you to modify or replace the theme of the wrapped context.</p><pre><code>public class ContextThemeWrapper\n</code></pre></section>	https://developer.android.com/reference/android/view/ContextThemeWrapper.html
Display.HdrCapabilities	A										<section class="prog__container"><p> Encapsulates the HDR capabilities of a given display. For example, what HDR types it supports and details about the desired luminance data. <p> You can get an instance for a given <pre><code> Display </code></pre> object with <pre><code> getHdrCapabilities() </code></pre> . </p><pre><code>public static final class Display.HdrCapabilities\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/Display.HdrCapabilities.html
Display	A										<section class="prog__container"><p> Provides information about the size and density of a logical display. <p> The display area is described in two different ways. <ul> <li> The application display area specifies the part of the display that may contain an application window, excluding the system decorations. The application display area may be smaller than the real display area because the system subtracts the space needed for decor elements such as the status bar. Use the following methods to query the application display area: <pre><code> getSize(Point) </code></pre> , <pre><code> getRectSize(Rect) </code></pre> and <pre><code> getMetrics(DisplayMetrics) </code></pre> . </li> <li> The real display area specifies the part of the display that contains content including the system decorations. Even so, the real display area may be smaller than the physical size of the display if the window manager is emulating a smaller display using (adb shell am display-size). Use the following methods to query the real display area: <pre><code> getRealSize(Point) </code></pre> , <pre><code> getRealMetrics(DisplayMetrics) </code></pre> . </li> </ul> </p><pre><code>public final class Display\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/Display.html
Display.Mode	A										<section class="prog__container"><p> A mode supported by a given display.</p><pre><code>public static final class Display.Mode\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/Display.Mode.html
DragAndDropPermissions	A										<section class="prog__container"><p> <pre><code> DragAndDropPermissions </code></pre> controls the access permissions for the content URIs associated with a <pre><code> DragEvent </code></pre> . <p> Permission are granted when this object is created by <pre><code> Activity.requestDragAndDropPermissions </code></pre> . Which permissions are granted is defined by the set of flags passed to <pre><code> View.startDragAndDrop </code></pre> by the app that started the drag operation. </p><pre><code>public final class DragAndDropPermissions\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/DragAndDropPermissions.html
DragEvent	A										<section class="prog__container"><p> Represents an event that is sent out by the system at various times during a drag and drop operation. It is a complex data structure that contains several important pieces of data about the operation and the underlying data. <p> View objects that receive a DragEvent call <pre><code> getAction() </code></pre> , which returns an action type that indicates the state of the drag and drop operation. This allows a View object to react to a change in state by changing its appearance or performing other actions. For example, a View can react to the <pre><code> ACTION_DRAG_ENTERED </code></pre> action type by by changing one or more colors in its displayed image. </p><pre><code>public class DragEvent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/DragEvent.html
FocusFinder	A										<section class="prog__container"><p> The algorithm used for finding the next focusable view in a given direction from a view that currently has focus.</p><pre><code>public class FocusFinder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/FocusFinder.html
FrameMetrics	A										<section class="prog__container"><p> Class containing timing data for various milestones in a frame lifecycle reported by the rendering subsystem. <p> Supported metrics can be queried via their corresponding identifier. </p><pre><code>public final class FrameMetrics\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/FrameMetrics.html
FrameStats	A										<section class="prog__container"><p> This is the base class for frame statistics.</p><pre><code>public abstract class FrameStats\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/FrameStats.html
GestureDetector	A										<section class="prog__container"><p> Detects various gestures and events using the supplied <pre><code> MotionEvent </code></pre> s. The <pre><code> GestureDetector.OnGestureListener </code></pre> callback will notify users when a particular motion event has occurred. This class should only be used with <pre><code> MotionEvent </code></pre> s reported via touch (don't use for trackball events). To use this class: <ul> <li> Create an instance of the <pre><code> GestureDetector </code></pre> for your <pre><code> View </code></pre> <li> In the <pre><code> onTouchEvent(MotionEvent) </code></pre> method ensure you call <pre><code> onTouchEvent(MotionEvent) </code></pre> . The methods defined in your callback will be executed when the events occur. <li> If listening for <pre><code> onContextClick(MotionEvent) </code></pre> you must call <pre><code> onGenericMotionEvent(MotionEvent) </code></pre> in <pre><code> onGenericMotionEvent(MotionEvent) </code></pre> . </li> </li> </li> </ul></p><pre><code>public class GestureDetector\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/GestureDetector.html
GestureDetector.OnContextClickListener	A										<section class="prog__container"><p> The listener that is used to notify when a context click occurs. When listening for a context click ensure that you call <pre><code> onGenericMotionEvent(MotionEvent) </code></pre> in <pre><code> onGenericMotionEvent(MotionEvent) </code></pre> .</p><pre><code>public static interface GestureDetector.OnContextClickListener\n</code></pre></section>	https://developer.android.com/reference/android/view/GestureDetector.OnContextClickListener.html
GestureDetector.OnDoubleTapListener	A										<section class="prog__container"><p> The listener that is used to notify when a double-tap or a confirmed single-tap occur.</p><pre><code>public static interface GestureDetector.OnDoubleTapListener\n</code></pre></section>	https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html
GestureDetector.OnGestureListener	A										<section class="prog__container"><p> The listener that is used to notify when gestures occur. If you want to listen for all the different gestures then implement this interface. If you only want to listen for a subset it might be easier to extend <pre><code> GestureDetector.SimpleOnGestureListener </code></pre> .</p><pre><code>public static interface GestureDetector.OnGestureListener\n</code></pre></section>	https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html
GestureDetector.SimpleOnGestureListener	A										<section class="prog__container"><p> A convenience class to extend when you only want to listen for a subset of all the gestures. This implements all methods in the <pre><code> GestureDetector.OnGestureListener </code></pre> , <pre><code> GestureDetector.OnDoubleTapListener </code></pre> , and <pre><code> GestureDetector.OnContextClickListener </code></pre> but does nothing and return <pre><code> false </code></pre> for all applicable methods.</p><pre><code>public static class GestureDetector.SimpleOnGestureListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html
Gravity	A										<section class="prog__container"><p> Standard constants and tools for placing an object within a potentially larger container.</p><pre><code>public class Gravity\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/Gravity.html
HapticFeedbackConstants	A										<section class="prog__container"><p> Constants to be used to perform haptic feedback effects via <pre><code> performHapticFeedback(int) </code></pre></p><pre><code>public class HapticFeedbackConstants\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/HapticFeedbackConstants.html
InflateException	A										<section class="prog__container"><p> This exception is thrown by an inflater on error conditions.</p><pre><code>public class InflateException\n</code></pre></section>	https://developer.android.com/reference/android/view/InflateException.html
InputDevice	A										<section class="prog__container"><p> Describes the capabilities of a particular input device. <p> Each input device may support multiple classes of input. For example, a multi-function keyboard may compose the capabilities of a standard keyboard together with a track pad mouse or other pointing device. </p><pre><code>public final class InputDevice\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/InputDevice.html
InputDevice.MotionRange	A										<section class="prog__container"><p> Provides information about the range of values for a particular <pre><code> MotionEvent </code></pre> axis.</p><pre><code>public static final class InputDevice.MotionRange\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/InputDevice.MotionRange.html
InputEvent	A										<section class="prog__container"><p> Common base class for input events.</p><pre><code>public abstract class InputEvent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/InputEvent.html
InputQueue.Callback	A										<section class="prog__container"><p> Interface to receive notification of when an InputQueue is associated and dissociated with a thread.</p><pre><code>public static interface InputQueue.Callback\n</code></pre></section>	https://developer.android.com/reference/android/view/InputQueue.Callback.html
InputQueue	A										<section class="prog__container"><p> An input queue provides a mechanism for an application to receive incoming input events. Currently only usable from native code.</p><pre><code>public final class InputQueue\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/InputQueue.html
KeyboardShortcutGroup	A										<section class="prog__container"><p> A group of <pre><code> KeyboardShortcutInfo </code></pre> .</p><pre><code>public final class KeyboardShortcutGroup\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/KeyboardShortcutGroup.html
KeyboardShortcutInfo	A										<section class="prog__container"><p> Information about a Keyboard Shortcut.</p><pre><code>public final class KeyboardShortcutInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/KeyboardShortcutInfo.html
KeyCharacterMap	A										<section class="prog__container"><p> Describes the keys provided by a keyboard device and their associated labels.</p><pre><code>public class KeyCharacterMap\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/KeyCharacterMap.html
KeyCharacterMap.KeyData	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 11. </strong> <br/> instead use <pre><code> getDisplayLabel(int) </code></pre> , <pre><code> getNumber(int) </code></pre> and <pre><code> get(int, int) </code></pre> . </p><pre><code>public static class KeyCharacterMap.KeyData\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/KeyCharacterMap.KeyData.html
KeyCharacterMap.UnavailableException	A										<section class="prog__container"><p> Thrown by <pre><code> load(int) </code></pre> when a key character map could not be loaded.</p><pre><code>public static class KeyCharacterMap.UnavailableException\n</code></pre></section>	https://developer.android.com/reference/android/view/KeyCharacterMap.UnavailableException.html
KeyEvent.Callback	A										<section class="prog__container"><p> Called when a key down event has occurred.</p><pre><code>public static interface KeyEvent.Callback\n</code></pre></section>	https://developer.android.com/reference/android/view/KeyEvent.Callback.html
KeyEvent.DispatcherState	A										<section class="prog__container"><p> Use with <pre><code> dispatch(Callback, DispatcherState, Object) </code></pre> for more advanced key dispatching, such as long presses.</p><pre><code>public static class KeyEvent.DispatcherState\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/KeyEvent.DispatcherState.html
KeyEvent	A										<section class="prog__container"><p> Object used to report key and button events. <p> Each key press is described by a sequence of key events. A key press starts with a key event with <pre><code> ACTION_DOWN </code></pre> . If the key is held sufficiently long that it repeats, then the initial down is followed additional key events with <pre><code> ACTION_DOWN </code></pre> and a non-zero value for <pre><code> getRepeatCount() </code></pre> . The last key event is a <pre><code> ACTION_UP </code></pre> for the key up. If the key press is canceled, the key up event will have the <pre><code> FLAG_CANCELED </code></pre> flag set. </p><pre><code>public class KeyEvent\n</code></pre></section>	https://developer.android.com/reference/android/view/KeyEvent.html
LayoutInflater.Factory	A										<section class="prog__container"><p> Hook you can supply that is called when inflating from a LayoutInflater.</p><pre><code>public static interface LayoutInflater.Factory\n</code></pre></section>	https://developer.android.com/reference/android/view/LayoutInflater.Factory.html
LayoutInflater.Factory2	A										<section class="prog__container"><p> Version of <pre><code> onCreateView(String, Context, AttributeSet) </code></pre> that also supplies the parent that the view created view will be placed in.</p><pre><code>public static interface LayoutInflater.Factory2\nimplements LayoutInflater.Factory</code></pre></section>	https://developer.android.com/reference/android/view/LayoutInflater.Factory2.html
LayoutInflater.Filter	A										<section class="prog__container"><p> Hook to allow clients of the LayoutInflater to restrict the set of Views that are allowed to be inflated.</p><pre><code>public static interface LayoutInflater.Filter\n</code></pre></section>	https://developer.android.com/reference/android/view/LayoutInflater.Filter.html
LayoutInflater	A										<section class="prog__container"><p> Instantiates a layout XML file into its corresponding <pre><code> View </code></pre> objects. It is never used directly. Instead, use <pre><code> getLayoutInflater() </code></pre> or <pre><code> getSystemService(Class <t> ) </t> </code></pre> to retrieve a standard LayoutInflater instance that is already hooked up to the current context and correctly configured for the device you are running on. For example: <pre>LayoutInflater inflater = (LayoutInflater)context.getSystemService (Context.LAYOUT_INFLATER_SERVICE);</pre> <p> To create a new LayoutInflater with an additional <pre><code> LayoutInflater.Factory </code></pre> for your own views, you can use <pre><code> cloneInContext(Context) </code></pre> to clone an existing ViewFactory, and then call <pre><code> setFactory(LayoutInflater.Factory) </code></pre> on it to include your Factory. <p> For performance reasons, view inflation relies heavily on pre-processing of XML files that is done at build time. Therefore, it is not currently possible to use LayoutInflater with an XmlPullParser over a plain XML file at runtime; it only works with an XmlPullParser returned from a compiled resource (R. <em> something </em> file.) </p><pre><code>public abstract class LayoutInflater\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/LayoutInflater.html
Menu	A										<section class="prog__container"><p> Interface for managing the items in a menu. <p> By default, every Activity supports an options menu of actions or options. You can add items to this menu and handle clicks on your additions. The easiest way of adding menu items is inflating an XML file into the <pre><code> Menu </code></pre> via <pre><code> MenuInflater </code></pre> . The easiest way of attaching code to clicks is via <pre><code> onOptionsItemSelected(MenuItem) </code></pre> and <pre><code> onContextItemSelected(MenuItem) </code></pre> . <p> Different menu types support different features: <ol> <li> <b> Context menus </b> : Do not support item shortcuts and item icons. <li> <b> Options menus </b> : The <b> icon menus </b> do not support item check marks and only show the item's <pre><code> condensed title </code></pre> . The <b> expanded menus </b> (only available if six or more menu items are visible, reached via the 'More' item in the icon menu) do not show item icons, and item check marks are discouraged. <li> <b> Sub menus </b> : Do not support item icons, or nested sub menus. </li> </li> </li> </ol> </p><pre><code>public interface Menu\n</code></pre></section>	https://developer.android.com/reference/android/view/Menu.html
MenuInflater	A										<section class="prog__container"><p> This class is used to instantiate menu XML files into Menu objects. <p> For performance reasons, menu inflation relies heavily on pre-processing of XML files that is done at build time. Therefore, it is not currently possible to use MenuInflater with an XmlPullParser over a plain XML file at runtime; it only works with an XmlPullParser returned from a compiled resource (R. <em> something </em> file.) </p><pre><code>public class MenuInflater\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/MenuInflater.html
MenuItem	A										<section class="prog__container"><p> Interface for direct access to a previously created menu item. <p> An Item is returned by calling one of the <pre><code> add(int) </code></pre> methods. <p> For a feature set of specific menu types, see <pre><code> Menu </code></pre> . </p><pre><code>public interface MenuItem\n</code></pre></section>	https://developer.android.com/reference/android/view/MenuItem.html
MenuItem.OnActionExpandListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a menu item marked with <pre><code> SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW </code></pre> is expanded or collapsed.</p><pre><code>public static interface MenuItem.OnActionExpandListener\n</code></pre></section>	https://developer.android.com/reference/android/view/MenuItem.OnActionExpandListener.html
MenuItem.OnMenuItemClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a menu item is clicked.</p><pre><code>public static interface MenuItem.OnMenuItemClickListener\n</code></pre></section>	https://developer.android.com/reference/android/view/MenuItem.OnMenuItemClickListener.html
MotionEvent	A										<section class="prog__container"><p> Object used to report movement (mouse, pen, finger, trackball) events. Motion events may hold either absolute or relative movements and other data, depending on the type of device. </p><pre><code>public final class MotionEvent\n</code></pre></section>	https://developer.android.com/reference/android/view/MotionEvent.html
MotionEvent.PointerCoords	A										<section class="prog__container"><p> Transfer object for pointer coordinates. Objects of this type can be used to specify the pointer coordinates when creating new <pre><code> MotionEvent </code></pre> objects and to query pointer coordinates in bulk. Refer to <pre><code> InputDevice </code></pre> for information about how different kinds of input devices and sources represent pointer coordinates.</p><pre><code>public static final class MotionEvent.PointerCoords\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/MotionEvent.PointerCoords.html
MotionEvent.PointerProperties	A										<section class="prog__container"><p> Transfer object for pointer properties. Objects of this type can be used to specify the pointer id and tool type when creating new <pre><code> MotionEvent </code></pre> objects and to query pointer properties in bulk.</p><pre><code>public static final class MotionEvent.PointerProperties\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/MotionEvent.PointerProperties.html
OrientationEventListener	A										<section class="prog__container"><p> Helper class for receiving notifications from the SensorManager when the orientation of the device has changed.</p><pre><code>public abstract class OrientationEventListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/OrientationEventListener.html
OrientationListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 3. </strong> <br/> use <pre><code> OrientationEventListener </code></pre> instead. This class internally uses the OrientationEventListener. </p><pre><code>public abstract class OrientationListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/OrientationListener.html
android.view	A										<section class="prog__container">A TextureView can be used to display a content stream. </section>	https://developer.android.com/reference/android/view/package-summary.html
PixelCopy	A										<section class="prog__container"><p> Provides a mechanisms to issue pixel copy requests to allow for copy operations from <pre><code> Surface </code></pre> to <pre><code> Bitmap </code></pre></p><pre><code>public final class PixelCopy\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/PixelCopy.html
PixelCopy.OnPixelCopyFinishedListener	A										<section class="prog__container"><p> Listener for observing the completion of a PixelCopy request.</p><pre><code>public static interface PixelCopy.OnPixelCopyFinishedListener\n</code></pre></section>	https://developer.android.com/reference/android/view/PixelCopy.OnPixelCopyFinishedListener.html
PointerIcon	A										<section class="prog__container"><p> Represents an icon that can be used as a mouse pointer. <p> Pointer icons can be provided either by the system using system types, or by applications using bitmaps or application resources. </p><pre><code>public final class PointerIcon\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/PointerIcon.html
ScaleGestureDetector	A										<section class="prog__container"><p> Detects scaling transformation gestures using the supplied <pre><code> MotionEvent </code></pre> s. The <pre><code> ScaleGestureDetector.OnScaleGestureListener </code></pre> callback will notify users when a particular gesture event has occurred. This class should only be used with <pre><code> MotionEvent </code></pre> s reported via touch. To use this class: <ul> <li> Create an instance of the <pre><code> ScaleGestureDetector </code></pre> for your <pre><code> View </code></pre> <li> In the <pre><code> onTouchEvent(MotionEvent) </code></pre> method ensure you call <pre><code> onTouchEvent(MotionEvent) </code></pre> . The methods defined in your callback will be executed when the events occur. </li> </li> </ul></p><pre><code>public class ScaleGestureDetector\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/ScaleGestureDetector.html
ScaleGestureDetector.OnScaleGestureListener	A										<section class="prog__container"><p> The listener for receiving notifications when gestures occur. If you want to listen for all the different gestures then implement this interface. If you only want to listen for a subset it might be easier to extend <pre><code> ScaleGestureDetector.SimpleOnScaleGestureListener </code></pre> . An application will receive events in the following order: <ul> <li> One <pre><code> onScaleBegin(ScaleGestureDetector) </code></pre> <li> Zero or more <pre><code> onScale(ScaleGestureDetector) </code></pre> <li> One <pre><code> onScaleEnd(ScaleGestureDetector) </code></pre> </li> </li> </li> </ul></p><pre><code>public static interface ScaleGestureDetector.OnScaleGestureListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ScaleGestureDetector.OnScaleGestureListener.html
ScaleGestureDetector.SimpleOnScaleGestureListener	A										<section class="prog__container"><p> A convenience class to extend when you only want to listen for a subset of scaling-related events. This implements all methods in <pre><code> ScaleGestureDetector.OnScaleGestureListener </code></pre> but does nothing. <pre><code> onScale(ScaleGestureDetector) </code></pre> returns <pre><code> false </code></pre> so that a subclass can retrieve the accumulated scale factor in an overridden onScaleEnd. <pre><code> onScaleBegin(ScaleGestureDetector) </code></pre> returns <pre><code> true </code></pre> .</p><pre><code>public static class ScaleGestureDetector.SimpleOnScaleGestureListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/ScaleGestureDetector.SimpleOnScaleGestureListener.html
SearchEvent	A										<section class="prog__container"><p> Class that contains information about an event that triggers a search.</p><pre><code>public class SearchEvent\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/SearchEvent.html
SoundEffectConstants	A										<section class="prog__container"><p> Constants to be used to play sound effects via <pre><code> playSoundEffect(int) </code></pre></p><pre><code>public class SoundEffectConstants\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/SoundEffectConstants.html
SubMenu	A										<section class="prog__container"><p> Subclass of <pre><code> Menu </code></pre> for sub menus. <p> Sub menus do not support item icons, or nested sub menus. </p><pre><code>public interface SubMenu\nimplements Menu</code></pre></section>	https://developer.android.com/reference/android/view/SubMenu.html
Surface	A										<section class="prog__container"><p> Handle onto a raw buffer that is being managed by the screen compositor. <p> A Surface is generally created by or from a consumer of image buffers (such as a <pre><code> SurfaceTexture </code></pre> , <pre><code> MediaRecorder </code></pre> , or <pre><code> Allocation </code></pre> ), and is handed to some kind of producer (such as <pre><code> OpenGL </code></pre> , <pre><code> MediaPlayer </code></pre> , or <pre><code> CameraDevice </code></pre> ) to draw into. </p><pre><code>public class Surface\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/Surface.html
Surface.OutOfResourcesException	A										<section class="prog__container"><p> Exception thrown when a Canvas couldn't be locked with <pre><code> lockCanvas(Rect) </code></pre> , or when a SurfaceTexture could not successfully be allocated.</p><pre><code>public static class Surface.OutOfResourcesException\n</code></pre></section>	https://developer.android.com/reference/android/view/Surface.OutOfResourcesException.html
SurfaceHolder.BadSurfaceTypeException	A										<section class="prog__container"><p> Exception that is thrown from <pre><code> lockCanvas() </code></pre> when called on a Surface whose type is SURFACE_TYPE_PUSH_BUFFERS.</p><pre><code>public static class SurfaceHolder.BadSurfaceTypeException\n</code></pre></section>	https://developer.android.com/reference/android/view/SurfaceHolder.BadSurfaceTypeException.html
SurfaceHolder.Callback	A										<section class="prog__container"><p> A client may implement this interface to receive information about changes to the surface. When used with a <pre><code> SurfaceView </code></pre> , the Surface being held is only available between calls to <pre><code> surfaceCreated(SurfaceHolder) </code></pre> and <pre><code> surfaceDestroyed(SurfaceHolder) </code></pre> . The Callback is set with <pre><code> SurfaceHolder.addCallback </code></pre> method.</p><pre><code>public static interface SurfaceHolder.Callback\n</code></pre></section>	https://developer.android.com/reference/android/view/SurfaceHolder.Callback.html
SurfaceHolder.Callback2	A										<section class="prog__container"><p> Additional callbacks that can be received for <pre><code> SurfaceHolder.Callback </code></pre> .</p><pre><code>public static interface SurfaceHolder.Callback2\nimplements SurfaceHolder.Callback</code></pre></section>	https://developer.android.com/reference/android/view/SurfaceHolder.Callback2.html
SurfaceHolder	A										<section class="prog__container"><p> Abstract interface to someone holding a display surface. Allows you to control the surface size and format, edit the pixels in the surface, and monitor changes to the surface. This interface is typically available through the <pre><code> SurfaceView </code></pre> class. <p> When using this interface from a thread other than the one running its <pre><code> SurfaceView </code></pre> , you will want to carefully read the methods <pre><code> lockCanvas() </code></pre> and <pre><code> Callback.surfaceCreated() </code></pre> . </p><pre><code>public interface SurfaceHolder\n</code></pre></section>	https://developer.android.com/reference/android/view/SurfaceHolder.html
SurfaceView	A										<section class="prog__container"><p> Provides a dedicated drawing surface embedded inside of a view hierarchy. You can control the format of this surface and, if you like, its size; the SurfaceView takes care of placing the surface at the correct location on the screen <p> The surface is Z ordered so that it is behind the window holding its SurfaceView; the SurfaceView punches a hole in its window to allow its surface to be displayed. The view hierarchy will take care of correctly compositing with the Surface any siblings of the SurfaceView that would normally appear on top of it. This can be used to place overlays such as buttons on top of the Surface, though note however that it can have an impact on performance since a full alpha-blended composite will be performed each time the Surface changes. <p> The transparent region that makes the surface visible is based on the layout positions in the view hierarchy. If the post-layout transform properties are used to draw a sibling view on top of the SurfaceView, the view may not be properly composited with the surface. <p> Access to the underlying surface is provided via the SurfaceHolder interface, which can be retrieved by calling <pre><code> getHolder() </code></pre> . <p> The Surface will be created for you while the SurfaceView's window is visible; you should implement <pre><code> surfaceCreated(SurfaceHolder) </code></pre> and <pre><code> surfaceDestroyed(SurfaceHolder) </code></pre> to discover when the Surface is created and destroyed as the window is shown and hidden. <p> One of the purposes of this class is to provide a surface in which a secondary thread can render into the screen. If you are going to use it this way, you need to be aware of some threading semantics: <ul> <li> All SurfaceView and <pre><code> SurfaceHolder.Callback </code></pre> methods will be called from the thread running the SurfaceView's window (typically the main thread of the application). They thus need to correctly synchronize with any state that is also touched by the drawing thread. <li> You must ensure that the drawing thread only touches the underlying Surface while it is valid -- between <pre><code> SurfaceHolder.Callback.surfaceCreated() </code></pre> and <pre><code> SurfaceHolder.Callback.surfaceDestroyed() </code></pre> . </li> </li> </ul> <p class="note"> <strong> Note: </strong> Starting in platform version <pre><code> N </code></pre> , SurfaceView's window position is updated synchronously with other View rendering. This means that translating and scaling a SurfaceView on screen will not cause rendering artifacts. Such artifacts may occur on previous versions of the platform when its window is positioned asynchronously. </p><pre><code>public class SurfaceView\n</code></pre></section>	https://developer.android.com/reference/android/view/SurfaceView.html
TextureView	A										<section class="prog__container"><p> <p> A TextureView can be used to display a content stream. Such a content stream can for instance be a video or an OpenGL scene. The content stream can come from the application's process as well as a remote process. </p><pre><code>public class TextureView\n</code></pre></section>	https://developer.android.com/reference/android/view/TextureView.html
TextureView.SurfaceTextureListener	A										<section class="prog__container"><p> This listener can be used to be notified when the surface texture associated with this texture view is available.</p><pre><code>public static interface TextureView.SurfaceTextureListener\n</code></pre></section>	https://developer.android.com/reference/android/view/TextureView.SurfaceTextureListener.html
TouchDelegate	A										<section class="prog__container"><p> Helper class to handle situations where you want a view to have a larger touch area than its actual view bounds. The view whose touch area is changed is called the delegate view. This class should be used by an ancestor of the delegate. To use a TouchDelegate, first create an instance that specifies the bounds that should be mapped to the delegate and the delegate view itself. <p> The ancestor should then forward all of its touch events received in its <pre><code> onTouchEvent(MotionEvent) </code></pre> to <pre><code> onTouchEvent(MotionEvent) </code></pre> . </p><pre><code>public class TouchDelegate\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/TouchDelegate.html
VelocityTracker	A										<section class="prog__container"><p> Helper for tracking the velocity of touch events, for implementing flinging and other such gestures. Use <pre><code> obtain() </code></pre> to retrieve a new instance of the class when you are going to begin tracking. Put the motion events you receive into it with <pre><code> addMovement(MotionEvent) </code></pre> . When you want to determine the velocity call <pre><code> computeCurrentVelocity(int) </code></pre> and then call <pre><code> getXVelocity(int) </code></pre> and <pre><code> getYVelocity(int) </code></pre> to retrieve the velocity for each pointer id.</p><pre><code>public final class VelocityTracker\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/VelocityTracker.html
View.AccessibilityDelegate	A										<section class="prog__container"><p> <p> This class represents a delegate that can be registered in a <pre><code> View </code></pre> to enhance accessibility support via composition rather via inheritance. It is specifically targeted to widget developers that extend basic View classes i.e. classes in package android.view, that would like their applications to be backwards compatible. </p><pre><code>public static class View.AccessibilityDelegate\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html
View.BaseSavedState	A										<section class="prog__container"><p> Base class for derived classes that want to save and restore their own state in <pre><code> onSaveInstanceState() </code></pre> .</p><pre><code>public static class View.BaseSavedState\n</code></pre></section>	https://developer.android.com/reference/android/view/View.BaseSavedState.html
View.DragShadowBuilder	A										<section class="prog__container"><p> Creates an image that the system displays during the drag and drop operation. This is called a "drag shadow". The default implementation for a DragShadowBuilder based on a View returns an image that has exactly the same appearance as the given View. The default also positions the center of the drag shadow directly under the touch point. If no View is provided (the constructor with no parameters is used), and <pre><code> onProvideShadowMetrics() </code></pre> and <pre><code> onDrawShadow() </code></pre> are not overridden, then the default is an invisible drag shadow. <p> You are not required to use the View you provide to the constructor as the basis of the drag shadow. The <pre><code> onDrawShadow() </code></pre> method allows you to draw anything you want as the drag shadow. </p><pre><code>public static class View.DragShadowBuilder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/View.DragShadowBuilder.html
View	A										<section class="prog__container"><p> <p> This class represents the basic building block for user interface components. A View occupies a rectangular area on the screen and is responsible for drawing and event handling. View is the base class for <em> widgets </em> , which are used to create interactive UI components (buttons, text fields, etc.). The <pre><code> ViewGroup </code></pre> subclass is the base class for <em> layouts </em> , which are invisible containers that hold other Views (or other ViewGroups) and define their layout properties. </p><pre><code>public class View\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/View.html
View.MeasureSpec	A										<section class="prog__container"><p> A MeasureSpec encapsulates the layout requirements passed from parent to child. Each MeasureSpec represents a requirement for either the width or the height. A MeasureSpec is comprised of a size and a mode. There are three possible modes: <dl> <dt> UNSPECIFIED </dt> <dd> The parent has not imposed any constraint on the child. It can be whatever size it wants. </dd> <dt> EXACTLY </dt> <dd> The parent has determined an exact size for the child. The child is going to be given those bounds regardless of how big it wants to be. </dd> <dt> AT_MOST </dt> <dd> The child can be as large as it wants up to the specified size. </dd> </dl> MeasureSpecs are implemented as ints to reduce object allocation. This class is provided to pack and unpack the &lt;size, mode&gt; tuple into the int.</p><pre><code>public static class View.MeasureSpec\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/View.MeasureSpec.html
View.OnApplyWindowInsetsListener	A										<section class="prog__container"><p> Listener for applying window insets on a view in a custom way. <p> Apps may choose to implement this interface if they want to apply custom policy to the way that window insets are treated for a view. If an OnApplyWindowInsetsListener is set, its <pre><code> onApplyWindowInsets </code></pre> method will be called instead of the View's own <pre><code> onApplyWindowInsets </code></pre> method. The listener may optionally call the parameter View's <pre><code> onApplyWindowInsets </code></pre> method to apply the View's normal behavior as part of its own. </p><pre><code>public static interface View.OnApplyWindowInsetsListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnApplyWindowInsetsListener.html
View.OnAttachStateChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when this view is attached or detached from its window.</p><pre><code>public static interface View.OnAttachStateChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html
View.OnClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a view is clicked.</p><pre><code>public static interface View.OnClickListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnClickListener.html
View.OnContextClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a view is context clicked.</p><pre><code>public static interface View.OnContextClickListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnContextClickListener.html
View.OnCreateContextMenuListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the context menu for this view is being built.</p><pre><code>public static interface View.OnCreateContextMenuListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnCreateContextMenuListener.html
View.OnDragListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a drag is being dispatched to this view. The callback will be invoked before the hosting view's own onDrag(event) method. If the listener wants to fall back to the hosting view's onDrag(event) behavior, it should return 'false' from this callback. </p><pre><code>public static interface View.OnDragListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnDragListener.html
View.OnFocusChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the focus state of a view changed.</p><pre><code>public static interface View.OnFocusChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnFocusChangeListener.html
View.OnGenericMotionListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a generic motion event is dispatched to this view. The callback will be invoked before the generic motion event is given to the view.</p><pre><code>public static interface View.OnGenericMotionListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnGenericMotionListener.html
View.OnHoverListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a hover event is dispatched to this view. The callback will be invoked before the hover event is given to the view.</p><pre><code>public static interface View.OnHoverListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnHoverListener.html
View.OnKeyListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a hardware key event is dispatched to this view. The callback will be invoked before the key event is given to the view. This is only useful for hardware keyboards; a software input method has no obligation to trigger this listener.</p><pre><code>public static interface View.OnKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnKeyListener.html
View.OnLayoutChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the layout bounds of a view changes due to layout processing.</p><pre><code>public static interface View.OnLayoutChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnLayoutChangeListener.html
View.OnLongClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a view has been clicked and held.</p><pre><code>public static interface View.OnLongClickListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnLongClickListener.html
View.OnScrollChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the scroll X or Y positions of a view change. <p> <b> Note: </b> Some views handle scrolling independently from View and may have their own separate listeners for scroll-type events. For example, <pre><code> ListView </code></pre> allows clients to register an <pre><code> AbsListView.OnScrollListener </code></pre> to listen for changes in list scroll position. </p><pre><code>public static interface View.OnScrollChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnScrollChangeListener.html
View.OnSystemUiVisibilityChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the status bar changes visibility. This reports <strong> global </strong> changes to the system UI state, not what the application is requesting.</p><pre><code>public static interface View.OnSystemUiVisibilityChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnSystemUiVisibilityChangeListener.html
View.OnTouchListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a touch event is dispatched to this view. The callback will be invoked before the touch event is given to the view.</p><pre><code>public static interface View.OnTouchListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnTouchListener.html
ViewAnimationUtils	A										<section class="prog__container"><p> Defines common utilities for working with View's animations.</p><pre><code>public final class ViewAnimationUtils\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/ViewAnimationUtils.html
ViewConfiguration	A										<section class="prog__container"><p> Contains methods to standard constants used in the UI for timeouts, sizes, and distances.</p><pre><code>public class ViewConfiguration\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/ViewConfiguration.html
ViewDebug.CapturedViewProperty	A										<section class="prog__container"><p> This annotation can be used to mark fields and methods to be dumped when the view is captured. Methods with this annotation must have no arguments and must return a valid type of data.</p><pre><code>public static abstract @interface ViewDebug.CapturedViewProperty\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/view/ViewDebug.CapturedViewProperty.html
ViewDebug.ExportedProperty	A										<section class="prog__container"><p> This annotation can be used to mark fields and methods to be dumped by the view server. Only non-void methods with no arguments can be annotated by this annotation.</p><pre><code>public static abstract @interface ViewDebug.ExportedProperty\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html
ViewDebug.FlagToString	A										<section class="prog__container"><p> Defines a mapping from a flag to a String. Such a mapping can be used in an @ExportedProperty to provide more meaningful values to the end user.</p><pre><code>public static abstract @interface ViewDebug.FlagToString\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/view/ViewDebug.FlagToString.html
ViewDebug.HierarchyTraceType	A										<section class="prog__container"><p> <p class="caution"> <strong> This enum was deprecated in API level 16. </strong> <br/> This enum is now unused </p><pre><code>public static final enum ViewDebug.HierarchyTraceType\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewDebug.HierarchyTraceType.html
ViewDebug	A										<section class="prog__container"><p> Various debugging/tracing tools related to <pre><code> View </code></pre> and the view hierarchy.</p><pre><code>public class ViewDebug\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/ViewDebug.html
ViewDebug.IntToString	A										<section class="prog__container"><p> Defines a mapping from an int value to a String. Such a mapping can be used in an @ExportedProperty to provide more meaningful values to the end user.</p><pre><code>public static abstract @interface ViewDebug.IntToString\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/view/ViewDebug.IntToString.html
ViewDebug.RecyclerTraceType	A										<section class="prog__container"><p> <p class="caution"> <strong> This enum was deprecated in API level 16. </strong> <br/> This enum is now unused </p><pre><code>public static final enum ViewDebug.RecyclerTraceType\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewDebug.RecyclerTraceType.html
ViewGroup	A										<section class="prog__container"><p> <p> A <pre><code> ViewGroup </code></pre> is a special view that can contain other views (called children.) The view group is the base class for layouts and views containers. This class also defines the <pre><code> ViewGroup.LayoutParams </code></pre> class which serves as the base class for layouts parameters. </p><pre><code>public abstract class ViewGroup\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewGroup.html
ViewGroup.LayoutParams	A										<section class="prog__container"><p> LayoutParams are used by views to tell their parents how they want to be laid out. See <pre><code> ViewGroup Layout Attributes </code></pre> for a list of all child view attributes that this class supports. <p> The base LayoutParams class just describes how big the view wants to be for both width and height. For each dimension, it can specify one of: <ul> <li> FILL_PARENT (renamed MATCH_PARENT in API Level 8 and higher), which means that the view wants to be as big as its parent (minus padding) <li> WRAP_CONTENT, which means that the view wants to be just big enough to enclose its content (plus padding) <li> an exact number </li> </li> </li> </ul> There are subclasses of LayoutParams for different subclasses of ViewGroup. For example, AbsoluteLayout has its own subclass of LayoutParams which adds an X and Y value. </p><pre><code>public static class ViewGroup.LayoutParams\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html
ViewGroup.MarginLayoutParams	A										<section class="prog__container"><p> Per-child layout information for layouts that support margins. See <pre><code> ViewGroup Margin Layout Attributes </code></pre> for a list of all child view attributes that this class supports.</p><pre><code>public static class ViewGroup.MarginLayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html
ViewGroup.OnHierarchyChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the hierarchy within this view changed. The hierarchy changes whenever a child is added to or removed from this view.</p><pre><code>public static interface ViewGroup.OnHierarchyChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewGroup.OnHierarchyChangeListener.html
ViewGroupOverlay	A										<section class="prog__container"><p> A group overlay is an extra layer that sits on top of a ViewGroup (the "host view") which is drawn after all other content in that view (including the view group's children). Interaction with the overlay layer is done by adding and removing views and drawables. <p> ViewGroupOverlay is a subclass of <pre><code> ViewOverlay </code></pre> , adding the ability to manage views for overlays on ViewGroups, in addition to the drawable support in ViewOverlay. </p><pre><code>public class ViewGroupOverlay\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewGroupOverlay.html
ViewManager	A										<section class="prog__container"><p> Interface to let you add and remove child views to an Activity. To get an instance of this class, call <pre><code> Context.getSystemService() </code></pre> .</p><pre><code>public interface ViewManager\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewManager.html
ViewOutlineProvider	A										<section class="prog__container"><p> Interface by which a View builds its <pre><code> Outline </code></pre> , used for shadow casting and clipping.</p><pre><code>public abstract class ViewOutlineProvider\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/ViewOutlineProvider.html
ViewOverlay	A										<section class="prog__container"><p> An overlay is an extra layer that sits on top of a View (the "host view") which is drawn after all other content in that view (including children, if the view is a ViewGroup). Interaction with the overlay layer is done by adding and removing drawables. <p> An overlay requested from a ViewGroup is of type <pre><code> ViewGroupOverlay </code></pre> , which also supports adding and removing views. </p><pre><code>public class ViewOverlay\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/ViewOverlay.html
ViewParent	A										<section class="prog__container"><p> Defines the responsibilities for a class that will be a parent of a View. This is the API that a view sees when it wants to interact with its parent.</p><pre><code>public interface ViewParent\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewParent.html
ViewPropertyAnimator	A										<section class="prog__container"><p> This class enables automatic and optimized animation of select properties on View objects. If only one or two properties on a View object are being animated, then using an <pre><code> ObjectAnimator </code></pre> is fine; the property setters called by ObjectAnimator are well equipped to do the right thing to set the property and invalidate the view appropriately. But if several properties are animated simultaneously, or if you just want a more convenient syntax to animate a specific property, then ViewPropertyAnimator might be more well-suited to the task. <p> This class may provide better performance for several simultaneous animations, because it will optimize invalidate calls to take place only once for several properties instead of each animated property independently causing its own invalidation. Also, the syntax of using this class could be easier to use because the caller need only tell the View object which property to animate, and the value to animate either to or by, and this class handles the details of configuring the underlying Animator class and starting it. </p><pre><code>public class ViewPropertyAnimator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/ViewPropertyAnimator.html
ViewStructure	A										<section class="prog__container"><p> Container for storing additional per-view data generated by <pre><code> View.onProvideStructure </code></pre> .</p><pre><code>public abstract class ViewStructure\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/ViewStructure.html
ViewStub	A										<section class="prog__container"><p> A ViewStub is an invisible, zero-sized View that can be used to lazily inflate layout resources at runtime. When a ViewStub is made visible, or when <pre><code> inflate() </code></pre> is invoked, the layout resource is inflated. The ViewStub then replaces itself in its parent with the inflated View or Views. Therefore, the ViewStub exists in the view hierarchy until <pre><code> setVisibility(int) </code></pre> or <pre><code> inflate() </code></pre> is invoked. The inflated View is added to the ViewStub's parent with the ViewStub's layout parameters. Similarly, you can define/override the inflate View's id by using the ViewStub's inflatedId property. For instance: <pre> &lt;ViewStub android:id="@+id/stub" android:inflatedId="@+id/subTree" android:layout="@layout/mySubTree" android:layout_width="120dip" android:layout_height="40dip" /&gt; </pre> The ViewStub thus defined can be found using the id "stub." After inflation of the layout resource "mySubTree," the ViewStub is removed from its parent. The View created by inflating the layout resource "mySubTree" can be found using the id "subTree," specified by the inflatedId property. The inflated View is finally assigned a width of 120dip and a height of 40dip. The preferred way to perform the inflation of the layout resource is the following: <pre> ViewStub stub = (ViewStub) findViewById(R.id.stub); View inflated = stub.inflate(); </pre> When <pre><code> inflate() </code></pre> is invoked, the ViewStub is replaced by the inflated View and the inflated View is returned. This lets applications get a reference to the inflated View without executing an extra findViewById().</p><pre><code>public final class ViewStub\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewStub.html
ViewStub.OnInflateListener	A										<section class="prog__container"><p> Listener used to receive a notification after a ViewStub has successfully inflated its layout resource.</p><pre><code>public static interface ViewStub.OnInflateListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewStub.OnInflateListener.html
ViewTreeObserver	A										<section class="prog__container"><p> A view tree observer is used to register listeners that can be notified of global changes in the view tree. Such global events include, but are not limited to, layout of the whole tree, beginning of the drawing pass, touch mode change.... A ViewTreeObserver should never be instantiated by applications as it is provided by the views hierarchy. Refer to <pre><code> getViewTreeObserver() </code></pre> for more information.</p><pre><code>public final class ViewTreeObserver\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/ViewTreeObserver.html
ViewTreeObserver.OnDrawListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the view tree is about to be drawn.</p><pre><code>public static interface ViewTreeObserver.OnDrawListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewTreeObserver.OnDrawListener.html
ViewTreeObserver.OnGlobalFocusChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the focus state within the view tree changes.</p><pre><code>public static interface ViewTreeObserver.OnGlobalFocusChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalFocusChangeListener.html
ViewTreeObserver.OnGlobalLayoutListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the global layout state or the visibility of views within the view tree changes.</p><pre><code>public static interface ViewTreeObserver.OnGlobalLayoutListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalLayoutListener.html
ViewTreeObserver.OnPreDrawListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the view tree is about to be drawn.</p><pre><code>public static interface ViewTreeObserver.OnPreDrawListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewTreeObserver.OnPreDrawListener.html
ViewTreeObserver.OnScrollChangedListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when something in the view tree has been scrolled.</p><pre><code>public static interface ViewTreeObserver.OnScrollChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewTreeObserver.OnScrollChangedListener.html
ViewTreeObserver.OnTouchModeChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the touch mode changes.</p><pre><code>public static interface ViewTreeObserver.OnTouchModeChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewTreeObserver.OnTouchModeChangeListener.html
ViewTreeObserver.OnWindowAttachListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the view hierarchy is attached to and detached from its window.</p><pre><code>public static interface ViewTreeObserver.OnWindowAttachListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowAttachListener.html
ViewTreeObserver.OnWindowFocusChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the view hierarchy's window focus state changes.</p><pre><code>public static interface ViewTreeObserver.OnWindowFocusChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowFocusChangeListener.html
Window.Callback	A										<section class="prog__container"><p> API from a Window back to its caller. This allows the client to intercept key dispatching, panels and menus, etc.</p><pre><code>public static interface Window.Callback\n</code></pre></section>	https://developer.android.com/reference/android/view/Window.Callback.html
Window	A										<section class="prog__container"><p> Abstract base class for a top-level window look and behavior policy. An instance of this class should be used as the top-level view added to the window manager. It provides standard UI policies such as a background, title area, default key processing, etc. <p> The only existing implementation of this abstract class is android.view.PhoneWindow, which you should instantiate when needing a Window. </p><pre><code>public abstract class Window\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/Window.html
Window.OnFrameMetricsAvailableListener	A										<section class="prog__container"><p> Callback for clients that want frame timing information for each frame rendered by the Window.</p><pre><code>public static interface Window.OnFrameMetricsAvailableListener\n</code></pre></section>	https://developer.android.com/reference/android/view/Window.OnFrameMetricsAvailableListener.html
Window.OnRestrictedCaptionAreaChangedListener	A										<section class="prog__container"><p> Callback for clients that want to be aware of where caption draws content.</p><pre><code>public static interface Window.OnRestrictedCaptionAreaChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/view/Window.OnRestrictedCaptionAreaChangedListener.html
WindowAnimationFrameStats	A										<section class="prog__container"><p> This class contains window animation frame statistics. For example, a window animation is usually performed when the application is transitioning from one activity to another. The frame statistics are a snapshot for the time interval from <pre><code> getStartTimeNano() </code></pre> to <pre><code> getEndTimeNano() </code></pre> . <p> The key idea is that in order to provide a smooth user experience the system should run window animations at a specific time interval obtained by calling <pre><code> getRefreshPeriodNano() </code></pre> . If the system does not render a frame every refresh period the user will see irregular window transitions. The time when the frame was actually presented on the display by calling <pre><code> getFramePresentedTimeNano(int) </code></pre> . </p><pre><code>public final class WindowAnimationFrameStats\n</code></pre></section>	https://developer.android.com/reference/android/view/WindowAnimationFrameStats.html
WindowContentFrameStats	A										<section class="prog__container"><p> This class contains window content frame statistics. For example, a window content is rendred in frames when a view is scrolled. The frame statistics are a snapshot for the time interval from <pre><code> getStartTimeNano() </code></pre> to <pre><code> getEndTimeNano() </code></pre> . <p> The key idea is that in order to provide a smooth user experience an application has to draw a frame at a specific time interval obtained by calling <pre><code> getRefreshPeriodNano() </code></pre> . If the application does not render a frame every refresh period the user will see irregular UI transitions. </p><pre><code>public final class WindowContentFrameStats\n</code></pre></section>	https://developer.android.com/reference/android/view/WindowContentFrameStats.html
WindowId.FocusObserver	A										<section class="prog__container"><p> Subclass for observing changes to the focus state of an <pre><code> WindowId </code></pre> . You should use the same instance of this class for observing multiple <pre><code> WindowId </code></pre> objects, since this class is fairly heavy-weight -- the base class includes all of the mechanisms for connecting to and receiving updates from the window.</p><pre><code>public static abstract class WindowId.FocusObserver\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/WindowId.FocusObserver.html
WindowId	A										<section class="prog__container"><p> Safe identifier for a window. This currently allows you to retrieve and observe the input focus state of the window. Most applications will not use this, instead relying on the simpler (and more efficient) methods available on <pre><code> View </code></pre> . This classes is useful when window input interactions need to be done across processes: the class itself is a Parcelable that can be passed to other processes for them to interact with your window, and it provides a limited safe API that doesn't allow the other process to negatively harm your window.</p><pre><code>public class WindowId\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/WindowId.html
WindowInsets	A										<section class="prog__container"><p> Describes a set of insets for window content. <p> WindowInsets are immutable and may be expanded to include more inset types in the future. To adjust insets, use one of the supplied clone methods to obtain a new WindowInsets instance with the adjusted properties. </p><pre><code>public final class WindowInsets\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/WindowInsets.html
WindowManager.BadTokenException	A										<section class="prog__container"><p> Exception that is thrown when trying to add view whose <pre><code> WindowManager.LayoutParams </code></pre> <pre><code> token </code></pre> is invalid.</p><pre><code>public static class WindowManager.BadTokenException\n</code></pre></section>	https://developer.android.com/reference/android/view/WindowManager.BadTokenException.html
WindowManager	A										<section class="prog__container"><p> The interface that apps use to talk to the window manager. <p> Use <pre><code> Context.getSystemService(Context.WINDOW_SERVICE) </code></pre> to get one of these. </p><pre><code>public interface WindowManager\nimplements ViewManager</code></pre></section>	https://developer.android.com/reference/android/view/WindowManager.html
WindowManager.InvalidDisplayException	A										<section class="prog__container"><p> Exception that is thrown when calling <pre><code> addView(View, ViewGroup.LayoutParams) </code></pre> to a secondary display that cannot be found. See <pre><code> Presentation </code></pre> for more information on secondary displays.</p><pre><code>public static class WindowManager.InvalidDisplayException\n</code></pre></section>	https://developer.android.com/reference/android/view/WindowManager.InvalidDisplayException.html
WindowManager.LayoutParams	A										<section class="prog__container"><pre><code>public static class WindowManager.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html
AccessibilityEvent	A										<section class="prog__container"><p> <p> This class represents accessibility events that are sent by the system when something notable happens in the user interface. For example, when a <pre><code> Button </code></pre> is clicked, a <pre><code> View </code></pre> is focused, etc. </p><pre><code>public final class AccessibilityEvent\n</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html
AccessibilityEventSource	A										<section class="prog__container"><p> This interface is implemented by classes source of <pre><code> AccessibilityEvent </code></pre> s. </p><pre><code>public interface AccessibilityEventSource\n</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityEventSource.html
AccessibilityManager.AccessibilityStateChangeListener	A										<section class="prog__container"><p> Listener for the system accessibility state. To listen for changes to the accessibility state on the device, implement this interface and register it with the system by calling <pre><code> addAccessibilityStateChangeListener(AccessibilityManager.AccessibilityStateChangeListener) </code></pre> .</p><pre><code>public static interface AccessibilityManager.AccessibilityStateChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.AccessibilityStateChangeListener.html
AccessibilityManager	A										<section class="prog__container"><p> System level service that serves as an event dispatch for <pre><code> AccessibilityEvent </code></pre> s, and provides facilities for querying the accessibility state of the system. Accessibility events are generated when something notable happens in the user interface, for example an <pre><code> Activity </code></pre> starts, the focus or selection of a <pre><code> View </code></pre> changes etc. Parties interested in handling accessibility events implement and register an accessibility service which extends <pre><code> AccessibilityService </code></pre> . <p> To obtain a handle to the accessibility manager do the following: </p><pre><code>public final class AccessibilityManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html
AccessibilityManager.TouchExplorationStateChangeListener	A										<section class="prog__container"><p> Listener for the system touch exploration state. To listen for changes to the touch exploration state on the device, implement this interface and register it with the system by calling <pre><code> addTouchExplorationStateChangeListener(AccessibilityManager.TouchExplorationStateChangeListener) </code></pre> .</p><pre><code>public static interface AccessibilityManager.TouchExplorationStateChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.TouchExplorationStateChangeListener.html
AccessibilityNodeInfo.AccessibilityAction	A										<section class="prog__container"><p> A class defining an action that can be performed on an <pre><code> AccessibilityNodeInfo </code></pre> . Each action has a unique id that is mandatory and optional data. <p> There are three categories of actions: <ul> <li> <strong> Standard actions </strong> - These are actions that are reported and handled by the standard UI widgets in the platform. For each standard action there is a static constant defined in this class, e.g. <pre><code> ACTION_FOCUS </code></pre> . </li> <li> <strong> Custom actions action </strong> - These are actions that are reported and handled by custom widgets. i.e. ones that are not part of the UI toolkit. For example, an application may define a custom action for clearing the user history. </li> <li> <strong> Overriden standard actions </strong> - These are actions that override standard actions to customize them. For example, an app may add a label to the standard <pre><code> ACTION_CLICK </code></pre> action to announce that this action clears browsing history. </li> </ul> </p><pre><code>public static final class AccessibilityNodeInfo.AccessibilityAction\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html
AccessibilityNodeInfo.CollectionInfo	A										<section class="prog__container"><p> Class with information if a node is a collection. Use <pre><code> obtain(int, int, boolean) </code></pre> to get an instance. <p> A collection of items has rows and columns and may be hierarchical. For example, a horizontal list is a collection with one column, as many rows as the list items, and is not hierarchical; A table is a collection with several rows, several columns, and is not hierarchical; A vertical tree is a hierarchical collection with one column and as many rows as the first level children. </p><pre><code>public static final class AccessibilityNodeInfo.CollectionInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html
AccessibilityNodeInfo.CollectionItemInfo	A										<section class="prog__container"><p> Class with information if a node is a collection item. Use <pre><code> obtain(int, int, int, int, boolean) </code></pre> to get an instance. <p> A collection item is contained in a collection, it starts at a given row and column in the collection, and spans one or more rows and columns. For example, a header of two related table columns starts at the first row and the first column, spans one row and two columns. </p><pre><code>public static final class AccessibilityNodeInfo.CollectionItemInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html
AccessibilityNodeInfo	A										<section class="prog__container"><p> This class represents a node of the window content as well as actions that can be requested from its source. From the point of view of an <pre><code> AccessibilityService </code></pre> a window's content is presented as a tree of accessibility node infos, which may or may not map one-to-one to the view hierarchy. In other words, a custom view is free to report itself as a tree of accessibility node info.</p><pre><code>public class AccessibilityNodeInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html
AccessibilityNodeInfo.RangeInfo	A										<section class="prog__container"><p> Class with information if a node is a range. Use <pre><code> obtain(int, float, float, float) </code></pre> to get an instance.</p><pre><code>public static final class AccessibilityNodeInfo.RangeInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.RangeInfo.html
AccessibilityNodeProvider	A										<section class="prog__container"><p> This class is the contract a client should implement to enable support of a virtual view hierarchy rooted at a given view for accessibility purposes. A virtual view hierarchy is a tree of imaginary Views that is reported as a part of the view hierarchy when an <pre><code> AccessibilityService </code></pre> explores the window content. Since the virtual View tree does not exist this class is responsible for managing the <pre><code> AccessibilityNodeInfo </code></pre> s describing that tree to accessibility services.</p><pre><code>public abstract class AccessibilityNodeProvider\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeProvider.html
AccessibilityRecord	A										<section class="prog__container"><p> Represents a record in an <pre><code> AccessibilityEvent </code></pre> and contains information about state change of its source <pre><code> View </code></pre> . When a view fires an accessibility event it requests from its parent to dispatch the constructed event. The parent may optionally append a record for itself for providing more context to <pre><code> AccessibilityService </code></pre> s. Hence, accessibility services can facilitate additional accessibility records to enhance feedback.</p><pre><code>public class AccessibilityRecord\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityRecord.html
AccessibilityWindowInfo	A										<section class="prog__container"><p> This class represents a state snapshot of a window for accessibility purposes. The screen content contains one or more windows where some windows can be descendants of other windows, which is the windows are hierarchically ordered. Note that there is no root window. Hence, the screen content can be seen as a collection of window trees.</p><pre><code>public final class AccessibilityWindowInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityWindowInfo.html
CaptioningManager.CaptioningChangeListener	A										<section class="prog__container"><p> Listener for changes in captioning properties, including enabled state and user style preferences.</p><pre><code>public static abstract class CaptioningManager.CaptioningChangeListener\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/CaptioningManager.CaptioningChangeListener.html
CaptioningManager.CaptionStyle	A										<section class="prog__container"><p> Specifies visual properties for video captions, including foreground and background colors, edge properties, and typeface.</p><pre><code>public static final class CaptioningManager.CaptionStyle\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/CaptioningManager.CaptionStyle.html
CaptioningManager	A										<section class="prog__container"><p> Contains methods for accessing and monitoring preferred video captioning state and visual properties. <p> To obtain a handle to the captioning manager, do the following: <p> <pre><code> <pre>CaptioningManager captioningManager = (CaptioningManager) context.getSystemService(Context.CAPTIONING_SERVICE);</pre> </code></pre> </p><pre><code>public class CaptioningManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/CaptioningManager.html
android.view.accessibility	A										<section class="prog__container">The classes in this package are used to represent screen content and changes to it as well as APIs for querying the global accessibility state of the system.</section>	https://developer.android.com/reference/android/view/accessibility/package-summary.html
AccelerateDecelerateInterpolator	A										<section class="prog__container"><p> An interpolator where the rate of change starts and ends slowly but accelerates through the middle.</p><pre><code>public class AccelerateDecelerateInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/AccelerateDecelerateInterpolator.html
AccelerateInterpolator	A										<section class="prog__container"><p> An interpolator where the rate of change starts out slowly and and then accelerates.</p><pre><code>public class AccelerateInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/AccelerateInterpolator.html
AlphaAnimation	A										<section class="prog__container"><p> An animation that controls the alpha level of an object. Useful for fading things in and out. This animation ends up changing the alpha property of a <pre><code> Transformation </code></pre></p><pre><code>public class AlphaAnimation\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/AlphaAnimation.html
Animation.AnimationListener	A										<section class="prog__container"><p> <p> An animation listener receives notifications from an animation. Notifications indicate animation related events, such as the end or the repetition of the animation. </p><pre><code>public static interface Animation.AnimationListener\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/Animation.AnimationListener.html
Animation.Description	A										<section class="prog__container"><p> Utility class to parse a string description of a size.</p><pre><code>protected static class Animation.Description\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/animation/Animation.Description.html
Animation	A										<section class="prog__container"><p> Abstraction for an Animation that can be applied to Views, Surfaces, or other objects. See the <pre><code> animation package description file </code></pre> .</p><pre><code>public abstract class Animation\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/animation/Animation.html
AnimationSet	A										<section class="prog__container"><p> Represents a group of Animations that should be played together. The transformation of each individual animation are composed together into a single transform. If AnimationSet sets any properties that its children also set (for example, duration or fillBefore), the values of AnimationSet override the child values. <p> The way that AnimationSet inherits behavior from Animation is important to understand. Some of the Animation attributes applied to AnimationSet affect the AnimationSet itself, some are pushed down to the children, and some are ignored, as follows: <ul> <li> duration, repeatMode, fillBefore, fillAfter: These properties, when set on an AnimationSet object, will be pushed down to all child animations. </li> <li> repeatCount, fillEnabled: These properties are ignored for AnimationSet. </li> <li> startOffset, shareInterpolator: These properties apply to the AnimationSet itself. </li> </ul> Starting with <pre><code> ICE_CREAM_SANDWICH </code></pre> , the behavior of these properties is the same in XML resources and at runtime (prior to that release, the values set in XML were ignored for AnimationSet). That is, calling <pre><code> setDuration(500) </code></pre> on an AnimationSet has the same effect as declaring <pre><code> android:duration="500" </code></pre> in an XML resource for an AnimationSet object. </p><pre><code>public class AnimationSet\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/AnimationSet.html
AnimationUtils	A										<section class="prog__container"><p> Defines common utilities for working with animations.</p><pre><code>public class AnimationUtils\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/animation/AnimationUtils.html
AnticipateInterpolator	A										<section class="prog__container"><p> An interpolator where the change starts backward then flings forward.</p><pre><code>public class AnticipateInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/AnticipateInterpolator.html
AnticipateOvershootInterpolator	A										<section class="prog__container"><p> An interpolator where the change starts backward then flings forward and overshoots the target value and finally goes back to the final value.</p><pre><code>public class AnticipateOvershootInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/AnticipateOvershootInterpolator.html
BaseInterpolator	A										<section class="prog__container"><p> An abstract class which is extended by default interpolators.</p><pre><code>public abstract class BaseInterpolator\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/animation/BaseInterpolator.html
BounceInterpolator	A										<section class="prog__container"><p> An interpolator where the change bounces at the end.</p><pre><code>public class BounceInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/BounceInterpolator.html
CycleInterpolator	A										<section class="prog__container"><p> Repeats the animation for a specified number of cycles. The rate of change follows a sinusoidal pattern.</p><pre><code>public class CycleInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/CycleInterpolator.html
DecelerateInterpolator	A										<section class="prog__container"><p> An interpolator where the rate of change starts out quickly and and then decelerates.</p><pre><code>public class DecelerateInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/DecelerateInterpolator.html
GridLayoutAnimationController.AnimationParameters	A										<section class="prog__container"><p> The set of parameters that has to be attached to each view contained in the view group animated by the grid layout animation controller. These parameters are used to compute the start time of each individual view's animation.</p><pre><code>public static class GridLayoutAnimationController.AnimationParameters\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/GridLayoutAnimationController.AnimationParameters.html
GridLayoutAnimationController	A										<section class="prog__container"><p> A layout animation controller is used to animated a grid layout's children. While <pre><code> LayoutAnimationController </code></pre> relies only on the index of the child in the view group to compute the animation delay, this class uses both the X and Y coordinates of the child within a grid. In addition, the animation direction can be controlled. The default direction is <pre><code> DIRECTION_LEFT_TO_RIGHT | DIRECTION_TOP_TO_BOTTOM </code></pre> . You can also set the animation priority to columns or rows. The default priority is none. Information used to compute the animation delay of each child are stored in an instance of <pre><code> GridLayoutAnimationController.AnimationParameters </code></pre> , itself stored in the <pre><code> ViewGroup.LayoutParams </code></pre> of the view.</p><pre><code>public class GridLayoutAnimationController\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/GridLayoutAnimationController.html
Interpolator	A										<section class="prog__container"><p> An interpolator defines the rate of change of an animation. This allows the basic animation effects (alpha, scale, translate, rotate) to be accelerated, decelerated, repeated, etc.</p><pre><code>public interface Interpolator\nimplements TimeInterpolator</code></pre></section>	https://developer.android.com/reference/android/view/animation/Interpolator.html
LayoutAnimationController.AnimationParameters	A										<section class="prog__container"><p> The set of parameters that has to be attached to each view contained in the view group animated by the layout animation controller. These parameters are used to compute the start time of each individual view's animation.</p><pre><code>public static class LayoutAnimationController.AnimationParameters\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/animation/LayoutAnimationController.AnimationParameters.html
LayoutAnimationController	A										<section class="prog__container"><p> A layout animation controller is used to animated a layout's, or a view group's, children. Each child uses the same animation but for every one of them, the animation starts at a different time. A layout animation controller is used by <pre><code> ViewGroup </code></pre> to compute the delay by which each child's animation start must be offset. The delay is computed by using characteristics of each child, like its index in the view group. This standard implementation computes the delay by multiplying a fixed amount of miliseconds by the index of the child in its parent view group. Subclasses are supposed to override <pre><code> getDelayForView(android.view.View) </code></pre> to implement a different way of computing the delay. For instance, a <pre><code> GridLayoutAnimationController </code></pre> will compute the delay based on the column and row indices of the child in its parent view group. Information used to compute the animation delay of each child are stored in an instance of <pre><code> LayoutAnimationController.AnimationParameters </code></pre> , itself stored in the <pre><code> ViewGroup.LayoutParams </code></pre> of the view.</p><pre><code>public class LayoutAnimationController\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html
LinearInterpolator	A										<section class="prog__container"><p> An interpolator where the rate of change is constant</p><pre><code>public class LinearInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/LinearInterpolator.html
OvershootInterpolator	A										<section class="prog__container"><p> An interpolator where the change flings forward and overshoots the last value then comes back.</p><pre><code>public class OvershootInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/OvershootInterpolator.html
android.view.animation	A										<section class="prog__container">Provides classes that handle tweened animations.</section>	https://developer.android.com/reference/android/view/animation/package-summary.html
PathInterpolator	A										<section class="prog__container"><p> An interpolator that can traverse a Path that extends from <pre><code> Point </code></pre> <pre><code> (0, 0) </code></pre> to <pre><code> (1, 1) </code></pre> . The x coordinate along the <pre><code> Path </code></pre> is the input value and the output is the y coordinate of the line at that point. This means that the Path must conform to a function <pre><code> y = f(x) </code></pre> . <p> The <pre><code> Path </code></pre> must not have gaps in the x direction and must not loop back on itself such that there can be two points sharing the same x coordinate. It is alright to have a disjoint line in the vertical direction: </p><pre><code>public class PathInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/PathInterpolator.html
RotateAnimation	A										<section class="prog__container"><p> An animation that controls the rotation of an object. This rotation takes place in the X-Y plane. You can specify the point to use for the center of the rotation, where (0,0) is the top left point. If not specified, (0,0) is the default rotation point.</p><pre><code>public class RotateAnimation\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/RotateAnimation.html
ScaleAnimation	A										<section class="prog__container"><p> An animation that controls the scale of an object. You can specify the point to use for the center of scaling.</p><pre><code>public class ScaleAnimation\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/ScaleAnimation.html
Transformation	A										<section class="prog__container"><p> Defines the transformation to be applied at one point in time of an Animation.</p><pre><code>public class Transformation\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/animation/Transformation.html
TranslateAnimation	A										<section class="prog__container"><p> An animation that controls the position of an object. See the <pre><code> full package </code></pre> description for details and sample code.</p><pre><code>public class TranslateAnimation\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/TranslateAnimation.html
BaseInputConnection	A										<section class="prog__container"><p> Base class for implementors of the InputConnection interface, taking care of most of the common behavior for providing a connection to an Editable. Implementors of this class will want to be sure to implement <pre><code> getEditable() </code></pre> to provide access to their own editable object, and to refer to the documentation in <pre><code> InputConnection </code></pre> .</p><pre><code>public class BaseInputConnection\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/BaseInputConnection.html
CompletionInfo	A										<section class="prog__container"><p> Information about a single text completion that an editor has reported to an input method. <p> This class encapsulates a completion offered by an application that wants it to be presented to the user by the IME. Usually, apps present their completions directly in a scrolling list for example (UI developers will usually use or extend to implement this). However, in some cases, the editor may not be visible, as in the case in extract mode where the IME has taken over the full screen. In this case, the editor can choose to send their completions to the IME for display. <p> Most applications who want to send completions to an IME should use <pre><code> AutoCompleteTextView </code></pre> as this class makes this process easy. In this case, the application would not have to deal directly with this class. <p> An application who implements its own editor and wants direct control over this would create an array of CompletionInfo objects, and send it to the IME using <pre><code> displayCompletions(View, CompletionInfo[]) </code></pre> . The IME would present the completions however they see fit, and call back to the editor through <pre><code> commitCompletion(CompletionInfo) </code></pre> . The application can then pick up the commit event by overriding <pre><code> onCommitCompletion(CompletionInfo) </code></pre> . </p><pre><code>public final class CompletionInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/CompletionInfo.html
CorrectionInfo	A										<section class="prog__container"><p> Information about a single text correction that an editor has reported to an input method.</p><pre><code>public final class CorrectionInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/CorrectionInfo.html
CursorAnchorInfo.Builder	A										<section class="prog__container"><p> Builder for <pre><code> CursorAnchorInfo </code></pre> . This class is not designed to be thread-safe.</p><pre><code>public static final class CursorAnchorInfo.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/CursorAnchorInfo.Builder.html
CursorAnchorInfo	A										<section class="prog__container"><p> Positional information about the text insertion point and characters in the composition string. <p> This class encapsulates locations of the text insertion point and the composition string in the screen coordinates so that IMEs can render their UI components near where the text is actually inserted. </p><pre><code>public final class CursorAnchorInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/CursorAnchorInfo.html
EditorInfo	A										<section class="prog__container"><p> An EditorInfo describes several attributes of a text editing object that an input method is communicating with (typically an EditText), most importantly the type of text content it contains and the current cursor position.</p><pre><code>public class EditorInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/EditorInfo.html
ExtractedText	A										<section class="prog__container"><p> Information about text that has been extracted for use by an input method. This contains information about a portion of the currently edited text, that the IME should display into its own interface while in extracted mode.</p><pre><code>public class ExtractedText\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/ExtractedText.html
ExtractedTextRequest	A										<section class="prog__container"><p> Description of what an input method would like from an application when extract text from its input editor.</p><pre><code>public class ExtractedTextRequest\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/ExtractedTextRequest.html
InputBinding	A										<section class="prog__container"><p> Information given to an <pre><code> InputMethod </code></pre> about a client connecting to it.</p><pre><code>public final class InputBinding\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputBinding.html
InputConnection	A										<section class="prog__container"><p> The InputConnection interface is the communication channel from an <pre><code> InputMethod </code></pre> back to the application that is receiving its input. It is used to perform such things as reading text around the cursor, committing text to the text box, and sending raw key events to the application. <p> Starting from API Level <pre><code> N </code></pre> , the system can deal with the situation where the application directly implements this class but one or more of the following methods are not implemented. </p><pre><code>public interface InputConnection\n</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputConnection.html
InputConnectionWrapper	A										<section class="prog__container"><p> <p> Wrapper class for proxying calls to another InputConnection. Subclass and have fun! </p><pre><code>public class InputConnectionWrapper\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputConnectionWrapper.html
InputContentInfo	A										<section class="prog__container"><p> A container object with which input methods can send content files to the target application.</p><pre><code>public final class InputContentInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputContentInfo.html
InputMethod	A										<section class="prog__container"><p> The InputMethod interface represents an input method which can generate key events and text, such as digital, email addresses, CJK characters, other language characters, and etc., while handling various input events, and send the text back to the application that requests text input. See <pre><code> InputMethodManager </code></pre> for more general information about the architecture. <p> Applications will not normally use this interface themselves, instead relying on the standard interaction provided by <pre><code> TextView </code></pre> and <pre><code> EditText </code></pre> . <p> Those implementing input methods should normally do so by deriving from <pre><code> InputMethodService </code></pre> or one of its subclasses. When implementing an input method, the service component containing it must also supply a <pre><code> SERVICE_META_DATA </code></pre> meta-data field, referencing an XML resource providing details about the input method. All input methods also must require that clients hold the <pre><code> BIND_INPUT_METHOD </code></pre> in order to interact with the service; if this is not required, the system will not use that input method, because it can not trust that it is not compromised. <p> The InputMethod interface is actually split into two parts: the interface here is the top-level interface to the input method, providing all access to it, which only the system can access (due to the BIND_INPUT_METHOD permission requirement). In addition its method <pre><code> createSession(android.view.inputmethod.InputMethod.SessionCallback) </code></pre> can be called to instantate a secondary <pre><code> InputMethodSession </code></pre> interface which is what clients use to communicate with the input method. </p><pre><code>public interface InputMethod\n</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputMethod.html
InputMethod.SessionCallback	A										<section class="prog__container"><pre><code>public static interface InputMethod.SessionCallback\n</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputMethod.SessionCallback.html
InputMethodInfo	A										<section class="prog__container"><p> This class is used to specify meta information of an input method. <p> It should be defined in an XML resource file with an <pre><code> &lt;input-method&gt; </code></pre> element. For more information, see the guide to Creating an Input Method . </p><pre><code>public final class InputMethodInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputMethodInfo.html
InputMethodManager	A										<section class="prog__container"><p> Central system API to the overall input method framework (IMF) architecture, which arbitrates interaction between applications and the current input method. You can retrieve an instance of this interface with <pre><code> Context.getSystemService() </code></pre> . <p> Topics covered here: <ol> <li> Architecture Overview <li> Applications <li> Input Methods <li> Security </li> </li> </li> </li> </ol> </p><pre><code>public final class InputMethodManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html
InputMethodSession.EventCallback	A										<section class="prog__container"><pre><code>public static interface InputMethodSession.EventCallback\n</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputMethodSession.EventCallback.html
InputMethodSession	A										<section class="prog__container"><p> The InputMethodSession interface provides the per-client functionality of <pre><code> InputMethod </code></pre> that is safe to expose to applications. <p> Applications will not normally use this interface themselves, instead relying on the standard interaction provided by <pre><code> TextView </code></pre> and <pre><code> EditText </code></pre> . </p><pre><code>public interface InputMethodSession\n</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputMethodSession.html
InputMethodSubtype	A										<section class="prog__container"><p> This class is used to specify meta information of a subtype contained in an input method editor (IME). Subtype can describe locale (e.g. en_US, fr_FR...) and mode (e.g. voice, keyboard...), and is used for IME switch and settings. The input method subtype allows the system to bring up the specified subtype of the designated IME directly. <p> It should be defined in an XML resource file of the input method with the <pre><code> &lt;subtype&gt; </code></pre> element, which resides within an <pre><code> &lt;input-method&gt; </code></pre> element. For more information, see the guide to Creating an Input Method . </p><pre><code>public final class InputMethodSubtype\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputMethodSubtype.html
InputMethodSubtype.InputMethodSubtypeBuilder	A										<section class="prog__container"><p> InputMethodSubtypeBuilder is a builder class of InputMethodSubtype. This class is designed to be used with <pre><code> setAdditionalInputMethodSubtypes(String, InputMethodSubtype[]) </code></pre> . The developer needs to be aware of what each parameter means.</p><pre><code>public static class InputMethodSubtype.InputMethodSubtypeBuilder\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputMethodSubtype.InputMethodSubtypeBuilder.html
android.view.inputmethod	A										<section class="prog__container">Wrapper class for proxying calls to another InputConnection. </section>	https://developer.android.com/reference/android/view/inputmethod/package-summary.html
android.view.textservice	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/view/textservice/package-summary.html
SentenceSuggestionsInfo	A										<section class="prog__container"><p> This class contains a metadata of suggestions returned from a text service (e.g. <pre><code> SpellCheckerService </code></pre> ). The text service uses this class to return the suggestions for a sentence. See <pre><code> SuggestionsInfo </code></pre> which is used for suggestions for a word. This class extends the functionality of <pre><code> SuggestionsInfo </code></pre> as far as this class enables you to put multiple <pre><code> SuggestionsInfo </code></pre> s on a sentence with the offsets and the lengths of all <pre><code> SuggestionsInfo </code></pre> s.</p><pre><code>public final class SentenceSuggestionsInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/textservice/SentenceSuggestionsInfo.html
SpellCheckerInfo	A										<section class="prog__container"><p> This class is used to specify meta information of a spell checker.</p><pre><code>public final class SpellCheckerInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/textservice/SpellCheckerInfo.html
SpellCheckerSession	A										<section class="prog__container"><p> The SpellCheckerSession interface provides the per client functionality of SpellCheckerService. </p><pre><code>public class SpellCheckerSession\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/textservice/SpellCheckerSession.html
SpellCheckerSession.SpellCheckerSessionListener	A										<section class="prog__container"><p> Callback for getting results from text services</p><pre><code>public static interface SpellCheckerSession.SpellCheckerSessionListener\n</code></pre></section>	https://developer.android.com/reference/android/view/textservice/SpellCheckerSession.SpellCheckerSessionListener.html
SpellCheckerSubtype	A										<section class="prog__container"><p> This class is used to specify meta information of a subtype contained in a spell checker. Subtype can describe locale (e.g. en_US, fr_FR...) used for settings.</p><pre><code>public final class SpellCheckerSubtype\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/textservice/SpellCheckerSubtype.html
SuggestionsInfo	A										<section class="prog__container"><p> This class contains a metadata of suggestions from the text service</p><pre><code>public final class SuggestionsInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/textservice/SuggestionsInfo.html
TextInfo	A										<section class="prog__container"><p> This class contains a metadata of the input of TextService</p><pre><code>public final class TextInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/textservice/TextInfo.html
TextServicesManager	A										<section class="prog__container"><p> System API to the overall text services, which arbitrates interaction between applications and text services. You can retrieve an instance of this interface with <pre><code> Context.getSystemService() </code></pre> . The user can change the current text services in Settings. And also applications can specify the target text services. </p><pre><code>public final class TextServicesManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/view/textservice/TextServicesManager.html
ClientCertRequest	A										<section class="prog__container"><p> ClientCertRequest: The user receives an instance of this class as a parameter of <pre><code> onReceivedClientCertRequest(WebView, ClientCertRequest) </code></pre> . The request includes the parameters to choose the client certificate, such as the host name and the port number requesting the cert, the acceptable key types and the principals. The user should call one of the class methods to indicate how to deal with the client certificate request. All methods should be called on UI thread. WebView caches the <pre><code> proceed(PrivateKey, X509Certificate[]) </code></pre> and <pre><code> cancel() </code></pre> responses in memory and uses them to handle future client certificate requests for the same host/port pair. The user can clear the cached data using <pre><code> clearClientCertPreferences(Runnable) </code></pre> .</p><pre><code>public abstract class ClientCertRequest\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/ClientCertRequest.html
ConsoleMessage	A										<section class="prog__container"><p> Public class representing a JavaScript console message from WebCore. This could be a issued by a call to one of the <pre><code> console </code></pre> logging functions (e.g. <pre><code> console.log('...') </code></pre> ) or a JavaScript error on the page. To receive notifications of these messages, override the <pre><code> onConsoleMessage(ConsoleMessage) </code></pre> function.</p><pre><code>public class ConsoleMessage\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/ConsoleMessage.html
ConsoleMessage.MessageLevel	A										<section class="prog__container"><pre><code>public static final enum ConsoleMessage.MessageLevel\n</code></pre></section>	https://developer.android.com/reference/android/webkit/ConsoleMessage.MessageLevel.html
CookieManager	A										<section class="prog__container"><p> Manages the cookies used by an application's <pre><code> WebView </code></pre> instances. Cookies are manipulated according to RFC2109.</p><pre><code>public abstract class CookieManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/CookieManager.html
CookieSyncManager	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> The WebView now automatically syncs cookies as necessary. You no longer need to create or use the CookieSyncManager. To manually force a sync you can use the CookieManager method <pre><code> flush() </code></pre> which is a synchronous replacement for <pre><code> sync() </code></pre> . </p><pre><code>public final class CookieSyncManager\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/CookieSyncManager.html
DateSorter	A										<section class="prog__container"><p> Sorts dates into the following groups: Today Yesterday seven days ago one month ago older than a month ago</p><pre><code>public class DateSorter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/DateSorter.html
DownloadListener	A										<section class="prog__container"><p> Notify the host application that a file should be downloaded</p><pre><code>public interface DownloadListener\n</code></pre></section>	https://developer.android.com/reference/android/webkit/DownloadListener.html
GeolocationPermissions.Callback	A										<section class="prog__container"><p> A callback interface used by the host application to set the Geolocation permission state for an origin.</p><pre><code>public static interface GeolocationPermissions.Callback\n</code></pre></section>	https://developer.android.com/reference/android/webkit/GeolocationPermissions.Callback.html
GeolocationPermissions	A										<section class="prog__container"><p> This class is used to manage permissions for the WebView's Geolocation JavaScript API. Geolocation permissions are applied to an origin, which consists of the host, scheme and port of a URI. In order for web content to use the Geolocation API, permission must be granted for that content's origin. This class stores Geolocation permissions. An origin's permission state can be either allowed or denied. This class uses Strings to represent an origin. When an origin attempts to use the Geolocation API, but no permission state is currently set for that origin, <pre><code> WebChromeClient.onGeolocationPermissionsShowPrompt() </code></pre> is called. This allows the permission state to be set for that origin. The methods of this class can be used to modify and interrogate the stored Geolocation permissions at any time.</p><pre><code>public class GeolocationPermissions\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/GeolocationPermissions.html
HttpAuthHandler	A										<section class="prog__container"><p> Represents a request for HTTP authentication. Instances of this class are created by the WebView and passed to <pre><code> onReceivedHttpAuthRequest(WebView, HttpAuthHandler, String, String) </code></pre> . The host application must call either <pre><code> proceed(String, String) </code></pre> or <pre><code> cancel() </code></pre> to set the WebView's response to the request.</p><pre><code>public class HttpAuthHandler\n</code></pre></section>	https://developer.android.com/reference/android/webkit/HttpAuthHandler.html
JavascriptInterface	A										<section class="prog__container"><p> Annotation that allows exposing methods to JavaScript. Starting from API level <pre><code> JELLY_BEAN_MR1 </code></pre> and above, only methods explicitly marked with this annotation are available to the Javascript code. See <pre><code> addJavascriptInterface(Object, String) </code></pre> for more information about it.</p><pre><code>public abstract @interface JavascriptInterface\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/webkit/JavascriptInterface.html
JsPromptResult	A										<section class="prog__container"><p> Public class for handling JavaScript prompt requests. The WebChromeClient will receive a <pre><code> onJsPrompt(WebView, String, String, String, JsPromptResult) </code></pre> call with a JsPromptResult instance as a parameter. This parameter is used to return the result of this user dialog prompt back to the WebView instance. The client can call cancel() to cancel the dialog or confirm() with the user's input to confirm the dialog.</p><pre><code>public class JsPromptResult\n</code></pre></section>	https://developer.android.com/reference/android/webkit/JsPromptResult.html
JsResult	A										<section class="prog__container"><p> An instance of this class is passed as a parameter in various <pre><code> WebChromeClient </code></pre> action notifications. The object is used as a handle onto the underlying JavaScript-originated request, and provides a means for the client to indicate whether this action should proceed.</p><pre><code>public class JsResult\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/JsResult.html
MimeTypeMap	A										<section class="prog__container"><p> Two-way map that maps MIME-types to file extensions and vice versa. <p> See also <pre><code> guessContentTypeFromName(String) </code></pre> and <pre><code> guessContentTypeFromStream(InputStream) </code></pre> . This class and <pre><code> URLConnection </code></pre> share the same MIME-type database. </p><pre><code>public class MimeTypeMap\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/MimeTypeMap.html
android.webkit	A										<section class="prog__container">Provides tools for browsing the web.</section>	https://developer.android.com/reference/android/webkit/package-summary.html
PermissionRequest	A										<section class="prog__container"><p> This class defines a permission request and is used when web content requests access to protected resources. The permission request related events are delivered via <pre><code> onPermissionRequest(PermissionRequest) </code></pre> and <pre><code> onPermissionRequestCanceled(PermissionRequest) </code></pre> . Either <pre><code> grant() </code></pre> or <pre><code> deny() </code></pre> must be called in UI thread to respond to the request. New protected resources whose names are not defined here may be requested in future versions of WebView, even when running on an older Android release. To avoid unintentionally granting requests for new permissions, you should pass the specific permissions you intend to grant to <pre><code> grant() </code></pre> , and avoid writing code like this example: <pre> permissionRequest.grant(permissionRequest.getResources()) // This is wrong!!! </pre> See the WebView's release notes for information about new protected resources.</p><pre><code>public abstract class PermissionRequest\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/PermissionRequest.html
PluginStub	A										<section class="prog__container"><p> This interface is used to implement plugins in a WebView. A plugin package may extend this class and implement the abstract functions to create embedded or fullscreeen views displayed in a WebView. The PluginStub implementation will be provided the same NPP instance that is created through the native interface.</p><pre><code>public interface PluginStub\n</code></pre></section>	https://developer.android.com/reference/android/webkit/PluginStub.html
ServiceWorkerClient	A										<section class="prog__container"><p> Base class for clients to capture Service Worker related callbacks, see <pre><code> ServiceWorkerController </code></pre> for usage example.</p><pre><code>public class ServiceWorkerClient\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/ServiceWorkerClient.html
ServiceWorkerController	A										<section class="prog__container"><p> Manages Service Workers used by WebView. <p> Example usage: <pre class="prettyprint"> ServiceWorkerController swController = ServiceWorkerController.getInstance(); swController.setServiceWorkerClient(new ServiceWorkerClient() { @Override public WebResourceResponse shouldInterceptRequest(WebResourceRequest request) { // Capture request here and generate response or allow pass-through // by returning null. return null; } }); </pre> </p><pre><code>public abstract class ServiceWorkerController\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/ServiceWorkerController.html
ServiceWorkerWebSettings	A										<section class="prog__container"><p> Manages settings state for all Service Workers. These settings are not tied to the lifetime of any WebView because service workers can outlive WebView instances. The settings are similar to <pre><code> WebSettings </code></pre> but only settings relevant to Service Workers are supported.</p><pre><code>public abstract class ServiceWorkerWebSettings\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/ServiceWorkerWebSettings.html
SslErrorHandler	A										<section class="prog__container"><p> Represents a request for handling an SSL error. Instances of this class are created by the WebView and passed to <pre><code> onReceivedSslError(WebView, SslErrorHandler, SslError) </code></pre> . The host application must call either <pre><code> proceed() </code></pre> or <pre><code> cancel() </code></pre> to set the WebView's response to the request.</p><pre><code>public class SslErrorHandler\n</code></pre></section>	https://developer.android.com/reference/android/webkit/SslErrorHandler.html
URLUtil	A										<section class="prog__container"><p> Guesses canonical filename that a download would have, using the URL and contentDisposition.</p><pre><code>public final class URLUtil\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/URLUtil.html
ValueCallback	A										<section class="prog__container"><p> A callback interface used to provide values asynchronously.</p><pre><code>public interface ValueCallback\n</code></pre></section>	https://developer.android.com/reference/android/webkit/ValueCallback.html
WebBackForwardList	A										<section class="prog__container"><p> This class contains the back/forward list for a WebView. WebView.copyBackForwardList() will return a copy of this class used to inspect the entries in the list.</p><pre><code>public abstract class WebBackForwardList\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/WebBackForwardList.html
WebChromeClient.CustomViewCallback	A										<section class="prog__container"><p> A callback interface used by the host application to notify the current page that its custom view has been dismissed.</p><pre><code>public static interface WebChromeClient.CustomViewCallback\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebChromeClient.CustomViewCallback.html
WebChromeClient.FileChooserParams	A										<section class="prog__container"><p> Parameters used in the <pre><code> onShowFileChooser(WebView, ValueCallback <uri[]> , WebChromeClient.FileChooserParams) </uri[]> </code></pre> method.</p><pre><code>public static abstract class WebChromeClient.FileChooserParams\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/WebChromeClient.FileChooserParams.html
WebChromeClient	A										<section class="prog__container"><p> A callback interface used by the host application to notify the current page that its custom view has been dismissed.</p><pre><code>public class WebChromeClient\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/WebChromeClient.html
WebHistoryItem	A										<section class="prog__container"><p> A convenience class for accessing fields in an entry in the back/forward list of a WebView. Each WebHistoryItem is a snapshot of the requested history item. Each history item may be updated during the load of a page.</p><pre><code>public abstract class WebHistoryItem\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/WebHistoryItem.html
WebIconDatabase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 18. </strong> <br/> This class is only required when running on devices up to <pre><code> JELLY_BEAN_MR2 </code></pre> </p><pre><code>public abstract class WebIconDatabase\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/WebIconDatabase.html
WebIconDatabase.IconListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 18. </strong> <br/> This interface is obsolete. </p><pre><code>public static interface WebIconDatabase.IconListener\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebIconDatabase.IconListener.html
WebMessage	A										<section class="prog__container"><p> The Java representation of the HTML5 PostMessage event. See https://html.spec.whatwg.org/multipage/comms.html#the-messageevent-interfaces for definition of a MessageEvent in HTML5.</p><pre><code>public class WebMessage\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/WebMessage.html
WebMessagePort	A										<section class="prog__container"><p> The Java representation of the HTML5 message ports. A Message port represents one endpoint of a Message Channel. In Android webview, there is no separate Message Channel object. When a message channel is created, both ports are tangled to each other and started, and then returned in a MessagePort array, see <pre><code> createWebMessageChannel() </code></pre> for creating a message channel. When a message port is first created or received via transfer, it does not have a WebMessageCallback to receive web messages. The messages are queued until a WebMessageCallback is set. A message port should be closed when it is not used by the embedder application anymore. A closed port cannot be transferred or cannot be reopened to send messages. Close can be called multiple times. When a port is transferred to JS, it cannot be used to send or receive messages at the Java side anymore. Different from HTML5 Spec, a port cannot be transferred if one of these has ever happened: i. a message callback was set, ii. a message was posted on it. A transferred port cannot be closed by the application, since the ownership is also transferred. It is possible to transfer both ports of a channel to JS, for example for communication between subframes.</p><pre><code>public abstract class WebMessagePort\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/WebMessagePort.html
WebMessagePort.WebMessageCallback	A										<section class="prog__container"><p> The listener for handling MessagePort events. The message callback methods are called on the main thread. If the embedder application wants to receive the messages on a different thread, it can do this by passing a Handler in <pre><code> setWebMessageCallback(WebMessageCallback, Handler) </code></pre> . In the latter case, the application should be extra careful for thread safety since WebMessagePort methods should be called on main thread.</p><pre><code>public static abstract class WebMessagePort.WebMessageCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/WebMessagePort.WebMessageCallback.html
WebResourceError	A										<section class="prog__container"><p> Encapsulates information about errors occured during loading of web resources. See <pre><code> WebViewClient.onReceivedError(WebView, WebResourceRequest, WebResourceError) </code></pre></p><pre><code>public abstract class WebResourceError\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/WebResourceError.html
WebResourceRequest	A										<section class="prog__container"><p> Encompasses parameters to the <pre><code> shouldInterceptRequest(WebView, WebResourceRequest) </code></pre> method.</p><pre><code>public interface WebResourceRequest\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebResourceRequest.html
WebResourceResponse	A										<section class="prog__container"><p> Encapsulates a resource response. Applications can return an instance of this class from <pre><code> shouldInterceptRequest(WebView, WebResourceRequest) </code></pre> to provide a custom response when the WebView requests a particular resource.</p><pre><code>public class WebResourceResponse\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/WebResourceResponse.html
WebSettings	A										<section class="prog__container"><p> Manages settings state for a WebView. When a WebView is first created, it obtains a set of default settings. These default settings will be returned from any getter call. A WebSettings object obtained from WebView.getSettings() is tied to the life of the WebView. If a WebView has been destroyed, any method call on WebSettings will throw an IllegalStateException.</p><pre><code>public abstract class WebSettings\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/WebSettings.html
WebSettings.LayoutAlgorithm	A										<section class="prog__container"><p> Enum for controlling the layout of html. <ul> <li> NORMAL means no rendering changes. This is the recommended choice for maximum compatibility across different platforms and Android versions. </li> <li> SINGLE_COLUMN moves all content into one column that is the width of the view. </li> <li> NARROW_COLUMNS makes all columns no wider than the screen if possible. Only use this for API levels prior to <pre><code> KITKAT </code></pre> . </li> <li> TEXT_AUTOSIZING boosts font size of paragraphs based on heuristics to make the text readable when viewing a wide-viewport layout in the overview mode. It is recommended to enable zoom support <pre><code> setSupportZoom(boolean) </code></pre> when using this mode. Supported from API level <pre><code> KITKAT </code></pre> </li> </ul></p><pre><code>public static final enum WebSettings.LayoutAlgorithm\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebSettings.LayoutAlgorithm.html
WebSettings.PluginState	A										<section class="prog__container"><p> The plugin state effects how plugins are treated on a page. ON means that any object will be loaded even if a plugin does not exist to handle the content. ON_DEMAND means that if there is a plugin installed that can handle the content, a placeholder is shown until the user clicks on the placeholder. Once clicked, the plugin will be enabled on the page. OFF means that all plugins will be turned off and any fallback content will be used.</p><pre><code>public static final enum WebSettings.PluginState\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebSettings.PluginState.html
WebSettings.RenderPriority	A										<section class="prog__container"><pre><code>public static final enum WebSettings.RenderPriority\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebSettings.RenderPriority.html
WebSettings.TextSize	A										<section class="prog__container"><p> <p class="caution"> <strong> This enum was deprecated in API level 14. </strong> <br/> Use <pre><code> setTextZoom(int) </code></pre> and <pre><code> getTextZoom() </code></pre> instead. </p><pre><code>public static final enum WebSettings.TextSize\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebSettings.TextSize.html
WebSettings.ZoomDensity	A										<section class="prog__container"><p> Enum for specifying the WebView's desired density. <ul> <li> FAR makes 100% looking like in 240dpi </li> <li> MEDIUM makes 100% looking like in 160dpi </li> <li> CLOSE makes 100% looking like in 120dpi </li> </ul></p><pre><code>public static final enum WebSettings.ZoomDensity\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebSettings.ZoomDensity.html
WebStorage	A										<section class="prog__container"><p> This class is used to manage the JavaScript storage APIs provided by the <pre><code> WebView </code></pre> . It manages the Application Cache API, the Web SQL Database API and the HTML5 Web Storage API. The Application Cache API provides a mechanism to create and maintain an application cache to power offline Web applications. Use of the Application Cache API can be attributed to an origin <pre><code> WebStorage.Origin </code></pre> , however it is not possible to set per-origin quotas. Note that there can be only one application cache per application. The Web SQL Database API provides storage which is private to a given origin. Similar to the Application Cache, use of the Web SQL Database can be attributed to an origin. It is also possible to set per-origin quotas.</p><pre><code>public class WebStorage\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/WebStorage.html
WebStorage.Origin	A										<section class="prog__container"><p> This class encapsulates information about the amount of storage currently used by an origin for the JavaScript storage APIs. An origin comprises the host, scheme and port of a URI. See <pre><code> WebStorage </code></pre> for details.</p><pre><code>public static class WebStorage.Origin\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/WebStorage.Origin.html
WebStorage.QuotaUpdater	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 19. </strong> <br/> This class is obsolete and no longer used. </p><pre><code>public static interface WebStorage.QuotaUpdater\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebStorage.QuotaUpdater.html
WebView.FindListener	A										<section class="prog__container"><p> Interface to listen for find results.</p><pre><code>public static interface WebView.FindListener\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebView.FindListener.html
WebView.HitTestResult	A										<section class="prog__container"><p> <em> This constant was deprecated in API level 14. This type is no longer used. </em></p><pre><code>public static class WebView.HitTestResult\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/WebView.HitTestResult.html
WebView	A										<section class="prog__container"><p> <p> A View that displays web pages. This class is the basis upon which you can roll your own web browser or simply display some online content within your Activity. It uses the WebKit rendering engine to display web pages and includes methods to navigate forward and backward through a history, zoom in and out, perform text searches and more. </p><pre><code>public class WebView\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebView.html
WebView.PictureListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 12. </strong> <br/> This interface is now obsolete. </p><pre><code>public static interface WebView.PictureListener\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebView.PictureListener.html
WebView.VisualStateCallback	A										<section class="prog__container"><p> Callback interface supplied to <pre><code> postVisualStateCallback(long, WebView.VisualStateCallback) </code></pre> for receiving notifications about the visual state.</p><pre><code>public static abstract class WebView.VisualStateCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/WebView.VisualStateCallback.html
WebView.WebViewTransport	A										<section class="prog__container"><p> Transportation object for returning WebView across thread boundaries.</p><pre><code>public class WebView.WebViewTransport\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/WebView.WebViewTransport.html
WebViewClient	A										<section class="prog__container"><p> User authentication failed on server</p><pre><code>public class WebViewClient\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/WebViewClient.html
WebViewDatabase	A										<section class="prog__container"><p> This class allows developers to determine whether any WebView used in the application has stored any of the following types of browsing data and to clear any such stored data for all WebViews in the application. <ul> <li> Username/password pairs for web forms </li> <li> HTTP authentication username/password pairs </li> <li> Data entered into text fields (e.g. for autocomplete suggestions) </li> </ul></p><pre><code>public abstract class WebViewDatabase\nextends Object</code></pre></section>	https://developer.android.com/reference/android/webkit/WebViewDatabase.html
WebViewFragment	A										<section class="prog__container"><p> A fragment that displays a WebView. <p> The WebView is automically paused or resumed when the Fragment is paused or resumed. </p><pre><code>public class WebViewFragment\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebViewFragment.html
AbsListView	A										<section class="prog__container"><p> Base class that can be used to implement virtualized lists of items. A list does not have a spatial definition here. For instance, subclases of this class can display the content of the list in a grid, in a carousel, as stack, etc.</p><pre><code>public abstract class AbsListView\n</code></pre></section>	https://developer.android.com/reference/android/widget/AbsListView.html
AbsListView.LayoutParams	A										<section class="prog__container"><p> AbsListView extends LayoutParams to provide a place to hold the view type.</p><pre><code>public static class AbsListView.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/AbsListView.LayoutParams.html
AbsListView.MultiChoiceModeListener	A										<section class="prog__container"><p> A MultiChoiceModeListener receives events for <pre><code> CHOICE_MODE_MULTIPLE_MODAL </code></pre> . It acts as the <pre><code> ActionMode.Callback </code></pre> for the selection mode and also receives <pre><code> onItemCheckedStateChanged(ActionMode, int, long, boolean) </code></pre> events when the user selects and deselects list items.</p><pre><code>public static interface AbsListView.MultiChoiceModeListener\nimplements ActionMode.Callback</code></pre></section>	https://developer.android.com/reference/android/widget/AbsListView.MultiChoiceModeListener.html
AbsListView.OnScrollListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the list or grid has been scrolled.</p><pre><code>public static interface AbsListView.OnScrollListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/AbsListView.OnScrollListener.html
AbsListView.RecyclerListener	A										<section class="prog__container"><p> A RecyclerListener is used to receive a notification whenever a View is placed inside the RecycleBin's scrap heap. This listener is used to free resources associated to Views placed in the RecycleBin.</p><pre><code>public static interface AbsListView.RecyclerListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/AbsListView.RecyclerListener.html
AbsListView.SelectionBoundsAdjuster	A										<section class="prog__container"><p> The top-level view of a list item can implement this interface to allow itself to modify the bounds of the selection shown for that item.</p><pre><code>public static interface AbsListView.SelectionBoundsAdjuster\n</code></pre></section>	https://developer.android.com/reference/android/widget/AbsListView.SelectionBoundsAdjuster.html
AbsoluteLayout	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 3. </strong> <br/> Use <pre><code> FrameLayout </code></pre> , <pre><code> RelativeLayout </code></pre> or a custom layout instead. </p><pre><code>public class AbsoluteLayout\n</code></pre></section>	https://developer.android.com/reference/android/widget/AbsoluteLayout.html
AbsoluteLayout.LayoutParams	A										<section class="prog__container"><p> Per-child layout information associated with AbsoluteLayout. See <pre><code> Absolute Layout Attributes </code></pre> for a list of all child view attributes that this class supports.</p><pre><code>public static class AbsoluteLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/AbsoluteLayout.LayoutParams.html
AbsSeekBar	A										<section class="prog__container"><p> Must be an integer value, such as " <pre><code> 100 </code></pre> ".</p><pre><code>public abstract class AbsSeekBar\n</code></pre></section>	https://developer.android.com/reference/android/widget/AbsSeekBar.html
AbsSpinner	A										<section class="prog__container"><p> An abstract base class for spinner widgets. SDK users will probably not need to use this class.</p><pre><code>public abstract class AbsSpinner\n</code></pre></section>	https://developer.android.com/reference/android/widget/AbsSpinner.html
ActionMenuView	A										<section class="prog__container"><p> ActionMenuView is a presentation of a series of menu options as a View. It provides several top level options as action buttons while spilling remaining options over as items in an overflow menu. This allows applications to present packs of actions inline with specific or repeating content.</p><pre><code>public class ActionMenuView\n</code></pre></section>	https://developer.android.com/reference/android/widget/ActionMenuView.html
ActionMenuView.LayoutParams	A										<section class="prog__container"><p> Special value for the height or width requested by a View.</p><pre><code>public static class ActionMenuView.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/ActionMenuView.LayoutParams.html
ActionMenuView.OnMenuItemClickListener	A										<section class="prog__container"><p> Interface responsible for receiving menu item click events if the items themselves do not have individual item click listeners.</p><pre><code>public static interface ActionMenuView.OnMenuItemClickListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/ActionMenuView.OnMenuItemClickListener.html
Adapter	A										<section class="prog__container"><p> An Adapter object acts as a bridge between an <pre><code> AdapterView </code></pre> and the underlying data for that view. The Adapter provides access to the data items. The Adapter is also responsible for making a <pre><code> View </code></pre> for each item in the data set.</p><pre><code>public interface Adapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/Adapter.html
AdapterView.AdapterContextMenuInfo	A										<section class="prog__container"><p> Extra menu information provided to the <pre><code> onCreateContextMenu(ContextMenu, View, ContextMenuInfo) </code></pre> callback when a context menu is brought up for this AdapterView.</p><pre><code>public static class AdapterView.AdapterContextMenuInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/AdapterView.AdapterContextMenuInfo.html
AdapterView	A										<section class="prog__container"><p> An AdapterView is a view whose children are determined by an <pre><code> Adapter </code></pre> . <p> See <pre><code> ListView </code></pre> , <pre><code> GridView </code></pre> , <pre><code> Spinner </code></pre> and <pre><code> Gallery </code></pre> for commonly used subclasses of AdapterView. </p><pre><code>public abstract class AdapterView\n</code></pre></section>	https://developer.android.com/reference/android/widget/AdapterView.html
AdapterView.OnItemClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when an item in this AdapterView has been clicked.</p><pre><code>public static interface AdapterView.OnItemClickListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/AdapterView.OnItemClickListener.html
AdapterView.OnItemLongClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when an item in this view has been clicked and held.</p><pre><code>public static interface AdapterView.OnItemLongClickListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/AdapterView.OnItemLongClickListener.html
AdapterView.OnItemSelectedListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when an item in this view has been selected.</p><pre><code>public static interface AdapterView.OnItemSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/AdapterView.OnItemSelectedListener.html
AdapterViewAnimator	A										<section class="prog__container"><p> Base class for a <pre><code> AdapterView </code></pre> that will perform animations when switching between its views.</p><pre><code>public abstract class AdapterViewAnimator\n</code></pre></section>	https://developer.android.com/reference/android/widget/AdapterViewAnimator.html
AdapterViewFlipper	A										<section class="prog__container"><p> Simple <pre><code> ViewAnimator </code></pre> that will animate between two or more views that have been added to it. Only one child is shown at a time. If requested, can automatically flip between each child at a regular interval.</p><pre><code>public class AdapterViewFlipper\n</code></pre></section>	https://developer.android.com/reference/android/widget/AdapterViewFlipper.html
Advanceable	A										<section class="prog__container"><p> This interface can be implemented by any collection-type view which has a notion of progressing through its set of children. The interface exists to give AppWidgetHosts a way of taking responsibility for automatically advancing such collections.</p><pre><code>public interface Advanceable\n</code></pre></section>	https://developer.android.com/reference/android/widget/Advanceable.html
AlphabetIndexer	A										<section class="prog__container"><pre><code>public class AlphabetIndexer\n</code></pre></section>	https://developer.android.com/reference/android/widget/AlphabetIndexer.html
AnalogClock	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 23. </strong> <br/> This widget is no longer supported. </p><pre><code>public class AnalogClock\n</code></pre></section>	https://developer.android.com/reference/android/widget/AnalogClock.html
ArrayAdapter	A										<section class="prog__container"><p> A concrete BaseAdapter that is backed by an array of arbitrary objects. By default this class expects that the provided resource id references a single TextView. If you want to use a more complex layout, use the constructors that also takes a field id. That field id should reference a TextView in the larger layout resource. <p> However the TextView is referenced, it will be filled with the toString() of each object in the array. You can add lists or arrays of custom objects. Override the toString() method of your objects to determine what text will be displayed for the item in the list. <p> To use something other than TextViews for the array display, for instance, ImageViews, or to have some of data besides toString() results fill the views, override <pre><code> getView(int, View, ViewGroup) </code></pre> to return the type of view you want. </p><pre><code>public class ArrayAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/ArrayAdapter.html
AutoCompleteTextView	A										<section class="prog__container"><p> <p> An editable text view that shows completion suggestions automatically while the user is typing. The list of suggestions is displayed in a drop down menu from which the user can choose an item to replace the content of the edit box with. </p><pre><code>public class AutoCompleteTextView\n</code></pre></section>	https://developer.android.com/reference/android/widget/AutoCompleteTextView.html
AutoCompleteTextView.OnDismissListener	A										<section class="prog__container"><p> Listener to respond to the AutoCompleteTextView's completion list being dismissed.</p><pre><code>public static interface AutoCompleteTextView.OnDismissListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/AutoCompleteTextView.OnDismissListener.html
AutoCompleteTextView.Validator	A										<section class="prog__container"><p> This interface is used to make sure that the text entered in this TextView complies to a certain format. Since there is no foolproof way to prevent the user from leaving this View with an incorrect value in it, all we can do is try to fix it ourselves when this happens.</p><pre><code>public static interface AutoCompleteTextView.Validator\n</code></pre></section>	https://developer.android.com/reference/android/widget/AutoCompleteTextView.Validator.html
BaseAdapter	A										<section class="prog__container"><p> Common base class of common implementation for an <pre><code> Adapter </code></pre> that can be used in both <pre><code> ListView </code></pre> (by implementing the specialized <pre><code> ListAdapter </code></pre> interface) and <pre><code> Spinner </code></pre> (by implementing the specialized <pre><code> SpinnerAdapter </code></pre> interface).</p><pre><code>public abstract class BaseAdapter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/BaseAdapter.html
BaseExpandableListAdapter	A										<section class="prog__container"><pre><code>public abstract class BaseExpandableListAdapter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html
Button	A										<section class="prog__container"><p> Represents a push-button widget. Push-buttons can be pressed, or clicked, by the user to perform an action. <p> A typical use of a push-button in an activity would be the following: </p><pre><code>public class Button\n</code></pre></section>	https://developer.android.com/reference/android/widget/Button.html
CalendarView	A										<section class="prog__container"><p> This class is a calendar widget for displaying and selecting dates. The range of dates supported by this calendar is configurable. <p> The exact appearance and interaction model of this widget may vary between OS versions and themes (e.g. Holo versus Material), but in general a user can select a date by tapping on it and can scroll or fling the calendar to a desired date. </p><pre><code>public class CalendarView\n</code></pre></section>	https://developer.android.com/reference/android/widget/CalendarView.html
CalendarView.OnDateChangeListener	A										<section class="prog__container"><p> The callback used to indicate the user changes the date.</p><pre><code>public static interface CalendarView.OnDateChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/CalendarView.OnDateChangeListener.html
Checkable	A										<section class="prog__container"><p> Defines an extension for views that make them checkable.</p><pre><code>public interface Checkable\n</code></pre></section>	https://developer.android.com/reference/android/widget/Checkable.html
CheckBox	A										<section class="prog__container"><p> <p> A checkbox is a specific type of two-states button that can be either checked or unchecked. A example usage of a checkbox inside your activity would be the following: </p><pre><code>public class CheckBox\n</code></pre></section>	https://developer.android.com/reference/android/widget/CheckBox.html
CheckedTextView	A										<section class="prog__container"><p> An extension to <pre><code> TextView </code></pre> that supports the <pre><code> Checkable </code></pre> interface and displays. <p> This is useful when used in a <pre><code> ListView </code></pre> where the <pre><code> setChoiceMode </code></pre> has been set to something other than <pre><code> CHOICE_MODE_NONE </code></pre> . </p><pre><code>public class CheckedTextView\n</code></pre></section>	https://developer.android.com/reference/android/widget/CheckedTextView.html
Chronometer	A										<section class="prog__container"><p> Class that implements a simple timer. <p> You can give it a start time in the <pre><code> elapsedRealtime() </code></pre> timebase, and it counts up from that, or if you don't give it a base time, it will use the time at which you call <pre><code> start() </code></pre> . <p> The timer can also count downward towards the base time by setting <pre><code> setCountDown(boolean) </code></pre> to true. <p> By default it will display the current timer value in the form "MM:SS" or "H:MM:SS", or you can use <pre><code> setFormat(String) </code></pre> to format the timer value into an arbitrary string. </p><pre><code>public class Chronometer\n</code></pre></section>	https://developer.android.com/reference/android/widget/Chronometer.html
Chronometer.OnChronometerTickListener	A										<section class="prog__container"><p> A callback that notifies when the chronometer has incremented on its own.</p><pre><code>public static interface Chronometer.OnChronometerTickListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/Chronometer.OnChronometerTickListener.html
CompoundButton	A										<section class="prog__container"><p> <p> A button with two states, checked and unchecked. When the button is pressed or clicked, the state changes automatically. </p><pre><code>public abstract class CompoundButton\n</code></pre></section>	https://developer.android.com/reference/android/widget/CompoundButton.html
CompoundButton.OnCheckedChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the checked state of a compound button changed.</p><pre><code>public static interface CompoundButton.OnCheckedChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/CompoundButton.OnCheckedChangeListener.html
CursorAdapter	A										<section class="prog__container"><p> Adapter that exposes data from a <pre><code> Cursor </code></pre> to a <pre><code> ListView </code></pre> widget. <p> The Cursor must include a column named "_id" or this class will not work. Additionally, using <pre><code> MergeCursor </code></pre> with this class will not work if the merged Cursors have overlapping values in their "_id" columns. </p><pre><code>public abstract class CursorAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/CursorAdapter.html
CursorTreeAdapter	A										<section class="prog__container"><p> An adapter that exposes data from a series of <pre><code> Cursor </code></pre> s to an <pre><code> ExpandableListView </code></pre> widget. The top-level <pre><code> Cursor </code></pre> (that is given in the constructor) exposes the groups, while subsequent <pre><code> Cursor </code></pre> s returned from <pre><code> getChildrenCursor(Cursor) </code></pre> expose children within a particular group. The Cursors must include a column named "_id" or this class will not work.</p><pre><code>public abstract class CursorTreeAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/CursorTreeAdapter.html
DatePicker	A										<section class="prog__container"><p> Provides a widget for selecting a date. <p> When the <pre><code> DatePicker_datePickerMode </code></pre> attribute is set to <pre><code> spinner </code></pre> , the date can be selected using year, month, and day spinners or a <pre><code> CalendarView </code></pre> . The set of spinners and the calendar view are automatically synchronized. The client can customize whether only the spinners, or only the calendar view, or both to be displayed. </p><pre><code>public class DatePicker\n</code></pre></section>	https://developer.android.com/reference/android/widget/DatePicker.html
DatePicker.OnDateChangedListener	A										<section class="prog__container"><p> The callback used to indicate the user changed the date.</p><pre><code>public static interface DatePicker.OnDateChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/DatePicker.OnDateChangedListener.html
DialerFilter	A										<section class="prog__container"><p> Must be a dimension value, which is a floating point number appended with a unit such as " <pre><code> 14.5sp </code></pre> ".</p><pre><code>public class DialerFilter\n</code></pre></section>	https://developer.android.com/reference/android/widget/DialerFilter.html
DigitalClock	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 17. </strong> <br/> It is recommended you use <pre><code> TextClock </code></pre> instead. </p><pre><code>public class DigitalClock\n</code></pre></section>	https://developer.android.com/reference/android/widget/DigitalClock.html
EdgeEffect	A										<section class="prog__container"><p> This class performs the graphical effect used at the edges of scrollable widgets when the user scrolls beyond the content bounds in 2D space. <p> EdgeEffect is stateful. Custom widgets using EdgeEffect should create an instance for each edge that should show the effect, feed it input data using the methods <pre><code> onAbsorb(int) </code></pre> , <pre><code> onPull(float) </code></pre> , and <pre><code> onRelease() </code></pre> , and draw the effect using <pre><code> draw(Canvas) </code></pre> in the widget's overridden <pre><code> draw(Canvas) </code></pre> method. If <pre><code> isFinished() </code></pre> returns false after drawing, the edge effect's animation is not yet complete and the widget should schedule another drawing pass to continue the animation. </p><pre><code>public class EdgeEffect\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/EdgeEffect.html
EditText	A										<section class="prog__container"><p> EditText is a thin veneer over TextView that configures itself to be editable. <p> See the Text Fields guide. </p><pre><code>public class EditText\n</code></pre></section>	https://developer.android.com/reference/android/widget/EditText.html
ExpandableListAdapter	A										<section class="prog__container"><p> An adapter that links a <pre><code> ExpandableListView </code></pre> with the underlying data. The implementation of this interface will provide access to the data of the children (categorized by groups), and also instantiate <pre><code> View </code></pre> s for children and groups.</p><pre><code>public interface ExpandableListAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/ExpandableListAdapter.html
ExpandableListView.ExpandableListContextMenuInfo	A										<section class="prog__container"><p> Extra menu information specific to an <pre><code> ExpandableListView </code></pre> provided to the <pre><code> onCreateContextMenu(ContextMenu, View, ContextMenuInfo) </code></pre> callback when a context menu is brought up for this AdapterView.</p><pre><code>public static class ExpandableListView.ExpandableListContextMenuInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/ExpandableListView.ExpandableListContextMenuInfo.html
ExpandableListView	A										<section class="prog__container"><p> A view that shows items in a vertically scrolling two-level list. This differs from the <pre><code> ListView </code></pre> by allowing two levels: groups which can individually be expanded to show its children. The items come from the <pre><code> ExpandableListAdapter </code></pre> associated with this view. <p> Expandable lists are able to show an indicator beside each item to display the item's current state (the states are usually one of expanded group, collapsed group, child, or last child). Use <pre><code> setChildIndicator(Drawable) </code></pre> or <pre><code> setGroupIndicator(Drawable) </code></pre> (or the corresponding XML attributes) to set these indicators (see the docs for each method to see additional state that each Drawable can have). The default style for an <pre><code> ExpandableListView </code></pre> provides indicators which will be shown next to Views given to the <pre><code> ExpandableListView </code></pre> . The layouts android.R.layout.simple_expandable_list_item_1 and android.R.layout.simple_expandable_list_item_2 (which should be used with <pre><code> SimpleCursorTreeAdapter </code></pre> ) contain the preferred position information for indicators. <p> The context menu information set by an <pre><code> ExpandableListView </code></pre> will be a <pre><code> ExpandableListView.ExpandableListContextMenuInfo </code></pre> object with <pre><code> packedPosition </code></pre> being a packed position that can be used with <pre><code> getPackedPositionType(long) </code></pre> and the other similar methods. <p> <em> <b> Note: </b> </em> You cannot use the value <pre><code> wrap_content </code></pre> for the <pre><code> android:layout_height </code></pre> attribute of a ExpandableListView in XML if the parent's size is also not strictly specified (for example, if the parent were ScrollView you could not specify wrap_content since it also can be any length. However, you can use wrap_content if the ExpandableListView parent has a specific size, such as 100 pixels. </p><pre><code>public class ExpandableListView\n</code></pre></section>	https://developer.android.com/reference/android/widget/ExpandableListView.html
ExpandableListView.OnChildClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a child in this expandable list has been clicked.</p><pre><code>public static interface ExpandableListView.OnChildClickListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/ExpandableListView.OnChildClickListener.html
ExpandableListView.OnGroupClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a group in this expandable list has been clicked.</p><pre><code>public static interface ExpandableListView.OnGroupClickListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/ExpandableListView.OnGroupClickListener.html
ExpandableListView.OnGroupCollapseListener	A										<section class="prog__container"><p> Used for being notified when a group is collapsed</p><pre><code>public static interface ExpandableListView.OnGroupCollapseListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/ExpandableListView.OnGroupCollapseListener.html
ExpandableListView.OnGroupExpandListener	A										<section class="prog__container"><p> Used for being notified when a group is expanded</p><pre><code>public static interface ExpandableListView.OnGroupExpandListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/ExpandableListView.OnGroupExpandListener.html
Filter.FilterListener	A										<section class="prog__container"><p> <p> Listener used to receive a notification upon completion of a filtering operation. </p><pre><code>public static interface Filter.FilterListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/Filter.FilterListener.html
Filter.FilterResults	A										<section class="prog__container"><p> <p> Holds the results of a filtering operation. The results are the values computed by the filtering operation and the number of these values. </p><pre><code>protected static class Filter.FilterResults\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/Filter.FilterResults.html
Filter	A										<section class="prog__container"><p> <p> A filter constrains data with a filtering pattern. </p><pre><code>public abstract class Filter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/Filter.html
Filterable	A										<section class="prog__container"><p> <p> Defines a filterable behavior. A filterable class can have its data constrained by a filter. Filterable classes are usually <pre><code> Adapter </code></pre> implementations. </p><pre><code>public interface Filterable\n</code></pre></section>	https://developer.android.com/reference/android/widget/Filterable.html
FilterQueryProvider	A										<section class="prog__container"><p> This class can be used by external clients of CursorAdapter and CursorTreeAdapter to define how the content of the adapter should be filtered.</p><pre><code>public interface FilterQueryProvider\n</code></pre></section>	https://developer.android.com/reference/android/widget/FilterQueryProvider.html
FrameLayout	A										<section class="prog__container"><p> FrameLayout is designed to block out an area on the screen to display a single item. Generally, FrameLayout should be used to hold a single child view, because it can be difficult to organize child views in a way that's scalable to different screen sizes without the children overlapping each other. You can, however, add multiple children to a FrameLayout and control their position within the FrameLayout by assigning gravity to each child, using the <pre><code> android:layout_gravity </code></pre> attribute. <p> Child views are drawn in a stack, with the most recently added child on top. The size of the FrameLayout is the size of its largest child (plus padding), visible or not (if the FrameLayout's parent permits). Views that are <pre><code> GONE </code></pre> are used for sizing only if <pre><code> setConsiderGoneChildrenWhenMeasuring() </code></pre> is set to true. </p><pre><code>public class FrameLayout\n</code></pre></section>	https://developer.android.com/reference/android/widget/FrameLayout.html
FrameLayout.LayoutParams	A										<section class="prog__container"><p> Per-child layout information for layouts that support margins. See <pre><code> FrameLayout Layout Attributes </code></pre> for a list of all child view attributes that this class supports.</p><pre><code>public static class FrameLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/FrameLayout.LayoutParams.html
Gallery	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 16. </strong> <br/> This widget is no longer supported. Other horizontally scrolling widgets include <pre><code> HorizontalScrollView </code></pre> and <pre><code> ViewPager </code></pre> from the support library. </p><pre><code>public class Gallery\n</code></pre></section>	https://developer.android.com/reference/android/widget/Gallery.html
Gallery.LayoutParams	A										<section class="prog__container"><p> Gallery extends LayoutParams to provide a place to hold current Transformation information along with previous position/transformation info.</p><pre><code>public static class Gallery.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/Gallery.LayoutParams.html
GridLayout.Alignment	A										<section class="prog__container"><p> Alignments specify where a view should be placed within a cell group and what size it should be. <p> The <pre><code> GridLayout.LayoutParams </code></pre> class contains a <pre><code> rowSpec </code></pre> and a <pre><code> columnSpec </code></pre> each of which contains an <pre><code> alignment </code></pre> . Overall placement of the view in the cell group is specified by the two alignments which act along each axis independently. <p> The GridLayout class defines the most common alignments used in general layout: <pre><code> TOP </code></pre> , <pre><code> LEFT </code></pre> , <pre><code> BOTTOM </code></pre> , <pre><code> RIGHT </code></pre> , <pre><code> START </code></pre> , <pre><code> END </code></pre> , <pre><code> CENTER </code></pre> , <pre><code> BASELINE </code></pre> and <pre><code> FILL </code></pre> . </p><pre><code>public static abstract class GridLayout.Alignment\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/GridLayout.Alignment.html
GridLayout	A										<section class="prog__container"><p> A layout that places its children in a rectangular <em> grid </em> . <p> The grid is composed of a set of infinitely thin lines that separate the viewing area into <em> cells </em> . Throughout the API, grid lines are referenced by grid <em> indices </em> . A grid with <pre><code> N </code></pre> columns has <pre><code> N + 1 </code></pre> grid indices that run from <pre><code> 0 </code></pre> through <pre><code> N </code></pre> inclusive. Regardless of how GridLayout is configured, grid index <pre><code> 0 </code></pre> is fixed to the leading edge of the container and grid index <pre><code> N </code></pre> is fixed to its trailing edge (after padding is taken into account). <h4> Row and Column Specs </h4> Children occupy one or more contiguous cells, as defined by their <pre><code> rowSpec </code></pre> and <pre><code> columnSpec </code></pre> layout parameters. Each spec defines the set of rows or columns that are to be occupied; and how children should be aligned within the resulting group of cells. Although cells do not normally overlap in a GridLayout, GridLayout does not prevent children being defined to occupy the same cell or group of cells. In this case however, there is no guarantee that children will not themselves overlap after the layout operation completes. <h4> Default Cell Assignment </h4> If a child does not specify the row and column indices of the cell it wishes to occupy, GridLayout assigns cell locations automatically using its: <pre><code> orientation </code></pre> , <pre><code> rowCount </code></pre> and <pre><code> columnCount </code></pre> properties. <h4> Space </h4> Space between children may be specified either by using instances of the dedicated <pre><code> Space </code></pre> view or by setting the <pre><code> leftMargin </code></pre> , <pre><code> topMargin </code></pre> , <pre><code> rightMargin </code></pre> and <pre><code> bottomMargin </code></pre> layout parameters. When the <pre><code> useDefaultMargins </code></pre> property is set, default margins around children are automatically allocated based on the prevailing UI style guide for the platform. Each of the margins so defined may be independently overridden by an assignment to the appropriate layout parameter. Default values will generally produce a reasonable spacing between components but values may change between different releases of the platform. <h4> Excess Space Distribution </h4> As of API 21, GridLayout's distribution of excess space accomodates the principle of weight. In the event that no weights are specified, the previous conventions are respected and columns and rows are taken as flexible if their views specify some form of alignment within their groups. <p> The flexibility of a view is therefore influenced by its alignment which is, in turn, typically defined by setting the <pre><code> gravity </code></pre> property of the child's layout parameters. If either a weight or alignment were defined along a given axis then the component is taken as <em> flexible </em> in that direction. If no weight or alignment was set, the component is instead assumed to be <em> inflexible </em> . <p> Multiple components in the same row or column group are considered to act in <em> parallel </em> . Such a group is flexible only if <em> all </em> of the components within it are flexible. Row and column groups that sit either side of a common boundary are instead considered to act in <em> series </em> . The composite group made of these two elements is flexible if <em> one </em> of its elements is flexible. <p> To make a column stretch, make sure all of the components inside it define a weight or a gravity. To prevent a column from stretching, ensure that one of the components in the column does not define a weight or a gravity. <p> When the principle of flexibility does not provide complete disambiguation, GridLayout's algorithms favour rows and columns that are closer to its <em> right </em> and <em> bottom </em> edges. To be more precise, GridLayout treats each of its layout parameters as a constraint in the a set of variables that define the grid-lines along a given axis. During layout, GridLayout solves the constraints so as to return the unique solution to those constraints for which all variables are less-than-or-equal-to the corresponding value in any other valid solution. <h4> Interpretation of GONE </h4> For layout purposes, GridLayout treats views whose visibility status is <pre><code> GONE </code></pre> , as having zero width and height. This is subtly different from the policy of ignoring views that are marked as GONE outright. If, for example, a gone-marked view was alone in a column, that column would itself collapse to zero width if and only if no gravity was defined on the view. If gravity was defined, then the gone-marked view has no effect on the layout and the container should be laid out as if the view had never been added to it. GONE views are taken to have zero weight during excess space distribution. <p> These statements apply equally to rows as well as columns, and to groups of rows or columns. <p> See <pre><code> GridLayout.LayoutParams </code></pre> for a full description of the layout parameters used by GridLayout. </p><pre><code>public class GridLayout\n</code></pre></section>	https://developer.android.com/reference/android/widget/GridLayout.html
GridLayout.LayoutParams	A										<section class="prog__container"><p> Layout information associated with each of the children of a GridLayout. <p> GridLayout supports both row and column spanning and arbitrary forms of alignment within each cell group. The fundamental parameters associated with each cell group are gathered into their vertical and horizontal components and stored in the <pre><code> rowSpec </code></pre> and <pre><code> columnSpec </code></pre> layout parameters. <pre><code> Specs </code></pre> are immutable structures and may be shared between the layout parameters of different children. <p> The row and column specs contain the leading and trailing indices along each axis and together specify the four grid indices that delimit the cells of this cell group. <p> The alignment properties of the row and column specs together specify both aspects of alignment within the cell group. It is also possible to specify a child's alignment within its cell group by using the <pre><code> setGravity(int) </code></pre> method. <p> The weight property is also included in Spec and specifies the proportion of any excess space that is due to the associated view. <h4> WRAP_CONTENT and MATCH_PARENT </h4> Because the default values of the <pre><code> width </code></pre> and <pre><code> height </code></pre> properties are both <pre><code> WRAP_CONTENT </code></pre> , this value never needs to be explicitly declared in the layout parameters of GridLayout's children. In addition, GridLayout does not distinguish the special size value <pre><code> MATCH_PARENT </code></pre> from <pre><code> WRAP_CONTENT </code></pre> . A component's ability to expand to the size of the parent is instead controlled by the principle of <em> flexibility </em> , as discussed in <pre><code> GridLayout </code></pre> . <h4> Summary </h4> You should not need to use either of the special size values: <pre><code> WRAP_CONTENT </code></pre> or <pre><code> MATCH_PARENT </code></pre> when configuring the children of a GridLayout. <h4> Default values </h4> <ul> <li> <pre><code> width </code></pre> = <pre><code> WRAP_CONTENT </code></pre> </li> <li> <pre><code> height </code></pre> = <pre><code> WRAP_CONTENT </code></pre> </li> <li> <pre><code> topMargin </code></pre> = 0 when <pre><code> useDefaultMargins </code></pre> is <pre><code> false </code></pre> ; otherwise <pre><code> UNDEFINED </code></pre> , to indicate that a default value should be computed on demand. </li> <li> <pre><code> leftMargin </code></pre> = 0 when <pre><code> useDefaultMargins </code></pre> is <pre><code> false </code></pre> ; otherwise <pre><code> UNDEFINED </code></pre> , to indicate that a default value should be computed on demand. </li> <li> <pre><code> bottomMargin </code></pre> = 0 when <pre><code> useDefaultMargins </code></pre> is <pre><code> false </code></pre> ; otherwise <pre><code> UNDEFINED </code></pre> , to indicate that a default value should be computed on demand. </li> <li> <pre><code> rightMargin </code></pre> = 0 when <pre><code> useDefaultMargins </code></pre> is <pre><code> false </code></pre> ; otherwise <pre><code> UNDEFINED </code></pre> , to indicate that a default value should be computed on demand. </li> <li> <pre><code> rowSpec </code></pre> <pre><code> .row </code></pre> = <pre><code> UNDEFINED </code></pre> </li> <li> <pre><code> rowSpec </code></pre> <pre><code> .rowSpan </code></pre> = 1 </li> <li> <pre><code> rowSpec </code></pre> <pre><code> .alignment </code></pre> = <pre><code> BASELINE </code></pre> </li> <li> <pre><code> rowSpec </code></pre> <pre><code> .weight </code></pre> = 0 </li> <li> <pre><code> columnSpec </code></pre> <pre><code> .column </code></pre> = <pre><code> UNDEFINED </code></pre> </li> <li> <pre><code> columnSpec </code></pre> <pre><code> .columnSpan </code></pre> = 1 </li> <li> <pre><code> columnSpec </code></pre> <pre><code> .alignment </code></pre> = <pre><code> START </code></pre> </li> <li> <pre><code> columnSpec </code></pre> <pre><code> .weight </code></pre> = 0 </li> </ul> See <pre><code> GridLayout </code></pre> for a more complete description of the conventions used by GridLayout in the interpretation of the properties of this class. </p><pre><code>public static class GridLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html
GridLayout.Spec	A										<section class="prog__container"><p> A Spec defines the horizontal or vertical characteristics of a group of cells. Each spec. defines the <em> grid indices </em> and <em> alignment </em> along the appropriate axis. <p> The <em> grid indices </em> are the leading and trailing edges of this cell group. See <pre><code> GridLayout </code></pre> for a description of the conventions used by GridLayout for grid indices. <p> The <em> alignment </em> property specifies how cells should be aligned in this group. For row groups, this specifies the vertical alignment. For column groups, this specifies the horizontal alignment. <p> Use the following static methods to create specs: <ul> <li> <pre><code> spec(int) </code></pre> </li> <li> <pre><code> spec(int, int) </code></pre> </li> <li> <pre><code> spec(int, Alignment) </code></pre> </li> <li> <pre><code> spec(int, int, Alignment) </code></pre> </li> <li> <pre><code> spec(int, float) </code></pre> </li> <li> <pre><code> spec(int, int, float) </code></pre> </li> <li> <pre><code> spec(int, Alignment, float) </code></pre> </li> <li> <pre><code> spec(int, int, Alignment, float) </code></pre> </li> </ul> </p><pre><code>public static class GridLayout.Spec\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/GridLayout.Spec.html
GridView	A										<section class="prog__container"><p> A view that shows items in two-dimensional scrolling grid. The items in the grid come from the <pre><code> ListAdapter </code></pre> associated with this view. <p> See the Grid View guide. </p><pre><code>public class GridView\n</code></pre></section>	https://developer.android.com/reference/android/widget/GridView.html
HeaderViewListAdapter	A										<section class="prog__container"><p> ListAdapter used when a ListView has header views. This ListAdapter wraps another one and also keeps track of the header views and their associated data objects. <p> This is intended as a base class; you will probably not need to use this class directly in your own code. </p><pre><code>public class HeaderViewListAdapter\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/HeaderViewListAdapter.html
HeterogeneousExpandableList	A										<section class="prog__container"><p> Additional methods that when implemented make an <pre><code> ExpandableListAdapter </code></pre> take advantage of the <pre><code> Adapter </code></pre> view type mechanism. <p> An <pre><code> ExpandableListAdapter </code></pre> declares it has one view type for its group items and one view type for its child items. Although adapted for most <pre><code> ExpandableListView </code></pre> s, these values should be tuned for heterogeneous <pre><code> ExpandableListView </code></pre> s. </p><pre><code>public interface HeterogeneousExpandableList\n</code></pre></section>	https://developer.android.com/reference/android/widget/HeterogeneousExpandableList.html
HorizontalScrollView	A										<section class="prog__container"><p> Layout container for a view hierarchy that can be scrolled by the user, allowing it to be larger than the physical display. A HorizontalScrollView is a <pre><code> FrameLayout </code></pre> , meaning you should place one child in it containing the entire contents to scroll; this child may itself be a layout manager with a complex hierarchy of objects. A child that is often used is a <pre><code> LinearLayout </code></pre> in a horizontal orientation, presenting a horizontal array of top-level items that the user can scroll through. <p> The <pre><code> TextView </code></pre> class also takes care of its own scrolling, so does not require a HorizontalScrollView, but using the two together is possible to achieve the effect of a text view within a larger container. <p> HorizontalScrollView only supports horizontal scrolling. For vertical scrolling, use either <pre><code> ScrollView </code></pre> or <pre><code> ListView </code></pre> . </p><pre><code>public class HorizontalScrollView\n</code></pre></section>	https://developer.android.com/reference/android/widget/HorizontalScrollView.html
ImageButton	A										<section class="prog__container"><p> <p> Displays a button with an image (instead of text) that can be pressed or clicked by the user. By default, an ImageButton looks like a regular <pre><code> Button </code></pre> , with the standard button background that changes color during different button states. The image on the surface of the button is defined either by the <pre><code> android:src </code></pre> attribute in the <pre><code> &lt;ImageButton&gt; </code></pre> XML element or by the <pre><code> setImageResource(int) </code></pre> method. </p><pre><code>public class ImageButton\n</code></pre></section>	https://developer.android.com/reference/android/widget/ImageButton.html
ImageSwitcher	A										<section class="prog__container"><p> Must be a dimension value, which is a floating point number appended with a unit such as " <pre><code> 14.5sp </code></pre> ".</p><pre><code>public class ImageSwitcher\n</code></pre></section>	https://developer.android.com/reference/android/widget/ImageSwitcher.html
ImageView	A										<section class="prog__container"><p> Displays an arbitrary image, such as an icon. The ImageView class can load images from various sources (such as resources or content providers), takes care of computing its measurement from the image so that it can be used in any layout manager, and provides various display options such as scaling and tinting.</p><pre><code>public class ImageView\n</code></pre></section>	https://developer.android.com/reference/android/widget/ImageView.html
ImageView.ScaleType	A										<section class="prog__container"><p> Options for scaling the bounds of an image to the bounds of this view.</p><pre><code>public static final enum ImageView.ScaleType\n</code></pre></section>	https://developer.android.com/reference/android/widget/ImageView.ScaleType.html
LinearLayout	A										<section class="prog__container"><p> A Layout that arranges its children in a single column or a single row. The direction of the row can be set by calling <pre><code> setOrientation() </code></pre> . You can also specify gravity, which specifies the alignment of all the child elements by calling <pre><code> setGravity() </code></pre> or specify that specific children grow to fill up any remaining space in the layout by setting the <em> weight </em> member of <pre><code> LinearLayout.LayoutParams </code></pre> . The default orientation is horizontal. <p> See the Linear Layout guide. </p><pre><code>public class LinearLayout\n</code></pre></section>	https://developer.android.com/reference/android/widget/LinearLayout.html
LinearLayout.LayoutParams	A										<section class="prog__container"><p> Per-child layout information associated with ViewLinearLayout.</p><pre><code>public static class LinearLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/LinearLayout.LayoutParams.html
ListAdapter	A										<section class="prog__container"><p> Extended <pre><code> Adapter </code></pre> that is the bridge between a <pre><code> ListView </code></pre> and the data that backs the list. Frequently that data comes from a Cursor, but that is not required. The ListView can display any data provided that it is wrapped in a ListAdapter.</p><pre><code>public interface ListAdapter\nimplements Adapter</code></pre></section>	https://developer.android.com/reference/android/widget/ListAdapter.html
ListPopupWindow	A										<section class="prog__container"><p> A ListPopupWindow anchors itself to a host view and displays a list of choices. <p> ListPopupWindow contains a number of tricky behaviors surrounding positioning, scrolling parents to fit the dropdown, interacting sanely with the IME if present, and others. </p><pre><code>public class ListPopupWindow\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/ListPopupWindow.html
ListView.FixedViewInfo	A										<section class="prog__container"><p> A class that represents a fixed view in a list, for example a header at the top or a footer at the bottom.</p><pre><code>public class ListView.FixedViewInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/ListView.FixedViewInfo.html
ListView	A										<section class="prog__container"><p> A view that shows items in a vertically scrolling list. The items come from the <pre><code> ListAdapter </code></pre> associated with this view. <p> See the List View guide. </p><pre><code>public class ListView\n</code></pre></section>	https://developer.android.com/reference/android/widget/ListView.html
MediaController	A										<section class="prog__container"><p> A view containing controls for a MediaPlayer. Typically contains the buttons like "Play/Pause", "Rewind", "Fast Forward" and a progress slider. It takes care of synchronizing the controls with the state of the MediaPlayer. <p> The way to use this class is to instantiate it programmatically. The MediaController will create a default set of controls and put them in a window floating above your application. Specifically, the controls will float above the view specified with setAnchorView(). The window will disappear if left idle for three seconds and reappear when the user touches the anchor view. <p> Functions like show() and hide() have no effect when MediaController is created in an xml layout. MediaController will hide and show the buttons according to these rules: <ul> <li> The "previous" and "next" buttons are hidden until setPrevNextListeners() has been called <li> The "previous" and "next" buttons are visible but disabled if setPrevNextListeners() was called with null listeners <li> The "rewind" and "fastforward" buttons are shown unless requested otherwise by using the MediaController(Context, boolean) constructor with the boolean set to false </li> </li> </li> </ul> </p><pre><code>public class MediaController\n</code></pre></section>	https://developer.android.com/reference/android/widget/MediaController.html
MediaController.MediaPlayerControl	A										<section class="prog__container"><p> Get the audio session id for the player used by this VideoView.</p><pre><code>public static interface MediaController.MediaPlayerControl\n</code></pre></section>	https://developer.android.com/reference/android/widget/MediaController.MediaPlayerControl.html
MultiAutoCompleteTextView.CommaTokenizer	A										<section class="prog__container"><p> This simple Tokenizer can be used for lists where the items are separated by a comma and one or more spaces.</p><pre><code>public static class MultiAutoCompleteTextView.CommaTokenizer\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/MultiAutoCompleteTextView.CommaTokenizer.html
MultiAutoCompleteTextView	A										<section class="prog__container"><p> An editable text view, extending <pre><code> AutoCompleteTextView </code></pre> , that can show completion suggestions for the substring of the text where the user is typing instead of necessarily for the entire thing. <p> You must provide a <pre><code> MultiAutoCompleteTextView.Tokenizer </code></pre> to distinguish the various substrings. <p> The following code snippet shows how to create a text view which suggests various countries names while the user is typing: </p><pre><code>public class MultiAutoCompleteTextView\n</code></pre></section>	https://developer.android.com/reference/android/widget/MultiAutoCompleteTextView.html
MultiAutoCompleteTextView.Tokenizer	A										<section class="prog__container"><p> Returns the end of the token (minus trailing punctuation) that begins at offset <pre><code> cursor </code></pre> within <pre><code> text </code></pre> .</p><pre><code>public static interface MultiAutoCompleteTextView.Tokenizer\n</code></pre></section>	https://developer.android.com/reference/android/widget/MultiAutoCompleteTextView.Tokenizer.html
NumberPicker.Formatter	A										<section class="prog__container"><p> Interface used to format current value into a string for presentation.</p><pre><code>public static interface NumberPicker.Formatter\n</code></pre></section>	https://developer.android.com/reference/android/widget/NumberPicker.Formatter.html
NumberPicker	A										<section class="prog__container"><p> A widget that enables the user to select a number from a predefined range. There are two flavors of this widget and which one is presented to the user depends on the current theme. <ul> <li> If the current theme is derived from <pre><code> Theme </code></pre> the widget presents the current value as an editable input field with an increment button above and a decrement button below. Long pressing the buttons allows for a quick change of the current value. Tapping on the input field allows to type in a desired value. </li> <li> If the current theme is derived from <pre><code> Theme_Holo </code></pre> or <pre><code> Theme_Holo_Light </code></pre> the widget presents the current value as an editable input field with a lesser value above and a greater value below. Tapping on the lesser or greater value selects it by animating the number axis up or down to make the chosen value current. Flinging up or down allows for multiple increments or decrements of the current value. Long pressing on the lesser and greater values also allows for a quick change of the current value. Tapping on the current value allows to type in a desired value. </li> </ul> <p> For an example of using this widget, see <pre><code> TimePicker </code></pre> . </p><pre><code>public class NumberPicker\n</code></pre></section>	https://developer.android.com/reference/android/widget/NumberPicker.html
NumberPicker.OnScrollListener	A										<section class="prog__container"><p> Interface to listen for the picker scroll state.</p><pre><code>public static interface NumberPicker.OnScrollListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/NumberPicker.OnScrollListener.html
NumberPicker.OnValueChangeListener	A										<section class="prog__container"><p> Interface to listen for changes of the current value.</p><pre><code>public static interface NumberPicker.OnValueChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/NumberPicker.OnValueChangeListener.html
OverScroller	A										<section class="prog__container"><p> This class encapsulates scrolling with the ability to overshoot the bounds of a scrolling operation. This class is a drop-in replacement for <pre><code> Scroller </code></pre> in most cases.</p><pre><code>public class OverScroller\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/OverScroller.html
android.widget	A										<section class="prog__container">The widget package contains (mostly visual) UI elements to useon your Application screen. You can also design your own.</section>	https://developer.android.com/reference/android/widget/package-summary.html
PopupMenu	A										<section class="prog__container"><p> A PopupMenu displays a <pre><code> Menu </code></pre> in a modal popup window anchored to a <pre><code> View </code></pre> . The popup will appear below the anchor view if there is room, or above it if there is not. If the IME is visible the popup will not overlap it until it is touched. Touching outside of the popup will dismiss it.</p><pre><code>public class PopupMenu\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/PopupMenu.html
PopupMenu.OnDismissListener	A										<section class="prog__container"><p> Callback interface used to notify the application that the menu has closed.</p><pre><code>public static interface PopupMenu.OnDismissListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/PopupMenu.OnDismissListener.html
PopupMenu.OnMenuItemClickListener	A										<section class="prog__container"><p> Interface responsible for receiving menu item click events if the items themselves do not have individual item click listeners.</p><pre><code>public static interface PopupMenu.OnMenuItemClickListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/PopupMenu.OnMenuItemClickListener.html
PopupWindow	A										<section class="prog__container"><p> <p> This class represents a popup window that can be used to display an arbitrary view. The popup window is a floating container that appears on top of the current activity. </p><pre><code>public class PopupWindow\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/PopupWindow.html
PopupWindow.OnDismissListener	A										<section class="prog__container"><p> Listener that is called when this popup window is dismissed.</p><pre><code>public static interface PopupWindow.OnDismissListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/PopupWindow.OnDismissListener.html
ProgressBar	A										<section class="prog__container"><p> <p> Visual indicator of progress in some operation. Displays a bar to the user representing how far the operation has progressed; the application can change the amount of progress (modifying the length of the bar) as it moves forward. There is also a secondary progress displayable on a progress bar which is useful for displaying intermediate progress, such as the buffer level during a streaming playback progress bar. </p><pre><code>public class ProgressBar\n</code></pre></section>	https://developer.android.com/reference/android/widget/ProgressBar.html
QuickContactBadge	A										<section class="prog__container"><p> Widget used to show an image with the standard QuickContact badge and on-click behavior.</p><pre><code>public class QuickContactBadge\n</code></pre></section>	https://developer.android.com/reference/android/widget/QuickContactBadge.html
RadioButton	A										<section class="prog__container"><p> <p> A radio button is a two-states button that can be either checked or unchecked. When the radio button is unchecked, the user can press or click it to check it. However, contrary to a <pre><code> CheckBox </code></pre> , a radio button cannot be unchecked by the user once checked. </p><pre><code>public class RadioButton\n</code></pre></section>	https://developer.android.com/reference/android/widget/RadioButton.html
RadioGroup	A										<section class="prog__container"><p> <p> This class is used to create a multiple-exclusion scope for a set of radio buttons. Checking one radio button that belongs to a radio group unchecks any previously checked radio button within the same group. </p><pre><code>public class RadioGroup\n</code></pre></section>	https://developer.android.com/reference/android/widget/RadioGroup.html
RadioGroup.LayoutParams	A										<section class="prog__container"><p> <p> This set of layout parameters defaults the width and the height of the children to <pre><code> WRAP_CONTENT </code></pre> when they are not specified in the XML file. Otherwise, this class ussed the value read from the XML file. </p><pre><code>public static class RadioGroup.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/RadioGroup.LayoutParams.html
RadioGroup.OnCheckedChangeListener	A										<section class="prog__container"><p> <p> Interface definition for a callback to be invoked when the checked radio button changed in this group. </p><pre><code>public static interface RadioGroup.OnCheckedChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/RadioGroup.OnCheckedChangeListener.html
RatingBar	A										<section class="prog__container"><p> A RatingBar is an extension of SeekBar and ProgressBar that shows a rating in stars. The user can touch/drag or use arrow keys to set the rating when using the default size RatingBar. The smaller RatingBar style ( <pre><code> ratingBarStyleSmall </code></pre> ) and the larger indicator-only style ( <pre><code> ratingBarStyleIndicator </code></pre> ) do not support user interaction and should only be used as indicators. <p> When using a RatingBar that supports user interaction, placing widgets to the left or right of the RatingBar is discouraged. <p> The number of stars set (via <pre><code> setNumStars(int) </code></pre> or in an XML layout) will be shown when the layout width is set to wrap content (if another layout width is set, the results may be unpredictable). <p> The secondary progress should not be modified by the client as it is used internally as the background for a fractionally filled star. </p><pre><code>public class RatingBar\n</code></pre></section>	https://developer.android.com/reference/android/widget/RatingBar.html
RatingBar.OnRatingBarChangeListener	A										<section class="prog__container"><p> A callback that notifies clients when the rating has been changed. This includes changes that were initiated by the user through a touch gesture or arrow key/trackball as well as changes that were initiated programmatically.</p><pre><code>public static interface RatingBar.OnRatingBarChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/RatingBar.OnRatingBarChangeListener.html
RelativeLayout	A										<section class="prog__container"><p> A Layout where the positions of the children can be described in relation to each other or to the parent. <p> Note that you cannot have a circular dependency between the size of the RelativeLayout and the position of its children. For example, you cannot have a RelativeLayout whose height is set to <pre><code> WRAP_CONTENT </code></pre> and a child set to <pre><code> ALIGN_PARENT_BOTTOM </code></pre> . </p><pre><code>public class RelativeLayout\n</code></pre></section>	https://developer.android.com/reference/android/widget/RelativeLayout.html
RelativeLayout.LayoutParams	A										<section class="prog__container"><p> Per-child layout information associated with RelativeLayout.</p><pre><code>public static class RelativeLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/RelativeLayout.LayoutParams.html
RemoteViews.ActionException	A										<section class="prog__container"><p> Exception to send when something goes wrong executing an action</p><pre><code>public static class RemoteViews.ActionException\n</code></pre></section>	https://developer.android.com/reference/android/widget/RemoteViews.ActionException.html
RemoteViews	A										<section class="prog__container"><p> A class that describes a view hierarchy that can be displayed in another process. The hierarchy is inflated from a layout resource file, and this class provides some basic operations for modifying the content of the inflated hierarchy.</p><pre><code>public class RemoteViews\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/RemoteViews.html
RemoteViews.RemoteView	A										<section class="prog__container"><p> This annotation indicates that a subclass of View is alllowed to be used with the <pre><code> RemoteViews </code></pre> mechanism.</p><pre><code>public static abstract @interface RemoteViews.RemoteView\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/android/widget/RemoteViews.RemoteView.html
RemoteViewsService	A										<section class="prog__container"><p> The service to be connected to for a remote adapter to request RemoteViews. Users should extend the RemoteViewsService to provide the appropriate RemoteViewsFactory's used to populate the remote collection view (ListView, GridView, etc).</p><pre><code>public abstract class RemoteViewsService\n</code></pre></section>	https://developer.android.com/reference/android/widget/RemoteViewsService.html
RemoteViewsService.RemoteViewsFactory	A										<section class="prog__container"><p> An interface for an adapter between a remote collection view (ListView, GridView, etc) and the underlying data for that view. The implementor is responsible for making a RemoteView for each item in the data set. This interface is a thin wrapper around <pre><code> Adapter </code></pre> .</p><pre><code>public static interface RemoteViewsService.RemoteViewsFactory\n</code></pre></section>	https://developer.android.com/reference/android/widget/RemoteViewsService.RemoteViewsFactory.html
ResourceCursorAdapter	A										<section class="prog__container"><p> An easy adapter that creates views defined in an XML file. You can specify the XML file that defines the appearance of the views.</p><pre><code>public abstract class ResourceCursorAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/ResourceCursorAdapter.html
ResourceCursorTreeAdapter	A										<section class="prog__container"><p> A fairly simple ExpandableListAdapter that creates views defined in an XML file. You can specify the XML file that defines the appearance of the views.</p><pre><code>public abstract class ResourceCursorTreeAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/ResourceCursorTreeAdapter.html
Scroller	A										<section class="prog__container"><p> <p> This class encapsulates scrolling. You can use scrollers ( <pre><code> Scroller </code></pre> or <pre><code> OverScroller </code></pre> ) to collect the data you need to produce a scrolling animation—for example, in response to a fling gesture. Scrollers track scroll offsets for you over time, but they don't automatically apply those positions to your view. It's your responsibility to get and apply new coordinates at a rate that will make the scrolling animation look smooth. </p><pre><code>public class Scroller\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/Scroller.html
ScrollView	A										<section class="prog__container"><p> Layout container for a view hierarchy that can be scrolled by the user, allowing it to be larger than the physical display. A ScrollView is a <pre><code> FrameLayout </code></pre> , meaning you should place one child in it containing the entire contents to scroll; this child may itself be a layout manager with a complex hierarchy of objects. A child that is often used is a <pre><code> LinearLayout </code></pre> in a vertical orientation, presenting a vertical array of top-level items that the user can scroll through. <p> You should never use a ScrollView with a <pre><code> ListView </code></pre> , because ListView takes care of its own vertical scrolling. Most importantly, doing this defeats all of the important optimizations in ListView for dealing with large lists, since it effectively forces the ListView to display its entire list of items to fill up the infinite container supplied by ScrollView. <p> The <pre><code> TextView </code></pre> class also takes care of its own scrolling, so does not require a ScrollView, but using the two together is possible to achieve the effect of a text view within a larger container. <p> ScrollView only supports vertical scrolling. For horizontal scrolling, use <pre><code> HorizontalScrollView </code></pre> . </p><pre><code>public class ScrollView\n</code></pre></section>	https://developer.android.com/reference/android/widget/ScrollView.html
SearchView	A										<section class="prog__container"><p> A widget that provides a user interface for the user to enter a search query and submit a request to a search provider. Shows a list of query suggestions or results, if available, and allows the user to pick a suggestion or result to launch into. <p> When the SearchView is used in an ActionBar as an action view for a collapsible menu item, it needs to be set to iconified by default using <pre><code> setIconifiedByDefault(true) </code></pre> . This is the default, so nothing needs to be done. </p><pre><code>public class SearchView\n</code></pre></section>	https://developer.android.com/reference/android/widget/SearchView.html
SearchView.OnCloseListener	A										<section class="prog__container"><p> The user is attempting to close the SearchView.</p><pre><code>public static interface SearchView.OnCloseListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/SearchView.OnCloseListener.html
SearchView.OnQueryTextListener	A										<section class="prog__container"><p> Callbacks for changes to the query text.</p><pre><code>public static interface SearchView.OnQueryTextListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/SearchView.OnQueryTextListener.html
SearchView.OnSuggestionListener	A										<section class="prog__container"><p> Callback interface for selection events on suggestions. These callbacks are only relevant when a SearchableInfo has been specified by <pre><code> setSearchableInfo(SearchableInfo) </code></pre> .</p><pre><code>public static interface SearchView.OnSuggestionListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/SearchView.OnSuggestionListener.html
SectionIndexer	A										<section class="prog__container"><p> Interface that may implemented on <pre><code> Adapter </code></pre> s to enable fast scrolling between sections of an <pre><code> AbsListView </code></pre> . <p> A section is a group of list items that have something in common. For example, they may begin with the same letter or they may be songs from the same artist. <p> <pre><code> ExpandableListAdapter </code></pre> s that consider groups and sections as synonymous should account for collapsed groups and return an appropriate section/position. </p><pre><code>public interface SectionIndexer\n</code></pre></section>	https://developer.android.com/reference/android/widget/SectionIndexer.html
SeekBar	A										<section class="prog__container"><p> A SeekBar is an extension of ProgressBar that adds a draggable thumb. The user can touch the thumb and drag left or right to set the current progress level or use the arrow keys. Placing focusable widgets to the left or right of a SeekBar is discouraged. <p> Clients of the SeekBar can attach a <pre><code> SeekBar.OnSeekBarChangeListener </code></pre> to be notified of the user's actions. </p><pre><code>public class SeekBar\n</code></pre></section>	https://developer.android.com/reference/android/widget/SeekBar.html
SeekBar.OnSeekBarChangeListener	A										<section class="prog__container"><p> A callback that notifies clients when the progress level has been changed. This includes changes that were initiated by the user through a touch gesture or arrow key/trackball as well as changes that were initiated programmatically.</p><pre><code>public static interface SeekBar.OnSeekBarChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/SeekBar.OnSeekBarChangeListener.html
ShareActionProvider	A										<section class="prog__container"><p> This is a provider for a share action. It is responsible for creating views that enable data sharing and also to show a sub menu with sharing activities if the hosting item is placed on the overflow menu. <p> Here is how to use the action provider with custom backing file in a <pre><code> MenuItem </code></pre> : </p><pre><code>public class ShareActionProvider\n</code></pre></section>	https://developer.android.com/reference/android/widget/ShareActionProvider.html
ShareActionProvider.OnShareTargetSelectedListener	A										<section class="prog__container"><p> Listener for the event of selecting a share target.</p><pre><code>public static interface ShareActionProvider.OnShareTargetSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/ShareActionProvider.OnShareTargetSelectedListener.html
SimpleAdapter	A										<section class="prog__container"><p> An easy adapter to map static data to views defined in an XML file. You can specify the data backing the list as an ArrayList of Maps. Each entry in the ArrayList corresponds to one row in the list. The Maps contain the data for each row. You also specify an XML file that defines the views used to display the row, and a mapping from keys in the Map to specific views. Binding data to views occurs in two phases. First, if a <pre><code> SimpleAdapter.ViewBinder </code></pre> is available, <pre><code> setViewValue(android.view.View, Object, String) </code></pre> is invoked. If the returned value is true, binding has occurred. If the returned value is false, the following views are then tried in order: <ul> <li> A view that implements Checkable (e.g. CheckBox). The expected bind value is a boolean. <li> TextView. The expected bind value is a string and <pre><code> setViewText(TextView, String) </code></pre> is invoked. <li> ImageView. The expected bind value is a resource id or a string and <pre><code> setViewImage(ImageView, int) </code></pre> or <pre><code> setViewImage(ImageView, String) </code></pre> is invoked. </li> </li> </li> </ul> If no appropriate binding can be found, an <pre><code> IllegalStateException </code></pre> is thrown.</p><pre><code>public class SimpleAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/SimpleAdapter.html
SimpleAdapter.ViewBinder	A										<section class="prog__container"><p> This class can be used by external clients of SimpleAdapter to bind values to views. You should use this class to bind values to views that are not directly supported by SimpleAdapter or to change the way binding occurs for views supported by SimpleAdapter.</p><pre><code>public static interface SimpleAdapter.ViewBinder\n</code></pre></section>	https://developer.android.com/reference/android/widget/SimpleAdapter.ViewBinder.html
SimpleCursorAdapter.CursorToStringConverter	A										<section class="prog__container"><p> This class can be used by external clients of SimpleCursorAdapter to define how the Cursor should be converted to a String.</p><pre><code>public static interface SimpleCursorAdapter.CursorToStringConverter\n</code></pre></section>	https://developer.android.com/reference/android/widget/SimpleCursorAdapter.CursorToStringConverter.html
SimpleCursorAdapter	A										<section class="prog__container"><p> An easy adapter to map columns from a cursor to TextViews or ImageViews defined in an XML file. You can specify which columns you want, which views you want to display the columns, and the XML file that defines the appearance of these views. Binding occurs in two phases. First, if a <pre><code> SimpleCursorAdapter.ViewBinder </code></pre> is available, <pre><code> setViewValue(android.view.View, android.database.Cursor, int) </code></pre> is invoked. If the returned value is true, binding has occured. If the returned value is false and the view to bind is a TextView, <pre><code> setViewText(TextView, String) </code></pre> is invoked. If the returned value is false and the view to bind is an ImageView, <pre><code> setViewImage(ImageView, String) </code></pre> is invoked. If no appropriate binding can be found, an <pre><code> IllegalStateException </code></pre> is thrown. If this adapter is used with filtering, for instance in an <pre><code> AutoCompleteTextView </code></pre> , you can use the <pre><code> SimpleCursorAdapter.CursorToStringConverter </code></pre> and the <pre><code> FilterQueryProvider </code></pre> interfaces to get control over the filtering process. You can refer to <pre><code> convertToString(android.database.Cursor) </code></pre> and <pre><code> runQueryOnBackgroundThread(CharSequence) </code></pre> for more information.</p><pre><code>public class SimpleCursorAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/SimpleCursorAdapter.html
SimpleCursorAdapter.ViewBinder	A										<section class="prog__container"><p> This class can be used by external clients of SimpleCursorAdapter to bind values fom the Cursor to views. You should use this class to bind values from the Cursor to views that are not directly supported by SimpleCursorAdapter or to change the way binding occurs for views supported by SimpleCursorAdapter.</p><pre><code>public static interface SimpleCursorAdapter.ViewBinder\n</code></pre></section>	https://developer.android.com/reference/android/widget/SimpleCursorAdapter.ViewBinder.html
SimpleCursorTreeAdapter	A										<section class="prog__container"><p> An easy adapter to map columns from a cursor to TextViews or ImageViews defined in an XML file. You can specify which columns you want, which views you want to display the columns, and the XML file that defines the appearance of these views. Separate XML files for child and groups are possible. Binding occurs in two phases. First, if a <pre><code> SimpleCursorTreeAdapter.ViewBinder </code></pre> is available, <pre><code> setViewValue(android.view.View, android.database.Cursor, int) </code></pre> is invoked. If the returned value is true, binding has occurred. If the returned value is false and the view to bind is a TextView, <pre><code> setViewText(TextView, String) </code></pre> is invoked. If the returned value is false and the view to bind is an ImageView, <pre><code> setViewImage(ImageView, String) </code></pre> is invoked. If no appropriate binding can be found, an <pre><code> IllegalStateException </code></pre> is thrown.</p><pre><code>public abstract class SimpleCursorTreeAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/SimpleCursorTreeAdapter.html
SimpleCursorTreeAdapter.ViewBinder	A										<section class="prog__container"><p> This class can be used by external clients of SimpleCursorTreeAdapter to bind values from the Cursor to views. You should use this class to bind values from the Cursor to views that are not directly supported by SimpleCursorTreeAdapter or to change the way binding occurs for views supported by SimpleCursorTreeAdapter.</p><pre><code>public static interface SimpleCursorTreeAdapter.ViewBinder\n</code></pre></section>	https://developer.android.com/reference/android/widget/SimpleCursorTreeAdapter.ViewBinder.html
SimpleExpandableListAdapter	A										<section class="prog__container"><p> An easy adapter to map static data to group and child views defined in an XML file. You can separately specify the data backing the group as a List of Maps. Each entry in the ArrayList corresponds to one group in the expandable list. The Maps contain the data for each row. You also specify an XML file that defines the views used to display a group, and a mapping from keys in the Map to specific views. This process is similar for a child, except it is one-level deeper so the data backing is specified as a List <list<map> &gt;, where the first List corresponds to the group of the child, the second List corresponds to the position of the child within the group, and finally the Map holds the data for that particular child. </list<map></p><pre><code>public class SimpleExpandableListAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/SimpleExpandableListAdapter.html
SlidingDrawer	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 17. </strong> <br/> This class is not supported anymore. It is recommended you base your own implementation on the source code for the Android Open Source Project if you must use it in your application. </p><pre><code>public class SlidingDrawer\n</code></pre></section>	https://developer.android.com/reference/android/widget/SlidingDrawer.html
SlidingDrawer.OnDrawerCloseListener	A										<section class="prog__container"><p> Callback invoked when the drawer is closed.</p><pre><code>public static interface SlidingDrawer.OnDrawerCloseListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerCloseListener.html
SlidingDrawer.OnDrawerOpenListener	A										<section class="prog__container"><p> Callback invoked when the drawer is opened.</p><pre><code>public static interface SlidingDrawer.OnDrawerOpenListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerOpenListener.html
SlidingDrawer.OnDrawerScrollListener	A										<section class="prog__container"><p> Callback invoked when the drawer is scrolled.</p><pre><code>public static interface SlidingDrawer.OnDrawerScrollListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerScrollListener.html
Space	A										<section class="prog__container"><p> Space is a lightweight View subclass that may be used to create gaps between components in general purpose layouts.</p><pre><code>public final class Space\n</code></pre></section>	https://developer.android.com/reference/android/widget/Space.html
Spinner	A										<section class="prog__container"><p> A view that displays one child at a time and lets the user pick among them. The items in the Spinner come from the <pre><code> Adapter </code></pre> associated with this view. <p> See the Spinners guide. </p><pre><code>public class Spinner\n</code></pre></section>	https://developer.android.com/reference/android/widget/Spinner.html
SpinnerAdapter	A										<section class="prog__container"><p> Extended <pre><code> Adapter </code></pre> that is the bridge between a <pre><code> Spinner </code></pre> and its data. A spinner adapter allows to define two different views: one that shows the data in the spinner itself and one that shows the data in the drop down list when the spinner is pressed.</p><pre><code>public interface SpinnerAdapter\nimplements Adapter</code></pre></section>	https://developer.android.com/reference/android/widget/SpinnerAdapter.html
StackView	A										<section class="prog__container"><p> Must be a dimension value, which is a floating point number appended with a unit such as " <pre><code> 14.5sp </code></pre> ".</p><pre><code>public class StackView\n</code></pre></section>	https://developer.android.com/reference/android/widget/StackView.html
Switch	A										<section class="prog__container"><p> A Switch is a two-state toggle switch widget that can select between two options. The user may drag the "thumb" back and forth to choose the selected option, or simply tap to toggle as if it were a checkbox. The <pre><code> text </code></pre> property controls the text displayed in the label for the switch, whereas the <pre><code> off </code></pre> and <pre><code> on </code></pre> text controls the text on the thumb. Similarly, the <pre><code> textAppearance </code></pre> and the related setTypeface() methods control the typeface and style of label text, whereas the <pre><code> switchTextAppearance </code></pre> and the related setSwitchTypeface() methods control that of the thumb. <p> <pre><code> SwitchCompat </code></pre> is a version of the Switch widget which runs on devices back to API 7. </p><pre><code>public class Switch\n</code></pre></section>	https://developer.android.com/reference/android/widget/Switch.html
TabHost	A										<section class="prog__container"><p> Container for a tabbed window view. This object holds two children: a set of tab labels that the user clicks to select a specific tab, and a FrameLayout object that displays the contents of that page. The individual elements are typically controlled using this container object, rather than setting values on the child elements themselves.</p><pre><code>public class TabHost\n</code></pre></section>	https://developer.android.com/reference/android/widget/TabHost.html
TabHost.OnTabChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when tab changed</p><pre><code>public static interface TabHost.OnTabChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/TabHost.OnTabChangeListener.html
TabHost.TabContentFactory	A										<section class="prog__container"><p> Makes the content of a tab when it is selected. Use this if your tab content needs to be created on demand, i.e. you are not showing an existing view or starting an activity.</p><pre><code>public static interface TabHost.TabContentFactory\n</code></pre></section>	https://developer.android.com/reference/android/widget/TabHost.TabContentFactory.html
TabHost.TabSpec	A										<section class="prog__container"><p> A tab has a tab indicator, content, and a tag that is used to keep track of it. This builder helps choose among these options. For the tab indicator, your choices are: 1) set a label 2) set a label and an icon For the tab content, your choices are: 1) the id of a <pre><code> View </code></pre> 2) a <pre><code> TabHost.TabContentFactory </code></pre> that creates the <pre><code> View </code></pre> content. 3) an <pre><code> Intent </code></pre> that launches an <pre><code> Activity </code></pre> .</p><pre><code>public class TabHost.TabSpec\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/TabHost.TabSpec.html
TableLayout	A										<section class="prog__container"><p> <p> A layout that arranges its children into rows and columns. A TableLayout consists of a number of <pre><code> TableRow </code></pre> objects, each defining a row (actually, you can have other children, which will be explained below). TableLayout containers do not display border lines for their rows, columns, or cells. Each row has zero or more cells; each cell can hold one <pre><code> View </code></pre> object. The table has as many columns as the row with the most cells. A table can leave cells empty. Cells can span columns, as they can in HTML. </p><pre><code>public class TableLayout\n</code></pre></section>	https://developer.android.com/reference/android/widget/TableLayout.html
TableLayout.LayoutParams	A										<section class="prog__container"><p> <p> This set of layout parameters enforces the width of each child to be <pre><code> MATCH_PARENT </code></pre> and the height of each child to be <pre><code> WRAP_CONTENT </code></pre> , but only if the height is not specified. </p><pre><code>public static class TableLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/TableLayout.LayoutParams.html
TableRow	A										<section class="prog__container"><p> <p> A layout that arranges its children horizontally. A TableRow should always be used as a child of a <pre><code> TableLayout </code></pre> . If a TableRow's parent is not a TableLayout, the TableRow will behave as an horizontal <pre><code> LinearLayout </code></pre> . </p><pre><code>public class TableRow\n</code></pre></section>	https://developer.android.com/reference/android/widget/TableRow.html
TableRow.LayoutParams	A										<section class="prog__container"><p> <p> Set of layout parameters used in table rows. </p><pre><code>public static class TableRow.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/TableRow.LayoutParams.html
TabWidget	A										<section class="prog__container"><p> Displays a list of tab labels representing each page in the parent's tab collection. <p> The container object for this widget is <pre><code> TabHost </code></pre> . When the user selects a tab, this object sends a message to the parent container, TabHost, to tell it to switch the displayed page. You typically won't use many methods directly on this object. The container TabHost is used to add labels, add the callback handler, and manage callbacks. You might call this object to iterate the list of tabs, or to tweak the layout of the tab list, but most methods should be called on the containing TabHost object. </p><pre><code>public class TabWidget\n</code></pre></section>	https://developer.android.com/reference/android/widget/TabWidget.html
TextClock	A										<section class="prog__container"><p> <p> <pre><code> TextClock </code></pre> can display the current date and/or time as a formatted string. </p><pre><code>public class TextClock\n</code></pre></section>	https://developer.android.com/reference/android/widget/TextClock.html
TextSwitcher	A										<section class="prog__container"><p> Specialized <pre><code> ViewSwitcher </code></pre> that contains only children of type <pre><code> TextView </code></pre> . A TextSwitcher is useful to animate a label on screen. Whenever <pre><code> setText(CharSequence) </code></pre> is called, TextSwitcher animates the current text out and animates the new text in.</p><pre><code>public class TextSwitcher\n</code></pre></section>	https://developer.android.com/reference/android/widget/TextSwitcher.html
TextView.BufferType	A										<section class="prog__container"><pre><code>public static final enum TextView.BufferType\n</code></pre></section>	https://developer.android.com/reference/android/widget/TextView.BufferType.html
TextView	A										<section class="prog__container"><p> Displays text to the user and optionally allows them to edit it. A TextView is a complete text editor, however the basic class is configured to not allow editing; see <pre><code> EditText </code></pre> for a subclass that configures the text view for editing. <p> To allow users to copy some or all of the TextView's value and paste it somewhere else, set the XML attribute <pre><code> android:textIsSelectable </code></pre> to "true" or call <pre><code> setTextIsSelectable(true) </code></pre> . The <pre><code> textIsSelectable </code></pre> flag allows users to make selection gestures in the TextView, which in turn triggers the system's built-in copy/paste controls. <p> <b> XML attributes </b> <p> See <pre><code> TextView Attributes </code></pre> , <pre><code> View Attributes </code></pre> </p><pre><code>public class TextView\n</code></pre></section>	https://developer.android.com/reference/android/widget/TextView.html
TextView.OnEditorActionListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when an action is performed on the editor.</p><pre><code>public static interface TextView.OnEditorActionListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/TextView.OnEditorActionListener.html
TextView.SavedState	A										<section class="prog__container"><p> User interface state that is stored by TextView for implementing <pre><code> onSaveInstanceState() </code></pre> .</p><pre><code>public static class TextView.SavedState\n</code></pre></section>	https://developer.android.com/reference/android/widget/TextView.SavedState.html
ThemedSpinnerAdapter	A										<section class="prog__container"><p> An extension of SpinnerAdapter that is capable of inflating drop-down views against a different theme than normal views. <p> Classes that implement this interface should use the theme provided to <pre><code> setDropDownViewTheme(Theme) </code></pre> when creating views in <pre><code> getDropDownView(int, View, ViewGroup) </code></pre> . </p><pre><code>public interface ThemedSpinnerAdapter\nimplements SpinnerAdapter</code></pre></section>	https://developer.android.com/reference/android/widget/ThemedSpinnerAdapter.html
TimePicker	A										<section class="prog__container"><p> A widget for selecting the time of day, in either 24-hour or AM/PM mode. <p> For a dialog using this view, see <pre><code> TimePickerDialog </code></pre> . See the Pickers guide for more information. </p><pre><code>public class TimePicker\n</code></pre></section>	https://developer.android.com/reference/android/widget/TimePicker.html
TimePicker.OnTimeChangedListener	A										<section class="prog__container"><p> The callback interface used to indicate the time has been adjusted.</p><pre><code>public static interface TimePicker.OnTimeChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/TimePicker.OnTimeChangedListener.html
Toast	A										<section class="prog__container"><p> A toast is a view containing a quick little message for the user. The toast class helps you create and show those. <p> <p> When the view is shown to the user, appears as a floating view over the application. It will never receive focus. The user will probably be in the middle of typing something else. The idea is to be as unobtrusive as possible, while still showing the user the information you want them to see. Two examples are the volume control, and the brief message saying that your settings have been saved. <p> The easiest way to use this class is to call one of the static methods that constructs everything you need and returns a new Toast object. </p><pre><code>public class Toast\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/Toast.html
ToggleButton	A										<section class="prog__container"><p> Displays checked/unchecked states as a button with a "light" indicator and by default accompanied with the text "ON" or "OFF". <p> See the Toggle Buttons guide. </p><pre><code>public class ToggleButton\n</code></pre></section>	https://developer.android.com/reference/android/widget/ToggleButton.html
Toolbar	A										<section class="prog__container"><p> A standard toolbar for use within application content. <p> A Toolbar is a generalization of <pre><code> action bars </code></pre> for use within application layouts. While an action bar is traditionally part of an <pre><code> Activity's </code></pre> opaque window decor controlled by the framework, a Toolbar may be placed at any arbitrary level of nesting within a view hierarchy. An application may choose to designate a Toolbar as the action bar for an Activity using the <pre><code> setActionBar() </code></pre> method. </p><pre><code>public class Toolbar\n</code></pre></section>	https://developer.android.com/reference/android/widget/Toolbar.html
Toolbar.LayoutParams	A										<section class="prog__container"><p> Layout information for child views of Toolbars. <p> Toolbar.LayoutParams extends ActionBar.LayoutParams for compatibility with existing ActionBar API. See <pre><code> Activity.setActionBar </code></pre> for more info on how to use a Toolbar as your Activity's ActionBar. </p><pre><code>public static class Toolbar.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/Toolbar.LayoutParams.html
Toolbar.OnMenuItemClickListener	A										<section class="prog__container"><p> Interface responsible for receiving menu item click events if the items themselves do not have individual item click listeners.</p><pre><code>public static interface Toolbar.OnMenuItemClickListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/Toolbar.OnMenuItemClickListener.html
TwoLineListItem	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 17. </strong> <br/> This class can be implemented easily by apps using a <pre><code> RelativeLayout </code></pre> or a <pre><code> LinearLayout </code></pre> . </p><pre><code>public class TwoLineListItem\n</code></pre></section>	https://developer.android.com/reference/android/widget/TwoLineListItem.html
VideoView	A										<section class="prog__container"><p> Displays a video file. The VideoView class can load images from various sources (such as resources or content providers), takes care of computing its measurement from the video so that it can be used in any layout manager, and provides various display options such as scaling and tinting. <p> <em> Note: VideoView does not retain its full state when going into the background. </em> In particular, it does not restore the current play state, play position, selected tracks, or any subtitle tracks added via <pre><code> addSubtitleSource() </code></pre> . Applications should save and restore these on their own in <pre><code> onSaveInstanceState(Bundle) </code></pre> and <pre><code> onRestoreInstanceState(Bundle) </code></pre> . <p> Also note that the audio session id (from <pre><code> getAudioSessionId() </code></pre> ) may change from its previously returned value when the VideoView is restored. </p><pre><code>public class VideoView\n</code></pre></section>	https://developer.android.com/reference/android/widget/VideoView.html
ViewAnimator	A										<section class="prog__container"><p> Base class for a <pre><code> FrameLayout </code></pre> container that will perform animations when switching between its views.</p><pre><code>public class ViewAnimator\n</code></pre></section>	https://developer.android.com/reference/android/widget/ViewAnimator.html
ViewFlipper	A										<section class="prog__container"><p> Simple <pre><code> ViewAnimator </code></pre> that will animate between two or more views that have been added to it. Only one child is shown at a time. If requested, can automatically flip between each child at a regular interval.</p><pre><code>public class ViewFlipper\n</code></pre></section>	https://developer.android.com/reference/android/widget/ViewFlipper.html
ViewSwitcher	A										<section class="prog__container"><p> <pre><code> ViewAnimator </code></pre> that switches between two views, and has a factory from which these views are created. You can either use the factory to create the views, or add them yourself. A ViewSwitcher can only have two child views, of which only one is shown at a time.</p><pre><code>public class ViewSwitcher\n</code></pre></section>	https://developer.android.com/reference/android/widget/ViewSwitcher.html
ViewSwitcher.ViewFactory	A										<section class="prog__container"><p> Creates views in a ViewSwitcher.</p><pre><code>public static interface ViewSwitcher.ViewFactory\n</code></pre></section>	https://developer.android.com/reference/android/widget/ViewSwitcher.ViewFactory.html
WrapperListAdapter	A										<section class="prog__container"><p> List adapter that wraps another list adapter. The wrapped adapter can be retrieved by calling <pre><code> getWrappedAdapter() </code></pre> .</p><pre><code>public interface WrapperListAdapter\nimplements ListAdapter</code></pre></section>	https://developer.android.com/reference/android/widget/WrapperListAdapter.html
ZoomButton	A										<section class="prog__container"><p> Must be a dimension value, which is a floating point number appended with a unit such as " <pre><code> 14.5sp </code></pre> ".</p><pre><code>public class ZoomButton\n</code></pre></section>	https://developer.android.com/reference/android/widget/ZoomButton.html
ZoomButtonsController	A										<section class="prog__container"><p> The <pre><code> ZoomButtonsController </code></pre> handles showing and hiding the zoom controls and positioning it relative to an owner view. It also gives the client access to the zoom controls container, allowing for additional accessory buttons to be shown in the zoom controls window. <p> Typically, clients should call <pre><code> setVisible(true) </code></pre> on a touch down or move (no need to call <pre><code> setVisible(false) </code></pre> since it will time out on its own). Also, whenever the owner cannot be zoomed further, the client should update <pre><code> setZoomInEnabled(boolean) </code></pre> and <pre><code> setZoomOutEnabled(boolean) </code></pre> . <p> If you are using this with a custom View, please call <pre><code> setVisible(false) </code></pre> from <pre><code> onDetachedFromWindow() </code></pre> and from <pre><code> onVisibilityChanged(View, int) </code></pre> when <pre><code> visibility != View.VISIBLE </code></pre> . </p><pre><code>public class ZoomButtonsController\nextends Object</code></pre></section>	https://developer.android.com/reference/android/widget/ZoomButtonsController.html
ZoomButtonsController.OnZoomListener	A										<section class="prog__container"><p> Interface that will be called when the user performs an interaction that triggers some action, for example zooming.</p><pre><code>public static interface ZoomButtonsController.OnZoomListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/ZoomButtonsController.OnZoomListener.html
ZoomControls	A										<section class="prog__container"><p> The <pre><code> ZoomControls </code></pre> class displays a simple set of controls used for zooming and provides callbacks to register for events.</p><pre><code>public class ZoomControls\n</code></pre></section>	https://developer.android.com/reference/android/widget/ZoomControls.html
com.android.internal.backup	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/com/android/internal/backup/package-summary.html
com.android.internal.inputmethod	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/com/android/internal/inputmethod/package-summary.html
com.android.internal.logging	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/com/android/internal/logging/package-summary.html
BatteryStatsImpl.SamplingTimer	A										For more information, see https://developer.android.com/reference/com/android/internal/os/BatteryStatsImpl.SamplingTimer.html#update(long, int)	https://developer.android.com/reference/com/android/internal/os/BatteryStatsImpl.SamplingTimer.html#update(long, int)
KernelCpuSpeedReader	A										For more information, see https://developer.android.com/reference/com/android/internal/os/KernelCpuSpeedReader.html#readDelta()	https://developer.android.com/reference/com/android/internal/os/KernelCpuSpeedReader.html#readDelta()
com.android.internal.os	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/com/android/internal/os/package-summary.html
com.android.internal.statusbar	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/com/android/internal/statusbar/package-summary.html
AutoScrollHelper	A										For more information, see https://developer.android.com/reference/com/android/internal/widget/AutoScrollHelper.html	https://developer.android.com/reference/com/android/internal/widget/AutoScrollHelper.html
com.android.internal.widget	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/com/android/internal/widget/package-summary.html
ViewPager.OnPageChangeListener	A										For more information, see https://developer.android.com/reference/com/android/internal/widget/ViewPager.OnPageChangeListener.html	https://developer.android.com/reference/com/android/internal/widget/ViewPager.OnPageChangeListener.html
MultiDexTestRunner	A										<section class="prog__container"><p> <pre><code> InstrumentationTestRunner </code></pre> for testing application needing multidex support.</p><pre><code>public class MultiDexTestRunner\n</code></pre></section>	https://developer.android.com/reference/com/android/test/runner/MultiDexTestRunner.html
com.android.test.runner	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/com/android/test/runner/package-summary.html
dalvik.annotation	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/dalvik/annotation/package-summary.html
TestTarget	A										<section class="prog__container"><p> <p class="caution"> <strong> This @interface was deprecated in API level 14. </strong> <br/> Obsolete. </p><pre><code>public abstract @interface TestTarget\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/dalvik/annotation/TestTarget.html
TestTargetClass	A										<section class="prog__container"><p> <p class="caution"> <strong> This @interface was deprecated in API level 14. </strong> <br/> Obsolete. </p><pre><code>public abstract @interface TestTargetClass\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/dalvik/annotation/TestTargetClass.html
OpcodeInfo	A										<section class="prog__container"><p> Information about Dalvik opcodes.</p><pre><code>public final class OpcodeInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/dalvik/bytecode/OpcodeInfo.html
Opcodes	A										<section class="prog__container"><p> A list of all normal (not implementation-specific) Dalvik opcodes.</p><pre><code>public interface Opcodes\n</code></pre></section>	https://developer.android.com/reference/dalvik/bytecode/Opcodes.html
dalvik.bytecode	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/dalvik/bytecode/package-summary.html
BaseDexClassLoader	A										<section class="prog__container"><p> Base class for common functionality between various dex-based <pre><code> ClassLoader </code></pre> implementations.</p><pre><code>public class BaseDexClassLoader\n</code></pre></section>	https://developer.android.com/reference/dalvik/system/BaseDexClassLoader.html
DexClassLoader	A										<section class="prog__container"><p> A class loader that loads classes from <pre><code> .jar </code></pre> and <pre><code> .apk </code></pre> files containing a <pre><code> classes.dex </code></pre> entry. This can be used to execute code not installed as part of an application. <p> This class loader requires an application-private, writable directory to cache optimized classes. Use <pre><code> Context.getCodeCacheDir() </code></pre> to create such a directory: <pre> <pre><code>File dexOutputDir = context.getCodeCacheDir(); </code></pre></pre> <p> <strong> Do not cache optimized classes on external storage. </strong> External storage does not provide access controls necessary to protect your application from code injection attacks. </p><pre><code>public class DexClassLoader\n</code></pre></section>	https://developer.android.com/reference/dalvik/system/DexClassLoader.html
DexFile	A										<section class="prog__container"><p> Manipulates DEX files. The class is similar in principle to <pre><code> ZipFile </code></pre> . It is used primarily by class loaders. <p> Note we don't directly open and read the DEX file here. They're memory-mapped read-only by the VM. </p><pre><code>public final class DexFile\nextends Object</code></pre></section>	https://developer.android.com/reference/dalvik/system/DexFile.html
dalvik.system	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/dalvik/system/package-summary.html
PathClassLoader	A										<section class="prog__container"><p> Provides a simple <pre><code> ClassLoader </code></pre> implementation that operates on a list of files and directories in the local file system, but does not attempt to load classes from the network. Android uses this class for its system class loader and for its application class loader(s).</p><pre><code>public class PathClassLoader\n</code></pre></section>	https://developer.android.com/reference/dalvik/system/PathClassLoader.html
NumericShaper	A										<section class="prog__container"><p> The <pre><code> NumericShaper </code></pre> class is used to convert Latin-1 (European) digits to other Unicode decimal digits. Users of this class will primarily be people who wish to present data using national digit shapes, but find it more convenient to represent the data internally using Latin-1 (European) digits. This does not interpret the deprecated numeric shape selector character (U+206E). <p> Instances of <pre><code> NumericShaper </code></pre> are typically applied as attributes to text with the <pre><code> NUMERIC_SHAPING </code></pre> attribute of the <pre><code> TextAttribute </code></pre> class. For example, this code snippet causes a <pre><code> TextLayout </code></pre> to shape European digits to Arabic in an Arabic context: <br> <blockquote> <pre> Map map = new HashMap(); map.put(TextAttribute.NUMERIC_SHAPING, NumericShaper.getContextualShaper(NumericShaper.ARABIC)); FontRenderContext frc = ...; TextLayout layout = new TextLayout(text, map, frc); layout.draw(g2d, x, y); </pre> </blockquote> <br> It is also possible to perform numeric shaping explicitly using instances of <pre><code> NumericShaper </code></pre> , as this code snippet demonstrates: <br> <blockquote> <pre> char[] text = ...; // shape all EUROPEAN digits (except zero) to ARABIC digits NumericShaper shaper = NumericShaper.getShaper(NumericShaper.ARABIC); shaper.shape(text, start, count); // shape European digits to ARABIC digits if preceding text is Arabic, or // shape European digits to TAMIL digits if preceding text is Tamil, or // leave European digits alone if there is no preceding text, or // preceding text is neither Arabic nor Tamil NumericShaper shaper = NumericShaper.getContextualShaper(NumericShaper.ARABIC | NumericShaper.TAMIL, NumericShaper.EUROPEAN); shaper.shape(text, start, count); </pre> </blockquote> <p> <b> Bit mask- and enum-based Unicode ranges </b> </p><pre><code>public final class NumericShaper\nextends Object</code></pre></section>	https://developer.android.com/reference/java/awt/font/NumericShaper.html
NumericShaper.Range	A										<section class="prog__container"><p> A <pre><code> NumericShaper.Range </code></pre> represents a Unicode range of a script having its own decimal digits. For example, the <pre><code> THAI </code></pre> range has the Thai digits, THAI DIGIT ZERO (U+0E50) to THAI DIGIT NINE (U+0E59). <p> The <pre><code> Range </code></pre> enum replaces the traditional bit mask-based values (e.g., <pre><code> ARABIC </code></pre> ), and supports more Unicode ranges than the bit mask-based ones. For example, the following code using the bit mask: <blockquote> <pre> NumericShaper.getContextualShaper(NumericShaper.ARABIC | NumericShaper.TAMIL, NumericShaper.EUROPEAN); </pre> </blockquote> can be written using this enum as: <blockquote> <pre> NumericShaper.getContextualShaper(EnumSet.of( NumericShaper.Range.ARABIC, NumericShaper.Range.TAMIL), NumericShaper.Range.EUROPEAN); </pre> </blockquote> </p><pre><code>public static enum NumericShaper.Range\n</code></pre></section>	https://developer.android.com/reference/java/awt/font/NumericShaper.Range.html
java.awt.font	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/java/awt/font/package-summary.html
TextAttribute	A										<section class="prog__container"><p> The <pre><code> TextAttribute </code></pre> class defines attribute keys and attribute values used for text rendering. <p> <pre><code> TextAttribute </code></pre> instances are used as attribute keys to identify attributes in classes handling text attributes. Other constants defined in this class can be used as attribute values. <p> For each text attribute, the documentation provides: <ul> <li> the type of its value, <li> the relevant predefined constants, if any <li> the default effect if the attribute is absent <li> the valid values if there are limitations <li> a description of the effect. </li> </li> </li> </li> </li> </ul> <p> <h4> Values </h4> <ul> <li> The values of attributes must always be immutable. <li> Where value limitations are given, any value outside of that set is reserved for future use; the value will be treated as the default. <li> The value <pre><code> null </code></pre> is treated the same as the default value and results in the default behavior. <li> If the value is not of the proper type, the attribute will be ignored. <li> The identity of the value does not matter, only the actual value. For example, <pre><code> TextAttribute.WEIGHT_BOLD </code></pre> and <pre><code> new Float(2.0) </code></pre> indicate the same <pre><code> WEIGHT </code></pre> . <li> Attribute values of type <pre><code> Number </code></pre> (used for <pre><code> WEIGHT </code></pre> , <pre><code> WIDTH </code></pre> , <pre><code> POSTURE </code></pre> , <pre><code> SIZE </code></pre> , <pre><code> JUSTIFICATION </code></pre> , and <pre><code> TRACKING </code></pre> ) can vary along their natural range and are not restricted to the predefined constants. <pre><code> Number.floatValue() </code></pre> is used to get the actual value from the <pre><code> Number </code></pre> . <li> The values for <pre><code> WEIGHT </code></pre> , <pre><code> WIDTH </code></pre> , and <pre><code> POSTURE </code></pre> are interpolated by the system, which can select the 'nearest available' font or use other techniques to approximate the user's request. </li> </li> </li> </li> </li> </li> </li> </ul> </p><pre><code>public final class TextAttribute\n</code></pre></section>	https://developer.android.com/reference/java/awt/font/TextAttribute.html
IndexedPropertyChangeEvent	A										<section class="prog__container"><p> An "IndexedPropertyChange" event gets delivered whenever a component that conforms to the JavaBeans™ specification (a "bean") changes a bound indexed property. This class is an extension of <pre><code> PropertyChangeEvent </code></pre> but contains the index of the property that has changed. <p> Null values may be provided for the old and the new values if their true values are not known. <p> An event source may send a null object as the name to indicate that an arbitrary set of if its properties have changed. In this case the old and new values should also be null. </p><pre><code>public class IndexedPropertyChangeEvent\n</code></pre></section>	https://developer.android.com/reference/java/beans/IndexedPropertyChangeEvent.html
java.beans	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/java/beans/package-summary.html
PropertyChangeEvent	A										<section class="prog__container"><p> A "PropertyChange" event gets delivered whenever a bean changes a "bound" or "constrained" property. A PropertyChangeEvent object is sent as an argument to the PropertyChangeListener and VetoableChangeListener methods. <p> Normally PropertyChangeEvents are accompanied by the name and the old and new value of the changed property. If the new value is a primitive type (such as int or boolean) it must be wrapped as the corresponding java.lang.* Object type (such as Integer or Boolean). <p> Null values may be provided for the old and the new values if their true values are not known. <p> An event source may send a null object as the name to indicate that an arbitrary set of if its properties have changed. In this case the old and new values should also be null. </p><pre><code>public class PropertyChangeEvent\n</code></pre></section>	https://developer.android.com/reference/java/beans/PropertyChangeEvent.html
PropertyChangeListener	A										<section class="prog__container"><p> A "PropertyChange" event gets fired whenever a bean changes a "bound" property. You can register a PropertyChangeListener with a source bean so as to be notified of any bound property updates.</p><pre><code>public interface PropertyChangeListener\nimplements EventListener</code></pre></section>	https://developer.android.com/reference/java/beans/PropertyChangeListener.html
PropertyChangeListenerProxy	A										<section class="prog__container"><p> A class which extends the <pre><code> EventListenerProxy </code></pre> specifically for adding a <pre><code> PropertyChangeListener </code></pre> with a "bound" property. Instances of this class can be added as <pre><code> PropertyChangeListener </code></pre> s to a bean which supports firing property change events. <p> If the object has a <pre><code> getPropertyChangeListeners </code></pre> method then the array returned could be a mixture of <pre><code> PropertyChangeListener </code></pre> and <pre><code> PropertyChangeListenerProxy </code></pre> objects. </p><pre><code>public class PropertyChangeListenerProxy\n</code></pre></section>	https://developer.android.com/reference/java/beans/PropertyChangeListenerProxy.html
PropertyChangeSupport	A										<section class="prog__container"><p> This is a utility class that can be used by beans that support bound properties. It manages a list of listeners and dispatches <pre><code> PropertyChangeEvent </code></pre> s to them. You can use an instance of this class as a member field of your bean and delegate these types of work to it. The <pre><code> PropertyChangeListener </code></pre> can be registered for all properties or for a property specified by name. <p> Here is an example of <pre><code> PropertyChangeSupport </code></pre> usage that follows the rules and recommendations laid out in the JavaBeans™ specification: <pre> public class MyBean { private final PropertyChangeSupport pcs = new PropertyChangeSupport(this); public void addPropertyChangeListener(PropertyChangeListener listener) { this.pcs.addPropertyChangeListener(listener); } public void removePropertyChangeListener(PropertyChangeListener listener) { this.pcs.removePropertyChangeListener(listener); } private String value; public String getValue() { return this.value; } public void setValue(String newValue) { String oldValue = this.value; this.value = newValue; this.pcs.firePropertyChange("value", oldValue, newValue); } [...] } </pre> <p> A <pre><code> PropertyChangeSupport </code></pre> instance is thread-safe. <p> This class is serializable. When it is serialized it will save (and restore) any listeners that are themselves serializable. Any non-serializable listeners will be skipped during serialization. </p><pre><code>public class PropertyChangeSupport\nextends Object</code></pre></section>	https://developer.android.com/reference/java/beans/PropertyChangeSupport.html
BufferedInputStream	A										<section class="prog__container"><p> A <pre><code> BufferedInputStream </code></pre> adds functionality to another input stream-namely, the ability to buffer the input and to support the <pre><code> mark </code></pre> and <pre><code> reset </code></pre> methods. When the <pre><code> BufferedInputStream </code></pre> is created, an internal buffer array is created. As bytes from the stream are read or skipped, the internal buffer is refilled as necessary from the contained input stream, many bytes at a time. The <pre><code> mark </code></pre> operation remembers a point in the input stream and the <pre><code> reset </code></pre> operation causes all the bytes read since the most recent <pre><code> mark </code></pre> operation to be reread before new bytes are taken from the contained input stream.</p><pre><code>public class BufferedInputStream\n</code></pre></section>	https://developer.android.com/reference/java/io/BufferedInputStream.html
BufferedOutputStream	A										<section class="prog__container"><p> The class implements a buffered output stream. By setting up such an output stream, an application can write bytes to the underlying output stream without necessarily causing a call to the underlying system for each byte written.</p><pre><code>public class BufferedOutputStream\n</code></pre></section>	https://developer.android.com/reference/java/io/BufferedOutputStream.html
BufferedReader	A										<section class="prog__container"><p> Reads text from a character-input stream, buffering characters so as to provide for the efficient reading of characters, arrays, and lines. <p> The buffer size may be specified, or the default size may be used. The default is large enough for most purposes. <p> In general, each read request made of a Reader causes a corresponding read request to be made of the underlying character or byte stream. It is therefore advisable to wrap a BufferedReader around any Reader whose read() operations may be costly, such as FileReaders and InputStreamReaders. For example, <pre> BufferedReader in = new BufferedReader(new FileReader("foo.in")); </pre> will buffer the input from the specified file. Without buffering, each invocation of read() or readLine() could cause bytes to be read from the file, converted into characters, and then returned, which can be very inefficient. <p> Programs that use DataInputStreams for textual input can be localized by replacing each DataInputStream with an appropriate BufferedReader. </p><pre><code>public class BufferedReader\n</code></pre></section>	https://developer.android.com/reference/java/io/BufferedReader.html
BufferedWriter	A										<section class="prog__container"><p> Writes text to a character-output stream, buffering characters so as to provide for the efficient writing of single characters, arrays, and strings. <p> The buffer size may be specified, or the default size may be accepted. The default is large enough for most purposes. <p> A newLine() method is provided, which uses the platform's own notion of line separator as defined by the system property <tt> line.separator </tt> . Not all platforms use the newline character ('\n') to terminate lines. Calling this method to terminate each output line is therefore preferred to writing a newline character directly. <p> In general, a Writer sends its output immediately to the underlying character or byte stream. Unless prompt output is required, it is advisable to wrap a BufferedWriter around any Writer whose write() operations may be costly, such as FileWriters and OutputStreamWriters. For example, <pre> PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("foo.out"))); </pre> will buffer the PrintWriter's output to the file. Without buffering, each invocation of a print() method would cause characters to be converted into bytes that would then be written immediately to the file, which can be very inefficient. </p><pre><code>public class BufferedWriter\n</code></pre></section>	https://developer.android.com/reference/java/io/BufferedWriter.html
ByteArrayInputStream	A										<section class="prog__container"><p> A <pre><code> ByteArrayInputStream </code></pre> contains an internal buffer that contains bytes that may be read from the stream. An internal counter keeps track of the next byte to be supplied by the <pre><code> read </code></pre> method. <p> Closing a <tt> ByteArrayInputStream </tt> has no effect. The methods in this class can be called after the stream has been closed without generating an <tt> IOException </tt> . </p><pre><code>public class ByteArrayInputStream\n</code></pre></section>	https://developer.android.com/reference/java/io/ByteArrayInputStream.html
ByteArrayOutputStream	A										<section class="prog__container"><p> This class implements an output stream in which the data is written into a byte array. The buffer automatically grows as data is written to it. The data can be retrieved using <pre><code> toByteArray() </code></pre> and <pre><code> toString() </code></pre> . <p> Closing a <tt> ByteArrayOutputStream </tt> has no effect. The methods in this class can be called after the stream has been closed without generating an <tt> IOException </tt> . </p><pre><code>public class ByteArrayOutputStream\n</code></pre></section>	https://developer.android.com/reference/java/io/ByteArrayOutputStream.html
CharArrayReader	A										<section class="prog__container"><p> This class implements a character buffer that can be used as a character-input stream.</p><pre><code>public class CharArrayReader\n</code></pre></section>	https://developer.android.com/reference/java/io/CharArrayReader.html
CharArrayWriter	A										<section class="prog__container"><p> This class implements a character buffer that can be used as an Writer. The buffer automatically grows when data is written to the stream. The data can be retrieved using toCharArray() and toString(). <p> Note: Invoking close() on this class has no effect, and methods of this class can be called after the stream has closed without generating an IOException. </p><pre><code>public class CharArrayWriter\n</code></pre></section>	https://developer.android.com/reference/java/io/CharArrayWriter.html
CharConversionException	A										<section class="prog__container"><p> Base class for character conversion exceptions.</p><pre><code>public class CharConversionException\n</code></pre></section>	https://developer.android.com/reference/java/io/CharConversionException.html
Closeable	A										<section class="prog__container"><p> A <pre><code> Closeable </code></pre> is a source or destination of data that can be closed. The close method is invoked to release resources that the object is holding (such as open files).</p><pre><code>public interface Closeable\nimplements AutoCloseable</code></pre></section>	https://developer.android.com/reference/java/io/Closeable.html
Console	A										<section class="prog__container"><p> Methods to access the character-based console device, if any, associated with the current Java virtual machine. <p> Whether a virtual machine has a console is dependent upon the underlying platform and also upon the manner in which the virtual machine is invoked. If the virtual machine is started from an interactive command line without redirecting the standard input and output streams then its console will exist and will typically be connected to the keyboard and display from which the virtual machine was launched. If the virtual machine is started automatically, for example by a background job scheduler, then it will typically not have a console. <p> If this virtual machine has a console then it is represented by a unique instance of this class which can be obtained by invoking the <pre><code> console() </code></pre> method. If no console device is available then an invocation of that method will return <tt> null </tt> . <p> Read and write operations are synchronized to guarantee the atomic completion of critical operations; therefore invoking methods <pre><code> readLine() </code></pre> , <pre><code> readPassword() </code></pre> , <pre><code> format() </code></pre> , <pre><code> printf() </code></pre> as well as the read, format and write operations on the objects returned by <pre><code> reader() </code></pre> and <pre><code> writer() </code></pre> may block in multithreaded scenarios. <p> Invoking <tt> close() </tt> on the objects returned by the <pre><code> reader() </code></pre> and the <pre><code> writer() </code></pre> will not close the underlying stream of those objects. <p> The console-read methods return <tt> null </tt> when the end of the console input stream is reached, for example by typing control-D on Unix or control-Z on Windows. Subsequent read operations will succeed if additional characters are later entered on the console's input device. <p> Unless otherwise specified, passing a <tt> null </tt> argument to any method in this class will cause a <pre><code> NullPointerException </code></pre> to be thrown. <p> <b> Security note: </b> If an application needs to read a password or other secure data, it should use <pre><code> readPassword() </code></pre> or <pre><code> readPassword(String, Object) </code></pre> and manually zero the returned character array after processing to minimize the lifetime of sensitive data in memory. <blockquote> <pre> Console cons; char[] passwd; if ((cons = System.console()) != null &amp;&amp; (passwd = cons.readPassword("[%s]", "Password:")) != null) { ... java.util.Arrays.fill(passwd, ' '); } </pre> </blockquote> </p><pre><code>public final class Console\nextends Object</code></pre></section>	https://developer.android.com/reference/java/io/Console.html
DataInput	A										<section class="prog__container"><p> The <pre><code> DataInput </code></pre> interface provides for reading bytes from a binary stream and reconstructing from them data in any of the Java primitive types. There is also a facility for reconstructing a <pre><code> String </code></pre> from data in modified UTF-8 format. <p> It is generally true of all the reading routines in this interface that if end of file is reached before the desired number of bytes has been read, an <pre><code> EOFException </code></pre> (which is a kind of <pre><code> IOException </code></pre> ) is thrown. If any byte cannot be read for any reason other than end of file, an <pre><code> IOException </code></pre> other than <pre><code> EOFException </code></pre> is thrown. In particular, an <pre><code> IOException </code></pre> may be thrown if the input stream has been closed. <h4> Modified UTF-8 </h4> <p> Implementations of the DataInput and DataOutput interfaces represent Unicode strings in a format that is a slight modification of UTF-8. (For information regarding the standard UTF-8 format, see section <i> 3.9 Unicode Encoding Forms </i> of <i> The Unicode Standard, Version 4.0 </i> ). Note that in the following tables, the most significant bit appears in the far left-hand column. <p> All characters in the range <pre><code> '\u0001' </code></pre> to <pre><code> '\u007F' </code></pre> are represented by a single byte: <blockquote> <table border="1" cellpadding="8" cellspacing="0" summary="Bit values and bytes" width="50%"> <tr> <td> </td> <th id="bit"> Bit Values </th> </tr> <tr> <th id="byte1"> Byte 1 </th> <td> <table border="1" cellspacing="0" width="100%"> <tr> <td width="12%"> <center> 0 </center> <td colspan="7"> <center> bits 6-0 </center> </td> </td> </tr> </table> </td> </tr> </table> </blockquote> <p> The null character <pre><code> '\u0000' </code></pre> and characters in the range <pre><code> '\u0080' </code></pre> to <pre><code> '\u07FF' </code></pre> are represented by a pair of bytes: <blockquote> <table border="1" cellpadding="8" cellspacing="0" summary="Bit values and bytes" width="50%"> <tr> <td> </td> <th id="bit"> Bit Values </th> </tr> <tr> <th id="byte1"> Byte 1 </th> <td> <table border="1" cellspacing="0" width="100%"> <tr> <td width="12%"> <center> 1 </center> <td width="13%"> <center> 1 </center> <td width="12%"> <center> 0 </center> <td colspan="5"> <center> bits 10-6 </center> </td> </td> </td> </td> </tr> </table> </td> </tr> <tr> <th id="byte2"> Byte 2 </th> <td> <table border="1" cellspacing="0" width="100%"> <tr> <td width="12%"> <center> 1 </center> <td width="13%"> <center> 0 </center> <td colspan="6"> <center> bits 5-0 </center> </td> </td> </td> </tr> </table> </td> </tr> </table> </blockquote> <br> <pre><code> char </code></pre> values in the range <pre><code> '\u0800' </code></pre> to <pre><code> '\uFFFF' </code></pre> are represented by three bytes: <blockquote> <table border="1" cellpadding="8" cellspacing="0" summary="Bit values and bytes" width="50%"> <tr> <td> </td> <th id="bit"> Bit Values </th> </tr> <tr> <th id="byte1"> Byte 1 </th> <td> <table border="1" cellspacing="0" width="100%"> <tr> <td width="12%"> <center> 1 </center> <td width="13%"> <center> 1 </center> <td width="12%"> <center> 1 </center> <td width="13%"> <center> 0 </center> <td colspan="4"> <center> bits 15-12 </center> </td> </td> </td> </td> </td> </tr> </table> </td> </tr> <tr> <th id="byte2"> Byte 2 </th> <td> <table border="1" cellspacing="0" width="100%"> <tr> <td width="12%"> <center> 1 </center> <td width="13%"> <center> 0 </center> <td colspan="6"> <center> bits 11-6 </center> </td> </td> </td> </tr> </table> </td> </tr> <tr> <th id="byte3"> Byte 3 </th> <td> <table border="1" cellspacing="0" width="100%"> <tr> <td width="12%"> <center> 1 </center> <td width="13%"> <center> 0 </center> <td colspan="6"> <center> bits 5-0 </center> </td> </td> </td> </tr> </table> </td> </tr> </table> </blockquote> <p> The differences between this format and the standard UTF-8 format are the following: <ul> <li> The null byte <pre><code> '\u0000' </code></pre> is encoded in 2-byte format rather than 1-byte, so that the encoded strings never have embedded nulls. <li> Only the 1-byte, 2-byte, and 3-byte formats are used. <li> Supplementary characters are represented in the form of surrogate pairs. </li> </li> </li> </ul> </p><pre><code>public interface DataInput\n</code></pre></section>	https://developer.android.com/reference/java/io/DataInput.html
DataInputStream	A										<section class="prog__container"><p> A data input stream lets an application read primitive Java data types from an underlying input stream in a machine-independent way. An application uses a data output stream to write data that can later be read by a data input stream. <p> DataInputStream is not necessarily safe for multithreaded access. Thread safety is optional and is the responsibility of users of methods in this class. </p><pre><code>public class DataInputStream\n</code></pre></section>	https://developer.android.com/reference/java/io/DataInputStream.html
DataOutput	A										<section class="prog__container"><p> The <pre><code> DataOutput </code></pre> interface provides for converting data from any of the Java primitive types to a series of bytes and writing these bytes to a binary stream. There is also a facility for converting a <pre><code> String </code></pre> into modified UTF-8 format and writing the resulting series of bytes. <p> For all the methods in this interface that write bytes, it is generally true that if a byte cannot be written for any reason, an <pre><code> IOException </code></pre> is thrown. </p><pre><code>public interface DataOutput\n</code></pre></section>	https://developer.android.com/reference/java/io/DataOutput.html
DataOutputStream	A										<section class="prog__container"><p> A data output stream lets an application write primitive Java data types to an output stream in a portable way. An application can then use a data input stream to read the data back in.</p><pre><code>public class DataOutputStream\n</code></pre></section>	https://developer.android.com/reference/java/io/DataOutputStream.html
EOFException	A										<section class="prog__container"><pre><code>public class EOFException\n</code></pre></section>	https://developer.android.com/reference/java/io/EOFException.html
Externalizable	A										<section class="prog__container"><p> Only the identity of the class of an Externalizable instance is written in the serialization stream and it is the responsibility of the class to save and restore the contents of its instances. The writeExternal and readExternal methods of the Externalizable interface are implemented by a class to give the class complete control over the format and contents of the stream for an object and its supertypes. These methods must explicitly coordinate with the supertype to save its state. These methods supersede customized implementations of writeObject and readObject methods. <br> Object Serialization uses the Serializable and Externalizable interfaces. Object persistence mechanisms can use them as well. Each object to be stored is tested for the Externalizable interface. If the object supports Externalizable, the writeExternal method is called. If the object does not support Externalizable and does implement Serializable, the object is saved using ObjectOutputStream. <br> When an Externalizable object is reconstructed, an instance is created using the public no-arg constructor, then the readExternal method called. Serializable objects are restored by reading them from an ObjectInputStream. <br> An Externalizable instance can designate a substitution object via the writeReplace and readResolve methods documented in the Serializable interface. <br/> </br> </br> </br></p><pre><code>public interface Externalizable\nimplements Serializable</code></pre></section>	https://developer.android.com/reference/java/io/Externalizable.html
File	A										<section class="prog__container"><p> An abstract representation of file and directory pathnames. <p> User interfaces and operating systems use system-dependent <em> pathname strings </em> to name files and directories. This class presents an abstract, system-independent view of hierarchical pathnames. An <em> abstract pathname </em> has two components: <ol> <li> An optional system-dependent <em> prefix </em> string, such as a disk-drive specifier, <pre><code> "/" </code></pre> for the UNIX root directory, or <pre><code> "\\\\" </code></pre> for a Microsoft Windows UNC pathname, and <li> A sequence of zero or more string <em> names </em> . </li> </li> </ol> The first name in an abstract pathname may be a directory name or, in the case of Microsoft Windows UNC pathnames, a hostname. Each subsequent name in an abstract pathname denotes a directory; the last name may denote either a directory or a file. The <em> empty </em> abstract pathname has no prefix and an empty name sequence. <p> The conversion of a pathname string to or from an abstract pathname is inherently system-dependent. When an abstract pathname is converted into a pathname string, each name is separated from the next by a single copy of the default <em> separator character </em> . The default name-separator character is defined by the system property <pre><code> file.separator </code></pre> , and is made available in the public static fields <pre><code> <pre><code> separator </code></pre> </code></pre> and <pre><code> <pre><code> separatorChar </code></pre> </code></pre> of this class. When a pathname string is converted into an abstract pathname, the names within it may be separated by the default name-separator character or by any other name-separator character that is supported by the underlying system. <p> A pathname, whether abstract or in string form, may be either <em> absolute </em> or <em> relative </em> . An absolute pathname is complete in that no other information is required in order to locate the file that it denotes. A relative pathname, in contrast, must be interpreted in terms of information taken from some other pathname. By default the classes in the <pre><code> java.io </code></pre> package always resolve relative pathnames against the current user directory. This directory is named by the system property <pre><code> user.dir </code></pre> , and is typically the directory in which the Java virtual machine was invoked. <p> The <em> parent </em> of an abstract pathname may be obtained by invoking the <pre><code> getParent() </code></pre> method of this class and consists of the pathname's prefix and each name in the pathname's name sequence except for the last. Each directory's absolute pathname is an ancestor of any <tt> File </tt> object with an absolute abstract pathname which begins with the directory's absolute pathname. For example, the directory denoted by the abstract pathname <tt> "/usr" </tt> is an ancestor of the directory denoted by the pathname <tt> "/usr/local/bin" </tt> . <p> The prefix concept is used to handle root directories on UNIX platforms, and drive specifiers, root directories and UNC pathnames on Microsoft Windows platforms, as follows: <ul> <li> For UNIX platforms, the prefix of an absolute pathname is always <pre><code> "/" </code></pre> . Relative pathnames have no prefix. The abstract pathname denoting the root directory has the prefix <pre><code> "/" </code></pre> and an empty name sequence. <li> For Microsoft Windows platforms, the prefix of a pathname that contains a drive specifier consists of the drive letter followed by <pre><code> ":" </code></pre> and possibly followed by <pre><code> "\\" </code></pre> if the pathname is absolute. The prefix of a UNC pathname is <pre><code> "\\\\" </code></pre> ; the hostname and the share name are the first two names in the name sequence. A relative pathname that does not specify a drive has no prefix. </li> </li> </ul> <p> Instances of this class may or may not denote an actual file-system object such as a file or a directory. If it does denote such an object then that object resides in a <i> partition </i> . A partition is an operating system-specific portion of storage for a file system. A single storage device (e.g. a physical disk-drive, flash memory, CD-ROM) may contain multiple partitions. The object, if any, will reside on the partition named by some ancestor of the absolute form of this pathname. <p> A file system may implement restrictions to certain operations on the actual file-system object, such as reading, writing, and executing. These restrictions are collectively known as <i> access permissions </i> . The file system may have multiple sets of access permissions on a single object. For example, one set may apply to the object's <i> owner </i> , and another may apply to all other users. The access permissions on an object may cause some methods in this class to fail. <p> Instances of the <pre><code> File </code></pre> class are immutable; that is, once created, the abstract pathname represented by a <pre><code> File </code></pre> object will never change. <p> On Android, the underlying filesystem encoding for filenames is always UTF-8. </p><pre><code>public class File\nextends Object</code></pre></section>	https://developer.android.com/reference/java/io/File.html
FileDescriptor	A										<section class="prog__container"><p> Instances of the file descriptor class serve as an opaque handle to the underlying machine-specific structure representing an open file, an open socket, or another source or sink of bytes. The main practical use for a file descriptor is to create a <pre><code> FileInputStream </code></pre> or <pre><code> FileOutputStream </code></pre> to contain it. <p> Applications should not create their own file descriptors. </p><pre><code>public final class FileDescriptor\nextends Object</code></pre></section>	https://developer.android.com/reference/java/io/FileDescriptor.html
FileFilter	A										<section class="prog__container"><p> A filter for abstract pathnames. <p> Instances of this interface may be passed to the <pre><code> <pre><code> listFiles(FileFilter) </code></pre> </code></pre> method of the <pre><code> <pre><code> File </code></pre> </code></pre> class. </p><pre><code>public interface FileFilter\n</code></pre></section>	https://developer.android.com/reference/java/io/FileFilter.html
FileInputStream	A										<section class="prog__container"><p> A <pre><code> FileInputStream </code></pre> obtains input bytes from a file in a file system. What files are available depends on the host environment. <p> <pre><code> FileInputStream </code></pre> is meant for reading streams of raw bytes such as image data. For reading streams of characters, consider using <pre><code> FileReader </code></pre> . </p><pre><code>public class FileInputStream\n</code></pre></section>	https://developer.android.com/reference/java/io/FileInputStream.html
FilenameFilter	A										<section class="prog__container"><p> Instances of classes that implement this interface are used to filter filenames. These instances are used to filter directory listings in the <pre><code> list </code></pre> method of class <pre><code> File </code></pre> , and by the Abstract Window Toolkit's file dialog component.</p><pre><code>public interface FilenameFilter\n</code></pre></section>	https://developer.android.com/reference/java/io/FilenameFilter.html
FileNotFoundException	A										<section class="prog__container"><p> Signals that an attempt to open the file denoted by a specified pathname has failed. <p> This exception will be thrown by the <pre><code> FileInputStream </code></pre> , <pre><code> FileOutputStream </code></pre> , and <pre><code> RandomAccessFile </code></pre> constructors when a file with the specified pathname does not exist. It will also be thrown by these constructors if the file does exist but for some reason is inaccessible, for example when an attempt is made to open a read-only file for writing. </p><pre><code>public class FileNotFoundException\n</code></pre></section>	https://developer.android.com/reference/java/io/FileNotFoundException.html
FileOutputStream	A										<section class="prog__container"><p> A file output stream is an output stream for writing data to a <pre><code> File </code></pre> or to a <pre><code> FileDescriptor </code></pre> . Whether or not a file is available or may be created depends upon the underlying platform. Some platforms, in particular, allow a file to be opened for writing by only one <tt> FileOutputStream </tt> (or other file-writing object) at a time. In such situations the constructors in this class will fail if the file involved is already open. <p> <pre><code> FileOutputStream </code></pre> is meant for writing streams of raw bytes such as image data. For writing streams of characters, consider using <pre><code> FileWriter </code></pre> . </p><pre><code>public class FileOutputStream\n</code></pre></section>	https://developer.android.com/reference/java/io/FileOutputStream.html
FilePermission	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public final class FilePermission\n</code></pre></section>	https://developer.android.com/reference/java/io/FilePermission.html
FileReader	A										<section class="prog__container"><p> Convenience class for reading character files. The constructors of this class assume that the default character encoding and the default byte-buffer size are appropriate. To specify these values yourself, construct an InputStreamReader on a FileInputStream. <p> <pre><code> FileReader </code></pre> is meant for reading streams of characters. For reading streams of raw bytes, consider using a <pre><code> FileInputStream </code></pre> . </p><pre><code>public class FileReader\n</code></pre></section>	https://developer.android.com/reference/java/io/FileReader.html
FileWriter	A										<section class="prog__container"><p> Convenience class for writing character files. The constructors of this class assume that the default character encoding and the default byte-buffer size are acceptable. To specify these values yourself, construct an OutputStreamWriter on a FileOutputStream. <p> Whether or not a file is available or may be created depends upon the underlying platform. Some platforms, in particular, allow a file to be opened for writing by only one <tt> FileWriter </tt> (or other file-writing object) at a time. In such situations the constructors in this class will fail if the file involved is already open. <p> <pre><code> FileWriter </code></pre> is meant for writing streams of characters. For writing streams of raw bytes, consider using a <pre><code> FileOutputStream </code></pre> . </p><pre><code>public class FileWriter\n</code></pre></section>	https://developer.android.com/reference/java/io/FileWriter.html
FilterInputStream	A										<section class="prog__container"><p> A <pre><code> FilterInputStream </code></pre> contains some other input stream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality. The class <pre><code> FilterInputStream </code></pre> itself simply overrides all methods of <pre><code> InputStream </code></pre> with versions that pass all requests to the contained input stream. Subclasses of <pre><code> FilterInputStream </code></pre> may further override some of these methods and may also provide additional methods and fields.</p><pre><code>public class FilterInputStream\n</code></pre></section>	https://developer.android.com/reference/java/io/FilterInputStream.html
FilterOutputStream	A										<section class="prog__container"><p> This class is the superclass of all classes that filter output streams. These streams sit on top of an already existing output stream (the <i> underlying </i> output stream) which it uses as its basic sink of data, but possibly transforming the data along the way or providing additional functionality. <p> The class <pre><code> FilterOutputStream </code></pre> itself simply overrides all methods of <pre><code> OutputStream </code></pre> with versions that pass all requests to the underlying output stream. Subclasses of <pre><code> FilterOutputStream </code></pre> may further override some of these methods as well as provide additional methods and fields. </p><pre><code>public class FilterOutputStream\n</code></pre></section>	https://developer.android.com/reference/java/io/FilterOutputStream.html
FilterReader	A										<section class="prog__container"><p> Abstract class for reading filtered character streams. The abstract class <pre><code> FilterReader </code></pre> itself provides default methods that pass all requests to the contained stream. Subclasses of <pre><code> FilterReader </code></pre> should override some of these methods and may also provide additional methods and fields.</p><pre><code>public abstract class FilterReader\n</code></pre></section>	https://developer.android.com/reference/java/io/FilterReader.html
FilterWriter	A										<section class="prog__container"><p> Abstract class for writing filtered character streams. The abstract class <pre><code> FilterWriter </code></pre> itself provides default methods that pass all requests to the contained stream. Subclasses of <pre><code> FilterWriter </code></pre> should override some of these methods and may also provide additional methods and fields.</p><pre><code>public abstract class FilterWriter\n</code></pre></section>	https://developer.android.com/reference/java/io/FilterWriter.html
Flushable	A										<section class="prog__container"><p> A <tt> Flushable </tt> is a destination of data that can be flushed. The flush method is invoked to write any buffered output to the underlying stream.</p><pre><code>public interface Flushable\n</code></pre></section>	https://developer.android.com/reference/java/io/Flushable.html
InputStream	A										<section class="prog__container"><p> This abstract class is the superclass of all classes representing an input stream of bytes. <p> Applications that need to define a subclass of <pre><code> InputStream </code></pre> must always provide a method that returns the next byte of input. </p><pre><code>public abstract class InputStream\nextends Object</code></pre></section>	https://developer.android.com/reference/java/io/InputStream.html
InputStreamReader	A										<section class="prog__container"><p> An InputStreamReader is a bridge from byte streams to character streams: It reads bytes and decodes them into characters using a specified <pre><code> <pre><code> charset </code></pre> </code></pre> . The charset that it uses may be specified by name or may be given explicitly, or the platform's default charset may be accepted. <p> Each invocation of one of an InputStreamReader's read() methods may cause one or more bytes to be read from the underlying byte-input stream. To enable the efficient conversion of bytes to characters, more bytes may be read ahead from the underlying stream than are necessary to satisfy the current read operation. <p> For top efficiency, consider wrapping an InputStreamReader within a BufferedReader. For example: <pre> BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); </pre> </p><pre><code>public class InputStreamReader\n</code></pre></section>	https://developer.android.com/reference/java/io/InputStreamReader.html
InterruptedIOException	A										<section class="prog__container"><p> Signals that an I/O operation has been interrupted. An <pre><code> InterruptedIOException </code></pre> is thrown to indicate that an input or output transfer has been terminated because the thread performing it was interrupted. The field <pre><code> bytesTransferred </code></pre> indicates how many bytes were successfully transferred before the interruption occurred.</p><pre><code>public class InterruptedIOException\n</code></pre></section>	https://developer.android.com/reference/java/io/InterruptedIOException.html
InvalidClassException	A										<section class="prog__container"><p> Thrown when the Serialization runtime detects one of the following problems with a Class. <ul> <li> The serial version of the class does not match that of the class descriptor read from the stream <li> The class contains unknown datatypes <li> The class does not have an accessible no-arg constructor </li> </li> </li> </ul></p><pre><code>public class InvalidClassException\n</code></pre></section>	https://developer.android.com/reference/java/io/InvalidClassException.html
InvalidObjectException	A										<section class="prog__container"><p> Indicates that one or more deserialized objects failed validation tests. The argument should provide the reason for the failure.</p><pre><code>public class InvalidObjectException\n</code></pre></section>	https://developer.android.com/reference/java/io/InvalidObjectException.html
IOError	A										<section class="prog__container"><p> Thrown when a serious I/O error has occurred.</p><pre><code>public class IOError\n</code></pre></section>	https://developer.android.com/reference/java/io/IOError.html
IOException	A										<section class="prog__container"><p> Signals that an I/O exception of some sort has occurred. This class is the general class of exceptions produced by failed or interrupted I/O operations.</p><pre><code>public class IOException\n</code></pre></section>	https://developer.android.com/reference/java/io/IOException.html
LineNumberInputStream	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 1. </strong> <br/> This class incorrectly assumes that bytes adequately represent characters. As of JDK 1.1, the preferred way to operate on character streams is via the new character-stream classes, which include a class for counting line numbers. </p><pre><code>public class LineNumberInputStream\n</code></pre></section>	https://developer.android.com/reference/java/io/LineNumberInputStream.html
LineNumberReader	A										<section class="prog__container"><p> A buffered character-input stream that keeps track of line numbers. This class defines methods <pre><code> setLineNumber(int) </code></pre> and <pre><code> getLineNumber() </code></pre> for setting and getting the current line number respectively. <p> By default, line numbering begins at 0. This number increments at every line terminator as the data is read, and can be changed with a call to <tt> setLineNumber(int) </tt> . Note however, that <tt> setLineNumber(int) </tt> does not actually change the current position in the stream; it only changes the value that will be returned by <tt> getLineNumber() </tt> . <p> A line is considered to be terminated by any one of a line feed ('\n'), a carriage return ('\r'), or a carriage return followed immediately by a linefeed. </p><pre><code>public class LineNumberReader\n</code></pre></section>	https://developer.android.com/reference/java/io/LineNumberReader.html
NotActiveException	A										<section class="prog__container"><p> Thrown when serialization or deserialization is not active.</p><pre><code>public class NotActiveException\n</code></pre></section>	https://developer.android.com/reference/java/io/NotActiveException.html
NotSerializableException	A										<section class="prog__container"><p> Thrown when an instance is required to have a Serializable interface. The serialization runtime or the class of the instance can throw this exception. The argument should be the name of the class.</p><pre><code>public class NotSerializableException\n</code></pre></section>	https://developer.android.com/reference/java/io/NotSerializableException.html
ObjectInput	A										<section class="prog__container"><p> ObjectInput extends the DataInput interface to include the reading of objects. DataInput includes methods for the input of primitive types, ObjectInput extends that interface to include objects, arrays, and Strings.</p><pre><code>public interface ObjectInput\nimplements DataInput, AutoCloseable</code></pre></section>	https://developer.android.com/reference/java/io/ObjectInput.html
ObjectInputStream.GetField	A										<section class="prog__container"><p> Provide access to the persistent fields read from the input stream.</p><pre><code>public static abstract class ObjectInputStream.GetField\nextends Object</code></pre></section>	https://developer.android.com/reference/java/io/ObjectInputStream.GetField.html
ObjectInputStream	A										<section class="prog__container"><p> An ObjectInputStream deserializes primitive data and objects previously written using an ObjectOutputStream. <p> ObjectOutputStream and ObjectInputStream can provide an application with persistent storage for graphs of objects when used with a FileOutputStream and FileInputStream respectively. ObjectInputStream is used to recover those objects previously serialized. Other uses include passing objects between hosts using a socket stream or for marshaling and unmarshaling arguments and parameters in a remote communication system. <p> ObjectInputStream ensures that the types of all objects in the graph created from the stream match the classes present in the Java Virtual Machine. Classes are loaded as required using the standard mechanisms. <p> Only objects that support the java.io.Serializable or java.io.Externalizable interface can be read from streams. <p> The method <pre><code> readObject </code></pre> is used to read an object from the stream. Java's safe casting should be used to get the desired type. In Java, strings and arrays are objects and are treated as objects during serialization. When read they need to be cast to the expected type. <p> Primitive data types can be read from the stream using the appropriate method on DataInput. <p> The default deserialization mechanism for objects restores the contents of each field to the value and type it had when it was written. Fields declared as transient or static are ignored by the deserialization process. References to other objects cause those objects to be read from the stream as necessary. Graphs of objects are restored correctly using a reference sharing mechanism. New objects are always allocated when deserializing, which prevents existing objects from being overwritten. <p> Reading an object is analogous to running the constructors of a new object. Memory is allocated for the object and initialized to zero (NULL). No-arg constructors are invoked for the non-serializable classes and then the fields of the serializable classes are restored from the stream starting with the serializable class closest to java.lang.object and finishing with the object's most specific class. <p> For example to read from a stream as written by the example in ObjectOutputStream: <br> <pre> FileInputStream fis = new FileInputStream("t.tmp"); ObjectInputStream ois = new ObjectInputStream(fis); int i = ois.readInt(); String today = (String) ois.readObject(); Date date = (Date) ois.readObject(); ois.close(); </pre> <p> Classes control how they are serialized by implementing either the java.io.Serializable or java.io.Externalizable interfaces. <p> Implementing the Serializable interface allows object serialization to save and restore the entire state of the object and it allows classes to evolve between the time the stream is written and the time it is read. It automatically traverses references between objects, saving and restoring entire graphs. <p> Serializable classes that require special handling during the serialization and deserialization process should implement the following methods: <p> <pre> private void writeObject(java.io.ObjectOutputStream stream) throws IOException; private void readObject(java.io.ObjectInputStream stream) throws IOException, ClassNotFoundException; private void readObjectNoData() throws ObjectStreamException; </pre> <p> The readObject method is responsible for reading and restoring the state of the object for its particular class using data written to the stream by the corresponding writeObject method. The method does not need to concern itself with the state belonging to its superclasses or subclasses. State is restored by reading data from the ObjectInputStream for the individual fields and making assignments to the appropriate fields of the object. Reading primitive data types is supported by DataInput. <p> Any attempt to read object data which exceeds the boundaries of the custom data written by the corresponding writeObject method will cause an OptionalDataException to be thrown with an eof field value of true. Non-object reads which exceed the end of the allotted data will reflect the end of data in the same way that they would indicate the end of the stream: bytewise reads will return -1 as the byte read or number of bytes read, and primitive reads will throw EOFExceptions. If there is no corresponding writeObject method, then the end of default serialized data marks the end of the allotted data. <p> Primitive and object read calls issued from within a readExternal method behave in the same manner--if the stream is already positioned at the end of data written by the corresponding writeExternal method, object reads will throw OptionalDataExceptions with eof set to true, bytewise reads will return -1, and primitive reads will throw EOFExceptions. Note that this behavior does not hold for streams written with the old <pre><code> ObjectStreamConstants.PROTOCOL_VERSION_1 </code></pre> protocol, in which the end of data written by writeExternal methods is not demarcated, and hence cannot be detected. <p> The readObjectNoData method is responsible for initializing the state of the object for its particular class in the event that the serialization stream does not list the given class as a superclass of the object being deserialized. This may occur in cases where the receiving party uses a different version of the deserialized instance's class than the sending party, and the receiver's version extends classes that are not extended by the sender's version. This may also occur if the serialization stream has been tampered; hence, readObjectNoData is useful for initializing deserialized objects properly despite a "hostile" or incomplete source stream. <p> Serialization does not read or assign values to the fields of any object that does not implement the java.io.Serializable interface. Subclasses of Objects that are not serializable can be serializable. In this case the non-serializable class must have a no-arg constructor to allow its fields to be initialized. In this case it is the responsibility of the subclass to save and restore the state of the non-serializable class. It is frequently the case that the fields of that class are accessible (public, package, or protected) or that there are get and set methods that can be used to restore the state. <p> Any exception that occurs while deserializing an object will be caught by the ObjectInputStream and abort the reading process. <p> Implementing the Externalizable interface allows the object to assume complete control over the contents and format of the object's serialized form. The methods of the Externalizable interface, writeExternal and readExternal, are called to save and restore the objects state. When implemented by a class they can write and read their own state using all of the methods of ObjectOutput and ObjectInput. It is the responsibility of the objects to handle any versioning that occurs. <p> Enum constants are deserialized differently than ordinary serializable or externalizable objects. The serialized form of an enum constant consists solely of its name; field values of the constant are not transmitted. To deserialize an enum constant, ObjectInputStream reads the constant name from the stream; the deserialized constant is then obtained by calling the static method <pre><code> Enum.valueOf(Class, String) </code></pre> with the enum constant's base type and the received constant name as arguments. Like other serializable or externalizable objects, enum constants can function as the targets of back references appearing subsequently in the serialization stream. The process by which enum constants are deserialized cannot be customized: any class-specific readObject, readObjectNoData, and readResolve methods defined by enum types are ignored during deserialization. Similarly, any serialPersistentFields or serialVersionUID field declarations are also ignored--all enum types have a fixed serialVersionUID of 0L. </p><pre><code>public class ObjectInputStream\n</code></pre></section>	https://developer.android.com/reference/java/io/ObjectInputStream.html
ObjectInputValidation	A										<section class="prog__container"><p> Callback interface to allow validation of objects within a graph. Allows an object to be called when a complete graph of objects has been deserialized.</p><pre><code>public interface ObjectInputValidation\n</code></pre></section>	https://developer.android.com/reference/java/io/ObjectInputValidation.html
ObjectOutput	A										<section class="prog__container"><p> ObjectOutput extends the DataOutput interface to include writing of objects. DataOutput includes methods for output of primitive types, ObjectOutput extends that interface to include objects, arrays, and Strings.</p><pre><code>public interface ObjectOutput\nimplements DataOutput, AutoCloseable</code></pre></section>	https://developer.android.com/reference/java/io/ObjectOutput.html
ObjectOutputStream	A										<section class="prog__container"><p> An ObjectOutputStream writes primitive data types and graphs of Java objects to an OutputStream. The objects can be read (reconstituted) using an ObjectInputStream. Persistent storage of objects can be accomplished by using a file for the stream. If the stream is a network socket stream, the objects can be reconstituted on another host or in another process. <p> Only objects that support the java.io.Serializable interface can be written to streams. The class of each serializable object is encoded including the class name and signature of the class, the values of the object's fields and arrays, and the closure of any other objects referenced from the initial objects. <p> The method writeObject is used to write an object to the stream. Any object, including Strings and arrays, is written with writeObject. Multiple objects or primitives can be written to the stream. The objects must be read back from the corresponding ObjectInputstream with the same types and in the same order as they were written. <p> Primitive data types can also be written to the stream using the appropriate methods from DataOutput. Strings can also be written using the writeUTF method. <p> The default serialization mechanism for an object writes the class of the object, the class signature, and the values of all non-transient and non-static fields. References to other objects (except in transient or static fields) cause those objects to be written also. Multiple references to a single object are encoded using a reference sharing mechanism so that graphs of objects can be restored to the same shape as when the original was written. <p> For example to write an object that can be read by the example in ObjectInputStream: <br> <pre> FileOutputStream fos = new FileOutputStream("t.tmp"); ObjectOutputStream oos = new ObjectOutputStream(fos); oos.writeInt(12345); oos.writeObject("Today"); oos.writeObject(new Date()); oos.close(); </pre> <p> Classes that require special handling during the serialization and deserialization process must implement special methods with these exact signatures: <br> <pre> private void readObject(java.io.ObjectInputStream stream) throws IOException, ClassNotFoundException; private void writeObject(java.io.ObjectOutputStream stream) throws IOException private void readObjectNoData() throws ObjectStreamException; </pre> <p> The writeObject method is responsible for writing the state of the object for its particular class so that the corresponding readObject method can restore it. The method does not need to concern itself with the state belonging to the object's superclasses or subclasses. State is saved by writing the individual fields to the ObjectOutputStream using the writeObject method or by using the methods for primitive data types supported by DataOutput. <p> Serialization does not write out the fields of any object that does not implement the java.io.Serializable interface. Subclasses of Objects that are not serializable can be serializable. In this case the non-serializable class must have a no-arg constructor to allow its fields to be initialized. In this case it is the responsibility of the subclass to save and restore the state of the non-serializable class. It is frequently the case that the fields of that class are accessible (public, package, or protected) or that there are get and set methods that can be used to restore the state. <p> Serialization of an object can be prevented by implementing writeObject and readObject methods that throw the NotSerializableException. The exception will be caught by the ObjectOutputStream and abort the serialization process. <p> Implementing the Externalizable interface allows the object to assume complete control over the contents and format of the object's serialized form. The methods of the Externalizable interface, writeExternal and readExternal, are called to save and restore the objects state. When implemented by a class they can write and read their own state using all of the methods of ObjectOutput and ObjectInput. It is the responsibility of the objects to handle any versioning that occurs. <p> Enum constants are serialized differently than ordinary serializable or externalizable objects. The serialized form of an enum constant consists solely of its name; field values of the constant are not transmitted. To serialize an enum constant, ObjectOutputStream writes the string returned by the constant's name method. Like other serializable or externalizable objects, enum constants can function as the targets of back references appearing subsequently in the serialization stream. The process by which enum constants are serialized cannot be customized; any class-specific writeObject and writeReplace methods defined by enum types are ignored during serialization. Similarly, any serialPersistentFields or serialVersionUID field declarations are also ignored--all enum types have a fixed serialVersionUID of 0L. <p> Primitive data, excluding serializable fields and externalizable data, is written to the ObjectOutputStream in block-data records. A block data record is composed of a header and data. The block data header consists of a marker and the number of bytes to follow the header. Consecutive primitive data writes are merged into one block-data record. The blocking factor used for a block-data record will be 1024 bytes. Each block-data record will be filled up to 1024 bytes, or be written whenever there is a termination of block-data mode. Calls to the ObjectOutputStream methods writeObject, defaultWriteObject and writeFields initially terminate any existing block-data record. </p><pre><code>public class ObjectOutputStream\n</code></pre></section>	https://developer.android.com/reference/java/io/ObjectOutputStream.html
ObjectOutputStream.PutField	A										<section class="prog__container"><p> Provide programmatic access to the persistent fields to be written to ObjectOutput.</p><pre><code>public static abstract class ObjectOutputStream.PutField\nextends Object</code></pre></section>	https://developer.android.com/reference/java/io/ObjectOutputStream.PutField.html
ObjectStreamClass	A										<section class="prog__container"><p> Serialization's descriptor for classes. It contains the name and serialVersionUID of the class. The ObjectStreamClass for a specific class loaded in this Java VM can be found/created using the lookup method. <p> The algorithm to compute the SerialVersionUID is described in Object Serialization Specification, Section 4.6, Stream Unique Identifiers . </p><pre><code>public class ObjectStreamClass\nextends Object</code></pre></section>	https://developer.android.com/reference/java/io/ObjectStreamClass.html
ObjectStreamConstants	A										<section class="prog__container"><p> Constants written into the Object Serialization Stream.</p><pre><code>public interface ObjectStreamConstants\n</code></pre></section>	https://developer.android.com/reference/java/io/ObjectStreamConstants.html
ObjectStreamException	A										<section class="prog__container"><p> Superclass of all exceptions specific to Object Stream classes.</p><pre><code>public abstract class ObjectStreamException\n</code></pre></section>	https://developer.android.com/reference/java/io/ObjectStreamException.html
ObjectStreamField	A										<section class="prog__container"><p> A description of a Serializable field from a Serializable class. An array of ObjectStreamFields is used to declare the Serializable fields of a class.</p><pre><code>public class ObjectStreamField\nextends Object</code></pre></section>	https://developer.android.com/reference/java/io/ObjectStreamField.html
OptionalDataException	A										<section class="prog__container"><p> Exception indicating the failure of an object read operation due to unread primitive data, or the end of data belonging to a serialized object in the stream. This exception may be thrown in two cases: <ul> <li> An attempt was made to read an object when the next element in the stream is primitive data. In this case, the OptionalDataException's length field is set to the number of bytes of primitive data immediately readable from the stream, and the eof field is set to false. <li> An attempt was made to read past the end of data consumable by a class-defined readObject or readExternal method. In this case, the OptionalDataException's eof field is set to true, and the length field is set to 0. </li> </li> </ul></p><pre><code>public class OptionalDataException\n</code></pre></section>	https://developer.android.com/reference/java/io/OptionalDataException.html
OutputStream	A										<section class="prog__container"><p> This abstract class is the superclass of all classes representing an output stream of bytes. An output stream accepts output bytes and sends them to some sink. <p> Applications that need to define a subclass of <pre><code> OutputStream </code></pre> must always provide at least a method that writes one byte of output. </p><pre><code>public abstract class OutputStream\nextends Object</code></pre></section>	https://developer.android.com/reference/java/io/OutputStream.html
OutputStreamWriter	A										<section class="prog__container"><p> An OutputStreamWriter is a bridge from character streams to byte streams: Characters written to it are encoded into bytes using a specified <pre><code> <pre><code> charset </code></pre> </code></pre> . The charset that it uses may be specified by name or may be given explicitly, or the platform's default charset may be accepted. <p> Each invocation of a write() method causes the encoding converter to be invoked on the given character(s). The resulting bytes are accumulated in a buffer before being written to the underlying output stream. The size of this buffer may be specified, but by default it is large enough for most purposes. Note that the characters passed to the write() methods are not buffered. <p> For top efficiency, consider wrapping an OutputStreamWriter within a BufferedWriter so as to avoid frequent converter invocations. For example: <pre> Writer out = new BufferedWriter(new OutputStreamWriter(System.out)); </pre> <p> A <i> surrogate pair </i> is a character represented by a sequence of two <tt> char </tt> values: A <i> high </i> surrogate in the range '\uD800' to '\uDBFF' followed by a <i> low </i> surrogate in the range '\uDC00' to '\uDFFF'. <p> A <i> malformed surrogate element </i> is a high surrogate that is not followed by a low surrogate or a low surrogate that is not preceded by a high surrogate. <p> This class always replaces malformed surrogate elements and unmappable character sequences with the charset's default <i> substitution sequence </i> . The CharsetEncoder </p><pre><code>public class OutputStreamWriter\n</code></pre></section>	https://developer.android.com/reference/java/io/OutputStreamWriter.html
java.io	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/java/io/package-summary.html
PipedInputStream	A										<section class="prog__container"><p> A piped input stream should be connected to a piped output stream; the piped input stream then provides whatever data bytes are written to the piped output stream. Typically, data is read from a <pre><code> PipedInputStream </code></pre> object by one thread and data is written to the corresponding <pre><code> PipedOutputStream </code></pre> by some other thread. Attempting to use both objects from a single thread is not recommended, as it may deadlock the thread. The piped input stream contains a buffer, decoupling read operations from write operations, within limits. A pipe is said to be <i> broken </i> if a thread that was providing data bytes to the connected piped output stream is no longer alive.</p><pre><code>public class PipedInputStream\n</code></pre></section>	https://developer.android.com/reference/java/io/PipedInputStream.html
PipedOutputStream	A										<section class="prog__container"><p> A piped output stream can be connected to a piped input stream to create a communications pipe. The piped output stream is the sending end of the pipe. Typically, data is written to a <pre><code> PipedOutputStream </code></pre> object by one thread and data is read from the connected <pre><code> PipedInputStream </code></pre> by some other thread. Attempting to use both objects from a single thread is not recommended as it may deadlock the thread. The pipe is said to be <i> broken </i> if a thread that was reading data bytes from the connected piped input stream is no longer alive.</p><pre><code>public class PipedOutputStream\n</code></pre></section>	https://developer.android.com/reference/java/io/PipedOutputStream.html
PipedReader	A										<section class="prog__container"><p> Piped character-input streams.</p><pre><code>public class PipedReader\n</code></pre></section>	https://developer.android.com/reference/java/io/PipedReader.html
PipedWriter	A										<section class="prog__container"><p> Piped character-output streams.</p><pre><code>public class PipedWriter\n</code></pre></section>	https://developer.android.com/reference/java/io/PipedWriter.html
PrintStream	A										<section class="prog__container"><p> A <pre><code> PrintStream </code></pre> adds functionality to another output stream, namely the ability to print representations of various data values conveniently. Two other features are provided as well. Unlike other output streams, a <pre><code> PrintStream </code></pre> never throws an <pre><code> IOException </code></pre> ; instead, exceptional situations merely set an internal flag that can be tested via the <pre><code> checkError </code></pre> method. Optionally, a <pre><code> PrintStream </code></pre> can be created so as to flush automatically; this means that the <pre><code> flush </code></pre> method is automatically invoked after a byte array is written, one of the <pre><code> println </code></pre> methods is invoked, or a newline character or byte ( <pre><code> '\n' </code></pre> ) is written. <p> All characters printed by a <pre><code> PrintStream </code></pre> are converted into bytes using the platform's default character encoding. The <pre><code> <pre><code> PrintWriter </code></pre> </code></pre> class should be used in situations that require writing characters rather than bytes. </p><pre><code>public class PrintStream\n</code></pre></section>	https://developer.android.com/reference/java/io/PrintStream.html
PrintWriter	A										<section class="prog__container"><p> Prints formatted representations of objects to a text-output stream. This class implements all of the <tt> print </tt> methods found in <pre><code> PrintStream </code></pre> . It does not contain methods for writing raw bytes, for which a program should use unencoded byte streams. <p> Unlike the <pre><code> PrintStream </code></pre> class, if automatic flushing is enabled it will be done only when one of the <tt> println </tt> , <tt> printf </tt> , or <tt> format </tt> methods is invoked, rather than whenever a newline character happens to be output. These methods use the platform's own notion of line separator rather than the newline character. <p> Methods in this class never throw I/O exceptions, although some of its constructors may. The client may inquire as to whether any errors have occurred by invoking <pre><code> checkError() </code></pre> . </p><pre><code>public class PrintWriter\n</code></pre></section>	https://developer.android.com/reference/java/io/PrintWriter.html
PushbackInputStream	A										<section class="prog__container"><p> A <pre><code> PushbackInputStream </code></pre> adds functionality to another input stream, namely the ability to "push back" or "unread" one byte. This is useful in situations where it is convenient for a fragment of code to read an indefinite number of data bytes that are delimited by a particular byte value; after reading the terminating byte, the code fragment can "unread" it, so that the next read operation on the input stream will reread the byte that was pushed back. For example, bytes representing the characters constituting an identifier might be terminated by a byte representing an operator character; a method whose job is to read just an identifier can read until it sees the operator and then push the operator back to be re-read.</p><pre><code>public class PushbackInputStream\n</code></pre></section>	https://developer.android.com/reference/java/io/PushbackInputStream.html
PushbackReader	A										<section class="prog__container"><p> A character-stream reader that allows characters to be pushed back into the stream.</p><pre><code>public class PushbackReader\n</code></pre></section>	https://developer.android.com/reference/java/io/PushbackReader.html
RandomAccessFile	A										<section class="prog__container"><p> Instances of this class support both reading and writing to a random access file. A random access file behaves like a large array of bytes stored in the file system. There is a kind of cursor, or index into the implied array, called the <em> file pointer </em> ; input operations read bytes starting at the file pointer and advance the file pointer past the bytes read. If the random access file is created in read/write mode, then output operations are also available; output operations write bytes starting at the file pointer and advance the file pointer past the bytes written. Output operations that write past the current end of the implied array cause the array to be extended. The file pointer can be read by the <pre><code> getFilePointer </code></pre> method and set by the <pre><code> seek </code></pre> method. <p> It is generally true of all the reading routines in this class that if end-of-file is reached before the desired number of bytes has been read, an <pre><code> EOFException </code></pre> (which is a kind of <pre><code> IOException </code></pre> ) is thrown. If any byte cannot be read for any reason other than end-of-file, an <pre><code> IOException </code></pre> other than <pre><code> EOFException </code></pre> is thrown. In particular, an <pre><code> IOException </code></pre> may be thrown if the stream has been closed. </p><pre><code>public class RandomAccessFile\nextends Object</code></pre></section>	https://developer.android.com/reference/java/io/RandomAccessFile.html
Reader	A										<section class="prog__container"><p> Abstract class for reading character streams. The only methods that a subclass must implement are read(char[], int, int) and close(). Most subclasses, however, will override some of the methods defined here in order to provide higher efficiency, additional functionality, or both.</p><pre><code>public abstract class Reader\nextends Object</code></pre></section>	https://developer.android.com/reference/java/io/Reader.html
SequenceInputStream	A										<section class="prog__container"><p> A <pre><code> SequenceInputStream </code></pre> represents the logical concatenation of other input streams. It starts out with an ordered collection of input streams and reads from the first one until end of file is reached, whereupon it reads from the second one, and so on, until end of file is reached on the last of the contained input streams.</p><pre><code>public class SequenceInputStream\n</code></pre></section>	https://developer.android.com/reference/java/io/SequenceInputStream.html
Serializable	A										<section class="prog__container"><p> Serializability of a class is enabled by the class implementing the java.io.Serializable interface. Classes that do not implement this interface will not have any of their state serialized or deserialized. All subtypes of a serializable class are themselves serializable. The serialization interface has no methods or fields and serves only to identify the semantics of being serializable. <p> To allow subtypes of non-serializable classes to be serialized, the subtype may assume responsibility for saving and restoring the state of the supertype's public, protected, and (if accessible) package fields. The subtype may assume this responsibility only if the class it extends has an accessible no-arg constructor to initialize the class's state. It is an error to declare a class Serializable if this is not the case. The error will be detected at runtime. <p> During deserialization, the fields of non-serializable classes will be initialized using the public or protected no-arg constructor of the class. A no-arg constructor must be accessible to the subclass that is serializable. The fields of serializable subclasses will be restored from the stream. <p> When traversing a graph, an object may be encountered that does not support the Serializable interface. In this case the NotSerializableException will be thrown and will identify the class of the non-serializable object. <p> Classes that require special handling during the serialization and deserialization process must implement special methods with these exact signatures: <p> <pre> private void writeObject(java.io.ObjectOutputStream out) throws IOException private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException; private void readObjectNoData() throws ObjectStreamException; </pre> <p> The writeObject method is responsible for writing the state of the object for its particular class so that the corresponding readObject method can restore it. The default mechanism for saving the Object's fields can be invoked by calling out.defaultWriteObject. The method does not need to concern itself with the state belonging to its superclasses or subclasses. State is saved by writing the individual fields to the ObjectOutputStream using the writeObject method or by using the methods for primitive data types supported by DataOutput. <p> The readObject method is responsible for reading from the stream and restoring the classes fields. It may call in.defaultReadObject to invoke the default mechanism for restoring the object's non-static and non-transient fields. The defaultReadObject method uses information in the stream to assign the fields of the object saved in the stream with the correspondingly named fields in the current object. This handles the case when the class has evolved to add new fields. The method does not need to concern itself with the state belonging to its superclasses or subclasses. State is saved by writing the individual fields to the ObjectOutputStream using the writeObject method or by using the methods for primitive data types supported by DataOutput. <p> The readObjectNoData method is responsible for initializing the state of the object for its particular class in the event that the serialization stream does not list the given class as a superclass of the object being deserialized. This may occur in cases where the receiving party uses a different version of the deserialized instance's class than the sending party, and the receiver's version extends classes that are not extended by the sender's version. This may also occur if the serialization stream has been tampered; hence, readObjectNoData is useful for initializing deserialized objects properly despite a "hostile" or incomplete source stream. <p> Serializable classes that need to designate an alternative object to be used when writing an object to the stream should implement this special method with the exact signature: <p> <pre> ANY-ACCESS-MODIFIER Object writeReplace() throws ObjectStreamException; </pre> <p> This writeReplace method is invoked by serialization if the method exists and it would be accessible from a method defined within the class of the object being serialized. Thus, the method can have private, protected and package-private access. Subclass access to this method follows java accessibility rules. <p> Classes that need to designate a replacement when an instance of it is read from the stream should implement this special method with the exact signature. <p> <pre> ANY-ACCESS-MODIFIER Object readResolve() throws ObjectStreamException; </pre> <p> This readResolve method follows the same invocation rules and accessibility rules as writeReplace. <p> The serialization runtime associates with each serializable class a version number, called a serialVersionUID, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization. If the receiver has loaded a class for the object that has a different serialVersionUID than that of the corresponding sender's class, then deserialization will result in an <pre><code> InvalidClassException </code></pre> . A serializable class can declare its own serialVersionUID explicitly by declaring a field named <pre><code> "serialVersionUID" </code></pre> that must be static, final, and of type <pre><code> long </code></pre> : <p> <pre> ANY-ACCESS-MODIFIER static final long serialVersionUID = 42L; </pre> If a serializable class does not explicitly declare a serialVersionUID, then the serialization runtime will calculate a default serialVersionUID value for that class based on various aspects of the class, as described in the Java(TM) Object Serialization Specification. However, it is <em> strongly recommended </em> that all serializable classes explicitly declare serialVersionUID values, since the default serialVersionUID computation is highly sensitive to class details that may vary depending on compiler implementations, and can thus result in unexpected <pre><code> InvalidClassException </code></pre> s during deserialization. Therefore, to guarantee a consistent serialVersionUID value across different java compiler implementations, a serializable class must declare an explicit serialVersionUID value. It is also strongly advised that explicit serialVersionUID declarations use the <pre><code> private </code></pre> modifier where possible, since such declarations apply only to the immediately declaring class--serialVersionUID fields are not useful as inherited members. Array classes cannot declare an explicit serialVersionUID, so they always have the default computed value, but the requirement for matching serialVersionUID values is waived for array classes. Android implementation of serialVersionUID computation will change slightly for some classes if you're targeting android N. In order to preserve compatibility, this change is only enabled is the application target SDK version is set to 24 or higher. It is highly recommended to use an explicit serialVersionUID field to avoid compatibility issues. </p><pre><code>public interface Serializable\n</code></pre></section>	https://developer.android.com/reference/java/io/Serializable.html
SerializablePermission	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public final class SerializablePermission\n</code></pre></section>	https://developer.android.com/reference/java/io/SerializablePermission.html
StreamCorruptedException	A										<section class="prog__container"><p> Thrown when control information that was read from an object stream violates internal consistency checks.</p><pre><code>public class StreamCorruptedException\n</code></pre></section>	https://developer.android.com/reference/java/io/StreamCorruptedException.html
StreamTokenizer	A										<section class="prog__container"><p> The <pre><code> StreamTokenizer </code></pre> class takes an input stream and parses it into "tokens", allowing the tokens to be read one at a time. The parsing process is controlled by a table and a number of flags that can be set to various states. The stream tokenizer can recognize identifiers, numbers, quoted strings, and various comment styles. <p> Each byte read from the input stream is regarded as a character in the range <pre><code> '\u0000' </code></pre> through <pre><code> '\u00FF' </code></pre> . The character value is used to look up five possible attributes of the character: <i> white space </i> , <i> alphabetic </i> , <i> numeric </i> , <i> string quote </i> , and <i> comment character </i> . Each character can have zero or more of these attributes. <p> In addition, an instance has four flags. These flags indicate: <ul> <li> Whether line terminators are to be returned as tokens or treated as white space that merely separates tokens. <li> Whether C-style comments are to be recognized and skipped. <li> Whether C++-style comments are to be recognized and skipped. <li> Whether the characters of identifiers are converted to lowercase. </li> </li> </li> </li> </ul> <p> A typical application first constructs an instance of this class, sets up the syntax tables, and then repeatedly loops calling the <pre><code> nextToken </code></pre> method in each iteration of the loop until it returns the value <pre><code> TT_EOF </code></pre> . </p><pre><code>public class StreamTokenizer\nextends Object</code></pre></section>	https://developer.android.com/reference/java/io/StreamTokenizer.html
StringBufferInputStream	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 1. </strong> <br/> This class does not properly convert characters into bytes. As of JDK 1.1, the preferred way to create a stream from a string is via the <pre><code> StringReader </code></pre> class. </p><pre><code>public class StringBufferInputStream\n</code></pre></section>	https://developer.android.com/reference/java/io/StringBufferInputStream.html
StringReader	A										<section class="prog__container"><p> A character stream whose source is a string.</p><pre><code>public class StringReader\n</code></pre></section>	https://developer.android.com/reference/java/io/StringReader.html
StringWriter	A										<section class="prog__container"><p> A character stream that collects its output in a string buffer, which can then be used to construct a string. <p> Closing a <tt> StringWriter </tt> has no effect. The methods in this class can be called after the stream has been closed without generating an <tt> IOException </tt> . </p><pre><code>public class StringWriter\n</code></pre></section>	https://developer.android.com/reference/java/io/StringWriter.html
SyncFailedException	A										<section class="prog__container"><p> Signals that a sync operation has failed.</p><pre><code>public class SyncFailedException\n</code></pre></section>	https://developer.android.com/reference/java/io/SyncFailedException.html
UncheckedIOException	A										<section class="prog__container"><p> Wraps an <pre><code> IOException </code></pre> with an unchecked exception.</p><pre><code>public class UncheckedIOException\n</code></pre></section>	https://developer.android.com/reference/java/io/UncheckedIOException.html
UnsupportedEncodingException	A										<section class="prog__container"><p> The Character Encoding is not supported.</p><pre><code>public class UnsupportedEncodingException\n</code></pre></section>	https://developer.android.com/reference/java/io/UnsupportedEncodingException.html
UTFDataFormatException	A										<section class="prog__container"><p> Signals that a malformed string in modified UTF-8 format has been read in a data input stream or by any class that implements the data input interface. See the <pre><code> DataInput </code></pre> class description for the format in which modified UTF-8 strings are read and written.</p><pre><code>public class UTFDataFormatException\n</code></pre></section>	https://developer.android.com/reference/java/io/UTFDataFormatException.html
WriteAbortedException	A										<section class="prog__container"><p> Signals that one of the ObjectStreamExceptions was thrown during a write operation. Thrown during a read operation when one of the ObjectStreamExceptions was thrown during a write operation. The exception that terminated the write can be found in the detail field. The stream is reset to it's initial state and all references to objects already deserialized are discarded. <p> As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The "exception causing the abort" that is provided at construction time and accessed via the public <pre><code> detail </code></pre> field is now known as the <i> cause </i> , and may be accessed via the <pre><code> getCause() </code></pre> method, as well as the aforementioned "legacy field." </p><pre><code>public class WriteAbortedException\n</code></pre></section>	https://developer.android.com/reference/java/io/WriteAbortedException.html
Writer	A										<section class="prog__container"><p> Abstract class for writing to character streams. The only methods that a subclass must implement are write(char[], int, int), flush(), and close(). Most subclasses, however, will override some of the methods defined here in order to provide higher efficiency, additional functionality, or both.</p><pre><code>public abstract class Writer\nextends Object</code></pre></section>	https://developer.android.com/reference/java/io/Writer.html
AbstractMethodError	A										<section class="prog__container"><p> Thrown when an application tries to call an abstract method. Normally, this error is caught by the compiler; this error can only occur at run time if the definition of some class has incompatibly changed since the currently executing method was last compiled.</p><pre><code>public class AbstractMethodError\n</code></pre></section>	https://developer.android.com/reference/java/lang/AbstractMethodError.html
Appendable	A										<section class="prog__container"><p> An object to which <tt> char </tt> sequences and values can be appended. The <tt> Appendable </tt> interface must be implemented by any class whose instances are intended to receive formatted output from a <pre><code> Formatter </code></pre> . <p> The characters to be appended should be valid Unicode characters as described in Unicode Character Representation . Note that supplementary characters may be composed of multiple 16-bit <tt> char </tt> values. <p> Appendables are not necessarily safe for multithreaded access. Thread safety is the responsibility of classes that extend and implement this interface. <p> Since this interface may be implemented by existing classes with different styles of error handling there is no guarantee that errors will be propagated to the invoker. </p><pre><code>public interface Appendable\n</code></pre></section>	https://developer.android.com/reference/java/lang/Appendable.html
ArithmeticException	A										<section class="prog__container"><p> Thrown when an exceptional arithmetic condition has occurred. For example, an integer "divide by zero" throws an instance of this class. <pre><code> ArithmeticException </code></pre> objects may be constructed by the virtual machine as if suppression were disabled and/or the stack trace was not writable</p><pre><code>public class ArithmeticException\n</code></pre></section>	https://developer.android.com/reference/java/lang/ArithmeticException.html
ArrayIndexOutOfBoundsException	A										<section class="prog__container"><p> Thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array.</p><pre><code>public class ArrayIndexOutOfBoundsException\n</code></pre></section>	https://developer.android.com/reference/java/lang/ArrayIndexOutOfBoundsException.html
ArrayStoreException	A										<section class="prog__container"><p> Thrown to indicate that an attempt has been made to store the wrong type of object into an array of objects. For example, the following code generates an <pre><code> ArrayStoreException </code></pre> : <p> <blockquote> <pre> Object x[] = new String[3]; x[0] = new Integer(0); </pre> </blockquote> </p><pre><code>public class ArrayStoreException\n</code></pre></section>	https://developer.android.com/reference/java/lang/ArrayStoreException.html
AssertionError	A										<section class="prog__container"><p> Thrown to indicate that an assertion has failed. <p> The seven one-argument public constructors provided by this class ensure that the assertion error returned by the invocation: <pre> new AssertionError(<i>expression</i>) </pre> has as its detail message the <i> string conversion </i> of <i> expression </i> (as defined in section 15.18.1.1 of <cite> The Java™ Language Specification </cite> ), regardless of the type of <i> expression </i> . </p><pre><code>public class AssertionError\n</code></pre></section>	https://developer.android.com/reference/java/lang/AssertionError.html
AutoCloseable	A										<section class="prog__container"><p> A resource that must be closed when it is no longer needed.</p><pre><code>public interface AutoCloseable\n</code></pre></section>	https://developer.android.com/reference/java/lang/AutoCloseable.html
Boolean	A										<section class="prog__container"><p> The Boolean class wraps a value of the primitive type <pre><code> boolean </code></pre> in an object. An object of type <pre><code> Boolean </code></pre> contains a single field whose type is <pre><code> boolean </code></pre> . <p> In addition, this class provides many methods for converting a <pre><code> boolean </code></pre> to a <pre><code> String </code></pre> and a <pre><code> String </code></pre> to a <pre><code> boolean </code></pre> , as well as other constants and methods useful when dealing with a <pre><code> boolean </code></pre> . </p><pre><code>public final class Boolean\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/Boolean.html
Byte	A										<section class="prog__container"><p> The <pre><code> Byte </code></pre> class wraps a value of primitive type <pre><code> byte </code></pre> in an object. An object of type <pre><code> Byte </code></pre> contains a single field whose type is <pre><code> byte </code></pre> . <p> In addition, this class provides several methods for converting a <pre><code> byte </code></pre> to a <pre><code> String </code></pre> and a <pre><code> String </code></pre> to a <pre><code> byte </code></pre> , as well as other constants and methods useful when dealing with a <pre><code> byte </code></pre> . </p><pre><code>public final class Byte\n</code></pre></section>	https://developer.android.com/reference/java/lang/Byte.html
Character	A										<section class="prog__container"><p> The <pre><code> Character </code></pre> class wraps a value of the primitive type <pre><code> char </code></pre> in an object. An object of type <pre><code> Character </code></pre> contains a single field whose type is <pre><code> char </code></pre> . <p> In addition, this class provides several methods for determining a character's category (lowercase letter, digit, etc.) and for converting characters from uppercase to lowercase and vice versa. <p> Character information is based on the Unicode Standard, version 6.0.0. <p> The methods and data of class <pre><code> Character </code></pre> are defined by the information in the <i> UnicodeData </i> file that is part of the Unicode Character Database maintained by the Unicode Consortium. This file specifies various properties including name and general category for every defined Unicode code point or character range. <p> The file and its description are available from the Unicode Consortium at: <ul> <li> http://www.unicode.org </li> </ul> <h4> Unicode Character Representations </h4> <p> The <pre><code> char </code></pre> data type (and therefore the value that a <pre><code> Character </code></pre> object encapsulates) are based on the original Unicode specification, which defined characters as fixed-width 16-bit entities. The Unicode Standard has since been changed to allow for characters whose representation requires more than 16 bits. The range of legal <em> code point </em> s is now U+0000 to U+10FFFF, known as <em> Unicode scalar value </em> . (Refer to the <i> definition </i> of the U+ <i> n </i> notation in the Unicode Standard.) <p> The set of characters from U+0000 to U+FFFF is sometimes referred to as the <em> Basic Multilingual Plane (BMP) </em> . Characters whose code points are greater than U+FFFF are called <em> supplementary character </em> s. The Java platform uses the UTF-16 representation in <pre><code> char </code></pre> arrays and in the <pre><code> String </code></pre> and <pre><code> StringBuffer </code></pre> classes. In this representation, supplementary characters are represented as a pair of <pre><code> char </code></pre> values, the first from the <em> high-surrogates </em> range, (\uD800-\uDBFF), the second from the <em> low-surrogates </em> range (\uDC00-\uDFFF). <p> A <pre><code> char </code></pre> value, therefore, represents Basic Multilingual Plane (BMP) code points, including the surrogate code points, or code units of the UTF-16 encoding. An <pre><code> int </code></pre> value represents all Unicode code points, including supplementary code points. The lower (least significant) 21 bits of <pre><code> int </code></pre> are used to represent Unicode code points and the upper (most significant) 11 bits must be zero. Unless otherwise specified, the behavior with respect to supplementary characters and surrogate <pre><code> char </code></pre> values is as follows: <ul> <li> The methods that only accept a <pre><code> char </code></pre> value cannot support supplementary characters. They treat <pre><code> char </code></pre> values from the surrogate ranges as undefined characters. For example, <pre><code> Character.isLetter('\uD840') </code></pre> returns <pre><code> false </code></pre> , even though this specific value if followed by any low-surrogate value in a string would represent a letter. <li> The methods that accept an <pre><code> int </code></pre> value support all Unicode characters, including supplementary characters. For example, <pre><code> Character.isLetter(0x2F81A) </code></pre> returns <pre><code> true </code></pre> because the code point value represents a letter (a CJK ideograph). </li> </li> </ul> <p> In the Java SE API documentation, <em> Unicode code point </em> is used for character values in the range between U+0000 and U+10FFFF, and <em> Unicode code unit </em> is used for 16-bit <pre><code> char </code></pre> values that are code units of the <em> UTF-16 </em> encoding. For more information on Unicode terminology, refer to the Unicode Glossary . </p><pre><code>public final class Character\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/Character.html
Character.Subset	A										<section class="prog__container"><p> Instances of this class represent particular subsets of the Unicode character set. The only family of subsets defined in the <pre><code> Character </code></pre> class is <pre><code> Character.UnicodeBlock </code></pre> . Other portions of the Java API may define other subsets for their own purposes.</p><pre><code>public static class Character.Subset\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/Character.Subset.html
Character.UnicodeBlock	A										<section class="prog__container"><p> A family of character subsets representing the character blocks in the Unicode specification. Character blocks generally define characters used for a specific script or purpose. A character is contained by at most one Unicode block.</p><pre><code>public static final class Character.UnicodeBlock\n</code></pre></section>	https://developer.android.com/reference/java/lang/Character.UnicodeBlock.html
Character.UnicodeScript	A										<section class="prog__container"><p> A family of character subsets representing the character scripts defined in the <i> Unicode Standard Annex #24: Script Names </i> . Every Unicode character is assigned to a single Unicode script, either a specific script, such as <pre><code> Latin </code></pre> , or one of the following three special values, <pre><code> Inherited </code></pre> , <pre><code> Common </code></pre> or <pre><code> Unknown </code></pre> .</p><pre><code>public static final enum Character.UnicodeScript\n</code></pre></section>	https://developer.android.com/reference/java/lang/Character.UnicodeScript.html
CharSequence	A										<section class="prog__container"><p> A <tt> CharSequence </tt> is a readable sequence of <pre><code> char </code></pre> values. This interface provides uniform, read-only access to many different kinds of <pre><code> char </code></pre> sequences. A <pre><code> char </code></pre> value represents a character in the <i> Basic Multilingual Plane (BMP) </i> or a surrogate. Refer to Unicode Character Representation for details. <p> This interface does not refine the general contracts of the <pre><code> equals </code></pre> and <pre><code> hashCode </code></pre> methods. The result of comparing two objects that implement <tt> CharSequence </tt> is therefore, in general, undefined. Each object may be implemented by a different class, and there is no guarantee that each class will be capable of testing its instances for equality with those of the other. It is therefore inappropriate to use arbitrary <tt> CharSequence </tt> instances as elements in a set or as keys in a map. </p><pre><code>public interface CharSequence\n</code></pre></section>	https://developer.android.com/reference/java/lang/CharSequence.html
Class	A										<section class="prog__container"><p> Instances of the class <pre><code> Class </code></pre> represent classes and interfaces in a running Java application. An enum is a kind of class and an annotation is a kind of interface. Every array also belongs to a class that is reflected as a <pre><code> Class </code></pre> object that is shared by all arrays with the same element type and number of dimensions. The primitive Java types ( <pre><code> boolean </code></pre> , <pre><code> byte </code></pre> , <pre><code> char </code></pre> , <pre><code> short </code></pre> , <pre><code> int </code></pre> , <pre><code> long </code></pre> , <pre><code> float </code></pre> , and <pre><code> double </code></pre> ), and the keyword <pre><code> void </code></pre> are also represented as <pre><code> Class </code></pre> objects. <p> <pre><code> Class </code></pre> has no public constructor. Instead <pre><code> Class </code></pre> objects are constructed automatically by the Java Virtual Machine as classes are loaded and by calls to the <pre><code> defineClass </code></pre> method in the class loader. <p> The following example uses a <pre><code> Class </code></pre> object to print the class name of an object: <p> <blockquote> <pre> void printClassName(Object obj) { System.out.println("The class of " + obj + " is " + obj.getClass().getName()); } </pre> </blockquote> <p> It is also possible to get the <pre><code> Class </code></pre> object for a named type (or for void) using a class literal. See Section 15.8.2 of <cite> The Java™ Language Specification </cite> . For example: <p> <blockquote> <pre><code> System.out.println("The name of class Foo is: "+Foo.class.getName()); </code></pre> </blockquote> </p><pre><code>public final class Class\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/Class.html
ClassCastException	A										<section class="prog__container"><p> Thrown to indicate that the code has attempted to cast an object to a subclass of which it is not an instance. For example, the following code generates a <pre><code> ClassCastException </code></pre> : <p> <blockquote> <pre> Object x = new Integer(0); System.out.println((String)x); </pre> </blockquote> </p><pre><code>public class ClassCastException\n</code></pre></section>	https://developer.android.com/reference/java/lang/ClassCastException.html
ClassCircularityError	A										<section class="prog__container"><p> Thrown when the Java Virtual Machine detects a circularity in the superclass hierarchy of a class being loaded.</p><pre><code>public class ClassCircularityError\n</code></pre></section>	https://developer.android.com/reference/java/lang/ClassCircularityError.html
ClassFormatError	A										<section class="prog__container"><p> Thrown when the Java Virtual Machine attempts to read a class file and determines that the file is malformed or otherwise cannot be interpreted as a class file.</p><pre><code>public class ClassFormatError\n</code></pre></section>	https://developer.android.com/reference/java/lang/ClassFormatError.html
ClassLoader	A										<section class="prog__container"><p> A class loader is an object that is responsible for loading classes. The class <tt> ClassLoader </tt> is an abstract class. Given the binary name of a class, a class loader should attempt to locate or generate data that constitutes a definition for the class. A typical strategy is to transform the name into a file name and then read a "class file" of that name from a file system. <p> Every <pre><code> <tt> Class </tt> </code></pre> object contains a <pre><code> reference </code></pre> to the <tt> ClassLoader </tt> that defined it. <p> <tt> Class </tt> objects for array classes are not created by class loaders, but are created automatically as required by the Java runtime. The class loader for an array class, as returned by <pre><code> getClassLoader() </code></pre> is the same as the class loader for its element type; if the element type is a primitive type, then the array class has no class loader. <p> Applications implement subclasses of <tt> ClassLoader </tt> in order to extend the manner in which the Java virtual machine dynamically loads classes. <p> Class loaders may typically be used by security managers to indicate security domains. <p> The <tt> ClassLoader </tt> class uses a delegation model to search for classes and resources. Each instance of <tt> ClassLoader </tt> has an associated parent class loader. When requested to find a class or resource, a <tt> ClassLoader </tt> instance will delegate the search for the class or resource to its parent class loader before attempting to find the class or resource itself. The virtual machine's built-in class loader, called the "bootstrap class loader", does not itself have a parent but may serve as the parent of a <tt> ClassLoader </tt> instance. <p> Class loaders that support concurrent loading of classes are known as <em> parallel capable </em> class loaders and are required to register themselves at their class initialization time by invoking the <pre><code> <tt> ClassLoader.registerAsParallelCapable </tt> </code></pre> method. Note that the <tt> ClassLoader </tt> class is registered as parallel capable by default. However, its subclasses still need to register themselves if they are parallel capable. <br> In environments in which the delegation model is not strictly hierarchical, class loaders need to be parallel capable, otherwise class loading can lead to deadlocks because the loader lock is held for the duration of the class loading process (see <pre><code> <tt> loadClass </tt> </code></pre> methods). <p> Normally, the Java virtual machine loads classes from the local file system in a platform-dependent manner. For example, on UNIX systems, the virtual machine loads classes from the directory defined by the <tt> CLASSPATH </tt> environment variable. <p> However, some classes may not originate from a file; they may originate from other sources, such as the network, or they could be constructed by an application. The method <pre><code> <tt> defineClass </tt> </code></pre> converts an array of bytes into an instance of class <tt> Class </tt> . Instances of this newly defined class can be created using <pre><code> <tt> Class.newInstance </tt> </code></pre> . <p> The methods and constructors of objects created by a class loader may reference other classes. To determine the class(es) referred to, the Java virtual machine invokes the <pre><code> <tt> loadClass </tt> </code></pre> method of the class loader that originally created the class. <p> For example, an application could create a network class loader to download class files from a server. Sample code might look like: <blockquote> <pre> ClassLoader loader = new NetworkClassLoader(host, port); Object main = loader.loadClass("Main", true).newInstance();  . . . </pre> </blockquote> <p> The network class loader subclass must define the methods <pre><code> <tt> findClass </tt> </code></pre> and <tt> loadClassData </tt> to load a class from the network. Once it has downloaded the bytes that make up the class, it should use the method <pre><code> <tt> defineClass </tt> </code></pre> to create a class instance. A sample implementation is: <blockquote> <pre> class NetworkClassLoader extends ClassLoader { String host; int port; public Class findClass(String name) { byte[] b = loadClassData(name); return defineClass(name, b, 0, b.length); } private byte[] loadClassData(String name) { // load the class data from the connection  . . . } } </pre> </blockquote> <h4> Binary names </h4> <p> Any class name provided as a <pre><code> String </code></pre> parameter to methods in <tt> ClassLoader </tt> must be a binary name as defined by <cite> The Java™ Language Specification </cite> . <p> Examples of valid class names include: <blockquote> <pre> "java.lang.String" "javax.swing.JSpinner$DefaultEditor" "java.security.KeyStore$Builder$FileBuilder$1" "java.net.URLClassLoader$3$1" </pre> </blockquote> </p><pre><code>public abstract class ClassLoader\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/ClassLoader.html
ClassNotFoundException	A										<section class="prog__container"><p> Thrown when an application tries to load in a class through its string name using: <ul> <li> The <pre><code> forName </code></pre> method in class <pre><code> Class </code></pre> . <li> The <pre><code> findSystemClass </code></pre> method in class <pre><code> ClassLoader </code></pre> . <li> The <pre><code> loadClass </code></pre> method in class <pre><code> ClassLoader </code></pre> . </li> </li> </li> </ul> <p> but no definition for the class with the specified name could be found. <p> As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The "optional exception that was raised while loading the class" that may be provided at construction time and accessed via the <pre><code> getException() </code></pre> method is now known as the <i> cause </i> , and may be accessed via the <pre><code> getCause() </code></pre> method, as well as the aforementioned "legacy method." </p><pre><code>public class ClassNotFoundException\n</code></pre></section>	https://developer.android.com/reference/java/lang/ClassNotFoundException.html
Cloneable	A										<section class="prog__container"><p> A class implements the <pre><code> Cloneable </code></pre> interface to indicate to the <pre><code> clone() </code></pre> method that it is legal for that method to make a field-for-field copy of instances of that class. <p> Invoking Object's clone method on an instance that does not implement the <pre><code> Cloneable </code></pre> interface results in the exception <pre><code> CloneNotSupportedException </code></pre> being thrown. <p> By convention, classes that implement this interface should override <tt> Object.clone </tt> (which is protected) with a public method. See <pre><code> clone() </code></pre> for details on overriding this method. <p> Note that this interface does <i> not </i> contain the <tt> clone </tt> method. Therefore, it is not possible to clone an object merely by virtue of the fact that it implements this interface. Even if the clone method is invoked reflectively, there is no guarantee that it will succeed. </p><pre><code>public interface Cloneable\n</code></pre></section>	https://developer.android.com/reference/java/lang/Cloneable.html
CloneNotSupportedException	A										<section class="prog__container"><p> Thrown to indicate that the <pre><code> clone </code></pre> method in class <pre><code> Object </code></pre> has been called to clone an object, but that the object's class does not implement the <pre><code> Cloneable </code></pre> interface. <p> Applications that override the <pre><code> clone </code></pre> method can also throw this exception to indicate that an object could not or should not be cloned. </p><pre><code>public class CloneNotSupportedException\n</code></pre></section>	https://developer.android.com/reference/java/lang/CloneNotSupportedException.html
Comparable	A										<section class="prog__container"><p> This interface imposes a total ordering on the objects of each class that implements it. This ordering is referred to as the class's <i> natural ordering </i> , and the class's <tt> compareTo </tt> method is referred to as its <i> natural comparison method </i> . <p> Lists (and arrays) of objects that implement this interface can be sorted automatically by <pre><code> Collections.sort </code></pre> (and <pre><code> Arrays.sort </code></pre> ). Objects that implement this interface can be used as keys in a sorted map </p><pre><code>public interface Comparable\n</code></pre></section>	https://developer.android.com/reference/java/lang/Comparable.html
Compiler	A										<section class="prog__container"><p> Does nothing on Android.</p><pre><code>public final class Compiler\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/Compiler.html
Deprecated	A										<section class="prog__container"><p> A program element annotated @Deprecated is one that programmers are discouraged from using, typically because it is dangerous, or because a better alternative exists. Compilers warn when a deprecated program element is used or overridden in non-deprecated code.</p><pre><code>public abstract @interface Deprecated\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/java/lang/Deprecated.html
Double	A										<section class="prog__container"><p> The <pre><code> Double </code></pre> class wraps a value of the primitive type <pre><code> double </code></pre> in an object. An object of type <pre><code> Double </code></pre> contains a single field whose type is <pre><code> double </code></pre> . <p> In addition, this class provides several methods for converting a <pre><code> double </code></pre> to a <pre><code> String </code></pre> and a <pre><code> String </code></pre> to a <pre><code> double </code></pre> , as well as other constants and methods useful when dealing with a <pre><code> double </code></pre> . </p><pre><code>public final class Double\n</code></pre></section>	https://developer.android.com/reference/java/lang/Double.html
Enum	A										<section class="prog__container"><p> This is the common base class of all Java language enumeration types. More information about enums, including descriptions of the implicitly declared methods synthesized by the compiler, can be found in section 8.9 of <cite> The Java™ Language Specification </cite> . <p> Note that when using an enumeration type as the type of a set or as the type of the keys in a map, specialized and efficient set </p><pre><code>public abstract class Enum\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/Enum.html
EnumConstantNotPresentException	A										<section class="prog__container"><p> Thrown when an application tries to access an enum constant by name and the enum type contains no constant with the specified name. This exception can be thrown by the API used to read annotations reflectively</p><pre><code>public class EnumConstantNotPresentException\n</code></pre></section>	https://developer.android.com/reference/java/lang/EnumConstantNotPresentException.html
Error	A										<section class="prog__container"><p> An <pre><code> Error </code></pre> is a subclass of <pre><code> Throwable </code></pre> that indicates serious problems that a reasonable application should not try to catch. Most such errors are abnormal conditions. The <pre><code> ThreadDeath </code></pre> error, though a "normal" condition, is also a subclass of <pre><code> Error </code></pre> because most applications should not try to catch it. <p> A method is not required to declare in its <pre><code> throws </code></pre> clause any subclasses of <pre><code> Error </code></pre> that might be thrown during the execution of the method but not caught, since these errors are abnormal conditions that should never occur. That is, <pre><code> Error </code></pre> and its subclasses are regarded as unchecked exceptions for the purposes of compile-time checking of exceptions. </p><pre><code>public class Error\n</code></pre></section>	https://developer.android.com/reference/java/lang/Error.html
Exception	A										<section class="prog__container"><p> The class <pre><code> Exception </code></pre> and its subclasses are a form of <pre><code> Throwable </code></pre> that indicates conditions that a reasonable application might want to catch. <p> The class <pre><code> Exception </code></pre> and any subclasses that are not also subclasses of <pre><code> RuntimeException </code></pre> are <em> checked exceptions </em> . Checked exceptions need to be declared in a method or constructor's <pre><code> throws </code></pre> clause if they can be thrown by the execution of the method or constructor and propagate outside the method or constructor boundary. </p><pre><code>public class Exception\n</code></pre></section>	https://developer.android.com/reference/java/lang/Exception.html
ExceptionInInitializerError	A										<section class="prog__container"><p> Signals that an unexpected exception has occurred in a static initializer. An <pre><code> ExceptionInInitializerError </code></pre> is thrown to indicate that an exception occurred during evaluation of a static initializer or the initializer for a static variable. <p> As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The "saved throwable object" that may be provided at construction time and accessed via the <pre><code> getException() </code></pre> method is now known as the <i> cause </i> , and may be accessed via the <pre><code> getCause() </code></pre> method, as well as the aforementioned "legacy method." </p><pre><code>public class ExceptionInInitializerError\n</code></pre></section>	https://developer.android.com/reference/java/lang/ExceptionInInitializerError.html
Float	A										<section class="prog__container"><p> The <pre><code> Float </code></pre> class wraps a value of primitive type <pre><code> float </code></pre> in an object. An object of type <pre><code> Float </code></pre> contains a single field whose type is <pre><code> float </code></pre> . <p> In addition, this class provides several methods for converting a <pre><code> float </code></pre> to a <pre><code> String </code></pre> and a <pre><code> String </code></pre> to a <pre><code> float </code></pre> , as well as other constants and methods useful when dealing with a <pre><code> float </code></pre> . </p><pre><code>public final class Float\n</code></pre></section>	https://developer.android.com/reference/java/lang/Float.html
FunctionalInterface	A										<section class="prog__container"><p> An informative annotation type used to indicate that an interface type declaration is intended to be a <i> functional interface </i> as defined by the Java Language Specification. Conceptually, a functional interface has exactly one abstract method. Since default methods</p><pre><code>public abstract @interface FunctionalInterface\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/java/lang/FunctionalInterface.html
IllegalAccessError	A										<section class="prog__container"><p> Thrown if an application attempts to access or modify a field, or to call a method that it does not have access to. <p> Normally, this error is caught by the compiler; this error can only occur at run time if the definition of a class has incompatibly changed. </p><pre><code>public class IllegalAccessError\n</code></pre></section>	https://developer.android.com/reference/java/lang/IllegalAccessError.html
IllegalAccessException	A										<section class="prog__container"><p> An IllegalAccessException is thrown when an application tries to reflectively create an instance (other than an array), set or get a field, or invoke a method, but the currently executing method does not have access to the definition of the specified class, field, method or constructor.</p><pre><code>public class IllegalAccessException\n</code></pre></section>	https://developer.android.com/reference/java/lang/IllegalAccessException.html
IllegalArgumentException	A										<section class="prog__container"><p> Thrown to indicate that a method has been passed an illegal or inappropriate argument.</p><pre><code>public class IllegalArgumentException\n</code></pre></section>	https://developer.android.com/reference/java/lang/IllegalArgumentException.html
IllegalMonitorStateException	A										<section class="prog__container"><p> Thrown to indicate that a thread has attempted to wait on an object's monitor or to notify other threads waiting on an object's monitor without owning the specified monitor.</p><pre><code>public class IllegalMonitorStateException\n</code></pre></section>	https://developer.android.com/reference/java/lang/IllegalMonitorStateException.html
IllegalStateException	A										<section class="prog__container"><p> Signals that a method has been invoked at an illegal or inappropriate time. In other words, the Java environment or Java application is not in an appropriate state for the requested operation.</p><pre><code>public class IllegalStateException\n</code></pre></section>	https://developer.android.com/reference/java/lang/IllegalStateException.html
IllegalThreadStateException	A										<section class="prog__container"><p> Thrown to indicate that a thread is not in an appropriate state for the requested operation. See, for example, the <pre><code> suspend </code></pre> and <pre><code> resume </code></pre> methods in class <pre><code> Thread </code></pre> .</p><pre><code>public class IllegalThreadStateException\n</code></pre></section>	https://developer.android.com/reference/java/lang/IllegalThreadStateException.html
IncompatibleClassChangeError	A										<section class="prog__container"><p> Thrown when an incompatible class change has occurred to some class definition. The definition of some class, on which the currently executing method depends, has since changed.</p><pre><code>public class IncompatibleClassChangeError\n</code></pre></section>	https://developer.android.com/reference/java/lang/IncompatibleClassChangeError.html
IndexOutOfBoundsException	A										<section class="prog__container"><p> Thrown to indicate that an index of some sort (such as to an array, to a string, or to a vector) is out of range. <p> Applications can subclass this class to indicate similar exceptions. </p><pre><code>public class IndexOutOfBoundsException\n</code></pre></section>	https://developer.android.com/reference/java/lang/IndexOutOfBoundsException.html
InheritableThreadLocal	A										<section class="prog__container"><p> This class extends <tt> ThreadLocal </tt> to provide inheritance of values from parent thread to child thread: when a child thread is created, the child receives initial values for all inheritable thread-local variables for which the parent has values. Normally the child's values will be identical to the parent's; however, the child's value can be made an arbitrary function of the parent's by overriding the <tt> childValue </tt> method in this class. <p> Inheritable thread-local variables are used in preference to ordinary thread-local variables when the per-thread-attribute being maintained in the variable (e.g., User ID, Transaction ID) must be automatically transmitted to any child threads that are created. </p><pre><code>public class InheritableThreadLocal\n</code></pre></section>	https://developer.android.com/reference/java/lang/InheritableThreadLocal.html
InstantiationError	A										<section class="prog__container"><p> Thrown when an application tries to use the Java <pre><code> new </code></pre> construct to instantiate an abstract class or an interface. <p> Normally, this error is caught by the compiler; this error can only occur at run time if the definition of a class has incompatibly changed. </p><pre><code>public class InstantiationError\n</code></pre></section>	https://developer.android.com/reference/java/lang/InstantiationError.html
InstantiationException	A										<section class="prog__container"><p> Thrown when an application tries to create an instance of a class using the <pre><code> newInstance </code></pre> method in class <pre><code> Class </code></pre> , but the specified class object cannot be instantiated. The instantiation can fail for a variety of reasons including but not limited to: <ul> <li> the class object represents an abstract class, an interface, an array class, a primitive type, or <pre><code> void </code></pre> <li> the class has no nullary constructor </li> </li> </ul></p><pre><code>public class InstantiationException\n</code></pre></section>	https://developer.android.com/reference/java/lang/InstantiationException.html
Integer	A										<section class="prog__container"><p> The <pre><code> Integer </code></pre> class wraps a value of the primitive type <pre><code> int </code></pre> in an object. An object of type <pre><code> Integer </code></pre> contains a single field whose type is <pre><code> int </code></pre> . <p> In addition, this class provides several methods for converting an <pre><code> int </code></pre> to a <pre><code> String </code></pre> and a <pre><code> String </code></pre> to an <pre><code> int </code></pre> , as well as other constants and methods useful when dealing with an <pre><code> int </code></pre> . <p> Implementation note: The implementations of the "bit twiddling" methods (such as <pre><code> highestOneBit </code></pre> and <pre><code> numberOfTrailingZeros </code></pre> ) are based on material from Henry S. Warren, Jr.'s <i> Hacker's Delight </i> , (Addison Wesley, 2002). </p><pre><code>public final class Integer\n</code></pre></section>	https://developer.android.com/reference/java/lang/Integer.html
InternalError	A										<section class="prog__container"><p> Thrown to indicate some unexpected internal error has occurred in the Java Virtual Machine.</p><pre><code>public class InternalError\n</code></pre></section>	https://developer.android.com/reference/java/lang/InternalError.html
InterruptedException	A										<section class="prog__container"><p> Thrown when a thread is waiting, sleeping, or otherwise occupied, and the thread is interrupted, either before or during the activity. Occasionally a method may wish to test whether the current thread has been interrupted, and if so, to immediately throw this exception. The following code can be used to achieve this effect: <pre> if (Thread.interrupted()) // Clears interrupted status! throw new InterruptedException(); </pre></p><pre><code>public class InterruptedException\n</code></pre></section>	https://developer.android.com/reference/java/lang/InterruptedException.html
Iterable	A										<section class="prog__container"><p> Implementing this interface allows an object to be the target of the "for-each loop" statement. See <strong> For-each Loop </strong></p><pre><code>public interface Iterable\n</code></pre></section>	https://developer.android.com/reference/java/lang/Iterable.html
LinkageError	A										<section class="prog__container"><p> Subclasses of <pre><code> LinkageError </code></pre> indicate that a class has some dependency on another class; however, the latter class has incompatibly changed after the compilation of the former class.</p><pre><code>public class LinkageError\n</code></pre></section>	https://developer.android.com/reference/java/lang/LinkageError.html
Long	A										<section class="prog__container"><p> The <pre><code> Long </code></pre> class wraps a value of the primitive type <pre><code> long </code></pre> in an object. An object of type <pre><code> Long </code></pre> contains a single field whose type is <pre><code> long </code></pre> . <p> In addition, this class provides several methods for converting a <pre><code> long </code></pre> to a <pre><code> String </code></pre> and a <pre><code> String </code></pre> to a <pre><code> long </code></pre> , as well as other constants and methods useful when dealing with a <pre><code> long </code></pre> . <p> Implementation note: The implementations of the "bit twiddling" methods (such as <pre><code> highestOneBit </code></pre> and <pre><code> numberOfTrailingZeros </code></pre> ) are based on material from Henry S. Warren, Jr.'s <i> Hacker's Delight </i> , (Addison Wesley, 2002). </p><pre><code>public final class Long\n</code></pre></section>	https://developer.android.com/reference/java/lang/Long.html
Math	A										<section class="prog__container"><p> The class <pre><code> Math </code></pre> contains methods for performing basic numeric operations such as the elementary exponential, logarithm, square root, and trigonometric functions. <p> Unlike some of the numeric methods of class <pre><code> StrictMath </code></pre> , all implementations of the equivalent functions of class <pre><code> Math </code></pre> are not defined to return the bit-for-bit same results. This relaxation permits better-performing implementations where strict reproducibility is not required. <p> By default many of the <pre><code> Math </code></pre> methods simply call the equivalent method in <pre><code> StrictMath </code></pre> for their implementation. Code generators are encouraged to use platform-specific native libraries or microprocessor instructions, where available, to provide higher-performance implementations of <pre><code> Math </code></pre> methods. Such higher-performance implementations still must conform to the specification for <pre><code> Math </code></pre> . <p> The quality of implementation specifications concern two properties, accuracy of the returned result and monotonicity of the method. Accuracy of the floating-point <pre><code> Math </code></pre> methods is measured in terms of <i> ulps </i> , units in the last place. For a given floating-point format, an ulp of a specific real number value is the distance between the two floating-point values bracketing that numerical value. When discussing the accuracy of a method as a whole rather than at a specific argument, the number of ulps cited is for the worst-case error at any argument. If a method always has an error less than 0.5 ulps, the method always returns the floating-point number nearest the exact result; such a method is <i> correctly rounded </i> . A correctly rounded method is generally the best a floating-point approximation can be; however, it is impractical for many floating-point methods to be correctly rounded. Instead, for the <pre><code> Math </code></pre> class, a larger error bound of 1 or 2 ulps is allowed for certain methods. Informally, with a 1 ulp error bound, when the exact result is a representable number, the exact result should be returned as the computed result; otherwise, either of the two floating-point values which bracket the exact result may be returned. For exact results large in magnitude, one of the endpoints of the bracket may be infinite. Besides accuracy at individual arguments, maintaining proper relations between the method at different arguments is also important. Therefore, most methods with more than 0.5 ulp errors are required to be <i> semi-monotonic </i> : whenever the mathematical function is non-decreasing, so is the floating-point approximation, likewise, whenever the mathematical function is non-increasing, so is the floating-point approximation. Not all approximations that have 1 ulp accuracy will automatically meet the monotonicity requirements. </p><pre><code>public final class Math\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/Math.html
NegativeArraySizeException	A										<section class="prog__container"><p> Thrown if an application tries to create an array with negative size.</p><pre><code>public class NegativeArraySizeException\n</code></pre></section>	https://developer.android.com/reference/java/lang/NegativeArraySizeException.html
NoClassDefFoundError	A										<section class="prog__container"><p> Thrown if the Java Virtual Machine or a <pre><code> ClassLoader </code></pre> instance tries to load in the definition of a class (as part of a normal method call or as part of creating a new instance using the <pre><code> new </code></pre> expression) and no definition of the class could be found. <p> The searched-for class definition existed when the currently executing class was compiled, but the definition can no longer be found. </p><pre><code>public class NoClassDefFoundError\n</code></pre></section>	https://developer.android.com/reference/java/lang/NoClassDefFoundError.html
NoSuchFieldError	A										<section class="prog__container"><p> Thrown if an application tries to access or modify a specified field of an object, and that object no longer has that field. <p> Normally, this error is caught by the compiler; this error can only occur at run time if the definition of a class has incompatibly changed. </p><pre><code>public class NoSuchFieldError\n</code></pre></section>	https://developer.android.com/reference/java/lang/NoSuchFieldError.html
NoSuchFieldException	A										<section class="prog__container"><p> Signals that the class doesn't have a field of a specified name.</p><pre><code>public class NoSuchFieldException\n</code></pre></section>	https://developer.android.com/reference/java/lang/NoSuchFieldException.html
NoSuchMethodError	A										<section class="prog__container"><p> Thrown if an application tries to call a specified method of a class (either static or instance), and that class no longer has a definition of that method. <p> Normally, this error is caught by the compiler; this error can only occur at run time if the definition of a class has incompatibly changed. </p><pre><code>public class NoSuchMethodError\n</code></pre></section>	https://developer.android.com/reference/java/lang/NoSuchMethodError.html
NoSuchMethodException	A										<section class="prog__container"><p> Thrown when a particular method cannot be found.</p><pre><code>public class NoSuchMethodException\n</code></pre></section>	https://developer.android.com/reference/java/lang/NoSuchMethodException.html
NullPointerException	A										<section class="prog__container"><p> Thrown when an application attempts to use <pre><code> null </code></pre> in a case where an object is required. These include: <ul> <li> Calling the instance method of a <pre><code> null </code></pre> object. <li> Accessing or modifying the field of a <pre><code> null </code></pre> object. <li> Taking the length of <pre><code> null </code></pre> as if it were an array. <li> Accessing or modifying the slots of <pre><code> null </code></pre> as if it were an array. <li> Throwing <pre><code> null </code></pre> as if it were a <pre><code> Throwable </code></pre> value. </li> </li> </li> </li> </li> </ul> <p> Applications should throw instances of this class to indicate other illegal uses of the <pre><code> null </code></pre> object. <pre><code> NullPointerException </code></pre> objects may be constructed by the virtual machine as if suppression were disabled and/or the stack trace was not writable </p><pre><code>public class NullPointerException\n</code></pre></section>	https://developer.android.com/reference/java/lang/NullPointerException.html
Number	A										<section class="prog__container"><p> The abstract class <pre><code> Number </code></pre> is the superclass of classes <pre><code> BigDecimal </code></pre> , <pre><code> BigInteger </code></pre> , <pre><code> Byte </code></pre> , <pre><code> Double </code></pre> , <pre><code> Float </code></pre> , <pre><code> Integer </code></pre> , <pre><code> Long </code></pre> , and <pre><code> Short </code></pre> . <p> Subclasses of <pre><code> Number </code></pre> must provide methods to convert the represented numeric value to <pre><code> byte </code></pre> , <pre><code> double </code></pre> , <pre><code> float </code></pre> , <pre><code> int </code></pre> , <pre><code> long </code></pre> , and <pre><code> short </code></pre> . </p><pre><code>public abstract class Number\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/Number.html
NumberFormatException	A										<section class="prog__container"><p> Thrown to indicate that the application has attempted to convert a string to one of the numeric types, but that the string does not have the appropriate format.</p><pre><code>public class NumberFormatException\n</code></pre></section>	https://developer.android.com/reference/java/lang/NumberFormatException.html
Object	A										<section class="prog__container"><p> Class <pre><code> Object </code></pre> is the root of the class hierarchy. Every class has <pre><code> Object </code></pre> as a superclass. All objects, including arrays, implement the methods of this class.</p><pre><code>public class Object\n</code></pre></section>	https://developer.android.com/reference/java/lang/Object.html
OutOfMemoryError	A										<section class="prog__container"><p> Thrown when the Java Virtual Machine cannot allocate an object because it is out of memory, and no more memory could be made available by the garbage collector. <pre><code> OutOfMemoryError </code></pre> objects may be constructed by the virtual machine as if suppression were disabled and/or the stack trace was not writable</p><pre><code>public class OutOfMemoryError\n</code></pre></section>	https://developer.android.com/reference/java/lang/OutOfMemoryError.html
Override	A										<section class="prog__container"><p> Indicates that a method declaration is intended to override a method declaration in a supertype. If a method is annotated with this annotation type compilers are required to generate an error message unless at least one of the following conditions hold: <ul> <li> The method does override or implement a method declared in a supertype. </li> <li> The method has a signature that is override-equivalent to that of any public method declared in Object </li> </ul></p><pre><code>public abstract @interface Override\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/java/lang/Override.html
java.lang	A										<section class="prog__container">Frequently it is necessary to represent a value of primitive type as if it were an object. The wrapper classes</section>	https://developer.android.com/reference/java/lang/package-summary.html
Package	A										<section class="prog__container"><p> <pre><code> Package </code></pre> objects contain version information about the implementation and specification of a Java package. This versioning information is retrieved and made available by the <pre><code> ClassLoader </code></pre> instance that loaded the class(es). Typically, it is stored in the manifest that is distributed with the classes. <p> The set of classes that make up the package may implement a particular specification and if so the specification title, version number, and vendor strings identify that specification. An application can ask if the package is compatible with a particular version, see the <pre><code> isCompatibleWith </code></pre> method for details. <p> Specification version numbers use a syntax that consists of nonnegative decimal integers separated by periods ".", for example "2.0" or "1.2.3.4.5.6.7". This allows an extensible number to be used to represent major, minor, micro, etc. versions. The version specification is described by the following formal grammar: <blockquote> <dl> <dt> <i> SpecificationVersion: <dd> Digits RefinedVersion <sub> opt </sub> </dd> </i> <p> <dt> <i> RefinedVersion: </i> <dd> <pre><code> . </code></pre> <i> Digits </i> <dd> <pre><code> . </code></pre> <i> Digits RefinedVersion </i> <p> <dt> <i> Digits: <dd> Digit <dd> Digits </dd> </dd> </i> <p> <dt> <i> Digit: </i> <dd> any character for which <pre><code> isDigit(char) </code></pre> returns <pre><code> true </code></pre> , e.g. 0, 1, 2, ... </dd> </dt> </p><pre><code>public class Package\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/Package.html
Process	A										<section class="prog__container"><p> The <pre><code> start() </code></pre> and <pre><code> Runtime.exec </code></pre> methods create a native process and return an instance of a subclass of <pre><code> Process </code></pre> that can be used to control the process and obtain information about it. The class <pre><code> Process </code></pre> provides methods for performing input from the process, performing output to the process, waiting for the process to complete, checking the exit status of the process, and destroying (killing) the process. <p> The methods that create processes may not work well for special processes on certain native platforms, such as native windowing processes, daemon processes, Win16/DOS processes on Microsoft Windows, or shell scripts. <p> By default, the created subprocess does not have its own terminal or console. All its standard I/O (i.e. stdin, stdout, stderr) operations will be redirected to the parent process, where they can be accessed via the streams obtained using the methods <pre><code> getOutputStream() </code></pre> , <pre><code> getInputStream() </code></pre> , and <pre><code> getErrorStream() </code></pre> . The parent process uses these streams to feed input to and get output from the subprocess. Because some native platforms only provide limited buffer size for standard input and output streams, failure to promptly write the input stream or read the output stream of the subprocess may cause the subprocess to block, or even deadlock. <p> The subprocess is not killed when there are no more references to the <pre><code> Process </code></pre> object, but rather the subprocess continues executing asynchronously. <p> There is no requirement that a process represented by a <pre><code> Process </code></pre> object execute asynchronously or concurrently with respect to the Java process that owns the <pre><code> Process </code></pre> object. <p> As of 1.5, <pre><code> start() </code></pre> is the preferred way to create a <pre><code> Process </code></pre> . </p><pre><code>public abstract class Process\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/Process.html
ProcessBuilder	A										<section class="prog__container"><p> This class is used to create operating system processes. <p> Each <pre><code> ProcessBuilder </code></pre> instance manages a collection of process attributes. The <pre><code> start() </code></pre> method creates a new <pre><code> Process </code></pre> instance with those attributes. The <pre><code> start() </code></pre> method can be invoked repeatedly from the same instance to create new subprocesses with identical or related attributes. <p> Each process builder manages these process attributes: <ul> <li> a <i> command </i> , a list of strings which signifies the external program file to be invoked and its arguments, if any. Which string lists represent a valid operating system command is system-dependent. For example, it is common for each conceptual argument to be an element in this list, but there are operating systems where programs are expected to tokenize command line strings themselves - on such a system a Java implementation might require commands to contain exactly two elements. <li> an <i> environment </i> , which is a system-dependent mapping from <i> variables </i> to <i> values </i> . The initial value is a copy of the environment of the current process (see <pre><code> getenv() </code></pre> ). <li> a <i> working directory </i> . The default value is the current working directory of the current process, usually the directory named by the system property <pre><code> user.dir </code></pre> . <p> Modifying a process builder's attributes will affect processes subsequently started by that object's <pre><code> start() </code></pre> method, but will never affect previously started processes or the Java process itself. <p> Most error checking is performed by the <pre><code> start() </code></pre> method. It is possible to modify the state of an object so that <pre><code> start() </code></pre> will fail. For example, setting the command attribute to an empty list will not throw an exception unless <pre><code> start() </code></pre> is invoked. <p> <strong> Note that this class is not synchronized. </strong> If multiple threads access a <pre><code> ProcessBuilder </code></pre> instance concurrently, and at least one of the threads modifies one of the attributes structurally, it <i> must </i> be synchronized externally. <p> Starting a new process which uses the default working directory and environment is easy: <pre> <pre><code>Process p = new ProcessBuilder("myCommand", "myArg").start(); </code></pre></pre> <p> Here is an example that starts a process with a modified working directory and environment: <pre> <pre><code>ProcessBuilder pb = new ProcessBuilder("myCommand", "myArg1", "myArg2"); Map&lt;String, String&gt; env = pb.environment(); env.put("VAR1", "myValue"); env.remove("OTHERVAR"); env.put("VAR2", env.get("VAR1") + "suffix"); pb.directory(new File("myDir")); Process p = pb.start(); </code></pre></pre> <p> To start a process with an explicit set of environment variables, first call <pre><code> Map.clear() </code></pre> before adding environment variables. </p><pre><code>public final class ProcessBuilder\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/ProcessBuilder.html
Readable	A										<section class="prog__container"><p> A <tt> Readable </tt> is a source of characters. Characters from a <tt> Readable </tt> are made available to callers of the read method via a <pre><code> CharBuffer </code></pre> .</p><pre><code>public interface Readable\n</code></pre></section>	https://developer.android.com/reference/java/lang/Readable.html
ReflectiveOperationException	A										<section class="prog__container"><p> Common superclass of exceptions thrown by reflective operations in core reflection.</p><pre><code>public class ReflectiveOperationException\n</code></pre></section>	https://developer.android.com/reference/java/lang/ReflectiveOperationException.html
Runnable	A										<section class="prog__container"><p> The <pre><code> Runnable </code></pre> interface should be implemented by any class whose instances are intended to be executed by a thread. The class must define a method of no arguments called <pre><code> run </code></pre> . <p> This interface is designed to provide a common protocol for objects that wish to execute code while they are active. For example, <pre><code> Runnable </code></pre> is implemented by class <pre><code> Thread </code></pre> . Being active simply means that a thread has been started and has not yet been stopped. <p> In addition, <pre><code> Runnable </code></pre> provides the means for a class to be active while not subclassing <pre><code> Thread </code></pre> . A class that implements <pre><code> Runnable </code></pre> can run without subclassing <pre><code> Thread </code></pre> by instantiating a <pre><code> Thread </code></pre> instance and passing itself in as the target. In most cases, the <pre><code> Runnable </code></pre> interface should be used if you are only planning to override the <pre><code> run() </code></pre> method and no other <pre><code> Thread </code></pre> methods. This is important because classes should not be subclassed unless the programmer intends on modifying or enhancing the fundamental behavior of the class. </p><pre><code>public interface Runnable\n</code></pre></section>	https://developer.android.com/reference/java/lang/Runnable.html
Runtime	A										<section class="prog__container"><p> Every Java application has a single instance of class <pre><code> Runtime </code></pre> that allows the application to interface with the environment in which the application is running. The current runtime can be obtained from the <pre><code> getRuntime </code></pre> method. <p> An application cannot create its own instance of this class. </p><pre><code>public class Runtime\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/Runtime.html
RuntimeException	A										<section class="prog__container"><p> <pre><code> RuntimeException </code></pre> is the superclass of those exceptions that can be thrown during the normal operation of the Java Virtual Machine. <p> <pre><code> RuntimeException </code></pre> and its subclasses are <em> unchecked exceptions </em> . Unchecked exceptions do <em> not </em> need to be declared in a method or constructor's <pre><code> throws </code></pre> clause if they can be thrown by the execution of the method or constructor and propagate outside the method or constructor boundary. </p><pre><code>public class RuntimeException\n</code></pre></section>	https://developer.android.com/reference/java/lang/RuntimeException.html
RuntimePermission	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public final class RuntimePermission\n</code></pre></section>	https://developer.android.com/reference/java/lang/RuntimePermission.html
SafeVarargs	A										<section class="prog__container"><p> A programmer assertion that the body of the annotated method or constructor does not perform potentially unsafe operations on its varargs parameter. Applying this annotation to a method or constructor suppresses unchecked warnings about a <i> non-reifiable </i> variable arity (vararg) type and suppresses unchecked warnings about parameterized array creation at call sites. <p> In addition to the usage restrictions imposed by its <pre><code> @Target </code></pre> meta-annotation, compilers are required to implement additional usage restrictions on this annotation type; it is a compile-time error if a method or constructor declaration is annotated with a <pre><code> @SafeVarargs </code></pre> annotation, and either: <ul> <li> the declaration is a fixed arity method or constructor <li> the declaration is a variable arity method that is neither <pre><code> static </code></pre> nor <pre><code> final </code></pre> . </li> </li> </ul> <p> Compilers are encouraged to issue warnings when this annotation type is applied to a method or constructor declaration where: <ul> <li> The variable arity parameter has a reifiable element type, which includes primitive types, <pre><code> Object </code></pre> , and <pre><code> String </code></pre> . (The unchecked warnings this annotation type suppresses already do not occur for a reifiable element type.) <li> The body of the method or constructor declaration performs potentially unsafe operations, such as an assignment to an element of the variable arity parameter's array that generates an unchecked warning. Some unsafe operations do not trigger an unchecked warning. For example, the aliasing in <blockquote> <pre> @SafeVarargs // Not actually safe! static void m(List&lt;String&gt;... stringLists) { Object[] array = stringLists; List&lt;Integer&gt; tmpList = Arrays.asList(42); array[0] = tmpList; // Semantically invalid, but compiles without warnings String s = stringLists[0].get(0); // Oh no, ClassCastException at runtime! } </pre> </blockquote> leads to a <pre><code> ClassCastException </code></pre> at runtime. <p> Future versions of the platform may mandate compiler errors for such unsafe operations. </p><pre><code>public abstract @interface SafeVarargs\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/java/lang/SafeVarargs.html
SecurityException	A										<section class="prog__container"><p> Thrown by the security manager to indicate a security violation.</p><pre><code>public class SecurityException\n</code></pre></section>	https://developer.android.com/reference/java/lang/SecurityException.html
SecurityManager	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public class SecurityManager\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/SecurityManager.html
Short	A										<section class="prog__container"><p> The <pre><code> Short </code></pre> class wraps a value of primitive type <pre><code> short </code></pre> in an object. An object of type <pre><code> Short </code></pre> contains a single field whose type is <pre><code> short </code></pre> . <p> In addition, this class provides several methods for converting a <pre><code> short </code></pre> to a <pre><code> String </code></pre> and a <pre><code> String </code></pre> to a <pre><code> short </code></pre> , as well as other constants and methods useful when dealing with a <pre><code> short </code></pre> . </p><pre><code>public final class Short\n</code></pre></section>	https://developer.android.com/reference/java/lang/Short.html
StackOverflowError	A										<section class="prog__container"><p> Thrown when a stack overflow occurs because an application recurses too deeply.</p><pre><code>public class StackOverflowError\n</code></pre></section>	https://developer.android.com/reference/java/lang/StackOverflowError.html
StackTraceElement	A										<section class="prog__container"><p> An element in a stack trace, as returned by <pre><code> getStackTrace() </code></pre> . Each element represents a single stack frame. All stack frames except for the one at the top of the stack represent a method invocation. The frame at the top of the stack represents the execution point at which the stack trace was generated. Typically, this is the point at which the throwable corresponding to the stack trace was created.</p><pre><code>public final class StackTraceElement\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/StackTraceElement.html
StrictMath	A										<section class="prog__container"><p> The class <pre><code> StrictMath </code></pre> contains methods for performing basic numeric operations such as the elementary exponential, logarithm, square root, and trigonometric functions. <p> To help ensure portability of Java programs, the definitions of some of the numeric functions in this package require that they produce the same results as certain published algorithms. These algorithms are available from the well-known network library <pre><code> netlib </code></pre> as the package "Freely Distributable Math Library," <pre><code> fdlibm </code></pre> . These algorithms, which are written in the C programming language, are then to be understood as executed with all floating-point operations following the rules of Java floating-point arithmetic. <p> The Java math library is defined with respect to <pre><code> fdlibm </code></pre> version 5.3. Where <pre><code> fdlibm </code></pre> provides more than one definition for a function (such as <pre><code> acos </code></pre> ), use the "IEEE 754 core function" version (residing in a file whose name begins with the letter <pre><code> e </code></pre> ). The methods which require <pre><code> fdlibm </code></pre> semantics are <pre><code> sin </code></pre> , <pre><code> cos </code></pre> , <pre><code> tan </code></pre> , <pre><code> asin </code></pre> , <pre><code> acos </code></pre> , <pre><code> atan </code></pre> , <pre><code> exp </code></pre> , <pre><code> log </code></pre> , <pre><code> log10 </code></pre> , <pre><code> cbrt </code></pre> , <pre><code> atan2 </code></pre> , <pre><code> pow </code></pre> , <pre><code> sinh </code></pre> , <pre><code> cosh </code></pre> , <pre><code> tanh </code></pre> , <pre><code> hypot </code></pre> , <pre><code> expm1 </code></pre> , and <pre><code> log1p </code></pre> . </p><pre><code>public final class StrictMath\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/StrictMath.html
String	A										<section class="prog__container"><p> The <pre><code> String </code></pre> class represents character strings. All string literals in Java programs, such as <pre><code> "abc" </code></pre> , are implemented as instances of this class. <p> Strings are constant; their values cannot be changed after they are created. String buffers support mutable strings. Because String objects are immutable they can be shared. For example: <p> <blockquote> <pre> String str = "abc"; </pre> </blockquote> <p> is equivalent to: <p> <blockquote> <pre> char data[] = {'a', 'b', 'c'}; String str = new String(data); </pre> </blockquote> <p> Here are some more examples of how strings can be used: <p> <blockquote> <pre> System.out.println("abc"); String cde = "cde"; System.out.println("abc" + cde); String c = "abc".substring(2,3); String d = cde.substring(1, 2); </pre> </blockquote> <p> The class <pre><code> String </code></pre> includes methods for examining individual characters of the sequence, for comparing strings, for searching strings, for extracting substrings, and for creating a copy of a string with all characters translated to uppercase or to lowercase. Case mapping is based on the Unicode Standard version specified by the <pre><code> Character </code></pre> class. <p> The Java language provides special support for the string concatenation operator ( + ), and for conversion of other objects to strings. String concatenation is implemented through the <pre><code> StringBuilder </code></pre> (or <pre><code> StringBuffer </code></pre> ) class and its <pre><code> append </code></pre> method. String conversions are implemented through the method <pre><code> toString </code></pre> , defined by <pre><code> Object </code></pre> and inherited by all classes in Java. For additional information on string concatenation and conversion, see Gosling, Joy, and Steele, <i> The Java Language Specification </i> . <p> Unless otherwise noted, passing a <tt> null </tt> argument to a constructor or method in this class will cause a <pre><code> NullPointerException </code></pre> to be thrown. <p> A <pre><code> String </code></pre> represents a string in the UTF-16 format in which <em> supplementary characters </em> are represented by <em> surrogate pairs </em> (see the section Unicode Character Representations in the <pre><code> Character </code></pre> class for more information). Index values refer to <pre><code> char </code></pre> code units, so a supplementary character uses two positions in a <pre><code> String </code></pre> . <p> The <pre><code> String </code></pre> class provides methods for dealing with Unicode code points (i.e., characters), in addition to those for dealing with Unicode code units (i.e., <pre><code> char </code></pre> values). </p><pre><code>public final class String\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/String.html
StringBuffer	A										<section class="prog__container"><p> A thread-safe, mutable sequence of characters. A string buffer is like a <pre><code> String </code></pre> , but can be modified. At any point in time it contains some particular sequence of characters, but the length and content of the sequence can be changed through certain method calls. <p> String buffers are safe for use by multiple threads. The methods are synchronized where necessary so that all the operations on any particular instance behave as if they occur in some serial order that is consistent with the order of the method calls made by each of the individual threads involved. <p> The principal operations on a <pre><code> StringBuffer </code></pre> are the <pre><code> append </code></pre> and <pre><code> insert </code></pre> methods, which are overloaded so as to accept data of any type. Each effectively converts a given datum to a string and then appends or inserts the characters of that string to the string buffer. The <pre><code> append </code></pre> method always adds these characters at the end of the buffer; the <pre><code> insert </code></pre> method adds the characters at a specified point. <p> For example, if <pre><code> z </code></pre> refers to a string buffer object whose current contents are " <pre><code> start </code></pre> ", then the method call <pre><code> z.append("le") </code></pre> would cause the string buffer to contain " <pre><code> startle </code></pre> ", whereas <pre><code> z.insert(4, "le") </code></pre> would alter the string buffer to contain " <pre><code> starlet </code></pre> ". <p> In general, if sb refers to an instance of a <pre><code> StringBuffer </code></pre> , then <pre><code> sb.append(x) </code></pre> has the same effect as <pre><code> sb.insert(sb.length(), x) </code></pre> . <p> Whenever an operation occurs involving a source sequence (such as appending or inserting from a source sequence) this class synchronizes only on the string buffer performing the operation, not on the source. <p> Every string buffer has a capacity. As long as the length of the character sequence contained in the string buffer does not exceed the capacity, it is not necessary to allocate a new internal buffer array. If the internal buffer overflows, it is automatically made larger. As of release JDK 5, this class has been supplemented with an equivalent class designed for use by a single thread, <pre><code> StringBuilder </code></pre> . The <tt> StringBuilder </tt> class should generally be used in preference to this one, as it supports all of the same operations but it is faster, as it performs no synchronization. </p><pre><code>public final class StringBuffer\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/StringBuffer.html
StringBuilder	A										<section class="prog__container"><p> A mutable sequence of characters. This class provides an API compatible with <pre><code> StringBuffer </code></pre> , but with no guarantee of synchronization. This class is designed for use as a drop-in replacement for <pre><code> StringBuffer </code></pre> in places where the string buffer was being used by a single thread (as is generally the case). Where possible, it is recommended that this class be used in preference to <pre><code> StringBuffer </code></pre> as it will be faster under most implementations. <p> The principal operations on a <pre><code> StringBuilder </code></pre> are the <pre><code> append </code></pre> and <pre><code> insert </code></pre> methods, which are overloaded so as to accept data of any type. Each effectively converts a given datum to a string and then appends or inserts the characters of that string to the string builder. The <pre><code> append </code></pre> method always adds these characters at the end of the builder; the <pre><code> insert </code></pre> method adds the characters at a specified point. <p> For example, if <pre><code> z </code></pre> refers to a string builder object whose current contents are " <pre><code> start </code></pre> ", then the method call <pre><code> z.append("le") </code></pre> would cause the string builder to contain " <pre><code> startle </code></pre> ", whereas <pre><code> z.insert(4, "le") </code></pre> would alter the string builder to contain " <pre><code> starlet </code></pre> ". <p> In general, if sb refers to an instance of a <pre><code> StringBuilder </code></pre> , then <pre><code> sb.append(x) </code></pre> has the same effect as <pre><code> sb.insert(sb.length(), x) </code></pre> . Every string builder has a capacity. As long as the length of the character sequence contained in the string builder does not exceed the capacity, it is not necessary to allocate a new internal buffer. If the internal buffer overflows, it is automatically made larger. <p> Instances of <pre><code> StringBuilder </code></pre> are not safe for use by multiple threads. If such synchronization is required then it is recommended that <pre><code> StringBuffer </code></pre> be used. </p><pre><code>public final class StringBuilder\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/StringBuilder.html
StringIndexOutOfBoundsException	A										<section class="prog__container"><p> Thrown by <pre><code> String </code></pre> methods to indicate that an index is either negative or greater than the size of the string. For some methods such as the charAt method, this exception also is thrown when the index is equal to the size of the string.</p><pre><code>public class StringIndexOutOfBoundsException\n</code></pre></section>	https://developer.android.com/reference/java/lang/StringIndexOutOfBoundsException.html
SuppressWarnings	A										<section class="prog__container"><p> Indicates that the named compiler warnings should be suppressed in the annotated element (and in all program elements contained in the annotated element). Note that the set of warnings suppressed in a given element is a superset of the warnings suppressed in all containing elements. For example, if you annotate a class to suppress one warning and annotate a method to suppress another, both warnings will be suppressed in the method. <p> As a matter of style, programmers should always use this annotation on the most deeply nested element where it is effective. If you want to suppress a warning in a particular method, you should annotate that method rather than its class. </p><pre><code>public abstract @interface SuppressWarnings\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/java/lang/SuppressWarnings.html
System	A										<section class="prog__container"><p> The <pre><code> System </code></pre> class contains several useful class fields and methods. It cannot be instantiated. <p> Among the facilities provided by the <pre><code> System </code></pre> class are standard input, standard output, and error output streams; access to externally defined properties and environment variables; a means of loading files and libraries; and a utility method for quickly copying a portion of an array. </p><pre><code>public final class System\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/System.html
Thread	A										<section class="prog__container"><p> A <i> thread </i> is a thread of execution in a program. The Java Virtual Machine allows an application to have multiple threads of execution running concurrently. <p> Every thread has a priority. Threads with higher priority are executed in preference to threads with lower priority. Each thread may or may not also be marked as a daemon. When code running in some thread creates a new <pre><code> Thread </code></pre> object, the new thread has its priority initially set equal to the priority of the creating thread, and is a daemon thread if and only if the creating thread is a daemon. <p> When a Java Virtual Machine starts up, there is usually a single non-daemon thread (which typically calls the method named <pre><code> main </code></pre> of some designated class). The Java Virtual Machine continues to execute threads until either of the following occurs: <ul> <li> The <pre><code> exit </code></pre> method of class <pre><code> Runtime </code></pre> has been called and the security manager has permitted the exit operation to take place. <li> All threads that are not daemon threads have died, either by returning from the call to the <pre><code> run </code></pre> method or by throwing an exception that propagates beyond the <pre><code> run </code></pre> method. </li> </li> </ul> <p> There are two ways to create a new thread of execution. One is to declare a class to be a subclass of <pre><code> Thread </code></pre> . This subclass should override the <pre><code> run </code></pre> method of class <pre><code> Thread </code></pre> . An instance of the subclass can then be allocated and started. For example, a thread that computes primes larger than a stated value could be written as follows: <p> <hr> <blockquote> <pre> class PrimeThread extends Thread { long minPrime; PrimeThread(long minPrime) { this.minPrime = minPrime; } public void run() { // compute primes larger than minPrime  . . . } } </pre> </blockquote> <hr> <p> The following code would then create a thread and start it running: <p> <blockquote> <pre> PrimeThread p = new PrimeThread(143); p.start(); </pre> </blockquote> <p> The other way to create a thread is to declare a class that implements the <pre><code> Runnable </code></pre> interface. That class then implements the <pre><code> run </code></pre> method. An instance of the class can then be allocated, passed as an argument when creating <pre><code> Thread </code></pre> , and started. The same example in this other style looks like the following: <p> <hr> <blockquote> <pre> class PrimeRun implements Runnable { long minPrime; PrimeRun(long minPrime) { this.minPrime = minPrime; } public void run() { // compute primes larger than minPrime  . . . } } </pre> </blockquote> <hr> <p> The following code would then create a thread and start it running: <p> <blockquote> <pre> PrimeRun p = new PrimeRun(143); new Thread(p).start(); </pre> </blockquote> <p> Every thread has a name for identification purposes. More than one thread may have the same name. If a name is not specified when a thread is created, a new name is generated for it. <p> Unless otherwise noted, passing a <pre><code> null </code></pre> argument to a constructor or method in this class will cause a <pre><code> NullPointerException </code></pre> to be thrown. </p><pre><code>public class Thread\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/Thread.html
Thread.State	A										<section class="prog__container"><p> A thread state. A thread can be in one of the following states: <ul> <li> <pre><code> NEW </code></pre> <br> A thread that has not yet started is in this state. </br> </li> <li> <pre><code> RUNNABLE </code></pre> <br> A thread executing in the Java virtual machine is in this state. </br> </li> <li> <pre><code> BLOCKED </code></pre> <br> A thread that is blocked waiting for a monitor lock is in this state. </br> </li> <li> <pre><code> WAITING </code></pre> <br> A thread that is waiting indefinitely for another thread to perform a particular action is in this state. </br> </li> <li> <pre><code> TIMED_WAITING </code></pre> <br> A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state. </br> </li> <li> <pre><code> TERMINATED </code></pre> <br> A thread that has exited is in this state. </br> </li> </ul> <p> A thread can be in only one state at a given point in time. These states are virtual machine states which do not reflect any operating system thread states. </p><pre><code>public static final enum Thread.State\n</code></pre></section>	https://developer.android.com/reference/java/lang/Thread.State.html
Thread.UncaughtExceptionHandler	A										<section class="prog__container"><p> Interface for handlers invoked when a <tt> Thread </tt> abruptly terminates due to an uncaught exception. <p> When a thread is about to terminate due to an uncaught exception the Java Virtual Machine will query the thread for its <tt> UncaughtExceptionHandler </tt> using <pre><code> getUncaughtExceptionHandler() </code></pre> and will invoke the handler's <tt> uncaughtException </tt> method, passing the thread and the exception as arguments. If a thread has not had its <tt> UncaughtExceptionHandler </tt> explicitly set, then its <tt> ThreadGroup </tt> object acts as its <tt> UncaughtExceptionHandler </tt> . If the <tt> ThreadGroup </tt> object has no special requirements for dealing with the exception, it can forward the invocation to the default uncaught exception handler </p><pre><code>public static interface Thread.UncaughtExceptionHandler\n</code></pre></section>	https://developer.android.com/reference/java/lang/Thread.UncaughtExceptionHandler.html
ThreadDeath	A										<section class="prog__container"><p> An instance of <pre><code> ThreadDeath </code></pre> is thrown in the victim thread when the (deprecated) <pre><code> stop() </code></pre> method is invoked. <p> An application should catch instances of this class only if it must clean up after being terminated asynchronously. If <pre><code> ThreadDeath </code></pre> is caught by a method, it is important that it be rethrown so that the thread actually dies. <p> The top-level error handler </p><pre><code>public class ThreadDeath\n</code></pre></section>	https://developer.android.com/reference/java/lang/ThreadDeath.html
ThreadGroup	A										<section class="prog__container"><p> A thread group represents a set of threads. In addition, a thread group can also include other thread groups. The thread groups form a tree in which every thread group except the initial thread group has a parent. <p> A thread is allowed to access information about its own thread group, but not to access information about its thread group's parent thread group or any other thread groups. </p><pre><code>public class ThreadGroup\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/ThreadGroup.html
ThreadLocal	A										<section class="prog__container"><p> This class provides thread-local variables. These variables differ from their normal counterparts in that each thread that accesses one (via its <tt> get </tt> or <tt> set </tt> method) has its own, independently initialized copy of the variable. <tt> ThreadLocal </tt> instances are typically private static fields in classes that wish to associate state with a thread (e.g., a user ID or Transaction ID). <p> For example, the class below generates unique identifiers local to each thread. A thread's id is assigned the first time it invokes <tt> ThreadId.get() </tt> and remains unchanged on subsequent calls. <pre> import java.util.concurrent.atomic.AtomicInteger; public class ThreadId { // Atomic integer containing the next thread ID to be assigned private static final AtomicInteger nextId = new AtomicInteger(0); // Thread local variable containing each thread's ID private static final ThreadLocal&lt;Integer&gt; threadId = new ThreadLocal&lt;Integer&gt;() { @Override protected Integer initialValue() { return nextId.getAndIncrement(); } }; // Returns the current thread's unique ID, assigning it if necessary public static int get() { return threadId.get(); } } </pre> <p> Each thread holds an implicit reference to its copy of a thread-local variable as long as the thread is alive and the <tt> ThreadLocal </tt> instance is accessible; after a thread goes away, all of its copies of thread-local instances are subject to garbage collection (unless other references to these copies exist). </p><pre><code>public class ThreadLocal\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/ThreadLocal.html
Throwable	A										<section class="prog__container"><p> The <pre><code> Throwable </code></pre> class is the superclass of all errors and exceptions in the Java language. Only objects that are instances of this class (or one of its subclasses) are thrown by the Java Virtual Machine or can be thrown by the Java <pre><code> throw </code></pre> statement. Similarly, only this class or one of its subclasses can be the argument type in a <pre><code> catch </code></pre> clause. For the purposes of compile-time checking of exceptions, <pre><code> Throwable </code></pre> and any subclass of <pre><code> Throwable </code></pre> that is not also a subclass of either <pre><code> RuntimeException </code></pre> or <pre><code> Error </code></pre> are regarded as checked exceptions. <p> Instances of two subclasses, <pre><code> Error </code></pre> and <pre><code> Exception </code></pre> , are conventionally used to indicate that exceptional situations have occurred. Typically, these instances are freshly created in the context of the exceptional situation so as to include relevant information (such as stack trace data). <p> A throwable contains a snapshot of the execution stack of its thread at the time it was created. It can also contain a message string that gives more information about the error. Over time, a throwable can suppress </p><pre><code>public class Throwable\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/Throwable.html
TypeNotPresentException	A										<section class="prog__container"><p> Thrown when an application tries to access a type using a string representing the type's name, but no definition for the type with the specified name can be found. This exception differs from <pre><code> ClassNotFoundException </code></pre> in that <tt> ClassNotFoundException </tt> is a checked exception, whereas this exception is unchecked. <p> Note that this exception may be used when undefined type variables are accessed as well as when types (e.g., classes, interfaces or annotation types) are loaded. In particular, this exception can be thrown by the API used to read annotations reflectively </p><pre><code>public class TypeNotPresentException\n</code></pre></section>	https://developer.android.com/reference/java/lang/TypeNotPresentException.html
UnknownError	A										<section class="prog__container"><p> Thrown when an unknown but serious exception has occurred in the Java Virtual Machine.</p><pre><code>public class UnknownError\n</code></pre></section>	https://developer.android.com/reference/java/lang/UnknownError.html
UnsatisfiedLinkError	A										<section class="prog__container"><p> Thrown if the Java Virtual Machine cannot find an appropriate native-language definition of a method declared <pre><code> native </code></pre> .</p><pre><code>public class UnsatisfiedLinkError\n</code></pre></section>	https://developer.android.com/reference/java/lang/UnsatisfiedLinkError.html
UnsupportedClassVersionError	A										<section class="prog__container"><p> Thrown when the Java Virtual Machine attempts to read a class file and determines that the major and minor version numbers in the file are not supported.</p><pre><code>public class UnsupportedClassVersionError\n</code></pre></section>	https://developer.android.com/reference/java/lang/UnsupportedClassVersionError.html
UnsupportedOperationException	A										<section class="prog__container"><p> Thrown to indicate that the requested operation is not supported. <p> This class is a member of the Java Collections Framework . </p><pre><code>public class UnsupportedOperationException\n</code></pre></section>	https://developer.android.com/reference/java/lang/UnsupportedOperationException.html
VerifyError	A										<section class="prog__container"><p> Thrown when the "verifier" detects that a class file, though well formed, contains some sort of internal inconsistency or security problem.</p><pre><code>public class VerifyError\n</code></pre></section>	https://developer.android.com/reference/java/lang/VerifyError.html
VirtualMachineError	A										<section class="prog__container"><p> Thrown to indicate that the Java Virtual Machine is broken or has run out of resources necessary for it to continue operating.</p><pre><code>public abstract class VirtualMachineError\n</code></pre></section>	https://developer.android.com/reference/java/lang/VirtualMachineError.html
Void	A										<section class="prog__container"><p> The <pre><code> Void </code></pre> class is an uninstantiable placeholder class to hold a reference to the <pre><code> Class </code></pre> object representing the Java keyword void.</p><pre><code>public final class Void\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/Void.html
Annotation	A										<section class="prog__container"><p> The common interface extended by all annotation types. Note that an interface that manually extends this one does <i> not </i> define an annotation type. Also note that this interface does not itself define an annotation type. More information about annotation types can be found in section 9.6 of <cite> The Java™ Language Specification </cite> .</p><pre><code>public interface Annotation\n</code></pre></section>	https://developer.android.com/reference/java/lang/annotation/Annotation.html
AnnotationFormatError	A										<section class="prog__container"><p> Thrown when the annotation parser attempts to read an annotation from a class file and determines that the annotation is malformed. This error can be thrown by the API used to read annotations reflectively</p><pre><code>public class AnnotationFormatError\n</code></pre></section>	https://developer.android.com/reference/java/lang/annotation/AnnotationFormatError.html
AnnotationTypeMismatchException	A										<section class="prog__container"><p> Thrown to indicate that a program has attempted to access an element of an annotation whose type has changed after the annotation was compiled (or serialized). This exception can be thrown by the API used to read annotations reflectively</p><pre><code>public class AnnotationTypeMismatchException\n</code></pre></section>	https://developer.android.com/reference/java/lang/annotation/AnnotationTypeMismatchException.html
Documented	A										<section class="prog__container"><p> Indicates that annotations with a type are to be documented by javadoc and similar tools by default. This type should be used to annotate the declarations of types whose annotations affect the use of annotated elements by their clients. If a type declaration is annotated with Documented, its annotations become part of the public API of the annotated elements.</p><pre><code>public abstract @interface Documented\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/java/lang/annotation/Documented.html
ElementType	A										<section class="prog__container"><p> A program element type. The constants of this enumerated type provide a simple classification of the declared elements in a Java program. <p> These constants are used with the <pre><code> Target </code></pre> meta-annotation type to specify where it is legal to use an annotation type. </p><pre><code>public final enum ElementType\n</code></pre></section>	https://developer.android.com/reference/java/lang/annotation/ElementType.html
IncompleteAnnotationException	A										<section class="prog__container"><p> Thrown to indicate that a program has attempted to access an element of an annotation type that was added to the annotation type definition after the annotation was compiled (or serialized). This exception will not be thrown if the new element has a default value. This exception can be thrown by the API used to read annotations reflectively</p><pre><code>public class IncompleteAnnotationException\n</code></pre></section>	https://developer.android.com/reference/java/lang/annotation/IncompleteAnnotationException.html
Inherited	A										<section class="prog__container"><p> Indicates that an annotation type is automatically inherited. If an Inherited meta-annotation is present on an annotation type declaration, and the user queries the annotation type on a class declaration, and the class declaration has no annotation for this type, then the class's superclass will automatically be queried for the annotation type. This process will be repeated until an annotation for this type is found, or the top of the class hierarchy (Object) is reached. If no superclass has an annotation for this type, then the query will indicate that the class in question has no such annotation. <p> Note that this meta-annotation type has no effect if the annotated type is used to annotate anything other than a class. Note also that this meta-annotation only causes annotations to be inherited from superclasses; annotations on implemented interfaces have no effect. </p><pre><code>public abstract @interface Inherited\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/java/lang/annotation/Inherited.html
java.lang.annotation	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/java/lang/annotation/package-summary.html
Repeatable	A										<section class="prog__container"><p> The annotation type <pre><code> java.lang.annotation.Repeatable </code></pre> is used to indicate that the annotation type whose declaration it (meta-)annotates is <em> repeatable </em> . The value of <pre><code> @Repeatable </code></pre> indicates the <em> containing annotation type </em> for the repeatable annotation type.</p><pre><code>public abstract @interface Repeatable\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/java/lang/annotation/Repeatable.html
Retention	A										<section class="prog__container"><p> Indicates how long annotations with the annotated type are to be retained. If no Retention annotation is present on an annotation type declaration, the retention policy defaults to <pre><code> RetentionPolicy.CLASS </code></pre> . <p> A Retention meta-annotation has effect only if the meta-annotated type is used directly for annotation. It has no effect if the meta-annotated type is used as a member type in another annotation type. </p><pre><code>public abstract @interface Retention\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/java/lang/annotation/Retention.html
RetentionPolicy	A										<section class="prog__container"><p> Annotation retention policy. The constants of this enumerated type describe the various policies for retaining annotations. They are used in conjunction with the <pre><code> Retention </code></pre> meta-annotation type to specify how long annotations are to be retained.</p><pre><code>public final enum RetentionPolicy\n</code></pre></section>	https://developer.android.com/reference/java/lang/annotation/RetentionPolicy.html
Target	A										<section class="prog__container"><p> Indicates the kinds of program element to which an annotation type is applicable. If a Target meta-annotation is not present on an annotation type declaration, the declared type may be used on any program element. If such a meta-annotation is present, the compiler will enforce the specified usage restriction. For example, this meta-annotation indicates that the declared type is itself a meta-annotation type. It can only be used on annotation type declarations: <pre> @Target(ElementType.ANNOTATION_TYPE) public @interface MetaAnnotationType { ... } </pre> This meta-annotation indicates that the declared type is intended solely for use as a member type in complex annotation type declarations. It cannot be used to annotate anything directly: <pre> @Target({}) public @interface MemberType { ... } </pre> It is a compile-time error for a single ElementType constant to appear more than once in a Target annotation. For example, the following meta-annotation is illegal: <pre> @Target({ElementType.FIELD, ElementType.METHOD, ElementType.FIELD}) public @interface Bogus { ... } </pre></p><pre><code>public abstract @interface Target\nimplements Annotation</code></pre></section>	https://developer.android.com/reference/java/lang/annotation/Target.html
java.lang.ref	A										<section class="prog__container">Each reference-object type is implemented by a subclass of the abstract base</section>	https://developer.android.com/reference/java/lang/ref/package-summary.html
PhantomReference	A										<section class="prog__container"><p> Phantom reference objects, which are enqueued after the collector determines that their referents may otherwise be reclaimed. Phantom references are most often used for scheduling pre-mortem cleanup actions in a more flexible way than is possible with the Java finalization mechanism. <p> If the garbage collector determines at a certain point in time that the referent of a phantom reference is phantom reachable , then at that time or at some later time it will enqueue the reference. <p> In order to ensure that a reclaimable object remains so, the referent of a phantom reference may not be retrieved: The <pre><code> get </code></pre> method of a phantom reference always returns <pre><code> null </code></pre> . <p> Unlike soft and weak references, phantom references are not automatically cleared by the garbage collector as they are enqueued. An object that is reachable via phantom references will remain so until all such references are cleared or themselves become unreachable. </p><pre><code>public class PhantomReference\n</code></pre></section>	https://developer.android.com/reference/java/lang/ref/PhantomReference.html
Reference	A										<section class="prog__container"><p> Abstract base class for reference objects. This class defines the operations common to all reference objects. Because reference objects are implemented in close cooperation with the garbage collector, this class may not be subclassed directly.</p><pre><code>public abstract class Reference\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/ref/Reference.html
ReferenceQueue	A										<section class="prog__container"><p> Reference queues, to which registered reference objects are appended by the garbage collector after the appropriate reachability changes are detected.</p><pre><code>public class ReferenceQueue\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/ref/ReferenceQueue.html
SoftReference	A										<section class="prog__container"><p> Soft reference objects, which are cleared at the discretion of the garbage collector in response to memory demand. <p> Suppose that the garbage collector determines at a certain point in time that an object is softly reachable . At that time it may choose to clear atomically all soft references to that object and all soft references to any other softly-reachable objects from which that object is reachable through a chain of strong references. At the same time or at some later time it will enqueue those newly-cleared soft references that are registered with reference queues. <p> All soft references to softly-reachable objects are guaranteed to have been cleared before the virtual machine throws an <pre><code> OutOfMemoryError </code></pre> . Otherwise no constraints are placed upon the time at which a soft reference will be cleared or the order in which a set of such references to different objects will be cleared. Virtual machine implementations are, however, encouraged to bias against clearing recently-created or recently-used soft references. </p><pre><code>public class SoftReference\n</code></pre></section>	https://developer.android.com/reference/java/lang/ref/SoftReference.html
WeakReference	A										<section class="prog__container"><p> Weak reference objects, which do not prevent their referents from being made finalizable, finalized, and then reclaimed. Weak references are most often used to implement canonicalizing mappings. <p> Suppose that the garbage collector determines at a certain point in time that an object is weakly reachable . At that time it will atomically clear all weak references to that object and all weak references to any other weakly-reachable objects from which that object is reachable through a chain of strong and soft references. At the same time it will declare all of the formerly weakly-reachable objects to be finalizable. At the same time or at some later time it will enqueue those newly-cleared weak references that are registered with reference queues. </p><pre><code>public class WeakReference\n</code></pre></section>	https://developer.android.com/reference/java/lang/ref/WeakReference.html
AccessibleObject	A										<section class="prog__container"><p> The AccessibleObject class is the base class for Field, Method and Constructor objects. It provides the ability to flag a reflected object as suppressing default Java language access control checks when it is used. The access checks--for public, default (package) access, protected, and private members--are performed when Fields, Methods or Constructors are used to set or get fields, to invoke methods, or to create and initialize new instances of classes, respectively. <p> Setting the <pre><code> accessible </code></pre> flag in a reflected object permits sophisticated applications with sufficient privilege, such as Java Object Serialization or other persistence mechanisms, to manipulate objects in a manner that would normally be prohibited. <p> By default, a reflected object is <em> not </em> accessible. </p><pre><code>public class AccessibleObject\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/AccessibleObject.html
AnnotatedElement	A										<section class="prog__container"><p> Represents an annotated element of the program currently running in this VM. This interface allows annotations to be read reflectively. All annotations returned by methods in this interface are immutable and serializable. It is permissible for the caller to modify the arrays returned by accessors for array-valued enum members; it will have no affect on the arrays returned to other callers. <p> If an annotation returned by a method in this interface contains (directly or indirectly) a <pre><code> Class </code></pre> -valued member referring to a class that is not accessible in this VM, attempting to read the class by calling the relevant Class-returning method on the returned annotation will result in a <pre><code> TypeNotPresentException </code></pre> . <p> Similarly, attempting to read an enum-valued member will result in a <pre><code> EnumConstantNotPresentException </code></pre> if the enum constant in the annotation is no longer present in the enum type. <p> Finally, Attempting to read a member whose definition has evolved incompatibly will result in a <pre><code> AnnotationTypeMismatchException </code></pre> or an <pre><code> IncompleteAnnotationException </code></pre> . </p><pre><code>public interface AnnotatedElement\n</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/AnnotatedElement.html
Array	A										<section class="prog__container"><p> The <pre><code> Array </code></pre> class provides static methods to dynamically create and access Java arrays. <p> <pre><code> Array </code></pre> permits widening conversions to occur during a get or set operation, but throws an <pre><code> IllegalArgumentException </code></pre> if a narrowing conversion would occur. </p><pre><code>public final class Array\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/Array.html
Constructor	A										<section class="prog__container"><p> <pre><code> Constructor </code></pre> provides information about, and access to, a single constructor for a class. <p> <pre><code> Constructor </code></pre> permits widening conversions to occur when matching the actual parameters to newInstance() with the underlying constructor's formal parameters, but throws an <pre><code> IllegalArgumentException </code></pre> if a narrowing conversion would occur. </p><pre><code>public final class Constructor\n</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/Constructor.html
Field	A										<section class="prog__container"><p> A <pre><code> Field </code></pre> provides information about, and dynamic access to, a single field of a class or an interface. The reflected field may be a class (static) field or an instance field. <p> A <pre><code> Field </code></pre> permits widening conversions to occur during a get or set access operation, but throws an <pre><code> IllegalArgumentException </code></pre> if a narrowing conversion would occur. </p><pre><code>public final class Field\n</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/Field.html
GenericArrayType	A										<section class="prog__container"><p> <pre><code> GenericArrayType </code></pre> represents an array type whose component type is either a parameterized type or a type variable.</p><pre><code>public interface GenericArrayType\nimplements Type</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/GenericArrayType.html
GenericDeclaration	A										<section class="prog__container"><p> A common interface for all entities that declare type variables.</p><pre><code>public interface GenericDeclaration\n</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/GenericDeclaration.html
GenericSignatureFormatError	A										<section class="prog__container"><p> Thrown when a syntactically malformed signature attribute is encountered by a reflective method that needs to interpret the generic signature information for a type, method or constructor.</p><pre><code>public class GenericSignatureFormatError\n</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/GenericSignatureFormatError.html
InvocationHandler	A										<section class="prog__container"><p> <pre><code> InvocationHandler </code></pre> is the interface implemented by the <i> invocation handler </i> of a proxy instance. <p> Each proxy instance has an associated invocation handler. When a method is invoked on a proxy instance, the method invocation is encoded and dispatched to the <pre><code> invoke </code></pre> method of its invocation handler. </p><pre><code>public interface InvocationHandler\n</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/InvocationHandler.html
InvocationTargetException	A										<section class="prog__container"><p> InvocationTargetException is a checked exception that wraps an exception thrown by an invoked method or constructor. <p> As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The "target exception" that is provided at construction time and accessed via the <pre><code> getTargetException() </code></pre> method is now known as the <i> cause </i> , and may be accessed via the <pre><code> getCause() </code></pre> method, as well as the aforementioned "legacy method." </p><pre><code>public class InvocationTargetException\n</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/InvocationTargetException.html
MalformedParameterizedTypeException	A										<section class="prog__container"><p> Thrown when a semantically malformed parameterized type is encountered by a reflective method that needs to instantiate it. For example, if the number of type arguments to a parameterized type is wrong.</p><pre><code>public class MalformedParameterizedTypeException\n</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/MalformedParameterizedTypeException.html
Member	A										<section class="prog__container"><p> Member is an interface that reflects identifying information about a single member (a field or a method) or a constructor.</p><pre><code>public interface Member\n</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/Member.html
Method	A										<section class="prog__container"><p> A <pre><code> Method </code></pre> provides information about, and access to, a single method on a class or interface. The reflected method may be a class method or an instance method (including an abstract method). <p> A <pre><code> Method </code></pre> permits widening conversions to occur when matching the actual parameters to invoke with the underlying method's formal parameters, but it throws an <pre><code> IllegalArgumentException </code></pre> if a narrowing conversion would occur. </p><pre><code>public final class Method\n</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/Method.html
Modifier	A										<section class="prog__container"><p> The Modifier class provides <pre><code> static </code></pre> methods and constants to decode class and member access modifiers. The sets of modifiers are represented as integers with distinct bit positions representing different modifiers. The values for the constants representing the modifiers are taken from the tables in sections 4.1, 4.4, 4.5, and 4.7 of <cite> The Java™ Virtual Machine Specification </cite> .</p><pre><code>public class Modifier\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/Modifier.html
java.lang.reflect	A										<section class="prog__container"><pre><code>AccessibleObject</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/package-summary.html
ParameterizedType	A										<section class="prog__container"><p> ParameterizedType represents a parameterized type such as Collection&lt;String&gt;. <p> A parameterized type is created the first time it is needed by a reflective method, as specified in this package. When a parameterized type p is created, the generic type declaration that p instantiates is resolved, and all type arguments of p are created recursively. See <pre><code> TypeVariable </code></pre> for details on the creation process for type variables. Repeated creation of a parameterized type has no effect. <p> Instances of classes that implement this interface must implement an equals() method that equates any two instances that share the same generic type declaration and have equal type parameters. </p><pre><code>public interface ParameterizedType\nimplements Type</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/ParameterizedType.html
Proxy	A										<section class="prog__container"><p> <pre><code> Proxy </code></pre> provides static methods for creating dynamic proxy classes and instances, and it is also the superclass of all dynamic proxy classes created by those methods. <p> To create a proxy for some interface <pre><code> Foo </code></pre> : <pre> InvocationHandler handler = new MyInvocationHandler(...); Class proxyClass = Proxy.getProxyClass( Foo.class.getClassLoader(), new Class[] { Foo.class }); Foo f = (Foo) proxyClass. getConstructor(new Class[] { InvocationHandler.class }). newInstance(new Object[] { handler }); </pre> or more simply: <pre> Foo f = (Foo) Proxy.newProxyInstance(Foo.class.getClassLoader(), new Class[] { Foo.class }, handler); </pre> <p> A <i> dynamic proxy class </i> (simply referred to as a <i> proxy class </i> below) is a class that implements a list of interfaces specified at runtime when the class is created, with behavior as described below. A <i> proxy interface </i> is such an interface that is implemented by a proxy class. A <i> proxy instance </i> is an instance of a proxy class. Each proxy instance has an associated <i> invocation handler </i> object, which implements the interface <pre><code> InvocationHandler </code></pre> . A method invocation on a proxy instance through one of its proxy interfaces will be dispatched to the <pre><code> invoke </code></pre> method of the instance's invocation handler, passing the proxy instance, a <pre><code> java.lang.reflect.Method </code></pre> object identifying the method that was invoked, and an array of type <pre><code> Object </code></pre> containing the arguments. The invocation handler processes the encoded method invocation as appropriate and the result that it returns will be returned as the result of the method invocation on the proxy instance. <p> A proxy class has the following properties: <ul> <li> Proxy classes are public, final, and not abstract. <li> The unqualified name of a proxy class is unspecified. The space of class names that begin with the string <pre><code> "$Proxy" </code></pre> should be, however, reserved for proxy classes. <li> A proxy class extends <pre><code> java.lang.reflect.Proxy </code></pre> . <li> A proxy class implements exactly the interfaces specified at its creation, in the same order. <li> If a proxy class implements a non-public interface, then it will be defined in the same package as that interface. Otherwise, the package of a proxy class is also unspecified. Note that package sealing will not prevent a proxy class from being successfully defined in a particular package at runtime, and neither will classes already defined by the same class loader and the same package with particular signers. <li> Since a proxy class implements all of the interfaces specified at its creation, invoking <pre><code> getInterfaces </code></pre> on its <pre><code> Class </code></pre> object will return an array containing the same list of interfaces (in the order specified at its creation), invoking <pre><code> getMethods </code></pre> on its <pre><code> Class </code></pre> object will return an array of <pre><code> Method </code></pre> objects that include all of the methods in those interfaces, and invoking <pre><code> getMethod </code></pre> will find methods in the proxy interfaces as would be expected. <li> The <pre><code> Proxy.isProxyClass </code></pre> method will return true if it is passed a proxy class-- a class returned by <pre><code> Proxy.getProxyClass </code></pre> or the class of an object returned by <pre><code> Proxy.newProxyInstance </code></pre> -- and false otherwise. <li> The <pre><code> java.security.ProtectionDomain </code></pre> of a proxy class is the same as that of system classes loaded by the bootstrap class loader, such as <pre><code> java.lang.Object </code></pre> , because the code for a proxy class is generated by trusted system code. This protection domain will typically be granted <pre><code> java.security.AllPermission </code></pre> . <li> Each proxy class has one public constructor that takes one argument, an implementation of the interface <pre><code> InvocationHandler </code></pre> , to set the invocation handler for a proxy instance. Rather than having to use the reflection API to access the public constructor, a proxy instance can be also be created by calling the <pre><code> Proxy.newProxyInstance </code></pre> method, which combines the actions of calling <pre><code> Proxy.getProxyClass </code></pre> with invoking the constructor with an invocation handler. </li> </li> </li> </li> </li> </li> </li> </li> </li> </ul> <p> A proxy instance has the following properties: <ul> <li> Given a proxy instance <pre><code> proxy </code></pre> and one of the interfaces implemented by its proxy class <pre><code> Foo </code></pre> , the following expression will return true: <pre> <pre><code>proxy instanceof Foo</code></pre> </pre> and the following cast operation will succeed (rather than throwing a <pre><code> ClassCastException </code></pre> ): <pre> <pre><code>(Foo) proxy</code></pre> </pre> <li> Each proxy instance has an associated invocation handler, the one that was passed to its constructor. The static <pre><code> Proxy.getInvocationHandler </code></pre> method will return the invocation handler associated with the proxy instance passed as its argument. <li> An interface method invocation on a proxy instance will be encoded and dispatched to the invocation handler's <pre><code> invoke </code></pre> method as described in the documentation for that method. <li> An invocation of the <pre><code> hashCode </code></pre> , <pre><code> equals </code></pre> , or <pre><code> toString </code></pre> methods declared in <pre><code> java.lang.Object </code></pre> on a proxy instance will be encoded and dispatched to the invocation handler's <pre><code> invoke </code></pre> method in the same manner as interface method invocations are encoded and dispatched, as described above. The declaring class of the <pre><code> Method </code></pre> object passed to <pre><code> invoke </code></pre> will be <pre><code> java.lang.Object </code></pre> . Other public methods of a proxy instance inherited from <pre><code> java.lang.Object </code></pre> are not overridden by a proxy class, so invocations of those methods behave like they do for instances of <pre><code> java.lang.Object </code></pre> . </li> </li> </li> </li> </ul> </p><pre><code>public class Proxy\nextends Object</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/Proxy.html
ReflectPermission	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public final class ReflectPermission\n</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/ReflectPermission.html
Type	A										<section class="prog__container"><p> Type is the common superinterface for all types in the Java programming language. These include raw types, parameterized types, array types, type variables and primitive types.</p><pre><code>public interface Type\n</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/Type.html
TypeVariable	A										<section class="prog__container"><p> TypeVariable is the common superinterface for type variables of kinds. A type variable is created the first time it is needed by a reflective method, as specified in this package. If a type variable t is referenced by a type (i.e, class, interface or annotation type) T, and T is declared by the nth enclosing class of T (see JLS 8.1.2), then the creation of t requires the resolution (see JVMS 5) of the ith enclosing class of T, for i = 0 to n, inclusive. Creating a type variable must not cause the creation of its bounds. Repeated creation of a type variable has no effect. <p> Multiple objects may be instantiated at run-time to represent a given type variable. Even though a type variable is created only once, this does not imply any requirement to cache instances representing the type variable. However, all instances representing a type variable must be equal() to each other. As a consequence, users of type variables must not rely on the identity of instances of classes implementing this interface. </p><pre><code>public interface TypeVariable\nimplements Type</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/TypeVariable.html
UndeclaredThrowableException	A										<section class="prog__container"><p> Thrown by a method invocation on a proxy instance if its invocation handler's <pre><code> invoke </code></pre> method throws a checked exception (a <pre><code> Throwable </code></pre> that is not assignable to <pre><code> RuntimeException </code></pre> or <pre><code> Error </code></pre> ) that is not assignable to any of the exception types declared in the <pre><code> throws </code></pre> clause of the method that was invoked on the proxy instance and dispatched to the invocation handler. <p> An <pre><code> UndeclaredThrowableException </code></pre> instance contains the undeclared checked exception that was thrown by the invocation handler, and it can be retrieved with the <pre><code> getUndeclaredThrowable() </code></pre> method. <pre><code> UndeclaredThrowableException </code></pre> extends <pre><code> RuntimeException </code></pre> , so it is an unchecked exception that wraps a checked exception. <p> As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The "undeclared checked exception that was thrown by the invocation handler" that may be provided at construction time and accessed via the <pre><code> getUndeclaredThrowable() </code></pre> method is now known as the <i> cause </i> , and may be accessed via the <pre><code> getCause() </code></pre> method, as well as the aforementioned "legacy method." </p><pre><code>public class UndeclaredThrowableException\n</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/UndeclaredThrowableException.html
WildcardType	A										<section class="prog__container"><p> WildcardType represents a wildcard type expression, such as <pre><code> ? </code></pre> , <pre><code> ? extends Number </code></pre> , or <pre><code> ? super Integer </code></pre> .</p><pre><code>public interface WildcardType\nimplements Type</code></pre></section>	https://developer.android.com/reference/java/lang/reflect/WildcardType.html
BigDecimal	A										<section class="prog__container"><p> An immutable arbitrary-precision signed decimal. <p> A value is represented by an arbitrary-precision "unscaled value" and a signed 32-bit "scale", combined thus: <pre><code> unscaled * 10&lt;sup&gt;-scale&lt;/sup&gt; </code></pre> . See <pre><code> unscaledValue() </code></pre> and <pre><code> scale() </code></pre> . <p> Most operations allow you to supply a <pre><code> MathContext </code></pre> to specify a desired rounding mode. </p><pre><code>public class BigDecimal\n</code></pre></section>	https://developer.android.com/reference/java/math/BigDecimal.html
BigInteger	A										<section class="prog__container"><p> An immutable arbitrary-precision signed integer. </p><pre><code>public class BigInteger\n</code></pre></section>	https://developer.android.com/reference/java/math/BigInteger.html
MathContext	A										<section class="prog__container"><p> Immutable objects describing settings such as rounding mode and digit precision for the numerical operations provided by class <pre><code> BigDecimal </code></pre> .</p><pre><code>public final class MathContext\nextends Object</code></pre></section>	https://developer.android.com/reference/java/math/MathContext.html
java.math	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/java/math/package-summary.html
RoundingMode	A										<section class="prog__container"><p> Specifies the rounding behavior for operations whose results cannot be represented exactly.</p><pre><code>public final enum RoundingMode\n</code></pre></section>	https://developer.android.com/reference/java/math/RoundingMode.html
Authenticator	A										<section class="prog__container"><p> The class Authenticator represents an object that knows how to obtain authentication for a network connection. Usually, it will do this by prompting the user for information. <p> Applications use this class by overriding <pre><code> getPasswordAuthentication() </code></pre> in a sub-class. This method will typically use the various getXXX() accessor methods to get information about the entity requesting authentication. It must then acquire a username and password either by interacting with the user or through some other non-interactive means. The credentials are then returned as a <pre><code> PasswordAuthentication </code></pre> return value. <p> An instance of this concrete sub-class is then registered with the system by calling <pre><code> setDefault(Authenticator) </code></pre> . When authentication is required, the system will invoke one of the requestPasswordAuthentication() methods which in turn will call the getPasswordAuthentication() method of the registered object. <p> All methods that request authentication have a default implementation that fails. </p><pre><code>public abstract class Authenticator\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/Authenticator.html
Authenticator.RequestorType	A										<section class="prog__container"><p> The type of the entity requesting authentication.</p><pre><code>public static final enum Authenticator.RequestorType\n</code></pre></section>	https://developer.android.com/reference/java/net/Authenticator.RequestorType.html
BindException	A										<section class="prog__container"><p> Signals that an error occurred while attempting to bind a socket to a local address and port. Typically, the port is in use, or the requested local address could not be assigned.</p><pre><code>public class BindException\n</code></pre></section>	https://developer.android.com/reference/java/net/BindException.html
CacheRequest	A										<section class="prog__container"><p> Represents channels for storing resources in the ResponseCache. Instances of such a class provide an OutputStream object which is called by protocol handlers to store the resource data into the cache, and also an abort() method which allows a cache store operation to be interrupted and abandoned. If an IOException is encountered while reading the response or writing to the cache, the current cache store operation will be aborted.</p><pre><code>public abstract class CacheRequest\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/CacheRequest.html
CacheResponse	A										<section class="prog__container"><p> Represent channels for retrieving resources from the ResponseCache. Instances of such a class provide an InputStream that returns the entity body, and also a getHeaders() method which returns the associated response headers.</p><pre><code>public abstract class CacheResponse\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/CacheResponse.html
ConnectException	A										<section class="prog__container"><p> Signals that an error occurred while attempting to connect a socket to a remote address and port. Typically, the connection was refused remotely (e.g., no process is listening on the remote address/port).</p><pre><code>public class ConnectException\n</code></pre></section>	https://developer.android.com/reference/java/net/ConnectException.html
ContentHandler	A										<section class="prog__container"><p> The abstract class <pre><code> ContentHandler </code></pre> is the superclass of all classes that read an <pre><code> Object </code></pre> from a <pre><code> URLConnection </code></pre> . <p> An application does not generally call the <pre><code> getContent </code></pre> method in this class directly. Instead, an application calls the <pre><code> getContent </code></pre> method in class <pre><code> URL </code></pre> or in <pre><code> URLConnection </code></pre> . The application's content handler factory (an instance of a class that implements the interface <pre><code> ContentHandlerFactory </code></pre> set up by a call to <pre><code> setContentHandler </code></pre> ) is called with a <pre><code> String </code></pre> giving the MIME type of the object being received on the socket. The factory returns an instance of a subclass of <pre><code> ContentHandler </code></pre> , and its <pre><code> getContent </code></pre> method is called to create the object. <p> If no content handler could be found, URLConnection will look for a content handler in a user-defineable set of places. By default it looks in sun.net.www.content, but users can define a vertical-bar delimited set of class prefixes to search through in addition by defining the java.content.handler.pkgs property. The class name must be of the form: <pre> {package-prefix}.{major}.{minor} e.g. YoyoDyne.experimental.text.plain </pre> If the loading of the content handler class would be performed by a classloader that is outside of the delegation chain of the caller, the JVM will need the RuntimePermission "getClassLoader". </p><pre><code>public abstract class ContentHandler\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/ContentHandler.html
ContentHandlerFactory	A										<section class="prog__container"><p> This interface defines a factory for content handlers. An implementation of this interface should map a MIME type into an instance of <pre><code> ContentHandler </code></pre> . <p> This interface is used by the <pre><code> URLStreamHandler </code></pre> class to create a <pre><code> ContentHandler </code></pre> for a MIME type. </p><pre><code>public interface ContentHandlerFactory\n</code></pre></section>	https://developer.android.com/reference/java/net/ContentHandlerFactory.html
CookieHandler	A										<section class="prog__container"><p> A CookieHandler object provides a callback mechanism to hook up a HTTP state management policy implementation into the HTTP protocol handler. The HTTP state management mechanism specifies a way to create a stateful session with HTTP requests and responses. <p> A system-wide CookieHandler that to used by the HTTP protocol handler can be registered by doing a CookieHandler.setDefault(CookieHandler). The currently registered CookieHandler can be retrieved by calling CookieHandler.getDefault(). For more information on HTTP state management, see <i> RFC 2965: HTTP State Management Mechanism </i> </p><pre><code>public abstract class CookieHandler\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/CookieHandler.html
CookieManager	A										<section class="prog__container"><p> CookieManager provides a concrete implementation of <pre><code> CookieHandler </code></pre> , which separates the storage of cookies from the policy surrounding accepting and rejecting cookies. A CookieManager is initialized with a <pre><code> CookieStore </code></pre> which manages storage, and a <pre><code> CookiePolicy </code></pre> object, which makes policy decisions on cookie acceptance/rejection. <p> The HTTP cookie management in java.net package looks like: <blockquote> <pre> use CookieHandler &lt;------- HttpURLConnection ^ | impl | use CookieManager -------&gt; CookiePolicy | use |--------&gt; HttpCookie | ^ | | use | use | |--------&gt; CookieStore ^ | impl | Internal in-memory implementation </pre> <ul> <li> CookieHandler is at the core of cookie management. User can call CookieHandler.setDefault to set a concrete CookieHanlder implementation to be used. </li> <li> CookiePolicy.shouldAccept will be called by CookieManager.put to see whether or not one cookie should be accepted and put into cookie store. User can use any of three pre-defined CookiePolicy, namely ACCEPT_ALL, ACCEPT_NONE and ACCEPT_ORIGINAL_SERVER, or user can define his own CookiePolicy implementation and tell CookieManager to use it. </li> <li> CookieStore is the place where any accepted HTTP cookie is stored in. If not specified when created, a CookieManager instance will use an internal in-memory implementation. Or user can implements one and tell CookieManager to use it. </li> <li> Currently, only CookieStore.add(URI, HttpCookie) and CookieStore.get(URI) are used by CookieManager. Others are for completeness and might be needed by a more sophisticated CookieStore implementation, e.g. a NetscapeCookieSotre. </li> </ul> </blockquote> <p> There're various ways user can hook up his own HTTP cookie management behavior, e.g. <blockquote> <ul> <li> Use CookieHandler.setDefault to set a brand new <pre><code> CookieHandler </code></pre> implementation <li> Let CookieManager be the default <pre><code> CookieHandler </code></pre> implementation, but implement user's own <pre><code> CookieStore </code></pre> and <pre><code> CookiePolicy </code></pre> and tell default CookieManager to use them: <blockquote> <pre> // this should be done at the beginning of an HTTP session CookieHandler.setDefault(new CookieManager(new MyCookieStore(), new MyCookiePolicy())); </pre> </blockquote> <li> Let CookieManager be the default <pre><code> CookieHandler </code></pre> implementation, but use customized <pre><code> CookiePolicy </code></pre> : <blockquote> <pre> // this should be done at the beginning of an HTTP session CookieHandler.setDefault(new CookieManager()); // this can be done at any point of an HTTP session ((CookieManager)CookieHandler.getDefault()).setCookiePolicy(new MyCookiePolicy()); </pre> </blockquote> </li> </li> </li> </ul> </blockquote> <p> The implementation conforms to RFC 2965 , section 3.3. </p><pre><code>public class CookieManager\n</code></pre></section>	https://developer.android.com/reference/java/net/CookieManager.html
CookiePolicy	A										<section class="prog__container"><p> CookiePolicy implementations decide which cookies should be accepted and which should be rejected. Three pre-defined policy implementations are provided, namely ACCEPT_ALL, ACCEPT_NONE and ACCEPT_ORIGINAL_SERVER. <p> See RFC 2965 sec. 3.3 &amp; 7 for more detail. </p><pre><code>public interface CookiePolicy\n</code></pre></section>	https://developer.android.com/reference/java/net/CookiePolicy.html
CookieStore	A										<section class="prog__container"><p> A CookieStore object represents a storage for cookie. Can store and retrieve cookies. <p> <pre><code> CookieManager </code></pre> will call <tt> CookieStore.add </tt> to save cookies for every incoming HTTP response, and call <tt> CookieStore.get </tt> to retrieve cookie for every outgoing HTTP request. A CookieStore is responsible for removing HttpCookie instances which have expired. </p><pre><code>public interface CookieStore\n</code></pre></section>	https://developer.android.com/reference/java/net/CookieStore.html
DatagramPacket	A										<section class="prog__container"><p> This class represents a datagram packet. <p> Datagram packets are used to implement a connectionless packet delivery service. Each message is routed from one machine to another based solely on information contained within that packet. Multiple packets sent from one machine to another might be routed differently, and might arrive in any order. Packet delivery is not guaranteed. </p><pre><code>public final class DatagramPacket\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/DatagramPacket.html
DatagramSocket	A										<section class="prog__container"><p> This class represents a socket for sending and receiving datagram packets. <p> A datagram socket is the sending or receiving point for a packet delivery service. Each packet sent or received on a datagram socket is individually addressed and routed. Multiple packets sent from one machine to another may be routed differently, and may arrive in any order. <p> Where possible, a newly constructed <pre><code> DatagramSocket </code></pre> has the <pre><code> SO_BROADCAST </code></pre> socket option enabled so as to allow the transmission of broadcast datagrams. In order to receive broadcast packets a DatagramSocket should be bound to the wildcard address. In some implementations, broadcast packets may also be received when a DatagramSocket is bound to a more specific address. <p> Example: <pre><code> DatagramSocket s = new DatagramSocket(null); s.bind(new InetSocketAddress(8888)); </code></pre> Which is equivalent to: <pre><code> DatagramSocket s = new DatagramSocket(8888); </code></pre> Both cases will create a DatagramSocket able to receive broadcasts on UDP port 8888. </p><pre><code>public class DatagramSocket\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/DatagramSocket.html
DatagramSocketImpl	A										<section class="prog__container"><p> Abstract datagram and multicast socket implementation base class.</p><pre><code>public abstract class DatagramSocketImpl\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/DatagramSocketImpl.html
DatagramSocketImplFactory	A										<section class="prog__container"><p> This interface defines a factory for datagram socket implementations. It is used by the classes <pre><code> DatagramSocket </code></pre> to create actual socket implementations.</p><pre><code>public interface DatagramSocketImplFactory\n</code></pre></section>	https://developer.android.com/reference/java/net/DatagramSocketImplFactory.html
FileNameMap	A										<section class="prog__container"><p> A simple interface which provides a mechanism to map between a file name and a MIME type string.</p><pre><code>public interface FileNameMap\n</code></pre></section>	https://developer.android.com/reference/java/net/FileNameMap.html
HttpCookie	A										<section class="prog__container"><p> An HttpCookie object represents an http cookie, which carries state information between server and user agent. Cookie is widely adopted to create stateful sessions. <p> There are 3 http cookie specifications: <blockquote> Netscape draft <br> RFC 2109 - <i> http://www.ietf.org/rfc/rfc2109.txt </i> <br> RFC 2965 - <i> http://www.ietf.org/rfc/rfc2965.txt </i> </br> </br> </blockquote> <p> HttpCookie class can accept all these 3 forms of syntax. </p><pre><code>public final class HttpCookie\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/HttpCookie.html
HttpRetryException	A										<section class="prog__container"><p> Thrown to indicate that a HTTP request needs to be retried but cannot be retried automatically, due to streaming mode being enabled.</p><pre><code>public class HttpRetryException\n</code></pre></section>	https://developer.android.com/reference/java/net/HttpRetryException.html
HttpURLConnection	A										<section class="prog__container"><p> A URLConnection with support for HTTP-specific features. See the spec for details. <p> <p> Uses of this class follow a pattern: <ol> <li> Obtain a new <pre><code> HttpURLConnection </code></pre> by calling <pre><code> URL.openConnection() </code></pre> and casting the result to <pre><code> HttpURLConnection </code></pre> . <li> Prepare the request. The primary property of a request is its URI. Request headers may also include metadata such as credentials, preferred content types, and session cookies. <li> Optionally upload a request body. Instances must be configured with <pre><code> setDoOutput(true) </code></pre> if they include a request body. Transmit data by writing to the stream returned by <pre><code> getOutputStream() </code></pre> . <li> Read the response. Response headers typically include metadata such as the response body's content type and length, modified dates and session cookies. The response body may be read from the stream returned by <pre><code> getInputStream() </code></pre> . If the response has no body, that method returns an empty stream. <li> Disconnect. Once the response body has been read, the <pre><code> HttpURLConnection </code></pre> should be closed by calling <pre><code> disconnect() </code></pre> . Disconnecting releases the resources held by a connection so they may be closed or reused. </li> </li> </li> </li> </li> </ol> <p> For example, to retrieve the webpage at <pre><code> http://www.android.com/ </code></pre> : <pre> <pre><code>URL url = new URL("http://www.android.com/"); HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection(); try { InputStream in = new BufferedInputStream(urlConnection.getInputStream()); readStream(in); } finally { urlConnection.disconnect(); } </code></pre></pre> </p><pre><code>public abstract class HttpURLConnection\n</code></pre></section>	https://developer.android.com/reference/java/net/HttpURLConnection.html
IDN	A										<section class="prog__container"><p> Provides methods to convert internationalized domain names (IDNs) between a normal Unicode representation and an ASCII Compatible Encoding (ACE) representation. Internationalized domain names can use characters from the entire range of Unicode, while traditional domain names are restricted to ASCII characters. ACE is an encoding of Unicode strings that uses only ASCII characters and can be used with software (such as the Domain Name System) that only understands traditional domain names. <p> Internationalized domain names are defined in RFC 3490 . RFC 3490 defines two operations: ToASCII and ToUnicode. These 2 operations employ Nameprep algorithm, which is a profile of Stringprep , and Punycode algorithm to convert domain name string back and forth. <p> The behavior of aforementioned conversion process can be adjusted by various flags: <ul> <li> If the ALLOW_UNASSIGNED flag is used, the domain name string to be converted can contain code points that are unassigned in Unicode 3.2, which is the Unicode version on which IDN conversion is based. If the flag is not used, the presence of such unassigned code points is treated as an error. <li> If the USE_STD3_ASCII_RULES flag is used, ASCII strings are checked against RFC 1122 and RFC 1123 . It is an error if they don't meet the requirements. </li> </li> </ul> These flags can be logically OR'ed together. <p> The security consideration is important with respect to internationalization domain name support. For example, English domain names may be <i> homographed </i> - maliciously misspelled by substitution of non-Latin letters. Unicode Technical Report #36 discusses security issues of IDN support as well as possible solutions. Applications are responsible for taking adequate security measures when using international domain names. </p><pre><code>public final class IDN\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/IDN.html
Inet4Address	A										<section class="prog__container"><p> This class represents an Internet Protocol version 4 (IPv4) address. Defined by <i> RFC 790: Assigned Numbers </i> , <i> RFC 1918: Address Allocation for Private Internets </i> , and <i> RFC 2365: Administratively Scoped IP Multicast </i> <h4> Textual representation of IP addresses </h4> Textual representation of IPv4 address used as input to methods takes one of the following forms: <blockquote> <table cellpadding="0" cellspacing="0" summary="layout"> <tr> <td> <tt> d.d.d.d </tt> </td> </tr> <tr> <td> <tt> d.d.d </tt> </td> </tr> <tr> <td> <tt> d.d </tt> </td> </tr> <tr> <td> <tt> d </tt> </td> </tr> </table> </blockquote> <p> When four parts are specified, each is interpreted as a byte of data and assigned, from left to right, to the four bytes of an IPv4 address. <p> When a three part address is specified, the last part is interpreted as a 16-bit quantity and placed in the right most two bytes of the network address. This makes the three part address format convenient for specifying Class B net- work addresses as 128.net.host. <p> When a two part address is supplied, the last part is interpreted as a 24-bit quantity and placed in the right most three bytes of the network address. This makes the two part address format convenient for specifying Class A network addresses as net.host. <p> When only one part is given, the value is stored directly in the network address without any byte rearrangement. <p> For methods that return a textual representation as output value, the first form, i.e. a dotted-quad string, is used. <h4> The Scope of a Multicast Address </h4> Historically the IPv4 TTL field in the IP header has doubled as a multicast scope field: a TTL of 0 means node-local, 1 means link-local, up through 32 means site-local, up through 64 means region-local, up through 128 means continent-local, and up through 255 are global. However, the administrative scoping is preferred. Please refer to <i> RFC 2365: Administratively Scoped IP Multicast </i> </p><pre><code>public final class Inet4Address\n</code></pre></section>	https://developer.android.com/reference/java/net/Inet4Address.html
Inet6Address	A										<section class="prog__container"><p> This class represents an Internet Protocol version 6 (IPv6) address. Defined by <i> RFC 2373: IP Version 6 Addressing Architecture </i> . <h4> Textual representation of IP addresses </h4> Textual representation of IPv6 address used as input to methods takes one of the following forms: <ol> <li> <p> The preferred form is x:x:x:x:x:x:x:x, where the 'x's are the hexadecimal values of the eight 16-bit pieces of the address. This is the full form. For example, <blockquote> <table cellpadding="0" cellspacing="0" summary="layout"> <tr> <td> <tt> 1080:0:0:0:8:800:200C:417A </tt> <td> </td> </td> </tr> </table> </blockquote> <p> Note that it is not necessary to write the leading zeros in an individual field. However, there must be at least one numeral in every field, except as described below. </p><pre><code>public final class Inet6Address\n</code></pre></section>	https://developer.android.com/reference/java/net/Inet6Address.html
InetAddress	A										<section class="prog__container"><p> This class represents an Internet Protocol (IP) address. <p> An IP address is either a 32-bit or 128-bit unsigned number used by IP, a lower-level protocol on which protocols like UDP and TCP are built. The IP address architecture is defined by <i> RFC 790: Assigned Numbers </i> , <i> RFC 1918: Address Allocation for Private Internets </i> , <i> RFC 2365: Administratively Scoped IP Multicast </i> , and <i> RFC 2373: IP Version 6 Addressing Architecture </i> . An instance of an InetAddress consists of an IP address and possibly its corresponding host name (depending on whether it is constructed with a host name or whether it has already done reverse host name resolution). <h4> Address types </h4> <blockquote> <table cellspacing="2" summary="Description of unicast and multicast address types"> <tr> <th valign="top"> <i> unicast </i> </th> <td> An identifier for a single interface. A packet sent to a unicast address is delivered to the interface identified by that address. <p> The Unspecified Address -- Also called anylocal or wildcard address. It must never be assigned to any node. It indicates the absence of an address. One example of its use is as the target of bind, which allows a server to accept a client connection on any interface, in case the server host has multiple interfaces. <p> The <i> unspecified </i> address must not be used as the destination address of an IP packet. <p> The <i> Loopback </i> Addresses -- This is the address assigned to the loopback interface. Anything sent to this IP address loops around and becomes IP input on the local host. This address is often used when testing a client. </p><pre><code>public class InetAddress\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/InetAddress.html
InetSocketAddress	A										<section class="prog__container"><p> This class implements an IP Socket Address (IP address + port number) It can also be a pair (hostname + port number), in which case an attempt will be made to resolve the hostname. If resolution fails then the address is said to be <i> unresolved </i> but can still be used on some circumstances like connecting through a proxy. <p> It provides an immutable object used by sockets for binding, connecting, or as returned values. <p> The <i> wildcard </i> is a special local IP address. It usually means "any" and can only be used for <pre><code> bind </code></pre> operations. </p><pre><code>public class InetSocketAddress\n</code></pre></section>	https://developer.android.com/reference/java/net/InetSocketAddress.html
InterfaceAddress	A										<section class="prog__container"><p> This class represents a Network Interface address. In short it's an IP address, a subnet mask and a broadcast address when the address is an IPv4 one. An IP address and a network prefix length in the case of IPv6 address.</p><pre><code>public class InterfaceAddress\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/InterfaceAddress.html
JarURLConnection	A										<section class="prog__container"><p> A URL Connection to a Java ARchive (JAR) file or an entry in a JAR file. <p> The syntax of a JAR URL is: <pre> jar:&lt;url&gt;!/{entry} </pre> <p> for example: <p> <pre><code> jar:http://www.foo.com/bar/baz.jar!/COM/foo/Quux.class <br> </br> </code></pre> <p> Jar URLs should be used to refer to a JAR file or entries in a JAR file. The example above is a JAR URL which refers to a JAR entry. If the entry name is omitted, the URL refers to the whole JAR file: <pre><code> jar:http://www.foo.com/bar/baz.jar!/ </code></pre> <p> Users should cast the generic URLConnection to a JarURLConnection when they know that the URL they created is a JAR URL, and they need JAR-specific functionality. For example: <pre> URL url = new URL("jar:file:/home/duke/duke.jar!/"); JarURLConnection jarConnection = (JarURLConnection)url.openConnection(); Manifest manifest = jarConnection.getManifest(); </pre> <p> JarURLConnection instances can only be used to read from JAR files. It is not possible to get a <pre><code> OutputStream </code></pre> to modify or write to the underlying JAR file using this class. <p> Examples: <dl> <dt> A Jar entry <dd> <pre><code> jar:http://www.foo.com/bar/baz.jar!/COM/foo/Quux.class </code></pre> <dt> A Jar file <dd> <pre><code> jar:http://www.foo.com/bar/baz.jar!/ </code></pre> <dt> A Jar directory <dd> <pre><code> jar:http://www.foo.com/bar/baz.jar!/COM/foo/ </code></pre> </dd> </dt> </dd> </dt> </dd> </dt> </dl> <p> <pre><code> !/ </code></pre> is refered to as the <em> separator </em> . <p> When constructing a JAR url via <pre><code> new URL(context, spec) </code></pre> , the following rules apply: <ul> <li> if there is no context URL and the specification passed to the URL constructor doesn't contain a separator, the URL is considered to refer to a JarFile. <li> if there is a context URL, the context URL is assumed to refer to a JAR file or a Jar directory. <li> if the specification begins with a '/', the Jar directory is ignored, and the spec is considered to be at the root of the Jar file. <p> Examples: <dl> <dt> context: <b> jar:http://www.foo.com/bar/jar.jar!/ </b> , spec: <b> baz/entry.txt </b> <dd> url: <b> jar:http://www.foo.com/bar/jar.jar!/baz/entry.txt </b> <dt> context: <b> jar:http://www.foo.com/bar/jar.jar!/baz </b> , spec: <b> entry.txt </b> <dd> url: <b> jar:http://www.foo.com/bar/jar.jar!/baz/entry.txt </b> <dt> context: <b> jar:http://www.foo.com/bar/jar.jar!/baz </b> , spec: <b> /entry.txt </b> <dd> url: <b> jar:http://www.foo.com/bar/jar.jar!/entry.txt </b> </dd> </dt> </dd> </dt> </dd> </dt> </dl> </p><pre><code>public abstract class JarURLConnection\n</code></pre></section>	https://developer.android.com/reference/java/net/JarURLConnection.html
MalformedURLException	A										<section class="prog__container"><p> Thrown to indicate that a malformed URL has occurred. Either no legal protocol could be found in a specification string or the string could not be parsed.</p><pre><code>public class MalformedURLException\n</code></pre></section>	https://developer.android.com/reference/java/net/MalformedURLException.html
MulticastSocket	A										<section class="prog__container"><p> The multicast datagram socket class is useful for sending and receiving IP multicast packets. A MulticastSocket is a (UDP) DatagramSocket, with additional capabilities for joining "groups" of other multicast hosts on the internet. <p> A multicast group is specified by a class D IP address and by a standard UDP port number. Class D IP addresses are in the range <pre><code> 224.0.0.0 </code></pre> to <pre><code> 239.255.255.255 </code></pre> , inclusive. The address 224.0.0.0 is reserved and should not be used. <p> One would join a multicast group by first creating a MulticastSocket with the desired port, then invoking the <pre><code> joinGroup(InetAddress groupAddr) </code></pre> method: <pre> // join a Multicast group and send the group salutations ... String msg = "Hello"; InetAddress group = InetAddress.getByName("228.5.6.7"); MulticastSocket s = new MulticastSocket(6789); s.joinGroup(group); DatagramPacket hi = new DatagramPacket(msg.getBytes(), msg.length(), group, 6789); s.send(hi); // get their responses! byte[] buf = new byte[1000]; DatagramPacket recv = new DatagramPacket(buf, buf.length); s.receive(recv); ... // OK, I'm done talking - leave the group... s.leaveGroup(group); </pre> When one sends a message to a multicast group, <b> all </b> subscribing recipients to that host and port receive the message (within the time-to-live range of the packet, see below). The socket needn't be a member of the multicast group to send messages to it. <p> When a socket subscribes to a multicast group/port, it receives datagrams sent by other hosts to the group/port, as do all other members of the group and port. A socket relinquishes membership in a group by the leaveGroup(InetAddress addr) method. <b> Multiple MulticastSocket's </b> may subscribe to a multicast group and port concurrently, and they will all receive group datagrams. <p> Currently applets are not allowed to use multicast sockets. </p><pre><code>public class MulticastSocket\n</code></pre></section>	https://developer.android.com/reference/java/net/MulticastSocket.html
NetPermission	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public final class NetPermission\n</code></pre></section>	https://developer.android.com/reference/java/net/NetPermission.html
NetworkInterface	A										<section class="prog__container"><p> This class represents a Network Interface made up of a name, and a list of IP addresses assigned to this interface. It is used to identify the local interface on which a multicast group is joined. Interfaces are normally known by names such as "le0".</p><pre><code>public final class NetworkInterface\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/NetworkInterface.html
NoRouteToHostException	A										<section class="prog__container"><p> Signals that an error occurred while attempting to connect a socket to a remote address and port. Typically, the remote host cannot be reached because of an intervening firewall, or if an intermediate router is down.</p><pre><code>public class NoRouteToHostException\n</code></pre></section>	https://developer.android.com/reference/java/net/NoRouteToHostException.html
java.net	A										<section class="prog__container">The java.net package can be roughly divided in two sections:</section>	https://developer.android.com/reference/java/net/package-summary.html
PasswordAuthentication	A										<section class="prog__container"><p> The class PasswordAuthentication is a data holder that is used by Authenticator. It is simply a repository for a user name and a password.</p><pre><code>public final class PasswordAuthentication\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/PasswordAuthentication.html
PortUnreachableException	A										<section class="prog__container"><p> Signals that an ICMP Port Unreachable message has been received on a connected datagram.</p><pre><code>public class PortUnreachableException\n</code></pre></section>	https://developer.android.com/reference/java/net/PortUnreachableException.html
ProtocolException	A										<section class="prog__container"><p> Thrown to indicate that there is an error in the underlying protocol, such as a TCP error.</p><pre><code>public class ProtocolException\n</code></pre></section>	https://developer.android.com/reference/java/net/ProtocolException.html
ProtocolFamily	A										<section class="prog__container"><p> Represents a family of communication protocols.</p><pre><code>public interface ProtocolFamily\n</code></pre></section>	https://developer.android.com/reference/java/net/ProtocolFamily.html
Proxy	A										<section class="prog__container"><p> This class represents a proxy setting, typically a type (http, socks) and a socket address. A <pre><code> Proxy </code></pre> is an immutable object.</p><pre><code>public class Proxy\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/Proxy.html
Proxy.Type	A										<section class="prog__container"><p> Represents the proxy type.</p><pre><code>public static final enum Proxy.Type\n</code></pre></section>	https://developer.android.com/reference/java/net/Proxy.Type.html
ProxySelector	A										<section class="prog__container"><p> Selects the proxy server to use, if any, when connecting to the network resource referenced by a URL. A proxy selector is a concrete sub-class of this class and is registered by invoking the <pre><code> setDefault </code></pre> method. The currently registered proxy selector can be retrieved by calling <pre><code> getDefault </code></pre> method. <p> When a proxy selector is registered, for instance, a subclass of URLConnection class should call the <pre><code> select </code></pre> method for each URL request so that the proxy selector can decide if a direct, or proxied connection should be used. The <pre><code> select </code></pre> method returns an iterator over a collection with the preferred connection approach. <p> If a connection cannot be established to a proxy (PROXY or SOCKS) servers then the caller should call the proxy selector's <pre><code> connectFailed </code></pre> method to notify the proxy selector that the proxy server is unavailable. </p><pre><code>public abstract class ProxySelector\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/ProxySelector.html
ResponseCache	A										<section class="prog__container"><p> Represents implementations of URLConnection caches. An instance of such a class can be registered with the system by doing ResponseCache.setDefault(ResponseCache), and the system will call this object in order to: <ul> <li> store resource data which has been retrieved from an external source into the cache </li> <li> try to fetch a requested resource that may have been stored in the cache </li> </ul> The ResponseCache implementation decides which resources should be cached, and for how long they should be cached. If a request resource cannot be retrieved from the cache, then the protocol handlers will fetch the resource from its original location. The settings for URLConnection#useCaches controls whether the protocol is allowed to use a cached response. For more information on HTTP caching, see <i> RFC 2616: Hypertext Transfer Protocol -- HTTP/1.1 </i></p><pre><code>public abstract class ResponseCache\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/ResponseCache.html
SecureCacheResponse	A										<section class="prog__container"><p> Represents a cache response originally retrieved through secure means, such as TLS.</p><pre><code>public abstract class SecureCacheResponse\n</code></pre></section>	https://developer.android.com/reference/java/net/SecureCacheResponse.html
ServerSocket	A										<section class="prog__container"><p> This class implements server sockets. A server socket waits for requests to come in over the network. It performs some operation based on that request, and then possibly returns a result to the requester. <p> The actual work of the server socket is performed by an instance of the <pre><code> SocketImpl </code></pre> class. An application can change the socket factory that creates the socket implementation to configure itself to create sockets appropriate to the local firewall. </p><pre><code>public class ServerSocket\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/ServerSocket.html
Socket	A										<section class="prog__container"><p> This class implements client sockets (also called just "sockets"). A socket is an endpoint for communication between two machines. <p> The actual work of the socket is performed by an instance of the <pre><code> SocketImpl </code></pre> class. An application, by changing the socket factory that creates the socket implementation, can configure itself to create sockets appropriate to the local firewall. </p><pre><code>public class Socket\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/Socket.html
SocketAddress	A										<section class="prog__container"><p> This class represents a Socket Address with no protocol attachment. As an abstract class, it is meant to be subclassed with a specific, protocol dependent, implementation. <p> It provides an immutable object used by sockets for binding, connecting, or as returned values. </p><pre><code>public abstract class SocketAddress\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/SocketAddress.html
SocketException	A										<section class="prog__container"><p> Thrown to indicate that there is an error creating or accessing a Socket.</p><pre><code>public class SocketException\n</code></pre></section>	https://developer.android.com/reference/java/net/SocketException.html
SocketImpl	A										<section class="prog__container"><p> The abstract class <pre><code> SocketImpl </code></pre> is a common superclass of all classes that actually implement sockets. It is used to create both client and server sockets. <p> A "plain" socket implements these methods exactly as described, without attempting to go through a firewall or proxy. </p><pre><code>public abstract class SocketImpl\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/SocketImpl.html
SocketImplFactory	A										<section class="prog__container"><p> This interface defines a factory for socket implementations. It is used by the classes <pre><code> Socket </code></pre> and <pre><code> ServerSocket </code></pre> to create actual socket implementations.</p><pre><code>public interface SocketImplFactory\n</code></pre></section>	https://developer.android.com/reference/java/net/SocketImplFactory.html
SocketOption	A										<section class="prog__container"><p> A socket option associated with a socket. <p> In the <pre><code> channels </code></pre> package, the <pre><code> NetworkChannel </code></pre> interface defines the <pre><code> setOption </code></pre> and <pre><code> getOption </code></pre> methods to set and query the channel's socket options. </p><pre><code>public interface SocketOption\n</code></pre></section>	https://developer.android.com/reference/java/net/SocketOption.html
SocketOptions	A										<section class="prog__container"><pre><code>public interface SocketOptions\n</code></pre></section>	https://developer.android.com/reference/java/net/SocketOptions.html
SocketPermission	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public final class SocketPermission\n</code></pre></section>	https://developer.android.com/reference/java/net/SocketPermission.html
SocketTimeoutException	A										<section class="prog__container"><p> Signals that a timeout has occurred on a socket read or accept.</p><pre><code>public class SocketTimeoutException\n</code></pre></section>	https://developer.android.com/reference/java/net/SocketTimeoutException.html
StandardProtocolFamily	A										<section class="prog__container"><p> Defines the standard families of communication protocols.</p><pre><code>public final enum StandardProtocolFamily\n</code></pre></section>	https://developer.android.com/reference/java/net/StandardProtocolFamily.html
StandardSocketOptions	A										<section class="prog__container"><p> Defines the <em> standard </em> socket options. <p> The <pre><code> name </code></pre> of each socket option defined by this class is its field name. <p> In this release, the socket options defined here are used by <pre><code> network </code></pre> channels in the <pre><code> channels </code></pre> package. </p><pre><code>public final class StandardSocketOptions\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/StandardSocketOptions.html
UnknownHostException	A										<section class="prog__container"><p> Thrown to indicate that the IP address of a host could not be determined.</p><pre><code>public class UnknownHostException\n</code></pre></section>	https://developer.android.com/reference/java/net/UnknownHostException.html
UnknownServiceException	A										<section class="prog__container"><p> Thrown to indicate that an unknown service exception has occurred. Either the MIME type returned by a URL connection does not make sense, or the application is attempting to write to a read-only URL connection.</p><pre><code>public class UnknownServiceException\n</code></pre></section>	https://developer.android.com/reference/java/net/UnknownServiceException.html
URI	A										<section class="prog__container"><p> Represents a Uniform Resource Identifier (URI) reference. <p> Aside from some minor deviations noted below, an instance of this class represents a URI reference as defined by <i> RFC 2396: Uniform Resource Identifiers (URI): Generic Syntax </i> , amended by <i> RFC 2732: Format for Literal IPv6 Addresses in URLs </i> . The Literal IPv6 address format also supports scope_ids. The syntax and usage of scope_ids is described here . This class provides constructors for creating URI instances from their components or by parsing their string forms, methods for accessing the various components of an instance, and methods for normalizing, resolving, and relativizing URI instances. Instances of this class are immutable. <h4> URI syntax and components </h4> At the highest level a URI reference (hereinafter simply "URI") in string form has the syntax <blockquote> [ <i> scheme </i> <tt> <b> : </b> </tt> <i> </i> ] <i> scheme-specific-part </i> [ <tt> <b> # </b> </tt> <i> fragment </i> ] </blockquote> where square brackets [...] delineate optional components and the characters <tt> <b> : </b> </tt> and <tt> <b> # </b> </tt> stand for themselves. <p> An <i> absolute </i> URI specifies a scheme; a URI that is not absolute is said to be <i> relative </i> . URIs are also classified according to whether they are <i> opaque </i> or <i> hierarchical </i> . <p> An <i> opaque </i> URI is an absolute URI whose scheme-specific part does not begin with a slash character ( <tt> '/' </tt> ). Opaque URIs are not subject to further parsing. Some examples of opaque URIs are: <blockquote> <table cellpadding="0" cellspacing="0" summary="layout"> <tr> <td> <tt> mailto:java-net@java.sun.com </tt> <td> </td> </td> </tr> <tr> <td> <tt> news:comp.lang.java </tt> <td> </td> </td> </tr> <tr> <td> <tt> urn:isbn:096139210x </tt> </td> </tr> </table> </blockquote> <p> A <i> hierarchical </i> URI is either an absolute URI whose scheme-specific part begins with a slash character, or a relative URI, that is, a URI that does not specify a scheme. Some examples of hierarchical URIs are: <blockquote> <tt> http://java.sun.com/j2se/1.3/ </tt> <br> <tt> docs/guide/collections/designfaq.html#28 </tt> <br> <tt> ../../../demo/jfc/SwingSet2/src/SwingSet2.java </tt> <br> <tt> file:///~/calendar </tt> </br> </br> </br> </blockquote> <p> A hierarchical URI is subject to further parsing according to the syntax <blockquote> [ <i> scheme </i> <tt> <b> : </b> </tt> ][ <tt> <b> // </b> </tt> <i> authority </i> ][ <i> path </i> ][ <tt> <b> ? </b> </tt> <i> query </i> ][ <tt> <b> # </b> </tt> <i> fragment </i> ] </blockquote> where the characters <tt> <b> : </b> </tt> , <tt> <b> / </b> </tt> , <tt> <b> ? </b> </tt> , and <tt> <b> # </b> </tt> stand for themselves. The scheme-specific part of a hierarchical URI consists of the characters between the scheme and fragment components. <p> The authority component of a hierarchical URI is, if specified, either <i> server-based </i> or <i> registry-based </i> . A server-based authority parses according to the familiar syntax <blockquote> [ <i> user-info </i> <tt> <b> @ </b> </tt> ] <i> host </i> [ <tt> <b> : </b> </tt> <i> port </i> ] </blockquote> where the characters <tt> <b> @ </b> </tt> and <tt> <b> : </b> </tt> stand for themselves. Nearly all URI schemes currently in use are server-based. An authority component that does not parse in this way is considered to be registry-based. <p> The path component of a hierarchical URI is itself said to be absolute if it begins with a slash character ( <tt> '/' </tt> ); otherwise it is relative. The path of a hierarchical URI that is either absolute or specifies an authority is always absolute. <p> All told, then, a URI instance has the following nine components: <blockquote> <table summary="Describes the components of a URI:scheme,scheme-specific-part,authority,user-info,host,port,path,query,fragment"> <tr> <th> <i> Component </i> </th> <th> <i> Type </i> </th> </tr> <tr> <td> scheme </td> <td> <tt> String </tt> </td> </tr> <tr> <td> scheme-specific-part </td> <td> <tt> String </tt> </td> </tr> <tr> <td> authority </td> <td> <tt> String </tt> </td> </tr> <tr> <td> user-info </td> <td> <tt> String </tt> </td> </tr> <tr> <td> host </td> <td> <tt> String </tt> </td> </tr> <tr> <td> port </td> <td> <tt> int </tt> </td> </tr> <tr> <td> path </td> <td> <tt> String </tt> </td> </tr> <tr> <td> query </td> <td> <tt> String </tt> </td> </tr> <tr> <td> fragment </td> <td> <tt> String </tt> </td> </tr> </table> </blockquote> In a given instance any particular component is either <i> undefined </i> or <i> defined </i> with a distinct value. Undefined string components are represented by <tt> null </tt> , while undefined integer components are represented by <tt> -1 </tt> . A string component may be defined to have the empty string as its value; this is not equivalent to that component being undefined. <p> Whether a particular component is or is not defined in an instance depends upon the type of the URI being represented. An absolute URI has a scheme component. An opaque URI has a scheme, a scheme-specific part, and possibly a fragment, but has no other components. A hierarchical URI always has a path (though it may be empty) and a scheme-specific-part (which at least contains the path), and may have any of the other components. If the authority component is present and is server-based then the host component will be defined and the user-information and port components may be defined. <h4> Operations on URI instances </h4> The key operations supported by this class are those of <i> normalization </i> , <i> resolution </i> , and <i> relativization </i> . <p> <i> Normalization </i> is the process of removing unnecessary <tt> "." </tt> and <tt> ".." </tt> segments from the path component of a hierarchical URI. Each <tt> "." </tt> segment is simply removed. A <tt> ".." </tt> segment is removed only if it is preceded by a non- <tt> ".." </tt> segment. Normalization has no effect upon opaque URIs. <p> <i> Resolution </i> is the process of resolving one URI against another, <i> base </i> URI. The resulting URI is constructed from components of both URIs in the manner specified by RFC 2396, taking components from the base URI for those not specified in the original. For hierarchical URIs, the path of the original is resolved against the path of the base and then normalized. The result, for example, of resolving <blockquote> <tt> docs/guide/collections/designfaq.html#28 </tt> (1) </blockquote> against the base URI <tt> http://java.sun.com/j2se/1.3/ </tt> is the result URI <blockquote> <tt> http://java.sun.com/j2se/1.3/docs/guide/collections/designfaq.html#28 </tt> </blockquote> Resolving the relative URI <blockquote> <tt> ../../../demo/jfc/SwingSet2/src/SwingSet2.java </tt> (2) </blockquote> against this result yields, in turn, <blockquote> <tt> http://java.sun.com/j2se/1.3/demo/jfc/SwingSet2/src/SwingSet2.java </tt> </blockquote> Resolution of both absolute and relative URIs, and of both absolute and relative paths in the case of hierarchical URIs, is supported. Resolving the URI <tt> file:///~calendar </tt> against any other URI simply yields the original URI, since it is absolute. Resolving the relative URI (2) above against the relative base URI (1) yields the normalized, but still relative, URI <blockquote> <tt> demo/jfc/SwingSet2/src/SwingSet2.java </tt> </blockquote> <p> <i> Relativization </i> , finally, is the inverse of resolution: For any two normalized URIs <i> u </i> and <i> v </i> , <blockquote> <i> u </i> <tt> .relativize( </tt> <i> u </i> <tt> .resolve( </tt> <i> v </i> <tt> )).equals( </tt> <i> v </i> <tt> ) </tt> and <br> <i> u </i> <tt> .resolve( </tt> <i> u </i> <tt> .relativize( </tt> <i> v </i> <tt> )).equals( </tt> <i> v </i> <tt> ) </tt> . <br> </br> </br> </blockquote> This operation is often useful when constructing a document containing URIs that must be made relative to the base URI of the document wherever possible. For example, relativizing the URI <blockquote> <tt> http://java.sun.com/j2se/1.3/docs/guide/index.html </tt> </blockquote> against the base URI <blockquote> <tt> http://java.sun.com/j2se/1.3 </tt> </blockquote> yields the relative URI <tt> docs/guide/index.html </tt> . <h4> Character categories </h4> RFC 2396 specifies precisely which characters are permitted in the various components of a URI reference. The following categories, most of which are taken from that specification, are used below to describe these constraints: <blockquote> <table cellspacing="2" summary="Describes categories alpha,digit,alphanum,unreserved,punct,reserved,escaped,and other"> <tr> <th valign="top"> <i> alpha </i> </th> <td> The US-ASCII alphabetic characters, <tt> 'A' </tt> through <tt> 'Z' </tt> and <tt> 'a' </tt> through <tt> 'z' </tt> </td> </tr> <tr> <th valign="top"> <i> digit </i> </th> <td> The US-ASCII decimal digit characters, <tt> '0' </tt> through <tt> '9' </tt> </td> </tr> <tr> <th valign="top"> <i> alphanum </i> </th> <td> All <i> alpha </i> and <i> digit </i> characters </td> </tr> <tr> <th valign="top"> <i> unreserved </i> </th> <td> All <i> alphanum </i> characters together with those in the string <tt> "_-!.~'()*" </tt> </td> </tr> <tr> <th valign="top"> <i> punct </i> </th> <td> The characters in the string <tt> ",;:$&amp;+=" </tt> </td> </tr> <tr> <th valign="top"> <i> reserved </i> </th> <td> All <i> punct </i> characters together with those in the string <tt> "?/[]@" </tt> </td> </tr> <tr> <th valign="top"> <i> escaped </i> </th> <td> Escaped octets, that is, triplets consisting of the percent character ( <tt> '%' </tt> ) followed by two hexadecimal digits ( <tt> '0' </tt> - <tt> '9' </tt> , <tt> 'A' </tt> - <tt> 'F' </tt> , and <tt> 'a' </tt> - <tt> 'f' </tt> ) </td> </tr> <tr> <th valign="top"> <i> other </i> </th> <td> The Unicode characters that are not in the US-ASCII character set, are not control characters (according to the <pre><code> Character.isISOControl </code></pre> method), and are not space characters (according to the <pre><code> Character.isSpaceChar </code></pre> method) <i> ( <b> Deviation from RFC 2396 </b> , which is limited to US-ASCII) </i> </td> </tr> </table> </blockquote> <p> The set of all legal URI characters consists of the <i> unreserved </i> , <i> reserved </i> , <i> escaped </i> , and <i> other </i> characters. <h4> Escaped octets, quotation, encoding, and decoding </h4> RFC 2396 allows escaped octets to appear in the user-info, path, query, and fragment components. Escaping serves two purposes in URIs: <ul> <li> <p> To <i> encode </i> non-US-ASCII characters when a URI is required to conform strictly to RFC 2396 by not containing any <i> other </i> characters. </p><pre><code>public final class URI\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/URI.html
URISyntaxException	A										<section class="prog__container"><p> Checked exception thrown to indicate that a string could not be parsed as a URI reference.</p><pre><code>public class URISyntaxException\n</code></pre></section>	https://developer.android.com/reference/java/net/URISyntaxException.html
URL	A										<section class="prog__container"><p> Class <pre><code> URL </code></pre> represents a Uniform Resource Locator, a pointer to a "resource" on the World Wide Web. A resource can be something as simple as a file or a directory, or it can be a reference to a more complicated object, such as a query to a database or to a search engine. More information on the types of URLs and their formats can be found at: <blockquote> <i> http://www.socs.uts.edu.au/MosaicDocs-old/url-primer.html </i> </blockquote> <p> In general, a URL can be broken into several parts. The previous example of a URL indicates that the protocol to use is <pre><code> http </code></pre> (HyperText Transfer Protocol) and that the information resides on a host machine named <pre><code> www.socs.uts.edu.au </code></pre> . The information on that host machine is named <pre><code> /MosaicDocs-old/url-primer.html </code></pre> . The exact meaning of this name on the host machine is both protocol dependent and host dependent. The information normally resides in a file, but it could be generated on the fly. This component of the URL is called the <i> path </i> component. <p> A URL can optionally specify a "port", which is the port number to which the TCP connection is made on the remote host machine. If the port is not specified, the default port for the protocol is used instead. For example, the default port for <pre><code> http </code></pre> is <pre><code> 80 </code></pre> . An alternative port could be specified as: <blockquote> <pre> http://www.socs.uts.edu.au:80/MosaicDocs-old/url-primer.html </pre> </blockquote> <p> The syntax of <pre><code> URL </code></pre> is defined by <i> RFC 2396: Uniform Resource Identifiers (URI): Generic Syntax </i> , amended by <i> RFC 2732: Format for Literal IPv6 Addresses in URLs </i> . The Literal IPv6 address format also supports scope_ids. The syntax and usage of scope_ids is described here . <p> A URL may have appended to it a "fragment", also known as a "ref" or a "reference". The fragment is indicated by the sharp sign character "#" followed by more characters. For example, <blockquote> <pre> http://java.sun.com/index.html#chapter1 </pre> </blockquote> <p> This fragment is not technically part of the URL. Rather, it indicates that after the specified resource is retrieved, the application is specifically interested in that part of the document that has the tag <pre><code> chapter1 </code></pre> attached to it. The meaning of a tag is resource specific. <p> An application can also specify a "relative URL", which contains only enough information to reach the resource relative to another URL. Relative URLs are frequently used within HTML pages. For example, if the contents of the URL: <blockquote> <pre> http://java.sun.com/index.html </pre> </blockquote> contained within it the relative URL: <blockquote> <pre> FAQ.html </pre> </blockquote> it would be a shorthand for: <blockquote> <pre> http://java.sun.com/FAQ.html </pre> </blockquote> <p> The relative URL need not specify all the components of a URL. If the protocol, host name, or port number is missing, the value is inherited from the fully specified URL. The file component must be specified. The optional fragment is not inherited. <p> The URL class does not itself encode or decode any URL components according to the escaping mechanism defined in RFC2396. It is the responsibility of the caller to encode any fields, which need to be escaped prior to calling URL, and also to decode any escaped fields, that are returned from URL. Furthermore, because URL has no knowledge of URL escaping, it does not recognise equivalence between the encoded or decoded form of the same URL. For example, the two URLs: <br> <pre> http://foo.com/hello world/ and http://foo.com/hello%20world</pre> would be considered not equal to each other. <p> Note, the <pre><code> URI </code></pre> class does perform escaping of its component fields in certain circumstances. The recommended way to manage the encoding and decoding of URLs is to use <pre><code> URI </code></pre> , and to convert between these two classes using <pre><code> toURI() </code></pre> and <pre><code> toURL() </code></pre> . <p> The <pre><code> URLEncoder </code></pre> and <pre><code> URLDecoder </code></pre> classes can also be used, but only for HTML form encoding, which is not the same as the encoding scheme defined in RFC2396. </p><pre><code>public final class URL\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/URL.html
URLClassLoader	A										<section class="prog__container"><p> This class loader is used to load classes and resources from a search path of URLs referring to both JAR files and directories. Any URL that ends with a '/' is assumed to refer to a directory. Otherwise, the URL is assumed to refer to a JAR file which will be opened as needed. <p> The AccessControlContext of the thread that created the instance of URLClassLoader will be used when subsequently loading classes and resources. <p> The classes that are loaded are by default granted permission only to access the URLs specified when the URLClassLoader was created. </p><pre><code>public class URLClassLoader\n</code></pre></section>	https://developer.android.com/reference/java/net/URLClassLoader.html
URLConnection	A										<section class="prog__container"><p> The abstract class <pre><code> URLConnection </code></pre> is the superclass of all classes that represent a communications link between the application and a URL. Instances of this class can be used both to read from and to write to the resource referenced by the URL. In general, creating a connection to a URL is a multistep process: <p> <center> <table border="2" summary="Describes the process of creating a connection to a URL: openConnection() and connect() over time."> <tr> <th> <pre><code> openConnection() </code></pre> </th> <th> <pre><code> connect() </code></pre> </th> </tr> <tr> <td> Manipulate parameters that affect the connection to the remote resource. </td> <td> Interact with the resource; query header fields and contents. </td> </tr> </table> ----------------------------&gt; <br> time </br> </center> <ol> <li> The connection object is created by invoking the <pre><code> openConnection </code></pre> method on a URL. <li> The setup parameters and general request properties are manipulated. <li> The actual connection to the remote object is made, using the <pre><code> connect </code></pre> method. <li> The remote object becomes available. The header fields and the contents of the remote object can be accessed. </li> </li> </li> </li> </ol> <p> The setup parameters are modified using the following methods: <ul> <li> <pre><code> setAllowUserInteraction </code></pre> <li> <pre><code> setDoInput </code></pre> <li> <pre><code> setDoOutput </code></pre> <li> <pre><code> setIfModifiedSince </code></pre> <li> <pre><code> setUseCaches </code></pre> </li> </li> </li> </li> </li> </ul> <p> and the general request properties are modified using the method: <ul> <li> <pre><code> setRequestProperty </code></pre> </li> </ul> <p> Default values for the <pre><code> AllowUserInteraction </code></pre> and <pre><code> UseCaches </code></pre> parameters can be set using the methods <pre><code> setDefaultAllowUserInteraction </code></pre> and <pre><code> setDefaultUseCaches </code></pre> . <p> Each of the above <pre><code> set </code></pre> methods has a corresponding <pre><code> get </code></pre> method to retrieve the value of the parameter or general request property. The specific parameters and general request properties that are applicable are protocol specific. <p> The following methods are used to access the header fields and the contents after the connection is made to the remote object: <ul> <li> <pre><code> getContent </code></pre> <li> <pre><code> getHeaderField </code></pre> <li> <pre><code> getInputStream </code></pre> <li> <pre><code> getOutputStream </code></pre> </li> </li> </li> </li> </ul> <p> Certain header fields are accessed frequently. The methods: <ul> <li> <pre><code> getContentEncoding </code></pre> <li> <pre><code> getContentLength </code></pre> <li> <pre><code> getContentType </code></pre> <li> <pre><code> getDate </code></pre> <li> <pre><code> getExpiration </code></pre> <li> <pre><code> getLastModifed </code></pre> </li> </li> </li> </li> </li> </li> </ul> <p> provide convenient access to these fields. The <pre><code> getContentType </code></pre> method is used by the <pre><code> getContent </code></pre> method to determine the type of the remote object; subclasses may find it convenient to override the <pre><code> getContentType </code></pre> method. <p> In the common case, all of the pre-connection parameters and general request properties can be ignored: the pre-connection parameters and request properties default to sensible values. For most clients of this interface, there are only two interesting methods: <pre><code> getInputStream </code></pre> and <pre><code> getContent </code></pre> , which are mirrored in the <pre><code> URL </code></pre> class by convenience methods. <p> More information on the request properties and header fields of an <pre><code> http </code></pre> connection can be found at: <blockquote> <pre> http://www.ietf.org/rfc/rfc2616.txt </pre> </blockquote> Note about <pre><code> fileNameMap </code></pre> : In versions prior to JDK 1.1.6, field <pre><code> fileNameMap </code></pre> of <pre><code> URLConnection </code></pre> was public. In JDK 1.1.6 and later, <pre><code> fileNameMap </code></pre> is private; accessor and mutator methods <pre><code> getFileNameMap </code></pre> and <pre><code> setFileNameMap </code></pre> are added to access it. This change is also described on the Compatibility page. Invoking the <tt> close() </tt> methods on the <tt> InputStream </tt> or <tt> OutputStream </tt> of an <tt> URLConnection </tt> after a request may free network resources associated with this instance, unless particular protocol specifications specify different behaviours for it. </p><pre><code>public abstract class URLConnection\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/URLConnection.html
URLDecoder	A										<section class="prog__container"><p> Utility class for HTML form decoding. This class contains static methods for decoding a String from the <pre><code> application/x-www-form-urlencoded </code></pre> MIME format. <p> The conversion process is the reverse of that used by the URLEncoder class. It is assumed that all characters in the encoded string are one of the following: " <pre><code> a </code></pre> " through " <pre><code> z </code></pre> ", " <pre><code> A </code></pre> " through " <pre><code> Z </code></pre> ", " <pre><code> 0 </code></pre> " through " <pre><code> 9 </code></pre> ", and " <pre><code> - </code></pre> ", " <pre><code> _ </code></pre> ", " <pre><code> . </code></pre> ", and " <pre><code> * </code></pre> ". The character " <pre><code> % </code></pre> " is allowed but is interpreted as the start of a special escaped sequence. <p> The following rules are applied in the conversion: <p> <ul> <li> The alphanumeric characters " <pre><code> a </code></pre> " through " <pre><code> z </code></pre> ", " <pre><code> A </code></pre> " through " <pre><code> Z </code></pre> " and " <pre><code> 0 </code></pre> " through " <pre><code> 9 </code></pre> " remain the same. <li> The special characters " <pre><code> . </code></pre> ", " <pre><code> - </code></pre> ", " <pre><code> * </code></pre> ", and " <pre><code> _ </code></pre> " remain the same. <li> The plus sign " <pre><code> + </code></pre> " is converted into a space character " <pre><code> </code></pre> " . <li> A sequence of the form " <pre><code> % <i> xy </i> </code></pre> " will be treated as representing a byte where <i> xy </i> is the two-digit hexadecimal representation of the 8 bits. Then, all substrings that contain one or more of these byte sequences consecutively will be replaced by the character(s) whose encoding would result in those consecutive bytes. The encoding scheme used to decode these characters may be specified, or if unspecified, the default encoding of the platform will be used. </li> </li> </li> </li> </ul> <p> There are two possible ways in which this decoder could deal with illegal strings. It could either leave illegal characters alone or it could throw an <tt> <pre><code> IllegalArgumentException </code></pre> </tt> . Which approach the decoder takes is left to the implementation. </p><pre><code>public class URLDecoder\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/URLDecoder.html
URLEncoder	A										<section class="prog__container"><p> Utility class for HTML form encoding. This class contains static methods for converting a String to the <pre><code> application/x-www-form-urlencoded </code></pre> MIME format. For more information about HTML form encoding, consult the HTML specification . <p> When encoding a String, the following rules apply: <p> <ul> <li> The alphanumeric characters " <pre><code> a </code></pre> " through " <pre><code> z </code></pre> ", " <pre><code> A </code></pre> " through " <pre><code> Z </code></pre> " and " <pre><code> 0 </code></pre> " through " <pre><code> 9 </code></pre> " remain the same. <li> The special characters " <pre><code> . </code></pre> ", " <pre><code> - </code></pre> ", " <pre><code> * </code></pre> ", and " <pre><code> _ </code></pre> " remain the same. <li> The space character " <pre><code> </code></pre> " is converted into a plus sign " <pre><code> + </code></pre> ". <li> All other characters are unsafe and are first converted into one or more bytes using some encoding scheme. Then each byte is represented by the 3-character string " <pre><code> % <i> xy </i> </code></pre> ", where <i> xy </i> is the two-digit hexadecimal representation of the byte. The recommended encoding scheme to use is UTF-8. However, for compatibility reasons, if an encoding is not specified, then the default encoding of the platform is used. </li> </li> </li> </li> </ul> <p> For example using UTF-8 as the encoding scheme the string "The string ü@foo-bar" would get converted to "The+string+%C3%BC%40foo-bar" because in UTF-8 the character ü is encoded as two bytes C3 (hex) and BC (hex), and the character @ is encoded as one byte 40 (hex). </p><pre><code>public class URLEncoder\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/URLEncoder.html
URLStreamHandler	A										<section class="prog__container"><p> The abstract class <pre><code> URLStreamHandler </code></pre> is the common superclass for all stream protocol handlers. A stream protocol handler knows how to make a connection for a particular protocol type, such as <pre><code> http </code></pre> , <pre><code> ftp </code></pre> , or <pre><code> gopher </code></pre> . <p> In most cases, an instance of a <pre><code> URLStreamHandler </code></pre> subclass is not created directly by an application. Rather, the first time a protocol name is encountered when constructing a <pre><code> URL </code></pre> , the appropriate stream protocol handler is automatically loaded. </p><pre><code>public abstract class URLStreamHandler\nextends Object</code></pre></section>	https://developer.android.com/reference/java/net/URLStreamHandler.html
URLStreamHandlerFactory	A										<section class="prog__container"><p> This interface defines a factory for <pre><code> URL </code></pre> stream protocol handlers. <p> It is used by the <pre><code> URL </code></pre> class to create a <pre><code> URLStreamHandler </code></pre> for a specific protocol. </p><pre><code>public interface URLStreamHandlerFactory\n</code></pre></section>	https://developer.android.com/reference/java/net/URLStreamHandlerFactory.html
Buffer	A										<section class="prog__container"><p> A container for data of a specific primitive type. <p> A buffer is a linear, finite sequence of elements of a specific primitive type. Aside from its content, the essential properties of a buffer are its capacity, limit, and position: </p><pre><code>public abstract class Buffer\nextends Object</code></pre></section>	https://developer.android.com/reference/java/nio/Buffer.html
BufferOverflowException	A										<section class="prog__container"><p> Unchecked exception thrown when a relative <i> put </i> operation reaches the target buffer's limit.</p><pre><code>public class BufferOverflowException\n</code></pre></section>	https://developer.android.com/reference/java/nio/BufferOverflowException.html
BufferUnderflowException	A										<section class="prog__container"><p> Unchecked exception thrown when a relative <i> get </i> operation reaches the source buffer's limit.</p><pre><code>public class BufferUnderflowException\n</code></pre></section>	https://developer.android.com/reference/java/nio/BufferUnderflowException.html
ByteBuffer	A										<section class="prog__container"><p> A byte buffer. <p> This class defines six categories of operations upon byte buffers: <ul> <li> <p> Absolute and relative <pre><code> </code></pre> <i> get </i> <pre><code> </code></pre> </p><pre><code>public abstract class ByteBuffer\n</code></pre></section>	https://developer.android.com/reference/java/nio/ByteBuffer.html
ByteOrder	A										<section class="prog__container"><p> A typesafe enumeration for byte orders.</p><pre><code>public final class ByteOrder\nextends Object</code></pre></section>	https://developer.android.com/reference/java/nio/ByteOrder.html
CharBuffer	A										<section class="prog__container"><p> A char buffer. <p> This class defines four categories of operations upon char buffers: <ul> <li> <p> Absolute and relative <pre><code> </code></pre> <i> get </i> <pre><code> </code></pre> </p><pre><code>public abstract class CharBuffer\n</code></pre></section>	https://developer.android.com/reference/java/nio/CharBuffer.html
DoubleBuffer	A										<section class="prog__container"><p> A double buffer. <p> This class defines four categories of operations upon double buffers: <ul> <li> <p> Absolute and relative <pre><code> </code></pre> <i> get </i> <pre><code> </code></pre> </p><pre><code>public abstract class DoubleBuffer\n</code></pre></section>	https://developer.android.com/reference/java/nio/DoubleBuffer.html
FloatBuffer	A										<section class="prog__container"><p> A float buffer. <p> This class defines four categories of operations upon float buffers: <ul> <li> <p> Absolute and relative <pre><code> </code></pre> <i> get </i> <pre><code> </code></pre> </p><pre><code>public abstract class FloatBuffer\n</code></pre></section>	https://developer.android.com/reference/java/nio/FloatBuffer.html
IntBuffer	A										<section class="prog__container"><p> An int buffer. <p> This class defines four categories of operations upon int buffers: <ul> <li> <p> Absolute and relative <pre><code> </code></pre> <i> get </i> <pre><code> </code></pre> </p><pre><code>public abstract class IntBuffer\n</code></pre></section>	https://developer.android.com/reference/java/nio/IntBuffer.html
InvalidMarkException	A										<section class="prog__container"><p> Unchecked exception thrown when an attempt is made to reset a buffer when its mark is not defined.</p><pre><code>public class InvalidMarkException\n</code></pre></section>	https://developer.android.com/reference/java/nio/InvalidMarkException.html
LongBuffer	A										<section class="prog__container"><p> A long buffer. <p> This class defines four categories of operations upon long buffers: <ul> <li> <p> Absolute and relative <pre><code> </code></pre> <i> get </i> <pre><code> </code></pre> </p><pre><code>public abstract class LongBuffer\n</code></pre></section>	https://developer.android.com/reference/java/nio/LongBuffer.html
MappedByteBuffer	A										<section class="prog__container"><p> A direct byte buffer whose content is a memory-mapped region of a file. <p> Mapped byte buffers are created via the <pre><code> FileChannel.map </code></pre> method. This class extends the <pre><code> ByteBuffer </code></pre> class with operations that are specific to memory-mapped file regions. <p> A mapped byte buffer and the file mapping that it represents remain valid until the buffer itself is garbage-collected. <p> The content of a mapped byte buffer can change at any time, for example if the content of the corresponding region of the mapped file is changed by this program or another. Whether or not such changes occur, and when they occur, is operating-system dependent and therefore unspecified. <p> All or part of a mapped byte buffer may become inaccessible at any time, for example if the mapped file is truncated. An attempt to access an inaccessible region of a mapped byte buffer will not change the buffer's content and will cause an unspecified exception to be thrown either at the time of the access or at some later time. It is therefore strongly recommended that appropriate precautions be taken to avoid the manipulation of a mapped file by this program, or by a concurrently running program, except to read or write the file's content. <p> Mapped byte buffers otherwise behave no differently than ordinary direct byte buffers. </p><pre><code>public abstract class MappedByteBuffer\n</code></pre></section>	https://developer.android.com/reference/java/nio/MappedByteBuffer.html
java.nio	A										<section class="prog__container">The central abstractions of the NIO APIs are:</section>	https://developer.android.com/reference/java/nio/package-summary.html
ReadOnlyBufferException	A										<section class="prog__container"><p> Unchecked exception thrown when a content-mutation method such as <tt> put </tt> or <tt> compact </tt> is invoked upon a read-only buffer.</p><pre><code>public class ReadOnlyBufferException\n</code></pre></section>	https://developer.android.com/reference/java/nio/ReadOnlyBufferException.html
ShortBuffer	A										<section class="prog__container"><p> A short buffer. <p> This class defines four categories of operations upon short buffers: <ul> <li> <p> Absolute and relative <pre><code> </code></pre> <i> get </i> <pre><code> </code></pre> </p><pre><code>public abstract class ShortBuffer\n</code></pre></section>	https://developer.android.com/reference/java/nio/ShortBuffer.html
AlreadyBoundException	A										<section class="prog__container"><p> Unchecked exception thrown when an attempt is made to bind the socket a network oriented channel that is already bound.</p><pre><code>public class AlreadyBoundException\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/AlreadyBoundException.html
AlreadyConnectedException	A										<section class="prog__container"><p> Unchecked exception thrown when an attempt is made to connect a <pre><code> SocketChannel </code></pre> that is already connected.</p><pre><code>public class AlreadyConnectedException\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/AlreadyConnectedException.html
AsynchronousCloseException	A										<section class="prog__container"><p> Checked exception received by a thread when another thread closes the channel or the part of the channel upon which it is blocked in an I/O operation.</p><pre><code>public class AsynchronousCloseException\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/AsynchronousCloseException.html
ByteChannel	A										<section class="prog__container"><p> A channel that can read and write bytes. This interface simply unifies <pre><code> ReadableByteChannel </code></pre> and <pre><code> WritableByteChannel </code></pre> ; it does not specify any new operations.</p><pre><code>public interface ByteChannel\nimplements ReadableByteChannel, WritableByteChannel</code></pre></section>	https://developer.android.com/reference/java/nio/channels/ByteChannel.html
CancelledKeyException	A										<section class="prog__container"><p> Unchecked exception thrown when an attempt is made to use a selection key that is no longer valid.</p><pre><code>public class CancelledKeyException\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/CancelledKeyException.html
Channel	A										<section class="prog__container"><p> A nexus for I/O operations. <p> A channel represents an open connection to an entity such as a hardware device, a file, a network socket, or a program component that is capable of performing one or more distinct I/O operations, for example reading or writing. <p> A channel is either open or closed. A channel is open upon creation, and once closed it remains closed. Once a channel is closed, any attempt to invoke an I/O operation upon it will cause a <pre><code> ClosedChannelException </code></pre> to be thrown. Whether or not a channel is open may be tested by invoking its <pre><code> isOpen </code></pre> method. <p> Channels are, in general, intended to be safe for multithreaded access as described in the specifications of the interfaces and classes that extend and implement this interface. </p><pre><code>public interface Channel\nimplements Closeable</code></pre></section>	https://developer.android.com/reference/java/nio/channels/Channel.html
Channels	A										<section class="prog__container"><p> Utility methods for channels and streams. <p> This class defines static methods that support the interoperation of the stream classes of the <tt> <pre><code> java.io </code></pre> </tt> package with the channel classes of this package. </p><pre><code>public final class Channels\nextends Object</code></pre></section>	https://developer.android.com/reference/java/nio/channels/Channels.html
ClosedByInterruptException	A										<section class="prog__container"><p> Checked exception received by a thread when another thread interrupts it while it is blocked in an I/O operation upon a channel. Before this exception is thrown the channel will have been closed and the interrupt status of the previously-blocked thread will have been set.</p><pre><code>public class ClosedByInterruptException\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/ClosedByInterruptException.html
ClosedChannelException	A										<section class="prog__container"><p> Checked exception thrown when an attempt is made to invoke or complete an I/O operation upon channel that is closed, or at least closed to that operation. That this exception is thrown does not necessarily imply that the channel is completely closed. A socket channel whose write half has been shut down, for example, may still be open for reading.</p><pre><code>public class ClosedChannelException\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/ClosedChannelException.html
ClosedSelectorException	A										<section class="prog__container"><p> Unchecked exception thrown when an attempt is made to invoke an I/O operation upon a closed selector.</p><pre><code>public class ClosedSelectorException\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/ClosedSelectorException.html
ConnectionPendingException	A										<section class="prog__container"><p> Unchecked exception thrown when an attempt is made to connect a <pre><code> SocketChannel </code></pre> for which a non-blocking connection operation is already in progress.</p><pre><code>public class ConnectionPendingException\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/ConnectionPendingException.html
DatagramChannel	A										<section class="prog__container"><p> A selectable channel for datagram-oriented sockets. <p> A datagram channel is created by invoking one of the <pre><code> open </code></pre> methods of this class. It is not possible to create a channel for an arbitrary, pre-existing datagram socket. A newly-created datagram channel is open but not connected. A datagram channel need not be connected in order for the <pre><code> send </code></pre> and <pre><code> receive </code></pre> methods to be used. A datagram channel may be connected, by invoking its <pre><code> connect </code></pre> method, in order to avoid the overhead of the security checks are otherwise performed as part of every send and receive operation. A datagram channel must be connected in order to use the <pre><code> read </code></pre> and <pre><code> write </code></pre> methods, since those methods do not accept or return socket addresses. <p> Once connected, a datagram channel remains connected until it is disconnected or closed. Whether or not a datagram channel is connected may be determined by invoking its <pre><code> isConnected </code></pre> method. <p> Socket options are configured using the <pre><code> setOption </code></pre> method. A datagram channel to an Internet Protocol socket supports the following options: <blockquote> <table border=""> <tr> <th> Option Name </th> <th> Description </th> </tr> <tr> <td> <pre><code> SO_SNDBUF </code></pre> </td> <td> The size of the socket send buffer </td> </tr> <tr> <td> <pre><code> SO_RCVBUF </code></pre> </td> <td> The size of the socket receive buffer </td> </tr> <tr> <td> <pre><code> SO_REUSEADDR </code></pre> </td> <td> Re-use address </td> </tr> <tr> <td> <pre><code> SO_BROADCAST </code></pre> </td> <td> Allow transmission of broadcast datagrams </td> </tr> <tr> <td> <pre><code> IP_TOS </code></pre> </td> <td> The Type of Service (ToS) octet in the Internet Protocol (IP) header </td> </tr> <tr> <td> <pre><code> IP_MULTICAST_IF </code></pre> </td> <td> The network interface for Internet Protocol (IP) multicast datagrams </td> </tr> <tr> <td> <pre><code> IP_MULTICAST_TTL </code></pre> </td> <td> The <em> time-to-live </em> for Internet Protocol (IP) multicast datagrams </td> </tr> <tr> <td> <pre><code> IP_MULTICAST_LOOP </code></pre> </td> <td> Loopback for Internet Protocol (IP) multicast datagrams </td> </tr> </table> </blockquote> Additional (implementation specific) options may also be supported. <p> Datagram channels are safe for use by multiple concurrent threads. They support concurrent reading and writing, though at most one thread may be reading and at most one thread may be writing at any given time. </p><pre><code>public abstract class DatagramChannel\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/DatagramChannel.html
FileChannel	A										<section class="prog__container"><p> A channel for reading, writing, mapping, and manipulating a file. <p> A file channel is a <pre><code> SeekableByteChannel </code></pre> that is connected to a file. It has a current <i> position </i> within its file which can be both <pre><code> <i> queried </i> </code></pre> and <pre><code> <i> modified </i> </code></pre> . The file itself contains a variable-length sequence of bytes that can be read and written and whose current <pre><code> <i> size </i> </code></pre> can be queried. The size of the file increases when bytes are written beyond its current size; the size of the file decreases when it is <pre><code> </code></pre> <i> truncated </i> <pre><code> </code></pre> </p><pre><code>public abstract class FileChannel\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/FileChannel.html
FileChannel.MapMode	A										<section class="prog__container"><p> A typesafe enumeration for file-mapping modes.</p><pre><code>public static class FileChannel.MapMode\nextends Object</code></pre></section>	https://developer.android.com/reference/java/nio/channels/FileChannel.MapMode.html
FileLock	A										<section class="prog__container"><p> A token representing a lock on a region of a file. <p> A file-lock object is created each time a lock is acquired on a file via one of the <pre><code> lock </code></pre> or <pre><code> tryLock </code></pre> methods of the <pre><code> FileChannel </code></pre> class <p> A file-lock object is initially valid. It remains valid until the lock is released by invoking the <pre><code> release </code></pre> method, by closing the channel that was used to acquire it, or by the termination of the Java virtual machine, whichever comes first. The validity of a lock may be tested by invoking its <pre><code> isValid </code></pre> method. <p> A file lock is either <i> exclusive </i> or <i> shared </i> . A shared lock prevents other concurrently-running programs from acquiring an overlapping exclusive lock, but does allow them to acquire overlapping shared locks. An exclusive lock prevents other programs from acquiring an overlapping lock of either type. Once it is released, a lock has no further effect on the locks that may be acquired by other programs. <p> Whether a lock is exclusive or shared may be determined by invoking its <pre><code> isShared </code></pre> method. Some platforms do not support shared locks, in which case a request for a shared lock is automatically converted into a request for an exclusive lock. <p> The locks held on a particular file by a single Java virtual machine do not overlap. The <pre><code> overlaps </code></pre> method may be used to test whether a candidate lock range overlaps an existing lock. <p> A file-lock object records the file channel upon whose file the lock is held, the type and validity of the lock, and the position and size of the locked region. Only the validity of a lock is subject to change over time; all other aspects of a lock's state are immutable. <p> File locks are held on behalf of the entire Java virtual machine. They are not suitable for controlling access to a file by multiple threads within the same virtual machine. <p> File-lock objects are safe for use by multiple concurrent threads. <h4> Platform dependencies </h4> <p> This file-locking API is intended to map directly to the native locking facility of the underlying operating system. Thus the locks held on a file should be visible to all programs that have access to the file, regardless of the language in which those programs are written. <p> Whether or not a lock actually prevents another program from accessing the content of the locked region is system-dependent and therefore unspecified. The native file-locking facilities of some systems are merely <i> advisory </i> , meaning that programs must cooperatively observe a known locking protocol in order to guarantee data integrity. On other systems native file locks are <i> mandatory </i> , meaning that if one program locks a region of a file then other programs are actually prevented from accessing that region in a way that would violate the lock. On yet other systems, whether native file locks are advisory or mandatory is configurable on a per-file basis. To ensure consistent and correct behavior across platforms, it is strongly recommended that the locks provided by this API be used as if they were advisory locks. <p> On some systems, acquiring a mandatory lock on a region of a file prevents that region from being <pre><code> <i> mapped into memory </i> </code></pre> , and vice versa. Programs that combine locking and mapping should be prepared for this combination to fail. <p> On some systems, closing a channel releases all locks held by the Java virtual machine on the underlying file regardless of whether the locks were acquired via that channel or via another channel open on the same file. It is strongly recommended that, within a program, a unique channel be used to acquire all locks on any given file. <p> Some network filesystems permit file locking to be used with memory-mapped files only when the locked regions are page-aligned and a whole multiple of the underlying hardware's page size. Some network filesystems do not implement file locks on regions that extend past a certain position, often 2 <sup> 30 </sup> or 2 <sup> 31 </sup> . In general, great care should be taken when locking files that reside on network filesystems. </p><pre><code>public abstract class FileLock\nextends Object</code></pre></section>	https://developer.android.com/reference/java/nio/channels/FileLock.html
FileLockInterruptionException	A										<section class="prog__container"><p> Checked exception received by a thread when another thread interrupts it while it is waiting to acquire a file lock. Before this exception is thrown the interrupt status of the previously-blocked thread will have been set.</p><pre><code>public class FileLockInterruptionException\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/FileLockInterruptionException.html
GatheringByteChannel	A										<section class="prog__container"><p> A channel that can write bytes from a sequence of buffers. <p> A <i> gathering </i> write operation writes, in a single invocation, a sequence of bytes from one or more of a given sequence of buffers. Gathering writes are often useful when implementing network protocols or file formats that, for example, group data into segments consisting of one or more fixed-length headers followed by a variable-length body. Similar <i> scattering </i> read operations are defined in the <pre><code> ScatteringByteChannel </code></pre> interface. </p><pre><code>public interface GatheringByteChannel\nimplements WritableByteChannel</code></pre></section>	https://developer.android.com/reference/java/nio/channels/GatheringByteChannel.html
IllegalBlockingModeException	A										<section class="prog__container"><p> Unchecked exception thrown when a blocking-mode-specific operation is invoked upon a channel in the incorrect blocking mode.</p><pre><code>public class IllegalBlockingModeException\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/IllegalBlockingModeException.html
IllegalSelectorException	A										<section class="prog__container"><p> Unchecked exception thrown when an attempt is made to register a channel with a selector that was not created by the provider that created the channel.</p><pre><code>public class IllegalSelectorException\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/IllegalSelectorException.html
InterruptibleChannel	A										<section class="prog__container"><p> A channel that can be asynchronously closed and interrupted. <p> A channel that implements this interface is <i> asynchronously closeable: </i> If a thread is blocked in an I/O operation on an interruptible channel then another thread may invoke the channel's <pre><code> close </code></pre> method. This will cause the blocked thread to receive an <pre><code> AsynchronousCloseException </code></pre> . <p> A channel that implements this interface is also <i> interruptible: </i> If a thread is blocked in an I/O operation on an interruptible channel then another thread may invoke the blocked thread's <pre><code> interrupt </code></pre> method. This will cause the channel to be closed, the blocked thread to receive a <pre><code> ClosedByInterruptException </code></pre> , and the blocked thread's interrupt status to be set. <p> If a thread's interrupt status is already set and it invokes a blocking I/O operation upon a channel then the channel will be closed and the thread will immediately receive a <pre><code> ClosedByInterruptException </code></pre> ; its interrupt status will remain set. <p> A channel supports asynchronous closing and interruption if, and only if, it implements this interface. This can be tested at runtime, if necessary, via the <tt> instanceof </tt> operator. </p><pre><code>public interface InterruptibleChannel\nimplements Channel</code></pre></section>	https://developer.android.com/reference/java/nio/channels/InterruptibleChannel.html
NetworkChannel	A										<section class="prog__container"><p> A channel to a network socket. <p> A channel that implements this interface is a channel to a network socket. The <pre><code> bind </code></pre> method is used to bind the socket to a local <pre><code> address </code></pre> , the <pre><code> getLocalAddress </code></pre> method returns the address that the socket is bound to, and the <pre><code> setOption </code></pre> and <pre><code> getOption </code></pre> methods are used to set and query socket options. An implementation of this interface should specify the socket options that it supports. <p> The <pre><code> bind </code></pre> and <pre><code> setOption </code></pre> methods that do not otherwise have a value to return are specified to return the network channel upon which they are invoked. This allows method invocations to be chained. Implementations of this interface should specialize the return type so that method invocations on the implementation class can be chained. </p><pre><code>public interface NetworkChannel\nimplements Channel</code></pre></section>	https://developer.android.com/reference/java/nio/channels/NetworkChannel.html
NoConnectionPendingException	A										<section class="prog__container"><p> Unchecked exception thrown when the <pre><code> finishConnect </code></pre> method of a <pre><code> SocketChannel </code></pre> is invoked without first successfully invoking its <pre><code> connect </code></pre> method.</p><pre><code>public class NoConnectionPendingException\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/NoConnectionPendingException.html
NonReadableChannelException	A										<section class="prog__container"><p> Unchecked exception thrown when an attempt is made to read from a channel that was not originally opened for reading.</p><pre><code>public class NonReadableChannelException\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/NonReadableChannelException.html
NonWritableChannelException	A										<section class="prog__container"><p> Unchecked exception thrown when an attempt is made to write to a channel that was not originally opened for writing.</p><pre><code>public class NonWritableChannelException\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/NonWritableChannelException.html
NotYetBoundException	A										<section class="prog__container"><p> Unchecked exception thrown when an attempt is made to invoke an I/O operation upon a server socket channel that is not yet bound.</p><pre><code>public class NotYetBoundException\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/NotYetBoundException.html
NotYetConnectedException	A										<section class="prog__container"><p> Unchecked exception thrown when an attempt is made to invoke an I/O operation upon a socket channel that is not yet connected.</p><pre><code>public class NotYetConnectedException\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/NotYetConnectedException.html
OverlappingFileLockException	A										<section class="prog__container"><p> Unchecked exception thrown when an attempt is made to acquire a lock on a region of a file that overlaps a region already locked by the same Java virtual machine, or when another thread is already waiting to lock an overlapping region of the same file.</p><pre><code>public class OverlappingFileLockException\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/OverlappingFileLockException.html
java.nio.channels	A										<section class="prog__container">Channels</section>	https://developer.android.com/reference/java/nio/channels/package-summary.html
Pipe	A										<section class="prog__container"><p> A pair of channels that implements a unidirectional pipe. <p> A pipe consists of a pair of channels: A writable <pre><code> </code></pre> sink <pre><code> </code></pre> </p><pre><code>public abstract class Pipe\nextends Object</code></pre></section>	https://developer.android.com/reference/java/nio/channels/Pipe.html
Pipe.SinkChannel	A										<section class="prog__container"><p> A channel representing the writable end of a <pre><code> Pipe </code></pre> .</p><pre><code>public static abstract class Pipe.SinkChannel\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/Pipe.SinkChannel.html
Pipe.SourceChannel	A										<section class="prog__container"><p> A channel representing the readable end of a <pre><code> Pipe </code></pre> .</p><pre><code>public static abstract class Pipe.SourceChannel\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/Pipe.SourceChannel.html
ReadableByteChannel	A										<section class="prog__container"><p> A channel that can read bytes. <p> Only one read operation upon a readable channel may be in progress at any given time. If one thread initiates a read operation upon a channel then any other thread that attempts to initiate another read operation will block until the first operation is complete. Whether or not other kinds of I/O operations may proceed concurrently with a read operation depends upon the type of the channel. </p><pre><code>public interface ReadableByteChannel\nimplements Channel</code></pre></section>	https://developer.android.com/reference/java/nio/channels/ReadableByteChannel.html
ScatteringByteChannel	A										<section class="prog__container"><p> A channel that can read bytes into a sequence of buffers. <p> A <i> scattering </i> read operation reads, in a single invocation, a sequence of bytes into one or more of a given sequence of buffers. Scattering reads are often useful when implementing network protocols or file formats that, for example, group data into segments consisting of one or more fixed-length headers followed by a variable-length body. Similar <i> gathering </i> write operations are defined in the <pre><code> GatheringByteChannel </code></pre> interface. </p><pre><code>public interface ScatteringByteChannel\nimplements ReadableByteChannel</code></pre></section>	https://developer.android.com/reference/java/nio/channels/ScatteringByteChannel.html
SeekableByteChannel	A										<section class="prog__container"><p> A byte channel that maintains a current <i> position </i> and allows the position to be changed. <p> A seekable byte channel is connected to an entity, typically a file, that contains a variable-length sequence of bytes that can be read and written. The current position can be <pre><code> <i> queried </i> </code></pre> and <pre><code> <i> modified </i> </code></pre> . The channel also provides access to the current <i> size </i> of the entity to which the channel is connected. The size increases when bytes are written beyond its current size; the size decreases when it is <pre><code> <i> truncated </i> </code></pre> . <p> The <pre><code> position </code></pre> and <pre><code> truncate </code></pre> methods which do not otherwise have a value to return are specified to return the channel upon which they are invoked. This allows method invocations to be chained. Implementations of this interface should specialize the return type so that method invocations on the implementation class can be chained. </p><pre><code>public interface SeekableByteChannel\nimplements ByteChannel</code></pre></section>	https://developer.android.com/reference/java/nio/channels/SeekableByteChannel.html
SelectableChannel	A										<section class="prog__container"><p> A channel that can be multiplexed via a <pre><code> Selector </code></pre> . <p> In order to be used with a selector, an instance of this class must first be <i> registered </i> via the <pre><code> register </code></pre> method. This method returns a new <pre><code> SelectionKey </code></pre> object that represents the channel's registration with the selector. <p> Once registered with a selector, a channel remains registered until it is <i> deregistered </i> . This involves deallocating whatever resources were allocated to the channel by the selector. <p> A channel cannot be deregistered directly; instead, the key representing its registration must be <i> cancelled </i> . Cancelling a key requests that the channel be deregistered during the selector's next selection operation. A key may be cancelled explicitly by invoking its <pre><code> cancel </code></pre> method. All of a channel's keys are cancelled implicitly when the channel is closed, whether by invoking its <pre><code> close </code></pre> method or by interrupting a thread blocked in an I/O operation upon the channel. <p> If the selector itself is closed then the channel will be deregistered, and the key representing its registration will be invalidated, without further delay. <p> A channel may be registered at most once with any particular selector. <p> Whether or not a channel is registered with one or more selectors may be determined by invoking the <pre><code> isRegistered </code></pre> method. <p> Selectable channels are safe for use by multiple concurrent threads. </p><pre><code>public abstract class SelectableChannel\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/SelectableChannel.html
SelectionKey	A										<section class="prog__container"><p> A token representing the registration of a <pre><code> SelectableChannel </code></pre> with a <pre><code> Selector </code></pre> . <p> A selection key is created each time a channel is registered with a selector. A key remains valid until it is <i> cancelled </i> by invoking its <pre><code> cancel </code></pre> method, by closing its channel, or by closing its selector. Cancelling a key does not immediately remove it from its selector; it is instead added to the selector's <i> cancelled-key set </i> for removal during the next selection operation. The validity of a key may be tested by invoking its <pre><code> isValid </code></pre> method. <p> A selection key contains two <i> operation sets </i> represented as integer values. Each bit of an operation set denotes a category of selectable operations that are supported by the key's channel. <ul> <li> <p> The <i> interest set </i> determines which operation categories will be tested for readiness the next time one of the selector's selection methods is invoked. The interest set is initialized with the value given when the key is created; it may later be changed via the <pre><code> interestOps(int) </code></pre> method. </p><pre><code>public abstract class SelectionKey\nextends Object</code></pre></section>	https://developer.android.com/reference/java/nio/channels/SelectionKey.html
Selector	A										<section class="prog__container"><p> A multiplexor of <pre><code> SelectableChannel </code></pre> objects. <p> A selector may be created by invoking the <pre><code> open </code></pre> method of this class, which will use the system's default <pre><code> </code></pre> selector provider <pre><code> </code></pre> </p><pre><code>public abstract class Selector\nextends Object</code></pre></section>	https://developer.android.com/reference/java/nio/channels/Selector.html
ServerSocketChannel	A										<section class="prog__container"><p> A selectable channel for stream-oriented listening sockets. <p> A server-socket channel is created by invoking the <pre><code> open </code></pre> method of this class. It is not possible to create a channel for an arbitrary, pre-existing <pre><code> ServerSocket </code></pre> . A newly-created server-socket channel is open but not yet bound. An attempt to invoke the <pre><code> accept </code></pre> method of an unbound server-socket channel will cause a <pre><code> NotYetBoundException </code></pre> to be thrown. A server-socket channel can be bound by invoking one of the <pre><code> bind </code></pre> methods defined by this class. <p> Socket options are configured using the <pre><code> setOption </code></pre> method. Server-socket channels support the following options: <blockquote> <table border=""> <tr> <th> Option Name </th> <th> Description </th> </tr> <tr> <td> <pre><code> SO_RCVBUF </code></pre> </td> <td> The size of the socket receive buffer </td> </tr> <tr> <td> <pre><code> SO_REUSEADDR </code></pre> </td> <td> Re-use address </td> </tr> </table> </blockquote> Additional (implementation specific) options may also be supported. <p> Server-socket channels are safe for use by multiple concurrent threads. </p><pre><code>public abstract class ServerSocketChannel\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/ServerSocketChannel.html
SocketChannel	A										<section class="prog__container"><p> A selectable channel for stream-oriented connecting sockets. <p> A socket channel is created by invoking one of the <pre><code> open </code></pre> methods of this class. It is not possible to create a channel for an arbitrary, pre-existing socket. A newly-created socket channel is open but not yet connected. An attempt to invoke an I/O operation upon an unconnected channel will cause a <pre><code> NotYetConnectedException </code></pre> to be thrown. A socket channel can be connected by invoking its <pre><code> connect </code></pre> method; once connected, a socket channel remains connected until it is closed. Whether or not a socket channel is connected may be determined by invoking its <pre><code> isConnected </code></pre> method. <p> Socket channels support <i> non-blocking connection: </i> A socket channel may be created and the process of establishing the link to the remote socket may be initiated via the <pre><code> connect </code></pre> method for later completion by the <pre><code> finishConnect </code></pre> method. Whether or not a connection operation is in progress may be determined by invoking the <pre><code> isConnectionPending </code></pre> method. <p> Socket channels support <i> asynchronous shutdown, </i> which is similar to the asynchronous close operation specified in the <pre><code> Channel </code></pre> class. If the input side of a socket is shut down by one thread while another thread is blocked in a read operation on the socket's channel, then the read operation in the blocked thread will complete without reading any bytes and will return <tt> -1 </tt> . If the output side of a socket is shut down by one thread while another thread is blocked in a write operation on the socket's channel, then the blocked thread will receive an <pre><code> AsynchronousCloseException </code></pre> . <p> Socket options are configured using the <pre><code> setOption </code></pre> method. Socket channels support the following options: <blockquote> <table border=""> <tr> <th> Option Name </th> <th> Description </th> </tr> <tr> <td> <pre><code> SO_SNDBUF </code></pre> </td> <td> The size of the socket send buffer </td> </tr> <tr> <td> <pre><code> SO_RCVBUF </code></pre> </td> <td> The size of the socket receive buffer </td> </tr> <tr> <td> <pre><code> SO_KEEPALIVE </code></pre> </td> <td> Keep connection alive </td> </tr> <tr> <td> <pre><code> SO_REUSEADDR </code></pre> </td> <td> Re-use address </td> </tr> <tr> <td> <pre><code> SO_LINGER </code></pre> </td> <td> Linger on close if data is present (when configured in blocking mode only) </td> </tr> <tr> <td> <pre><code> TCP_NODELAY </code></pre> </td> <td> Disable the Nagle algorithm </td> </tr> </table> </blockquote> Additional (implementation specific) options may also be supported. <p> Socket channels are safe for use by multiple concurrent threads. They support concurrent reading and writing, though at most one thread may be reading and at most one thread may be writing at any given time. The <pre><code> connect </code></pre> and <pre><code> finishConnect </code></pre> methods are mutually synchronized against each other, and an attempt to initiate a read or write operation while an invocation of one of these methods is in progress will block until that invocation is complete. </p><pre><code>public abstract class SocketChannel\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/SocketChannel.html
UnresolvedAddressException	A										<section class="prog__container"><p> Unchecked exception thrown when an attempt is made to invoke a network operation upon an unresolved socket address.</p><pre><code>public class UnresolvedAddressException\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/UnresolvedAddressException.html
UnsupportedAddressTypeException	A										<section class="prog__container"><p> Unchecked exception thrown when an attempt is made to bind or connect to a socket address of a type that is not supported.</p><pre><code>public class UnsupportedAddressTypeException\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/UnsupportedAddressTypeException.html
WritableByteChannel	A										<section class="prog__container"><p> A channel that can write bytes. <p> Only one write operation upon a writable channel may be in progress at any given time. If one thread initiates a write operation upon a channel then any other thread that attempts to initiate another write operation will block until the first operation is complete. Whether or not other kinds of I/O operations may proceed concurrently with a write operation depends upon the type of the channel. </p><pre><code>public interface WritableByteChannel\nimplements Channel</code></pre></section>	https://developer.android.com/reference/java/nio/channels/WritableByteChannel.html
AbstractInterruptibleChannel	A										<section class="prog__container"><p> Base implementation class for interruptible channels. <p> This class encapsulates the low-level machinery required to implement the asynchronous closing and interruption of channels. A concrete channel class must invoke the <pre><code> begin </code></pre> and <pre><code> end </code></pre> methods before and after, respectively, invoking an I/O operation that might block indefinitely. In order to ensure that the <pre><code> end </code></pre> method is always invoked, these methods should be used within a <tt> try </tt> ... <tt> finally </tt> block: <blockquote> <pre> boolean completed = false; try { begin(); completed = ...; // Perform blocking I/O operation return ...; // Return result } finally { end(completed); }</pre> </blockquote> <p> The <tt> completed </tt> argument to the <pre><code> end </code></pre> method tells whether or not the I/O operation actually completed, that is, whether it had any effect that would be visible to the invoker. In the case of an operation that reads bytes, for example, this argument should be <tt> true </tt> if, and only if, some bytes were actually transferred into the invoker's target buffer. <p> A concrete channel class must also implement the <pre><code> implCloseChannel </code></pre> method in such a way that if it is invoked while another thread is blocked in a native I/O operation upon the channel then that operation will immediately return, either by throwing an exception or by returning normally. If a thread is interrupted or the channel upon which it is blocked is asynchronously closed then the channel's <pre><code> end </code></pre> method will throw the appropriate exception. <p> This class performs the synchronization required to implement the <pre><code> Channel </code></pre> specification. Implementations of the <pre><code> implCloseChannel </code></pre> method need not synchronize against other threads that might be attempting to close the channel. </p><pre><code>public abstract class AbstractInterruptibleChannel\nextends Object</code></pre></section>	https://developer.android.com/reference/java/nio/channels/spi/AbstractInterruptibleChannel.html
AbstractSelectableChannel	A										<section class="prog__container"><p> Base implementation class for selectable channels. <p> This class defines methods that handle the mechanics of channel registration, deregistration, and closing. It maintains the current blocking mode of this channel as well as its current set of selection keys. It performs all of the synchronization required to implement the <pre><code> SelectableChannel </code></pre> specification. Implementations of the abstract protected methods defined in this class need not synchronize against other threads that might be engaged in the same operations. </p><pre><code>public abstract class AbstractSelectableChannel\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/spi/AbstractSelectableChannel.html
AbstractSelectionKey	A										<section class="prog__container"><p> Base implementation class for selection keys. <p> This class tracks the validity of the key and implements cancellation. </p><pre><code>public abstract class AbstractSelectionKey\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/spi/AbstractSelectionKey.html
AbstractSelector	A										<section class="prog__container"><p> Base implementation class for selectors. <p> This class encapsulates the low-level machinery required to implement the interruption of selection operations. A concrete selector class must invoke the <pre><code> begin </code></pre> and <pre><code> end </code></pre> methods before and after, respectively, invoking an I/O operation that might block indefinitely. In order to ensure that the <pre><code> end </code></pre> method is always invoked, these methods should be used within a <tt> try </tt> ... <tt> finally </tt> block: <blockquote> <pre> try { begin(); // Perform blocking I/O operation here ... } finally { end(); }</pre> </blockquote> <p> This class also defines methods for maintaining a selector's cancelled-key set and for removing a key from its channel's key set, and declares the abstract <pre><code> register </code></pre> method that is invoked by a selectable channel's <pre><code> register </code></pre> method in order to perform the actual work of registering a channel. </p><pre><code>public abstract class AbstractSelector\n</code></pre></section>	https://developer.android.com/reference/java/nio/channels/spi/AbstractSelector.html
java.nio.channels.spi	A										<section class="prog__container">Only developers who are defining new selector providers or asynchronouschannel providers should need to make direct use of this package.</section>	https://developer.android.com/reference/java/nio/channels/spi/package-summary.html
SelectorProvider	A										<section class="prog__container"><p> Service-provider class for selectors and selectable channels. <p> A selector provider is a concrete subclass of this class that has a zero-argument constructor and implements the abstract methods specified below. A given invocation of the Java virtual machine maintains a single system-wide default provider instance, which is returned by the <pre><code> provider </code></pre> method. The first invocation of that method will locate the default provider as specified below. <p> The system-wide default provider is used by the static <tt> open </tt> methods of the <pre><code> DatagramChannel </code></pre> , <pre><code> Pipe </code></pre> , <pre><code> Selector </code></pre> , <pre><code> ServerSocketChannel </code></pre> , and <pre><code> SocketChannel </code></pre> classes. It is also used by the <pre><code> System.inheritedChannel() </code></pre> method. A program may make use of a provider other than the default provider by instantiating that provider and then directly invoking the <tt> open </tt> methods defined in this class. <p> All of the methods in this class are safe for use by multiple concurrent threads. </p><pre><code>public abstract class SelectorProvider\nextends Object</code></pre></section>	https://developer.android.com/reference/java/nio/channels/spi/SelectorProvider.html
CharacterCodingException	A										<section class="prog__container"><p> Checked exception thrown when a character encoding or decoding error occurs.</p><pre><code>public class CharacterCodingException\n</code></pre></section>	https://developer.android.com/reference/java/nio/charset/CharacterCodingException.html
Charset	A										<section class="prog__container"><p> A named mapping between sequences of sixteen-bit Unicode code units and sequences of bytes. This class defines methods for creating decoders and encoders and for retrieving the various names associated with a charset. Instances of this class are immutable. <p> This class also defines static methods for testing whether a particular charset is supported, for locating charset instances by name, and for constructing a map that contains every charset for which support is available in the current Java virtual machine. Support for new charsets can be added via the service-provider interface defined in the <pre><code> CharsetProvider </code></pre> class. <p> All of the methods defined in this class are safe for use by multiple concurrent threads. <h4> Charset names </h4> <p> Charsets are named by strings composed of the following characters: <ul> <li> The uppercase letters <tt> 'A' </tt> through <tt> 'Z' </tt> ( <tt> '\u0041' </tt> through <tt> '\u005a' </tt> ), <li> The lowercase letters <tt> 'a' </tt> through <tt> 'z' </tt> ( <tt> '\u0061' </tt> through <tt> '\u007a' </tt> ), <li> The digits <tt> '0' </tt> through <tt> '9' </tt> ( <tt> '\u0030' </tt> through <tt> '\u0039' </tt> ), <li> The dash character <tt> '-' </tt> ( <tt> '\u002d' </tt> , <small> HYPHEN-MINUS </small> ), <li> The plus character <tt> '+' </tt> ( <tt> '\u002b' </tt> , <small> PLUS SIGN </small> ), <li> The period character <tt> '.' </tt> ( <tt> '\u002e' </tt> , <small> FULL STOP </small> ), <li> The colon character <tt> ':' </tt> ( <tt> '\u003a' </tt> , <small> COLON </small> ), and <li> The underscore character <tt> '_' </tt> ( <tt> '\u005f' </tt> , <small> LOW LINE </small> ). </li> </li> </li> </li> </li> </li> </li> </li> </ul> A charset name must begin with either a letter or a digit. The empty string is not a legal charset name. Charset names are not case-sensitive; that is, case is always ignored when comparing charset names. Charset names generally follow the conventions documented in <i> RFC 2278: IANA Charset Registration Procedures </i> . <p> Every charset has a <i> canonical name </i> and may also have one or more <i> aliases </i> . The canonical name is returned by the <pre><code> name </code></pre> method of this class. Canonical names are, by convention, usually in upper case. The aliases of a charset are returned by the <pre><code> aliases </code></pre> method. <p> Some charsets have an <i> historical name </i> that is defined for compatibility with previous versions of the Java platform. A charset's historical name is either its canonical name or one of its aliases. The historical name is returned by the <tt> getEncoding() </tt> methods of the <pre><code> InputStreamReader </code></pre> and <pre><code> OutputStreamWriter </code></pre> classes. <p> If a charset listed in the <i> IANA Charset Registry </i> is supported by an implementation of the Java platform then its canonical name must be the name listed in the registry. Many charsets are given more than one name in the registry, in which case the registry identifies one of the names as <i> MIME-preferred </i> . If a charset has more than one registry name then its canonical name must be the MIME-preferred name and the other names in the registry must be valid aliases. If a supported charset is not listed in the IANA registry then its canonical name must begin with one of the strings <tt> "X-" </tt> or <tt> "x-" </tt> . <p> The IANA charset registry does change over time, and so the canonical name and the aliases of a particular charset may also change over time. To ensure compatibility it is recommended that no alias ever be removed from a charset, and that if the canonical name of a charset is changed then its previous canonical name be made into an alias. <h4> Standard charsets </h4> <p> Every implementation of the Java platform is required to support the following standard charsets. Consult the release documentation for your implementation to see if any other charsets are supported. The behavior of such optional charsets may differ between implementations. <blockquote> <table summary="Description of standard charsets" width="80%"> <tr> <th> <p align="left"> Charset </p><pre><code>public abstract class Charset\nextends Object</code></pre></section>	https://developer.android.com/reference/java/nio/charset/Charset.html
CharsetDecoder	A										<section class="prog__container"><p> An engine that can transform a sequence of bytes in a specific charset into a sequence of sixteen-bit Unicode characters. <p> The input byte sequence is provided in a byte buffer or a series of such buffers. The output character sequence is written to a character buffer or a series of such buffers. A decoder should always be used by making the following sequence of method invocations, hereinafter referred to as a <i> decoding operation </i> : <ol> <li> <p> Reset the decoder via the <pre><code> reset </code></pre> method, unless it has not been used before; </p><pre><code>public abstract class CharsetDecoder\nextends Object</code></pre></section>	https://developer.android.com/reference/java/nio/charset/CharsetDecoder.html
CharsetEncoder	A										<section class="prog__container"><p> An engine that can transform a sequence of sixteen-bit Unicode characters into a sequence of bytes in a specific charset. <p> The input character sequence is provided in a character buffer or a series of such buffers. The output byte sequence is written to a byte buffer or a series of such buffers. An encoder should always be used by making the following sequence of method invocations, hereinafter referred to as an <i> encoding operation </i> : <ol> <li> <p> Reset the encoder via the <pre><code> reset </code></pre> method, unless it has not been used before; </p><pre><code>public abstract class CharsetEncoder\nextends Object</code></pre></section>	https://developer.android.com/reference/java/nio/charset/CharsetEncoder.html
CoderMalfunctionError	A										<section class="prog__container"><p> Error thrown when the <pre><code> decodeLoop </code></pre> method of a <pre><code> CharsetDecoder </code></pre> , or the <pre><code> encodeLoop </code></pre> method of a <pre><code> CharsetEncoder </code></pre> , throws an unexpected exception.</p><pre><code>public class CoderMalfunctionError\n</code></pre></section>	https://developer.android.com/reference/java/nio/charset/CoderMalfunctionError.html
CoderResult	A										<section class="prog__container"><p> A description of the result state of a coder. <p> A charset coder, that is, either a decoder or an encoder, consumes bytes (or characters) from an input buffer, translates them, and writes the resulting characters (or bytes) to an output buffer. A coding process terminates for one of four categories of reasons, which are described by instances of this class: <ul> <li> <p> <i> Underflow </i> is reported when there is no more input to be processed, or there is insufficient input and additional input is required. This condition is represented by the unique result object <pre><code> UNDERFLOW </code></pre> , whose <pre><code> isUnderflow </code></pre> method returns <tt> true </tt> . </p><pre><code>public class CoderResult\nextends Object</code></pre></section>	https://developer.android.com/reference/java/nio/charset/CoderResult.html
CodingErrorAction	A										<section class="prog__container"><p> A typesafe enumeration for coding-error actions. <p> Instances of this class are used to specify how malformed-input and unmappable-character errors are to be handled by charset decoders and encoders . </p><pre><code>public class CodingErrorAction\nextends Object</code></pre></section>	https://developer.android.com/reference/java/nio/charset/CodingErrorAction.html
IllegalCharsetNameException	A										<section class="prog__container"><p> Unchecked exception thrown when a string that is not a legal charset name is used as such.</p><pre><code>public class IllegalCharsetNameException\n</code></pre></section>	https://developer.android.com/reference/java/nio/charset/IllegalCharsetNameException.html
MalformedInputException	A										<section class="prog__container"><p> Checked exception thrown when an input byte sequence is not legal for given charset, or an input character sequence is not a legal sixteen-bit Unicode sequence.</p><pre><code>public class MalformedInputException\n</code></pre></section>	https://developer.android.com/reference/java/nio/charset/MalformedInputException.html
java.nio.charset	A										<section class="prog__container">Class name</section>	https://developer.android.com/reference/java/nio/charset/package-summary.html
StandardCharsets	A										<section class="prog__container"><p> Constant definitions for the standard <pre><code> Charsets </code></pre> . These charsets are guaranteed to be available on every implementation of the Java platform.</p><pre><code>public final class StandardCharsets\nextends Object</code></pre></section>	https://developer.android.com/reference/java/nio/charset/StandardCharsets.html
UnmappableCharacterException	A										<section class="prog__container"><p> Checked exception thrown when an input character (or byte) sequence is valid but cannot be mapped to an output byte (or character) sequence.</p><pre><code>public class UnmappableCharacterException\n</code></pre></section>	https://developer.android.com/reference/java/nio/charset/UnmappableCharacterException.html
UnsupportedCharsetException	A										<section class="prog__container"><p> Unchecked exception thrown when no support is available for a requested charset.</p><pre><code>public class UnsupportedCharsetException\n</code></pre></section>	https://developer.android.com/reference/java/nio/charset/UnsupportedCharsetException.html
CharsetProvider	A										<section class="prog__container"><p> Charset service-provider class. <p> A charset provider is a concrete subclass of this class that has a zero-argument constructor and some number of associated charset implementation classes. Charset providers may be installed in an instance of the Java platform as extensions, that is, jar files placed into any of the usual extension directories. Providers may also be made available by adding them to the applet or application class path or by some other platform-specific means. Charset providers are looked up via the current thread's <pre><code> </code></pre> context class loader <pre><code> </code></pre> </p><pre><code>public abstract class CharsetProvider\nextends Object</code></pre></section>	https://developer.android.com/reference/java/nio/charset/spi/CharsetProvider.html
java.nio.charset.spi	A										<section class="prog__container">Only developers who are defining new charsets should need to make directuse of this package.</section>	https://developer.android.com/reference/java/nio/charset/spi/package-summary.html
AccessControlContext	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public final class AccessControlContext\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/AccessControlContext.html
AccessControlException	A										<section class="prog__container"><p> <p> This exception is thrown by the AccessController to indicate that a requested access (to a critical system resource such as the file system or the network) is denied. <p> The reason to deny access can vary. For example, the requested permission might be of an incorrect type, contain an invalid value, or request access that is not allowed according to the security policy. Such information should be given whenever possible at the time the exception is thrown. </p><pre><code>public class AccessControlException\n</code></pre></section>	https://developer.android.com/reference/java/security/AccessControlException.html
AccessController	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public final class AccessController\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/AccessController.html
AlgorithmConstraints	A										<section class="prog__container"><p> This interface specifies constraints for cryptographic algorithms, keys (key sizes), and other algorithm parameters. <p> <pre><code> AlgorithmConstraints </code></pre> objects are immutable. An implementation of this interface should not provide methods that can change the state of an instance once it has been created. <p> Note that <pre><code> AlgorithmConstraints </code></pre> can be used to represent the restrictions described by the security properties <pre><code> jdk.certpath.disabledAlgorithms </code></pre> and <pre><code> jdk.tls.disabledAlgorithms </code></pre> , or could be used by a concrete <pre><code> PKIXCertPathChecker </code></pre> to check whether a specified certificate in the certification path contains the required algorithm constraints. </p><pre><code>public interface AlgorithmConstraints\n</code></pre></section>	https://developer.android.com/reference/java/security/AlgorithmConstraints.html
AlgorithmParameterGenerator	A										<section class="prog__container"><p> The <pre><code> AlgorithmParameterGenerator </code></pre> class is used to generate a set of parameters to be used with a certain algorithm. Parameter generators are constructed using the <pre><code> getInstance </code></pre> factory methods (static methods that return instances of a given class). <p> The object that will generate the parameters can be initialized in two different ways: in an algorithm-independent manner, or in an algorithm-specific manner: <ul> <li> The algorithm-independent approach uses the fact that all parameter generators share the concept of a "size" and a source of randomness. The measure of size is universally shared by all algorithm parameters, though it is interpreted differently for different algorithms. For example, in the case of parameters for the <i> DSA </i> algorithm, "size" corresponds to the size of the prime modulus (in bits). When using this approach, algorithm-specific parameter generation values - if any - default to some standard values, unless they can be derived from the specified size. <p> <li> The other approach initializes a parameter generator object using algorithm-specific semantics, which are represented by a set of algorithm-specific parameter generation values. To generate Diffie-Hellman system parameters, for example, the parameter generation values usually consist of the size of the prime modulus and the size of the random exponent, both specified in number of bits. </li> </p><pre><code>public class AlgorithmParameterGenerator\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/AlgorithmParameterGenerator.html
AlgorithmParameterGeneratorSpi	A										<section class="prog__container"><p> This class defines the <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> AlgorithmParameterGenerator </code></pre> class, which is used to generate a set of parameters to be used with a certain algorithm. <p> All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a parameter generator for a particular algorithm. <p> In case the client does not explicitly initialize the AlgorithmParameterGenerator (via a call to an <pre><code> engineInit </code></pre> method), each provider must supply (and document) a default initialization. For example, the Sun provider uses a default modulus prime size of 1024 bits for the generation of DSA parameters. </p><pre><code>public abstract class AlgorithmParameterGeneratorSpi\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/AlgorithmParameterGeneratorSpi.html
AlgorithmParameters	A										<section class="prog__container"><p> This class is used as an opaque representation of cryptographic parameters. <p> An <pre><code> AlgorithmParameters </code></pre> object for managing the parameters for a particular algorithm can be obtained by calling one of the <pre><code> getInstance </code></pre> factory methods (static methods that return instances of a given class). <p> Once an <pre><code> AlgorithmParameters </code></pre> object is obtained, it must be initialized via a call to <pre><code> init </code></pre> , using an appropriate parameter specification or parameter encoding. <p> A transparent parameter specification is obtained from an <pre><code> AlgorithmParameters </code></pre> object via a call to <pre><code> getParameterSpec </code></pre> , and a byte encoding of the parameters is obtained via a call to <pre><code> getEncoded </code></pre> . <p> Android provides the following <pre><code> AlgorithmParameters </code></pre> algorithms: <table> <thead> <tr> <th> Name </th> <th> Supported (API Levels) </th> </tr> </thead> <tbody> <tr> <td> AES </td> <td> 1+ </td> </tr> <tr> <td> Blowfish </td> <td> 10+ </td> </tr> <tr> <td> DES </td> <td> 1+ </td> </tr> <tr> <td> DESede </td> <td> 1+ </td> </tr> <tr> <td> DH </td> <td> 1+ </td> </tr> <tr> <td> DSA </td> <td> 1+ </td> </tr> <tr> <td> GCM </td> <td> 22+ </td> </tr> <tr> <td> IES </td> <td> 1–8 </td> </tr> <tr> <td> OAEP </td> <td> 1+ </td> </tr> <tr> <td> PKCS12PBE </td> <td> 1+ </td> </tr> <tr> <td> PSS </td> <td> 1–8, 24+ </td> </tr> </tbody> </table> These algorithms are described in the AlgorithmParameters section of the Java Cryptography Architecture Standard Algorithm Name Documentation. </p><pre><code>public class AlgorithmParameters\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/AlgorithmParameters.html
AlgorithmParametersSpi	A										<section class="prog__container"><p> This class defines the <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> AlgorithmParameters </code></pre> class, which is used to manage algorithm parameters. <p> All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply parameter management for a particular algorithm. </p><pre><code>public abstract class AlgorithmParametersSpi\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/AlgorithmParametersSpi.html
AllPermission	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public final class AllPermission\n</code></pre></section>	https://developer.android.com/reference/java/security/AllPermission.html
AuthProvider	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public abstract class AuthProvider\n</code></pre></section>	https://developer.android.com/reference/java/security/AuthProvider.html
BasicPermission	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public abstract class BasicPermission\n</code></pre></section>	https://developer.android.com/reference/java/security/BasicPermission.html
Certificate	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 1. </strong> <br/> A new certificate handling package is created in the Java platform. This Certificate interface is entirely deprecated and is here to allow for a smooth transition to the new package. </p><pre><code>public interface Certificate\n</code></pre></section>	https://developer.android.com/reference/java/security/Certificate.html
CodeSigner	A										<section class="prog__container"><p> This class encapsulates information about a code signer. It is immutable.</p><pre><code>public final class CodeSigner\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/CodeSigner.html
CodeSource	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public class CodeSource\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/CodeSource.html
CryptoPrimitive	A										<section class="prog__container"><p> An enumeration of cryptographic primitives.</p><pre><code>public final enum CryptoPrimitive\n</code></pre></section>	https://developer.android.com/reference/java/security/CryptoPrimitive.html
DigestException	A										<section class="prog__container"><p> This is the generic Message Digest exception.</p><pre><code>public class DigestException\n</code></pre></section>	https://developer.android.com/reference/java/security/DigestException.html
DigestInputStream	A										<section class="prog__container"><p> A transparent stream that updates the associated message digest using the bits going through the stream. <p> To complete the message digest computation, call one of the <pre><code> digest </code></pre> methods on the associated message digest after your calls to one of this digest input stream's <pre><code> read </code></pre> methods. <p> It is possible to turn this stream on or off (see <pre><code> on </code></pre> ). When it is on, a call to one of the <pre><code> read </code></pre> methods results in an update on the message digest. But when it is off, the message digest is not updated. The default is for the stream to be on. <p> Note that digest objects can compute only one digest (see <pre><code> MessageDigest </code></pre> ), so that in order to compute intermediate digests, a caller should retain a handle onto the digest object, and clone it for each digest to be computed, leaving the orginal digest untouched. </p><pre><code>public class DigestInputStream\n</code></pre></section>	https://developer.android.com/reference/java/security/DigestInputStream.html
DigestOutputStream	A										<section class="prog__container"><p> A transparent stream that updates the associated message digest using the bits going through the stream. <p> To complete the message digest computation, call one of the <pre><code> digest </code></pre> methods on the associated message digest after your calls to one of this digest ouput stream's <pre><code> write </code></pre> methods. <p> It is possible to turn this stream on or off (see <pre><code> on </code></pre> ). When it is on, a call to one of the <pre><code> write </code></pre> methods results in an update on the message digest. But when it is off, the message digest is not updated. The default is for the stream to be on. </p><pre><code>public class DigestOutputStream\n</code></pre></section>	https://developer.android.com/reference/java/security/DigestOutputStream.html
DomainCombiner	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public interface DomainCombiner\n</code></pre></section>	https://developer.android.com/reference/java/security/DomainCombiner.html
GeneralSecurityException	A										<section class="prog__container"><p> The <pre><code> GeneralSecurityException </code></pre> class is a generic security exception class that provides type safety for all the security-related exception classes that extend from it.</p><pre><code>public class GeneralSecurityException\n</code></pre></section>	https://developer.android.com/reference/java/security/GeneralSecurityException.html
Guard	A										<section class="prog__container"><p> <p> This interface represents a guard, which is an object that is used to protect access to another object. <p> This interface contains a single method, <pre><code> checkGuard </code></pre> , with a single <pre><code> object </code></pre> argument. <pre><code> checkGuard </code></pre> is invoked (by the GuardedObject <pre><code> getObject </code></pre> method) to determine whether or not to allow access to the object. </p><pre><code>public interface Guard\n</code></pre></section>	https://developer.android.com/reference/java/security/Guard.html
GuardedObject	A										<section class="prog__container"><p> A GuardedObject is an object that is used to protect access to another object. <p> A GuardedObject encapsulates a target object and a Guard object, such that access to the target object is possible only if the Guard object allows it. Once an object is encapsulated by a GuardedObject, access to that object is controlled by the <pre><code> getObject </code></pre> method, which invokes the <pre><code> checkGuard </code></pre> method on the Guard object that is guarding access. If access is not allowed, an exception is thrown. </p><pre><code>public class GuardedObject\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/GuardedObject.html
Identity	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 1. </strong> <br/> This class is no longer used. Its functionality has been replaced by <pre><code> java.security.KeyStore </code></pre> , the <pre><code> java.security.cert </code></pre> package, and <pre><code> java.security.Principal </code></pre> . </p><pre><code>public abstract class Identity\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/Identity.html
IdentityScope	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 1. </strong> <br/> This class is no longer used. Its functionality has been replaced by <pre><code> java.security.KeyStore </code></pre> , the <pre><code> java.security.cert </code></pre> package, and <pre><code> java.security.Principal </code></pre> . </p><pre><code>public abstract class IdentityScope\n</code></pre></section>	https://developer.android.com/reference/java/security/IdentityScope.html
InvalidAlgorithmParameterException	A										<section class="prog__container"><p> This is the exception for invalid or inappropriate algorithm parameters.</p><pre><code>public class InvalidAlgorithmParameterException\n</code></pre></section>	https://developer.android.com/reference/java/security/InvalidAlgorithmParameterException.html
InvalidKeyException	A										<section class="prog__container"><p> This is the exception for invalid Keys (invalid encoding, wrong length, uninitialized, etc).</p><pre><code>public class InvalidKeyException\n</code></pre></section>	https://developer.android.com/reference/java/security/InvalidKeyException.html
InvalidParameterException	A										<section class="prog__container"><p> This exception, designed for use by the JCA/JCE engine classes, is thrown when an invalid parameter is passed to a method.</p><pre><code>public class InvalidParameterException\n</code></pre></section>	https://developer.android.com/reference/java/security/InvalidParameterException.html
Key	A										<section class="prog__container"><pre><code>public interface Key\nimplements Serializable</code></pre></section>	https://developer.android.com/reference/java/security/Key.html
KeyException	A										<section class="prog__container"><p> This is the basic key exception.</p><pre><code>public class KeyException\n</code></pre></section>	https://developer.android.com/reference/java/security/KeyException.html
KeyFactory	A										<section class="prog__container"><p> Key factories are used to convert <i> keys </i> (opaque cryptographic keys of type <pre><code> Key </code></pre> ) into <i> key specifications </i> (transparent representations of the underlying key material), and vice versa. <p> Key factories are bi-directional. That is, they allow you to build an opaque key object from a given key specification (key material), or to retrieve the underlying key material of a key object in a suitable format. <p> Multiple compatible key specifications may exist for the same key. For example, a DSA public key may be specified using <pre><code> DSAPublicKeySpec </code></pre> or <pre><code> X509EncodedKeySpec </code></pre> . A key factory can be used to translate between compatible key specifications. <p> The following is an example of how to use a key factory in order to instantiate a DSA public key from its encoding. Assume Alice has received a digital signature from Bob. Bob also sent her his public key (in encoded format) to verify his signature. Alice then performs the following actions: <pre> X509EncodedKeySpec bobPubKeySpec = new X509EncodedKeySpec(bobEncodedPubKey); KeyFactory keyFactory = KeyFactory.getInstance("DSA"); PublicKey bobPubKey = keyFactory.generatePublic(bobPubKeySpec); Signature sig = Signature.getInstance("DSA"); sig.initVerify(bobPubKey); sig.update(data); sig.verify(signature); </pre> <p> Android provides the following <pre><code> KeyFactory </code></pre> algorithms: <table> <thead> <tr> <th> Name </th> <th> Supported (API Levels) </th> </tr> </thead> <tbody> <tr> <td> DH </td> <td> 1+ </td> </tr> <tr> <td> DSA </td> <td> 1+ </td> </tr> <tr> <td> EC </td> <td> 11+ </td> </tr> <tr> <td> RSA </td> <td> 1+ </td> </tr> <tr> <td> X.509 </td> <td> 1–8 </td> </tr> </tbody> </table> These algorithms are described in the KeyFactory section of the Java Cryptography Architecture Standard Algorithm Name Documentation. </p><pre><code>public class KeyFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/KeyFactory.html
KeyFactorySpi	A										<section class="prog__container"><p> This class defines the <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> KeyFactory </code></pre> class. All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a key factory for a particular algorithm. <p> Key factories are used to convert <i> keys </i> (opaque cryptographic keys of type <pre><code> Key </code></pre> ) into <i> key specifications </i> (transparent representations of the underlying key material), and vice versa. <p> Key factories are bi-directional. That is, they allow you to build an opaque key object from a given key specification (key material), or to retrieve the underlying key material of a key object in a suitable format. <p> Multiple compatible key specifications may exist for the same key. For example, a DSA public key may be specified using <pre><code> DSAPublicKeySpec </code></pre> or <pre><code> X509EncodedKeySpec </code></pre> . A key factory can be used to translate between compatible key specifications. <p> A provider should document all the key specifications supported by its key factory. </p><pre><code>public abstract class KeyFactorySpi\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/KeyFactorySpi.html
KeyManagementException	A										<section class="prog__container"><p> This is the general key management exception for all operations dealing with key management. Examples of subclasses of KeyManagementException that developers might create for giving more detailed information could include: <ul> <li> KeyIDConflictException <li> KeyAuthorizationFailureException <li> ExpiredKeyException </li> </li> </li> </ul></p><pre><code>public class KeyManagementException\n</code></pre></section>	https://developer.android.com/reference/java/security/KeyManagementException.html
KeyPair	A										<section class="prog__container"><p> This class is a simple holder for a key pair (a public key and a private key). It does not enforce any security, and, when initialized, should be treated like a PrivateKey.</p><pre><code>public final class KeyPair\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/KeyPair.html
KeyPairGenerator	A										<section class="prog__container"><p> The KeyPairGenerator class is used to generate pairs of public and private keys. Key pair generators are constructed using the <pre><code> getInstance </code></pre> factory methods (static methods that return instances of a given class). <p> A Key pair generator for a particular algorithm creates a public/private key pair that can be used with this algorithm. It also associates algorithm-specific parameters with each of the generated keys. <p> There are two ways to generate a key pair: in an algorithm-independent manner, and in an algorithm-specific manner. The only difference between the two is the initialization of the object: <ul> <li> <b> Algorithm-Independent Initialization </b> <p> All key pair generators share the concepts of a keysize and a source of randomness. The keysize is interpreted differently for different algorithms (e.g., in the case of the <i> DSA </i> algorithm, the keysize corresponds to the length of the modulus). There is an <pre><code> initialize </code></pre> method in this KeyPairGenerator class that takes these two universally shared types of arguments. There is also one that takes just a <pre><code> keysize </code></pre> argument, and uses the <pre><code> SecureRandom </code></pre> implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of <pre><code> SecureRandom </code></pre> , a system-provided source of randomness is used.) <p> Since no other parameters are specified when you call the above algorithm-independent <pre><code> initialize </code></pre> methods, it is up to the provider what to do about the algorithm-specific parameters (if any) to be associated with each of the keys. <p> If the algorithm is the <i> DSA </i> algorithm, and the keysize (modulus size) is 512, 768, or 1024, then the <i> Sun </i> provider uses a set of precomputed values for the <pre><code> p </code></pre> , <pre><code> q </code></pre> , and <pre><code> g </code></pre> parameters. If the modulus size is not one of the above values, the <i> Sun </i> provider creates a new set of parameters. Other providers might have precomputed parameter sets for more than just the three modulus sizes mentioned above. Still others might not have a list of precomputed parameters at all and instead always create new parameter sets. <p> <li> <b> Algorithm-Specific Initialization </b> <p> For situations where a set of algorithm-specific parameters already exists (e.g., so-called <i> community parameters </i> in DSA), there are two <pre><code> initialize </code></pre> methods that have an <pre><code> AlgorithmParameterSpec </code></pre> argument. One also has a <pre><code> SecureRandom </code></pre> argument, while the the other uses the <pre><code> SecureRandom </code></pre> implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of <pre><code> SecureRandom </code></pre> , a system-provided source of randomness is used.) </p><pre><code>public abstract class KeyPairGenerator\n</code></pre></section>	https://developer.android.com/reference/java/security/KeyPairGenerator.html
KeyPairGeneratorSpi	A										<section class="prog__container"><p> <p> This class defines the <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> KeyPairGenerator </code></pre> class, which is used to generate pairs of public and private keys. <p> All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a key pair generator for a particular algorithm. <p> In case the client does not explicitly initialize the KeyPairGenerator (via a call to an <pre><code> initialize </code></pre> method), each provider must supply (and document) a default initialization. For example, the <i> Sun </i> provider uses a default modulus size (keysize) of 1024 bits. </p><pre><code>public abstract class KeyPairGeneratorSpi\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/KeyPairGeneratorSpi.html
KeyRep	A										<section class="prog__container"><p> Standardized representation for serialized Key objects. <p> Note that a serialized Key may contain sensitive information which should not be exposed in untrusted environments. See the Security Appendix of the Serialization Specification for more information. </p><pre><code>public class KeyRep\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/KeyRep.html
KeyRep.Type	A										<section class="prog__container"><p> Key type.</p><pre><code>public static final enum KeyRep.Type\n</code></pre></section>	https://developer.android.com/reference/java/security/KeyRep.Type.html
KeyStore.Builder	A										<section class="prog__container"><p> A description of a to-be-instantiated KeyStore object. <p> An instance of this class encapsulates the information needed to instantiate and initialize a KeyStore object. That process is triggered when the getKeyStore() </p><pre><code>public static abstract class KeyStore.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/KeyStore.Builder.html
KeyStore.CallbackHandlerProtection	A										<section class="prog__container"><p> A ProtectionParameter encapsulating a CallbackHandler.</p><pre><code>public static class KeyStore.CallbackHandlerProtection\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/KeyStore.CallbackHandlerProtection.html
KeyStore.Entry	A										<section class="prog__container"><p> A marker interface for <pre><code> KeyStore </code></pre> entry types.</p><pre><code>public static interface KeyStore.Entry\n</code></pre></section>	https://developer.android.com/reference/java/security/KeyStore.Entry.html
KeyStore	A										<section class="prog__container"><p> This class represents a storage facility for cryptographic keys and certificates. <p> A <pre><code> KeyStore </code></pre> manages different types of entries. Each type of entry implements the <pre><code> KeyStore.Entry </code></pre> interface. Three basic <pre><code> KeyStore.Entry </code></pre> implementations are provided: <ul> <li> <b> KeyStore.PrivateKeyEntry </b> <p> This type of entry holds a cryptographic <pre><code> PrivateKey </code></pre> , which is optionally stored in a protected format to prevent unauthorized access. It is also accompanied by a certificate chain for the corresponding public key. <p> Private keys and certificate chains are used by a given entity for self-authentication. Applications for this authentication include software distribution organizations which sign JAR files as part of releasing and/or licensing software. <li> <b> KeyStore.SecretKeyEntry </b> <p> This type of entry holds a cryptographic <pre><code> SecretKey </code></pre> , which is optionally stored in a protected format to prevent unauthorized access. <li> <b> KeyStore.TrustedCertificateEntry </b> <p> This type of entry contains a single public key <pre><code> Certificate </code></pre> belonging to another party. It is called a <i> trusted certificate </i> because the keystore owner trusts that the public key in the certificate indeed belongs to the identity identified by the <i> subject </i> (owner) of the certificate. <p> This type of entry can be used to authenticate other parties. </p><pre><code>public class KeyStore\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/KeyStore.html
KeyStore.LoadStoreParameter	A										<section class="prog__container"><p> A marker interface for <pre><code> KeyStore </code></pre> <pre><code> load </code></pre> and <pre><code> store </code></pre> parameters.</p><pre><code>public static interface KeyStore.LoadStoreParameter\n</code></pre></section>	https://developer.android.com/reference/java/security/KeyStore.LoadStoreParameter.html
KeyStore.PasswordProtection	A										<section class="prog__container"><p> A password-based implementation of <pre><code> ProtectionParameter </code></pre> .</p><pre><code>public static class KeyStore.PasswordProtection\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/KeyStore.PasswordProtection.html
KeyStore.PrivateKeyEntry	A										<section class="prog__container"><p> A <pre><code> KeyStore </code></pre> entry that holds a <pre><code> PrivateKey </code></pre> and corresponding certificate chain.</p><pre><code>public static final class KeyStore.PrivateKeyEntry\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/KeyStore.PrivateKeyEntry.html
KeyStore.ProtectionParameter	A										<section class="prog__container"><p> A marker interface for keystore protection parameters. <p> The information stored in a <pre><code> ProtectionParameter </code></pre> object protects the contents of a keystore. For example, protection parameters may be used to check the integrity of keystore data, or to protect the confidentiality of sensitive keystore data (such as a <pre><code> PrivateKey </code></pre> ). </p><pre><code>public static interface KeyStore.ProtectionParameter\n</code></pre></section>	https://developer.android.com/reference/java/security/KeyStore.ProtectionParameter.html
KeyStore.SecretKeyEntry	A										<section class="prog__container"><p> A <pre><code> KeyStore </code></pre> entry that holds a <pre><code> SecretKey </code></pre> .</p><pre><code>public static final class KeyStore.SecretKeyEntry\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/KeyStore.SecretKeyEntry.html
KeyStore.TrustedCertificateEntry	A										<section class="prog__container"><p> A <pre><code> KeyStore </code></pre> entry that holds a trusted <pre><code> Certificate </code></pre> .</p><pre><code>public static final class KeyStore.TrustedCertificateEntry\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/KeyStore.TrustedCertificateEntry.html
KeyStoreException	A										<section class="prog__container"><p> This is the generic KeyStore exception.</p><pre><code>public class KeyStoreException\n</code></pre></section>	https://developer.android.com/reference/java/security/KeyStoreException.html
KeyStoreSpi	A										<section class="prog__container"><p> This class defines the <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> KeyStore </code></pre> class. All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a keystore for a particular keystore type.</p><pre><code>public abstract class KeyStoreSpi\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/KeyStoreSpi.html
MessageDigest	A										<section class="prog__container"><p> This MessageDigest class provides applications the functionality of a message digest algorithm, such as SHA-1 or SHA-256. Message digests are secure one-way hash functions that take arbitrary-sized data and output a fixed-length hash value. <p> A MessageDigest object starts out initialized. The data is processed through it using the <pre><code> update </code></pre> methods. At any point <pre><code> reset </code></pre> can be called to reset the digest. Once all the data to be updated has been updated, one of the <pre><code> digest </code></pre> methods should be called to complete the hash computation. <p> The <pre><code> digest </code></pre> method can be called once for a given number of updates. After <pre><code> digest </code></pre> has been called, the MessageDigest object is reset to its initialized state. <p> Implementations are free to implement the Cloneable interface. Client applications can test cloneability by attempting cloning and catching the CloneNotSupportedException: <p> <pre> MessageDigest md = MessageDigest.getInstance("SHA"); try { md.update(toChapter1); MessageDigest tc1 = md.clone(); byte[] toChapter1Digest = tc1.digest(); md.update(toChapter2); ...etc. } catch (CloneNotSupportedException cnse) { throw new DigestException("couldn't make digest of partial content"); } </pre> <p> Note that if a given implementation is not cloneable, it is still possible to compute intermediate digests by instantiating several instances, if the number of digests is known in advance. <p> Note that this class is abstract and extends from <pre><code> MessageDigestSpi </code></pre> for historical reasons. Application developers should only take notice of the methods defined in this <pre><code> MessageDigest </code></pre> class; all the methods in the superclass are intended for cryptographic service providers who wish to supply their own implementations of message digest algorithms. <p> Android provides the following <pre><code> MessageDigest </code></pre> algorithms: <table> <thead> <tr> <th> Name </th> <th> Supported (API Levels) </th> </tr> </thead> <tbody> <tr> <td> MD5 </td> <td> 1+ </td> </tr> <tr> <td> SHA-1 </td> <td> 1+ </td> </tr> <tr> <td> SHA-224 </td> <td> 1–8,22+ </td> </tr> <tr> <td> SHA-256 </td> <td> 1+ </td> </tr> <tr> <td> SHA-384 </td> <td> 1+ </td> </tr> <tr> <td> SHA-512 </td> <td> 1+ </td> </tr> </tbody> </table> These algorithms are described in the MessageDigest section of the Java Cryptography Architecture Standard Algorithm Name Documentation. </p><pre><code>public abstract class MessageDigest\n</code></pre></section>	https://developer.android.com/reference/java/security/MessageDigest.html
MessageDigestSpi	A										<section class="prog__container"><p> This class defines the <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> MessageDigest </code></pre> class, which provides the functionality of a message digest algorithm, such as MD5 or SHA. Message digests are secure one-way hash functions that take arbitrary-sized data and output a fixed-length hash value. <p> All the abstract methods in this class must be implemented by a cryptographic service provider who wishes to supply the implementation of a particular message digest algorithm. <p> Implementations are free to implement the Cloneable interface. </p><pre><code>public abstract class MessageDigestSpi\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/MessageDigestSpi.html
NoSuchAlgorithmException	A										<section class="prog__container"><p> This exception is thrown when a particular cryptographic algorithm is requested but is not available in the environment.</p><pre><code>public class NoSuchAlgorithmException\n</code></pre></section>	https://developer.android.com/reference/java/security/NoSuchAlgorithmException.html
NoSuchProviderException	A										<section class="prog__container"><p> This exception is thrown when a particular security provider is requested but is not available in the environment.</p><pre><code>public class NoSuchProviderException\n</code></pre></section>	https://developer.android.com/reference/java/security/NoSuchProviderException.html
java.security	A										<section class="prog__container">This interface represents a guard, which is an object that is used to protect access to another object. </section>	https://developer.android.com/reference/java/security/package-summary.html
Permission	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public abstract class Permission\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/Permission.html
PermissionCollection	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public abstract class PermissionCollection\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/PermissionCollection.html
Permissions	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public final class Permissions\n</code></pre></section>	https://developer.android.com/reference/java/security/Permissions.html
Policy	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public abstract class Policy\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/Policy.html
Policy.Parameters	A										<section class="prog__container"><p class="dac-footer-copyright"> Except as noted, this content is licensed under Creative Commons Attribution 2.5 . For details and restrictions, see the Content License .</p><pre><code>public static interface Policy.Parameters\n</code></pre></section>	https://developer.android.com/reference/java/security/Policy.Parameters.html
PolicySpi	A										<section class="prog__container"><p> This class defines the <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> Policy </code></pre> class. All the abstract methods in this class must be implemented by each service provider who wishes to supply a Policy implementation. <p> Subclass implementations of this abstract class must provide a public constructor that takes a <pre><code> Policy.Parameters </code></pre> object as an input parameter. This constructor also must throw an IllegalArgumentException if it does not understand the <pre><code> Policy.Parameters </code></pre> input. </p><pre><code>public abstract class PolicySpi\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/PolicySpi.html
Principal	A										<section class="prog__container"><p> This interface represents the abstract notion of a principal, which can be used to represent any entity, such as an individual, a corporation, and a login id.</p><pre><code>public interface Principal\n</code></pre></section>	https://developer.android.com/reference/java/security/Principal.html
PrivateKey	A										<section class="prog__container"><p> <p> A private key. This interface contains no methods or constants. It merely serves to group (and provide type safety for) all private key interfaces. Note: The specialized private key interfaces extend this interface. See, for example, the DSAPrivateKey interface in <pre><code> java.security.interfaces </code></pre> . </p><pre><code>public interface PrivateKey\nimplements Key</code></pre></section>	https://developer.android.com/reference/java/security/PrivateKey.html
PrivilegedAction	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public interface PrivilegedAction\n</code></pre></section>	https://developer.android.com/reference/java/security/PrivilegedAction.html
PrivilegedActionException	A										<section class="prog__container"><p> Legacy security code; do not use. This exception is thrown by <pre><code> doPrivileged(PrivilegedExceptionAction) </code></pre> and <pre><code> doPrivileged(PrivilegedExceptionAction, AccessControlContext context) </code></pre> to indicate that the action being performed threw a checked exception. The exception thrown by the action can be obtained by calling the <pre><code> getException </code></pre> method. In effect, an <pre><code> PrivilegedActionException </code></pre> is a "wrapper" for an exception thrown by a privileged action. <p> As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The "exception thrown by the privileged computation" that is provided at construction time and accessed via the <pre><code> getException() </code></pre> method is now known as the <i> cause </i> , and may be accessed via the <pre><code> getCause() </code></pre> method, as well as the aforementioned "legacy method." </p><pre><code>public class PrivilegedActionException\n</code></pre></section>	https://developer.android.com/reference/java/security/PrivilegedActionException.html
PrivilegedExceptionAction	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public interface PrivilegedExceptionAction\n</code></pre></section>	https://developer.android.com/reference/java/security/PrivilegedExceptionAction.html
ProtectionDomain	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public class ProtectionDomain\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/ProtectionDomain.html
Provider	A										<section class="prog__container"><p> This class represents a "provider" for the Java Security API, where a provider implements some or all parts of Java Security. Services that a provider may implement include: <ul> <li> Algorithms (such as DSA, RSA, MD5 or SHA-1). <li> Key generation, conversion, and management facilities (such as for algorithm-specific keys). </li> </li> </ul> <p> Each provider has a name and a version number, and is configured in each runtime it is installed in. <p> See The Provider Class in the "Java Cryptography Architecture API Specification &amp; Reference" for information about how a particular type of provider, the cryptographic service provider, works and is installed. However, please note that a provider can be used to implement any security service in Java that uses a pluggable architecture with a choice of implementations that fit underneath. <p> Some provider implementations may encounter unrecoverable internal errors during their operation, for example a failure to communicate with a security token. A <pre><code> ProviderException </code></pre> should be used to indicate such errors. <p> The service type <pre><code> Provider </code></pre> is reserved for use by the security framework. Services of this type cannot be added, removed, or modified by applications. The following attributes are automatically placed in each Provider object: <table cellspacing="4"> <tr> <th> Name </th> <th> Value </th> <tr> <td> <pre><code> Provider.id name </code></pre> </td> <td> <pre><code> String.valueOf(provider.getName()) </code></pre> </td> <tr> <td> <pre><code> Provider.id version </code></pre> </td> <td> <pre><code> String.valueOf(provider.getVersion()) </code></pre> </td> <tr> <td> <pre><code> Provider.id info </code></pre> </td> <td> <pre><code> String.valueOf(provider.getInfo()) </code></pre> </td> <tr> <td> <pre><code> Provider.id className </code></pre> </td> <td> <pre><code> provider.getClass().getName() </code></pre> </td> </tr> </tr> </tr> </tr> </tr> </table> </p><pre><code>public abstract class Provider\n</code></pre></section>	https://developer.android.com/reference/java/security/Provider.html
Provider.Service	A										<section class="prog__container"><p> The description of a security service. It encapsulates the properties of a service and contains a factory method to obtain new implementation instances of this service. <p> Each service has a provider that offers the service, a type, an algorithm name, and the name of the class that implements the service. Optionally, it also includes a list of alternate algorithm names for this service (aliases) and attributes, which are a map of (name, value) String pairs. <p> This class defines the methods <pre><code> supportsParameter() </code></pre> and <pre><code> newInstance() </code></pre> which are used by the Java security framework when it searches for suitable services and instantes them. The valid arguments to those methods depend on the type of service. For the service types defined within Java SE, see the Java Cryptography Architecture API Specification &amp; Reference for the valid values. Note that components outside of Java SE can define additional types of services and their behavior. <p> Instances of this class are immutable. </p><pre><code>public static class Provider.Service\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/Provider.Service.html
ProviderException	A										<section class="prog__container"><p> A runtime exception for Provider exceptions (such as misconfiguration errors or unrecoverable internal errors), which may be subclassed by Providers to throw specialized, provider-specific runtime errors.</p><pre><code>public class ProviderException\n</code></pre></section>	https://developer.android.com/reference/java/security/ProviderException.html
PublicKey	A										<section class="prog__container"><p> <p> A public key. This interface contains no methods or constants. It merely serves to group (and provide type safety for) all public key interfaces. Note: The specialized public key interfaces extend this interface. See, for example, the DSAPublicKey interface in <pre><code> java.security.interfaces </code></pre> . </p><pre><code>public interface PublicKey\nimplements Key</code></pre></section>	https://developer.android.com/reference/java/security/PublicKey.html
SecureClassLoader	A										<section class="prog__container"><p> This class extends ClassLoader with additional support for defining classes with an associated code source and permissions which are retrieved by the system policy by default.</p><pre><code>public class SecureClassLoader\n</code></pre></section>	https://developer.android.com/reference/java/security/SecureClassLoader.html
SecureRandom	A										<section class="prog__container"><p> This class provides a cryptographically strong random number generator (RNG). <p> A cryptographically strong random number minimally complies with the statistical random number generator tests specified in <i> FIPS 140-2, Security Requirements for Cryptographic Modules </i> , section 4.9.1. Additionally, SecureRandom must produce non-deterministic output. Therefore any seed material passed to a SecureRandom object must be unpredictable, and all SecureRandom output sequences must be cryptographically strong, as described in <i> RFC 1750: Randomness Recommendations for Security </i> . <p> A caller obtains a SecureRandom instance via the no-argument constructor or one of the <pre><code> getInstance </code></pre> methods: <pre> SecureRandom random = new SecureRandom(); </pre> <p> Many SecureRandom implementations are in the form of a pseudo-random number generator (PRNG), which means they use a deterministic algorithm to produce a pseudo-random sequence from a true random seed. Other implementations may produce true random numbers, and yet others may use a combination of both techniques. <p> Typical callers of SecureRandom invoke the following methods to retrieve random bytes: <pre> SecureRandom random = new SecureRandom(); byte bytes[] = new byte[20]; random.nextBytes(bytes); </pre> <p> Callers may also invoke the <pre><code> generateSeed </code></pre> method to generate a given number of seed bytes (to seed other random number generators, for example): <pre> byte seed[] = random.generateSeed(20); </pre> Note: Depending on the implementation, the <pre><code> generateSeed </code></pre> and <pre><code> nextBytes </code></pre> methods may block as entropy is being gathered, for example, if they need to read from /dev/random on various unix-like operating systems. The SHA1PRNG algorithm from the Crypto provider has been deprecated as it was insecure, and also incorrectly used by some apps as a key derivation function. See Security "Crypto" provider deprecated in Android N for details. </p><pre><code>public class SecureRandom\n</code></pre></section>	https://developer.android.com/reference/java/security/SecureRandom.html
SecureRandomSpi	A										<section class="prog__container"><p> This class defines the <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> SecureRandom </code></pre> class. All the abstract methods in this class must be implemented by each service provider who wishes to supply the implementation of a cryptographically strong pseudo-random number generator.</p><pre><code>public abstract class SecureRandomSpi\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/SecureRandomSpi.html
Security	A										<section class="prog__container"><p> <p> This class centralizes all security properties and common security methods. One of its primary uses is to manage providers. </p><pre><code>public final class Security\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/Security.html
SecurityPermission	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public final class SecurityPermission\n</code></pre></section>	https://developer.android.com/reference/java/security/SecurityPermission.html
Signature	A										<section class="prog__container"><p> The Signature class is used to provide applications the functionality of a digital signature algorithm. Digital signatures are used for authentication and integrity assurance of digital data. <p> The signature algorithm can be, among others, the NIST standard DSA, using DSA and SHA-1. The DSA algorithm using the SHA-1 message digest algorithm can be specified as <tt> SHA1withDSA </tt> . In the case of RSA, there are multiple choices for the message digest algorithm, so the signing algorithm could be specified as, for example, <tt> MD2withRSA </tt> , <tt> MD5withRSA </tt> , or <tt> SHA1withRSA </tt> . The algorithm name must be specified, as there is no default. <p> A Signature object can be used to generate and verify digital signatures. <p> There are three phases to the use of a Signature object for either signing data or verifying a signature: <ol> <li> Initialization, with either <ul> <li> a public key, which initializes the signature for verification (see <pre><code> initVerify </code></pre> ), or <li> a private key (and optionally a Secure Random Number Generator), which initializes the signature for signing (see <pre><code> initSign(PrivateKey) </code></pre> and <pre><code> initSign(PrivateKey, SecureRandom) </code></pre> ). </li> </li> </ul> <p> <li> Updating <p> <p> Depending on the type of initialization, this will update the bytes to be signed or verified. See the <pre><code> update </code></pre> methods. <p> <li> Signing or Verifying a signature on all updated bytes. See the <pre><code> sign </code></pre> methods and the <pre><code> verify </code></pre> method. </li> </p><pre><code>public abstract class Signature\n</code></pre></section>	https://developer.android.com/reference/java/security/Signature.html
SignatureException	A										<section class="prog__container"><p> This is the generic Signature exception.</p><pre><code>public class SignatureException\n</code></pre></section>	https://developer.android.com/reference/java/security/SignatureException.html
SignatureSpi	A										<section class="prog__container"><p> This class defines the <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> Signature </code></pre> class, which is used to provide the functionality of a digital signature algorithm. Digital signatures are used for authentication and integrity assurance of digital data.. <p> All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a particular signature algorithm. </p><pre><code>public abstract class SignatureSpi\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/SignatureSpi.html
SignedObject	A										<section class="prog__container"><p> <p> SignedObject is a class for the purpose of creating authentic runtime objects whose integrity cannot be compromised without being detected. <p> More specifically, a SignedObject contains another Serializable object, the (to-be-)signed object and its signature. <p> The signed object is a "deep copy" (in serialized form) of an original object. Once the copy is made, further manipulation of the original object has no side effect on the copy. <p> The underlying signing algorithm is designated by the Signature object passed to the constructor and the <pre><code> verify </code></pre> method. A typical usage for signing is the following: <p> <pre><code> <pre> Signature signingEngine = Signature.getInstance(algorithm, provider); SignedObject so = new SignedObject(myobject, signingKey, signingEngine); </pre> </code></pre> <p> A typical usage for verification is the following (having received SignedObject <pre><code> so </code></pre> ): <p> <pre><code> <pre> Signature verificationEngine = Signature.getInstance(algorithm, provider); if (so.verify(publickey, verificationEngine)) try { Object myobj = so.getObject(); } catch (java.lang.ClassNotFoundException e) {}; </pre> </code></pre> <p> Several points are worth noting. First, there is no need to initialize the signing or verification engine, as it will be re-initialized inside the constructor and the <pre><code> verify </code></pre> method. Secondly, for verification to succeed, the specified public key must be the public key corresponding to the private key used to generate the SignedObject. <p> More importantly, for flexibility reasons, the constructor and <pre><code> verify </code></pre> method allow for customized signature engines, which can implement signature algorithms that are not installed formally as part of a crypto provider. However, it is crucial that the programmer writing the verifier code be aware what <pre><code> Signature </code></pre> engine is being used, as its own implementation of the <pre><code> verify </code></pre> method is invoked to verify a signature. In other words, a malicious <pre><code> Signature </code></pre> may choose to always return true on verification in an attempt to bypass a security check. <p> The signature algorithm can be, among others, the NIST standard DSA, using DSA and SHA-1. The algorithm is specified using the same convention as that for signatures. The DSA algorithm using the SHA-1 message digest algorithm can be specified, for example, as "SHA/DSA" or "SHA-1/DSA" (they are equivalent). In the case of RSA, there are multiple choices for the message digest algorithm, so the signing algorithm could be specified as, for example, "MD2/RSA", "MD5/RSA" or "SHA-1/RSA". The algorithm name must be specified, as there is no default. <p> The name of the Cryptography Package Provider is designated also by the Signature parameter to the constructor and the <pre><code> verify </code></pre> method. If the provider is not specified, the default provider is used. Each installation can be configured to use a particular provider as default. <p> Potential applications of SignedObject include: <ul> <li> It can be used internally to any Java runtime as an unforgeable authorization token -- one that can be passed around without the fear that the token can be maliciously modified without being detected. <li> It can be used to sign and serialize data/object for storage outside the Java runtime (e.g., storing critical access control data on disk). <li> Nested SignedObjects can be used to construct a logical sequence of signatures, resembling a chain of authorization and delegation. </li> </li> </li> </ul> </p><pre><code>public final class SignedObject\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/SignedObject.html
Signer	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 1. </strong> <br/> This class is no longer used. Its functionality has been replaced by <pre><code> java.security.KeyStore </code></pre> , the <pre><code> java.security.cert </code></pre> package, and <pre><code> java.security.Principal </code></pre> . </p><pre><code>public abstract class Signer\n</code></pre></section>	https://developer.android.com/reference/java/security/Signer.html
Timestamp	A										<section class="prog__container"><p> This class encapsulates information about a signed timestamp. It is immutable. It includes the timestamp's date and time as well as information about the Timestamping Authority (TSA) which generated and signed the timestamp.</p><pre><code>public final class Timestamp\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/Timestamp.html
UnrecoverableEntryException	A										<section class="prog__container"><p> This exception is thrown if an entry in the keystore cannot be recovered.</p><pre><code>public class UnrecoverableEntryException\n</code></pre></section>	https://developer.android.com/reference/java/security/UnrecoverableEntryException.html
UnrecoverableKeyException	A										<section class="prog__container"><p> This exception is thrown if a key in the keystore cannot be recovered.</p><pre><code>public class UnrecoverableKeyException\n</code></pre></section>	https://developer.android.com/reference/java/security/UnrecoverableKeyException.html
UnresolvedPermission	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public final class UnresolvedPermission\n</code></pre></section>	https://developer.android.com/reference/java/security/UnresolvedPermission.html
Acl	A										<section class="prog__container"><pre><code>public interface Acl\nimplements Owner</code></pre></section>	https://developer.android.com/reference/java/security/acl/Acl.html
AclEntry	A										<section class="prog__container"><p> This is the interface used for representing one entry in an Access Control List (ACL). <p> An ACL can be thought of as a data structure with multiple ACL entry objects. Each ACL entry object contains a set of permissions associated with a particular principal. (A principal represents an entity such as an individual user or a group). Additionally, each ACL entry is specified as being either positive or negative. If positive, the permissions are to be granted to the associated principal. If negative, the permissions are to be denied. Each principal can have at most one positive ACL entry and one negative entry; that is, multiple positive or negative ACL entries are not allowed for any principal. Note: ACL entries are by default positive. An entry becomes a negative entry only if the <pre><code> setNegativePermissions </code></pre> method is called on it. </p><pre><code>public interface AclEntry\nimplements Cloneable</code></pre></section>	https://developer.android.com/reference/java/security/acl/AclEntry.html
AclNotFoundException	A										<section class="prog__container"><p> This is an exception that is thrown whenever a reference is made to a non-existent ACL (Access Control List).</p><pre><code>public class AclNotFoundException\n</code></pre></section>	https://developer.android.com/reference/java/security/acl/AclNotFoundException.html
Group	A										<section class="prog__container"><p> This interface is used to represent a group of principals. (A principal represents an entity such as an individual user or a company). <p> Note that Group extends Principal. Thus, either a Principal or a Group can be passed as an argument to methods containing a Principal parameter. For example, you can add either a Principal or a Group to a Group object by calling the object's <pre><code> addMember </code></pre> method, passing it the Principal or Group. </p><pre><code>public interface Group\nimplements Principal</code></pre></section>	https://developer.android.com/reference/java/security/acl/Group.html
LastOwnerException	A										<section class="prog__container"><p> This is an exception that is thrown whenever an attempt is made to delete the last owner of an Access Control List.</p><pre><code>public class LastOwnerException\n</code></pre></section>	https://developer.android.com/reference/java/security/acl/LastOwnerException.html
NotOwnerException	A										<section class="prog__container"><p> This is an exception that is thrown whenever the modification of an object (such as an Access Control List) is only allowed to be done by an owner of the object, but the Principal attempting the modification is not an owner.</p><pre><code>public class NotOwnerException\n</code></pre></section>	https://developer.android.com/reference/java/security/acl/NotOwnerException.html
Owner	A										<section class="prog__container"><p> Interface for managing owners of Access Control Lists (ACLs) or ACL configurations. (Note that the Acl interface in the <pre><code> java.security.acl </code></pre> package extends this Owner interface.) The initial owner Principal should be specified as an argument to the constructor of the class implementing this interface.</p><pre><code>public interface Owner\n</code></pre></section>	https://developer.android.com/reference/java/security/acl/Owner.html
java.security.acl	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/java/security/acl/package-summary.html
Permission	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public interface Permission\n</code></pre></section>	https://developer.android.com/reference/java/security/acl/Permission.html
Certificate.CertificateRep	A										<section class="prog__container"><p> Alternate Certificate class for serialization.</p><pre><code>protected static class Certificate.CertificateRep\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/Certificate.CertificateRep.html
Certificate	A										<section class="prog__container"><p> <p> Abstract class for managing a variety of identity certificates. An identity certificate is a binding of a principal to a public key which is vouched for by another principal. (A principal represents an entity such as an individual user, a group, or a corporation.) <p> This class is an abstraction for certificates that have different formats but important common uses. For example, different types of certificates, such as X.509 and PGP, share general certificate functionality (like encoding and verifying) and some types of information (like a public key). <p> X.509, PGP, and SDSI certificates can all be implemented by subclassing the Certificate class, even though they contain different sets of information, and they store and retrieve the information in different ways. </p><pre><code>public abstract class Certificate\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/Certificate.html
CertificateEncodingException	A										<section class="prog__container"><p> Certificate Encoding Exception. This is thrown whenever an error occurs while attempting to encode a certificate.</p><pre><code>public class CertificateEncodingException\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertificateEncodingException.html
CertificateException	A										<section class="prog__container"><p> This exception indicates one of a variety of certificate problems.</p><pre><code>public class CertificateException\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertificateException.html
CertificateExpiredException	A										<section class="prog__container"><p> Certificate Expired Exception. This is thrown whenever the current <pre><code> Date </code></pre> or the specified <pre><code> Date </code></pre> is after the <pre><code> notAfter </code></pre> date/time specified in the validity period of the certificate.</p><pre><code>public class CertificateExpiredException\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertificateExpiredException.html
CertificateFactory	A										<section class="prog__container"><p> This class defines the functionality of a certificate factory, which is used to generate certificate, certification path ( <pre><code> CertPath </code></pre> ) and certificate revocation list (CRL) objects from their encodings. <p> For encodings consisting of multiple certificates, use <pre><code> generateCertificates </code></pre> when you want to parse a collection of possibly unrelated certificates. Otherwise, use <pre><code> generateCertPath </code></pre> when you want to generate a <pre><code> CertPath </code></pre> (a certificate chain) and subsequently validate it with a <pre><code> CertPathValidator </code></pre> . <p> A certificate factory for X.509 must return certificates that are an instance of <pre><code> java.security.cert.X509Certificate </code></pre> , and CRLs that are an instance of <pre><code> java.security.cert.X509CRL </code></pre> . <p> The following example reads a file with Base64 encoded certificates, which are each bounded at the beginning by -----BEGIN CERTIFICATE-----, and bounded at the end by -----END CERTIFICATE-----. We convert the <pre><code> FileInputStream </code></pre> (which does not support <pre><code> mark </code></pre> and <pre><code> reset </code></pre> ) to a <pre><code> BufferedInputStream </code></pre> (which supports those methods), so that each call to <pre><code> generateCertificate </code></pre> consumes only one certificate, and the read position of the input stream is positioned to the next certificate in the file: <p> <pre> FileInputStream fis = new FileInputStream(filename); BufferedInputStream bis = new BufferedInputStream(fis); CertificateFactory cf = CertificateFactory.getInstance("X.509"); while (bis.available() &gt; 0) { Certificate cert = cf.generateCertificate(bis); System.out.println(cert.toString()); } </pre> <p> The following example parses a PKCS#7-formatted certificate reply stored in a file and extracts all the certificates from it: <p> <pre> FileInputStream fis = new FileInputStream(filename); CertificateFactory cf = CertificateFactory.getInstance("X.509"); Collection c = cf.generateCertificates(fis); Iterator i = c.iterator(); while (i.hasNext()) { Certificate cert = (Certificate)i.next(); System.out.println(cert); } </pre> <p> Android provides the following <pre><code> CertificateFactory </code></pre> types: <table> <thead> <tr> <th> Name </th> <th> Supported (API Levels) </th> </tr> </thead> <tbody> <tr> <td> X.509 </td> <td> 1+ </td> </tr> </tbody> </table> and the following <pre><code> CertPath </code></pre> encodings: <table> <thead> <tr> <th> Name </th> <th> Supported (API Levels) </th> </tr> </thead> <tbody> <tr> <td> PKCS7 </td> <td> 1+ </td> </tr> <tr> <td> PkiPath </td> <td> 1+ </td> </tr> </tbody> </table> The type and encodings are described in the CertificateFactory section and the CertPath Encodings section of the Java Cryptography Architecture Standard Algorithm Name Documentation. </p><pre><code>public class CertificateFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertificateFactory.html
CertificateFactorySpi	A										<section class="prog__container"><p> This class defines the <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> CertificateFactory </code></pre> class. All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a certificate factory for a particular certificate type, e.g., X.509. <p> Certificate factories are used to generate certificate, certification path ( <pre><code> CertPath </code></pre> ) and certificate revocation list (CRL) objects from their encodings. <p> A certificate factory for X.509 must return certificates that are an instance of <pre><code> java.security.cert.X509Certificate </code></pre> , and CRLs that are an instance of <pre><code> java.security.cert.X509CRL </code></pre> . </p><pre><code>public abstract class CertificateFactorySpi\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertificateFactorySpi.html
CertificateNotYetValidException	A										<section class="prog__container"><p> Certificate is not yet valid exception. This is thrown whenever the current <pre><code> Date </code></pre> or the specified <pre><code> Date </code></pre> is before the <pre><code> notBefore </code></pre> date/time in the Certificate validity period.</p><pre><code>public class CertificateNotYetValidException\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertificateNotYetValidException.html
CertificateParsingException	A										<section class="prog__container"><p> Certificate Parsing Exception. This is thrown whenever an invalid DER-encoded certificate is parsed or unsupported DER features are found in the Certificate.</p><pre><code>public class CertificateParsingException\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertificateParsingException.html
CertificateRevokedException	A										<section class="prog__container"><p> An exception that indicates an X.509 certificate is revoked. A <pre><code> CertificateRevokedException </code></pre> contains additional information about the revoked certificate, such as the date on which the certificate was revoked and the reason it was revoked.</p><pre><code>public class CertificateRevokedException\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertificateRevokedException.html
CertPath.CertPathRep	A										<section class="prog__container"><p> Alternate <pre><code> CertPath </code></pre> class for serialization.</p><pre><code>protected static class CertPath.CertPathRep\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertPath.CertPathRep.html
CertPath	A										<section class="prog__container"><p> An immutable sequence of certificates (a certification path). <p> This is an abstract class that defines the methods common to all <pre><code> CertPath </code></pre> s. Subclasses can handle different kinds of certificates (X.509, PGP, etc.). <p> All <pre><code> CertPath </code></pre> objects have a type, a list of <pre><code> Certificate </code></pre> s, and one or more supported encodings. Because the <pre><code> CertPath </code></pre> class is immutable, a <pre><code> CertPath </code></pre> cannot change in any externally visible way after being constructed. This stipulation applies to all public fields and methods of this class and any added or overridden by subclasses. <p> The type is a <pre><code> String </code></pre> that identifies the type of <pre><code> Certificate </code></pre> s in the certification path. For each certificate <pre><code> cert </code></pre> in a certification path <pre><code> certPath </code></pre> , <pre><code> cert.getType().equals(certPath.getType()) </code></pre> must be <pre><code> true </code></pre> . <p> The list of <pre><code> Certificate </code></pre> s is an ordered <pre><code> List </code></pre> of zero or more <pre><code> Certificate </code></pre> s. This <pre><code> List </code></pre> and all of the <pre><code> Certificate </code></pre> s contained in it must be immutable. <p> Each <pre><code> CertPath </code></pre> object must support one or more encodings so that the object can be translated into a byte array for storage or transmission to other parties. Preferably, these encodings should be well-documented standards (such as PKCS#7). One of the encodings supported by a <pre><code> CertPath </code></pre> is considered the default encoding. This encoding is used if no encoding is explicitly requested (for the <pre><code> getEncoded() </code></pre> method, for instance). <p> All <pre><code> CertPath </code></pre> objects are also <pre><code> Serializable </code></pre> . <pre><code> CertPath </code></pre> objects are resolved into an alternate <pre><code> CertPathRep </code></pre> object during serialization. This allows a <pre><code> CertPath </code></pre> object to be serialized into an equivalent representation regardless of its underlying implementation. <p> <pre><code> CertPath </code></pre> objects can be created with a <pre><code> CertificateFactory </code></pre> or they can be returned by other classes, such as a <pre><code> CertPathBuilder </code></pre> . <p> By convention, X.509 <pre><code> CertPath </code></pre> s (consisting of <pre><code> X509Certificate </code></pre> s), are ordered starting with the target certificate and ending with a certificate issued by the trust anchor. That is, the issuer of one certificate is the subject of the following one. The certificate representing the <pre><code> TrustAnchor </code></pre> should not be included in the certification path. Unvalidated X.509 <pre><code> CertPath </code></pre> s may not follow these conventions. PKIX <pre><code> CertPathValidator </code></pre> s will detect any departure from these conventions that cause the certification path to be invalid and throw a <pre><code> CertPathValidatorException </code></pre> . <p> Every implementation of the Java platform is required to support the following standard <pre><code> CertPath </code></pre> encodings: <ul> <li> <tt> PKCS7 </tt> </li> <li> <tt> PkiPath </tt> </li> </ul> These encodings are described in the CertPath Encodings section of the Java Cryptography Architecture Standard Algorithm Name Documentation. Consult the release documentation for your implementation to see if any other encodings are supported. <p> <b> Concurrent Access </b> <p> All <pre><code> CertPath </code></pre> objects must be thread-safe. That is, multiple threads may concurrently invoke the methods defined in this class on a single <pre><code> CertPath </code></pre> object (or more than one) with no ill effects. This is also true for the <pre><code> List </code></pre> returned by <pre><code> CertPath.getCertificates </code></pre> . <p> Requiring <pre><code> CertPath </code></pre> objects to be immutable and thread-safe allows them to be passed around to various pieces of code without worrying about coordinating access. Providing this thread-safety is generally not difficult, since the <pre><code> CertPath </code></pre> and <pre><code> List </code></pre> objects in question are immutable. </p><pre><code>public abstract class CertPath\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertPath.html
CertPathBuilder	A										<section class="prog__container"><p> A class for building certification paths (also known as certificate chains). <p> This class uses a provider-based architecture. To create a <pre><code> CertPathBuilder </code></pre> , call one of the static <pre><code> getInstance </code></pre> methods, passing in the algorithm name of the <pre><code> CertPathBuilder </code></pre> desired and optionally the name of the provider desired. <p> Once a <pre><code> CertPathBuilder </code></pre> object has been created, certification paths can be constructed by calling the <pre><code> build </code></pre> method and passing it an algorithm-specific set of parameters. If successful, the result (including the <pre><code> CertPath </code></pre> that was built) is returned in an object that implements the <pre><code> CertPathBuilderResult </code></pre> interface. <p> The <pre><code> getRevocationChecker() </code></pre> method allows an application to specify additional algorithm-specific parameters and options used by the <pre><code> CertPathBuilder </code></pre> when checking the revocation status of certificates. Here is an example demonstrating how it is used with the PKIX algorithm: <pre> CertPathBuilder cpb = CertPathBuilder.getInstance("PKIX"); PKIXRevocationChecker rc = (PKIXRevocationChecker)cpb.getRevocationChecker(); rc.setOptions(EnumSet.of(Option.PREFER_CRLS)); params.addCertPathChecker(rc); CertPathBuilderResult cpbr = cpb.build(params); </pre> <p> Android provides the following <pre><code> CertPathBuilder </code></pre> algorithms: <table> <thead> <tr> <th> Name </th> <th> Supported (API Levels) </th> </tr> </thead> <tbody> <tr> <td> PKIX </td> <td> 1+ </td> </tr> </tbody> </table> This algorithm is described in the CertPathBuilder section of the Java Cryptography Architecture Standard Algorithm Name Documentation. <p> <b> Concurrent Access </b> <p> The static methods of this class are guaranteed to be thread-safe. Multiple threads may concurrently invoke the static methods defined in this class with no ill effects. <p> However, this is not true for the non-static methods defined by this class. Unless otherwise documented by a specific provider, threads that need to access a single <pre><code> CertPathBuilder </code></pre> instance concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating a different <pre><code> CertPathBuilder </code></pre> instance need not synchronize. </p><pre><code>public class CertPathBuilder\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertPathBuilder.html
CertPathBuilderException	A										<section class="prog__container"><p> An exception indicating one of a variety of problems encountered when building a certification path with a <pre><code> CertPathBuilder </code></pre> . <p> A <pre><code> CertPathBuilderException </code></pre> provides support for wrapping exceptions. The <pre><code> getCause </code></pre> method returns the throwable, if any, that caused this exception to be thrown. <p> <b> Concurrent Access </b> <p> Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. </p><pre><code>public class CertPathBuilderException\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertPathBuilderException.html
CertPathBuilderResult	A										<section class="prog__container"><p> A specification of the result of a certification path builder algorithm. All results returned by the <pre><code> CertPathBuilder.build </code></pre> method must implement this interface. <p> At a minimum, a <pre><code> CertPathBuilderResult </code></pre> contains the <pre><code> CertPath </code></pre> built by the <pre><code> CertPathBuilder </code></pre> instance. Implementations of this interface may add methods to return implementation or algorithm specific information, such as debugging information or certification path validation results. <p> <b> Concurrent Access </b> <p> Unless otherwise specified, the methods defined in this interface are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. </p><pre><code>public interface CertPathBuilderResult\nimplements Cloneable</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertPathBuilderResult.html
CertPathBuilderSpi	A										<section class="prog__container"><p> The <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> CertPathBuilder </code></pre> class. All <pre><code> CertPathBuilder </code></pre> implementations must include a class (the SPI class) that extends this class ( <pre><code> CertPathBuilderSpi </code></pre> ) and implements all of its methods. In general, instances of this class should only be accessed through the <pre><code> CertPathBuilder </code></pre> class. For details, see the Java Cryptography Architecture. <p> <b> Concurrent Access </b> <p> Instances of this class need not be protected against concurrent access from multiple threads. Threads that need to access a single <pre><code> CertPathBuilderSpi </code></pre> instance concurrently should synchronize amongst themselves and provide the necessary locking before calling the wrapping <pre><code> CertPathBuilder </code></pre> object. <p> However, implementations of <pre><code> CertPathBuilderSpi </code></pre> may still encounter concurrency issues, since multiple threads each manipulating a different <pre><code> CertPathBuilderSpi </code></pre> instance need not synchronize. </p><pre><code>public abstract class CertPathBuilderSpi\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertPathBuilderSpi.html
CertPathChecker	A										<section class="prog__container"><p> <p> Performs one or more checks on each <pre><code> Certificate </code></pre> of a <pre><code> CertPath </code></pre> . <p> A <pre><code> CertPathChecker </code></pre> implementation is typically created to extend a certification path validation algorithm. For example, an implementation may check for and process a critical private extension of each certificate in a certification path. </p><pre><code>public interface CertPathChecker\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertPathChecker.html
CertPathParameters	A										<section class="prog__container"><p> A specification of certification path algorithm parameters. The purpose of this interface is to group (and provide type safety for) all <pre><code> CertPath </code></pre> parameter specifications. All <pre><code> CertPath </code></pre> parameter specifications must implement this interface.</p><pre><code>public interface CertPathParameters\nimplements Cloneable</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertPathParameters.html
CertPathValidator	A										<section class="prog__container"><p> A class for validating certification paths (also known as certificate chains). <p> This class uses a provider-based architecture. To create a <pre><code> CertPathValidator </code></pre> , call one of the static <pre><code> getInstance </code></pre> methods, passing in the algorithm name of the <pre><code> CertPathValidator </code></pre> desired and optionally the name of the provider desired. <p> Once a <pre><code> CertPathValidator </code></pre> object has been created, it can be used to validate certification paths by calling the <pre><code> validate </code></pre> method and passing it the <pre><code> CertPath </code></pre> to be validated and an algorithm-specific set of parameters. If successful, the result is returned in an object that implements the <pre><code> CertPathValidatorResult </code></pre> interface. <p> The <pre><code> getRevocationChecker() </code></pre> method allows an application to specify additional algorithm-specific parameters and options used by the <pre><code> CertPathValidator </code></pre> when checking the revocation status of certificates. Here is an example demonstrating how it is used with the PKIX algorithm: <pre> CertPathValidator cpv = CertPathValidator.getInstance("PKIX"); PKIXRevocationChecker rc = (PKIXRevocationChecker)cpv.getRevocationChecker(); rc.setOptions(EnumSet.of(Option.SOFT_FAIL)); params.addCertPathChecker(rc); CertPathValidatorResult cpvr = cpv.validate(path, params); </pre> <p> Android provides the following <pre><code> CertPathValidator </code></pre> algorithms: <table> <thead> <tr> <th> Name </th> <th> Supported (API Levels) </th> </tr> </thead> <tbody> <tr> <td> PKIX </td> <td> 1+ </td> </tr> </tbody> </table> This algorithm is described in the CertPathValidator section of the Java Cryptography Architecture Standard Algorithm Name Documentation. <p> <b> Concurrent Access </b> <p> The static methods of this class are guaranteed to be thread-safe. Multiple threads may concurrently invoke the static methods defined in this class with no ill effects. <p> However, this is not true for the non-static methods defined by this class. Unless otherwise documented by a specific provider, threads that need to access a single <pre><code> CertPathValidator </code></pre> instance concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating a different <pre><code> CertPathValidator </code></pre> instance need not synchronize. </p><pre><code>public class CertPathValidator\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertPathValidator.html
CertPathValidatorException.BasicReason	A										<section class="prog__container"><p> The BasicReason enumerates the potential reasons that a certification path of any type may be invalid.</p><pre><code>public static final enum CertPathValidatorException.BasicReason\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertPathValidatorException.BasicReason.html
CertPathValidatorException	A										<section class="prog__container"><p> An exception indicating one of a variety of problems encountered when validating a certification path. <p> A <pre><code> CertPathValidatorException </code></pre> provides support for wrapping exceptions. The <pre><code> getCause </code></pre> method returns the throwable, if any, that caused this exception to be thrown. <p> A <pre><code> CertPathValidatorException </code></pre> may also include the certification path that was being validated when the exception was thrown, the index of the certificate in the certification path that caused the exception to be thrown, and the reason that caused the failure. Use the <pre><code> getCertPath </code></pre> , <pre><code> getIndex </code></pre> , and <pre><code> getReason </code></pre> methods to retrieve this information. <p> <b> Concurrent Access </b> <p> Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. </p><pre><code>public class CertPathValidatorException\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertPathValidatorException.html
CertPathValidatorException.Reason	A										<section class="prog__container"><p> The reason the validation algorithm failed.</p><pre><code>public static interface CertPathValidatorException.Reason\nimplements Serializable</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertPathValidatorException.Reason.html
CertPathValidatorResult	A										<section class="prog__container"><p> A specification of the result of a certification path validator algorithm. <p> The purpose of this interface is to group (and provide type safety for) all certification path validator results. All results returned by the <pre><code> CertPathValidator.validate </code></pre> method must implement this interface. </p><pre><code>public interface CertPathValidatorResult\nimplements Cloneable</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertPathValidatorResult.html
CertPathValidatorSpi	A										<section class="prog__container"><p> The <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> CertPathValidator </code></pre> class. All <pre><code> CertPathValidator </code></pre> implementations must include a class (the SPI class) that extends this class ( <pre><code> CertPathValidatorSpi </code></pre> ) and implements all of its methods. In general, instances of this class should only be accessed through the <pre><code> CertPathValidator </code></pre> class. For details, see the Java Cryptography Architecture. <p> <b> Concurrent Access </b> <p> Instances of this class need not be protected against concurrent access from multiple threads. Threads that need to access a single <pre><code> CertPathValidatorSpi </code></pre> instance concurrently should synchronize amongst themselves and provide the necessary locking before calling the wrapping <pre><code> CertPathValidator </code></pre> object. <p> However, implementations of <pre><code> CertPathValidatorSpi </code></pre> may still encounter concurrency issues, since multiple threads each manipulating a different <pre><code> CertPathValidatorSpi </code></pre> instance need not synchronize. </p><pre><code>public abstract class CertPathValidatorSpi\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertPathValidatorSpi.html
CertSelector	A										<section class="prog__container"><p> A selector that defines a set of criteria for selecting <pre><code> Certificate </code></pre> s. Classes that implement this interface are often used to specify which <pre><code> Certificate </code></pre> s should be retrieved from a <pre><code> CertStore </code></pre> . <p> <b> Concurrent Access </b> <p> Unless otherwise specified, the methods defined in this interface are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. </p><pre><code>public interface CertSelector\nimplements Cloneable</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertSelector.html
CertStore	A										<section class="prog__container"><p> A class for retrieving <pre><code> Certificate </code></pre> s and <pre><code> CRL </code></pre> s from a repository. <p> This class uses a provider-based architecture. To create a <pre><code> CertStore </code></pre> , call one of the static <pre><code> getInstance </code></pre> methods, passing in the type of <pre><code> CertStore </code></pre> desired, any applicable initialization parameters and optionally the name of the provider desired. <p> Once the <pre><code> CertStore </code></pre> has been created, it can be used to retrieve <pre><code> Certificate </code></pre> s and <pre><code> CRL </code></pre> s by calling its <pre><code> getCertificates </code></pre> and <pre><code> getCRLs </code></pre> methods. <p> Unlike a <pre><code> KeyStore </code></pre> , which provides access to a cache of private keys and trusted certificates, a <pre><code> CertStore </code></pre> is designed to provide access to a potentially vast repository of untrusted certificates and CRLs. For example, an LDAP implementation of <pre><code> CertStore </code></pre> provides access to certificates and CRLs stored in one or more directories using the LDAP protocol and the schema as defined in the RFC service attribute. <p> Android provides the following <pre><code> CertStore </code></pre> types: <table> <thead> <tr> <th> Name </th> <th> Supported (API Levels) </th> </tr> </thead> <tbody> <tr> <td> Collection </td> <td> 1+ </td> </tr> </tbody> </table> This type is described in the CertStore section of the Java Cryptography Architecture Standard Algorithm Name Documentation. <p> <b> Concurrent Access </b> <p> All public methods of <pre><code> CertStore </code></pre> objects must be thread-safe. That is, multiple threads may concurrently invoke these methods on a single <pre><code> CertStore </code></pre> object (or more than one) with no ill effects. This allows a <pre><code> CertPathBuilder </code></pre> to search for a CRL while simultaneously searching for further certificates, for instance. <p> The static methods of this class are also guaranteed to be thread-safe. Multiple threads may concurrently invoke the static methods defined in this class with no ill effects. </p><pre><code>public class CertStore\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertStore.html
CertStoreException	A										<section class="prog__container"><p> An exception indicating one of a variety of problems retrieving certificates and CRLs from a <pre><code> CertStore </code></pre> . <p> A <pre><code> CertStoreException </code></pre> provides support for wrapping exceptions. The <pre><code> getCause </code></pre> method returns the throwable, if any, that caused this exception to be thrown. <p> <b> Concurrent Access </b> <p> Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. </p><pre><code>public class CertStoreException\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertStoreException.html
CertStoreParameters	A										<section class="prog__container"><p> A specification of <pre><code> CertStore </code></pre> parameters. <p> The purpose of this interface is to group (and provide type safety for) all <pre><code> CertStore </code></pre> parameter specifications. All <pre><code> CertStore </code></pre> parameter specifications must implement this interface. <p> Typically, a <pre><code> CertStoreParameters </code></pre> object is passed as a parameter to one of the <pre><code> CertStore.getInstance </code></pre> methods. The <pre><code> getInstance </code></pre> method returns a <pre><code> CertStore </code></pre> that is used for retrieving <pre><code> Certificate </code></pre> s and <pre><code> CRL </code></pre> s. The <pre><code> CertStore </code></pre> that is returned is initialized with the specified parameters. The type of parameters needed may vary between different types of <pre><code> CertStore </code></pre> s. </p><pre><code>public interface CertStoreParameters\nimplements Cloneable</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertStoreParameters.html
CertStoreSpi	A										<section class="prog__container"><p> The <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> CertStore </code></pre> class. All <pre><code> CertStore </code></pre> implementations must include a class (the SPI class) that extends this class ( <pre><code> CertStoreSpi </code></pre> ), provides a constructor with a single argument of type <pre><code> CertStoreParameters </code></pre> , and implements all of its methods. In general, instances of this class should only be accessed through the <pre><code> CertStore </code></pre> class. For details, see the Java Cryptography Architecture. <p> <b> Concurrent Access </b> <p> The public methods of all <pre><code> CertStoreSpi </code></pre> objects must be thread-safe. That is, multiple threads may concurrently invoke these methods on a single <pre><code> CertStoreSpi </code></pre> object (or more than one) with no ill effects. This allows a <pre><code> CertPathBuilder </code></pre> to search for a CRL while simultaneously searching for further certificates, for instance. <p> Simple <pre><code> CertStoreSpi </code></pre> implementations will probably ensure thread safety by adding a <pre><code> synchronized </code></pre> keyword to their <pre><code> engineGetCertificates </code></pre> and <pre><code> engineGetCRLs </code></pre> methods. More sophisticated ones may allow truly concurrent access. </p><pre><code>public abstract class CertStoreSpi\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/CertStoreSpi.html
CollectionCertStoreParameters	A										<section class="prog__container"><p> Parameters used as input for the Collection <pre><code> CertStore </code></pre> algorithm. <p> This class is used to provide necessary configuration parameters to implementations of the Collection <pre><code> CertStore </code></pre> algorithm. The only parameter included in this class is the <pre><code> Collection </code></pre> from which the <pre><code> CertStore </code></pre> will retrieve certificates and CRLs. <p> <b> Concurrent Access </b> <p> Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. </p><pre><code>public class CollectionCertStoreParameters\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/CollectionCertStoreParameters.html
CRL	A										<section class="prog__container"><p> This class is an abstraction of certificate revocation lists (CRLs) that have different formats but important common uses. For example, all CRLs share the functionality of listing revoked certificates, and can be queried on whether or not they list a given certificate. <p> Specialized CRL types can be defined by subclassing off of this abstract class. </p><pre><code>public abstract class CRL\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/CRL.html
CRLException	A										<section class="prog__container"><p> CRL (Certificate Revocation List) Exception.</p><pre><code>public class CRLException\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/CRLException.html
CRLReason	A										<section class="prog__container"><p> The CRLReason enumeration specifies the reason that a certificate is revoked, as defined in RFC 3280: Internet X.509 Public Key Infrastructure Certificate and CRL Profile .</p><pre><code>public final enum CRLReason\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/CRLReason.html
CRLSelector	A										<section class="prog__container"><p> A selector that defines a set of criteria for selecting <pre><code> CRL </code></pre> s. Classes that implement this interface are often used to specify which <pre><code> CRL </code></pre> s should be retrieved from a <pre><code> CertStore </code></pre> . <p> <b> Concurrent Access </b> <p> Unless otherwise specified, the methods defined in this interface are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. </p><pre><code>public interface CRLSelector\nimplements Cloneable</code></pre></section>	https://developer.android.com/reference/java/security/cert/CRLSelector.html
Extension	A										<section class="prog__container"><p> This interface represents an X.509 extension. <p> Extensions provide a means of associating additional attributes with users or public keys and for managing a certification hierarchy. The extension format also allows communities to define private extensions to carry information unique to those communities. <p> Each extension contains an object identifier, a criticality setting indicating whether it is a critical or a non-critical extension, and and an ASN.1 DER-encoded value. Its ASN.1 definition is: <pre> Extension ::= SEQUENCE { extnId OBJECT IDENTIFIER, critical BOOLEAN DEFAULT FALSE, extnValue OCTET STRING -- contains a DER encoding of a value -- of the type registered for use with -- the extnId object identifier value } </pre> <p> This interface is designed to provide access to a single extension, unlike <pre><code> X509Extension </code></pre> which is more suitable for accessing a set of extensions. </p><pre><code>public interface Extension\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/Extension.html
LDAPCertStoreParameters	A										<section class="prog__container"><p> Parameters used as input for the LDAP <pre><code> CertStore </code></pre> algorithm. <p> This class is used to provide necessary configuration parameters (server name and port number) to implementations of the LDAP <pre><code> CertStore </code></pre> algorithm. <p> <b> Concurrent Access </b> <p> Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. </p><pre><code>public class LDAPCertStoreParameters\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/LDAPCertStoreParameters.html
java.security.cert	A										<section class="prog__container">Performs one or more checks on each</section>	https://developer.android.com/reference/java/security/cert/package-summary.html
PKIXBuilderParameters	A										<section class="prog__container"><p> Parameters used as input for the PKIX <pre><code> CertPathBuilder </code></pre> algorithm. <p> A PKIX <pre><code> CertPathBuilder </code></pre> uses these parameters to <pre><code> build </code></pre> a <pre><code> CertPath </code></pre> which has been validated according to the PKIX certification path validation algorithm. <p> To instantiate a <pre><code> PKIXBuilderParameters </code></pre> object, an application must specify one or more <i> most-trusted CAs </i> as defined by the PKIX certification path validation algorithm. The most-trusted CA can be specified using one of two constructors. An application can call <pre><code> PKIXBuilderParameters(Set, CertSelector) </code></pre> , specifying a <pre><code> Set </code></pre> of <pre><code> TrustAnchor </code></pre> objects, each of which identifies a most-trusted CA. Alternatively, an application can call <pre><code> PKIXBuilderParameters(KeyStore, CertSelector) </code></pre> , specifying a <pre><code> KeyStore </code></pre> instance containing trusted certificate entries, each of which will be considered as a most-trusted CA. <p> In addition, an application must specify constraints on the target certificate that the <pre><code> CertPathBuilder </code></pre> will attempt to build a path to. The constraints are specified as a <pre><code> CertSelector </code></pre> object. These constraints should provide the <pre><code> CertPathBuilder </code></pre> with enough search criteria to find the target certificate. Minimal criteria for an <pre><code> X509Certificate </code></pre> usually include the subject name and/or one or more subject alternative names. If enough criteria is not specified, the <pre><code> CertPathBuilder </code></pre> may throw a <pre><code> CertPathBuilderException </code></pre> . <p> <b> Concurrent Access </b> <p> Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. </p><pre><code>public class PKIXBuilderParameters\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/PKIXBuilderParameters.html
PKIXCertPathBuilderResult	A										<section class="prog__container"><p> This class represents the successful result of the PKIX certification path builder algorithm. All certification paths that are built and returned using this algorithm are also validated according to the PKIX certification path validation algorithm. <p> Instances of <pre><code> PKIXCertPathBuilderResult </code></pre> are returned by the <pre><code> build </code></pre> method of <pre><code> CertPathBuilder </code></pre> objects implementing the PKIX algorithm. <p> All <pre><code> PKIXCertPathBuilderResult </code></pre> objects contain the certification path constructed by the build algorithm, the valid policy tree and subject public key resulting from the build algorithm, and a <pre><code> TrustAnchor </code></pre> describing the certification authority (CA) that served as a trust anchor for the certification path. <p> <b> Concurrent Access </b> <p> Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. </p><pre><code>public class PKIXCertPathBuilderResult\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/PKIXCertPathBuilderResult.html
PKIXCertPathChecker	A										<section class="prog__container"><p> An abstract class that performs one or more checks on an <pre><code> X509Certificate </code></pre> . <p> A concrete implementation of the <pre><code> PKIXCertPathChecker </code></pre> class can be created to extend the PKIX certification path validation algorithm. For example, an implementation may check for and process a critical private extension of each certificate in a certification path. <p> Instances of <pre><code> PKIXCertPathChecker </code></pre> are passed as parameters using the <pre><code> setCertPathCheckers </code></pre> or <pre><code> addCertPathChecker </code></pre> methods of the <pre><code> PKIXParameters </code></pre> and <pre><code> PKIXBuilderParameters </code></pre> class. Each of the <pre><code> PKIXCertPathChecker </code></pre> s <pre><code> check </code></pre> methods will be called, in turn, for each certificate processed by a PKIX <pre><code> CertPathValidator </code></pre> or <pre><code> CertPathBuilder </code></pre> implementation. <p> A <pre><code> PKIXCertPathChecker </code></pre> may be called multiple times on successive certificates in a certification path. Concrete subclasses are expected to maintain any internal state that may be necessary to check successive certificates. The <pre><code> init </code></pre> method is used to initialize the internal state of the checker so that the certificates of a new certification path may be checked. A stateful implementation <b> must </b> override the <pre><code> clone </code></pre> method if necessary in order to allow a PKIX <pre><code> CertPathBuilder </code></pre> to efficiently backtrack and try other paths. In these situations, the <pre><code> CertPathBuilder </code></pre> is able to restore prior path validation states by restoring the cloned <pre><code> PKIXCertPathChecker </code></pre> s. <p> The order in which the certificates are presented to the <pre><code> PKIXCertPathChecker </code></pre> may be either in the forward direction (from target to most-trusted CA) or in the reverse direction (from most-trusted CA to target). A <pre><code> PKIXCertPathChecker </code></pre> implementation <b> must </b> support reverse checking (the ability to perform its checks when it is presented with certificates in the reverse direction) and <b> may </b> support forward checking (the ability to perform its checks when it is presented with certificates in the forward direction). The <pre><code> isForwardCheckingSupported </code></pre> method indicates whether forward checking is supported. <p> Additional input parameters required for executing the check may be specified through constructors of concrete implementations of this class. <p> <b> Concurrent Access </b> <p> Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. </p><pre><code>public abstract class PKIXCertPathChecker\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/PKIXCertPathChecker.html
PKIXCertPathValidatorResult	A										<section class="prog__container"><p> This class represents the successful result of the PKIX certification path validation algorithm. <p> Instances of <pre><code> PKIXCertPathValidatorResult </code></pre> are returned by the <pre><code> validate </code></pre> method of <pre><code> CertPathValidator </code></pre> objects implementing the PKIX algorithm. <p> All <pre><code> PKIXCertPathValidatorResult </code></pre> objects contain the valid policy tree and subject public key resulting from the validation algorithm, as well as a <pre><code> TrustAnchor </code></pre> describing the certification authority (CA) that served as a trust anchor for the certification path. <p> <b> Concurrent Access </b> <p> Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. </p><pre><code>public class PKIXCertPathValidatorResult\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/PKIXCertPathValidatorResult.html
PKIXParameters	A										<section class="prog__container"><p> Parameters used as input for the PKIX <pre><code> CertPathValidator </code></pre> algorithm. <p> A PKIX <pre><code> CertPathValidator </code></pre> uses these parameters to validate a <pre><code> CertPath </code></pre> according to the PKIX certification path validation algorithm. <p> To instantiate a <pre><code> PKIXParameters </code></pre> object, an application must specify one or more <i> most-trusted CAs </i> as defined by the PKIX certification path validation algorithm. The most-trusted CAs can be specified using one of two constructors. An application can call <pre><code> PKIXParameters(Set) </code></pre> , specifying a <pre><code> Set </code></pre> of <pre><code> TrustAnchor </code></pre> objects, each of which identify a most-trusted CA. Alternatively, an application can call <pre><code> PKIXParameters(KeyStore) </code></pre> , specifying a <pre><code> KeyStore </code></pre> instance containing trusted certificate entries, each of which will be considered as a most-trusted CA. <p> Once a <pre><code> PKIXParameters </code></pre> object has been created, other parameters can be specified (by calling <pre><code> setInitialPolicies </code></pre> or <pre><code> setDate </code></pre> , for instance) and then the <pre><code> PKIXParameters </code></pre> is passed along with the <pre><code> CertPath </code></pre> to be validated to <pre><code> CertPathValidator.validate </code></pre> . <p> Any parameter that is not set (or is set to <pre><code> null </code></pre> ) will be set to the default value for that parameter. The default value for the <pre><code> date </code></pre> parameter is <pre><code> null </code></pre> , which indicates the current time when the path is validated. The default for the remaining parameters is the least constrained. <p> <b> Concurrent Access </b> <p> Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. </p><pre><code>public class PKIXParameters\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/PKIXParameters.html
PKIXReason	A										<section class="prog__container"><p> The <pre><code> PKIXReason </code></pre> enumerates the potential PKIX-specific reasons that an X.509 certification path may be invalid according to the PKIX (RFC 3280) standard. These reasons are in addition to those of the <pre><code> CertPathValidatorException.BasicReason </code></pre> enumeration.</p><pre><code>public final enum PKIXReason\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/PKIXReason.html
PKIXRevocationChecker	A										<section class="prog__container"><p> A <pre><code> PKIXCertPathChecker </code></pre> for checking the revocation status of certificates with the PKIX algorithm. <p> A <pre><code> PKIXRevocationChecker </code></pre> checks the revocation status of certificates with the Online Certificate Status Protocol (OCSP) or Certificate Revocation Lists (CRLs). OCSP is described in RFC 2560 and is a network protocol for determining the status of a certificate. A CRL is a time-stamped list identifying revoked certificates, and RFC 5280 describes an algorithm for determining the revocation status of certificates using CRLs. <p> Each <pre><code> PKIXRevocationChecker </code></pre> must be able to check the revocation status of certificates with OCSP and CRLs. By default, OCSP is the preferred mechanism for checking revocation status, with CRLs as the fallback mechanism. However, this preference can be switched to CRLs with the <pre><code> PREFER_CRLS </code></pre> option. In addition, the fallback mechanism can be disabled with the <pre><code> NO_FALLBACK </code></pre> option. <p> A <pre><code> PKIXRevocationChecker </code></pre> is obtained by calling the <pre><code> getRevocationChecker </code></pre> method of a PKIX <pre><code> CertPathValidator </code></pre> . Additional parameters and options specific to revocation can be set (by calling the <pre><code> setOcspResponder </code></pre> method for instance). The <pre><code> PKIXRevocationChecker </code></pre> is added to a <pre><code> PKIXParameters </code></pre> object using the <pre><code> addCertPathChecker </code></pre> or <pre><code> setCertPathCheckers </code></pre> method, and then the <pre><code> PKIXParameters </code></pre> is passed along with the <pre><code> CertPath </code></pre> to be validated to the <pre><code> validate </code></pre> method of a PKIX <pre><code> CertPathValidator </code></pre> . When supplying a revocation checker in this manner, it will be used to check revocation irrespective of the setting of the <pre><code> RevocationEnabled </code></pre> flag. Similarly, a <pre><code> PKIXRevocationChecker </code></pre> may be added to a <pre><code> PKIXBuilderParameters </code></pre> object for use with a PKIX <pre><code> CertPathBuilder </code></pre> . <p> Note that when a <pre><code> PKIXRevocationChecker </code></pre> is added to <pre><code> PKIXParameters </code></pre> , it clones the <pre><code> PKIXRevocationChecker </code></pre> ; thus any subsequent modifications to the <pre><code> PKIXRevocationChecker </code></pre> have no effect. <p> Any parameter that is not set (or is set to <pre><code> null </code></pre> ) will be set to the default value for that parameter. <p> <b> Concurrent Access </b> <p> Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. </p><pre><code>public abstract class PKIXRevocationChecker\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/PKIXRevocationChecker.html
PKIXRevocationChecker.Option	A										<section class="prog__container"><p> Various revocation options that can be specified for the revocation checking mechanism.</p><pre><code>public static final enum PKIXRevocationChecker.Option\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/PKIXRevocationChecker.Option.html
PolicyNode	A										<section class="prog__container"><p> An immutable valid policy tree node as defined by the PKIX certification path validation algorithm. <p> One of the outputs of the PKIX certification path validation algorithm is a valid policy tree, which includes the policies that were determined to be valid, how this determination was reached, and any policy qualifiers encountered. This tree is of depth <i> n </i> , where <i> n </i> is the length of the certification path that has been validated. <p> Most applications will not need to examine the valid policy tree. They can achieve their policy processing goals by setting the policy-related parameters in <pre><code> PKIXParameters </code></pre> . However, the valid policy tree is available for more sophisticated applications, especially those that process policy qualifiers. <p> <pre><code> PKIXCertPathValidatorResult.getPolicyTree </code></pre> returns the root node of the valid policy tree. The tree can be traversed using the <pre><code> getChildren </code></pre> and <pre><code> getParent </code></pre> methods. Data about a particular node can be retrieved using other methods of <pre><code> PolicyNode </code></pre> . <p> <b> Concurrent Access </b> <p> All <pre><code> PolicyNode </code></pre> objects must be immutable and thread-safe. Multiple threads may concurrently invoke the methods defined in this class on a single <pre><code> PolicyNode </code></pre> object (or more than one) with no ill effects. This stipulation applies to all public fields and methods of this class and any added or overridden by subclasses. </p><pre><code>public interface PolicyNode\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/PolicyNode.html
PolicyQualifierInfo	A										<section class="prog__container"><p> An immutable policy qualifier represented by the ASN.1 PolicyQualifierInfo structure. <p> The ASN.1 definition is as follows: <p> <pre> PolicyQualifierInfo ::= SEQUENCE { policyQualifierId PolicyQualifierId, qualifier ANY DEFINED BY policyQualifierId } </pre> <p> A certificate policies extension, if present in an X.509 version 3 certificate, contains a sequence of one or more policy information terms, each of which consists of an object identifier (OID) and optional qualifiers. In an end-entity certificate, these policy information terms indicate the policy under which the certificate has been issued and the purposes for which the certificate may be used. In a CA certificate, these policy information terms limit the set of policies for certification paths which include this certificate. <p> A <pre><code> Set </code></pre> of <pre><code> PolicyQualifierInfo </code></pre> objects are returned by the <pre><code> PolicyNode.getPolicyQualifiers </code></pre> method. This allows applications with specific policy requirements to process and validate each policy qualifier. Applications that need to process policy qualifiers should explicitly set the <pre><code> policyQualifiersRejected </code></pre> flag to false (by calling the <pre><code> PKIXParameters.setPolicyQualifiersRejected </code></pre> method) before validating a certification path. <p> Note that the PKIX certification path validation algorithm specifies that any policy qualifier in a certificate policies extension that is marked critical must be processed and validated. Otherwise the certification path must be rejected. If the <pre><code> policyQualifiersRejected </code></pre> flag is set to false, it is up to the application to validate all policy qualifiers in this manner in order to be PKIX compliant. <p> <b> Concurrent Access </b> <p> All <pre><code> PolicyQualifierInfo </code></pre> objects must be immutable and thread-safe. That is, multiple threads may concurrently invoke the methods defined in this class on a single <pre><code> PolicyQualifierInfo </code></pre> object (or more than one) with no ill effects. Requiring <pre><code> PolicyQualifierInfo </code></pre> objects to be immutable and thread-safe allows them to be passed around to various pieces of code without worrying about coordinating access. </p><pre><code>public class PolicyQualifierInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/PolicyQualifierInfo.html
TrustAnchor	A										<section class="prog__container"><p> A trust anchor or most-trusted Certification Authority (CA). <p> This class represents a "most-trusted CA", which is used as a trust anchor for validating X.509 certification paths. A most-trusted CA includes the public key of the CA, the CA's name, and any constraints upon the set of paths which may be validated using this key. These parameters can be specified in the form of a trusted <pre><code> X509Certificate </code></pre> or as individual parameters. <p> <b> Concurrent Access </b> <p> <p> All <pre><code> TrustAnchor </code></pre> objects must be immutable and thread-safe. That is, multiple threads may concurrently invoke the methods defined in this class on a single <pre><code> TrustAnchor </code></pre> object (or more than one) with no ill effects. Requiring <pre><code> TrustAnchor </code></pre> objects to be immutable and thread-safe allows them to be passed around to various pieces of code without worrying about coordinating access. This stipulation applies to all public fields and methods of this class and any added or overridden by subclasses. </p><pre><code>public class TrustAnchor\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/TrustAnchor.html
X509Certificate	A										<section class="prog__container"><p> <p> Abstract class for X.509 certificates. This provides a standard way to access all the attributes of an X.509 certificate. <p> In June of 1996, the basic X.509 v3 format was completed by ISO/IEC and ANSI X9, which is described below in ASN.1: <pre> Certificate ::= SEQUENCE { tbsCertificate TBSCertificate, signatureAlgorithm AlgorithmIdentifier, signature BIT STRING } </pre> <p> These certificates are widely used to support authentication and other functionality in Internet security systems. Common applications include Privacy Enhanced Mail (PEM), Transport Layer Security (SSL), code signing for trusted software distribution, and Secure Electronic Transactions (SET). <p> These certificates are managed and vouched for by <em> Certificate Authorities </em> (CAs). CAs are services which create certificates by placing data in the X.509 standard format and then digitally signing that data. CAs act as trusted third parties, making introductions between principals who have no direct knowledge of each other. CA certificates are either signed by themselves, or by some other CA such as a "root" CA. <p> More information can be found in RFC 3280: Internet X.509 Public Key Infrastructure Certificate and CRL Profile . <p> The ASN.1 definition of <pre><code> tbsCertificate </code></pre> is: <pre> TBSCertificate ::= SEQUENCE { version [0] EXPLICIT Version DEFAULT v1, serialNumber CertificateSerialNumber, signature AlgorithmIdentifier, issuer Name, validity Validity, subject Name, subjectPublicKeyInfo SubjectPublicKeyInfo, issuerUniqueID [1] IMPLICIT UniqueIdentifier OPTIONAL, -- If present, version must be v2 or v3 subjectUniqueID [2] IMPLICIT UniqueIdentifier OPTIONAL, -- If present, version must be v2 or v3 extensions [3] EXPLICIT Extensions OPTIONAL -- If present, version must be v3 } </pre> <p> Certificates are instantiated using a certificate factory. The following is an example of how to instantiate an X.509 certificate: <pre> try (InputStream inStream = new FileInputStream("fileName-of-cert")) { CertificateFactory cf = CertificateFactory.getInstance("X.509"); X509Certificate cert = (X509Certificate)cf.generateCertificate(inStream); } </pre> </p><pre><code>public abstract class X509Certificate\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/X509Certificate.html
X509CertSelector	A										<section class="prog__container"><p> A <pre><code> CertSelector </code></pre> that selects <pre><code> X509Certificates </code></pre> that match all specified criteria. This class is particularly useful when selecting certificates from a <pre><code> CertStore </code></pre> to build a PKIX-compliant certification path. <p> When first constructed, an <pre><code> X509CertSelector </code></pre> has no criteria enabled and each of the <pre><code> get </code></pre> methods return a default value ( <pre><code> null </code></pre> , or <pre><code> -1 </code></pre> for the <pre><code> getBasicConstraints </code></pre> method). Therefore, the <pre><code> match </code></pre> method would return <pre><code> true </code></pre> for any <pre><code> X509Certificate </code></pre> . Typically, several criteria are enabled (by calling <pre><code> setIssuer </code></pre> or <pre><code> setKeyUsage </code></pre> , for instance) and then the <pre><code> X509CertSelector </code></pre> is passed to <pre><code> CertStore.getCertificates </code></pre> or some similar method. <p> Several criteria can be enabled (by calling <pre><code> setIssuer </code></pre> and <pre><code> setSerialNumber </code></pre> , for example) such that the <pre><code> match </code></pre> method usually uniquely matches a single <pre><code> X509Certificate </code></pre> . We say usually, since it is possible for two issuing CAs to have the same distinguished name and each issue a certificate with the same serial number. Other unique combinations include the issuer, subject, subjectKeyIdentifier and/or the subjectPublicKey criteria. <p> Please refer to RFC 3280: Internet X.509 Public Key Infrastructure Certificate and CRL Profile for definitions of the X.509 certificate extensions mentioned below. <p> <b> Concurrent Access </b> <p> Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. </p><pre><code>public class X509CertSelector\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/X509CertSelector.html
X509CRL	A										<section class="prog__container"><p> <p> Abstract class for an X.509 Certificate Revocation List (CRL). A CRL is a time-stamped list identifying revoked certificates. It is signed by a Certificate Authority (CA) and made freely available in a public repository. <p> Each revoked certificate is identified in a CRL by its certificate serial number. When a certificate-using system uses a certificate (e.g., for verifying a remote user's digital signature), that system not only checks the certificate signature and validity but also acquires a suitably- recent CRL and checks that the certificate serial number is not on that CRL. The meaning of "suitably-recent" may vary with local policy, but it usually means the most recently-issued CRL. A CA issues a new CRL on a regular periodic basis (e.g., hourly, daily, or weekly). Entries are added to CRLs as revocations occur, and an entry may be removed when the certificate expiration date is reached. <p> The X.509 v2 CRL format is described below in ASN.1: <pre> CertificateList ::= SEQUENCE { tbsCertList TBSCertList, signatureAlgorithm AlgorithmIdentifier, signature BIT STRING } </pre> <p> More information can be found in RFC 3280: Internet X.509 Public Key Infrastructure Certificate and CRL Profile . <p> The ASN.1 definition of <pre><code> tbsCertList </code></pre> is: <pre> TBSCertList ::= SEQUENCE { version Version OPTIONAL, -- if present, must be v2 signature AlgorithmIdentifier, issuer Name, thisUpdate ChoiceOfTime, nextUpdate ChoiceOfTime OPTIONAL, revokedCertificates SEQUENCE OF SEQUENCE { userCertificate CertificateSerialNumber, revocationDate ChoiceOfTime, crlEntryExtensions Extensions OPTIONAL -- if present, must be v2 } OPTIONAL, crlExtensions [0] EXPLICIT Extensions OPTIONAL -- if present, must be v2 } </pre> <p> CRLs are instantiated using a certificate factory. The following is an example of how to instantiate an X.509 CRL: <pre><pre><code> InputStream inStream = null; try { inStream = new FileInputStream("fileName-of-crl"); CertificateFactory cf = CertificateFactory.getInstance("X.509"); X509CRL crl = (X509CRL)cf.generateCRL(inStream); } finally { if (inStream != null) { inStream.close(); } } </code></pre></pre> </p><pre><code>public abstract class X509CRL\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/X509CRL.html
X509CRLEntry	A										<section class="prog__container"><p> <p> Abstract class for a revoked certificate in a CRL (Certificate Revocation List). The ASN.1 definition for <em> revokedCertificates </em> is: <pre> revokedCertificates SEQUENCE OF SEQUENCE { userCertificate CertificateSerialNumber, revocationDate ChoiceOfTime, crlEntryExtensions Extensions OPTIONAL -- if present, must be v2 } OPTIONAL<p> CertificateSerialNumber ::= INTEGER<p> Extensions ::= SEQUENCE SIZE (1..MAX) OF Extension<p> Extension ::= SEQUENCE { extnId OBJECT IDENTIFIER, critical BOOLEAN DEFAULT FALSE, extnValue OCTET STRING -- contains a DER encoding of a value -- of the type registered for use with -- the extnId object identifier value } </p><pre><code>public abstract class X509CRLEntry\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/X509CRLEntry.html
X509CRLSelector	A										<section class="prog__container"><p> A <pre><code> CRLSelector </code></pre> that selects <pre><code> X509CRLs </code></pre> that match all specified criteria. This class is particularly useful when selecting CRLs from a <pre><code> CertStore </code></pre> to check revocation status of a particular certificate. <p> When first constructed, an <pre><code> X509CRLSelector </code></pre> has no criteria enabled and each of the <pre><code> get </code></pre> methods return a default value ( <pre><code> null </code></pre> ). Therefore, the <pre><code> match </code></pre> method would return <pre><code> true </code></pre> for any <pre><code> X509CRL </code></pre> . Typically, several criteria are enabled (by calling <pre><code> setIssuers </code></pre> or <pre><code> setDateAndTime </code></pre> , for instance) and then the <pre><code> X509CRLSelector </code></pre> is passed to <pre><code> CertStore.getCRLs </code></pre> or some similar method. <p> Please refer to RFC 3280: Internet X.509 Public Key Infrastructure Certificate and CRL Profile for definitions of the X.509 CRL fields and extensions mentioned below. <p> <b> Concurrent Access </b> <p> Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. </p><pre><code>public class X509CRLSelector\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/cert/X509CRLSelector.html
X509Extension	A										<section class="prog__container"><p> Interface for an X.509 extension. <p> The extensions defined for X.509 v3 <pre><code> Certificates </code></pre> and v2 <pre><code> CRLs </code></pre> (Certificate Revocation Lists) provide methods for associating additional attributes with users or public keys, for managing the certification hierarchy, and for managing CRL distribution. The X.509 extensions format also allows communities to define private extensions to carry information unique to those communities. <p> Each extension in a certificate/CRL may be designated as critical or non-critical. A certificate/CRL-using system (an application validating a certificate/CRL) must reject the certificate/CRL if it encounters a critical extension it does not recognize. A non-critical extension may be ignored if it is not recognized. <p> The ASN.1 definition for this is: <pre> Extensions ::= SEQUENCE SIZE (1..MAX) OF Extension Extension ::= SEQUENCE { extnId OBJECT IDENTIFIER, critical BOOLEAN DEFAULT FALSE, extnValue OCTET STRING -- contains a DER encoding of a value -- of the type registered for use with -- the extnId object identifier value } </pre> Since not all extensions are known, the <pre><code> getExtensionValue </code></pre> method returns the DER-encoded OCTET STRING of the extension value (i.e., the <pre><code> extnValue </code></pre> ). This can then be handled by a <em> Class </em> that understands the extension. </p><pre><code>public interface X509Extension\n</code></pre></section>	https://developer.android.com/reference/java/security/cert/X509Extension.html
DSAKey	A										<section class="prog__container"><p> The interface to a DSA public or private key. DSA (Digital Signature Algorithm) is defined in NIST's FIPS-186.</p><pre><code>public interface DSAKey\n</code></pre></section>	https://developer.android.com/reference/java/security/interfaces/DSAKey.html
DSAKeyPairGenerator	A										<section class="prog__container"><p> An interface to an object capable of generating DSA key pairs. <p> The <pre><code> initialize </code></pre> methods may each be called any number of times. If no <pre><code> initialize </code></pre> method is called on a DSAKeyPairGenerator, the default is to generate 1024-bit keys, using precomputed p, q and g parameters and an instance of SecureRandom as the random bit source. <p> Users wishing to indicate DSA-specific parameters, and to generate a key pair suitable for use with the DSA algorithm typically <ol> <li> Get a key pair generator for the DSA algorithm by calling the KeyPairGenerator <pre><code> getInstance </code></pre> method with "DSA" as its argument. <p> <li> Initialize the generator by casting the result to a DSAKeyPairGenerator and calling one of the <pre><code> initialize </code></pre> methods from this DSAKeyPairGenerator interface. <p> <li> Generate a key pair by calling the <pre><code> generateKeyPair </code></pre> method from the KeyPairGenerator class. </li> </p><pre><code>public interface DSAKeyPairGenerator\n</code></pre></section>	https://developer.android.com/reference/java/security/interfaces/DSAKeyPairGenerator.html
DSAParams	A										<section class="prog__container"><p> Interface to a DSA-specific set of key parameters, which defines a DSA <em> key family </em> . DSA (Digital Signature Algorithm) is defined in NIST's FIPS-186.</p><pre><code>public interface DSAParams\n</code></pre></section>	https://developer.android.com/reference/java/security/interfaces/DSAParams.html
DSAPrivateKey	A										<section class="prog__container"><p> The standard interface to a DSA private key. DSA (Digital Signature Algorithm) is defined in NIST's FIPS-186.</p><pre><code>public interface DSAPrivateKey\nimplements DSAKey, PrivateKey</code></pre></section>	https://developer.android.com/reference/java/security/interfaces/DSAPrivateKey.html
DSAPublicKey	A										<section class="prog__container"><p> The interface to a DSA public key. DSA (Digital Signature Algorithm) is defined in NIST's FIPS-186.</p><pre><code>public interface DSAPublicKey\nimplements DSAKey, PublicKey</code></pre></section>	https://developer.android.com/reference/java/security/interfaces/DSAPublicKey.html
ECKey	A										<section class="prog__container"><p> The interface to an elliptic curve (EC) key.</p><pre><code>public interface ECKey\n</code></pre></section>	https://developer.android.com/reference/java/security/interfaces/ECKey.html
ECPrivateKey	A										<section class="prog__container"><p> The interface to an elliptic curve (EC) private key.</p><pre><code>public interface ECPrivateKey\nimplements PrivateKey, ECKey</code></pre></section>	https://developer.android.com/reference/java/security/interfaces/ECPrivateKey.html
ECPublicKey	A										<section class="prog__container"><p> The interface to an elliptic curve (EC) public key.</p><pre><code>public interface ECPublicKey\nimplements PublicKey, ECKey</code></pre></section>	https://developer.android.com/reference/java/security/interfaces/ECPublicKey.html
java.security.interfaces	A										<section class="prog__container">Note that these interfaces are intended only for keyimplementations whose key material is accessible and available. These interfaces are not intended for key implementations whose key material resides in inaccessible, protected storage (such as in a hardware device).</section>	https://developer.android.com/reference/java/security/interfaces/package-summary.html
RSAKey	A										<section class="prog__container"><p> The interface to an RSA public or private key.</p><pre><code>public interface RSAKey\n</code></pre></section>	https://developer.android.com/reference/java/security/interfaces/RSAKey.html
RSAMultiPrimePrivateCrtKey	A										<section class="prog__container"><p> The interface to an RSA multi-prime private key, as defined in the PKCS#1 v2.1, using the <i> Chinese Remainder Theorem </i> (CRT) information values.</p><pre><code>public interface RSAMultiPrimePrivateCrtKey\nimplements RSAPrivateKey</code></pre></section>	https://developer.android.com/reference/java/security/interfaces/RSAMultiPrimePrivateCrtKey.html
RSAPrivateCrtKey	A										<section class="prog__container"><p> The interface to an RSA private key, as defined in the PKCS#1 standard, using the <i> Chinese Remainder Theorem </i> (CRT) information values.</p><pre><code>public interface RSAPrivateCrtKey\nimplements RSAPrivateKey</code></pre></section>	https://developer.android.com/reference/java/security/interfaces/RSAPrivateCrtKey.html
RSAPrivateKey	A										<section class="prog__container"><p> The interface to an RSA private key.</p><pre><code>public interface RSAPrivateKey\nimplements PrivateKey, RSAKey</code></pre></section>	https://developer.android.com/reference/java/security/interfaces/RSAPrivateKey.html
RSAPublicKey	A										<section class="prog__container"><p> The interface to an RSA public key.</p><pre><code>public interface RSAPublicKey\nimplements PublicKey, RSAKey</code></pre></section>	https://developer.android.com/reference/java/security/interfaces/RSAPublicKey.html
AlgorithmParameterSpec	A										<section class="prog__container"><p> A (transparent) specification of cryptographic parameters. <p> This interface contains no methods or constants. Its only purpose is to group (and provide type safety for) all parameter specifications. All parameter specifications must implement this interface. </p><pre><code>public interface AlgorithmParameterSpec\n</code></pre></section>	https://developer.android.com/reference/java/security/spec/AlgorithmParameterSpec.html
DSAParameterSpec	A										<section class="prog__container"><p> This class specifies the set of parameters used with the DSA algorithm.</p><pre><code>public class DSAParameterSpec\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/spec/DSAParameterSpec.html
DSAPrivateKeySpec	A										<section class="prog__container"><p> This class specifies a DSA private key with its associated parameters.</p><pre><code>public class DSAPrivateKeySpec\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/spec/DSAPrivateKeySpec.html
DSAPublicKeySpec	A										<section class="prog__container"><p> This class specifies a DSA public key with its associated parameters.</p><pre><code>public class DSAPublicKeySpec\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/spec/DSAPublicKeySpec.html
ECField	A										<section class="prog__container"><p> This interface represents an elliptic curve (EC) finite field. All specialized EC fields must implements this interface.</p><pre><code>public interface ECField\n</code></pre></section>	https://developer.android.com/reference/java/security/spec/ECField.html
ECFieldF2m	A										<section class="prog__container"><p> This immutable class defines an elliptic curve (EC) characteristic 2 finite field.</p><pre><code>public class ECFieldF2m\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/spec/ECFieldF2m.html
ECFieldFp	A										<section class="prog__container"><p> This immutable class defines an elliptic curve (EC) prime finite field.</p><pre><code>public class ECFieldFp\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/spec/ECFieldFp.html
ECGenParameterSpec	A										<section class="prog__container"><p> This immutable class specifies the set of parameters used for generating elliptic curve (EC) domain parameters.</p><pre><code>public class ECGenParameterSpec\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/spec/ECGenParameterSpec.html
ECParameterSpec	A										<section class="prog__container"><p> This immutable class specifies the set of domain parameters used with elliptic curve cryptography (ECC).</p><pre><code>public class ECParameterSpec\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/spec/ECParameterSpec.html
ECPoint	A										<section class="prog__container"><p> This immutable class represents a point on an elliptic curve (EC) in affine coordinates. Other coordinate systems can extend this class to represent this point in other coordinates.</p><pre><code>public class ECPoint\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/spec/ECPoint.html
ECPrivateKeySpec	A										<section class="prog__container"><p> This immutable class specifies an elliptic curve private key with its associated parameters.</p><pre><code>public class ECPrivateKeySpec\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/spec/ECPrivateKeySpec.html
ECPublicKeySpec	A										<section class="prog__container"><p> This immutable class specifies an elliptic curve public key with its associated parameters.</p><pre><code>public class ECPublicKeySpec\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/spec/ECPublicKeySpec.html
EllipticCurve	A										<section class="prog__container"><p> This immutable class holds the necessary values needed to represent an elliptic curve.</p><pre><code>public class EllipticCurve\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/spec/EllipticCurve.html
EncodedKeySpec	A										<section class="prog__container"><p> This class represents a public or private key in encoded format.</p><pre><code>public abstract class EncodedKeySpec\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/spec/EncodedKeySpec.html
InvalidKeySpecException	A										<section class="prog__container"><p> This is the exception for invalid key specifications.</p><pre><code>public class InvalidKeySpecException\n</code></pre></section>	https://developer.android.com/reference/java/security/spec/InvalidKeySpecException.html
InvalidParameterSpecException	A										<section class="prog__container"><p> This is the exception for invalid parameter specifications.</p><pre><code>public class InvalidParameterSpecException\n</code></pre></section>	https://developer.android.com/reference/java/security/spec/InvalidParameterSpecException.html
KeySpec	A										<section class="prog__container"><p> A (transparent) specification of the key material that constitutes a cryptographic key. <p> If the key is stored on a hardware device, its specification may contain information that helps identify the key on the device. <p> A key may be specified in an algorithm-specific way, or in an algorithm-independent encoding format (such as ASN.1). For example, a DSA private key may be specified by its components <pre><code> x </code></pre> , <pre><code> p </code></pre> , <pre><code> q </code></pre> , and <pre><code> g </code></pre> (see <pre><code> DSAPrivateKeySpec </code></pre> ), or it may be specified using its DER encoding (see <pre><code> PKCS8EncodedKeySpec </code></pre> ). <p> This interface contains no methods or constants. Its only purpose is to group (and provide type safety for) all key specifications. All key specifications must implement this interface. </p><pre><code>public interface KeySpec\n</code></pre></section>	https://developer.android.com/reference/java/security/spec/KeySpec.html
MGF1ParameterSpec	A										<section class="prog__container"><p> This class specifies the set of parameters used with mask generation function MGF1 in OAEP Padding and RSA-PSS signature scheme, as defined in the PKCS #1 v2.1 standard. <p> Its ASN.1 definition in PKCS#1 standard is described below: <pre> MGF1Parameters ::= OAEP-PSSDigestAlgorthms </pre> where <pre> OAEP-PSSDigestAlgorithms ALGORITHM-IDENTIFIER ::= { { OID id-sha1 PARAMETERS NULL }| { OID id-sha256 PARAMETERS NULL }| { OID id-sha384 PARAMETERS NULL }| { OID id-sha512 PARAMETERS NULL }, ... -- Allows for future expansion -- } </pre> </p><pre><code>public class MGF1ParameterSpec\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/spec/MGF1ParameterSpec.html
java.security.spec	A										<section class="prog__container">A key specification is a transparent representation of the key materialthat constitutes a key. A key may be specified in an algorithm-specificway, or in an algorithm-independent encoding format (such as ASN.1).This package contains key specifications for DSA public and private keys,RSA public and private keys, PKCS #8 private keys in DER-encoded format,and X.509 public and private keys in DER-encoded format.</section>	https://developer.android.com/reference/java/security/spec/package-summary.html
PKCS8EncodedKeySpec	A										<section class="prog__container"><p> This class represents the ASN.1 encoding of a private key, encoded according to the ASN.1 type <pre><code> PrivateKeyInfo </code></pre> . The <pre><code> PrivateKeyInfo </code></pre> syntax is defined in the PKCS#8 standard as follows: <pre> PrivateKeyInfo ::= SEQUENCE { version Version, privateKeyAlgorithm PrivateKeyAlgorithmIdentifier, privateKey PrivateKey, attributes [0] IMPLICIT Attributes OPTIONAL } Version ::= INTEGER PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier PrivateKey ::= OCTET STRING Attributes ::= SET OF Attribute </pre></p><pre><code>public class PKCS8EncodedKeySpec\n</code></pre></section>	https://developer.android.com/reference/java/security/spec/PKCS8EncodedKeySpec.html
PSSParameterSpec	A										<section class="prog__container"><p> This class specifies a parameter spec for RSA-PSS signature scheme, as defined in the PKCS#1 v2.1 standard. <p> Its ASN.1 definition in PKCS#1 standard is described below: <pre> RSASSA-PSS-params ::= SEQUENCE { hashAlgorithm [0] OAEP-PSSDigestAlgorithms DEFAULT sha1, maskGenAlgorithm [1] PKCS1MGFAlgorithms DEFAULT mgf1SHA1, saltLength [2] INTEGER DEFAULT 20, trailerField [3] INTEGER DEFAULT 1 } </pre> where <pre> OAEP-PSSDigestAlgorithms ALGORITHM-IDENTIFIER ::= { { OID id-sha1 PARAMETERS NULL }| { OID id-sha256 PARAMETERS NULL }| { OID id-sha384 PARAMETERS NULL }| { OID id-sha512 PARAMETERS NULL }, ... -- Allows for future expansion -- } PKCS1MGFAlgorithms ALGORITHM-IDENTIFIER ::= { { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms }, ... -- Allows for future expansion -- } </pre> <p> Note: the PSSParameterSpec.DEFAULT uses the following: message digest -- "SHA-1" mask generation function (mgf) -- "MGF1" parameters for mgf -- MGF1ParameterSpec.SHA1 SaltLength -- 20 TrailerField -- 1 </p><pre><code>public class PSSParameterSpec\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/spec/PSSParameterSpec.html
RSAKeyGenParameterSpec	A										<section class="prog__container"><p> This class specifies the set of parameters used to generate an RSA key pair.</p><pre><code>public class RSAKeyGenParameterSpec\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/spec/RSAKeyGenParameterSpec.html
RSAMultiPrimePrivateCrtKeySpec	A										<section class="prog__container"><p> This class specifies an RSA multi-prime private key, as defined in the PKCS#1 v2.1, using the Chinese Remainder Theorem (CRT) information values for efficiency.</p><pre><code>public class RSAMultiPrimePrivateCrtKeySpec\n</code></pre></section>	https://developer.android.com/reference/java/security/spec/RSAMultiPrimePrivateCrtKeySpec.html
RSAOtherPrimeInfo	A										<section class="prog__container"><p> This class represents the triplet (prime, exponent, and coefficient) inside RSA's OtherPrimeInfo structure, as defined in the PKCS#1 v2.1. The ASN.1 syntax of RSA's OtherPrimeInfo is as follows: <pre> OtherPrimeInfo ::= SEQUENCE { prime INTEGER, exponent INTEGER, coefficient INTEGER } </pre></p><pre><code>public class RSAOtherPrimeInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/spec/RSAOtherPrimeInfo.html
RSAPrivateCrtKeySpec	A										<section class="prog__container"><p> This class specifies an RSA private key, as defined in the PKCS#1 standard, using the Chinese Remainder Theorem (CRT) information values for efficiency.</p><pre><code>public class RSAPrivateCrtKeySpec\n</code></pre></section>	https://developer.android.com/reference/java/security/spec/RSAPrivateCrtKeySpec.html
RSAPrivateKeySpec	A										<section class="prog__container"><p> This class specifies an RSA private key.</p><pre><code>public class RSAPrivateKeySpec\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/spec/RSAPrivateKeySpec.html
RSAPublicKeySpec	A										<section class="prog__container"><p> This class specifies an RSA public key.</p><pre><code>public class RSAPublicKeySpec\nextends Object</code></pre></section>	https://developer.android.com/reference/java/security/spec/RSAPublicKeySpec.html
X509EncodedKeySpec	A										<section class="prog__container"><p> This class represents the ASN.1 encoding of a public key, encoded according to the ASN.1 type <pre><code> SubjectPublicKeyInfo </code></pre> . The <pre><code> SubjectPublicKeyInfo </code></pre> syntax is defined in the X.509 standard as follows: <pre> SubjectPublicKeyInfo ::= SEQUENCE { algorithm AlgorithmIdentifier, subjectPublicKey BIT STRING } </pre></p><pre><code>public class X509EncodedKeySpec\n</code></pre></section>	https://developer.android.com/reference/java/security/spec/X509EncodedKeySpec.html
Array	A										<section class="prog__container"><p> The mapping in the Java programming language for the SQL type <pre><code> ARRAY </code></pre> . By default, an <pre><code> Array </code></pre> value is a transaction-duration reference to an SQL <pre><code> ARRAY </code></pre> value. By default, an <pre><code> Array </code></pre> object is implemented using an SQL LOCATOR(array) internally, which means that an <pre><code> Array </code></pre> object contains a logical pointer to the data in the SQL <pre><code> ARRAY </code></pre> value rather than containing the <pre><code> ARRAY </code></pre> value's data. <p> The <pre><code> Array </code></pre> interface provides methods for bringing an SQL <pre><code> ARRAY </code></pre> value's data to the client as either an array or a <pre><code> ResultSet </code></pre> object. If the elements of the SQL <pre><code> ARRAY </code></pre> are a UDT, they may be custom mapped. To create a custom mapping, a programmer must do two things: <ul> <li> create a class that implements the <pre><code> SQLData </code></pre> interface for the UDT to be custom mapped. <li> make an entry in a type map that contains <ul> <li> the fully-qualified SQL type name of the UDT <li> the <pre><code> Class </code></pre> object for the class implementing <pre><code> SQLData </code></pre> </li> </li> </ul> </li> </li> </ul> <p> When a type map with an entry for the base type is supplied to the methods <pre><code> getArray </code></pre> and <pre><code> getResultSet </code></pre> , the mapping it contains will be used to map the elements of the <pre><code> ARRAY </code></pre> value. If no type map is supplied, which would typically be the case, the connection's type map is used by default. If the connection's type map or a type map supplied to a method has no entry for the base type, the elements are mapped according to the standard mapping. <p> All methods on the <pre><code> Array </code></pre> interface must be fully implemented if the JDBC driver supports the data type. </p><pre><code>public interface Array\n</code></pre></section>	https://developer.android.com/reference/java/sql/Array.html
BatchUpdateException	A										<section class="prog__container"><pre><code>public class BatchUpdateException\n</code></pre></section>	https://developer.android.com/reference/java/sql/BatchUpdateException.html
Blob	A										<section class="prog__container"><p> The representation (mapping) in the Java <sup> <font size="-2"> TM </font> </sup> programming language of an SQL <pre><code> BLOB </code></pre> value. An SQL <pre><code> BLOB </code></pre> is a built-in type that stores a Binary Large Object as a column value in a row of a database table. By default drivers implement <pre><code> Blob </code></pre> using an SQL <pre><code> locator(BLOB) </code></pre> , which means that a <pre><code> Blob </code></pre> object contains a logical pointer to the SQL <pre><code> BLOB </code></pre> data rather than the data itself. A <pre><code> Blob </code></pre> object is valid for the duration of the transaction in which is was created. <p> Methods in the interfaces <pre><code> ResultSet </code></pre> , <pre><code> CallableStatement </code></pre> , and <pre><code> PreparedStatement </code></pre> , such as <pre><code> getBlob </code></pre> and <pre><code> setBlob </code></pre> allow a programmer to access an SQL <pre><code> BLOB </code></pre> value. The <pre><code> Blob </code></pre> interface provides methods for getting the length of an SQL <pre><code> BLOB </code></pre> (Binary Large Object) value, for materializing a <pre><code> BLOB </code></pre> value on the client, and for determining the position of a pattern of bytes within a <pre><code> BLOB </code></pre> value. In addition, this interface has methods for updating a <pre><code> BLOB </code></pre> value. <p> All methods on the <pre><code> Blob </code></pre> interface must be fully implemented if the JDBC driver supports the data type. </p><pre><code>public interface Blob\n</code></pre></section>	https://developer.android.com/reference/java/sql/Blob.html
CallableStatement	A										<section class="prog__container"><pre><code>public interface CallableStatement\nimplements PreparedStatement</code></pre></section>	https://developer.android.com/reference/java/sql/CallableStatement.html
ClientInfoStatus	A										<section class="prog__container"><p> Enumeration for status of the reason that a property could not be set via a call to <pre><code> Connection.setClientInfo </code></pre></p><pre><code>public final enum ClientInfoStatus\n</code></pre></section>	https://developer.android.com/reference/java/sql/ClientInfoStatus.html
Clob	A										<section class="prog__container"><p> The mapping in the Java <sup> <font size="-2"> TM </font> </sup> programming language for the SQL <pre><code> CLOB </code></pre> type. An SQL <pre><code> CLOB </code></pre> is a built-in type that stores a Character Large Object as a column value in a row of a database table. By default drivers implement a <pre><code> Clob </code></pre> object using an SQL <pre><code> locator(CLOB) </code></pre> , which means that a <pre><code> Clob </code></pre> object contains a logical pointer to the SQL <pre><code> CLOB </code></pre> data rather than the data itself. A <pre><code> Clob </code></pre> object is valid for the duration of the transaction in which it was created. <p> The <pre><code> Clob </code></pre> interface provides methods for getting the length of an SQL <pre><code> CLOB </code></pre> (Character Large Object) value, for materializing a <pre><code> CLOB </code></pre> value on the client, and for searching for a substring or <pre><code> CLOB </code></pre> object within a <pre><code> CLOB </code></pre> value. Methods in the interfaces <pre><code> ResultSet </code></pre> , <pre><code> CallableStatement </code></pre> , and <pre><code> PreparedStatement </code></pre> , such as <pre><code> getClob </code></pre> and <pre><code> setClob </code></pre> allow a programmer to access an SQL <pre><code> CLOB </code></pre> value. In addition, this interface has methods for updating a <pre><code> CLOB </code></pre> value. <p> All methods on the <pre><code> Clob </code></pre> interface must be fully implemented if the JDBC driver supports the data type. </p><pre><code>public interface Clob\n</code></pre></section>	https://developer.android.com/reference/java/sql/Clob.html
Connection	A										<section class="prog__container"><p> <p> A connection (session) with a specific database. SQL statements are executed and results are returned within the context of a connection. <p> A <pre><code> Connection </code></pre> object's database is able to provide information describing its tables, its supported SQL grammar, its stored procedures, the capabilities of this connection, and so on. This information is obtained with the <pre><code> getMetaData </code></pre> method. <p> <b> Note: </b> When configuring a <pre><code> Connection </code></pre> , JDBC applications should use the appropriate <pre><code> Connection </code></pre> method such as <pre><code> setAutoCommit </code></pre> or <pre><code> setTransactionIsolation </code></pre> . Applications should not invoke SQL commands directly to change the connection's configuration when there is a JDBC method available. By default a <pre><code> Connection </code></pre> object is in auto-commit mode, which means that it automatically commits changes after executing each statement. If auto-commit mode has been disabled, the method <pre><code> commit </code></pre> must be called explicitly in order to commit changes; otherwise, database changes will not be saved. <p> A new <pre><code> Connection </code></pre> object created using the JDBC 2.1 core API has an initially empty type map associated with it. A user may enter a custom mapping for a UDT in this type map. When a UDT is retrieved from a data source with the method <pre><code> ResultSet.getObject </code></pre> , the <pre><code> getObject </code></pre> method will check the connection's type map to see if there is an entry for that UDT. If so, the <pre><code> getObject </code></pre> method will map the UDT to the class indicated. If there is no entry, the UDT will be mapped using the standard mapping. <p> A user may create a new type map, which is a <pre><code> java.util.Map </code></pre> object, make an entry in it, and pass it to the <pre><code> java.sql </code></pre> methods that can perform custom mapping. In this case, the method will use the given type map instead of the one associated with the connection. <p> For example, the following code fragment specifies that the SQL type <pre><code> ATHLETES </code></pre> will be mapped to the class <pre><code> Athletes </code></pre> in the Java programming language. The code fragment retrieves the type map for the <pre><code> Connection </code></pre> object <pre><code> con </code></pre> , inserts the entry into it, and then sets the type map with the new entry as the connection's type map. <pre> java.util.Map map = con.getTypeMap(); map.put("mySchemaName.ATHLETES", Class.forName("Athletes")); con.setTypeMap(map); </pre> </p><pre><code>public interface Connection\nimplements Wrapper, AutoCloseable</code></pre></section>	https://developer.android.com/reference/java/sql/Connection.html
DatabaseMetaData	A										<section class="prog__container"><pre><code>public interface DatabaseMetaData\nimplements Wrapper</code></pre></section>	https://developer.android.com/reference/java/sql/DatabaseMetaData.html
DataTruncation	A										<section class="prog__container"><p> An exception thrown as a <pre><code> DataTruncation </code></pre> exception (on writes) or reported as a <pre><code> DataTruncation </code></pre> warning (on reads) when a data values is unexpectedly truncated for reasons other than its having execeeded <pre><code> MaxFieldSize </code></pre> . <p> The SQLstate for a <pre><code> DataTruncation </code></pre> during read is <pre><code> 01004 </code></pre> . <p> The SQLstate for a <pre><code> DataTruncation </code></pre> during write is <pre><code> 22001 </code></pre> . </p><pre><code>public class DataTruncation\n</code></pre></section>	https://developer.android.com/reference/java/sql/DataTruncation.html
Date	A										<section class="prog__container"><p> <p> A thin wrapper around a millisecond value that allows JDBC to identify this as an SQL <pre><code> DATE </code></pre> value. A milliseconds value represents the number of milliseconds that have passed since January 1, 1970 00:00:00.000 GMT. <p> To conform with the definition of SQL <pre><code> DATE </code></pre> , the millisecond values wrapped by a <pre><code> java.sql.Date </code></pre> instance must be 'normalized' by setting the hours, minutes, seconds, and milliseconds to zero in the particular time zone with which the instance is associated. </p><pre><code>public class Date\n</code></pre></section>	https://developer.android.com/reference/java/sql/Date.html
Driver	A										<section class="prog__container"><p> The interface that every driver class must implement. <p> The Java SQL framework allows for multiple database drivers. <p> Each driver should supply a class that implements the Driver interface. <p> The DriverManager will try to load as many drivers as it can find and then for any given connection request, it will ask each driver in turn to try to connect to the target URL. <p> It is strongly recommended that each Driver class should be small and standalone so that the Driver class can be loaded and queried without bringing in vast quantities of supporting code. <p> When a Driver class is loaded, it should create an instance of itself and register it with the DriverManager. This means that a user can load and register a driver by calling <pre> <pre><code>Class.forName("foo.bah.Driver")</code></pre> </pre> </p><pre><code>public interface Driver\n</code></pre></section>	https://developer.android.com/reference/java/sql/Driver.html
DriverManager	A										<section class="prog__container"><p> <p> The basic service for managing a set of JDBC drivers. <br> <b> NOTE: </b> The <pre><code> DataSource </code></pre> interface, new in the JDBC 2.0 API, provides another way to connect to a data source. The use of a <pre><code> DataSource </code></pre> object is the preferred means of connecting to a data source. <p> As part of its initialization, the <pre><code> DriverManager </code></pre> class will attempt to load the driver classes referenced in the "jdbc.drivers" system property. This allows a user to customize the JDBC Drivers used by their applications. For example in your ~/.hotjava/properties file you might specify: <pre> <pre><code>jdbc.drivers=foo.bah.Driver:wombat.sql.Driver:bad.taste.ourDriver</code></pre> </pre> <p> The <pre><code> DriverManager </code></pre> methods <pre><code> getConnection </code></pre> and <pre><code> getDrivers </code></pre> have been enhanced to support the Java Standard Edition Service Provider mechanism. JDBC 4.0 Drivers must include the file <pre><code> META-INF/services/java.sql.Driver </code></pre> . This file contains the name of the JDBC drivers implementation of <pre><code> java.sql.Driver </code></pre> . For example, to load the <pre><code> my.sql.Driver </code></pre> class, the <pre><code> META-INF/services/java.sql.Driver </code></pre> file would contain the entry: <pre> <pre><code>my.sql.Driver</code></pre> </pre> <p> Applications no longer need to explictly load JDBC drivers using <pre><code> Class.forName() </code></pre> . Existing programs which currently load JDBC drivers using <pre><code> Class.forName() </code></pre> will continue to work without modification. <p> When the method <pre><code> getConnection </code></pre> is called, the <pre><code> DriverManager </code></pre> will attempt to locate a suitable driver from amongst those loaded at initialization and those loaded explicitly using the same classloader as the current applet or application. <p> Starting with the Java 2 SDK, Standard Edition, version 1.3, a logging stream can be set only if the proper permission has been granted. Normally this will be done with the tool PolicyTool, which can be used to grant <pre><code> permission java.sql.SQLPermission "setLog" </code></pre> . </p><pre><code>public class DriverManager\nextends Object</code></pre></section>	https://developer.android.com/reference/java/sql/DriverManager.html
DriverPropertyInfo	A										<section class="prog__container"><p> <p> Driver properties for making a connection. The <pre><code> DriverPropertyInfo </code></pre> class is of interest only to advanced programmers who need to interact with a Driver via the method <pre><code> getDriverProperties </code></pre> to discover and supply properties for connections. </p><pre><code>public class DriverPropertyInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/java/sql/DriverPropertyInfo.html
NClob	A										<section class="prog__container"><p> The mapping in the Java <sup> <font size="-2"> TM </font> </sup> programming language for the SQL <pre><code> NCLOB </code></pre> type. An SQL <pre><code> NCLOB </code></pre> is a built-in type that stores a Character Large Object using the National Character Set as a column value in a row of a database table. <p> The <pre><code> NClob </code></pre> interface extends the <pre><code> Clob </code></pre> interface which provides provides methods for getting the length of an SQL <pre><code> NCLOB </code></pre> value, for materializing a <pre><code> NCLOB </code></pre> value on the client, and for searching for a substring or <pre><code> NCLOB </code></pre> object within a <pre><code> NCLOB </code></pre> value. A <pre><code> NClob </code></pre> object, just like a <pre><code> Clob </code></pre> object, is valid for the duration of the transaction in which it was created. Methods in the interfaces <pre><code> ResultSet </code></pre> , <pre><code> CallableStatement </code></pre> , and <pre><code> PreparedStatement </code></pre> , such as <pre><code> getNClob </code></pre> and <pre><code> setNClob </code></pre> allow a programmer to access an SQL <pre><code> NCLOB </code></pre> value. In addition, this interface has methods for updating a <pre><code> NCLOB </code></pre> value. <p> All methods on the <pre><code> NClob </code></pre> interface must be fully implemented if the JDBC driver supports the data type. </p><pre><code>public interface NClob\nimplements Clob</code></pre></section>	https://developer.android.com/reference/java/sql/NClob.html
java.sql	A										<section class="prog__container"></section>	https://developer.android.com/reference/java/sql/package-summary.html
ParameterMetaData	A										<section class="prog__container"><p> An object that can be used to get information about the types and properties for each parameter marker in a <pre><code> PreparedStatement </code></pre> object. For some queries and driver implementations, the data that would be returned by a <pre><code> ParameterMetaData </code></pre> object may not be available until the <pre><code> PreparedStatement </code></pre> has been executed. <p> Some driver implementations may not be able to provide information about thetypes and properties for each parameter marker in a <pre><code> CallableStatement </code></pre> object. </p><pre><code>public interface ParameterMetaData\nimplements Wrapper</code></pre></section>	https://developer.android.com/reference/java/sql/ParameterMetaData.html
PreparedStatement	A										<section class="prog__container"><p> An object that represents a precompiled SQL statement. <p> A SQL statement is precompiled and stored in a <pre><code> PreparedStatement </code></pre> object. This object can then be used to efficiently execute this statement multiple times. <p> <b> Note: </b> The setter methods ( <pre><code> setShort </code></pre> , <pre><code> setString </code></pre> , and so on) for setting IN parameter values must specify types that are compatible with the defined SQL type of the input parameter. For instance, if the IN parameter has SQL type <pre><code> INTEGER </code></pre> , then the method <pre><code> setInt </code></pre> should be used. <p> If arbitrary parameter type conversions are required, the method <pre><code> setObject </code></pre> should be used with a target SQL type. <p> In the following example of setting a parameter, <pre><code> con </code></pre> represents an active connection: <pre> PreparedStatement pstmt = con.prepareStatement("UPDATE EMPLOYEES SET SALARY = ? WHERE ID = ?"); pstmt.setBigDecimal(1, 153833.00) pstmt.setInt(2, 110592) </pre> </p><pre><code>public interface PreparedStatement\nimplements Statement</code></pre></section>	https://developer.android.com/reference/java/sql/PreparedStatement.html
Ref	A										<section class="prog__container"><p> The mapping in the Java programming language of an SQL <pre><code> REF </code></pre> value, which is a reference to an SQL structured type value in the database. <p> SQL <pre><code> REF </code></pre> values are stored in a table that contains instances of a referenceable SQL structured type, and each <pre><code> REF </code></pre> value is a unique identifier for one instance in that table. An SQL <pre><code> REF </code></pre> value may be used in place of the SQL structured type it references, either as a column value in a table or an attribute value in a structured type. <p> Because an SQL <pre><code> REF </code></pre> value is a logical pointer to an SQL structured type, a <pre><code> Ref </code></pre> object is by default also a logical pointer. Thus, retrieving an SQL <pre><code> REF </code></pre> value as a <pre><code> Ref </code></pre> object does not materialize the attributes of the structured type on the client. <p> A <pre><code> Ref </code></pre> object can be stored in the database using the <pre><code> PreparedStatement.setRef </code></pre> method. <p> All methods on the <pre><code> Ref </code></pre> interface must be fully implemented if the JDBC driver supports the data type. </p><pre><code>public interface Ref\n</code></pre></section>	https://developer.android.com/reference/java/sql/Ref.html
ResultSet	A										<section class="prog__container"><p> A table of data representing a database result set, which is usually generated by executing a statement that queries the database. <p> A <pre><code> ResultSet </code></pre> object maintains a cursor pointing to its current row of data. Initially the cursor is positioned before the first row. The <pre><code> next </code></pre> method moves the cursor to the next row, and because it returns <pre><code> false </code></pre> when there are no more rows in the <pre><code> ResultSet </code></pre> object, it can be used in a <pre><code> while </code></pre> loop to iterate through the result set. <p> A default <pre><code> ResultSet </code></pre> object is not updatable and has a cursor that moves forward only. Thus, you can iterate through it only once and only from the first row to the last row. It is possible to produce <pre><code> ResultSet </code></pre> objects that are scrollable and/or updatable. The following code fragment, in which <pre><code> con </code></pre> is a valid <pre><code> Connection </code></pre> object, illustrates how to make a result set that is scrollable and insensitive to updates by others, and that is updatable. See <pre><code> ResultSet </code></pre> fields for other options. <pre> Statement stmt = con.createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE); ResultSet rs = stmt.executeQuery("SELECT a, b FROM TABLE2"); // rs will be scrollable, will not show changes made by others, // and will be updatable </pre> The <pre><code> ResultSet </code></pre> interface provides <i> getter </i> methods ( <pre><code> getBoolean </code></pre> , <pre><code> getLong </code></pre> , and so on) for retrieving column values from the current row. Values can be retrieved using either the index number of the column or the name of the column. In general, using the column index will be more efficient. Columns are numbered from 1. For maximum portability, result set columns within each row should be read in left-to-right order, and each column should be read only once. <p> For the getter methods, a JDBC driver attempts to convert the underlying data to the Java type specified in the getter method and returns a suitable Java value. The JDBC specification has a table showing the allowable mappings from SQL types to Java types that can be used by the <pre><code> ResultSet </code></pre> getter methods. <p> <p> Column names used as input to getter methods are case insensitive. When a getter method is called with a column name and several columns have the same name, the value of the first matching column will be returned. The column name option is designed to be used when column names are used in the SQL query that generated the result set. For columns that are NOT explicitly named in the query, it is best to use column numbers. If column names are used, the programmer should take care to guarantee that they uniquely refer to the intended columns, which can be assured with the SQL <i> AS </i> clause. <p> A set of updater methods were added to this interface in the JDBC 2.0 API (Java <sup> <font size="-2"> TM </font> </sup> 2 SDK, Standard Edition, version 1.2). The comments regarding parameters to the getter methods also apply to parameters to the updater methods. <p> The updater methods may be used in two ways: <ol> <li> to update a column value in the current row. In a scrollable <pre><code> ResultSet </code></pre> object, the cursor can be moved backwards and forwards, to an absolute position, or to a position relative to the current row. The following code fragment updates the <pre><code> NAME </code></pre> column in the fifth row of the <pre><code> ResultSet </code></pre> object <pre><code> rs </code></pre> and then uses the method <pre><code> updateRow </code></pre> to update the data source table from which <pre><code> rs </code></pre> was derived. <pre> rs.absolute(5); // moves the cursor to the fifth row of rs rs.updateString("NAME", "AINSWORTH"); // updates the // <pre><code>NAME</code></pre> column of row 5 to be <pre><code>AINSWORTH</code></pre> rs.updateRow(); // updates the row in the data source </pre> <li> to insert column values into the insert row. An updatable <pre><code> ResultSet </code></pre> object has a special row associated with it that serves as a staging area for building a row to be inserted. The following code fragment moves the cursor to the insert row, builds a three-column row, and inserts it into <pre><code> rs </code></pre> and into the data source table using the method <pre><code> insertRow </code></pre> . <pre> rs.moveToInsertRow(); // moves cursor to the insert row rs.updateString(1, "AINSWORTH"); // updates the // first column of the insert row to be <pre><code>AINSWORTH</code></pre> rs.updateInt(2,35); // updates the second column to be <pre><code>35</code></pre> rs.updateBoolean(3, true); // updates the third column to <pre><code>true</code></pre> rs.insertRow(); rs.moveToCurrentRow(); </pre> </li> </li> </ol> <p> A <pre><code> ResultSet </code></pre> object is automatically closed when the <pre><code> Statement </code></pre> object that generated it is closed, re-executed, or used to retrieve the next result from a sequence of multiple results. <p> The number, types and properties of a <pre><code> ResultSet </code></pre> object's columns are provided by the <pre><code> ResultSetMetaData </code></pre> object returned by the <pre><code> ResultSet.getMetaData </code></pre> method. </p><pre><code>public interface ResultSet\nimplements Wrapper, AutoCloseable</code></pre></section>	https://developer.android.com/reference/java/sql/ResultSet.html
ResultSetMetaData	A										<section class="prog__container"><p> An object that can be used to get information about the types and properties of the columns in a <pre><code> ResultSet </code></pre> object. The following code fragment creates the <pre><code> ResultSet </code></pre> object rs, creates the <pre><code> ResultSetMetaData </code></pre> object rsmd, and uses rsmd to find out how many columns rs has and whether the first column in rs can be used in a <pre><code> WHERE </code></pre> clause. <pre> ResultSet rs = stmt.executeQuery("SELECT a, b, c FROM TABLE2"); ResultSetMetaData rsmd = rs.getMetaData(); int numberOfColumns = rsmd.getColumnCount(); boolean b = rsmd.isSearchable(1); </pre></p><pre><code>public interface ResultSetMetaData\nimplements Wrapper</code></pre></section>	https://developer.android.com/reference/java/sql/ResultSetMetaData.html
RowId	A										<section class="prog__container"><p> The representation (mapping) in the Java programming language of an SQL ROWID value. An SQL ROWID is a built-in type, a value of which can be thought of as an address for its identified row in a database table. Whether that address is logical or, in any respects, physical is determined by its originating data source. <p> Methods in the interfaces <pre><code> ResultSet </code></pre> , <pre><code> CallableStatement </code></pre> , and <pre><code> PreparedStatement </code></pre> , such as <pre><code> getRowId </code></pre> and <pre><code> setRowId </code></pre> allow a programmer to access a SQL <pre><code> ROWID </code></pre> value. The <pre><code> RowId </code></pre> interface provides a method for representing the value of the <pre><code> ROWID </code></pre> as a byte array or as a <pre><code> String </code></pre> . <p> The method <pre><code> getRowIdLifetime </code></pre> in the interface <pre><code> DatabaseMetaData </code></pre> , can be used to determine if a <pre><code> RowId </code></pre> object remains valid for the duration of the transaction in which the <pre><code> RowId </code></pre> was created, the duration of the session in which the <pre><code> RowId </code></pre> was created, or, effectively, for as long as its identified row is not deleted. In addition to specifying the duration of its valid lifetime outside its originating data source, <pre><code> getRowIdLifetime </code></pre> specifies the duration of a <pre><code> ROWID </code></pre> value's valid lifetime within its originating data source. In this, it differs from a large object, because there is no limit on the valid lifetime of a large object within its originating data source. <p> All methods on the <pre><code> RowId </code></pre> interface must be fully implemented if the JDBC driver supports the data type. </p><pre><code>public interface RowId\n</code></pre></section>	https://developer.android.com/reference/java/sql/RowId.html
RowIdLifetime	A										<section class="prog__container"><p> Enumeration for RowId life-time values.</p><pre><code>public final enum RowIdLifetime\n</code></pre></section>	https://developer.android.com/reference/java/sql/RowIdLifetime.html
Savepoint	A										<section class="prog__container"><p> The representation of a savepoint, which is a point within the current transaction that can be referenced from the <pre><code> Connection.rollback </code></pre> method. When a transaction is rolled back to a savepoint all changes made after that savepoint are undone. <p> Savepoints can be either named or unnamed. Unnamed savepoints are identified by an ID generated by the underlying data source. </p><pre><code>public interface Savepoint\n</code></pre></section>	https://developer.android.com/reference/java/sql/Savepoint.html
SQLClientInfoException	A										<section class="prog__container"><pre><code>public class SQLClientInfoException\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLClientInfoException.html
SQLData	A										<section class="prog__container"><p> The interface used for the custom mapping of an SQL user-defined type (UDT) to a class in the Java programming language. The class object for a class implementing the <pre><code> SQLData </code></pre> interface will be entered in the appropriate <pre><code> Connection </code></pre> object's type map along with the SQL name of the UDT for which it is a custom mapping. <p> Typically, a <pre><code> SQLData </code></pre> implementation will define a field for each attribute of an SQL structured type or a single field for an SQL <pre><code> DISTINCT </code></pre> type. When the UDT is retrieved from a data source with the <pre><code> ResultSet.getObject </code></pre> method, it will be mapped as an instance of this class. A programmer can operate on this class instance just as on any other object in the Java programming language and then store any changes made to it by calling the <pre><code> PreparedStatement.setObject </code></pre> method, which will map it back to the SQL type. <p> It is expected that the implementation of the class for a custom mapping will be done by a tool. In a typical implementation, the programmer would simply supply the name of the SQL UDT, the name of the class to which it is being mapped, and the names of the fields to which each of the attributes of the UDT is to be mapped. The tool will use this information to implement the <pre><code> SQLData.readSQL </code></pre> and <pre><code> SQLData.writeSQL </code></pre> methods. The <pre><code> readSQL </code></pre> method calls the appropriate <pre><code> SQLInput </code></pre> methods to read each attribute from an <pre><code> SQLInput </code></pre> object, and the <pre><code> writeSQL </code></pre> method calls <pre><code> SQLOutput </code></pre> methods to write each attribute back to the data source via an <pre><code> SQLOutput </code></pre> object. <p> An application programmer will not normally call <pre><code> SQLData </code></pre> methods directly, and the <pre><code> SQLInput </code></pre> and <pre><code> SQLOutput </code></pre> methods are called internally by <pre><code> SQLData </code></pre> methods, not by application code. </p><pre><code>public interface SQLData\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLData.html
SQLDataException	A										<section class="prog__container"><p> The subclass of <pre><code> SQLException </code></pre> thrown when the SQLState class value is ' <i> 22 </i> ', or under vendor-specified conditions. This indicates various data errors, including but not limited to data conversion errors, division by 0, and invalid arguments to functions. <p> Please consult your driver vendor documentation for the vendor-specified conditions for which this <pre><code> Exception </code></pre> may be thrown. </p><pre><code>public class SQLDataException\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLDataException.html
SQLException	A										<section class="prog__container"><p> <p> An exception that provides information on a database access error or other errors. <p> Each <pre><code> SQLException </code></pre> provides several kinds of information: <ul> <li> a string describing the error. This is used as the Java Exception message, available via the method <pre><code> getMesasge </code></pre> . <li> a "SQLstate" string, which follows either the XOPEN SQLstate conventions or the SQL:2003 conventions. The values of the SQLState string are described in the appropriate spec. The <pre><code> DatabaseMetaData </code></pre> method <pre><code> getSQLStateType </code></pre> can be used to discover whether the driver returns the XOPEN type or the SQL:2003 type. <li> an integer error code that is specific to each vendor. Normally this will be the actual error code returned by the underlying database. <li> a chain to a next Exception. This can be used to provide additional error information. <li> the causal relationship, if any for this <pre><code> SQLException </code></pre> . </li> </li> </li> </li> </li> </ul> </p><pre><code>public class SQLException\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLException.html
SQLFeatureNotSupportedException	A										<section class="prog__container"><p> The subclass of <pre><code> SQLException </code></pre> thrown when the SQLState class value is ' <i> 0A </i> ' ( the value is 'zero' A). This indicates that the JDBC driver does not support an optional JDBC feature. Optional JDBC features can fall into the fallowing categories: <p> <ul> <li> no support for an optional feature <li> no support for an optional overloaded method <li> no support for an optional mode for a method. The mode for a method isdetermined based on constants passed as parameter values to a method </li> </li> </li> </ul> </p><pre><code>public class SQLFeatureNotSupportedException\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLFeatureNotSupportedException.html
SQLInput	A										<section class="prog__container"><p> An input stream that contains a stream of values representing an instance of an SQL structured type or an SQL distinct type. This interface, used only for custom mapping, is used by the driver behind the scenes, and a programmer never directly invokes <pre><code> SQLInput </code></pre> methods. The <i> reader </i> methods ( <pre><code> readLong </code></pre> , <pre><code> readBytes </code></pre> , and so on) provide a way for an implementation of the <pre><code> SQLData </code></pre> interface to read the values in an <pre><code> SQLInput </code></pre> object. And as described in <pre><code> SQLData </code></pre> , calls to reader methods must be made in the order that their corresponding attributes appear in the SQL definition of the type. The method <pre><code> wasNull </code></pre> is used to determine whether the last value read was SQL <pre><code> NULL </code></pre> . <p> When the method <pre><code> getObject </code></pre> is called with an object of a class implementing the interface <pre><code> SQLData </code></pre> , the JDBC driver calls the method <pre><code> SQLData.getSQLType </code></pre> to determine the SQL type of the user-defined type (UDT) being custom mapped. The driver creates an instance of <pre><code> SQLInput </code></pre> , populating it with the attributes of the UDT. The driver then passes the input stream to the method <pre><code> SQLData.readSQL </code></pre> , which in turn calls the <pre><code> SQLInput </code></pre> reader methods in its implementation for reading the attributes from the input stream. </p><pre><code>public interface SQLInput\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLInput.html
SQLIntegrityConstraintViolationException	A										<section class="prog__container"><p> The subclass of <pre><code> SQLException </code></pre> thrown when the SQLState class value is ' <i> 23 </i> ', or under vendor-specified conditions. This indicates that an integrity constraint (foreign key, primary key or unique key) has been violated. <p> Please consult your driver vendor documentation for the vendor-specified conditions for which this <pre><code> Exception </code></pre> may be thrown. </p><pre><code>public class SQLIntegrityConstraintViolationException\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLIntegrityConstraintViolationException.html
SQLInvalidAuthorizationSpecException	A										<section class="prog__container"><p> The subclass of <pre><code> SQLException </code></pre> thrown when the SQLState class value is ' <i> 28 </i> ', or under vendor-specified conditions. This indicates that the authorization credentials presented during connection establishment are not valid. <p> Please consult your driver vendor documentation for the vendor-specified conditions for which this <pre><code> Exception </code></pre> may be thrown. </p><pre><code>public class SQLInvalidAuthorizationSpecException\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLInvalidAuthorizationSpecException.html
SQLNonTransientConnectionException	A										<section class="prog__container"><p> The subclass of <pre><code> SQLException </code></pre> thrown for the SQLState class value ' <i> 08 </i> ', or under vendor-specified conditions. This indicates that the connection operation that failed will not succeed if the operation is retried without the cause of the failure being corrected. <p> Please consult your driver vendor documentation for the vendor-specified conditions for which this <pre><code> Exception </code></pre> may be thrown. </p><pre><code>public class SQLNonTransientConnectionException\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLNonTransientConnectionException.html
SQLNonTransientException	A										<section class="prog__container"><pre><code>public class SQLNonTransientException\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLNonTransientException.html
SQLOutput	A										<section class="prog__container"><p> The output stream for writing the attributes of a user-defined type back to the database. This interface, used only for custom mapping, is used by the driver, and its methods are never directly invoked by a programmer. <p> When an object of a class implementing the interface <pre><code> SQLData </code></pre> is passed as an argument to an SQL statement, the JDBC driver calls the method <pre><code> SQLData.getSQLType </code></pre> to determine the kind of SQL datum being passed to the database. The driver then creates an instance of <pre><code> SQLOutput </code></pre> and passes it to the method <pre><code> SQLData.writeSQL </code></pre> . The method <pre><code> writeSQL </code></pre> in turn calls the appropriate <pre><code> SQLOutput </code></pre> <i> writer </i> methods <pre><code> writeBoolean </code></pre> , <pre><code> writeCharacterStream </code></pre> , and so on) to write data from the <pre><code> SQLData </code></pre> object to the <pre><code> SQLOutput </code></pre> output stream as the representation of an SQL user-defined type. </p><pre><code>public interface SQLOutput\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLOutput.html
SQLPermission	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public final class SQLPermission\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLPermission.html
SQLRecoverableException	A										<section class="prog__container"><pre><code>public class SQLRecoverableException\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLRecoverableException.html
SQLSyntaxErrorException	A										<section class="prog__container"><p> The subclass of <pre><code> SQLException </code></pre> thrown when the SQLState class value is ' <i> 42 </i> ', or under vendor-specified conditions. This indicates that the in-progress query has violated SQL syntax rules. <p> Please consult your driver vendor documentation for the vendor-specified conditions for which this <pre><code> Exception </code></pre> may be thrown. </p><pre><code>public class SQLSyntaxErrorException\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLSyntaxErrorException.html
SQLTimeoutException	A										<section class="prog__container"><p> <p> The subclass of <pre><code> SQLException </code></pre> thrown when the timeout specified by <pre><code> Statement </code></pre> has expired. <p> This exception does not correspond to a standard SQLState. </p><pre><code>public class SQLTimeoutException\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLTimeoutException.html
SQLTransactionRollbackException	A										<section class="prog__container"><p> The subclass of <pre><code> SQLException </code></pre> thrown when the SQLState class value is ' <i> 40 </i> ', or under vendor-specified conditions. This indicates that the current statement was automatically rolled back by the database because of deadlock or other transaction serialization failures. <p> Please consult your driver vendor documentation for the vendor-specified conditions for which this <pre><code> Exception </code></pre> may be thrown. </p><pre><code>public class SQLTransactionRollbackException\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLTransactionRollbackException.html
SQLTransientConnectionException	A										<section class="prog__container"><p> The subclass of <pre><code> SQLException </code></pre> for the SQLState class value ' <i> 08 </i> ', or under vendor-specified conditions. This indicates that the connection operation that failed might be able to succeed if the operation is retried without any application-level changes. <p> Please consult your driver vendor documentation for the vendor-specified conditions for which this <pre><code> Exception </code></pre> may be thrown. </p><pre><code>public class SQLTransientConnectionException\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLTransientConnectionException.html
SQLTransientException	A										<section class="prog__container"><pre><code>public class SQLTransientException\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLTransientException.html
SQLWarning	A										<section class="prog__container"><p> <p> An exception that provides information on database access warnings. Warnings are silently chained to the object whose method caused it to be reported. <p> Warnings may be retrieved from <pre><code> Connection </code></pre> , <pre><code> Statement </code></pre> , and <pre><code> ResultSet </code></pre> objects. Trying to retrieve a warning on a connection after it has been closed will cause an exception to be thrown. Similarly, trying to retrieve a warning on a statement after it has been closed or on a result set after it has been closed will cause an exception to be thrown. Note that closing a statement also closes a result set that it might have produced. </p><pre><code>public class SQLWarning\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLWarning.html
SQLXML	A										<section class="prog__container"><p> The mapping in the JavaTM programming language for the SQL XML type. XML is a built-in type that stores an XML value as a column value in a row of a database table. By default drivers implement an SQLXML object as a logical pointer to the XML data rather than the data itself. An SQLXML object is valid for the duration of the transaction in which it was created. <p> The SQLXML interface provides methods for accessing the XML value as a String, a Reader or Writer, or as a Stream. The XML value may also be accessed through a Source or set as a Result, which are used with XML Parser APIs such as DOM, SAX, and StAX, as well as with XSLT transforms and XPath evaluations. <p> Methods in the interfaces ResultSet, CallableStatement, and PreparedStatement, such as getSQLXML allow a programmer to access an XML value. In addition, this interface has methods for updating an XML value. <p> The XML value of the SQLXML instance may be obtained as a BinaryStream using <pre> SQLXML sqlxml = resultSet.getSQLXML(column); InputStream binaryStream = sqlxml.getBinaryStream(); </pre> For example, to parse an XML value with a DOM parser: <pre> DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder(); Document result = parser.parse(binaryStream); </pre> or to parse an XML value with a SAX parser to your handler: <pre> SAXParser parser = SAXParserFactory.newInstance().newSAXParser(); parser.parse(binaryStream, myHandler); </pre> or to parse an XML value with a StAX parser: <pre> XMLInputFactory factory = XMLInputFactory.newInstance(); XMLStreamReader streamReader = factory.createXMLStreamReader(binaryStream); </pre> <p> Because databases may use an optimized representation for the XML, accessing the value through getSource() and setResult() can lead to improved processing performance without serializing to a stream representation and parsing the XML. <p> For example, to obtain a DOM Document Node: <pre> DOMSource domSource = sqlxml.getSource(DOMSource.class); Document document = (Document) domSource.getNode(); </pre> or to set the value to a DOM Document Node to myNode: <pre> DOMResult domResult = sqlxml.setResult(DOMResult.class); domResult.setNode(myNode); </pre> or, to send SAX events to your handler: <pre> SAXSource saxSource = sqlxml.getSource(SAXSource.class); XMLReader xmlReader = saxSource.getXMLReader(); xmlReader.setContentHandler(myHandler); xmlReader.parse(saxSource.getInputSource()); </pre> or, to set the result value from SAX events: <pre> SAXResult saxResult = sqlxml.setResult(SAXResult.class); ContentHandler contentHandler = saxResult.getXMLReader().getContentHandler(); contentHandler.startDocument(); // set the XML elements and attributes into the result contentHandler.endDocument(); </pre> or, to obtain StAX events: <pre> StAXSource staxSource = sqlxml.getSource(StAXSource.class); XMLStreamReader streamReader = staxSource.getXMLStreamReader(); </pre> or, to set the result value from StAX events: <pre> StAXResult staxResult = sqlxml.setResult(StAXResult.class); XMLStreamWriter streamWriter = staxResult.getXMLStreamWriter(); </pre> or, to perform XSLT transformations on the XML value using the XSLT in xsltFile output to file resultFile: <pre> File xsltFile = new File("a.xslt"); File myFile = new File("result.xml"); Transformer xslt = TransformerFactory.newInstance().newTransformer(new StreamSource(xsltFile)); Source source = sqlxml.getSource(null); Result result = new StreamResult(myFile); xslt.transform(source, result); </pre> or, to evaluate an XPath expression on the XML value: <pre> XPath xpath = XPathFactory.newInstance().newXPath(); DOMSource domSource = sqlxml.getSource(DOMSource.class); Document document = (Document) domSource.getNode(); String expression = "/foo/@bar"; String barValue = xpath.evaluate(expression, document); </pre> To set the XML value to be the result of an XSLT transform: <pre> File sourceFile = new File("source.xml"); Transformer xslt = TransformerFactory.newInstance().newTransformer(new StreamSource(xsltFile)); Source streamSource = new StreamSource(sourceFile); Result result = sqlxml.setResult(null); xslt.transform(streamSource, result); </pre> Any Source can be transformed to a Result using the identity transform specified by calling newTransformer(): <pre> Transformer identity = TransformerFactory.newInstance().newTransformer(); Source source = sqlxml.getSource(null); File myFile = new File("result.xml"); Result result = new StreamResult(myFile); identity.transform(source, result); </pre> To write the contents of a Source to standard output: <pre> Transformer identity = TransformerFactory.newInstance().newTransformer(); Source source = sqlxml.getSource(null); Result result = new StreamResult(System.out); identity.transform(source, result); </pre> To create a DOMSource from a DOMResult: <pre> DOMSource domSource = new DOMSource(domResult.getNode()); </pre> <p> Incomplete or invalid XML values may cause an SQLException when set or the exception may occur when execute() occurs. All streams must be closed before execute() occurs or an SQLException will be thrown. <p> Reading and writing XML values to or from an SQLXML object can happen at most once. The conceptual states of readable and not readable determine if one of the reading APIs will return a value or throw an exception. The conceptual states of writable and not writable determine if one of the writing APIs will set a value or throw an exception. <p> The state moves from readable to not readable once free() or any of the reading APIs are called: getBinaryStream(), getCharacterStream(), getSource(), and getString(). Implementations may also change the state to not writable when this occurs. <p> The state moves from writable to not writeable once free() or any of the writing APIs are called: setBinaryStream(), setCharacterStream(), setResult(), and setString(). Implementations may also change the state to not readable when this occurs. <p> <p> All methods on the <pre><code> SQLXML </code></pre> interface must be fully implemented if the JDBC driver supports the data type. </p><pre><code>public interface SQLXML\n</code></pre></section>	https://developer.android.com/reference/java/sql/SQLXML.html
Statement	A										<section class="prog__container"><p> <p> The object used for executing a static SQL statement and returning the results it produces. <p> By default, only one <pre><code> ResultSet </code></pre> object per <pre><code> Statement </code></pre> object can be open at the same time. Therefore, if the reading of one <pre><code> ResultSet </code></pre> object is interleaved with the reading of another, each must have been generated by different <pre><code> Statement </code></pre> objects. All execution methods in the <pre><code> Statement </code></pre> interface implicitly close a statment's current <pre><code> ResultSet </code></pre> object if an open one exists. </p><pre><code>public interface Statement\nimplements Wrapper, AutoCloseable</code></pre></section>	https://developer.android.com/reference/java/sql/Statement.html
Struct	A										<section class="prog__container"><p> <p> The standard mapping in the Java programming language for an SQL structured type. A <pre><code> Struct </code></pre> object contains a value for each attribute of the SQL structured type that it represents. By default, an instance of <pre><code> Struct </code></pre> is valid as long as the application has a reference to it. <p> All methods on the <pre><code> Struct </code></pre> interface must be fully implemented if the JDBC driver supports the data type. </p><pre><code>public interface Struct\n</code></pre></section>	https://developer.android.com/reference/java/sql/Struct.html
Time	A										<section class="prog__container"><p> <p> A thin wrapper around the <pre><code> java.util.Date </code></pre> class that allows the JDBC API to identify this as an SQL <pre><code> TIME </code></pre> value. The <pre><code> Time </code></pre> class adds formatting and parsing operations to support the JDBC escape syntax for time values. <p> The date components should be set to the "zero epoch" value of January 1, 1970 and should not be accessed. </p><pre><code>public class Time\n</code></pre></section>	https://developer.android.com/reference/java/sql/Time.html
Timestamp	A										<section class="prog__container"><p> <p> A thin wrapper around <pre><code> java.util.Date </code></pre> that allows the JDBC API to identify this as an SQL <pre><code> TIMESTAMP </code></pre> value. It adds the ability to hold the SQL <pre><code> TIMESTAMP </code></pre> fractional seconds value, by allowing the specification of fractional seconds to a precision of nanoseconds. A Timestamp also provides formatting and parsing operations to support the JDBC escape syntax for timestamp values. <p> The precision of a Timestamp object is calculated to be either: <ul> <li> <pre><code> 19 </code></pre> , which is the number of characters in yyyy-mm-dd hh:mm:ss <li> <pre><code> 20 + s </code></pre> , which is the number of characters in the yyyy-mm-dd hh:mm:ss.[fff...] and <pre><code> s </code></pre> represents the scale of the given Timestamp, its fractional seconds precision. </li> </li> </ul> <p> <b> Note: </b> This type is a composite of a <pre><code> java.util.Date </code></pre> and a separate nanoseconds value. Only integral seconds are stored in the <pre><code> java.util.Date </code></pre> component. The fractional seconds - the nanos - are separate. The <pre><code> Timestamp.equals(Object) </code></pre> method never returns <pre><code> true </code></pre> when passed an object that isn't an instance of <pre><code> java.sql.Timestamp </code></pre> , because the nanos component of a date is unknown. As a result, the <pre><code> Timestamp.equals(Object) </code></pre> method is not symmetric with respect to the <pre><code> java.util.Date.equals(Object) </code></pre> method. Also, the <pre><code> hashCode </code></pre> method uses the underlying <pre><code> java.util.Date </code></pre> implementation and therefore does not include nanos in its computation. <p> Due to the differences between the <pre><code> Timestamp </code></pre> class and the <pre><code> java.util.Date </code></pre> class mentioned above, it is recommended that code not view <pre><code> Timestamp </code></pre> values generically as an instance of <pre><code> java.util.Date </code></pre> . The inheritance relationship between <pre><code> Timestamp </code></pre> and <pre><code> java.util.Date </code></pre> really denotes implementation inheritance, and not type inheritance. </p><pre><code>public class Timestamp\n</code></pre></section>	https://developer.android.com/reference/java/sql/Timestamp.html
Types	A										<section class="prog__container"><p> <p> The class that defines the constants that are used to identify generic SQL types, called JDBC types. <p> This class is never instantiated. </p><pre><code>public class Types\nextends Object</code></pre></section>	https://developer.android.com/reference/java/sql/Types.html
Wrapper	A										<section class="prog__container"><p> Interface for JDBC classes which provide the ability to retrieve the delegate instance when the instance in question is in fact a proxy class. <p> The wrapper pattern is employed by many JDBC driver implementations to provide extensions beyond the traditional JDBC API that are specific to a data source. Developers may wish to gain access to these resources that are wrapped (the delegates) as proxy class instances representing the the actual resources. This interface describes a standard mechanism to access these wrapped resources represented by their proxy, to permit direct access to the resource delegates. </p><pre><code>public interface Wrapper\n</code></pre></section>	https://developer.android.com/reference/java/sql/Wrapper.html
Annotation	A										<section class="prog__container"><p> An Annotation object is used as a wrapper for a text attribute value if the attribute has annotation characteristics. These characteristics are: <ul> <li> The text range that the attribute is applied to is critical to the semantics of the range. That means, the attribute cannot be applied to subranges of the text range that it applies to, and, if two adjacent text ranges have the same value for this attribute, the attribute still cannot be applied to the combined range as a whole with this value. <li> The attribute or its value usually do no longer apply if the underlying text is changed. </li> </li> </ul> An example is grammatical information attached to a sentence: For the previous sentence, you can say that "an example" is the subject, but you cannot say the same about "an", "example", or "exam". When the text is changed, the grammatical information typically becomes invalid. Another example is Japanese reading information (yomi). <p> Wrapping the attribute value into an Annotation object guarantees that adjacent text runs don't get merged even if the attribute values are equal, and indicates to text containers that the attribute should be discarded if the underlying text is modified. </p><pre><code>public class Annotation\nextends Object</code></pre></section>	https://developer.android.com/reference/java/text/Annotation.html
AttributedCharacterIterator.Attribute	A										<section class="prog__container"><p> Defines attribute keys that are used to identify text attributes. These keys are used in <pre><code> AttributedCharacterIterator </code></pre> and <pre><code> AttributedString </code></pre> .</p><pre><code>public static class AttributedCharacterIterator.Attribute\nextends Object</code></pre></section>	https://developer.android.com/reference/java/text/AttributedCharacterIterator.Attribute.html
AttributedCharacterIterator	A										<section class="prog__container"><p> An <pre><code> AttributedCharacterIterator </code></pre> allows iteration through both text and related attribute information. <p> An attribute is a key/value pair, identified by the key. No two attributes on a given character can have the same key. <p> The values for an attribute are immutable, or must not be mutated by clients or storage. They are always passed by reference, and not cloned. <p> A <em> run with respect to an attribute </em> is a maximum text range for which: <ul> <li> the attribute is undefined or <pre><code> null </code></pre> for the entire range, or <li> the attribute value is defined and has the same non- <pre><code> null </code></pre> value for the entire range. </li> </li> </ul> <p> A <em> run with respect to a set of attributes </em> is a maximum text range for which this condition is met for each member attribute. <p> When getting a run with no explicit attributes specified (i.e., calling <pre><code> getRunStart() </code></pre> and <pre><code> getRunLimit() </code></pre> ), any contiguous text segments having the same attributes (the same set of attribute/value pairs) are treated as separate runs if the attributes have been given to those text segments separately. <p> The returned indexes are limited to the range of the iterator. <p> The returned attribute information is limited to runs that contain the current character. <p> Attribute keys are instances of <pre><code> AttributedCharacterIterator.Attribute </code></pre> and its subclasses, such as <pre><code> TextAttribute </code></pre> . </p><pre><code>public interface AttributedCharacterIterator\nimplements CharacterIterator</code></pre></section>	https://developer.android.com/reference/java/text/AttributedCharacterIterator.html
AttributedString	A										<section class="prog__container"><p> An AttributedString holds text and related attribute information. It may be used as the actual data storage in some cases where a text reader wants to access attributed text through the AttributedCharacterIterator interface. <p> An attribute is a key/value pair, identified by the key. No two attributes on a given character can have the same key. <p> The values for an attribute are immutable, or must not be mutated by clients or storage. They are always passed by reference, and not cloned. </p><pre><code>public class AttributedString\nextends Object</code></pre></section>	https://developer.android.com/reference/java/text/AttributedString.html
Bidi	A										<section class="prog__container"><p> This class implements the Unicode Bidirectional Algorithm. <p> A Bidi object provides information on the bidirectional reordering of the text used to create it. This is required, for example, to properly display Arabic or Hebrew text. These languages are inherently mixed directional, as they order numbers from left-to-right while ordering most other text from right-to-left. <p> Once created, a Bidi object can be queried to see if the text it represents is all left-to-right or all right-to-left. Such objects are very lightweight and this text is relatively easy to process. <p> If there are multiple runs of text, information about the runs can be accessed by indexing to get the start, limit, and level of a run. The level represents both the direction and the 'nesting level' of a directional run. Odd levels are right-to-left, while even levels are left-to-right. So for example level 0 represents left-to-right text, while level 1 represents right-to-left text, and level 2 represents left-to-right text embedded in a right-to-left run. </p><pre><code>public final class Bidi\nextends Object</code></pre></section>	https://developer.android.com/reference/java/text/Bidi.html
BreakIterator	A										<section class="prog__container"><p> The <pre><code> BreakIterator </code></pre> class implements methods for finding the location of boundaries in text. Instances of <pre><code> BreakIterator </code></pre> maintain a current position and scan over text returning the index of characters where boundaries occur. Internally, <pre><code> BreakIterator </code></pre> scans text using a <pre><code> CharacterIterator </code></pre> , and is thus able to scan text held by any object implementing that protocol. A <pre><code> StringCharacterIterator </code></pre> is used to scan <pre><code> String </code></pre> objects passed to <pre><code> setText </code></pre> . <p> You use the factory methods provided by this class to create instances of various types of break iterators. In particular, use <pre><code> getWordInstance </code></pre> , <pre><code> getLineInstance </code></pre> , <pre><code> getSentenceInstance </code></pre> , and <pre><code> getCharacterInstance </code></pre> to create <pre><code> BreakIterator </code></pre> s that perform word, line, sentence, and character boundary analysis respectively. A single <pre><code> BreakIterator </code></pre> can work only on one unit (word, line, sentence, and so on). You must use a different iterator for each unit boundary analysis you wish to perform. <p> Line boundary analysis determines where a text string can be broken when line-wrapping. The mechanism correctly handles punctuation and hyphenated words. Actual line breaking needs to also consider the available line width and is handled by higher-level software. <p> Sentence boundary analysis allows selection with correct interpretation of periods within numbers and abbreviations, and trailing punctuation marks such as quotation marks and parentheses. <p> Word boundary analysis is used by search and replace functions, as well as within text editing applications that allow the user to select words with a double click. Word selection provides correct interpretation of punctuation marks within and following words. Characters that are not part of a word, such as symbols or punctuation marks, have word-breaks on both sides. <p> Character boundary analysis allows users to interact with characters as they expect to, for example, when moving the cursor through a text string. Character boundary analysis provides correct navigation through character strings, regardless of how the character is stored. The boundaries returned may be those of supplementary characters, combining character sequences, or ligature clusters. For example, an accented character might be stored as a base character and a diacritical mark. What users consider to be a character can differ between languages. <p> The <pre><code> BreakIterator </code></pre> instances returned by the factory methods of this class are intended for use with natural languages only, not for programming language text. It is however possible to define subclasses that tokenize a programming language. <p> <strong> Examples </strong> : <p> Creating and using text boundaries: <blockquote> <pre> public static void main(String args[]) { if (args.length == 1) { String stringToExamine = args[0]; //print each word in order BreakIterator boundary = BreakIterator.getWordInstance(); boundary.setText(stringToExamine); printEachForward(boundary, stringToExamine); //print each sentence in reverse order boundary = BreakIterator.getSentenceInstance(Locale.US); boundary.setText(stringToExamine); printEachBackward(boundary, stringToExamine); printFirst(boundary, stringToExamine); printLast(boundary, stringToExamine); } } </pre> </blockquote> Print each element in order: <blockquote> <pre> public static void printEachForward(BreakIterator boundary, String source) { int start = boundary.first(); for (int end = boundary.next(); end != BreakIterator.DONE; start = end, end = boundary.next()) { System.out.println(source.substring(start,end)); } } </pre> </blockquote> Print each element in reverse order: <blockquote> <pre> public static void printEachBackward(BreakIterator boundary, String source) { int end = boundary.last(); for (int start = boundary.previous(); start != BreakIterator.DONE; end = start, start = boundary.previous()) { System.out.println(source.substring(start,end)); } } </pre> </blockquote> Print first element: <blockquote> <pre> public static void printFirst(BreakIterator boundary, String source) { int start = boundary.first(); int end = boundary.next(); System.out.println(source.substring(start,end)); } </pre> </blockquote> Print last element: <blockquote> <pre> public static void printLast(BreakIterator boundary, String source) { int end = boundary.last(); int start = boundary.previous(); System.out.println(source.substring(start,end)); } </pre> </blockquote> Print the element at a specified position: <blockquote> <pre> public static void printAt(BreakIterator boundary, int pos, String source) { int end = boundary.following(pos); int start = boundary.previous(); System.out.println(source.substring(start,end)); } </pre> </blockquote> Find the next word: <blockquote> <pre> public static int nextWordStartAfter(int pos, String text) { BreakIterator wb = BreakIterator.getWordInstance(); wb.setText(text); int last = wb.following(pos); int current = wb.next(); while (current != BreakIterator.DONE) { for (int p = last; p &lt; current; p++) { if (Character.isLetter(text.codePointAt(p))) return last; } last = current; current = wb.next(); } return BreakIterator.DONE; } </pre> (The iterator returned by BreakIterator.getWordInstance() is unique in that the break positions it returns don't represent both the start and end of the thing being iterated over. That is, a sentence-break iterator returns breaks that each represent the end of one sentence and the beginning of the next. With the word-break iterator, the characters between two boundaries might be a word, or they might be the punctuation or whitespace between two words. The above code uses a simple heuristic to determine which boundary is the beginning of a word: If the characters between this boundary and the next boundary include at least one letter (this can be an alphabetical letter, a CJK ideograph, a Hangul syllable, a Kana character, etc.), then the text between this boundary and the next is a word; otherwise, it's the material between words.) </blockquote> </p><pre><code>public abstract class BreakIterator\nextends Object</code></pre></section>	https://developer.android.com/reference/java/text/BreakIterator.html
CharacterIterator	A										<section class="prog__container"><p> This interface defines a protocol for bidirectional iteration over text. The iterator iterates over a bounded sequence of characters. Characters are indexed with values beginning with the value returned by getBeginIndex() and continuing through the value returned by getEndIndex()-1. <p> Iterators maintain a current character index, whose valid range is from getBeginIndex() to getEndIndex(); the value getEndIndex() is included to allow handling of zero-length text ranges and for historical reasons. The current index can be retrieved by calling getIndex() and set directly by calling setIndex(), first(), and last(). <p> The methods previous() and next() are used for iteration. They return DONE if they would move outside the range from getBeginIndex() to getEndIndex() -1, signaling that the iterator has reached the end of the sequence. DONE is also returned by other methods to indicate that the current index is outside this range. <p> Examples: <p> Traverse the text from start to finish <pre> public void traverseForward(CharacterIterator iter) { for(char c = iter.first(); c != CharacterIterator.DONE; c = iter.next()) { processChar(c); } } </pre> Traverse the text backwards, from end to start <pre> public void traverseBackward(CharacterIterator iter) { for(char c = iter.last(); c != CharacterIterator.DONE; c = iter.previous()) { processChar(c); } } </pre> Traverse both forward and backward from a given position in the text. Calls to notBoundary() in this example represents some additional stopping criteria. <pre> public void traverseOut(CharacterIterator iter, int pos) { for (char c = iter.setIndex(pos); c != CharacterIterator.DONE &amp;&amp; notBoundary(c); c = iter.next()) { } int end = iter.getIndex(); for (char c = iter.setIndex(pos); c != CharacterIterator.DONE &amp;&amp; notBoundary(c); c = iter.previous()) { } int start = iter.getIndex(); processSection(start, end); } </pre> </p><pre><code>public interface CharacterIterator\nimplements Cloneable</code></pre></section>	https://developer.android.com/reference/java/text/CharacterIterator.html
ChoiceFormat	A										<section class="prog__container"><p> A <pre><code> ChoiceFormat </code></pre> allows you to attach a format to a range of numbers. It is generally used in a <pre><code> MessageFormat </code></pre> for handling plurals. The choice is specified with an ascending list of doubles, where each item specifies a half-open interval up to the next item: <blockquote> <pre> X matches j if and only if limit[j] &lt;= X &lt; limit[j+1] </pre> </blockquote> If there is no match, then either the first or last index is used, depending on whether the number (X) is too low or too high. If the limit array is not in ascending order, the results of formatting will be incorrect. ChoiceFormat also accepts <pre><code> \u221E </code></pre> as equivalent to infinity(INF). <p> <strong> Note: </strong> <pre><code> ChoiceFormat </code></pre> differs from the other <pre><code> Format </code></pre> classes in that you create a <pre><code> ChoiceFormat </code></pre> object with a constructor (not with a <pre><code> getInstance </code></pre> style factory method). The factory methods aren't necessary because <pre><code> ChoiceFormat </code></pre> doesn't require any complex setup for a given locale. In fact, <pre><code> ChoiceFormat </code></pre> doesn't implement any locale specific behavior. <p> When creating a <pre><code> ChoiceFormat </code></pre> , you must specify an array of formats and an array of limits. The length of these arrays must be the same. For example, <ul> <li> <em> limits </em> = {1,2,3,4,5,6,7} <br> <em> formats </em> = {"Sun","Mon","Tue","Wed","Thur","Fri","Sat"} <li> <em> limits </em> = {0, 1, ChoiceFormat.nextDouble(1)} <br> <em> formats </em> = {"no files", "one file", "many files"} <br> ( <pre><code> nextDouble </code></pre> can be used to get the next higher double, to make the half-open interval.) </br> </br> </li> </br> </li> </ul> <p> Here is a simple example that shows formatting and parsing: <blockquote> <pre> double[] limits = {1,2,3,4,5,6,7}; String[] dayOfWeekNames = {"Sun","Mon","Tue","Wed","Thur","Fri","Sat"}; ChoiceFormat form = new ChoiceFormat(limits, dayOfWeekNames); ParsePosition status = new ParsePosition(0); for (double i = 0.0; i &lt;= 8.0; ++i) { status.setIndex(0); System.out.println(i + " -&gt; " + form.format(i) + " -&gt; " + form.parse(form.format(i),status)); } </pre> </blockquote> Here is a more complex example, with a pattern format: <blockquote> <pre> double[] filelimits = {0,1,2}; String[] filepart = {"are no files","is one file","are {2} files"}; ChoiceFormat fileform = new ChoiceFormat(filelimits, filepart); Format[] testFormats = {fileform, null, NumberFormat.getInstance()}; MessageFormat pattform = new MessageFormat("There {0} on {1}"); pattform.setFormats(testFormats); Object[] testArgs = {null, "ADisk", null}; for (int i = 0; i &lt; 4; ++i) { testArgs[0] = new Integer(i); testArgs[2] = testArgs[0]; System.out.println(pattform.format(testArgs)); } </pre> </blockquote> <p> Specifying a pattern for ChoiceFormat objects is fairly straightforward. For example: <blockquote> <pre> ChoiceFormat fmt = new ChoiceFormat( "-1#is negative| 0#is zero or fraction | 1#is one |1.0&lt;is 1+ |2#is two |2&lt;is more than 2."); System.out.println("Formatter Pattern : " + fmt.toPattern()); System.out.println("Format with -INF : " + fmt.format(Double.NEGATIVE_INFINITY)); System.out.println("Format with -1.0 : " + fmt.format(-1.0)); System.out.println("Format with 0 : " + fmt.format(0)); System.out.println("Format with 0.9 : " + fmt.format(0.9)); System.out.println("Format with 1.0 : " + fmt.format(1)); System.out.println("Format with 1.5 : " + fmt.format(1.5)); System.out.println("Format with 2 : " + fmt.format(2)); System.out.println("Format with 2.1 : " + fmt.format(2.1)); System.out.println("Format with NaN : " + fmt.format(Double.NaN)); System.out.println("Format with +INF : " + fmt.format(Double.POSITIVE_INFINITY)); </pre> </blockquote> And the output result would be like the following: <blockquote> <pre> Format with -INF : is negative Format with -1.0 : is negative Format with 0 : is zero or fraction Format with 0.9 : is zero or fraction Format with 1.0 : is one Format with 1.5 : is 1+ Format with 2 : is two Format with 2.1 : is more than 2. Format with NaN : is negative Format with +INF : is more than 2. </pre> </blockquote> <h4> Synchronization </h4> <p> Choice formats are not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized externally. </p><pre><code>public class ChoiceFormat\n</code></pre></section>	https://developer.android.com/reference/java/text/ChoiceFormat.html
CollationElementIterator	A										<section class="prog__container"><p> The <pre><code> CollationElementIterator </code></pre> class is used as an iterator to walk through each character of an international string. Use the iterator to return the ordering priority of the positioned character. The ordering priority of a character, which we refer to as a key, defines how a character is collated in the given collation object. <p> For example, consider the following in Spanish: <blockquote> <pre> "ca" -&gt; the first key is key('c') and second key is key('a'). "cha" -&gt; the first key is key('ch') and second key is key('a'). </pre> </blockquote> And in German, <blockquote> <pre> "äb"-&gt; the first key is key('a'), the second key is key('e'), and the third key is key('b'). </pre> </blockquote> The key of a character is an integer composed of primary order(short), secondary order(byte), and tertiary order(byte). Java strictly defines the size and signedness of its primitive data types. Therefore, the static functions <pre><code> primaryOrder </code></pre> , <pre><code> secondaryOrder </code></pre> , and <pre><code> tertiaryOrder </code></pre> return <pre><code> int </code></pre> , <pre><code> short </code></pre> , and <pre><code> short </code></pre> respectively to ensure the correctness of the key value. <p> Example of the iterator usage, <blockquote> <pre> String testString = "This is a test"; Collator col = Collator.getInstance(); if (col instanceof RuleBasedCollator) { RuleBasedCollator ruleBasedCollator = (RuleBasedCollator)col; CollationElementIterator collationElementIterator = ruleBasedCollator.getCollationElementIterator(testString); int primaryOrder = CollationElementIterator.primaryOrder(collationElementIterator.next()); : } </pre> </blockquote> <p> <pre><code> CollationElementIterator.next </code></pre> returns the collation order of the next character. A collation order consists of primary order, secondary order and tertiary order. The data type of the collation order is <strong> int </strong> . The first 16 bits of a collation order is its primary order; the next 8 bits is the secondary order and the last 8 bits is the tertiary order. <p> <b> Note: </b> <pre><code> CollationElementIterator </code></pre> is a part of <pre><code> RuleBasedCollator </code></pre> implementation. It is only usable with <pre><code> RuleBasedCollator </code></pre> instances. </p><pre><code>public final class CollationElementIterator\nextends Object</code></pre></section>	https://developer.android.com/reference/java/text/CollationElementIterator.html
CollationKey	A										<section class="prog__container"><p> A <pre><code> CollationKey </code></pre> represents a <pre><code> String </code></pre> under the rules of a specific <pre><code> Collator </code></pre> object. Comparing two <pre><code> CollationKey </code></pre> s returns the relative order of the <pre><code> String </code></pre> s they represent. Using <pre><code> CollationKey </code></pre> s to compare <pre><code> String </code></pre> s is generally faster than using <pre><code> Collator.compare </code></pre> . Thus, when the <pre><code> String </code></pre> s must be compared multiple times, for example when sorting a list of <pre><code> String </code></pre> s. It's more efficient to use <pre><code> CollationKey </code></pre> s. <p> You can not create <pre><code> CollationKey </code></pre> s directly. Rather, generate them by calling <pre><code> Collator.getCollationKey </code></pre> . You can only compare <pre><code> CollationKey </code></pre> s generated from the same <pre><code> Collator </code></pre> object. <p> Generating a <pre><code> CollationKey </code></pre> for a <pre><code> String </code></pre> involves examining the entire <pre><code> String </code></pre> and converting it to series of bits that can be compared bitwise. This allows fast comparisons once the keys are generated. The cost of generating keys is recouped in faster comparisons when <pre><code> String </code></pre> s need to be compared many times. On the other hand, the result of a comparison is often determined by the first couple of characters of each <pre><code> String </code></pre> . <pre><code> Collator.compare </code></pre> examines only as many characters as it needs which allows it to be faster when doing single comparisons. <p> The following example shows how <pre><code> CollationKey </code></pre> s might be used to sort a list of <pre><code> String </code></pre> s. <blockquote> <pre> // Create an array of CollationKeys for the Strings to be sorted. Collator myCollator = Collator.getInstance(); CollationKey[] keys = new CollationKey[3]; keys[0] = myCollator.getCollationKey("Tom"); keys[1] = myCollator.getCollationKey("Dick"); keys[2] = myCollator.getCollationKey("Harry"); sort( keys ); <br> //... <br> // Inside body of sort routine, compare keys this way if( keys[i].compareTo( keys[j] ) &gt; 0 ) // swap keys[i] and keys[j] <br> //... <br> // Finally, when we've returned from sort. System.out.println( keys[0].getSourceString() ); System.out.println( keys[1].getSourceString() ); System.out.println( keys[2].getSourceString() ); </br></br></br></br></pre> </blockquote> </p><pre><code>public abstract class CollationKey\nextends Object</code></pre></section>	https://developer.android.com/reference/java/text/CollationKey.html
Collator	A										<section class="prog__container"><p> The <pre><code> Collator </code></pre> class performs locale-sensitive <pre><code> String </code></pre> comparison. You use this class to build searching and sorting routines for natural language text. <p> <pre><code> Collator </code></pre> is an abstract base class. Subclasses implement specific collation strategies. One subclass, <pre><code> RuleBasedCollator </code></pre> , is currently provided with the Java Platform and is applicable to a wide set of languages. Other subclasses may be created to handle more specialized needs. <p> Like other locale-sensitive classes, you can use the static factory method, <pre><code> getInstance </code></pre> , to obtain the appropriate <pre><code> Collator </code></pre> object for a given locale. You will only need to look at the subclasses of <pre><code> Collator </code></pre> if you need to understand the details of a particular collation strategy or if you need to modify that strategy. <p> The following example shows how to compare two strings using the <pre><code> Collator </code></pre> for the default locale. <blockquote> <pre> // Compare two strings in the default locale Collator myCollator = Collator.getInstance(); if( myCollator.compare("abc", "ABC") &lt; 0 ) System.out.println("abc is less than ABC"); else System.out.println("abc is greater than or equal to ABC"); </pre> </blockquote> <p> You can set a <pre><code> Collator </code></pre> 's <em> strength </em> property to determine the level of difference considered significant in comparisons. Four strengths are provided: <pre><code> PRIMARY </code></pre> , <pre><code> SECONDARY </code></pre> , <pre><code> TERTIARY </code></pre> , and <pre><code> IDENTICAL </code></pre> . The exact assignment of strengths to language features is locale dependant. For example, in Czech, "e" and "f" are considered primary differences, while "e" and "ě" are secondary differences, "e" and "E" are tertiary differences and "e" and "e" are identical. The following shows how both case and accents could be ignored for US English. <blockquote> <pre> //Get the Collator for US English and set its strength to PRIMARY Collator usCollator = Collator.getInstance(Locale.US); usCollator.setStrength(Collator.PRIMARY); if( usCollator.compare("abc", "ABC") == 0 ) { System.out.println("Strings are equivalent"); } </pre> </blockquote> <p> For comparing <pre><code> String </code></pre> s exactly once, the <pre><code> compare </code></pre> method provides the best performance. When sorting a list of <pre><code> String </code></pre> s however, it is generally necessary to compare each <pre><code> String </code></pre> multiple times. In this case, <pre><code> CollationKey </code></pre> s provide better performance. The <pre><code> CollationKey </code></pre> class converts a <pre><code> String </code></pre> to a series of bits that can be compared bitwise against other <pre><code> CollationKey </code></pre> s. A <pre><code> CollationKey </code></pre> is created by a <pre><code> Collator </code></pre> object for a given <pre><code> String </code></pre> . <br> <strong> Note: </strong> <pre><code> CollationKey </code></pre> s from different <pre><code> Collator </code></pre> s can not be compared. See the class description for <pre><code> CollationKey </code></pre> for an example using <pre><code> CollationKey </code></pre> s. </br> </p><pre><code>public abstract class Collator\nextends Object</code></pre></section>	https://developer.android.com/reference/java/text/Collator.html
DateFormat.Field	A										<section class="prog__container"><p> Defines constants that are used as attribute keys in the <pre><code> AttributedCharacterIterator </code></pre> returned from <pre><code> DateFormat.formatToCharacterIterator </code></pre> and as field identifiers in <pre><code> FieldPosition </code></pre> . <p> The class also provides two methods to map between its constants and the corresponding Calendar constants. </p><pre><code>public static class DateFormat.Field\n</code></pre></section>	https://developer.android.com/reference/java/text/DateFormat.Field.html
DateFormat	A										<section class="prog__container"><p> <pre><code> DateFormat </code></pre> is an abstract class for date/time formatting subclasses which formats and parses dates or time in a language-independent manner. The date/time formatting subclass, such as <pre><code> SimpleDateFormat </code></pre> , allows for formatting (i.e., date -&gt; text), parsing (text -&gt; date), and normalization. The date is represented as a <pre><code> Date </code></pre> object or as the milliseconds since January 1, 1970, 00:00:00 GMT. <p> <pre><code> DateFormat </code></pre> provides many class methods for obtaining default date/time formatters based on the default or a given locale and a number of formatting styles. The formatting styles include <pre><code> FULL </code></pre> , <pre><code> LONG </code></pre> , <pre><code> MEDIUM </code></pre> , and <pre><code> SHORT </code></pre> . More detail and examples of using these styles are provided in the method descriptions. <p> <pre><code> DateFormat </code></pre> helps you to format and parse dates for any locale. Your code can be completely independent of the locale conventions for months, days of the week, or even the calendar format: lunar vs. solar. <p> To format a date for the current Locale, use one of the static factory methods: <pre> myString = DateFormat.getDateInstance().format(myDate); </pre> <p> If you are formatting multiple dates, it is more efficient to get the format and use it multiple times so that the system doesn't have to fetch the information about the local language and country conventions multiple times. <pre> DateFormat df = DateFormat.getDateInstance(); for (int i = 0; i &lt; myDate.length; ++i) { output.println(df.format(myDate[i]) + "; "); } </pre> <p> To format a date for a different Locale, specify it in the call to <pre><code> getDateInstance() </code></pre> . <pre> DateFormat df = DateFormat.getDateInstance(DateFormat.LONG, Locale.FRANCE); </pre> <p> You can use a DateFormat to parse also. <pre> myDate = df.parse(myString); </pre> <p> Use <pre><code> getDateInstance </code></pre> to get the normal date format for that country. There are other static factory methods available. Use <pre><code> getTimeInstance </code></pre> to get the time format for that country. Use <pre><code> getDateTimeInstance </code></pre> to get a date and time format. You can pass in different options to these factory methods to control the length of the result; from <pre><code> SHORT </code></pre> to <pre><code> MEDIUM </code></pre> to <pre><code> LONG </code></pre> to <pre><code> FULL </code></pre> . The exact result depends on the locale, but generally: <ul> <li> <pre><code> SHORT </code></pre> is completely numeric, such as <pre><code> 12.13.52 </code></pre> or <pre><code> 3:30pm </code></pre> <li> <pre><code> MEDIUM </code></pre> is longer, such as <pre><code> Jan 12, 1952 </code></pre> <li> <pre><code> LONG </code></pre> is longer, such as <pre><code> January 12, 1952 </code></pre> or <pre><code> 3:30:32pm </code></pre> <li> <pre><code> FULL </code></pre> is pretty completely specified, such as <pre><code> Tuesday, April 12, 1952 AD or 3:30:42pm PST </code></pre> . </li> </li> </li> </li> </ul> <p> You can also set the time zone on the format if you wish. If you want even more control over the format or parsing, (or want to give your users more control), you can try casting the <pre><code> DateFormat </code></pre> you get from the factory methods to a <pre><code> SimpleDateFormat </code></pre> . This will work for the majority of countries; just remember to put it in a <pre><code> try </code></pre> block in case you encounter an unusual one. <p> You can also use forms of the parse and format methods with <pre><code> ParsePosition </code></pre> and <pre><code> FieldPosition </code></pre> to allow you to <ul> <li> progressively parse through pieces of a string. <li> align any particular field, or find out where it is for selection on the screen. </li> </li> </ul> <h4> Synchronization </h4> <p> Date formats are not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized externally. </p><pre><code>public abstract class DateFormat\n</code></pre></section>	https://developer.android.com/reference/java/text/DateFormat.html
DateFormatSymbols	A										<section class="prog__container"><p> <pre><code> DateFormatSymbols </code></pre> is a public class for encapsulating localizable date-time formatting data, such as the names of the months, the names of the days of the week, and the time zone data. <pre><code> DateFormat </code></pre> and <pre><code> SimpleDateFormat </code></pre> both use <pre><code> DateFormatSymbols </code></pre> to encapsulate this information. <p> Typically you shouldn't use <pre><code> DateFormatSymbols </code></pre> directly. Rather, you are encouraged to create a date-time formatter with the <pre><code> DateFormat </code></pre> class's factory methods: <pre><code> getTimeInstance </code></pre> , <pre><code> getDateInstance </code></pre> , or <pre><code> getDateTimeInstance </code></pre> . These methods automatically create a <pre><code> DateFormatSymbols </code></pre> for the formatter so that you don't have to. After the formatter is created, you may modify its format pattern using the <pre><code> setPattern </code></pre> method. For more information about creating formatters using <pre><code> DateFormat </code></pre> 's factory methods, see <pre><code> DateFormat </code></pre> . <p> If you decide to create a date-time formatter with a specific format pattern for a specific locale, you can do so with: <blockquote> <pre> new SimpleDateFormat(aPattern, DateFormatSymbols.getInstance(aLocale)). </pre> </blockquote> <p> <pre><code> DateFormatSymbols </code></pre> objects are cloneable. When you obtain a <pre><code> DateFormatSymbols </code></pre> object, feel free to modify the date-time formatting data. For instance, you can replace the localized date-time format pattern characters with the ones that you feel easy to remember. Or you can change the representative cities to your favorite ones. <p> New <pre><code> DateFormatSymbols </code></pre> subclasses may be added to support <pre><code> SimpleDateFormat </code></pre> for date-time formatting for additional locales. </p><pre><code>public class DateFormatSymbols\nextends Object</code></pre></section>	https://developer.android.com/reference/java/text/DateFormatSymbols.html
DecimalFormat	A										<section class="prog__container"><p> <pre><code> DecimalFormat </code></pre> is a concrete subclass of <pre><code> NumberFormat </code></pre> that formats decimal numbers. It has a variety of features designed to make it possible to parse and format numbers in any locale, including support for Western, Arabic, and Indic digits. It also supports different kinds of numbers, including integers (123), fixed-point numbers (123.4), scientific notation (1.23E4), percentages (12%), and currency amounts ($123). All of these can be localized. <p> To obtain a <pre><code> NumberFormat </code></pre> for a specific locale, including the default locale, call one of <pre><code> NumberFormat </code></pre> 's factory methods, such as <pre><code> getInstance() </code></pre> . In general, do not call the <pre><code> DecimalFormat </code></pre> constructors directly, since the <pre><code> NumberFormat </code></pre> factory methods may return subclasses other than <pre><code> DecimalFormat </code></pre> . If you need to customize the format object, do something like this: <blockquote> <pre> NumberFormat f = NumberFormat.getInstance(loc); if (f instanceof DecimalFormat) { ((DecimalFormat) f).setDecimalSeparatorAlwaysShown(true); } </pre> </blockquote> <p> A <pre><code> DecimalFormat </code></pre> comprises a <em> pattern </em> and a set of <em> symbols </em> . The pattern may be set directly using <pre><code> applyPattern() </code></pre> , or indirectly using the API methods. The symbols are stored in a <pre><code> DecimalFormatSymbols </code></pre> object. When using the <pre><code> NumberFormat </code></pre> factory methods, the pattern and symbols are read from localized <pre><code> ResourceBundle </code></pre> s. <h4> Patterns </h4> <pre><code> DecimalFormat </code></pre> patterns have the following syntax: <blockquote> <pre> <i>Pattern:</i> <i>PositivePattern</i> <i>PositivePattern</i> ; <i>NegativePattern</i> <i>PositivePattern:</i> <i>Prefix<sub>opt</sub></i> <i>Number</i> <i>Suffix<sub>opt</sub></i> <i>NegativePattern:</i> <i>Prefix<sub>opt</sub></i> <i>Number</i> <i>Suffix<sub>opt</sub></i> <i>Prefix:</i> any Unicode characters except \uFFFE, \uFFFF, and special characters <i>Suffix:</i> any Unicode characters except \uFFFE, \uFFFF, and special characters <i>Number:</i> <i>Integer</i> <i>Exponent<sub>opt</sub></i> <i>Integer</i> . <i>Fraction</i> <i>Exponent<sub>opt</sub></i> <i>Integer:</i> <i>MinimumInteger</i> # # <i>Integer</i> # , <i>Integer</i> <i>MinimumInteger:</i> 0 0 <i>MinimumInteger</i> 0 , <i>MinimumInteger</i> <i>Fraction:</i> <i>MinimumFraction<sub>opt</sub></i> <i>OptionalFraction<sub>opt</sub></i> <i>MinimumFraction:</i> 0 <i>MinimumFraction<sub>opt</sub></i> <i>OptionalFraction:</i> # <i>OptionalFraction<sub>opt</sub></i> <i>Exponent:</i> E <i>MinimumExponent</i> <i>MinimumExponent:</i> 0 <i>MinimumExponent<sub>opt</sub></i> </pre> </blockquote> <p> A <pre><code> DecimalFormat </code></pre> pattern contains a positive and negative subpattern, for example, <pre><code> "#,##0.00;(#,##0.00)" </code></pre> . Each subpattern has a prefix, numeric part, and suffix. The negative subpattern is optional; if absent, then the positive subpattern prefixed with the localized minus sign ( <pre><code> '-' </code></pre> in most locales) is used as the negative subpattern. That is, <pre><code> "0.00" </code></pre> alone is equivalent to <pre><code> "0.00;-0.00" </code></pre> . If there is an explicit negative subpattern, it serves only to specify the negative prefix and suffix; the number of digits, minimal digits, and other characteristics are all the same as the positive pattern. That means that <pre><code> "#,##0.0#;(#)" </code></pre> produces precisely the same behavior as <pre><code> "#,##0.0#;(#,##0.0#)" </code></pre> . <p> The prefixes, suffixes, and various symbols used for infinity, digits, thousands separators, decimal separators, etc. may be set to arbitrary values, and they will appear properly during formatting. However, care must be taken that the symbols and strings do not conflict, or parsing will be unreliable. For example, either the positive and negative prefixes or the suffixes must be distinct for <pre><code> DecimalFormat.parse() </code></pre> to be able to distinguish positive from negative values. (If they are identical, then <pre><code> DecimalFormat </code></pre> will behave as if no negative subpattern was specified.) Another example is that the decimal separator and thousands separator should be distinct characters, or parsing will be impossible. <p> The grouping separator is commonly used for thousands, but in some countries it separates ten-thousands. The grouping size is a constant number of digits between the grouping characters, such as 3 for 100,000,000 or 4 for 1,0000,0000. If you supply a pattern with multiple grouping characters, the interval between the last one and the end of the integer is the one that is used. So <pre><code> "#,##,###,####" </code></pre> == <pre><code> "######,####" </code></pre> == <pre><code> "##,####,####" </code></pre> . <h4> Special Pattern Characters </h4> <p> Many characters in a pattern are taken literally; they are matched during parsing and output unchanged during formatting. Special characters, on the other hand, stand for other characters, strings, or classes of characters. They must be quoted, unless noted otherwise, if they are to appear in the prefix or suffix as literals. <p> The characters listed here are used in non-localized patterns. Localized patterns use the corresponding characters taken from this formatter's <pre><code> DecimalFormatSymbols </code></pre> object instead, and these characters lose their special status. Two exceptions are the currency sign and quote, which are not localized. <blockquote> <table border="0" cellpadding="0" cellspacing="3" summary="Chart showing symbol, location, localized, and meaning."> <tr bgcolor="#ccccff"> <th align="left"> Symbol <th align="left"> Location <th align="left"> Localized? <th align="left"> Meaning <tr valign="top"> <td> <pre><code> 0 </code></pre> <td> Number <td> Yes <td> Digit <tr bgcolor="#eeeeff" valign="top"> <td> <pre><code> # </code></pre> <td> Number <td> Yes <td> Digit, zero shows as absent <tr valign="top"> <td> <pre><code> . </code></pre> <td> Number <td> Yes <td> Decimal separator or monetary decimal separator <tr bgcolor="#eeeeff" valign="top"> <td> <pre><code> - </code></pre> <td> Number <td> Yes <td> Minus sign <tr valign="top"> <td> <pre><code> , </code></pre> <td> Number <td> Yes <td> Grouping separator <tr bgcolor="#eeeeff" valign="top"> <td> <pre><code> E </code></pre> <td> Number <td> Yes <td> Separates mantissa and exponent in scientific notation. <em> Need not be quoted in prefix or suffix. </em> <tr valign="top"> <td> <pre><code> ; </code></pre> <td> Subpattern boundary <td> Yes <td> Separates positive and negative subpatterns <tr bgcolor="#eeeeff" valign="top"> <td> <pre><code> % </code></pre> <td> Prefix or suffix <td> Yes <td> Multiply by 100 and show as percentage <tr valign="top"> <td> <pre><code> \u2030 </code></pre> <td> Prefix or suffix <td> Yes <td> Multiply by 1000 and show as per mille value <tr bgcolor="#eeeeff" valign="top"> <td> <pre><code> ¤ </code></pre> ( <pre><code> \u00A4 </code></pre> ) <td> Prefix or suffix <td> No <td> Currency sign, replaced by currency symbol. If doubled, replaced by international currency symbol. If present in a pattern, the monetary decimal separator is used instead of the decimal separator. <tr valign="top"> <td> <pre><code> ' </code></pre> <td> Prefix or suffix <td> No <td> Used to quote special characters in a prefix or suffix, for example, <pre><code> "'#'#" </code></pre> formats 123 to <pre><code> "#123" </code></pre> . To create a single quote itself, use two in a row: <pre><code> "# o''clock" </code></pre> . </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </th> </th> </th> </th> </tr> </table> </blockquote> <h4> Scientific Notation </h4> <p> Numbers in scientific notation are expressed as the product of a mantissa and a power of ten, for example, 1234 can be expressed as 1.234 x 10^3. The mantissa is often in the range 1.0 &lt;= x &lt; 10.0, but it need not be. <pre><code> DecimalFormat </code></pre> can be instructed to format and parse scientific notation <em> only via a pattern </em> ; there is currently no factory method that creates a scientific notation format. In a pattern, the exponent character immediately followed by one or more digit characters indicates scientific notation. Example: <pre><code> "0.###E0" </code></pre> formats the number 1234 as <pre><code> "1.234E3" </code></pre> . <ul> <li> The number of digit characters after the exponent character gives the minimum exponent digit count. There is no maximum. Negative exponents are formatted using the localized minus sign, <em> not </em> the prefix and suffix from the pattern. This allows patterns such as <pre><code> "0.###E0 m/s" </code></pre> . <li> The minimum and maximum number of integer digits are interpreted together: <ul> <li> If the maximum number of integer digits is greater than their minimum number and greater than 1, it forces the exponent to be a multiple of the maximum number of integer digits, and the minimum number of integer digits to be interpreted as 1. The most common use of this is to generate <em> engineering notation </em> , in which the exponent is a multiple of three, e.g., <pre><code> "##0.#####E0" </code></pre> . Using this pattern, the number 12345 formats to <pre><code> "12.345E3" </code></pre> , and 123456 formats to <pre><code> "123.456E3" </code></pre> . <li> Otherwise, the minimum number of integer digits is achieved by adjusting the exponent. Example: 0.00123 formatted with <pre><code> "00.###E0" </code></pre> yields <pre><code> "12.3E-4" </code></pre> . </li> </li> </ul> <li> The number of significant digits in the mantissa is the sum of the <em> minimum integer </em> and <em> maximum fraction </em> digits, and is unaffected by the maximum integer digits. For example, 12345 formatted with <pre><code> "##0.##E0" </code></pre> is <pre><code> "12.3E3" </code></pre> . To show all digits, set the significant digits count to zero. The number of significant digits does not affect parsing. <li> Exponential patterns may not contain grouping separators. </li> </li> </li> </li> </ul> <h4> Rounding </h4> <pre><code> DecimalFormat </code></pre> provides rounding modes defined in <pre><code> RoundingMode </code></pre> for formatting. By default, it uses <pre><code> RoundingMode.HALF_EVEN </code></pre> . <h4> Digits </h4> For formatting, <pre><code> DecimalFormat </code></pre> uses the ten consecutive characters starting with the localized zero digit defined in the <pre><code> DecimalFormatSymbols </code></pre> object as digits. For parsing, these digits as well as all Unicode decimal digits, as defined by <pre><code> Character.digit </code></pre> , are recognized. <h4> Special Values </h4> <p> <pre><code> NaN </code></pre> is formatted as a string, which typically has a single character <pre><code> \uFFFD </code></pre> . This string is determined by the <pre><code> DecimalFormatSymbols </code></pre> object. This is the only value for which the prefixes and suffixes are not used. <p> Infinity is formatted as a string, which typically has a single character <pre><code> \u221E </code></pre> , with the positive or negative prefixes and suffixes applied. The infinity string is determined by the <pre><code> DecimalFormatSymbols </code></pre> object. <p> Negative zero ( <pre><code> "-0" </code></pre> ) parses to <ul> <li> <pre><code> BigDecimal(0) </code></pre> if <pre><code> isParseBigDecimal() </code></pre> is true, <li> <pre><code> Long(0) </code></pre> if <pre><code> isParseBigDecimal() </code></pre> is false and <pre><code> isParseIntegerOnly() </code></pre> is true, <li> <pre><code> Double(-0.0) </code></pre> if both <pre><code> isParseBigDecimal() </code></pre> and <pre><code> isParseIntegerOnly() </code></pre> are false. </li> </li> </li> </ul> <h4> Synchronization </h4> <p> Decimal formats are generally not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized externally. <h4> Example </h4> <blockquote> <pre> <strong>// Print out a number using the localized number, integer, currency, // and percent format for each locale</strong> Locale[] locales = NumberFormat.getAvailableLocales(); double myNumber = -1234.56; NumberFormat form; for (int j=0; j&lt;4; ++j) { System.out.println("FORMAT"); for (int i = 0; i &lt; locales.length; ++i) { if (locales[i].getCountry().length() == 0) { continue; // Skip language-only locales } System.out.print(locales[i].getDisplayName()); switch (j) { case 0: form = NumberFormat.getInstance(locales[i]); break; case 1: form = NumberFormat.getIntegerInstance(locales[i]); break; case 2: form = NumberFormat.getCurrencyInstance(locales[i]); break; default: form = NumberFormat.getPercentInstance(locales[i]); break; } if (form instanceof DecimalFormat) { System.out.print(": " + ((DecimalFormat) form).toPattern()); } System.out.print(" -&gt; " + form.format(myNumber)); try { System.out.println(" -&gt; " + form.parse(form.format(myNumber))); } catch (ParseException e) {} } } </pre> </blockquote> </p><pre><code>public class DecimalFormat\n</code></pre></section>	https://developer.android.com/reference/java/text/DecimalFormat.html
DecimalFormatSymbols	A										<section class="prog__container"><p> This class represents the set of symbols (such as the decimal separator, the grouping separator, and so on) needed by <pre><code> DecimalFormat </code></pre> to format numbers. <pre><code> DecimalFormat </code></pre> creates for itself an instance of <pre><code> DecimalFormatSymbols </code></pre> from its locale data. If you need to change any of these symbols, you can get the <pre><code> DecimalFormatSymbols </code></pre> object from your <pre><code> DecimalFormat </code></pre> and modify it.</p><pre><code>public class DecimalFormatSymbols\nextends Object</code></pre></section>	https://developer.android.com/reference/java/text/DecimalFormatSymbols.html
FieldPosition	A										<section class="prog__container"><p> <pre><code> FieldPosition </code></pre> is a simple class used by <pre><code> Format </code></pre> and its subclasses to identify fields in formatted output. Fields can be identified in two ways: <ul> <li> By an integer constant, whose names typically end with <pre><code> _FIELD </code></pre> . The constants are defined in the various subclasses of <pre><code> Format </code></pre> . <li> By a <pre><code> Format.Field </code></pre> constant, see <pre><code> ERA_FIELD </code></pre> and its friends in <pre><code> DateFormat </code></pre> for an example. </li> </li> </ul> <p> <pre><code> FieldPosition </code></pre> keeps track of the position of the field within the formatted output with two indices: the index of the first character of the field and the index of the last character of the field. <p> One version of the <pre><code> format </code></pre> method in the various <pre><code> Format </code></pre> classes requires a <pre><code> FieldPosition </code></pre> object as an argument. You use this <pre><code> format </code></pre> method to perform partial formatting or to get information about the formatted output (such as the position of a field). <p> If you are interested in the positions of all attributes in the formatted string use the <pre><code> Format </code></pre> method <pre><code> formatToCharacterIterator </code></pre> . </p><pre><code>public class FieldPosition\nextends Object</code></pre></section>	https://developer.android.com/reference/java/text/FieldPosition.html
Format.Field	A										<section class="prog__container"><p> Defines constants that are used as attribute keys in the <pre><code> AttributedCharacterIterator </code></pre> returned from <pre><code> Format.formatToCharacterIterator </code></pre> and as field identifiers in <pre><code> FieldPosition </code></pre> .</p><pre><code>public static class Format.Field\n</code></pre></section>	https://developer.android.com/reference/java/text/Format.Field.html
Format	A										<section class="prog__container"><p> <pre><code> Format </code></pre> is an abstract base class for formatting locale-sensitive information such as dates, messages, and numbers. <p> <pre><code> Format </code></pre> defines the programming interface for formatting locale-sensitive objects into <pre><code> String </code></pre> s (the <pre><code> format </code></pre> method) and for parsing <pre><code> String </code></pre> s back into objects (the <pre><code> parseObject </code></pre> method). <p> Generally, a format's <pre><code> parseObject </code></pre> method must be able to parse any string formatted by its <pre><code> format </code></pre> method. However, there may be exceptional cases where this is not possible. For example, a <pre><code> format </code></pre> method might create two adjacent integer numbers with no separator in between, and in this case the <pre><code> parseObject </code></pre> could not tell which digits belong to which number. <h4> Subclassing </h4> <p> The Java Platform provides three specialized subclasses of <pre><code> Format </code></pre> -- <pre><code> DateFormat </code></pre> , <pre><code> MessageFormat </code></pre> , and <pre><code> NumberFormat </code></pre> --for formatting dates, messages, and numbers, respectively. <p> Concrete subclasses must implement three methods: <ol> <li> <pre><code> format(Object obj, StringBuffer toAppendTo, FieldPosition pos) </code></pre> <li> <pre><code> formatToCharacterIterator(Object obj) </code></pre> <li> <pre><code> parseObject(String source, ParsePosition pos) </code></pre> </li> </li> </li> </ol> These general methods allow polymorphic parsing and formatting of objects and are used, for example, by <pre><code> MessageFormat </code></pre> . Subclasses often also provide additional <pre><code> format </code></pre> methods for specific input types as well as <pre><code> parse </code></pre> methods for specific result types. Any <pre><code> parse </code></pre> method that does not take a <pre><code> ParsePosition </code></pre> argument should throw <pre><code> ParseException </code></pre> when no text in the required format is at the beginning of the input text. <p> Most subclasses will also implement the following factory methods: <ol> <li> <pre><code> getInstance </code></pre> for getting a useful format object appropriate for the current locale <li> <pre><code> getInstance(Locale) </code></pre> for getting a useful format object appropriate for the specified locale </li> </li> </ol> In addition, some subclasses may also implement other <pre><code> getXxxxInstance </code></pre> methods for more specialized control. For example, the <pre><code> NumberFormat </code></pre> class provides <pre><code> getPercentInstance </code></pre> and <pre><code> getCurrencyInstance </code></pre> methods for getting specialized number formatters. <p> Subclasses of <pre><code> Format </code></pre> that allow programmers to create objects for locales (with <pre><code> getInstance(Locale) </code></pre> for example) must also implement the following class method: <blockquote> <pre> public static Locale[] getAvailableLocales() </pre> </blockquote> <p> And finally subclasses may define a set of constants to identify the various fields in the formatted output. These constants are used to create a FieldPosition object which identifies what information is contained in the field and its position in the formatted result. These constants should be named <pre><code> <em> item </em> _FIELD </code></pre> where <pre><code> <em> item </em> </code></pre> identifies the field. For examples of these constants, see <pre><code> ERA_FIELD </code></pre> and its friends in <pre><code> DateFormat </code></pre> . <h4> Synchronization </h4> <p> Formats are generally not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized externally. </p><pre><code>public abstract class Format\nextends Object</code></pre></section>	https://developer.android.com/reference/java/text/Format.html
MessageFormat.Field	A										<section class="prog__container"><p> Defines constants that are used as attribute keys in the <pre><code> AttributedCharacterIterator </code></pre> returned from <pre><code> MessageFormat.formatToCharacterIterator </code></pre> .</p><pre><code>public static class MessageFormat.Field\n</code></pre></section>	https://developer.android.com/reference/java/text/MessageFormat.Field.html
MessageFormat	A										<section class="prog__container"><p> <pre><code> MessageFormat </code></pre> provides a means to produce concatenated messages in a language-neutral way. Use this to construct messages displayed for end users. <p> <pre><code> MessageFormat </code></pre> takes a set of objects, formats them, then inserts the formatted strings into the pattern at the appropriate places. <p> <strong> Note: </strong> <pre><code> MessageFormat </code></pre> differs from the other <pre><code> Format </code></pre> classes in that you create a <pre><code> MessageFormat </code></pre> object with one of its constructors (not with a <pre><code> getInstance </code></pre> style factory method). The factory methods aren't necessary because <pre><code> MessageFormat </code></pre> itself doesn't implement locale specific behavior. Any locale specific behavior is defined by the pattern that you provide as well as the subformats used for inserted arguments. <h4> Patterns and Their Interpretation </h4> <pre><code> MessageFormat </code></pre> uses patterns of the following form: <blockquote> <pre> <i>MessageFormatPattern:</i> <i>String</i> <i>MessageFormatPattern</i> <i>FormatElement</i> <i>String</i> <i>FormatElement:</i> { <i>ArgumentIndex</i> } { <i>ArgumentIndex</i> , <i>FormatType</i> } { <i>ArgumentIndex</i> , <i>FormatType</i> , <i>FormatStyle</i> } <i>FormatType: one of </i> number date time choice <i>FormatStyle:</i> short medium long full integer currency percent <i>SubformatPattern</i> </pre> </blockquote> <p> Within a <i> String </i> , a pair of single quotes can be used to quote any arbitrary characters except single quotes. For example, pattern string <pre><code> "'{0}'" </code></pre> represents string <pre><code> "{0}" </code></pre> , not a <i> FormatElement </i> . A single quote itself must be represented by doubled single quotes <pre><code> '' </code></pre> throughout a <i> String </i> . For example, pattern string <pre><code> "'{''}'" </code></pre> is interpreted as a sequence of <pre><code> '{ </code></pre> (start of quoting and a left curly brace), <pre><code> '' </code></pre> (a single quote), and <pre><code> }' </code></pre> (a right curly brace and end of quoting), <em> not </em> <pre><code> '{' </code></pre> and <pre><code> '}' </code></pre> (quoted left and right curly braces): representing string <pre><code> "{'}" </code></pre> , <em> not </em> <pre><code> "{}" </code></pre> . <p> A <i> SubformatPattern </i> is interpreted by its corresponding subformat, and subformat-dependent pattern rules apply. For example, pattern string <pre><code> "{1,number, <u> $'#',## </u> }" </code></pre> ( <i> SubformatPattern </i> with underline) will produce a number format with the pound-sign quoted, with a result such as: <pre><code> "$#31,45" </code></pre> . Refer to each <pre><code> Format </code></pre> subclass documentation for details. <p> Any unmatched quote is treated as closed at the end of the given pattern. For example, pattern string <pre><code> "'{0}" </code></pre> is treated as pattern <pre><code> "'{0}'" </code></pre> . <p> Any curly braces within an unquoted pattern must be balanced. For example, <pre><code> "ab {0} de" </code></pre> and <pre><code> "ab '}' de" </code></pre> are valid patterns, but <pre><code> "ab {0'}' de" </code></pre> , <pre><code> "ab } de" </code></pre> and <pre><code> "''{''" </code></pre> are not. <p> <dl> <dt> <b> Warning: </b> <dd> The rules for using quotes within message format patterns unfortunately have shown to be somewhat confusing. In particular, it isn't always obvious to localizers whether single quotes need to be doubled or not. Make sure to inform localizers about the rules, and tell them (for example, by using comments in resource bundle source files) which strings will be processed by <pre><code> MessageFormat </code></pre> . Note that localizers may need to use single quotes in translated strings where the original version doesn't have them. </dd> </dt> </dl> <p> The <i> ArgumentIndex </i> value is a non-negative integer written using the digits <pre><code> '0' </code></pre> through <pre><code> '9' </code></pre> , and represents an index into the <pre><code> arguments </code></pre> array passed to the <pre><code> format </code></pre> methods or the result array returned by the <pre><code> parse </code></pre> methods. <p> The <i> FormatType </i> and <i> FormatStyle </i> values are used to create a <pre><code> Format </code></pre> instance for the format element. The following table shows how the values map to <pre><code> Format </code></pre> instances. Combinations not shown in the table are illegal. A <i> SubformatPattern </i> must be a valid pattern string for the <pre><code> Format </code></pre> subclass used. <p> <table border="1" summary="Shows how FormatType and FormatStyle values map to Format instances"> <tr> <th class="TableHeadingColor" id="ft"> FormatType <th class="TableHeadingColor" id="fs"> FormatStyle <th class="TableHeadingColor" id="sc"> Subformat Created <tr> <td headers="ft"> <i> (none) </i> <td headers="fs"> <i> (none) </i> <td headers="sc"> <pre><code> null </code></pre> <tr> <td headers="ft" rowspan="5"> <pre><code> number </code></pre> <td headers="fs"> <i> (none) </i> <td headers="sc"> <pre><code> NumberFormat.getInstance </code></pre> <pre><code> (getLocale()) </code></pre> <tr> <td headers="fs"> <pre><code> integer </code></pre> <td headers="sc"> <pre><code> NumberFormat.getIntegerInstance </code></pre> <pre><code> (getLocale()) </code></pre> <tr> <td headers="fs"> <pre><code> currency </code></pre> <td headers="sc"> <pre><code> NumberFormat.getCurrencyInstance </code></pre> <pre><code> (getLocale()) </code></pre> <tr> <td headers="fs"> <pre><code> percent </code></pre> <td headers="sc"> <pre><code> NumberFormat.getPercentInstance </code></pre> <pre><code> (getLocale()) </code></pre> <tr> <td headers="fs"> <i> SubformatPattern </i> <td headers="sc"> <pre><code> new </code></pre> <pre><code> DecimalFormat </code></pre> <pre><code> (subformatPattern, </code></pre> <pre><code> DecimalFormatSymbols.getInstance </code></pre> <pre><code> (getLocale())) </code></pre> <tr> <td headers="ft" rowspan="6"> <pre><code> date </code></pre> <td headers="fs"> <i> (none) </i> <td headers="sc"> <pre><code> DateFormat.getDateInstance </code></pre> <pre><code> ( </code></pre> <pre><code> DEFAULT </code></pre> <pre><code> , getLocale()) </code></pre> <tr> <td headers="fs"> <pre><code> short </code></pre> <td headers="sc"> <pre><code> DateFormat.getDateInstance </code></pre> <pre><code> ( </code></pre> <pre><code> SHORT </code></pre> <pre><code> , getLocale()) </code></pre> <tr> <td headers="fs"> <pre><code> medium </code></pre> <td headers="sc"> <pre><code> DateFormat.getDateInstance </code></pre> <pre><code> ( </code></pre> <pre><code> DEFAULT </code></pre> <pre><code> , getLocale()) </code></pre> <tr> <td headers="fs"> <pre><code> long </code></pre> <td headers="sc"> <pre><code> DateFormat.getDateInstance </code></pre> <pre><code> ( </code></pre> <pre><code> LONG </code></pre> <pre><code> , getLocale()) </code></pre> <tr> <td headers="fs"> <pre><code> full </code></pre> <td headers="sc"> <pre><code> DateFormat.getDateInstance </code></pre> <pre><code> ( </code></pre> <pre><code> FULL </code></pre> <pre><code> , getLocale()) </code></pre> <tr> <td headers="fs"> <i> SubformatPattern </i> <td headers="sc"> <pre><code> new </code></pre> <pre><code> SimpleDateFormat </code></pre> <pre><code> (subformatPattern, getLocale()) </code></pre> <tr> <td headers="ft" rowspan="6"> <pre><code> time </code></pre> <td headers="fs"> <i> (none) </i> <td headers="sc"> <pre><code> DateFormat.getTimeInstance </code></pre> <pre><code> ( </code></pre> <pre><code> DEFAULT </code></pre> <pre><code> , getLocale()) </code></pre> <tr> <td headers="fs"> <pre><code> short </code></pre> <td headers="sc"> <pre><code> DateFormat.getTimeInstance </code></pre> <pre><code> ( </code></pre> <pre><code> SHORT </code></pre> <pre><code> , getLocale()) </code></pre> <tr> <td headers="fs"> <pre><code> medium </code></pre> <td headers="sc"> <pre><code> DateFormat.getTimeInstance </code></pre> <pre><code> ( </code></pre> <pre><code> DEFAULT </code></pre> <pre><code> , getLocale()) </code></pre> <tr> <td headers="fs"> <pre><code> long </code></pre> <td headers="sc"> <pre><code> DateFormat.getTimeInstance </code></pre> <pre><code> ( </code></pre> <pre><code> LONG </code></pre> <pre><code> , getLocale()) </code></pre> <tr> <td headers="fs"> <pre><code> full </code></pre> <td headers="sc"> <pre><code> DateFormat.getTimeInstance </code></pre> <pre><code> ( </code></pre> <pre><code> FULL </code></pre> <pre><code> , getLocale()) </code></pre> <tr> <td headers="fs"> <i> SubformatPattern </i> <td headers="sc"> <pre><code> new </code></pre> <pre><code> SimpleDateFormat </code></pre> <pre><code> (subformatPattern, getLocale()) </code></pre> <tr> <td headers="ft"> <pre><code> choice </code></pre> <td headers="fs"> <i> SubformatPattern </i> <td headers="sc"> <pre><code> new </code></pre> <pre><code> ChoiceFormat </code></pre> <pre><code> (subformatPattern) </code></pre> </td> </td> </td> </tr> </td> </td> </tr> </td> </td> </tr> </td> </td> </tr> </td> </td> </tr> </td> </td> </tr> </td> </td> </td> </tr> </td> </td> </tr> </td> </td> </tr> </td> </td> </tr> </td> </td> </tr> </td> </td> </tr> </td> </td> </td> </tr> </td> </td> </tr> </td> </td> </tr> </td> </td> </tr> </td> </td> </tr> </td> </td> </td> </tr> </td> </td> </td> </tr> </th> </th> </th> </tr> </table> <p> <h4> Usage Information </h4> <p> Here are some examples of usage. In real internationalized programs, the message format pattern and other static strings will, of course, be obtained from resource bundles. Other parameters will be dynamically determined at runtime. <p> The first example uses the static method <pre><code> MessageFormat.format </code></pre> , which internally creates a <pre><code> MessageFormat </code></pre> for one-time use: <blockquote> <pre> int planet = 7; String event = "a disturbance in the Force"; String result = MessageFormat.format( "At {1,time} on {1,date}, there was {2} on planet {0,number,integer}.", planet, new Date(), event); </pre> </blockquote> The output is: <blockquote> <pre> At 12:30 PM on Jul 3, 2053, there was a disturbance in the Force on planet 7. </pre> </blockquote> <p> The following example creates a <pre><code> MessageFormat </code></pre> instance that can be used repeatedly: <blockquote> <pre> int fileCount = 1273; String diskName = "MyDisk"; Object[] testArgs = {new Long(fileCount), diskName}; MessageFormat form = new MessageFormat( "The disk \"{1}\" contains {0} file(s)."); System.out.println(form.format(testArgs)); </pre> </blockquote> The output with different values for <pre><code> fileCount </code></pre> : <blockquote> <pre> The disk "MyDisk" contains 0 file(s). The disk "MyDisk" contains 1 file(s). The disk "MyDisk" contains 1,273 file(s). </pre> </blockquote> <p> For more sophisticated patterns, you can use a <pre><code> ChoiceFormat </code></pre> to produce correct forms for singular and plural: <blockquote> <pre> MessageFormat form = new MessageFormat("The disk \"{1}\" contains {0}."); double[] filelimits = {0,1,2}; String[] filepart = {"no files","one file","{0,number} files"}; ChoiceFormat fileform = new ChoiceFormat(filelimits, filepart); form.setFormatByArgumentIndex(0, fileform); int fileCount = 1273; String diskName = "MyDisk"; Object[] testArgs = {new Long(fileCount), diskName}; System.out.println(form.format(testArgs)); </pre> </blockquote> The output with different values for <pre><code> fileCount </code></pre> : <blockquote> <pre> The disk "MyDisk" contains no files. The disk "MyDisk" contains one file. The disk "MyDisk" contains 1,273 files. </pre> </blockquote> <p> You can create the <pre><code> ChoiceFormat </code></pre> programmatically, as in the above example, or by using a pattern. See <pre><code> ChoiceFormat </code></pre> for more information. <blockquote> <pre> form.applyPattern( "There {0,choice,0#are no files|1#is one file|1&lt;are {0,number,integer} files}."); </pre> </blockquote> <p> <strong> Note: </strong> As we see above, the string produced by a <pre><code> ChoiceFormat </code></pre> in <pre><code> MessageFormat </code></pre> is treated as special; occurrences of '{' are used to indicate subformats, and cause recursion. If you create both a <pre><code> MessageFormat </code></pre> and <pre><code> ChoiceFormat </code></pre> programmatically (instead of using the string patterns), then be careful not to produce a format that recurses on itself, which will cause an infinite loop. <p> When a single argument is parsed more than once in the string, the last match will be the final result of the parsing. For example, <blockquote> <pre> MessageFormat mf = new MessageFormat("{0,number,#.##}, {0,number,#.#}"); Object[] objs = {new Double(3.1415)}; String result = mf.format( objs ); // result now equals "3.14, 3.1" objs = null; objs = mf.parse(result, new ParsePosition(0)); // objs now equals {new Double(3.1)} </pre> </blockquote> <p> Likewise, parsing with a <pre><code> MessageFormat </code></pre> object using patterns containing multiple occurrences of the same argument would return the last match. For example, <blockquote> <pre> MessageFormat mf = new MessageFormat("{0}, {0}, {0}"); String forParsing = "x, y, z"; Object[] objs = mf.parse(forParsing, new ParsePosition(0)); // result now equals {new String("z")} </pre> </blockquote> <h4> Synchronization </h4> <p> Message formats are not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized externally. </p><pre><code>public class MessageFormat\n</code></pre></section>	https://developer.android.com/reference/java/text/MessageFormat.html
Normalizer.Form	A										<section class="prog__container"><p> This enum provides constants of the four Unicode normalization forms that are described in Unicode Standard Annex #15 — Unicode Normalization Forms and two methods to access them.</p><pre><code>public static final enum Normalizer.Form\n</code></pre></section>	https://developer.android.com/reference/java/text/Normalizer.Form.html
Normalizer	A										<section class="prog__container"><p> This class provides the method <pre><code> normalize </code></pre> which transforms Unicode text into an equivalent composed or decomposed form, allowing for easier sorting and searching of text. The <pre><code> normalize </code></pre> method supports the standard normalization forms described in Unicode Standard Annex #15 — Unicode Normalization Forms . <p> Characters with accents or other adornments can be encoded in several different ways in Unicode. For example, take the character A-acute. In Unicode, this can be encoded as a single character (the "composed" form): <p> <pre> U+00C1 LATIN CAPITAL LETTER A WITH ACUTE</pre> </p><pre><code>public final class Normalizer\nextends Object</code></pre></section>	https://developer.android.com/reference/java/text/Normalizer.html
NumberFormat.Field	A										<section class="prog__container"><p> Defines constants that are used as attribute keys in the <pre><code> AttributedCharacterIterator </code></pre> returned from <pre><code> NumberFormat.formatToCharacterIterator </code></pre> and as field identifiers in <pre><code> FieldPosition </code></pre> .</p><pre><code>public static class NumberFormat.Field\n</code></pre></section>	https://developer.android.com/reference/java/text/NumberFormat.Field.html
NumberFormat	A										<section class="prog__container"><p> <pre><code> NumberFormat </code></pre> is the abstract base class for all number formats. This class provides the interface for formatting and parsing numbers. <pre><code> NumberFormat </code></pre> also provides methods for determining which locales have number formats, and what their names are. <p> <pre><code> NumberFormat </code></pre> helps you to format and parse numbers for any locale. Your code can be completely independent of the locale conventions for decimal points, thousands-separators, or even the particular decimal digits used, or whether the number format is even decimal. <p> To format a number for the current Locale, use one of the factory class methods: <blockquote> <pre> myString = NumberFormat.getInstance().format(myNumber); </pre> </blockquote> If you are formatting multiple numbers, it is more efficient to get the format and use it multiple times so that the system doesn't have to fetch the information about the local language and country conventions multiple times. <blockquote> <pre> NumberFormat nf = NumberFormat.getInstance(); for (int i = 0; i &lt; myNumber.length; ++i) { output.println(nf.format(myNumber[i]) + "; "); } </pre> </blockquote> To format a number for a different Locale, specify it in the call to <pre><code> getInstance </code></pre> . <blockquote> <pre> NumberFormat nf = NumberFormat.getInstance(Locale.FRENCH); </pre> </blockquote> You can also use a <pre><code> NumberFormat </code></pre> to parse numbers: <blockquote> <pre> myNumber = nf.parse(myString); </pre> </blockquote> Use <pre><code> getInstance </code></pre> or <pre><code> getNumberInstance </code></pre> to get the normal number format. Use <pre><code> getIntegerInstance </code></pre> to get an integer number format. Use <pre><code> getCurrencyInstance </code></pre> to get the currency number format. And use <pre><code> getPercentInstance </code></pre> to get a format for displaying percentages. With this format, a fraction like 0.53 is displayed as 53%. <p> You can also control the display of numbers with such methods as <pre><code> setMinimumFractionDigits </code></pre> . If you want even more control over the format or parsing, or want to give your users more control, you can try casting the <pre><code> NumberFormat </code></pre> you get from the factory methods to a <pre><code> DecimalFormat </code></pre> . This will work for the vast majority of locales; just remember to put it in a <pre><code> try </code></pre> block in case you encounter an unusual one. <p> NumberFormat and DecimalFormat are designed such that some controls work for formatting and others work for parsing. The following is the detailed description for each these control methods, <p> setParseIntegerOnly : only affects parsing, e.g. if true, "3456.78" -&gt; 3456 (and leaves the parse position just after index 6) if false, "3456.78" -&gt; 3456.78 (and leaves the parse position just after index 8) This is independent of formatting. If you want to not show a decimal point where there might be no digits after the decimal point, use setDecimalSeparatorAlwaysShown. <p> setDecimalSeparatorAlwaysShown : only affects formatting, and only where there might be no digits after the decimal point, such as with a pattern like "#,##0.##", e.g., if true, 3456.00 -&gt; "3,456." if false, 3456.00 -&gt; "3456" This is independent of parsing. If you want parsing to stop at the decimal point, use setParseIntegerOnly. <p> You can also use forms of the <pre><code> parse </code></pre> and <pre><code> format </code></pre> methods with <pre><code> ParsePosition </code></pre> and <pre><code> FieldPosition </code></pre> to allow you to: <ul> <li> progressively parse through pieces of a string <li> align the decimal point and other areas </li> </li> </ul> For example, you can align numbers in two ways: <ol> <li> If you are using a monospaced font with spacing for alignment, you can pass the <pre><code> FieldPosition </code></pre> in your format call, with <pre><code> field </code></pre> = <pre><code> INTEGER_FIELD </code></pre> . On output, <pre><code> getEndIndex </code></pre> will be set to the offset between the last character of the integer and the decimal. Add (desiredSpaceCount - getEndIndex) spaces at the front of the string. <li> If you are using proportional fonts, instead of padding with spaces, measure the width of the string in pixels from the start to <pre><code> getEndIndex </code></pre> . Then move the pen by (desiredPixelWidth - widthToAlignmentPoint) before drawing the text. It also works where there is no decimal, but possibly additional characters at the end, e.g., with parentheses in negative numbers: "(12)" for -12. </li> </li> </ol> <h4> Synchronization </h4> <p> Number formats are generally not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized externally. </p><pre><code>public abstract class NumberFormat\n</code></pre></section>	https://developer.android.com/reference/java/text/NumberFormat.html
java.text	A										<section class="prog__container">These classes are capable of formatting dates, numbers, and messages, parsing;searching and sorting strings; and iterating over characters, words, sentences,and line breaks. This package contains three main groups of classes andinterfaces:</section>	https://developer.android.com/reference/java/text/package-summary.html
ParseException	A										<section class="prog__container"><p> Signals that an error has been reached unexpectedly while parsing.</p><pre><code>public class ParseException\n</code></pre></section>	https://developer.android.com/reference/java/text/ParseException.html
ParsePosition	A										<section class="prog__container"><p> <pre><code> ParsePosition </code></pre> is a simple class used by <pre><code> Format </code></pre> and its subclasses to keep track of the current position during parsing. The <pre><code> parseObject </code></pre> method in the various <pre><code> Format </code></pre> classes requires a <pre><code> ParsePosition </code></pre> object as an argument. <p> By design, as you parse through a string with different formats, you can use the same <pre><code> ParsePosition </code></pre> , since the index parameter records the current position. </p><pre><code>public class ParsePosition\nextends Object</code></pre></section>	https://developer.android.com/reference/java/text/ParsePosition.html
RuleBasedCollator	A										<section class="prog__container"><p> The <pre><code> RuleBasedCollator </code></pre> class is a concrete subclass of <pre><code> Collator </code></pre> that provides a simple, data-driven, table collator. With this class you can create a customized table-based <pre><code> Collator </code></pre> . <pre><code> RuleBasedCollator </code></pre> maps characters to sort keys. <p> <pre><code> RuleBasedCollator </code></pre> has the following restrictions for efficiency (other subclasses may be used for more complex languages) : <ol> <li> If a special collation rule controlled by a &lt;modifier&gt; is specified it applies to the whole collator object. <li> All non-mentioned characters are at the end of the collation order. </li> </li> </ol> <p> The collation table is composed of a list of collation rules, where each rule is of one of three forms: <pre> &lt;modifier&gt; &lt;relation&gt; &lt;text-argument&gt; &lt;reset&gt; &lt;text-argument&gt; </pre> The definitions of the rule elements is as follows: <ul type="disc"> <li> <strong> Text-Argument </strong> : A text-argument is any sequence of characters, excluding special characters (that is, common whitespace characters [0009-000D, 0020] and rule syntax characters [0021-002F, 003A-0040, 005B-0060, 007B-007E]). If those characters are desired, you can put them in single quotes (e.g. ampersand =&gt; '&amp;'). Note that unquoted white space characters are ignored; e.g. <pre><code> b c </code></pre> is treated as <pre><code> bc </code></pre> . <li> <strong> Modifier </strong> : There are currently two modifiers that turn on special collation rules. <ul type="square"> <li> '@' : Turns on backwards sorting of accents (secondary differences), as in French. <li> '!' : Turns on Thai/Lao vowel-consonant swapping. If this rule is in force when a Thai vowel of the range \U0E40-\U0E44 precedes a Thai consonant of the range \U0E01-\U0E2E OR a Lao vowel of the range \U0EC0-\U0EC4 precedes a Lao consonant of the range \U0E81-\U0EAE then the vowel is placed after the consonant for collation purposes. </li> </li> </ul> <p> '@' : Indicates that accents are sorted backwards, as in French. <li> <strong> Relation </strong> : The relations are the following: <ul type="square"> <li> '&lt;' : Greater, as a letter difference (primary) <li> ';' : Greater, as an accent difference (secondary) <li> ',' : Greater, as a case difference (tertiary) <li> '=' : Equal </li> </li> </li> </li> </ul> <li> <strong> Reset </strong> : There is a single reset which is used primarily for contractions and expansions, but which can also be used to add a modification at the end of a set of rules. <p> '&amp;' : Indicates that the next rule follows the position to where the reset text-argument would be sorted. </p><pre><code>public class RuleBasedCollator\n</code></pre></section>	https://developer.android.com/reference/java/text/RuleBasedCollator.html
SimpleDateFormat	A										<section class="prog__container"><p> <pre><code> SimpleDateFormat </code></pre> is a concrete class for formatting and parsing dates in a locale-sensitive manner. It allows for formatting (date -&gt; text), parsing (text -&gt; date), and normalization. <p> <pre><code> SimpleDateFormat </code></pre> allows you to start by choosing any user-defined patterns for date-time formatting. However, you are encouraged to create a date-time formatter with either <pre><code> getTimeInstance </code></pre> , <pre><code> getDateInstance </code></pre> , or <pre><code> getDateTimeInstance </code></pre> in <pre><code> DateFormat </code></pre> . Each of these class methods can return a date/time formatter initialized with a default format pattern. You may modify the format pattern using the <pre><code> applyPattern </code></pre> methods as desired. For more information on using these methods, see <pre><code> DateFormat </code></pre> . <h4> Date and Time Patterns </h4> <p> Date and time formats are specified by <em> date and time pattern </em> strings. Within date and time pattern strings, unquoted letters from <pre><code> 'A' </code></pre> to <pre><code> 'Z' </code></pre> and from <pre><code> 'a' </code></pre> to <pre><code> 'z' </code></pre> are interpreted as pattern letters representing the components of a date or time string. Text can be quoted using single quotes ( <pre><code> ' </code></pre> ) to avoid interpretation. <pre><code> "''" </code></pre> represents a single quote. All other characters are not interpreted; they're simply copied into the output string during formatting or matched against the input string during parsing. <p> The following pattern letters are defined (all other characters from <pre><code> 'A' </code></pre> to <pre><code> 'Z' </code></pre> and from <pre><code> 'a' </code></pre> to <pre><code> 'z' </code></pre> are reserved): <blockquote> <table border="0" cellpadding="0" cellspacing="3" summary="Chart shows pattern letters, date/time component, presentation, and examples."> <tr bgcolor="#ccccff"> <th align="left"> Letter <th align="left"> Date or Time Component <th align="left"> Presentation <th align="left"> Examples <tr> <td> <pre><code> G </code></pre> <td> Era designator <td> Text <td> <pre><code> AD </code></pre> <tr bgcolor="#eeeeff"> <td> <pre><code> y </code></pre> <td> Year <td> Year <td> <pre><code> 1996 </code></pre> ; <pre><code> 96 </code></pre> <tr> <td> <pre><code> Y </code></pre> <td> Week year <td> Year <td> <pre><code> 2009 </code></pre> ; <pre><code> 09 </code></pre> <tr bgcolor="#eeeeff"> <td> <pre><code> M </code></pre> <td> Month in year <td> Month <td> <pre><code> July </code></pre> ; <pre><code> Jul </code></pre> ; <pre><code> 07 </code></pre> <tr> <td> <pre><code> w </code></pre> <td> Week in year <td> Number <td> <pre><code> 27 </code></pre> <tr bgcolor="#eeeeff"> <td> <pre><code> W </code></pre> <td> Week in month <td> Number <td> <pre><code> 2 </code></pre> <tr> <td> <pre><code> D </code></pre> <td> Day in year <td> Number <td> <pre><code> 189 </code></pre> <tr bgcolor="#eeeeff"> <td> <pre><code> d </code></pre> <td> Day in month <td> Number <td> <pre><code> 10 </code></pre> <tr> <td> <pre><code> F </code></pre> <td> Day of week in month <td> Number <td> <pre><code> 2 </code></pre> <tr bgcolor="#eeeeff"> <td> <pre><code> E </code></pre> <td> Day name in week <td> Text <td> <pre><code> Tuesday </code></pre> ; <pre><code> Tue </code></pre> <tr> <td> <pre><code> u </code></pre> <td> Day number of week (1 = Monday, ..., 7 = Sunday) <td> Number <td> <pre><code> 1 </code></pre> <tr bgcolor="#eeeeff"> <td> <pre><code> a </code></pre> <td> Am/pm marker <td> Text <td> <pre><code> PM </code></pre> <tr> <td> <pre><code> H </code></pre> <td> Hour in day (0-23) <td> Number <td> <pre><code> 0 </code></pre> <tr bgcolor="#eeeeff"> <td> <pre><code> k </code></pre> <td> Hour in day (1-24) <td> Number <td> <pre><code> 24 </code></pre> <tr> <td> <pre><code> K </code></pre> <td> Hour in am/pm (0-11) <td> Number <td> <pre><code> 0 </code></pre> <tr bgcolor="#eeeeff"> <td> <pre><code> h </code></pre> <td> Hour in am/pm (1-12) <td> Number <td> <pre><code> 12 </code></pre> <tr> <td> <pre><code> m </code></pre> <td> Minute in hour <td> Number <td> <pre><code> 30 </code></pre> <tr bgcolor="#eeeeff"> <td> <pre><code> s </code></pre> <td> Second in minute <td> Number <td> <pre><code> 55 </code></pre> <tr> <td> <pre><code> S </code></pre> <td> Millisecond <td> Number <td> <pre><code> 978 </code></pre> <tr bgcolor="#eeeeff"> <td> <pre><code> z </code></pre> <td> Time zone <td> General time zone <td> <pre><code> Pacific Standard Time </code></pre> ; <pre><code> PST </code></pre> ; <pre><code> GMT-08:00 </code></pre> <tr> <td> <pre><code> Z </code></pre> <td> Time zone <td> RFC 822 time zone <td> <pre><code> -0800 </code></pre> <tr bgcolor="#eeeeff"> <td> <pre><code> X </code></pre> <td> Time zone <td> ISO 8601 time zone <td> <pre><code> -08 </code></pre> ; <pre><code> -0800 </code></pre> ; <pre><code> -08:00 </code></pre> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </td> </td> </td> </td> </tr> </th> </th> </th> </th> </tr> </table> </blockquote> Pattern letters are usually repeated, as their number determines the exact presentation: <ul> <li> <strong> Text: </strong> For formatting, if the number of pattern letters is 4 or more, the full form is used; otherwise a short or abbreviated form is used if available. For parsing, both forms are accepted, independent of the number of pattern letters. <br> <br/> </br> </li> <li> <strong> Number: </strong> For formatting, the number of pattern letters is the minimum number of digits, and shorter numbers are zero-padded to this amount. For parsing, the number of pattern letters is ignored unless it's needed to separate two adjacent fields. <br> <br/> </br> </li> <li> <strong> Year: </strong> If the formatter's <pre><code> Calendar </code></pre> is the Gregorian calendar, the following rules are applied. <br> <ul> <li> For formatting, if the number of pattern letters is 2, the year is truncated to 2 digits; otherwise it is interpreted as a number . <li> For parsing, if the number of pattern letters is more than 2, the year is interpreted literally, regardless of the number of digits. So using the pattern "MM/dd/yyyy", "01/11/12" parses to Jan 11, 12 A.D. <li> For parsing with the abbreviated year pattern ("y" or "yy"), <pre><code> SimpleDateFormat </code></pre> must interpret the abbreviated year relative to some century. It does this by adjusting dates to be within 80 years before and 20 years after the time the <pre><code> SimpleDateFormat </code></pre> instance is created. For example, using a pattern of "MM/dd/yy" and a <pre><code> SimpleDateFormat </code></pre> instance created on Jan 1, 1997, the string "01/11/12" would be interpreted as Jan 11, 2012 while the string "05/04/64" would be interpreted as May 4, 1964. During parsing, only strings consisting of exactly two digits, as defined by <pre><code> isDigit(char) </code></pre> , will be parsed into the default century. Any other numeric string, such as a one digit string, a three or more digit string, or a two digit string that isn't all digits (for example, "-1"), is interpreted literally. So "01/02/3" or "01/02/003" are parsed, using the same pattern, as Jan 2, 3 AD. Likewise, "01/02/-3" is parsed as Jan 2, 4 BC. </li> </li> </li> </ul> Otherwise, calendar system specific forms are applied. For both formatting and parsing, if the number of pattern letters is 4 or more, a calendar specific long form </br> </li> </ul> </p><pre><code>public class SimpleDateFormat\n</code></pre></section>	https://developer.android.com/reference/java/text/SimpleDateFormat.html
StringCharacterIterator	A										<section class="prog__container"><p> <pre><code> StringCharacterIterator </code></pre> implements the <pre><code> CharacterIterator </code></pre> protocol for a <pre><code> String </code></pre> . The <pre><code> StringCharacterIterator </code></pre> class iterates over the entire <pre><code> String </code></pre> .</p><pre><code>public final class StringCharacterIterator\nextends Object</code></pre></section>	https://developer.android.com/reference/java/text/StringCharacterIterator.html
AbstractCollection	A										<section class="prog__container"><p> This class provides a skeletal implementation of the <tt> Collection </tt> interface, to minimize the effort required to implement this interface. <p> To implement an unmodifiable collection, the programmer needs only to extend this class and provide implementations for the <tt> iterator </tt> and <tt> size </tt> methods. (The iterator returned by the <tt> iterator </tt> method must implement <tt> hasNext </tt> and <tt> next </tt> .) <p> To implement a modifiable collection, the programmer must additionally override this class's <tt> add </tt> method (which otherwise throws an <tt> UnsupportedOperationException </tt> ), and the iterator returned by the <tt> iterator </tt> method must additionally implement its <tt> remove </tt> method. <p> The programmer should generally provide a void (no argument) and <tt> Collection </tt> constructor, as per the recommendation in the <tt> Collection </tt> interface specification. <p> The documentation for each non-abstract method in this class describes its implementation in detail. Each of these methods may be overridden if the collection being implemented admits a more efficient implementation. <p> This class is a member of the Java Collections Framework . </p><pre><code>public abstract class AbstractCollection\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/AbstractCollection.html
AbstractList	A										<section class="prog__container"><p> This class provides a skeletal implementation of the <pre><code> List </code></pre> interface to minimize the effort required to implement this interface backed by a "random access" data store (such as an array). For sequential access data (such as a linked list), <pre><code> AbstractSequentialList </code></pre> should be used in preference to this class. <p> To implement an unmodifiable list, the programmer needs only to extend this class and provide implementations for the <pre><code> get(int) </code></pre> and <pre><code> size() </code></pre> methods. <p> To implement a modifiable list, the programmer must additionally override the <pre><code> set(int, E) </code></pre> method (which otherwise throws an <pre><code> UnsupportedOperationException </code></pre> ). If the list is variable-size the programmer must additionally override the <pre><code> add(int, E) </code></pre> and <pre><code> remove(int) </code></pre> methods. <p> The programmer should generally provide a void (no argument) and collection constructor, as per the recommendation in the <pre><code> Collection </code></pre> interface specification. <p> Unlike the other abstract collection implementations, the programmer does <i> not </i> have to provide an iterator implementation; the iterator and list iterator are implemented by this class, on top of the "random access" methods: <pre><code> get(int) </code></pre> , <pre><code> set(int, E) </code></pre> , <pre><code> add(int, E) </code></pre> and <pre><code> remove(int) </code></pre> . <p> The documentation for each non-abstract method in this class describes its implementation in detail. Each of these methods may be overridden if the collection being implemented admits a more efficient implementation. <p> This class is a member of the Java Collections Framework . </p><pre><code>public abstract class AbstractList\n</code></pre></section>	https://developer.android.com/reference/java/util/AbstractList.html
AbstractMap	A										<section class="prog__container"><p> This class provides a skeletal implementation of the <tt> Map </tt> interface, to minimize the effort required to implement this interface. <p> To implement an unmodifiable map, the programmer needs only to extend this class and provide an implementation for the <tt> entrySet </tt> method, which returns a set-view of the map's mappings. Typically, the returned set will, in turn, be implemented atop <tt> AbstractSet </tt> . This set should not support the <tt> add </tt> or <tt> remove </tt> methods, and its iterator should not support the <tt> remove </tt> method. <p> To implement a modifiable map, the programmer must additionally override this class's <tt> put </tt> method (which otherwise throws an <tt> UnsupportedOperationException </tt> ), and the iterator returned by <tt> entrySet().iterator() </tt> must additionally implement its <tt> remove </tt> method. <p> The programmer should generally provide a void (no argument) and map constructor, as per the recommendation in the <tt> Map </tt> interface specification. <p> The documentation for each non-abstract method in this class describes its implementation in detail. Each of these methods may be overridden if the map being implemented admits a more efficient implementation. <p> This class is a member of the Java Collections Framework . </p><pre><code>public abstract class AbstractMap\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/AbstractMap.html
AbstractMap.SimpleEntry	A										<section class="prog__container"><p> An Entry maintaining a key and a value. The value may be changed using the <tt> setValue </tt> method. This class facilitates the process of building custom map implementations. For example, it may be convenient to return arrays of <tt> SimpleEntry </tt> instances in method <tt> Map.entrySet().toArray </tt> .</p><pre><code>public static class AbstractMap.SimpleEntry\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/AbstractMap.SimpleEntry.html
AbstractMap.SimpleImmutableEntry	A										<section class="prog__container"><p> An Entry maintaining an immutable key and value. This class does not support method <tt> setValue </tt> . This class may be convenient in methods that return thread-safe snapshots of key-value mappings.</p><pre><code>public static class AbstractMap.SimpleImmutableEntry\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/AbstractMap.SimpleImmutableEntry.html
AbstractQueue	A										<section class="prog__container"><p> This class provides skeletal implementations of some <pre><code> Queue </code></pre> operations. The implementations in this class are appropriate when the base implementation does <em> not </em> allow <pre><code> null </code></pre> elements. Methods <pre><code> add </code></pre> , <pre><code> remove </code></pre> , and <pre><code> element </code></pre> are based on <pre><code> offer </code></pre> , <pre><code> poll </code></pre> , and <pre><code> peek </code></pre> , respectively, but throw exceptions instead of indicating failure via <pre><code> false </code></pre> or <pre><code> null </code></pre> returns. <p> A <pre><code> Queue </code></pre> implementation that extends this class must minimally define a method <pre><code> offer(E) </code></pre> which does not permit insertion of <pre><code> null </code></pre> elements, along with methods <pre><code> peek() </code></pre> , <pre><code> poll() </code></pre> , <pre><code> size() </code></pre> , and <pre><code> iterator() </code></pre> . Typically, additional methods will be overridden as well. If these requirements cannot be met, consider instead subclassing <pre><code> AbstractCollection </code></pre> . </p><pre><code>public abstract class AbstractQueue\n</code></pre></section>	https://developer.android.com/reference/java/util/AbstractQueue.html
AbstractSequentialList	A										<section class="prog__container"><p> This class provides a skeletal implementation of the <tt> List </tt> interface to minimize the effort required to implement this interface backed by a "sequential access" data store (such as a linked list). For random access data (such as an array), <tt> AbstractList </tt> should be used in preference to this class. <p> This class is the opposite of the <tt> AbstractList </tt> class in the sense that it implements the "random access" methods ( <tt> get(int index) </tt> , <tt> set(int index, E element) </tt> , <tt> add(int index, E element) </tt> and <tt> remove(int index) </tt> ) on top of the list's list iterator, instead of the other way around. <p> To implement a list the programmer needs only to extend this class and provide implementations for the <tt> listIterator </tt> and <tt> size </tt> methods. For an unmodifiable list, the programmer need only implement the list iterator's <tt> hasNext </tt> , <tt> next </tt> , <tt> hasPrevious </tt> , <tt> previous </tt> and <tt> index </tt> methods. <p> For a modifiable list the programmer should additionally implement the list iterator's <tt> set </tt> method. For a variable-size list the programmer should additionally implement the list iterator's <tt> remove </tt> and <tt> add </tt> methods. <p> The programmer should generally provide a void (no argument) and collection constructor, as per the recommendation in the <tt> Collection </tt> interface specification. <p> This class is a member of the Java Collections Framework . </p><pre><code>public abstract class AbstractSequentialList\n</code></pre></section>	https://developer.android.com/reference/java/util/AbstractSequentialList.html
AbstractSet	A										<section class="prog__container"><p> This class provides a skeletal implementation of the <tt> Set </tt> interface to minimize the effort required to implement this interface. <p> The process of implementing a set by extending this class is identical to that of implementing a Collection by extending AbstractCollection, except that all of the methods and constructors in subclasses of this class must obey the additional constraints imposed by the <tt> Set </tt> interface (for instance, the add method must not permit addition of multiple instances of an object to a set). <p> Note that this class does not override any of the implementations from the <tt> AbstractCollection </tt> class. It merely adds implementations for <tt> equals </tt> and <tt> hashCode </tt> . <p> This class is a member of the Java Collections Framework . </p><pre><code>public abstract class AbstractSet\n</code></pre></section>	https://developer.android.com/reference/java/util/AbstractSet.html
ArrayDeque	A										<section class="prog__container"><p> Resizable-array implementation of the <pre><code> Deque </code></pre> interface. Array deques have no capacity restrictions; they grow as necessary to support usage. They are not thread-safe; in the absence of external synchronization, they do not support concurrent access by multiple threads. Null elements are prohibited. This class is likely to be faster than <pre><code> Stack </code></pre> when used as a stack, and faster than <pre><code> LinkedList </code></pre> when used as a queue. <p> Most <pre><code> ArrayDeque </code></pre> operations run in amortized constant time. Exceptions include <pre><code> remove </code></pre> , <pre><code> removeFirstOccurrence </code></pre> , <pre><code> removeLastOccurrence </code></pre> , <pre><code> contains </code></pre> , <pre><code> iterator.remove() </code></pre> , and the bulk operations, all of which run in linear time. <p> The iterators returned by this class's <pre><code> iterator </code></pre> method are <em> fail-fast </em> : If the deque is modified at any time after the iterator is created, in any way except through the iterator's own <pre><code> remove </code></pre> method, the iterator will generally throw a <pre><code> ConcurrentModificationException </code></pre> . Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. <p> Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <pre><code> ConcurrentModificationException </code></pre> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i> the fail-fast behavior of iterators should be used only to detect bugs. </i> <p> This class and its iterator implement all of the <em> optional </em> methods of the <pre><code> Collection </code></pre> and <pre><code> Iterator </code></pre> interfaces. </p><pre><code>public class ArrayDeque\n</code></pre></section>	https://developer.android.com/reference/java/util/ArrayDeque.html
ArrayList	A										<section class="prog__container"><p> Resizable-array implementation of the <tt> List </tt> interface. Implements all optional list operations, and permits all elements, including <tt> null </tt> . In addition to implementing the <tt> List </tt> interface, this class provides methods to manipulate the size of the array that is used internally to store the list. (This class is roughly equivalent to <tt> Vector </tt> , except that it is unsynchronized.) <p> The <tt> size </tt> , <tt> isEmpty </tt> , <tt> get </tt> , <tt> set </tt> , <tt> iterator </tt> , and <tt> listIterator </tt> operations run in constant time. The <tt> add </tt> operation runs in <i> amortized constant time </i> , that is, adding n elements requires O(n) time. All of the other operations run in linear time (roughly speaking). The constant factor is low compared to that for the <tt> LinkedList </tt> implementation. <p> Each <tt> ArrayList </tt> instance has a <i> capacity </i> . The capacity is the size of the array used to store the elements in the list. It is always at least as large as the list size. As elements are added to an ArrayList, its capacity grows automatically. The details of the growth policy are not specified beyond the fact that adding an element has constant amortized time cost. <p> An application can increase the capacity of an <tt> ArrayList </tt> instance before adding a large number of elements using the <tt> ensureCapacity </tt> operation. This may reduce the amount of incremental reallocation. <p> <strong> Note that this implementation is not synchronized. </strong> If multiple threads access an <tt> ArrayList </tt> instance concurrently, and at least one of the threads modifies the list structurally, it <i> must </i> be synchronized externally. (A structural modification is any operation that adds or deletes one or more elements, or explicitly resizes the backing array; merely setting the value of an element is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the list. If no such object exists, the list should be "wrapped" using the <pre><code> Collections.synchronizedList </code></pre> method. This is best done at creation time, to prevent accidental unsynchronized access to the list: <pre> List list = Collections.synchronizedList(new ArrayList(...));</pre> <p> The iterators returned by this class's <pre><code> iterator </code></pre> and <pre><code> listIterator </code></pre> methods are <em> fail-fast </em> : if the list is structurally modified at any time after the iterator is created, in any way except through the iterator's own <pre><code> remove </code></pre> or <pre><code> add </code></pre> methods, the iterator will throw a <pre><code> ConcurrentModificationException </code></pre> . Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. <p> Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <pre><code> ConcurrentModificationException </code></pre> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i> the fail-fast behavior of iterators should be used only to detect bugs. </i> <p> This class is a member of the Java Collections Framework . </p><pre><code>public class ArrayList\n</code></pre></section>	https://developer.android.com/reference/java/util/ArrayList.html
Arrays	A										<section class="prog__container"><p> This class contains various methods for manipulating arrays (such as sorting and searching). This class also contains a static factory that allows arrays to be viewed as lists. <p> The methods in this class all throw a <pre><code> NullPointerException </code></pre> , if the specified array reference is null, except where noted. <p> The documentation for the methods contained in this class includes briefs description of the <i> implementations </i> . Such descriptions should be regarded as <i> implementation notes </i> , rather than parts of the <i> specification </i> . Implementors should feel free to substitute other algorithms, so long as the specification itself is adhered to. (For example, the algorithm used by <pre><code> sort(Object[]) </code></pre> does not have to be a MergeSort, but it does have to be <i> stable </i> .) <p> This class is a member of the Java Collections Framework . </p><pre><code>public class Arrays\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Arrays.html
BitSet	A										<section class="prog__container"><p> This class implements a vector of bits that grows as needed. Each component of the bit set has a <pre><code> boolean </code></pre> value. The bits of a <pre><code> BitSet </code></pre> are indexed by nonnegative integers. Individual indexed bits can be examined, set, or cleared. One <pre><code> BitSet </code></pre> may be used to modify the contents of another <pre><code> BitSet </code></pre> through logical AND, logical inclusive OR, and logical exclusive OR operations. <p> By default, all bits in the set initially have the value <pre><code> false </code></pre> . <p> Every bit set has a current size, which is the number of bits of space currently in use by the bit set. Note that the size is related to the implementation of a bit set, so it may change with implementation. The length of a bit set relates to logical length of a bit set and is defined independently of implementation. <p> Unless otherwise noted, passing a null parameter to any of the methods in a <pre><code> BitSet </code></pre> will result in a <pre><code> NullPointerException </code></pre> . <p> A <pre><code> BitSet </code></pre> is not safe for multithreaded use without external synchronization. </p><pre><code>public class BitSet\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/BitSet.html
Calendar	A										<section class="prog__container"><p> The <pre><code> Calendar </code></pre> class is an abstract class that provides methods for converting between a specific instant in time and a set of <pre><code> calendar fields </code></pre> such as <pre><code> YEAR </code></pre> , <pre><code> MONTH </code></pre> , <pre><code> DAY_OF_MONTH </code></pre> , <pre><code> HOUR </code></pre> , and so on, and for manipulating the calendar fields, such as getting the date of the next week. An instant in time can be represented by a millisecond value that is an offset from the <em> Epoch </em> , January 1, 1970 00:00:00.000 GMT (Gregorian). <p> The class also provides additional fields and methods for implementing a concrete calendar system outside the package. Those fields and methods are defined as <pre><code> protected </code></pre> . <p> Like other locale-sensitive classes, <pre><code> Calendar </code></pre> provides a class method, <pre><code> getInstance </code></pre> , for getting a generally useful object of this type. <pre><code> Calendar </code></pre> 's <pre><code> getInstance </code></pre> method returns a <pre><code> Calendar </code></pre> object whose calendar fields have been initialized with the current date and time: <blockquote> <pre> Calendar rightNow = Calendar.getInstance(); </pre> </blockquote> <p> A <pre><code> Calendar </code></pre> object can produce all the calendar field values needed to implement the date-time formatting for a particular language and calendar style (for example, Japanese-Gregorian, Japanese-Traditional). <pre><code> Calendar </code></pre> defines the range of values returned by certain calendar fields, as well as their meaning. For example, the first month of the calendar system has value <pre><code> MONTH == JANUARY </code></pre> for all calendars. Other values are defined by the concrete subclass, such as <pre><code> ERA </code></pre> . See individual field documentation and subclass documentation for details. <h4> Getting and Setting Calendar Field Values </h4> <p> The calendar field values can be set by calling the <pre><code> set </code></pre> methods. Any field values set in a <pre><code> Calendar </code></pre> will not be interpreted until it needs to calculate its time value (milliseconds from the Epoch) or values of the calendar fields. Calling the <pre><code> get </code></pre> , <pre><code> getTimeInMillis </code></pre> , <pre><code> getTime </code></pre> , <pre><code> add </code></pre> and <pre><code> roll </code></pre> involves such calculation. <h4> Leniency </h4> <p> <pre><code> Calendar </code></pre> has two modes for interpreting the calendar fields, <em> lenient </em> and <em> non-lenient </em> . When a <pre><code> Calendar </code></pre> is in lenient mode, it accepts a wider range of calendar field values than it produces. When a <pre><code> Calendar </code></pre> recomputes calendar field values for return by <pre><code> get() </code></pre> , all of the calendar fields are normalized. For example, a lenient <pre><code> GregorianCalendar </code></pre> interprets <pre><code> MONTH == JANUARY </code></pre> , <pre><code> DAY_OF_MONTH == 32 </code></pre> as February 1. <p> When a <pre><code> Calendar </code></pre> is in non-lenient mode, it throws an exception if there is any inconsistency in its calendar fields. For example, a <pre><code> GregorianCalendar </code></pre> always produces <pre><code> DAY_OF_MONTH </code></pre> values between 1 and the length of the month. A non-lenient <pre><code> GregorianCalendar </code></pre> throws an exception upon calculating its time or calendar field values if any out-of-range field value has been set. <h4> First Week </h4> <pre><code> Calendar </code></pre> defines a locale-specific seven day week using two parameters: the first day of the week and the minimal days in first week (from 1 to 7). These numbers are taken from the locale resource data when a <pre><code> Calendar </code></pre> is constructed. They may also be specified explicitly through the methods for setting their values. <p> When setting or getting the <pre><code> WEEK_OF_MONTH </code></pre> or <pre><code> WEEK_OF_YEAR </code></pre> fields, <pre><code> Calendar </code></pre> must determine the first week of the month or year as a reference point. The first week of a month or year is defined as the earliest seven day period beginning on <pre><code> getFirstDayOfWeek() </code></pre> and containing at least <pre><code> getMinimalDaysInFirstWeek() </code></pre> days of that month or year. Weeks numbered ..., -1, 0 precede the first week; weeks numbered 2, 3,... follow it. Note that the normalized numbering returned by <pre><code> get() </code></pre> may be different. For example, a specific <pre><code> Calendar </code></pre> subclass may designate the week before week 1 of a year as week <pre><code> <i> n </i> </code></pre> of the previous year. <h4> Calendar Fields Resolution </h4> When computing a date and time from the calendar fields, there may be insufficient information for the computation (such as only year and month with no day of month), or there may be inconsistent information (such as Tuesday, July 15, 1996 (Gregorian) -- July 15, 1996 is actually a Monday). <pre><code> Calendar </code></pre> will resolve calendar field values to determine the date and time in the following way. <p> If there is any conflict in calendar field values, <pre><code> Calendar </code></pre> gives priorities to calendar fields that have been set more recently. The following are the default combinations of the calendar fields. The most recent combination, as determined by the most recently set single field, will be used. <p> For the date fields : <blockquote> <pre> YEAR + MONTH + DAY_OF_MONTH YEAR + MONTH + WEEK_OF_MONTH + DAY_OF_WEEK YEAR + MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK YEAR + DAY_OF_YEAR YEAR + DAY_OF_WEEK + WEEK_OF_YEAR </pre> </blockquote> For the time of day fields : <blockquote> <pre> HOUR_OF_DAY AM_PM + HOUR </pre> </blockquote> <p> If there are any calendar fields whose values haven't been set in the selected field combination, <pre><code> Calendar </code></pre> uses their default values. The default value of each field may vary by concrete calendar systems. For example, in <pre><code> GregorianCalendar </code></pre> , the default of a field is the same as that of the start of the Epoch: i.e., <pre><code> YEAR = 1970 </code></pre> , <pre><code> MONTH = JANUARY </code></pre> , <pre><code> DAY_OF_MONTH = 1 </code></pre> , etc. <p> <strong> Note: </strong> There are certain possible ambiguities in interpretation of certain singular times, which are resolved in the following ways: <ol> <li> 23:59 is the last minute of the day and 00:00 is the first minute of the next day. Thus, 23:59 on Dec 31, 1999 &lt; 00:00 on Jan 1, 2000 &lt; 00:01 on Jan 1, 2000. <li> Although historically not precise, midnight also belongs to "am", and noon belongs to "pm", so on the same day, 12:00 am (midnight) &lt; 12:01 am, and 12:00 pm (noon) &lt; 12:01 pm </li> </li> </ol> <p> The date or time format strings are not part of the definition of a calendar, as those must be modifiable or overridable by the user at runtime. Use <pre><code> DateFormat </code></pre> to format dates. <h4> Field Manipulation </h4> The calendar fields can be changed using three methods: <pre><code> set() </code></pre> , <pre><code> add() </code></pre> , and <pre><code> roll() </code></pre> . </p><pre><code>public abstract class Calendar\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Calendar.html
Collection	A										<section class="prog__container"><p> The root interface in the <i> collection hierarchy </i> . A collection represents a group of objects, known as its <i> elements </i> . Some collections allow duplicate elements and others do not. Some are ordered and others unordered. The JDK does not provide any <i> direct </i> implementations of this interface: it provides implementations of more specific subinterfaces like <tt> Set </tt> and <tt> List </tt> . This interface is typically used to pass collections around and manipulate them where maximum generality is desired. <p> <i> Bags </i> or <i> multisets </i> (unordered collections that may contain duplicate elements) should implement this interface directly. <p> All general-purpose <tt> Collection </tt> implementation classes (which typically implement <tt> Collection </tt> indirectly through one of its subinterfaces) should provide two "standard" constructors: a void (no arguments) constructor, which creates an empty collection, and a constructor with a single argument of type <tt> Collection </tt> , which creates a new collection with the same elements as its argument. In effect, the latter constructor allows the user to copy any collection, producing an equivalent collection of the desired implementation type. There is no way to enforce this convention (as interfaces cannot contain constructors) but all of the general-purpose <tt> Collection </tt> implementations in the Java platform libraries comply. <p> The "destructive" methods contained in this interface, that is, the methods that modify the collection on which they operate, are specified to throw <tt> UnsupportedOperationException </tt> if this collection does not support the operation. If this is the case, these methods may, but are not required to, throw an <tt> UnsupportedOperationException </tt> if the invocation would have no effect on the collection. For example, invoking the <pre><code> addAll(Collection) </code></pre> method on an unmodifiable collection may, but is not required to, throw the exception if the collection to be added is empty. <p> Some collection implementations have restrictions on the elements that they may contain. For example, some implementations prohibit null elements, and some have restrictions on the types of their elements. Attempting to add an ineligible element throws an unchecked exception, typically <tt> NullPointerException </tt> or <tt> ClassCastException </tt> . Attempting to query the presence of an ineligible element may throw an exception, or it may simply return false; some implementations will exhibit the former behavior and some will exhibit the latter. More generally, attempting an operation on an ineligible element whose completion would not result in the insertion of an ineligible element into the collection may throw an exception or it may succeed, at the option of the implementation. Such exceptions are marked as "optional" in the specification for this interface. <p> It is up to each collection to determine its own synchronization policy. In the absence of a stronger guarantee by the implementation, undefined behavior may result from the invocation of any method on a collection that is being mutated by another thread; this includes direct invocations, passing the collection to a method that might perform invocations, and using an existing iterator to examine the collection. <p> Many methods in Collections Framework interfaces are defined in terms of the <pre><code> equals </code></pre> method. For example, the specification for the <pre><code> contains(Object o) </code></pre> method says: "returns <tt> true </tt> if and only if this collection contains at least one element <tt> e </tt> such that <tt> (o==null ? e==null : o.equals(e)) </tt> ." This specification should <i> not </i> be construed to imply that invoking <tt> Collection.contains </tt> with a non-null argument <tt> o </tt> will cause <tt> o.equals(e) </tt> to be invoked for any element <tt> e </tt> . Implementations are free to implement optimizations whereby the <tt> equals </tt> invocation is avoided, for example, by first comparing the hash codes of the two elements. (The <pre><code> hashCode() </code></pre> specification guarantees that two objects with unequal hash codes cannot be equal.) More generally, implementations of the various Collections Framework interfaces are free to take advantage of the specified behavior of underlying <pre><code> Object </code></pre> methods wherever the implementor deems it appropriate. <p> This interface is a member of the Java Collections Framework . </p><pre><code>public interface Collection\nimplements Iterable&lt;E&gt;</code></pre></section>	https://developer.android.com/reference/java/util/Collection.html
Collections	A										<section class="prog__container"><p> This class consists exclusively of static methods that operate on or return collections. It contains polymorphic algorithms that operate on collections, "wrappers", which return a new collection backed by a specified collection, and a few other odds and ends. <p> The methods of this class all throw a <tt> NullPointerException </tt> if the collections or class objects provided to them are null. <p> The documentation for the polymorphic algorithms contained in this class generally includes a brief description of the <i> implementation </i> . Such descriptions should be regarded as <i> implementation notes </i> , rather than parts of the <i> specification </i> . Implementors should feel free to substitute other algorithms, so long as the specification itself is adhered to. (For example, the algorithm used by <tt> sort </tt> does not have to be a mergesort, but it does have to be <i> stable </i> .) <p> The "destructive" algorithms contained in this class, that is, the algorithms that modify the collection on which they operate, are specified to throw <tt> UnsupportedOperationException </tt> if the collection does not support the appropriate mutation primitive(s), such as the <tt> set </tt> method. These algorithms may, but are not required to, throw this exception if an invocation would have no effect on the collection. For example, invoking the <tt> sort </tt> method on an unmodifiable list that is already sorted may or may not throw <tt> UnsupportedOperationException </tt> . <p> This class is a member of the Java Collections Framework . </p><pre><code>public class Collections\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Collections.html
Comparator	A										<section class="prog__container"><p> A comparison function, which imposes a <i> total ordering </i> on some collection of objects. Comparators can be passed to a sort method (such as <pre><code> Collections.sort </code></pre> or <pre><code> Arrays.sort </code></pre> ) to allow precise control over the sort order. Comparators can also be used to control the order of certain data structures (such as <pre><code> sorted sets </code></pre> or <pre><code> sorted maps </code></pre> ), or to provide an ordering for collections of objects that don't have a <pre><code> natural ordering </code></pre> . <p> The ordering imposed by a comparator <tt> c </tt> on a set of elements <tt> S </tt> is said to be <i> consistent with equals </i> if and only if <tt> c.compare(e1, e2)==0 </tt> has the same boolean value as <tt> e1.equals(e2) </tt> for every <tt> e1 </tt> and <tt> e2 </tt> in <tt> S </tt> . <p> Caution should be exercised when using a comparator capable of imposing an ordering inconsistent with equals to order a sorted set (or sorted map). Suppose a sorted set (or sorted map) with an explicit comparator <tt> c </tt> is used with elements (or keys) drawn from a set <tt> S </tt> . If the ordering imposed by <tt> c </tt> on <tt> S </tt> is inconsistent with equals, the sorted set (or sorted map) will behave "strangely." In particular the sorted set (or sorted map) will violate the general contract for set (or map), which is defined in terms of <tt> equals </tt> . <p> For example, suppose one adds two elements <pre><code> a </code></pre> and <pre><code> b </code></pre> such that <pre><code> (a.equals(b) &amp;&amp; c.compare(a, b) != 0) </code></pre> to an empty <pre><code> TreeSet </code></pre> with comparator <pre><code> c </code></pre> . The second <pre><code> add </code></pre> operation will return true (and the size of the tree set will increase) because <pre><code> a </code></pre> and <pre><code> b </code></pre> are not equivalent from the tree set's perspective, even though this is contrary to the specification of the <pre><code> Set.add </code></pre> method. <p> Note: It is generally a good idea for comparators to also implement <tt> java.io.Serializable </tt> , as they may be used as ordering methods in serializable data structures (like <pre><code> TreeSet </code></pre> , <pre><code> TreeMap </code></pre> ). In order for the data structure to serialize successfully, the comparator (if provided) must implement <tt> Serializable </tt> . <p> For the mathematically inclined, the <i> relation </i> that defines the <i> imposed ordering </i> that a given comparator <tt> c </tt> imposes on a given set of objects <tt> S </tt> is: <pre> {(x, y) such that c.compare(x, y) &lt;= 0}. </pre> The <i> quotient </i> for this total order is: <pre> {(x, y) such that c.compare(x, y) == 0}. </pre> It follows immediately from the contract for <tt> compare </tt> that the quotient is an <i> equivalence relation </i> on <tt> S </tt> , and that the imposed ordering is a <i> total order </i> on <tt> S </tt> . When we say that the ordering imposed by <tt> c </tt> on <tt> S </tt> is <i> consistent with equals </i> , we mean that the quotient for the ordering is the equivalence relation defined by the objects' <pre><code> equals(Object) </code></pre> method(s): <pre> {(x, y) such that x.equals(y)}. </pre> <p> Unlike <pre><code> Comparable </code></pre> , a comparator may optionally permit comparison of null arguments, while maintaining the requirements for an equivalence relation. <p> This interface is a member of the Java Collections Framework . </p><pre><code>public interface Comparator\n</code></pre></section>	https://developer.android.com/reference/java/util/Comparator.html
ConcurrentModificationException	A										<section class="prog__container"><p> This exception may be thrown by methods that have detected concurrent modification of an object when such modification is not permissible. <p> For example, it is not generally permissible for one thread to modify a Collection while another thread is iterating over it. In general, the results of the iteration are undefined under these circumstances. Some Iterator implementations (including those of all the general purpose collection implementations provided by the JRE) may choose to throw this exception if this behavior is detected. Iterators that do this are known as <i> fail-fast </i> iterators, as they fail quickly and cleanly, rather that risking arbitrary, non-deterministic behavior at an undetermined time in the future. <p> Note that this exception does not always indicate that an object has been concurrently modified by a <i> different </i> thread. If a single thread issues a sequence of method invocations that violates the contract of an object, the object may throw this exception. For example, if a thread modifies a collection directly while it is iterating over the collection with a fail-fast iterator, the iterator will throw this exception. <p> Note that fail-fast behavior cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast operations throw <pre><code> ConcurrentModificationException </code></pre> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i> <pre><code> ConcurrentModificationException </code></pre> should be used only to detect bugs. </i> </p><pre><code>public class ConcurrentModificationException\n</code></pre></section>	https://developer.android.com/reference/java/util/ConcurrentModificationException.html
Currency	A										<section class="prog__container"><p> Represents a currency. Currencies are identified by their ISO 4217 currency codes. Visit the ISO web site for more information, including a table of currency codes. <p> The class is designed so that there's never more than one <pre><code> Currency </code></pre> instance for any given currency. Therefore, there's no public constructor. You obtain a <pre><code> Currency </code></pre> instance using the <pre><code> getInstance </code></pre> methods. <p> Users can supersede the Java runtime currency data by creating a properties file named <pre><code> &lt;JAVA_HOME&gt;/lib/currency.properties </code></pre> . The contents of the properties file are key/value pairs of the ISO 3166 country codes and the ISO 4217 currency data respectively. The value part consists of three ISO 4217 values of a currency, i.e., an alphabetic code, a numeric code, and a minor unit. Those three ISO 4217 values are separated by commas. The lines which start with '#'s are considered comment lines. For example, <p> <pre><code> #Sample currency properties <br> JP=JPZ,999,0 </br> </code></pre> <p> will supersede the currency data for Japan. </p><pre><code>public final class Currency\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Currency.html
Date	A										<section class="prog__container"><p> The class <pre><code> Date </code></pre> represents a specific instant in time, with millisecond precision. <p> Prior to JDK 1.1, the class <pre><code> Date </code></pre> had two additional functions. It allowed the interpretation of dates as year, month, day, hour, minute, and second values. It also allowed the formatting and parsing of date strings. Unfortunately, the API for these functions was not amenable to internationalization. As of JDK 1.1, the <pre><code> Calendar </code></pre> class should be used to convert between dates and time fields and the <pre><code> DateFormat </code></pre> class should be used to format and parse date strings. The corresponding methods in <pre><code> Date </code></pre> are deprecated. <p> Although the <pre><code> Date </code></pre> class is intended to reflect coordinated universal time (UTC), it may not do so exactly, depending on the host environment of the Java Virtual Machine. Nearly all modern operating systems assume that 1 day = 24 × 60 × 60 = 86400 seconds in all cases. In UTC, however, about once every year or two there is an extra second, called a "leap second." The leap second is always added as the last second of the day, and always on December 31 or June 30. For example, the last minute of the year 1995 was 61 seconds long, thanks to an added leap second. Most computer clocks are not accurate enough to be able to reflect the leap-second distinction. <p> Some computer standards are defined in terms of Greenwich mean time (GMT), which is equivalent to universal time (UT). GMT is the "civil" name for the standard; UT is the "scientific" name for the same standard. The distinction between UTC and UT is that UTC is based on an atomic clock and UT is based on astronomical observations, which for all practical purposes is an invisibly fine hair to split. Because the earth's rotation is not uniform (it slows down and speeds up in complicated ways), UT does not always flow uniformly. Leap seconds are introduced as needed into UTC so as to keep UTC within 0.9 seconds of UT1, which is a version of UT with certain corrections applied. There are other time and date systems as well; for example, the time scale used by the satellite-based global positioning system (GPS) is synchronized to UTC but is <i> not </i> adjusted for leap seconds. An interesting source of further information is the U.S. Naval Observatory, particularly the Directorate of Time at: <blockquote> <pre> http://tycho.usno.navy.mil </pre> </blockquote> <p> and their definitions of "Systems of Time" at: <blockquote> <pre> http://tycho.usno.navy.mil/systime.html </pre> </blockquote> <p> In all methods of class <pre><code> Date </code></pre> that accept or return year, month, date, hours, minutes, and seconds values, the following representations are used: <ul> <li> A year <i> y </i> is represented by the integer <i> y </i> <pre><code> - 1900 </code></pre> . <li> A month is represented by an integer from 0 to 11; 0 is January, 1 is February, and so forth; thus 11 is December. <li> A date (day of month) is represented by an integer from 1 to 31 in the usual manner. <li> An hour is represented by an integer from 0 to 23. Thus, the hour from midnight to 1 a.m. is hour 0, and the hour from noon to 1 p.m. is hour 12. <li> A minute is represented by an integer from 0 to 59 in the usual manner. <li> A second is represented by an integer from 0 to 61; the values 60 and 61 occur only for leap seconds and even then only in Java implementations that actually track leap seconds correctly. Because of the manner in which leap seconds are currently introduced, it is extremely unlikely that two leap seconds will occur in the same minute, but this specification follows the date and time conventions for ISO C. </li> </li> </li> </li> </li> </li> </ul> <p> In all cases, arguments given to methods for these purposes need not fall within the indicated ranges; for example, a date may be specified as January 32 and is interpreted as meaning February 1. </p><pre><code>public class Date\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Date.html
Deque	A										<section class="prog__container"><p> A linear collection that supports element insertion and removal at both ends. The name <i> deque </i> is short for "double ended queue" and is usually pronounced "deck". Most <pre><code> Deque </code></pre> implementations place no fixed limits on the number of elements they may contain, but this interface supports capacity-restricted deques as well as those with no fixed size limit. <p> This interface defines methods to access the elements at both ends of the deque. Methods are provided to insert, remove, and examine the element. Each of these methods exists in two forms: one throws an exception if the operation fails, the other returns a special value (either <pre><code> null </code></pre> or <pre><code> false </code></pre> , depending on the operation). The latter form of the insert operation is designed specifically for use with capacity-restricted <pre><code> Deque </code></pre> implementations; in most implementations, insert operations cannot fail. <p> The twelve methods described above are summarized in the following table: <table border="" cellpadding="3" cellspacing="1"> <caption> Summary of Deque methods </caption> <tr> <td> </td> <td align="CENTER" colspan="2"> <b> First Element (Head) </b> </td> <td align="CENTER" colspan="2"> <b> Last Element (Tail) </b> </td> </tr> <tr> <td> </td> <td align="CENTER"> <em> Throws exception </em> </td> <td align="CENTER"> <em> Special value </em> </td> <td align="CENTER"> <em> Throws exception </em> </td> <td align="CENTER"> <em> Special value </em> </td> </tr> <tr> <td> <b> Insert </b> </td> <td> <pre><code> addFirst(e) </code></pre> </td> <td> <pre><code> offerFirst(e) </code></pre> </td> <td> <pre><code> addLast(e) </code></pre> </td> <td> <pre><code> offerLast(e) </code></pre> </td> </tr> <tr> <td> <b> Remove </b> </td> <td> <pre><code> removeFirst() </code></pre> </td> <td> <pre><code> pollFirst() </code></pre> </td> <td> <pre><code> removeLast() </code></pre> </td> <td> <pre><code> pollLast() </code></pre> </td> </tr> <tr> <td> <b> Examine </b> </td> <td> <pre><code> getFirst() </code></pre> </td> <td> <pre><code> peekFirst() </code></pre> </td> <td> <pre><code> getLast() </code></pre> </td> <td> <pre><code> peekLast() </code></pre> </td> </tr> </table> <p> This interface extends the <pre><code> Queue </code></pre> interface. When a deque is used as a queue, FIFO (First-In-First-Out) behavior results. Elements are added at the end of the deque and removed from the beginning. The methods inherited from the <pre><code> Queue </code></pre> interface are precisely equivalent to <pre><code> Deque </code></pre> methods as indicated in the following table: <table border="" cellpadding="3" cellspacing="1"> <caption> Comparison of Queue and Deque methods </caption> <tr> <td align="CENTER"> <b> <pre><code> Queue </code></pre> Method </b> </td> <td align="CENTER"> <b> Equivalent <pre><code> Deque </code></pre> Method </b> </td> </tr> <tr> <td> <pre><code> add(e) </code></pre> </td> <td> <pre><code> addLast(e) </code></pre> </td> </tr> <tr> <td> <pre><code> offer(e) </code></pre> </td> <td> <pre><code> offerLast(e) </code></pre> </td> </tr> <tr> <td> <pre><code> remove() </code></pre> </td> <td> <pre><code> removeFirst() </code></pre> </td> </tr> <tr> <td> <pre><code> poll() </code></pre> </td> <td> <pre><code> pollFirst() </code></pre> </td> </tr> <tr> <td> <pre><code> element() </code></pre> </td> <td> <pre><code> getFirst() </code></pre> </td> </tr> <tr> <td> <pre><code> peek() </code></pre> </td> <td> <pre><code> peekFirst() </code></pre> </td> </tr> </table> <p> Deques can also be used as LIFO (Last-In-First-Out) stacks. This interface should be used in preference to the legacy <pre><code> Stack </code></pre> class. When a deque is used as a stack, elements are pushed and popped from the beginning of the deque. Stack methods are precisely equivalent to <pre><code> Deque </code></pre> methods as indicated in the table below: <table border="" cellpadding="3" cellspacing="1"> <caption> Comparison of Stack and Deque methods </caption> <tr> <td align="CENTER"> <b> Stack Method </b> </td> <td align="CENTER"> <b> Equivalent <pre><code> Deque </code></pre> Method </b> </td> </tr> <tr> <td> <pre><code> push(e) </code></pre> </td> <td> <pre><code> addFirst(e) </code></pre> </td> </tr> <tr> <td> <pre><code> pop() </code></pre> </td> <td> <pre><code> removeFirst() </code></pre> </td> </tr> <tr> <td> <pre><code> peek() </code></pre> </td> <td> <pre><code> peekFirst() </code></pre> </td> </tr> </table> <p> Note that the <pre><code> peek </code></pre> method works equally well when a deque is used as a queue or a stack; in either case, elements are drawn from the beginning of the deque. <p> This interface provides two methods to remove interior elements, <pre><code> removeFirstOccurrence </code></pre> and <pre><code> removeLastOccurrence </code></pre> . <p> Unlike the <pre><code> List </code></pre> interface, this interface does not provide support for indexed access to elements. <p> While <pre><code> Deque </code></pre> implementations are not strictly required to prohibit the insertion of null elements, they are strongly encouraged to do so. Users of any <pre><code> Deque </code></pre> implementations that do allow null elements are strongly encouraged <i> not </i> to take advantage of the ability to insert nulls. This is so because <pre><code> null </code></pre> is used as a special return value by various methods to indicated that the deque is empty. <p> <pre><code> Deque </code></pre> implementations generally do not define element-based versions of the <pre><code> equals </code></pre> and <pre><code> hashCode </code></pre> methods, but instead inherit the identity-based versions from class <pre><code> Object </code></pre> . </p><pre><code>public interface Deque\nimplements Queue&lt;E&gt;</code></pre></section>	https://developer.android.com/reference/java/util/Deque.html
Dictionary	A										<section class="prog__container"><p> The <pre><code> Dictionary </code></pre> class is the abstract parent of any class, such as <pre><code> Hashtable </code></pre> , which maps keys to values. Every key and every value is an object. In any one <tt> Dictionary </tt> object, every key is associated with at most one value. Given a <tt> Dictionary </tt> and a key, the associated element can be looked up. Any non- <pre><code> null </code></pre> object can be used as a key and as a value. <p> As a rule, the <pre><code> equals </code></pre> method should be used by implementations of this class to decide if two keys are the same. <p> <strong> NOTE: This class is obsolete. New implementations should implement the Map interface, rather than extending this class. </strong> </p><pre><code>public abstract class Dictionary\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Dictionary.html
DoubleSummaryStatistics	A										<section class="prog__container"><p> A state object for collecting statistics such as count, min, max, sum, and average. <p> This class is designed to work with (though does not require) streams </p><pre><code>public class DoubleSummaryStatistics\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/DoubleSummaryStatistics.html
DuplicateFormatFlagsException	A										<section class="prog__container"><p> Unchecked exception thrown when duplicate flags are provided in the format specifier. <p> Unless otherwise specified, passing a <tt> null </tt> argument to any method or constructor in this class will cause a <pre><code> NullPointerException </code></pre> to be thrown. </p><pre><code>public class DuplicateFormatFlagsException\n</code></pre></section>	https://developer.android.com/reference/java/util/DuplicateFormatFlagsException.html
EmptyStackException	A										<section class="prog__container"><p> Thrown by methods in the <pre><code> Stack </code></pre> class to indicate that the stack is empty.</p><pre><code>public class EmptyStackException\n</code></pre></section>	https://developer.android.com/reference/java/util/EmptyStackException.html
Enumeration	A										<section class="prog__container"><p> An object that implements the Enumeration interface generates a series of elements, one at a time. Successive calls to the <pre><code> nextElement </code></pre> method return successive elements of the series. <p> For example, to print all elements of a <tt> Vector&lt;E&gt; </tt> <i> v </i> : <pre> for (Enumeration&lt;E&gt; e = v.elements(); e.hasMoreElements();) System.out.println(e.nextElement());</pre> <p> Methods are provided to enumerate through the elements of a vector, the keys of a hashtable, and the values in a hashtable. Enumerations are also used to specify the input streams to a <pre><code> SequenceInputStream </code></pre> . <p> NOTE: The functionality of this interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration. </p><pre><code>public interface Enumeration\n</code></pre></section>	https://developer.android.com/reference/java/util/Enumeration.html
EnumMap	A										<section class="prog__container"><p> A specialized <pre><code> Map </code></pre> implementation for use with enum type keys. All of the keys in an enum map must come from a single enum type that is specified, explicitly or implicitly, when the map is created. Enum maps are represented internally as arrays. This representation is extremely compact and efficient. <p> Enum maps are maintained in the <i> natural order </i> of their keys (the order in which the enum constants are declared). This is reflected in the iterators returned by the collections views ( <pre><code> keySet() </code></pre> , <pre><code> entrySet() </code></pre> , and <pre><code> values() </code></pre> ). <p> Iterators returned by the collection views are <i> weakly consistent </i> : they will never throw <pre><code> ConcurrentModificationException </code></pre> and they may or may not show the effects of any modifications to the map that occur while the iteration is in progress. <p> Null keys are not permitted. Attempts to insert a null key will throw <pre><code> NullPointerException </code></pre> . Attempts to test for the presence of a null key or to remove one will, however, function properly. Null values are permitted. <p> Like most collection implementations <tt> EnumMap </tt> is not synchronized. If multiple threads access an enum map concurrently, and at least one of the threads modifies the map, it should be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the enum map. If no such object exists, the map should be "wrapped" using the <pre><code> synchronizedMap(Map <k, v=""> ) </k,> </code></pre> method. This is best done at creation time, to prevent accidental unsynchronized access: <pre> Map&lt;EnumKey, V&gt; m = Collections.synchronizedMap(new EnumMap&lt;EnumKey, V&gt;(...)); </pre> <p> Implementation note: All basic operations execute in constant time. They are likely (though not guaranteed) to be faster than their <pre><code> HashMap </code></pre> counterparts. <p> This class is a member of the Java Collections Framework . </p><pre><code>public class EnumMap\n</code></pre></section>	https://developer.android.com/reference/java/util/EnumMap.html
EnumSet	A										<section class="prog__container"><p> A specialized <pre><code> Set </code></pre> implementation for use with enum types. All of the elements in an enum set must come from a single enum type that is specified, explicitly or implicitly, when the set is created. Enum sets are represented internally as bit vectors. This representation is extremely compact and efficient. The space and time performance of this class should be good enough to allow its use as a high-quality, typesafe alternative to traditional <tt> int </tt> -based "bit flags." Even bulk operations (such as <tt> containsAll </tt> and <tt> retainAll </tt> ) should run very quickly if their argument is also an enum set. <p> The iterator returned by the <tt> iterator </tt> method traverses the elements in their <i> natural order </i> (the order in which the enum constants are declared). The returned iterator is <i> weakly consistent </i> : it will never throw <pre><code> ConcurrentModificationException </code></pre> and it may or may not show the effects of any modifications to the set that occur while the iteration is in progress. <p> Null elements are not permitted. Attempts to insert a null element will throw <pre><code> NullPointerException </code></pre> . Attempts to test for the presence of a null element or to remove one will, however, function properly. <p> Like most collection implementations, <tt> EnumSet </tt> is not synchronized. If multiple threads access an enum set concurrently, and at least one of the threads modifies the set, it should be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the enum set. If no such object exists, the set should be "wrapped" using the <pre><code> synchronizedSet(Set <t> ) </t> </code></pre> method. This is best done at creation time, to prevent accidental unsynchronized access: <pre> Set&lt;MyEnum&gt; s = Collections.synchronizedSet(EnumSet.noneOf(MyEnum.class)); </pre> <p> Implementation note: All basic operations execute in constant time. They are likely (though not guaranteed) to be much faster than their <pre><code> HashSet </code></pre> counterparts. Even bulk operations execute in constant time if their argument is also an enum set. <p> This class is a member of the Java Collections Framework . </p><pre><code>public abstract class EnumSet\n</code></pre></section>	https://developer.android.com/reference/java/util/EnumSet.html
EventListener	A										<section class="prog__container"><p> A tagging interface that all event listener interfaces must extend.</p><pre><code>public interface EventListener\n</code></pre></section>	https://developer.android.com/reference/java/util/EventListener.html
EventListenerProxy	A										<section class="prog__container"><p> An abstract wrapper class for an <pre><code> EventListener </code></pre> class which associates a set of additional parameters with the listener. Subclasses must provide the storage and accessor methods for the additional arguments or parameters. <p> For example, a bean which supports named properties would have a two argument method signature for adding a <pre><code> PropertyChangeListener </code></pre> for a property: <pre> public void addPropertyChangeListener(String propertyName, PropertyChangeListener listener) </pre> If the bean also implemented the zero argument get listener method: <pre> public PropertyChangeListener[] getPropertyChangeListeners() </pre> then the array may contain inner <pre><code> PropertyChangeListeners </code></pre> which are also <pre><code> PropertyChangeListenerProxy </code></pre> objects. <p> If the calling method is interested in retrieving the named property then it would have to test the element to see if it is a proxy class. </p><pre><code>public abstract class EventListenerProxy\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/EventListenerProxy.html
EventObject	A										<section class="prog__container"><p> <p> The root class from which all event state objects shall be derived. <p> All Events are constructed with a reference to the object, the "source", that is logically deemed to be the object upon which the Event in question initially occurred upon. </p><pre><code>public class EventObject\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/EventObject.html
FormatFlagsConversionMismatchException	A										<section class="prog__container"><p> Unchecked exception thrown when a conversion and flag are incompatible. <p> Unless otherwise specified, passing a <tt> null </tt> argument to any method or constructor in this class will cause a <pre><code> NullPointerException </code></pre> to be thrown. </p><pre><code>public class FormatFlagsConversionMismatchException\n</code></pre></section>	https://developer.android.com/reference/java/util/FormatFlagsConversionMismatchException.html
Formattable	A										<section class="prog__container"><p> The <tt> Formattable </tt> interface must be implemented by any class that needs to perform custom formatting using the <tt> 's' </tt> conversion specifier of <pre><code> Formatter </code></pre> . This interface allows basic control for formatting arbitrary objects. For example, the following class prints out different representations of a stock's name depending on the flags and length constraints: <blockquote> <pre> import java.nio.CharBuffer; import java.util.Formatter; import java.util.Formattable; import java.util.Locale; import static java.util.FormattableFlags.*; ... public class StockName implements Formattable { private String symbol, companyName, frenchCompanyName; public StockName(String symbol, String companyName, String frenchCompanyName) { ... } ... public void formatTo(Formatter fmt, int f, int width, int precision) { StringBuilder sb = new StringBuilder(); // decide form of name String name = companyName; if (fmt.locale().equals(Locale.FRANCE)) name = frenchCompanyName; boolean alternate = (f &amp; ALTERNATE) == ALTERNATE; boolean usesymbol = alternate || (precision != -1 &amp;&amp; precision &lt; 10); String out = (usesymbol ? symbol : name); // apply precision if (precision == -1 || out.length() &lt; precision) { // write it all sb.append(out); } else { sb.append(out.substring(0, precision - 1)).append('*'); } // apply width and justification int len = sb.length(); if (len &lt; width) for (int i = 0; i &lt; width - len; i++) if ((f &amp; LEFT_JUSTIFY) == LEFT_JUSTIFY) sb.append(' '); else sb.insert(0, ' '); fmt.format(sb.toString()); } public String toString() { return String.format("%s - %s", symbol, companyName); } } </pre> </blockquote> <p> When used in conjunction with the <pre><code> Formatter </code></pre> , the above class produces the following output for various format strings. <blockquote> <pre> Formatter fmt = new Formatter(); StockName sn = new StockName("HUGE", "Huge Fruit, Inc.", "Fruit Titanesque, Inc."); fmt.format("%s", sn); // -&gt; "Huge Fruit, Inc." fmt.format("%s", sn.toString()); // -&gt; "HUGE - Huge Fruit, Inc." fmt.format("%#s", sn); // -&gt; "HUGE" fmt.format("%-10.8s", sn); // -&gt; "HUGE " fmt.format("%.12s", sn); // -&gt; "Huge Fruit,*" fmt.format(Locale.FRANCE, "%25s", sn); // -&gt; " Fruit Titanesque, Inc." </pre> </blockquote> <p> Formattables are not necessarily safe for multithreaded access. Thread safety is optional and may be enforced by classes that extend and implement this interface. <p> Unless otherwise specified, passing a <tt> null </tt> argument to any method in this interface will cause a <pre><code> NullPointerException </code></pre> to be thrown. </p><pre><code>public interface Formattable\n</code></pre></section>	https://developer.android.com/reference/java/util/Formattable.html
FormattableFlags	A										<section class="prog__container"><p> FomattableFlags are passed to the <pre><code> Formattable.formatTo() </code></pre> method and modify the output format for Formattables</p><pre><code>public class FormattableFlags\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/FormattableFlags.html
Formatter.BigDecimalLayoutForm	A										<section class="prog__container"><pre><code>public static final enum Formatter.BigDecimalLayoutForm\n</code></pre></section>	https://developer.android.com/reference/java/util/Formatter.BigDecimalLayoutForm.html
Formatter	A										<section class="prog__container"><p> An interpreter for printf-style format strings. This class provides support for layout justification and alignment, common formats for numeric, string, and date/time data, and locale-specific output. Common Java types such as <pre><code> byte </code></pre> , <pre><code> BigDecimal </code></pre> , and <pre><code> Calendar </code></pre> are supported. Limited formatting customization for arbitrary user types is provided through the <pre><code> Formattable </code></pre> interface. <p> Formatters are not necessarily safe for multithreaded access. Thread safety is optional and is the responsibility of users of methods in this class. <p> Formatted printing for the Java language is heavily inspired by C's <pre><code> printf </code></pre> . Although the format strings are similar to C, some customizations have been made to accommodate the Java language and exploit some of its features. Also, Java formatting is more strict than C's; for example, if a conversion is incompatible with a flag, an exception will be thrown. In C inapplicable flags are silently ignored. The format strings are thus intended to be recognizable to C programmers but not necessarily completely compatible with those in C. <p> Examples of expected usage: <blockquote> <pre> StringBuilder sb = new StringBuilder(); // Send all output to the Appendable object sb Formatter formatter = new Formatter(sb, Locale.US); // Explicit argument indices may be used to re-order output. formatter.format("%4$2s %3$2s %2$2s %1$2s", "a", "b", "c", "d") // -&gt; " d c b a" // Optional locale as the first argument can be used to get // locale-specific formatting of numbers. The precision and width can be // given to round and align the value. formatter.format(Locale.FRANCE, "e = %+10.4f", Math.E); // -&gt; "e = +2,7183" // The '(' numeric flag may be used to format negative numbers with // parentheses rather than a minus sign. Group separators are // automatically inserted. formatter.format("Amount gained or lost since last statement: $ %(,.2f", balanceDelta); // -&gt; "Amount gained or lost since last statement: $ (6,217.58)" </pre> </blockquote> <p> Convenience methods for common formatting requests exist as illustrated by the following invocations: <blockquote> <pre> // Writes a formatted string to System.out. System.out.format("Local time: %tT", Calendar.getInstance()); // -&gt; "Local time: 13:34:18" // Writes formatted output to System.err. System.err.printf("Unable to open file '%1$s': %2$s", fileName, exception.getMessage()); // -&gt; "Unable to open file 'food': No such file or directory" </pre> </blockquote> <p> Like C's <pre><code> sprintf(3) </code></pre> , Strings may be formatted using the static method <pre><code> String.format </code></pre> : <blockquote> <pre> // Format a string containing a date. import java.util.Calendar; import java.util.GregorianCalendar; import static java.util.Calendar.*; Calendar c = new GregorianCalendar(1995, MAY, 23); String s = String.format("Duke's Birthday: %1$tm %1$te,%1$tY", c); // -&gt; s == "Duke's Birthday: May 23, 1995" </pre> </blockquote> </p><pre><code>public final class Formatter\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Formatter.html
FormatterClosedException	A										<section class="prog__container"><p> Unchecked exception thrown when the formatter has been closed. <p> Unless otherwise specified, passing a <tt> null </tt> argument to any method or constructor in this class will cause a <pre><code> NullPointerException </code></pre> to be thrown. </p><pre><code>public class FormatterClosedException\n</code></pre></section>	https://developer.android.com/reference/java/util/FormatterClosedException.html
GregorianCalendar	A										<section class="prog__container"><p> <pre><code> GregorianCalendar </code></pre> is a concrete subclass of <pre><code> Calendar </code></pre> and provides the standard calendar system used by most of the world. <p> <pre><code> GregorianCalendar </code></pre> is a hybrid calendar that supports both the Julian and Gregorian calendar systems with the support of a single discontinuity, which corresponds by default to the Gregorian date when the Gregorian calendar was instituted (October 15, 1582 in some countries, later in others). The cutover date may be changed by the caller by calling <pre><code> setGregorianChange() </code></pre> . <p> Historically, in those countries which adopted the Gregorian calendar first, October 4, 1582 (Julian) was thus followed by October 15, 1582 (Gregorian). This calendar models this correctly. Before the Gregorian cutover, <pre><code> GregorianCalendar </code></pre> implements the Julian calendar. The only difference between the Gregorian and the Julian calendar is the leap year rule. The Julian calendar specifies leap years every four years, whereas the Gregorian calendar omits century years which are not divisible by 400. <p> <pre><code> GregorianCalendar </code></pre> implements <em> proleptic </em> Gregorian and Julian calendars. That is, dates are computed by extrapolating the current rules indefinitely far backward and forward in time. As a result, <pre><code> GregorianCalendar </code></pre> may be used for all years to generate meaningful and consistent results. However, dates obtained using <pre><code> GregorianCalendar </code></pre> are historically accurate only from March 1, 4 AD onward, when modern Julian calendar rules were adopted. Before this date, leap year rules were applied irregularly, and before 45 BC the Julian calendar did not even exist. <p> Prior to the institution of the Gregorian calendar, New Year's Day was March 25. To avoid confusion, this calendar always uses January 1. A manual adjustment may be made if desired for dates that are prior to the Gregorian changeover and which fall between January 1 and March 24. <h4> Week Of Year and Week Year </h4> <p> Values calculated for the <pre><code> WEEK_OF_YEAR </code></pre> field range from 1 to 53. The first week of a calendar year is the earliest seven day period starting on <pre><code> getFirstDayOfWeek() </code></pre> that contains at least <pre><code> getMinimalDaysInFirstWeek() </code></pre> days from that year. It thus depends on the values of <pre><code> getMinimalDaysInFirstWeek() </code></pre> , <pre><code> getFirstDayOfWeek() </code></pre> , and the day of the week of January 1. Weeks between week 1 of one year and week 1 of the following year (exclusive) are numbered sequentially from 2 to 52 or 53 (except for year(s) involved in the Julian-Gregorian transition). <p> The <pre><code> getFirstDayOfWeek() </code></pre> and <pre><code> getMinimalDaysInFirstWeek() </code></pre> values are initialized using locale-dependent resources when constructing a <pre><code> GregorianCalendar </code></pre> . The week determination is compatible with the ISO 8601 standard when <pre><code> getFirstDayOfWeek() </code></pre> is <pre><code> MONDAY </code></pre> and <pre><code> getMinimalDaysInFirstWeek() </code></pre> is 4, which values are used in locales where the standard is preferred. These values can explicitly be set by calling <pre><code> setFirstDayOfWeek() </code></pre> and <pre><code> setMinimalDaysInFirstWeek() </code></pre> . <p> A <em> week year </em> is in sync with a <pre><code> WEEK_OF_YEAR </code></pre> cycle. All weeks between the first and last weeks (inclusive) have the same <em> week year </em> value. Therefore, the first and last days of a week year may have different calendar year values. <p> For example, January 1, 1998 is a Thursday. If <pre><code> getFirstDayOfWeek() </code></pre> is <pre><code> MONDAY </code></pre> and <pre><code> getMinimalDaysInFirstWeek() </code></pre> is 4 (ISO 8601 standard compatible setting), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. The week year is 1998 for the last three days of calendar year 1997. If, however, <pre><code> getFirstDayOfWeek() </code></pre> is <pre><code> SUNDAY </code></pre> , then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three days of 1998 then are part of week 53 of 1997 and their week year is 1997. <h4> Week Of Month </h4> <p> Values calculated for the <pre><code> WEEK_OF_MONTH </code></pre> field range from 0 to 6. Week 1 of a month (the days with <pre><code> WEEK_OF_MONTH = 1 </code></pre> ) is the earliest set of at least <pre><code> getMinimalDaysInFirstWeek() </code></pre> contiguous days in that month, ending on the day before <pre><code> getFirstDayOfWeek() </code></pre> . Unlike week 1 of a year, week 1 of a month may be shorter than 7 days, need not start on <pre><code> getFirstDayOfWeek() </code></pre> , and will not include days of the previous month. Days of a month before week 1 have a <pre><code> WEEK_OF_MONTH </code></pre> of 0. <p> For example, if <pre><code> getFirstDayOfWeek() </code></pre> is <pre><code> SUNDAY </code></pre> and <pre><code> getMinimalDaysInFirstWeek() </code></pre> is 4, then the first week of January 1998 is Sunday, January 4 through Saturday, January 10. These days have a <pre><code> WEEK_OF_MONTH </code></pre> of 1. Thursday, January 1 through Saturday, January 3 have a <pre><code> WEEK_OF_MONTH </code></pre> of 0. If <pre><code> getMinimalDaysInFirstWeek() </code></pre> is changed to 3, then January 1 through January 3 have a <pre><code> WEEK_OF_MONTH </code></pre> of 1. <h4> Default Fields Values </h4> <p> The <pre><code> clear </code></pre> method sets calendar field(s) undefined. <pre><code> GregorianCalendar </code></pre> uses the following default value for each calendar field if its value is undefined. <table border="0" cellpadding="0" cellspacing="3" style="text-align: left; width: 66%;" summary="GregorianCalendar default field values"> <tbody> <tr> <th style="vertical-align: top; background-color: rgb(204, 204, 255); text-align: center;"> Field <br> </br> </th> <th style="vertical-align: top; background-color: rgb(204, 204, 255); text-align: center;"> Default Value <br> </br> </th> </tr> <tr> <td style="vertical-align: middle;"> <pre><code> ERA <br/> </code></pre> </td> <td style="vertical-align: middle;"> <pre><code> AD <br/> </code></pre> </td> </tr> <tr> <td style="vertical-align: middle; background-color: rgb(238, 238, 255);"> <pre><code> YEAR <br/> </code></pre> </td> <td style="vertical-align: middle; background-color: rgb(238, 238, 255);"> <pre><code> 1970 <br/> </code></pre> </td> </tr> <tr> <td style="vertical-align: middle;"> <pre><code> MONTH <br/> </code></pre> </td> <td style="vertical-align: middle;"> <pre><code> JANUARY <br/> </code></pre> </td> </tr> <tr> <td style="vertical-align: top; background-color: rgb(238, 238, 255);"> <pre><code> DAY_OF_MONTH <br/> </code></pre> </td> <td style="vertical-align: top; background-color: rgb(238, 238, 255);"> <pre><code> 1 <br/> </code></pre> </td> </tr> <tr> <td style="vertical-align: middle;"> <pre><code> DAY_OF_WEEK <br/> </code></pre> </td> <td style="vertical-align: middle;"> <pre><code> the first day of week <br/> </code></pre> </td> </tr> <tr> <td style="vertical-align: top; background-color: rgb(238, 238, 255);"> <pre><code> WEEK_OF_MONTH <br/> </code></pre> </td> <td style="vertical-align: top; background-color: rgb(238, 238, 255);"> <pre><code> 0 <br/> </code></pre> </td> </tr> <tr> <td style="vertical-align: top;"> <pre><code> DAY_OF_WEEK_IN_MONTH <br/> </code></pre> </td> <td style="vertical-align: top;"> <pre><code> 1 <br/> </code></pre> </td> </tr> <tr> <td style="vertical-align: middle; background-color: rgb(238, 238, 255);"> <pre><code> AM_PM <br/> </code></pre> </td> <td style="vertical-align: middle; background-color: rgb(238, 238, 255);"> <pre><code> AM <br/> </code></pre> </td> </tr> <tr> <td style="vertical-align: middle;"> <pre><code> HOUR, HOUR_OF_DAY, MINUTE, SECOND, MILLISECOND <br/> </code></pre> </td> <td style="vertical-align: middle;"> <pre><code> 0 <br/> </code></pre> </td> </tr> </tbody> </table> <br> Default values are not applicable for the fields not listed above. <p> <strong> Example: </strong> <blockquote> <pre> // get the supported ids for GMT-08:00 (Pacific Standard Time) String[] ids = TimeZone.getAvailableIDs(-8 * 60 * 60 * 1000); // if no ids were returned, something is wrong. get out. if (ids.length == 0) System.exit(0); // begin output System.out.println("Current Time"); // create a Pacific Standard Time time zone SimpleTimeZone pdt = new SimpleTimeZone(-8 * 60 * 60 * 1000, ids[0]); // set up rules for Daylight Saving Time pdt.setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2 * 60 * 60 * 1000); pdt.setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2 * 60 * 60 * 1000); // create a GregorianCalendar with the Pacific Daylight time zone // and the current date and time Calendar calendar = new GregorianCalendar(pdt); Date trialTime = new Date(); calendar.setTime(trialTime); // print out a bunch of interesting things System.out.println("ERA: " + calendar.get(Calendar.ERA)); System.out.println("YEAR: " + calendar.get(Calendar.YEAR)); System.out.println("MONTH: " + calendar.get(Calendar.MONTH)); System.out.println("WEEK_OF_YEAR: " + calendar.get(Calendar.WEEK_OF_YEAR)); System.out.println("WEEK_OF_MONTH: " + calendar.get(Calendar.WEEK_OF_MONTH)); System.out.println("DATE: " + calendar.get(Calendar.DATE)); System.out.println("DAY_OF_MONTH: " + calendar.get(Calendar.DAY_OF_MONTH)); System.out.println("DAY_OF_YEAR: " + calendar.get(Calendar.DAY_OF_YEAR)); System.out.println("DAY_OF_WEEK: " + calendar.get(Calendar.DAY_OF_WEEK)); System.out.println("DAY_OF_WEEK_IN_MONTH: " + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH)); System.out.println("AM_PM: " + calendar.get(Calendar.AM_PM)); System.out.println("HOUR: " + calendar.get(Calendar.HOUR)); System.out.println("HOUR_OF_DAY: " + calendar.get(Calendar.HOUR_OF_DAY)); System.out.println("MINUTE: " + calendar.get(Calendar.MINUTE)); System.out.println("SECOND: " + calendar.get(Calendar.SECOND)); System.out.println("MILLISECOND: " + calendar.get(Calendar.MILLISECOND)); System.out.println("ZONE_OFFSET: " + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000))); System.out.println("DST_OFFSET: " + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000))); System.out.println("Current Time, with hour reset to 3"); calendar.clear(Calendar.HOUR_OF_DAY); // so doesn't override calendar.set(Calendar.HOUR, 3); System.out.println("ERA: " + calendar.get(Calendar.ERA)); System.out.println("YEAR: " + calendar.get(Calendar.YEAR)); System.out.println("MONTH: " + calendar.get(Calendar.MONTH)); System.out.println("WEEK_OF_YEAR: " + calendar.get(Calendar.WEEK_OF_YEAR)); System.out.println("WEEK_OF_MONTH: " + calendar.get(Calendar.WEEK_OF_MONTH)); System.out.println("DATE: " + calendar.get(Calendar.DATE)); System.out.println("DAY_OF_MONTH: " + calendar.get(Calendar.DAY_OF_MONTH)); System.out.println("DAY_OF_YEAR: " + calendar.get(Calendar.DAY_OF_YEAR)); System.out.println("DAY_OF_WEEK: " + calendar.get(Calendar.DAY_OF_WEEK)); System.out.println("DAY_OF_WEEK_IN_MONTH: " + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH)); System.out.println("AM_PM: " + calendar.get(Calendar.AM_PM)); System.out.println("HOUR: " + calendar.get(Calendar.HOUR)); System.out.println("HOUR_OF_DAY: " + calendar.get(Calendar.HOUR_OF_DAY)); System.out.println("MINUTE: " + calendar.get(Calendar.MINUTE)); System.out.println("SECOND: " + calendar.get(Calendar.SECOND)); System.out.println("MILLISECOND: " + calendar.get(Calendar.MILLISECOND)); System.out.println("ZONE_OFFSET: " + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000))); // in hours System.out.println("DST_OFFSET: " + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000))); // in hours </pre> </blockquote> </p><pre><code>public class GregorianCalendar\n</code></pre></section>	https://developer.android.com/reference/java/util/GregorianCalendar.html
HashMap	A										<section class="prog__container"><p> Hash table based implementation of the <tt> Map </tt> interface. This implementation provides all of the optional map operations, and permits <tt> null </tt> values and the <tt> null </tt> key. (The <tt> HashMap </tt> class is roughly equivalent to <tt> Hashtable </tt> , except that it is unsynchronized and permits nulls.) This class makes no guarantees as to the order of the map; in particular, it does not guarantee that the order will remain constant over time. <p> This implementation provides constant-time performance for the basic operations ( <tt> get </tt> and <tt> put </tt> ), assuming the hash function disperses the elements properly among the buckets. Iteration over collection views requires time proportional to the "capacity" of the <tt> HashMap </tt> instance (the number of buckets) plus its size (the number of key-value mappings). Thus, it's very important not to set the initial capacity too high (or the load factor too low) if iteration performance is important. <p> An instance of <tt> HashMap </tt> has two parameters that affect its performance: <i> initial capacity </i> and <i> load factor </i> . The <i> capacity </i> is the number of buckets in the hash table, and the initial capacity is simply the capacity at the time the hash table is created. The <i> load factor </i> is a measure of how full the hash table is allowed to get before its capacity is automatically increased. When the number of entries in the hash table exceeds the product of the load factor and the current capacity, the hash table is <i> rehashed </i> (that is, internal data structures are rebuilt) so that the hash table has approximately twice the number of buckets. <p> As a general rule, the default load factor (.75) offers a good tradeoff between time and space costs. Higher values decrease the space overhead but increase the lookup cost (reflected in most of the operations of the <tt> HashMap </tt> class, including <tt> get </tt> and <tt> put </tt> ). The expected number of entries in the map and its load factor should be taken into account when setting its initial capacity, so as to minimize the number of rehash operations. If the initial capacity is greater than the maximum number of entries divided by the load factor, no rehash operations will ever occur. <p> If many mappings are to be stored in a <tt> HashMap </tt> instance, creating it with a sufficiently large capacity will allow the mappings to be stored more efficiently than letting it perform automatic rehashing as needed to grow the table. <p> <strong> Note that this implementation is not synchronized. </strong> If multiple threads access a hash map concurrently, and at least one of the threads modifies the map structurally, it <i> must </i> be synchronized externally. (A structural modification is any operation that adds or deletes one or more mappings; merely changing the value associated with a key that an instance already contains is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be "wrapped" using the <pre><code> Collections.synchronizedMap </code></pre> method. This is best done at creation time, to prevent accidental unsynchronized access to the map: <pre> Map m = Collections.synchronizedMap(new HashMap(...));</pre> <p> The iterators returned by all of this class's "collection view methods" are <i> fail-fast </i> : if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own <tt> remove </tt> method, the iterator will throw a <pre><code> ConcurrentModificationException </code></pre> . Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. <p> Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <tt> ConcurrentModificationException </tt> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i> the fail-fast behavior of iterators should be used only to detect bugs. </i> <p> This class is a member of the Java Collections Framework . </p><pre><code>public class HashMap\n</code></pre></section>	https://developer.android.com/reference/java/util/HashMap.html
HashSet	A										<section class="prog__container"><p> This class implements the <tt> Set </tt> interface, backed by a hash table (actually a <tt> HashMap </tt> instance). It makes no guarantees as to the iteration order of the set; in particular, it does not guarantee that the order will remain constant over time. This class permits the <tt> null </tt> element. <p> This class offers constant time performance for the basic operations ( <tt> add </tt> , <tt> remove </tt> , <tt> contains </tt> and <tt> size </tt> ), assuming the hash function disperses the elements properly among the buckets. Iterating over this set requires time proportional to the sum of the <tt> HashSet </tt> instance's size (the number of elements) plus the "capacity" of the backing <tt> HashMap </tt> instance (the number of buckets). Thus, it's very important not to set the initial capacity too high (or the load factor too low) if iteration performance is important. <p> <strong> Note that this implementation is not synchronized. </strong> If multiple threads access a hash set concurrently, and at least one of the threads modifies the set, it <i> must </i> be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the set. If no such object exists, the set should be "wrapped" using the <pre><code> Collections.synchronizedSet </code></pre> method. This is best done at creation time, to prevent accidental unsynchronized access to the set: <pre> Set s = Collections.synchronizedSet(new HashSet(...));</pre> <p> The iterators returned by this class's <tt> iterator </tt> method are <i> fail-fast </i> : if the set is modified at any time after the iterator is created, in any way except through the iterator's own <tt> remove </tt> method, the Iterator throws a <pre><code> ConcurrentModificationException </code></pre> . Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. <p> Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <tt> ConcurrentModificationException </tt> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i> the fail-fast behavior of iterators should be used only to detect bugs. </i> <p> This class is a member of the Java Collections Framework . </p><pre><code>public class HashSet\n</code></pre></section>	https://developer.android.com/reference/java/util/HashSet.html
Hashtable	A										<section class="prog__container"><p> This class implements a hash table, which maps keys to values. Any non- <pre><code> null </code></pre> object can be used as a key or as a value. <p> To successfully store and retrieve objects from a hashtable, the objects used as keys must implement the <pre><code> hashCode </code></pre> method and the <pre><code> equals </code></pre> method. <p> An instance of <pre><code> Hashtable </code></pre> has two parameters that affect its performance: <i> initial capacity </i> and <i> load factor </i> . The <i> capacity </i> is the number of <i> buckets </i> in the hash table, and the <i> initial capacity </i> is simply the capacity at the time the hash table is created. Note that the hash table is <i> open </i> : in the case of a "hash collision", a single bucket stores multiple entries, which must be searched sequentially. The <i> load factor </i> is a measure of how full the hash table is allowed to get before its capacity is automatically increased. The initial capacity and load factor parameters are merely hints to the implementation. The exact details as to when and whether the rehash method is invoked are implementation-dependent. <p> Generally, the default load factor (.75) offers a good tradeoff between time and space costs. Higher values decrease the space overhead but increase the time cost to look up an entry (which is reflected in most <tt> Hashtable </tt> operations, including <tt> get </tt> and <tt> put </tt> ). <p> The initial capacity controls a tradeoff between wasted space and the need for <pre><code> rehash </code></pre> operations, which are time-consuming. No <pre><code> rehash </code></pre> operations will <i> ever </i> occur if the initial capacity is greater than the maximum number of entries the <tt> Hashtable </tt> will contain divided by its load factor. However, setting the initial capacity too high can waste space. <p> If many entries are to be made into a <pre><code> Hashtable </code></pre> , creating it with a sufficiently large capacity may allow the entries to be inserted more efficiently than letting it perform automatic rehashing as needed to grow the table. <p> This example creates a hashtable of numbers. It uses the names of the numbers as keys: <pre> <pre><code>Hashtable&lt;String, Integer&gt; numbers = new Hashtable&lt;String, Integer&gt;(); numbers.put("one", 1); numbers.put("two", 2); numbers.put("three", 3);</code></pre></pre> <p> To retrieve a number, use the following code: <pre> <pre><code>Integer n = numbers.get("two"); if (n != null) { System.out.println("two = " + n); }</code></pre></pre> <p> The iterators returned by the <tt> iterator </tt> method of the collections returned by all of this class's "collection view methods" are <em> fail-fast </em> : if the Hashtable is structurally modified at any time after the iterator is created, in any way except through the iterator's own <tt> remove </tt> method, the iterator will throw a <pre><code> ConcurrentModificationException </code></pre> . Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. The Enumerations returned by Hashtable's keys and elements methods are <em> not </em> fail-fast. <p> Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <tt> ConcurrentModificationException </tt> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i> the fail-fast behavior of iterators should be used only to detect bugs. </i> <p> As of the Java 2 platform v1.2, this class was retrofitted to implement the <pre><code> Map </code></pre> interface, making it a member of the Java Collections Framework . Unlike the new collection implementations, <pre><code> Hashtable </code></pre> is synchronized. If a thread-safe implementation is not needed, it is recommended to use <pre><code> HashMap </code></pre> in place of <pre><code> Hashtable </code></pre> . If a thread-safe highly-concurrent implementation is desired, then it is recommended to use <pre><code> ConcurrentHashMap </code></pre> in place of <pre><code> Hashtable </code></pre> . </p><pre><code>public class Hashtable\n</code></pre></section>	https://developer.android.com/reference/java/util/Hashtable.html
IdentityHashMap	A										<section class="prog__container"><p> This class implements the <tt> Map </tt> interface with a hash table, using reference-equality in place of object-equality when comparing keys (and values). In other words, in an <tt> IdentityHashMap </tt> , two keys <tt> k1 </tt> and <tt> k2 </tt> are considered equal if and only if <tt> (k1==k2) </tt> . (In normal <tt> Map </tt> implementations (like <tt> HashMap </tt> ) two keys <tt> k1 </tt> and <tt> k2 </tt> are considered equal if and only if <tt> (k1==null ? k2==null : k1.equals(k2)) </tt> .) <p> <b> This class is <i> not </i> a general-purpose <tt> Map </tt> implementation! While this class implements the <tt> Map </tt> interface, it intentionally violates <tt> Map's </tt> general contract, which mandates the use of the <tt> equals </tt> method when comparing objects. This class is designed for use only in the rare cases wherein reference-equality semantics are required. </b> <p> A typical use of this class is <i> topology-preserving object graph transformations </i> , such as serialization or deep-copying. To perform such a transformation, a program must maintain a "node table" that keeps track of all the object references that have already been processed. The node table must not equate distinct objects even if they happen to be equal. Another typical use of this class is to maintain <i> proxy objects </i> . For example, a debugging facility might wish to maintain a proxy object for each object in the program being debugged. <p> This class provides all of the optional map operations, and permits <tt> null </tt> values and the <tt> null </tt> key. This class makes no guarantees as to the order of the map; in particular, it does not guarantee that the order will remain constant over time. <p> This class provides constant-time performance for the basic operations ( <tt> get </tt> and <tt> put </tt> ), assuming the system identity hash function ( <pre><code> identityHashCode(Object) </code></pre> ) disperses elements properly among the buckets. <p> This class has one tuning parameter (which affects performance but not semantics): <i> expected maximum size </i> . This parameter is the maximum number of key-value mappings that the map is expected to hold. Internally, this parameter is used to determine the number of buckets initially comprising the hash table. The precise relationship between the expected maximum size and the number of buckets is unspecified. <p> If the size of the map (the number of key-value mappings) sufficiently exceeds the expected maximum size, the number of buckets is increased Increasing the number of buckets ("rehashing") may be fairly expensive, so it pays to create identity hash maps with a sufficiently large expected maximum size. On the other hand, iteration over collection views requires time proportional to the number of buckets in the hash table, so it pays not to set the expected maximum size too high if you are especially concerned with iteration performance or memory usage. <p> <strong> Note that this implementation is not synchronized. </strong> If multiple threads access an identity hash map concurrently, and at least one of the threads modifies the map structurally, it <i> must </i> be synchronized externally. (A structural modification is any operation that adds or deletes one or more mappings; merely changing the value associated with a key that an instance already contains is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be "wrapped" using the <pre><code> Collections.synchronizedMap </code></pre> method. This is best done at creation time, to prevent accidental unsynchronized access to the map: <pre> Map m = Collections.synchronizedMap(new IdentityHashMap(...));</pre> <p> The iterators returned by the <tt> iterator </tt> method of the collections returned by all of this class's "collection view methods" are <i> fail-fast </i> : if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own <tt> remove </tt> method, the iterator will throw a <pre><code> ConcurrentModificationException </code></pre> . Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. <p> Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <tt> ConcurrentModificationException </tt> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i> fail-fast iterators should be used only to detect bugs. </i> <p> Implementation note: This is a simple <i> linear-probe </i> hash table, as described for example in texts by Sedgewick and Knuth. The array alternates holding keys and values. (This has better locality for large tables than does using separate arrays.) For many JRE implementations and operation mixes, this class will yield better performance than <pre><code> HashMap </code></pre> (which uses <i> chaining </i> rather than linear-probing). <p> This class is a member of the Java Collections Framework . </p><pre><code>public class IdentityHashMap\n</code></pre></section>	https://developer.android.com/reference/java/util/IdentityHashMap.html
IllegalFormatCodePointException	A										<section class="prog__container"><p> Unchecked exception thrown when a character with an invalid Unicode code point as defined by <pre><code> isValidCodePoint(int) </code></pre> is passed to the <pre><code> Formatter </code></pre> . <p> Unless otherwise specified, passing a <tt> null </tt> argument to any method or constructor in this class will cause a <pre><code> NullPointerException </code></pre> to be thrown. </p><pre><code>public class IllegalFormatCodePointException\n</code></pre></section>	https://developer.android.com/reference/java/util/IllegalFormatCodePointException.html
IllegalFormatConversionException	A										<section class="prog__container"><p> Unchecked exception thrown when the argument corresponding to the format specifier is of an incompatible type. <p> Unless otherwise specified, passing a <tt> null </tt> argument to any method or constructor in this class will cause a <pre><code> NullPointerException </code></pre> to be thrown. </p><pre><code>public class IllegalFormatConversionException\n</code></pre></section>	https://developer.android.com/reference/java/util/IllegalFormatConversionException.html
IllegalFormatException	A										<section class="prog__container"><p> Unchecked exception thrown when a format string contains an illegal syntax or a format specifier that is incompatible with the given arguments. Only explicit subtypes of this exception which correspond to specific errors should be instantiated.</p><pre><code>public class IllegalFormatException\n</code></pre></section>	https://developer.android.com/reference/java/util/IllegalFormatException.html
IllegalFormatFlagsException	A										<section class="prog__container"><p> Unchecked exception thrown when an illegal combination flags is given. <p> Unless otherwise specified, passing a <tt> null </tt> argument to any method or constructor in this class will cause a <pre><code> NullPointerException </code></pre> to be thrown. </p><pre><code>public class IllegalFormatFlagsException\n</code></pre></section>	https://developer.android.com/reference/java/util/IllegalFormatFlagsException.html
IllegalFormatPrecisionException	A										<section class="prog__container"><p> Unchecked exception thrown when the precision is a negative value other than <tt> -1 </tt> , the conversion does not support a precision, or the value is otherwise unsupported.</p><pre><code>public class IllegalFormatPrecisionException\n</code></pre></section>	https://developer.android.com/reference/java/util/IllegalFormatPrecisionException.html
IllegalFormatWidthException	A										<section class="prog__container"><p> Unchecked exception thrown when the format width is a negative value other than <tt> -1 </tt> or is otherwise unsupported.</p><pre><code>public class IllegalFormatWidthException\n</code></pre></section>	https://developer.android.com/reference/java/util/IllegalFormatWidthException.html
IllformedLocaleException	A										<section class="prog__container"><p> Thrown by methods in <pre><code> Locale </code></pre> and <pre><code> Locale.Builder </code></pre> to indicate that an argument is not a well-formed BCP 47 tag.</p><pre><code>public class IllformedLocaleException\n</code></pre></section>	https://developer.android.com/reference/java/util/IllformedLocaleException.html
InputMismatchException	A										<section class="prog__container"><p> Thrown by a <pre><code> Scanner </code></pre> to indicate that the token retrieved does not match the pattern for the expected type, or that the token is out of range for the expected type.</p><pre><code>public class InputMismatchException\n</code></pre></section>	https://developer.android.com/reference/java/util/InputMismatchException.html
IntSummaryStatistics	A										<section class="prog__container"><p> A state object for collecting statistics such as count, min, max, sum, and average. <p> This class is designed to work with (though does not require) streams </p><pre><code>public class IntSummaryStatistics\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/IntSummaryStatistics.html
InvalidPropertiesFormatException	A										<section class="prog__container"><p> Thrown to indicate that an operation could not complete because the input did not conform to the appropriate XML document type for a collection of properties, as per the <pre><code> Properties </code></pre> specification. <p> Note, that although InvalidPropertiesFormatException inherits Serializable interface from Exception, it is not intended to be Serializable. Appropriate serialization methods are implemented to throw NotSerializableException. </p><pre><code>public class InvalidPropertiesFormatException\n</code></pre></section>	https://developer.android.com/reference/java/util/InvalidPropertiesFormatException.html
Iterator	A										<section class="prog__container"><p> An iterator over a collection. <pre><code> Iterator </code></pre> takes the place of <pre><code> Enumeration </code></pre> in the Java Collections Framework. Iterators differ from enumerations in two ways: <ul> <li> Iterators allow the caller to remove elements from the underlying collection during the iteration with well-defined semantics. <li> Method names have been improved. </li> </li> </ul> <p> This interface is a member of the Java Collections Framework . </p><pre><code>public interface Iterator\n</code></pre></section>	https://developer.android.com/reference/java/util/Iterator.html
LinkedHashMap	A										<section class="prog__container"><p> <p> Hash table and linked list implementation of the <tt> Map </tt> interface, with predictable iteration order. This implementation differs from <tt> HashMap </tt> in that it maintains a doubly-linked list running through all of its entries. This linked list defines the iteration ordering, which is normally the order in which keys were inserted into the map ( <i> insertion-order </i> ). Note that insertion order is not affected if a key is <i> re-inserted </i> into the map. (A key <tt> k </tt> is reinserted into a map <tt> m </tt> if <tt> m.put(k, v) </tt> is invoked when <tt> m.containsKey(k) </tt> would return <tt> true </tt> immediately prior to the invocation.) <p> This implementation spares its clients from the unspecified, generally chaotic ordering provided by <pre><code> HashMap </code></pre> (and <pre><code> Hashtable </code></pre> ), without incurring the increased cost associated with <pre><code> TreeMap </code></pre> . It can be used to produce a copy of a map that has the same order as the original, regardless of the original map's implementation: <pre> void foo(Map m) { Map copy = new LinkedHashMap(m); ... } </pre> This technique is particularly useful if a module takes a map on input, copies it, and later returns results whose order is determined by that of the copy. (Clients generally appreciate having things returned in the same order they were presented.) <p> A special <pre><code> constructor </code></pre> is provided to create a linked hash map whose order of iteration is the order in which its entries were last accessed, from least-recently accessed to most-recently ( <i> access-order </i> ). This kind of map is well-suited to building LRU caches. Invoking the <pre><code> put </code></pre> , <pre><code> putIfAbsent </code></pre> , <pre><code> get </code></pre> , <pre><code> getOrDefault </code></pre> , <pre><code> compute </code></pre> , <pre><code> computeIfAbsent </code></pre> , <pre><code> computeIfPresent </code></pre> , or <pre><code> merge </code></pre> methods results in an access to the corresponding entry (assuming it exists after the invocation completes). The <pre><code> replace </code></pre> methods only result in an access of the entry if the value is replaced. The <pre><code> putAll </code></pre> method generates one entry access for each mapping in the specified map, in the order that key-value mappings are provided by the specified map's entry set iterator. <i> No other methods generate entry accesses. </i> In particular, operations on collection-views do <i> not </i> affect the order of iteration of the backing map. * <p> The <pre><code> removeEldestEntry(Map.Entry) </code></pre> method may be overridden to impose a policy for removing stale mappings automatically when new mappings are added to the map. <p> This class provides all of the optional <tt> Map </tt> operations, and permits null elements. Like <tt> HashMap </tt> , it provides constant-time performance for the basic operations ( <tt> add </tt> , <tt> contains </tt> and <tt> remove </tt> ), assuming the hash function disperses elements properly among the buckets. Performance is likely to be just slightly below that of <tt> HashMap </tt> , due to the added expense of maintaining the linked list, with one exception: Iteration over the collection-views of a <tt> LinkedHashMap </tt> requires time proportional to the <i> size </i> of the map, regardless of its capacity. Iteration over a <tt> HashMap </tt> is likely to be more expensive, requiring time proportional to its <i> capacity </i> . <p> A linked hash map has two parameters that affect its performance: <i> initial capacity </i> and <i> load factor </i> . They are defined precisely as for <tt> HashMap </tt> . Note, however, that the penalty for choosing an excessively high value for initial capacity is less severe for this class than for <tt> HashMap </tt> , as iteration times for this class are unaffected by capacity. <p> <strong> Note that this implementation is not synchronized. </strong> If multiple threads access a linked hash map concurrently, and at least one of the threads modifies the map structurally, it <em> must </em> be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be "wrapped" using the <pre><code> Collections.synchronizedMap </code></pre> method. This is best done at creation time, to prevent accidental unsynchronized access to the map: <pre> Map m = Collections.synchronizedMap(new LinkedHashMap(...));</pre> A structural modification is any operation that adds or deletes one or more mappings or, in the case of access-ordered linked hash maps, affects iteration order. In insertion-ordered linked hash maps, merely changing the value associated with a key that is already contained in the map is not a structural modification. <strong> In access-ordered linked hash maps, merely querying the map with <tt> get </tt> is a structural modification. </strong> ) <p> The iterators returned by the <tt> iterator </tt> method of the collections returned by all of this class's collection view methods are <em> fail-fast </em> : if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own <tt> remove </tt> method, the iterator will throw a <pre><code> ConcurrentModificationException </code></pre> . Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. <p> Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <tt> ConcurrentModificationException </tt> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i> the fail-fast behavior of iterators should be used only to detect bugs. </i> <p> The spliterators returned by the spliterator method of the collections returned by all of this class's collection view methods are <em> late-binding </em> , <em> fail-fast </em> , and additionally report <pre><code> ORDERED </code></pre> . <p> This class is a member of the Java Collections Framework . </p><pre><code>public class LinkedHashMap\n</code></pre></section>	https://developer.android.com/reference/java/util/LinkedHashMap.html
LinkedHashSet	A										<section class="prog__container"><p> <p> Hash table and linked list implementation of the <tt> Set </tt> interface, with predictable iteration order. This implementation differs from <tt> HashSet </tt> in that it maintains a doubly-linked list running through all of its entries. This linked list defines the iteration ordering, which is the order in which elements were inserted into the set ( <i> insertion-order </i> ). Note that insertion order is <i> not </i> affected if an element is <i> re-inserted </i> into the set. (An element <tt> e </tt> is reinserted into a set <tt> s </tt> if <tt> s.add(e) </tt> is invoked when <tt> s.contains(e) </tt> would return <tt> true </tt> immediately prior to the invocation.) <p> This implementation spares its clients from the unspecified, generally chaotic ordering provided by <pre><code> HashSet </code></pre> , without incurring the increased cost associated with <pre><code> TreeSet </code></pre> . It can be used to produce a copy of a set that has the same order as the original, regardless of the original set's implementation: <pre> void foo(Set s) { Set copy = new LinkedHashSet(s); ... } </pre> This technique is particularly useful if a module takes a set on input, copies it, and later returns results whose order is determined by that of the copy. (Clients generally appreciate having things returned in the same order they were presented.) <p> This class provides all of the optional <tt> Set </tt> operations, and permits null elements. Like <tt> HashSet </tt> , it provides constant-time performance for the basic operations ( <tt> add </tt> , <tt> contains </tt> and <tt> remove </tt> ), assuming the hash function disperses elements properly among the buckets. Performance is likely to be just slightly below that of <tt> HashSet </tt> , due to the added expense of maintaining the linked list, with one exception: Iteration over a <tt> LinkedHashSet </tt> requires time proportional to the <i> size </i> of the set, regardless of its capacity. Iteration over a <tt> HashSet </tt> is likely to be more expensive, requiring time proportional to its <i> capacity </i> . <p> A linked hash set has two parameters that affect its performance: <i> initial capacity </i> and <i> load factor </i> . They are defined precisely as for <tt> HashSet </tt> . Note, however, that the penalty for choosing an excessively high value for initial capacity is less severe for this class than for <tt> HashSet </tt> , as iteration times for this class are unaffected by capacity. <p> <strong> Note that this implementation is not synchronized. </strong> If multiple threads access a linked hash set concurrently, and at least one of the threads modifies the set, it <em> must </em> be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the set. If no such object exists, the set should be "wrapped" using the <pre><code> Collections.synchronizedSet </code></pre> method. This is best done at creation time, to prevent accidental unsynchronized access to the set: <pre> Set s = Collections.synchronizedSet(new LinkedHashSet(...));</pre> <p> The iterators returned by this class's <tt> iterator </tt> method are <em> fail-fast </em> : if the set is modified at any time after the iterator is created, in any way except through the iterator's own <tt> remove </tt> method, the iterator will throw a <pre><code> ConcurrentModificationException </code></pre> . Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. <p> Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <tt> ConcurrentModificationException </tt> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i> the fail-fast behavior of iterators should be used only to detect bugs. </i> <p> This class is a member of the Java Collections Framework . </p><pre><code>public class LinkedHashSet\n</code></pre></section>	https://developer.android.com/reference/java/util/LinkedHashSet.html
LinkedList	A										<section class="prog__container"><p> Doubly-linked list implementation of the <pre><code> List </code></pre> and <pre><code> Deque </code></pre> interfaces. Implements all optional list operations, and permits all elements (including <pre><code> null </code></pre> ). <p> All of the operations perform as could be expected for a doubly-linked list. Operations that index into the list will traverse the list from the beginning or the end, whichever is closer to the specified index. <p> <strong> Note that this implementation is not synchronized. </strong> If multiple threads access a linked list concurrently, and at least one of the threads modifies the list structurally, it <i> must </i> be synchronized externally. (A structural modification is any operation that adds or deletes one or more elements; merely setting the value of an element is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the list. If no such object exists, the list should be "wrapped" using the <pre><code> Collections.synchronizedList </code></pre> method. This is best done at creation time, to prevent accidental unsynchronized access to the list: <pre> List list = Collections.synchronizedList(new LinkedList(...));</pre> <p> The iterators returned by this class's <pre><code> iterator </code></pre> and <pre><code> listIterator </code></pre> methods are <i> fail-fast </i> : if the list is structurally modified at any time after the iterator is created, in any way except through the Iterator's own <pre><code> remove </code></pre> or <pre><code> add </code></pre> methods, the iterator will throw a <pre><code> ConcurrentModificationException </code></pre> . Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. <p> Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <pre><code> ConcurrentModificationException </code></pre> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i> the fail-fast behavior of iterators should be used only to detect bugs. </i> <p> This class is a member of the Java Collections Framework . </p><pre><code>public class LinkedList\n</code></pre></section>	https://developer.android.com/reference/java/util/LinkedList.html
List	A										<section class="prog__container"><p> An ordered collection (also known as a <i> sequence </i> ). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list. <p> Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements <tt> e1 </tt> and <tt> e2 </tt> such that <tt> e1.equals(e2) </tt> , and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare. <p> The <tt> List </tt> interface places additional stipulations, beyond those specified in the <tt> Collection </tt> interface, on the contracts of the <tt> iterator </tt> , <tt> add </tt> , <tt> remove </tt> , <tt> equals </tt> , and <tt> hashCode </tt> methods. Declarations for other inherited methods are also included here for convenience. <p> The <tt> List </tt> interface provides four methods for positional (indexed) access to list elements. Lists (like Java arrays) are zero based. Note that these operations may execute in time proportional to the index value for some implementations (the <tt> LinkedList </tt> class, for example). Thus, iterating over the elements in a list is typically preferable to indexing through it if the caller does not know the implementation. <p> The <tt> List </tt> interface provides a special iterator, called a <tt> ListIterator </tt> , that allows element insertion and replacement, and bidirectional access in addition to the normal operations that the <tt> Iterator </tt> interface provides. A method is provided to obtain a list iterator that starts at a specified position in the list. <p> The <tt> List </tt> interface provides two methods to search for a specified object. From a performance standpoint, these methods should be used with caution. In many implementations they will perform costly linear searches. <p> The <tt> List </tt> interface provides two methods to efficiently insert and remove multiple elements at an arbitrary point in the list. <p> Note: While it is permissible for lists to contain themselves as elements, extreme caution is advised: the <tt> equals </tt> and <tt> hashCode </tt> methods are no longer well defined on such a list. <p> Some list implementations have restrictions on the elements that they may contain. For example, some implementations prohibit null elements, and some have restrictions on the types of their elements. Attempting to add an ineligible element throws an unchecked exception, typically <tt> NullPointerException </tt> or <tt> ClassCastException </tt> . Attempting to query the presence of an ineligible element may throw an exception, or it may simply return false; some implementations will exhibit the former behavior and some will exhibit the latter. More generally, attempting an operation on an ineligible element whose completion would not result in the insertion of an ineligible element into the list may throw an exception or it may succeed, at the option of the implementation. Such exceptions are marked as "optional" in the specification for this interface. <p> This interface is a member of the Java Collections Framework . </p><pre><code>public interface List\nimplements Collection&lt;E&gt;</code></pre></section>	https://developer.android.com/reference/java/util/List.html
ListIterator	A										<section class="prog__container"><p> An iterator for lists that allows the programmer to traverse the list in either direction, modify the list during iteration, and obtain the iterator's current position in the list. A <pre><code> ListIterator </code></pre> has no current element; its <i> cursor position </i> always lies between the element that would be returned by a call to <pre><code> previous() </code></pre> and the element that would be returned by a call to <pre><code> next() </code></pre> . An iterator for a list of length <pre><code> n </code></pre> has <pre><code> n+1 </code></pre> possible cursor positions, as illustrated by the carets ( <pre><code> ^ </code></pre> ) below: <pre> Element(0) Element(1) Element(2) ... Element(n-1) cursor positions: ^ ^ ^ ^ ^ </pre> Note that the <pre><code> remove() </code></pre> and <pre><code> set(Object) </code></pre> methods are <i> not </i> defined in terms of the cursor position; they are defined to operate on the last element returned by a call to <pre><code> next() </code></pre> or <pre><code> previous() </code></pre> . <p> This interface is a member of the Java Collections Framework . </p><pre><code>public interface ListIterator\nimplements Iterator&lt;E&gt;</code></pre></section>	https://developer.android.com/reference/java/util/ListIterator.html
ListResourceBundle	A										<section class="prog__container"><p> <pre><code> ListResourceBundle </code></pre> is an abstract subclass of <pre><code> ResourceBundle </code></pre> that manages resources for a locale in a convenient and easy to use list. See <pre><code> ResourceBundle </code></pre> for more information about resource bundles in general. <p> Subclasses must override <pre><code> getContents </code></pre> and provide an array, where each item in the array is a pair of objects. The first element of each pair is the key, which must be a <pre><code> String </code></pre> , and the second element is the value associated with that key. <p> The following example shows two members of a resource bundle family with the base name "MyResources". "MyResources" is the default member of the bundle family, and "MyResources_fr" is the French member. These members are based on <pre><code> ListResourceBundle </code></pre> (a related example shows how you can add a bundle to this family that's based on a properties file). The keys in this example are of the form "s1" etc. The actual keys are entirely up to your choice, so long as they are the same as the keys you use in your program to retrieve the objects from the bundle. Keys are case-sensitive. <blockquote> <pre> public class MyResources extends ListResourceBundle { protected Object[][] getContents() { return new Object[][] { // LOCALIZE THIS {"s1", "The disk \"{1}\" contains {0}."}, // MessageFormat pattern {"s2", "1"}, // location of {0} in pattern {"s3", "My Disk"}, // sample disk name {"s4", "no files"}, // first ChoiceFormat choice {"s5", "one file"}, // second ChoiceFormat choice {"s6", "{0,number} files"}, // third ChoiceFormat choice {"s7", "3 Mar 96"}, // sample date {"s8", new Dimension(1,5)} // real object, not just string // END OF MATERIAL TO LOCALIZE }; } } public class MyResources_fr extends ListResourceBundle { protected Object[][] getContents() { return new Object[][] = { // LOCALIZE THIS {"s1", "Le disque \"{1}\" {0}."}, // MessageFormat pattern {"s2", "1"}, // location of {0} in pattern {"s3", "Mon disque"}, // sample disk name {"s4", "ne contient pas de fichiers"}, // first ChoiceFormat choice {"s5", "contient un fichier"}, // second ChoiceFormat choice {"s6", "contient {0,number} fichiers"}, // third ChoiceFormat choice {"s7", "3 mars 1996"}, // sample date {"s8", new Dimension(1,3)} // real object, not just string // END OF MATERIAL TO LOCALIZE }; } } </pre> </blockquote> </p><pre><code>public abstract class ListResourceBundle\n</code></pre></section>	https://developer.android.com/reference/java/util/ListResourceBundle.html
Locale.Builder	A										<section class="prog__container"><p> <pre><code> Builder </code></pre> is used to build instances of <pre><code> Locale </code></pre> from values configured by the setters. Unlike the <pre><code> Locale </code></pre> constructors, the <pre><code> Builder </code></pre> checks if a value configured by a setter satisfies the syntax requirements defined by the <pre><code> Locale </code></pre> class. A <pre><code> Locale </code></pre> object created by a <pre><code> Builder </code></pre> is well-formed and can be transformed to a well-formed IETF BCP 47 language tag without losing information. <p> <b> Note: </b> The <pre><code> Locale </code></pre> class does not provide any syntactic restrictions on variant, while BCP 47 requires each variant subtag to be 5 to 8 alphanumerics or a single numeric followed by 3 alphanumerics. The method <pre><code> setVariant </code></pre> throws <pre><code> IllformedLocaleException </code></pre> for a variant that does not satisfy this restriction. If it is necessary to support such a variant, use a Locale constructor. However, keep in mind that a <pre><code> Locale </code></pre> object created this way might lose the variant information when transformed to a BCP 47 language tag. <p> The following example shows how to create a <pre><code> Locale </code></pre> object with the <pre><code> Builder </code></pre> . <blockquote> <pre> Locale aLocale = new Builder().setLanguage("sr").setScript("Latn").setRegion("RS").build(); </pre> </blockquote> <p> Builders can be reused; <pre><code> clear() </code></pre> resets all fields to their default values. </p><pre><code>public static final class Locale.Builder\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Locale.Builder.html
Locale.Category	A										<section class="prog__container"><p> Enum for locale categories. These locale categories are used to get/set the default locale for the specific functionality represented by the category.</p><pre><code>public static final enum Locale.Category\n</code></pre></section>	https://developer.android.com/reference/java/util/Locale.Category.html
Locale	A										<section class="prog__container"><p> A <pre><code> Locale </code></pre> object represents a specific geographical, political, or cultural region. An operation that requires a <pre><code> Locale </code></pre> to perform its task is called <em> locale-sensitive </em> and uses the <pre><code> Locale </code></pre> to tailor information for the user. For example, displaying a number is a locale-sensitive operation— the number should be formatted according to the customs and conventions of the user's native country, region, or culture. <p> The <pre><code> Locale </code></pre> class implements identifiers interchangeable with BCP 47 (IETF BCP 47, "Tags for Identifying Languages"), with support for the LDML (UTS#35, "Unicode Locale Data Markup Language") BCP 47-compatible extensions for locale data exchange. <p> A <pre><code> Locale </code></pre> object logically consists of the fields described below. <dl> <dt> <b> language </b> </dt> <dd> ISO 639 alpha-2 or alpha-3 language code, or registered language subtags up to 8 alpha letters (for future enhancements). When a language has both an alpha-2 code and an alpha-3 code, the alpha-2 code must be used. You can find a full list of valid language codes in the IANA Language Subtag Registry (search for "Type: language"). The language field is case insensitive, but <pre><code> Locale </code></pre> always canonicalizes to lower case. </dd> <br> <dd> Well-formed language values have the form <pre><code> [a-zA-Z]{2,8} </code></pre> . Note that this is not the the full BCP47 language production, since it excludes extlang. They are not needed since modern three-letter language codes replace them. </dd> <br> <dd> Example: "en" (English), "ja" (Japanese), "kok" (Konkani) </dd> <br> <dt> </dt> </br> </br> </br> </dl> </p><pre><code>public final class Locale\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Locale.html
LongSummaryStatistics	A										<section class="prog__container"><p> A state object for collecting statistics such as count, min, max, sum, and average. <p> This class is designed to work with (though does not require) streams </p><pre><code>public class LongSummaryStatistics\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/LongSummaryStatistics.html
Map.Entry	A										<section class="prog__container"><p> A map entry (key-value pair). The <pre><code> Map.entrySet </code></pre> method returns a collection-view of the map, whose elements are of this class. The <i> only </i> way to obtain a reference to a map entry is from the iterator of this collection-view. These <pre><code> Map.Entry </code></pre> objects are valid <i> only </i> for the duration of the iteration; more formally, the behavior of a map entry is undefined if the backing map has been modified after the entry was returned by the iterator, except through the <pre><code> setValue </code></pre> operation on the map entry.</p><pre><code>public static interface Map.Entry\n</code></pre></section>	https://developer.android.com/reference/java/util/Map.Entry.html
Map	A										<section class="prog__container"><p> An object that maps keys to values. A map cannot contain duplicate keys; each key can map to at most one value. <p> This interface takes the place of the <pre><code> Dictionary </code></pre> class, which was a totally abstract class rather than an interface. <p> The <pre><code> Map </code></pre> interface provides three <i> collection views </i> , which allow a map's contents to be viewed as a set of keys, collection of values, or set of key-value mappings. The <i> order </i> of a map is defined as the order in which the iterators on the map's collection views return their elements. Some map implementations, like the <pre><code> TreeMap </code></pre> class, make specific guarantees as to their order; others, like the <pre><code> HashMap </code></pre> class, do not. <p> Note: great care must be exercised if mutable objects are used as map keys. The behavior of a map is not specified if the value of an object is changed in a manner that affects <pre><code> equals </code></pre> comparisons while the object is a key in the map. A special case of this prohibition is that it is not permissible for a map to contain itself as a key. While it is permissible for a map to contain itself as a value, extreme caution is advised: the <pre><code> equals </code></pre> and <pre><code> hashCode </code></pre> methods are no longer well defined on such a map. <p> All general-purpose map implementation classes should provide two "standard" constructors: a void (no arguments) constructor which creates an empty map, and a constructor with a single argument of type <pre><code> Map </code></pre> , which creates a new map with the same key-value mappings as its argument. In effect, the latter constructor allows the user to copy any map, producing an equivalent map of the desired class. There is no way to enforce this recommendation (as interfaces cannot contain constructors) but all of the general-purpose map implementations in the JDK comply. <p> The "destructive" methods contained in this interface, that is, the methods that modify the map on which they operate, are specified to throw <pre><code> UnsupportedOperationException </code></pre> if this map does not support the operation. If this is the case, these methods may, but are not required to, throw an <pre><code> UnsupportedOperationException </code></pre> if the invocation would have no effect on the map. For example, invoking the <pre><code> putAll(Map) </code></pre> method on an unmodifiable map may, but is not required to, throw the exception if the map whose mappings are to be "superimposed" is empty. <p> Some map implementations have restrictions on the keys and values they may contain. For example, some implementations prohibit null keys and values, and some have restrictions on the types of their keys. Attempting to insert an ineligible key or value throws an unchecked exception, typically <pre><code> NullPointerException </code></pre> or <pre><code> ClassCastException </code></pre> . Attempting to query the presence of an ineligible key or value may throw an exception, or it may simply return false; some implementations will exhibit the former behavior and some will exhibit the latter. More generally, attempting an operation on an ineligible key or value whose completion would not result in the insertion of an ineligible element into the map may throw an exception or it may succeed, at the option of the implementation. Such exceptions are marked as "optional" in the specification for this interface. <p> Many methods in Collections Framework interfaces are defined in terms of the <pre><code> equals </code></pre> method. For example, the specification for the <pre><code> containsKey(Object key) </code></pre> method says: "returns <pre><code> true </code></pre> if and only if this map contains a mapping for a key <pre><code> k </code></pre> such that <pre><code> (key==null ? k==null : key.equals(k)) </code></pre> ." This specification should <i> not </i> be construed to imply that invoking <pre><code> Map.containsKey </code></pre> with a non-null argument <pre><code> key </code></pre> will cause <pre><code> key.equals(k) </code></pre> to be invoked for any key <pre><code> k </code></pre> . Implementations are free to implement optimizations whereby the <pre><code> equals </code></pre> invocation is avoided, for example, by first comparing the hash codes of the two keys. (The <pre><code> hashCode() </code></pre> specification guarantees that two objects with unequal hash codes cannot be equal.) More generally, implementations of the various Collections Framework interfaces are free to take advantage of the specified behavior of underlying <pre><code> Object </code></pre> methods wherever the implementor deems it appropriate. <p> Some map operations which perform recursive traversal of the map may fail with an exception for self-referential instances where the map directly or indirectly contains itself. This includes the <pre><code> clone() </code></pre> , <pre><code> equals() </code></pre> , <pre><code> hashCode() </code></pre> and <pre><code> toString() </code></pre> methods. Implementations may optionally handle the self-referential scenario, however most current implementations do not do so. </p><pre><code>public interface Map\n</code></pre></section>	https://developer.android.com/reference/java/util/Map.html
MissingFormatArgumentException	A										<section class="prog__container"><p> Unchecked exception thrown when there is a format specifier which does not have a corresponding argument or if an argument index refers to an argument that does not exist. <p> Unless otherwise specified, passing a <tt> null </tt> argument to any method or constructor in this class will cause a <pre><code> NullPointerException </code></pre> to be thrown. </p><pre><code>public class MissingFormatArgumentException\n</code></pre></section>	https://developer.android.com/reference/java/util/MissingFormatArgumentException.html
MissingFormatWidthException	A										<section class="prog__container"><p> Unchecked exception thrown when the format width is required. <p> Unless otherwise specified, passing a <tt> null </tt> argument to anyg method or constructor in this class will cause a <pre><code> NullPointerException </code></pre> to be thrown. </p><pre><code>public class MissingFormatWidthException\n</code></pre></section>	https://developer.android.com/reference/java/util/MissingFormatWidthException.html
MissingResourceException	A										<section class="prog__container"><p> Signals that a resource is missing.</p><pre><code>public class MissingResourceException\n</code></pre></section>	https://developer.android.com/reference/java/util/MissingResourceException.html
NavigableMap	A										<section class="prog__container"><p> A <pre><code> SortedMap </code></pre> extended with navigation methods returning the closest matches for given search targets. Methods <pre><code> lowerEntry(K) </code></pre> , <pre><code> floorEntry(K) </code></pre> , <pre><code> ceilingEntry(K) </code></pre> , and <pre><code> higherEntry(K) </code></pre> return <pre><code> Map.Entry </code></pre> objects associated with keys respectively less than, less than or equal, greater than or equal, and greater than a given key, returning <pre><code> null </code></pre> if there is no such key. Similarly, methods <pre><code> lowerKey(K) </code></pre> , <pre><code> floorKey(K) </code></pre> , <pre><code> ceilingKey(K) </code></pre> , and <pre><code> higherKey(K) </code></pre> return only the associated keys. All of these methods are designed for locating, not traversing entries. <p> A <pre><code> NavigableMap </code></pre> may be accessed and traversed in either ascending or descending key order. The <pre><code> descendingMap() </code></pre> method returns a view of the map with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. Methods <pre><code> subMap(K, boolean, K, boolean) </code></pre> , <pre><code> headMap(K, boolean) </code></pre> , and <pre><code> tailMap(K, boolean) </code></pre> differ from the like-named <pre><code> SortedMap </code></pre> methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Submaps of any <pre><code> NavigableMap </code></pre> must implement the <pre><code> NavigableMap </code></pre> interface. <p> This interface additionally defines methods <pre><code> firstEntry() </code></pre> , <pre><code> pollFirstEntry() </code></pre> , <pre><code> lastEntry() </code></pre> , and <pre><code> pollLastEntry() </code></pre> that return and/or remove the least and greatest mappings, if any exist, else returning <pre><code> null </code></pre> . <p> Implementations of entry-returning methods are expected to return <pre><code> Map.Entry </code></pre> pairs representing snapshots of mappings at the time they were produced, and thus generally do <em> not </em> support the optional <pre><code> Entry.setValue </code></pre> method. Note however that it is possible to change mappings in the associated map using method <pre><code> put </code></pre> . <p> Methods <pre><code> subMap(K, K) </code></pre> , <pre><code> headMap(K) </code></pre> , and <pre><code> tailMap(K) </code></pre> are specified to return <pre><code> SortedMap </code></pre> to allow existing implementations of <pre><code> SortedMap </code></pre> to be compatibly retrofitted to implement <pre><code> NavigableMap </code></pre> , but extensions and implementations of this interface are encouraged to override these methods to return <pre><code> NavigableMap </code></pre> . Similarly, <pre><code> keySet() </code></pre> can be overridden to return <pre><code> NavigableSet </code></pre> . </p><pre><code>public interface NavigableMap\nimplements SortedMap&lt;K,&nbsp;V&gt;</code></pre></section>	https://developer.android.com/reference/java/util/NavigableMap.html
NavigableSet	A										<section class="prog__container"><p> A <pre><code> SortedSet </code></pre> extended with navigation methods reporting closest matches for given search targets. Methods <pre><code> lower(E) </code></pre> , <pre><code> floor(E) </code></pre> , <pre><code> ceiling(E) </code></pre> , and <pre><code> higher(E) </code></pre> return elements respectively less than, less than or equal, greater than or equal, and greater than a given element, returning <pre><code> null </code></pre> if there is no such element. <p> A <pre><code> NavigableSet </code></pre> may be accessed and traversed in either ascending or descending order. The <pre><code> descendingSet() </code></pre> method returns a view of the set with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. This interface additionally defines methods <pre><code> pollFirst() </code></pre> and <pre><code> pollLast() </code></pre> that return and remove the lowest and highest element, if one exists, else returning <pre><code> null </code></pre> . Methods <pre><code> subSet(E, boolean, E, boolean) </code></pre> , <pre><code> headSet(E, boolean) </code></pre> , and <pre><code> tailSet(E, boolean) </code></pre> differ from the like-named <pre><code> SortedSet </code></pre> methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Subsets of any <pre><code> NavigableSet </code></pre> must implement the <pre><code> NavigableSet </code></pre> interface. <p> The return values of navigation methods may be ambiguous in implementations that permit <pre><code> null </code></pre> elements. However, even in this case the result can be disambiguated by checking <pre><code> contains(null) </code></pre> . To avoid such issues, implementations of this interface are encouraged to <em> not </em> permit insertion of <pre><code> null </code></pre> elements. (Note that sorted sets of <pre><code> Comparable </code></pre> elements intrinsically do not permit <pre><code> null </code></pre> .) <p> Methods <pre><code> subSet(E, E) </code></pre> , <pre><code> headSet(E) </code></pre> , and <pre><code> tailSet(E) </code></pre> are specified to return <pre><code> SortedSet </code></pre> to allow existing implementations of <pre><code> SortedSet </code></pre> to be compatibly retrofitted to implement <pre><code> NavigableSet </code></pre> , but extensions and implementations of this interface are encouraged to override these methods to return <pre><code> NavigableSet </code></pre> . </p><pre><code>public interface NavigableSet\nimplements SortedSet&lt;E&gt;</code></pre></section>	https://developer.android.com/reference/java/util/NavigableSet.html
NoSuchElementException	A										<section class="prog__container"><p> Thrown by the <pre><code> nextElement </code></pre> method of an <pre><code> Enumeration </code></pre> to indicate that there are no more elements in the enumeration.</p><pre><code>public class NoSuchElementException\n</code></pre></section>	https://developer.android.com/reference/java/util/NoSuchElementException.html
Objects	A										<section class="prog__container"><p> This class consists of <pre><code> static </code></pre> utility methods for operating on objects. These utilities include <pre><code> null </code></pre> -safe or <pre><code> null </code></pre> -tolerant methods for computing the hash code of an object, returning a string for an object, and comparing two objects.</p><pre><code>public final class Objects\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Objects.html
Observable	A										<section class="prog__container"><p> This class represents an observable object, or "data" in the model-view paradigm. It can be subclassed to represent an object that the application wants to have observed. <p> An observable object can have one or more observers. An observer may be any object that implements interface <tt> Observer </tt> . After an observable instance changes, an application calling the <pre><code> Observable </code></pre> 's <pre><code> notifyObservers </code></pre> method causes all of its observers to be notified of the change by a call to their <pre><code> update </code></pre> method. <p> The order in which notifications will be delivered is unspecified. The default implementation provided in the Observable class will notify Observers in the order in which they registered interest, but subclasses may change this order, use no guaranteed order, deliver notifications on separate threads, or may guarantee that their subclass follows this order, as they choose. <p> Note that this notification mechanism is has nothing to do with threads and is completely separate from the <tt> wait </tt> and <tt> notify </tt> mechanism of class <tt> Object </tt> . <p> When an observable object is newly created, its set of observers is empty. Two observers are considered the same if and only if the <tt> equals </tt> method returns true for them. </p><pre><code>public class Observable\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Observable.html
Observer	A										<section class="prog__container"><p> A class can implement the <pre><code> Observer </code></pre> interface when it wants to be informed of changes in observable objects.</p><pre><code>public interface Observer\n</code></pre></section>	https://developer.android.com/reference/java/util/Observer.html
Optional	A										<section class="prog__container"><p> A container object which may or may not contain a non-null value. If a value is present, <pre><code> isPresent() </code></pre> will return <pre><code> true </code></pre> and <pre><code> get() </code></pre> will return the value. <p> Additional methods that depend on the presence or absence of a contained value are provided, such as <pre><code> orElse() </code></pre> (return a default value if value not present) and <pre><code> ifPresent() </code></pre> (execute a block of code if the value is present). </p><pre><code>public final class Optional\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Optional.html
OptionalDouble	A										<section class="prog__container"><p> A container object which may or may not contain a <pre><code> double </code></pre> value. If a value is present, <pre><code> isPresent() </code></pre> will return <pre><code> true </code></pre> and <pre><code> getAsDouble() </code></pre> will return the value. <p> Additional methods that depend on the presence or absence of a contained value are provided, such as <pre><code> orElse() </code></pre> (return a default value if value not present) and <pre><code> ifPresent() </code></pre> (execute a block of code if the value is present). </p><pre><code>public final class OptionalDouble\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/OptionalDouble.html
OptionalInt	A										<section class="prog__container"><p> A container object which may or may not contain a <pre><code> int </code></pre> value. If a value is present, <pre><code> isPresent() </code></pre> will return <pre><code> true </code></pre> and <pre><code> getAsInt() </code></pre> will return the value. <p> Additional methods that depend on the presence or absence of a contained value are provided, such as <pre><code> orElse() </code></pre> (return a default value if value not present) and <pre><code> ifPresent() </code></pre> (execute a block of code if the value is present). </p><pre><code>public final class OptionalInt\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/OptionalInt.html
OptionalLong	A										<section class="prog__container"><p> A container object which may or may not contain a <pre><code> long </code></pre> value. If a value is present, <pre><code> isPresent() </code></pre> will return <pre><code> true </code></pre> and <pre><code> getAsLong() </code></pre> will return the value. <p> Additional methods that depend on the presence or absence of a contained value are provided, such as <pre><code> orElse() </code></pre> (return a default value if value not present) and <pre><code> ifPresent() </code></pre> (execute a block of code if the value is present). </p><pre><code>public final class OptionalLong\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/OptionalLong.html
java.util	A										<section class="prog__container">The root class from which all event state objects shall be derived. </section>	https://developer.android.com/reference/java/util/package-summary.html
PrimitiveIterator	A										<section class="prog__container"><p> A base type for primitive specializations of <pre><code> Iterator </code></pre> . Specialized subtypes are provided for <pre><code> int </code></pre> , <pre><code> long </code></pre> , and <pre><code> double </code></pre> values. <p> The specialized subtype default implementations of <pre><code> next() </code></pre> and <pre><code> forEachRemaining(java.util.function.Consumer) </code></pre> box primitive values to instances of their corresponding wrapper class. Such boxing may offset any advantages gained when using the primitive specializations. To avoid boxing, the corresponding primitive-based methods should be used. For example, <pre><code> nextInt() </code></pre> and <pre><code> forEachRemaining(java.util.function.IntConsumer) </code></pre> should be used in preference to <pre><code> next() </code></pre> and <pre><code> forEachRemaining(java.util.function.Consumer) </code></pre> . <p> Iteration of primitive values using boxing-based methods <pre><code> next() </code></pre> and <pre><code> forEachRemaining() </code></pre> , does not affect the order in which the values, transformed to boxed values, are encountered. </p><pre><code>public interface PrimitiveIterator\nimplements Iterator&lt;T&gt;</code></pre></section>	https://developer.android.com/reference/java/util/PrimitiveIterator.html
PrimitiveIterator.OfDouble	A										<section class="prog__container"><p> An Iterator specialized for <pre><code> double </code></pre> values.</p><pre><code>public static interface PrimitiveIterator.OfDouble\nimplements PrimitiveIterator&lt;Double,&nbsp;DoubleConsumer&gt;</code></pre></section>	https://developer.android.com/reference/java/util/PrimitiveIterator.OfDouble.html
PrimitiveIterator.OfInt	A										<section class="prog__container"><p> An Iterator specialized for <pre><code> int </code></pre> values.</p><pre><code>public static interface PrimitiveIterator.OfInt\nimplements PrimitiveIterator&lt;Integer,&nbsp;IntConsumer&gt;</code></pre></section>	https://developer.android.com/reference/java/util/PrimitiveIterator.OfInt.html
PrimitiveIterator.OfLong	A										<section class="prog__container"><p> An Iterator specialized for <pre><code> long </code></pre> values.</p><pre><code>public static interface PrimitiveIterator.OfLong\nimplements PrimitiveIterator&lt;Long,&nbsp;LongConsumer&gt;</code></pre></section>	https://developer.android.com/reference/java/util/PrimitiveIterator.OfLong.html
PriorityQueue	A										<section class="prog__container"><p> An unbounded priority queue</p><pre><code>public class PriorityQueue\n</code></pre></section>	https://developer.android.com/reference/java/util/PriorityQueue.html
Properties	A										<section class="prog__container"><p> The <pre><code> Properties </code></pre> class represents a persistent set of properties. The <pre><code> Properties </code></pre> can be saved to a stream or loaded from a stream. Each key and its corresponding value in the property list is a string. <p> A property list can contain another property list as its "defaults"; this second property list is searched if the property key is not found in the original property list. <p> Because <pre><code> Properties </code></pre> inherits from <pre><code> Hashtable </code></pre> , the <pre><code> put </code></pre> and <pre><code> putAll </code></pre> methods can be applied to a <pre><code> Properties </code></pre> object. Their use is strongly discouraged as they allow the caller to insert entries whose keys or values are not <pre><code> Strings </code></pre> . The <pre><code> setProperty </code></pre> method should be used instead. If the <pre><code> store </code></pre> or <pre><code> save </code></pre> method is called on a "compromised" <pre><code> Properties </code></pre> object that contains a non- <pre><code> String </code></pre> key or value, the call will fail. Similarly, the call to the <pre><code> propertyNames </code></pre> or <pre><code> list </code></pre> method will fail if it is called on a "compromised" <pre><code> Properties </code></pre> object that contains a non- <pre><code> String </code></pre> key. <p> The <pre><code> load(Reader) </code></pre> <tt> / </tt> <pre><code> store(Writer, String) </code></pre> methods load and store properties from and to a character based stream in a simple line-oriented format specified below. The <pre><code> load(InputStream) </code></pre> <tt> / </tt> <pre><code> store(OutputStream, String) </code></pre> methods work the same way as the load(Reader)/store(Writer, String) pair, except the input/output stream is encoded in ISO 8859-1 character encoding. Characters that cannot be directly represented in this encoding can be written using Unicode escapes as defined in section 3.3 of <cite> The Java™ Language Specification </cite> ; only a single 'u' character is allowed in an escape sequence. The native2ascii tool can be used to convert property files to and from other character encodings. <p> The <pre><code> loadFromXML(InputStream) </code></pre> and <pre><code> storeToXML(OutputStream, String, String) </code></pre> methods load and store properties in a simple XML format. By default the UTF-8 character encoding is used, however a specific encoding may be specified if required. An XML properties document has the following DOCTYPE declaration: <pre> &lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt; </pre> Note that the system URI (http://java.sun.com/dtd/properties.dtd) is <i> not </i> accessed when exporting or importing properties; it merely serves as a string to uniquely identify the DTD, which is: <pre> &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!-- DTD for properties --&gt; &lt;!ELEMENT properties ( comment?, entry* ) &gt; &lt;!ATTLIST properties version CDATA #FIXED "1.0"&gt; &lt;!ELEMENT comment (#PCDATA) &gt; &lt;!ELEMENT entry (#PCDATA) &gt; &lt;!ATTLIST entry key CDATA #REQUIRED&gt; </pre> <p> This class is thread-safe: multiple threads can share a single <tt> Properties </tt> object without the need for external synchronization. </p><pre><code>public class Properties\n</code></pre></section>	https://developer.android.com/reference/java/util/Properties.html
PropertyPermission	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public final class PropertyPermission\n</code></pre></section>	https://developer.android.com/reference/java/util/PropertyPermission.html
PropertyResourceBundle	A										<section class="prog__container"><p> <pre><code> PropertyResourceBundle </code></pre> is a concrete subclass of <pre><code> ResourceBundle </code></pre> that manages resources for a locale using a set of static strings from a property file. See <pre><code> ResourceBundle </code></pre> for more information about resource bundles. <p> Unlike other types of resource bundle, you don't subclass <pre><code> PropertyResourceBundle </code></pre> . Instead, you supply properties files containing the resource data. <pre><code> ResourceBundle.getBundle </code></pre> will automatically look for the appropriate properties file and create a <pre><code> PropertyResourceBundle </code></pre> that refers to it. See <pre><code> ResourceBundle.getBundle </code></pre> for a complete description of the search and instantiation strategy. <p> The following example shows a member of a resource bundle family with the base name "MyResources". The text defines the bundle "MyResources_de", the German member of the bundle family. This member is based on <pre><code> PropertyResourceBundle </code></pre> , and the text therefore is the content of the file "MyResources_de.properties" (a related example shows how you can add bundles to this family that are implemented as subclasses of <pre><code> ListResourceBundle </code></pre> ). The keys in this example are of the form "s1" etc. The actual keys are entirely up to your choice, so long as they are the same as the keys you use in your program to retrieve the objects from the bundle. Keys are case-sensitive. <blockquote> <pre> # MessageFormat pattern s1=Die Platte \"{1}\" enthält {0}. # location of {0} in pattern s2=1 # sample disk name s3=Meine Platte # first ChoiceFormat choice s4=keine Dateien # second ChoiceFormat choice s5=eine Datei # third ChoiceFormat choice s6={0,number} Dateien # sample date s7=3. März 1996 </pre> </blockquote> <p> <strong> Note: </strong> PropertyResourceBundle can be constructed either from an InputStream or a Reader, which represents a property file. Constructing a PropertyResourceBundle instance from an InputStream requires that the input stream be encoded in ISO-8859-1. In that case, characters that cannot be represented in ISO-8859-1 encoding must be represented by Unicode Escapes as defined in section 3.3 of <cite> The Java™ Language Specification </cite> whereas the other constructor which takes a Reader does not have that limitation. </p><pre><code>public class PropertyResourceBundle\n</code></pre></section>	https://developer.android.com/reference/java/util/PropertyResourceBundle.html
Queue	A										<section class="prog__container"><p> A collection designed for holding elements prior to processing. Besides basic <pre><code> Collection </code></pre> operations, queues provide additional insertion, extraction, and inspection operations. Each of these methods exists in two forms: one throws an exception if the operation fails, the other returns a special value (either <pre><code> null </code></pre> or <pre><code> false </code></pre> , depending on the operation). The latter form of the insert operation is designed specifically for use with capacity-restricted <pre><code> Queue </code></pre> implementations; in most implementations, insert operations cannot fail. <table border="" cellpadding="3" cellspacing="1"> <caption> Summary of Queue methods </caption> <tr> <td> </td> <td align="CENTER"> <em> Throws exception </em> </td> <td align="CENTER"> <em> Returns special value </em> </td> </tr> <tr> <td> <b> Insert </b> </td> <td> <pre><code> add(e) </code></pre> </td> <td> <pre><code> offer(e) </code></pre> </td> </tr> <tr> <td> <b> Remove </b> </td> <td> <pre><code> remove() </code></pre> </td> <td> <pre><code> poll() </code></pre> </td> </tr> <tr> <td> <b> Examine </b> </td> <td> <pre><code> element() </code></pre> </td> <td> <pre><code> peek() </code></pre> </td> </tr> </table> <p> Queues typically, but do not necessarily, order elements in a FIFO (first-in-first-out) manner. Among the exceptions are priority queues, which order elements according to a supplied comparator, or the elements' natural ordering, and LIFO queues (or stacks) which order the elements LIFO (last-in-first-out). Whatever the ordering used, the <em> head </em> of the queue is that element which would be removed by a call to <pre><code> remove() </code></pre> or <pre><code> poll() </code></pre> . In a FIFO queue, all new elements are inserted at the <em> tail </em> of the queue. Other kinds of queues may use different placement rules. Every <pre><code> Queue </code></pre> implementation must specify its ordering properties. <p> The <pre><code> offer </code></pre> method inserts an element if possible, otherwise returning <pre><code> false </code></pre> . This differs from the <pre><code> Collection.add </code></pre> method, which can fail to add an element only by throwing an unchecked exception. The <pre><code> offer </code></pre> method is designed for use when failure is a normal, rather than exceptional occurrence, for example, in fixed-capacity (or "bounded") queues. <p> The <pre><code> remove() </code></pre> and <pre><code> poll() </code></pre> methods remove and return the head of the queue. Exactly which element is removed from the queue is a function of the queue's ordering policy, which differs from implementation to implementation. The <pre><code> remove() </code></pre> and <pre><code> poll() </code></pre> methods differ only in their behavior when the queue is empty: the <pre><code> remove() </code></pre> method throws an exception, while the <pre><code> poll() </code></pre> method returns <pre><code> null </code></pre> . <p> The <pre><code> element() </code></pre> and <pre><code> peek() </code></pre> methods return, but do not remove, the head of the queue. <p> The <pre><code> Queue </code></pre> interface does not define the <i> blocking queue methods </i> , which are common in concurrent programming. These methods, which wait for elements to appear or for space to become available, are defined in the <pre><code> BlockingQueue </code></pre> interface, which extends this interface. <p> <pre><code> Queue </code></pre> implementations generally do not allow insertion of <pre><code> null </code></pre> elements, although some implementations, such as <pre><code> LinkedList </code></pre> , do not prohibit insertion of <pre><code> null </code></pre> . Even in the implementations that permit it, <pre><code> null </code></pre> should not be inserted into a <pre><code> Queue </code></pre> , as <pre><code> null </code></pre> is also used as a special return value by the <pre><code> poll </code></pre> method to indicate that the queue contains no elements. <p> <pre><code> Queue </code></pre> implementations generally do not define element-based versions of methods <pre><code> equals </code></pre> and <pre><code> hashCode </code></pre> but instead inherit the identity based versions from class <pre><code> Object </code></pre> , because element-based equality is not always well-defined for queues with the same elements but different ordering properties. </p><pre><code>public interface Queue\nimplements Collection&lt;E&gt;</code></pre></section>	https://developer.android.com/reference/java/util/Queue.html
Random	A										<section class="prog__container"><p> An instance of this class is used to generate a stream of pseudorandom numbers. The class uses a 48-bit seed, which is modified using a linear congruential formula. (See Donald Knuth, <i> The Art of Computer Programming, Volume 2 </i> , Section 3.2.1.) <p> If two instances of <pre><code> Random </code></pre> are created with the same seed, and the same sequence of method calls is made for each, they will generate and return identical sequences of numbers. In order to guarantee this property, particular algorithms are specified for the class <pre><code> Random </code></pre> . Java implementations must use all the algorithms shown here for the class <pre><code> Random </code></pre> , for the sake of absolute portability of Java code. However, subclasses of class <pre><code> Random </code></pre> are permitted to use other algorithms, so long as they adhere to the general contracts for all the methods. <p> The algorithms implemented by class <pre><code> Random </code></pre> use a <pre><code> protected </code></pre> utility method that on each invocation can supply up to 32 pseudorandomly generated bits. <p> Many applications will find the method <pre><code> random() </code></pre> simpler to use. <p> Instances of <pre><code> java.util.Random </code></pre> are threadsafe. However, the concurrent use of the same <pre><code> java.util.Random </code></pre> instance across threads may encounter contention and consequent poor performance. Consider instead using <pre><code> ThreadLocalRandom </code></pre> in multithreaded designs. <p> Instances of <pre><code> java.util.Random </code></pre> are not cryptographically secure. Consider instead using <pre><code> SecureRandom </code></pre> to get a cryptographically secure pseudo-random number generator for use by security-sensitive applications. </p><pre><code>public class Random\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Random.html
RandomAccess	A										<section class="prog__container"><p> Marker interface used by <tt> List </tt> implementations to indicate that they support fast (generally constant time) random access. The primary purpose of this interface is to allow generic algorithms to alter their behavior to provide good performance when applied to either random or sequential access lists. <p> The best algorithms for manipulating random access lists (such as <tt> ArrayList </tt> ) can produce quadratic behavior when applied to sequential access lists (such as <tt> LinkedList </tt> ). Generic list algorithms are encouraged to check whether the given list is an <tt> instanceof </tt> this interface before applying an algorithm that would provide poor performance if it were applied to a sequential access list, and to alter their behavior if necessary to guarantee acceptable performance. <p> It is recognized that the distinction between random and sequential access is often fuzzy. For example, some <tt> List </tt> implementations provide asymptotically linear access times if they get huge, but constant access times in practice. Such a <tt> List </tt> implementation should generally implement this interface. As a rule of thumb, a <tt> List </tt> implementation should implement this interface if, for typical instances of the class, this loop: <pre> for (int i=0, n=list.size(); i &lt; n; i++) list.get(i); </pre> runs faster than this loop: <pre> for (Iterator i=list.iterator(); i.hasNext(); ) i.next(); </pre> <p> This interface is a member of the Java Collections Framework . </p><pre><code>public interface RandomAccess\n</code></pre></section>	https://developer.android.com/reference/java/util/RandomAccess.html
ResourceBundle.Control	A										<section class="prog__container"><p> <pre><code> ResourceBundle.Control </code></pre> defines a set of callback methods that are invoked by the <pre><code> ResourceBundle.getBundle </code></pre> factory methods during the bundle loading process. In other words, a <pre><code> ResourceBundle.Control </code></pre> collaborates with the factory methods for loading resource bundles. The default implementation of the callback methods provides the information necessary for the factory methods to perform the default behavior . <p> In addition to the callback methods, the <pre><code> toBundleName </code></pre> and <pre><code> toResourceName </code></pre> methods are defined primarily for convenience in implementing the callback methods. However, the <pre><code> toBundleName </code></pre> method could be overridden to provide different conventions in the organization and packaging of localized resources. The <pre><code> toResourceName </code></pre> method is <pre><code> final </code></pre> to avoid use of wrong resource and class name separators. <p> Two factory methods, <pre><code> getControl(List) </code></pre> and <pre><code> getNoFallbackControl(List) </code></pre> , provide <pre><code> ResourceBundle.Control </code></pre> instances that implement common variations of the default bundle loading process. <p> The formats returned by the <pre><code> getFormats </code></pre> method and candidate locales returned by the <pre><code> getCandidateLocales </code></pre> method must be consistent in all <pre><code> ResourceBundle.getBundle </code></pre> invocations for the same base bundle. Otherwise, the <pre><code> ResourceBundle.getBundle </code></pre> methods may return unintended bundles. For example, if only <pre><code> "java.class" </code></pre> is returned by the <pre><code> getFormats </code></pre> method for the first call to <pre><code> ResourceBundle.getBundle </code></pre> and only <pre><code> "java.properties" </code></pre> for the second call, then the second call will return the class-based one that has been cached during the first call. <p> A <pre><code> ResourceBundle.Control </code></pre> instance must be thread-safe if it's simultaneously used by multiple threads. <pre><code> ResourceBundle.getBundle </code></pre> does not synchronize to call the <pre><code> ResourceBundle.Control </code></pre> methods. The default implementations of the methods are thread-safe. <p> Applications can specify <pre><code> ResourceBundle.Control </code></pre> instances returned by the <pre><code> getControl </code></pre> factory methods or created from a subclass of <pre><code> ResourceBundle.Control </code></pre> to customize the bundle loading process. The following are examples of changing the default bundle loading process. <p> <b> Example 1 </b> <p> The following code lets <pre><code> ResourceBundle.getBundle </code></pre> look up only properties-based resources. <pre> import java.util.*; import static java.util.ResourceBundle.Control.*; ... ResourceBundle bundle = ResourceBundle.getBundle("MyResources", new Locale("fr", "CH"), ResourceBundle.Control.getControl(FORMAT_PROPERTIES)); </pre> Given the resource bundles in the example in the <pre><code> ResourceBundle.getBundle </code></pre> description, this <pre><code> ResourceBundle.getBundle </code></pre> call loads <pre><code> MyResources_fr_CH.properties </code></pre> whose parent is <pre><code> MyResources_fr.properties </code></pre> whose parent is <pre><code> MyResources.properties </code></pre> . ( <pre><code> MyResources_fr_CH.properties </code></pre> is not hidden, but <pre><code> MyResources_fr_CH.class </code></pre> is.) <p> <b> Example 2 </b> <p> The following is an example of loading XML-based bundles using <pre><code> Properties.loadFromXML </code></pre> . <pre> ResourceBundle rb = ResourceBundle.getBundle("Messages", new ResourceBundle.Control() { public List&lt;String&gt; getFormats(String baseName) { if (baseName == null) throw new NullPointerException(); return Arrays.asList("xml"); } public ResourceBundle newBundle(String baseName, Locale locale, String format, ClassLoader loader, boolean reload) throws IllegalAccessException, InstantiationException, IOException { if (baseName == null || locale == null || format == null || loader == null) throw new NullPointerException(); ResourceBundle bundle = null; if (format.equals("xml")) { String bundleName = toBundleName(baseName, locale); String resourceName = toResourceName(bundleName, format); InputStream stream = null; if (reload) { URL url = loader.getResource(resourceName); if (url != null) { URLConnection connection = url.openConnection(); if (connection != null) { // Disable caches to get fresh data for // reloading. connection.setUseCaches(false); stream = connection.getInputStream(); } } } else { stream = loader.getResourceAsStream(resourceName); } if (stream != null) { BufferedInputStream bis = new BufferedInputStream(stream); bundle = new XMLResourceBundle(bis); bis.close(); } } return bundle; } }); ... private static class XMLResourceBundle extends ResourceBundle { private Properties props; XMLResourceBundle(InputStream stream) throws IOException { props = new Properties(); props.loadFromXML(stream); } protected Object handleGetObject(String key) { return props.getProperty(key); } public Enumeration&lt;String&gt; getKeys() { ... } } </pre> </p><pre><code>public static class ResourceBundle.Control\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/ResourceBundle.Control.html
ResourceBundle	A										<section class="prog__container"><p> Resource bundles contain locale-specific objects. When your program needs a locale-specific resource, a <pre><code> String </code></pre> for example, your program can load it from the resource bundle that is appropriate for the current user's locale. In this way, you can write program code that is largely independent of the user's locale isolating most, if not all, of the locale-specific information in resource bundles. <p> This allows you to write programs that can: <ul type="SQUARE"> <li> be easily localized, or translated, into different languages <li> handle multiple locales at once <li> be easily modified later to support even more locales </li> </li> </li> </ul> <p> Resource bundles belong to families whose members share a common base name, but whose names also have additional components that identify their locales. For example, the base name of a family of resource bundles might be "MyResources". The family should have a default resource bundle which simply has the same name as its family - "MyResources" - and will be used as the bundle of last resort if a specific locale is not supported. The family can then provide as many locale-specific members as needed, for example a German one named "MyResources_de". <p> Each resource bundle in a family contains the same items, but the items have been translated for the locale represented by that resource bundle. For example, both "MyResources" and "MyResources_de" may have a <pre><code> String </code></pre> that's used on a button for canceling operations. In "MyResources" the <pre><code> String </code></pre> may contain "Cancel" and in "MyResources_de" it may contain "Abbrechen". <p> If there are different resources for different countries, you can make specializations: for example, "MyResources_de_CH" contains objects for the German language (de) in Switzerland (CH). If you want to only modify some of the resources in the specialization, you can do so. <p> When your program needs a locale-specific object, it loads the <pre><code> ResourceBundle </code></pre> class using the <pre><code> getBundle </code></pre> method: <blockquote> <pre> ResourceBundle myResources = ResourceBundle.getBundle("MyResources", currentLocale); </pre> </blockquote> <p> Resource bundles contain key/value pairs. The keys uniquely identify a locale-specific object in the bundle. Here's an example of a <pre><code> ListResourceBundle </code></pre> that contains two key/value pairs: <blockquote> <pre> public class MyResources extends ListResourceBundle { protected Object[][] getContents() { return new Object[][] { // LOCALIZE THE SECOND STRING OF EACH ARRAY (e.g., "OK") {"OkKey", "OK"}, {"CancelKey", "Cancel"}, // END OF MATERIAL TO LOCALIZE }; } } </pre> </blockquote> Keys are always <pre><code> String </code></pre> s. In this example, the keys are "OkKey" and "CancelKey". In the above example, the values are also <pre><code> String </code></pre> s--"OK" and "Cancel"--but they don't have to be. The values can be any type of object. <p> You retrieve an object from resource bundle using the appropriate getter method. Because "OkKey" and "CancelKey" are both strings, you would use <pre><code> getString </code></pre> to retrieve them: <blockquote> <pre> button1 = new Button(myResources.getString("OkKey")); button2 = new Button(myResources.getString("CancelKey")); </pre> </blockquote> The getter methods all require the key as an argument and return the object if found. If the object is not found, the getter method throws a <pre><code> MissingResourceException </code></pre> . <p> Besides <pre><code> getString </code></pre> , <pre><code> ResourceBundle </code></pre> also provides a method for getting string arrays, <pre><code> getStringArray </code></pre> , as well as a generic <pre><code> getObject </code></pre> method for any other type of object. When using <pre><code> getObject </code></pre> , you'll have to cast the result to the appropriate type. For example: <blockquote> <pre> int[] myIntegers = (int[]) myResources.getObject("intList"); </pre> </blockquote> <p> The Java Platform provides two subclasses of <pre><code> ResourceBundle </code></pre> , <pre><code> ListResourceBundle </code></pre> and <pre><code> PropertyResourceBundle </code></pre> , that provide a fairly simple way to create resources. As you saw briefly in a previous example, <pre><code> ListResourceBundle </code></pre> manages its resource as a list of key/value pairs. <pre><code> PropertyResourceBundle </code></pre> uses a properties file to manage its resources. <p> If <pre><code> ListResourceBundle </code></pre> or <pre><code> PropertyResourceBundle </code></pre> do not suit your needs, you can write your own <pre><code> ResourceBundle </code></pre> subclass. Your subclasses must override two methods: <pre><code> handleGetObject </code></pre> and <pre><code> getKeys() </code></pre> . <h4> ResourceBundle.Control </h4> The <pre><code> ResourceBundle.Control </code></pre> class provides information necessary to perform the bundle loading process by the <pre><code> getBundle </code></pre> factory methods that take a <pre><code> ResourceBundle.Control </code></pre> instance. You can implement your own subclass in order to enable non-standard resource bundle formats, change the search strategy, or define caching parameters. Refer to the descriptions of the class and the <pre><code> getBundle </code></pre> factory method for details. <h4> Cache Management </h4> Resource bundle instances created by the <pre><code> getBundle </code></pre> factory methods are cached by default, and the factory methods return the same resource bundle instance multiple times if it has been cached. <pre><code> getBundle </code></pre> clients may clear the cache, manage the lifetime of cached resource bundle instances using time-to-live values, or specify not to cache resource bundle instances. Refer to the descriptions of the <pre><code> getBundle </code></pre> factory method </p><pre><code>public abstract class ResourceBundle\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/ResourceBundle.html
Scanner	A										<section class="prog__container"><p> A simple text scanner which can parse primitive types and strings using regular expressions. <p> A <pre><code> Scanner </code></pre> breaks its input into tokens using a delimiter pattern, which by default matches whitespace. The resulting tokens may then be converted into values of different types using the various <tt> next </tt> methods. <p> For example, this code allows a user to read a number from <tt> System.in </tt> : <blockquote> <pre> Scanner sc = new Scanner(System.in); int i = sc.nextInt(); </pre> </blockquote> <p> As another example, this code allows <pre><code> long </code></pre> types to be assigned from entries in a file <pre><code> myNumbers </code></pre> : <blockquote> <pre> Scanner sc = new Scanner(new File("myNumbers")); while (sc.hasNextLong()) { long aLong = sc.nextLong(); }</pre> </blockquote> <p> The scanner can also use delimiters other than whitespace. This example reads several items in from a string: <blockquote> <pre> String input = "1 fish 2 fish red fish blue fish"; Scanner s = new Scanner(input).useDelimiter("\\s*fish\\s*"); System.out.println(s.nextInt()); System.out.println(s.nextInt()); System.out.println(s.next()); System.out.println(s.next()); s.close(); </pre> </blockquote> <p> prints the following output: <blockquote> <pre> 1 2 red blue </pre> </blockquote> <p> The same output can be generated with this code, which uses a regular expression to parse all four tokens at once: <blockquote> <pre> String input = "1 fish 2 fish red fish blue fish"; Scanner s = new Scanner(input); s.findInLine("(\\d+) fish (\\d+) fish (\\w+) fish (\\w+)"); MatchResult result = s.match(); for (int i=1; i&lt;=result.groupCount(); i++) System.out.println(result.group(i)); s.close(); </pre> </blockquote> <p> The default whitespace delimiter used by a scanner is as recognized by <pre><code> Character </code></pre> . <pre><code> isWhitespace </code></pre> . The <pre><code> reset() </code></pre> method will reset the value of the scanner's delimiter to the default whitespace delimiter regardless of whether it was previously changed. <p> A scanning operation may block waiting for input. <p> The <pre><code> next() </code></pre> and <pre><code> hasNext() </code></pre> methods and their primitive-type companion methods (such as <pre><code> nextInt() </code></pre> and <pre><code> hasNextInt() </code></pre> ) first skip any input that matches the delimiter pattern, and then attempt to return the next token. Both <tt> hasNext </tt> and <tt> next </tt> methods may block waiting for further input. Whether a <tt> hasNext </tt> method blocks has no connection to whether or not its associated <tt> next </tt> method will block. <p> The <pre><code> findInLine(String) </code></pre> , <pre><code> findWithinHorizon(String, int) </code></pre> , and <pre><code> skip(String) </code></pre> methods operate independently of the delimiter pattern. These methods will attempt to match the specified pattern with no regard to delimiters in the input and thus can be used in special circumstances where delimiters are not relevant. These methods may block waiting for more input. <p> When a scanner throws an <pre><code> InputMismatchException </code></pre> , the scanner will not pass the token that caused the exception, so that it may be retrieved or skipped via some other method. <p> Depending upon the type of delimiting pattern, empty tokens may be returned. For example, the pattern <tt> "\\s+" </tt> will return no empty tokens since it matches multiple instances of the delimiter. The delimiting pattern <tt> "\\s" </tt> could return empty tokens since it only passes one space at a time. <p> A scanner can read text from any object which implements the <pre><code> Readable </code></pre> interface. If an invocation of the underlying readable's <pre><code> read(CharBuffer) </code></pre> method throws an <pre><code> IOException </code></pre> then the scanner assumes that the end of the input has been reached. The most recent <tt> IOException </tt> thrown by the underlying readable can be retrieved via the <pre><code> ioException() </code></pre> method. <p> When a <pre><code> Scanner </code></pre> is closed, it will close its input source if the source implements the <pre><code> Closeable </code></pre> interface. <p> A <pre><code> Scanner </code></pre> is not safe for multithreaded use without external synchronization. <p> Unless otherwise mentioned, passing a <pre><code> null </code></pre> parameter into any method of a <pre><code> Scanner </code></pre> will cause a <pre><code> NullPointerException </code></pre> to be thrown. <p> A scanner will default to interpreting numbers as decimal unless a different radix has been set by using the <pre><code> useRadix(int) </code></pre> method. The <pre><code> reset() </code></pre> method will reset the value of the scanner's radix to <pre><code> 10 </code></pre> regardless of whether it was previously changed. <h4> Localized numbers </h4> <p> An instance of this class is capable of scanning numbers in the standard formats as well as in the formats of the scanner's locale. A scanner's initial locale is the value returned by the <pre><code> getDefault() </code></pre> method; it may be changed via the <pre><code> useLocale(Locale) </code></pre> method. The <pre><code> reset() </code></pre> method will reset the value of the scanner's locale to the initial locale regardless of whether it was previously changed. <p> The localized formats are defined in terms of the following parameters, which for a particular locale are taken from that locale's <pre><code> DecimalFormat </code></pre> object, <tt> df </tt> , and its and <pre><code> DecimalFormatSymbols </code></pre> object, <tt> dfs </tt> . <blockquote> <table> <tr> <td valign="top"> <i> LocalGroupSeparator </i> </td> <td valign="top"> The character used to separate thousands groups, <i> i.e., </i> <tt> dfs. </tt> <pre><code> getGroupingSeparator() </code></pre> </td> </tr> <tr> <td valign="top"> <i> LocalDecimalSeparator </i> </td> <td valign="top"> The character used for the decimal point, <i> i.e., </i> <tt> dfs. </tt> <pre><code> getDecimalSeparator() </code></pre> </td> </tr> <tr> <td valign="top"> <i> LocalPositivePrefix </i> </td> <td valign="top"> The string that appears before a positive number (may be empty), <i> i.e., </i> <tt> df. </tt> <pre><code> getPositivePrefix() </code></pre> </td> </tr> <tr> <td valign="top"> <i> LocalPositiveSuffix </i> </td> <td valign="top"> The string that appears after a positive number (may be empty), <i> i.e., </i> <tt> df. </tt> <pre><code> getPositiveSuffix() </code></pre> </td> </tr> <tr> <td valign="top"> <i> LocalNegativePrefix </i> </td> <td valign="top"> The string that appears before a negative number (may be empty), <i> i.e., </i> <tt> df. </tt> <pre><code> getNegativePrefix() </code></pre> </td> </tr> <tr> <td valign="top"> <i> LocalNegativeSuffix </i> </td> <td valign="top"> The string that appears after a negative number (may be empty), <i> i.e., </i> <tt> df. </tt> <pre><code> getNegativeSuffix() </code></pre> </td> </tr> <tr> <td valign="top"> <i> LocalNaN </i> </td> <td valign="top"> The string that represents not-a-number for floating-point values, <i> i.e., </i> <tt> dfs. </tt> <pre><code> getNaN() </code></pre> </td> </tr> <tr> <td valign="top"> <i> LocalInfinity </i> </td> <td valign="top"> The string that represents infinity for floating-point values, <i> i.e., </i> <tt> dfs. </tt> <pre><code> getInfinity() </code></pre> </td> </tr> </table> </blockquote> <h4> Number syntax </h4> <p> The strings that can be parsed as numbers by an instance of this class are specified in terms of the following regular-expression grammar, where Rmax is the highest digit in the radix being used (for example, Rmax is 9 in base 10). <p> <table align="center" cellpadding="0" cellspacing="0"> <tr> <td align="right" valign="top"> <i> NonASCIIDigit </i> :: </td> <td valign="top"> = A non-ASCII character c for which <pre><code> Character.isDigit </code></pre> <tt> (c) </tt> returns true </td> </tr> <tr> <td> </td> </tr> <tr> <td align="right"> <i> Non0Digit </i> :: </td> <td> <tt> = [1- </tt> <i> Rmax </i> <tt> ] | </tt> <i> NonASCIIDigit </i> </td> </tr> <tr> <td> </td> </tr> <tr> <td align="right"> <i> Digit </i> :: </td> <td> <tt> = [0- </tt> <i> Rmax </i> <tt> ] | </tt> <i> NonASCIIDigit </i> </td> </tr> <tr> <td> </td> </tr> <tr> <td align="right" valign="top"> <i> GroupedNumeral </i> :: </td> <td valign="top"> <table cellpadding="0" cellspacing="0"> <tr> <td> <tt> = ( </tt> </td> <td> <i> Non0Digit </i> <tt> </tt> <i> Digit </i> <tt> ? </tt> <i> Digit </i> <tt> ? </tt> </td> </tr> <tr> <td> </td> <td> <tt> ( </tt> <i> LocalGroupSeparator </i> <tt> </tt> <i> Digit </i> <tt> </tt> <i> Digit </i> <tt> </tt> <i> Digit </i> <tt> )+ ) </tt> </td> </tr> </table> </td> </tr> <tr> <td> </td> </tr> <tr> <td align="right"> <i> Numeral </i> :: </td> <td> <tt> = ( ( </tt> <i> Digit </i> <tt> + ) | </tt> <i> GroupedNumeral </i> <tt> ) </tt> </td> </tr> <tr> <td> </td> </tr> <tr> <td align="right" valign="top"> <i> Integer </i> :: </td> <td valign="top"> <tt> = ( [-+]? ( </tt> <i> Numeral </i> <tt> ) ) </tt> </td> </tr> <tr> <td> </td> <td> <tt> | </tt> <i> LocalPositivePrefix </i> <tt> </tt> <i> Numeral </i> <tt> </tt> <i> LocalPositiveSuffix </i> </td> </tr> <tr> <td> </td> <td> <tt> | </tt> <i> LocalNegativePrefix </i> <tt> </tt> <i> Numeral </i> <tt> </tt> <i> LocalNegativeSuffix </i> </td> </tr> <tr> <td> </td> </tr> <tr> <td align="right"> <i> DecimalNumeral </i> :: </td> <td> <tt> = </tt> <i> Numeral </i> </td> </tr> <tr> <td> </td> <td> <tt> | </tt> <i> Numeral </i> <tt> </tt> <i> LocalDecimalSeparator </i> <tt> </tt> <i> Digit </i> <tt> * </tt> </td> </tr> <tr> <td> </td> <td> <tt> | </tt> <i> LocalDecimalSeparator </i> <tt> </tt> <i> Digit </i> <tt> + </tt> </td> </tr> <tr> <td> </td> </tr> <tr> <td align="right"> <i> Exponent </i> :: </td> <td> <tt> = ( [eE] [+-]? </tt> <i> Digit </i> <tt> + ) </tt> </td> </tr> <tr> <td> </td> </tr> <tr> <td align="right"> <i> Decimal </i> :: </td> <td> <tt> = ( [-+]? </tt> <i> DecimalNumeral </i> <tt> </tt> <i> Exponent </i> <tt> ? ) </tt> </td> </tr> <tr> <td> </td> <td> <tt> | </tt> <i> LocalPositivePrefix </i> <tt> </tt> <i> DecimalNumeral </i> <tt> </tt> <i> LocalPositiveSuffix </i> </td> </tr> </table> </p><pre><code>public final class Scanner\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Scanner.html
ServiceConfigurationError	A										<section class="prog__container"><p> Error thrown when something goes wrong while loading a service provider. <p> This error will be thrown in the following situations: <ul> <li> The format of a provider-configuration file violates the specification ; </li> <li> An <pre><code> IOException </code></pre> occurs while reading a provider-configuration file; </li> <li> A concrete provider class named in a provider-configuration file cannot be found; </li> <li> A concrete provider class is not a subclass of the service class; </li> <li> A concrete provider class cannot be instantiated; or <li> Some other kind of error occurs. </li> </li> </ul> </p><pre><code>public class ServiceConfigurationError\n</code></pre></section>	https://developer.android.com/reference/java/util/ServiceConfigurationError.html
ServiceLoader	A										<section class="prog__container"><p> A simple service-provider loading facility. <p> A <i> service </i> is a well-known set of interfaces and (usually abstract) classes. A <i> service provider </i> is a specific implementation of a service. The classes in a provider typically implement the interfaces and subclass the classes defined in the service itself. Service providers can be installed in an implementation of the Java platform in the form of extensions, that is, jar files placed into any of the usual extension directories. Providers can also be made available by adding them to the application's class path or by some other platform-specific means. <p> For the purpose of loading, a service is represented by a single type, that is, a single interface or abstract class. (A concrete class can be used, but this is not recommended.) A provider of a given service contains one or more concrete classes that extend this <i> service type </i> with data and code specific to the provider. The <i> provider class </i> is typically not the entire provider itself but rather a proxy which contains enough information to decide whether the provider is able to satisfy a particular request together with code that can create the actual provider on demand. The details of provider classes tend to be highly service-specific; no single class or interface could possibly unify them, so no such type is defined here. The only requirement enforced by this facility is that provider classes must have a zero-argument constructor so that they can be instantiated during loading. <p> A service provider is identified by placing a <i> provider-configuration file </i> in the resource directory <tt> META-INF/services </tt> . The file's name is the fully-qualified binary name of the service's type. The file contains a list of fully-qualified binary names of concrete provider classes, one per line. Space and tab characters surrounding each name, as well as blank lines, are ignored. The comment character is <tt> '#' </tt> ( <tt> '\u0023' </tt> , <font size="-1"> NUMBER SIGN </font> ); on each line all characters following the first comment character are ignored. The file must be encoded in UTF-8. <p> If a particular concrete provider class is named in more than one configuration file, or is named in the same configuration file more than once, then the duplicates are ignored. The configuration file naming a particular provider need not be in the same jar file or other distribution unit as the provider itself. The provider must be accessible from the same class loader that was initially queried to locate the configuration file; note that this is not necessarily the class loader from which the file was actually loaded. <p> Providers are located and instantiated lazily, that is, on demand. A service loader maintains a cache of the providers that have been loaded so far. Each invocation of the <pre><code> iterator </code></pre> method returns an iterator that first yields all of the elements of the cache, in instantiation order, and then lazily locates and instantiates any remaining providers, adding each one to the cache in turn. The cache can be cleared via the <pre><code> reload </code></pre> method. <p> Service loaders always execute in the security context of the caller. Trusted system code should typically invoke the methods in this class, and the methods of the iterators which they return, from within a privileged security context. <p> Instances of this class are not safe for use by multiple concurrent threads. <p> Unless otherwise specified, passing a <tt> null </tt> argument to any method in this class will cause a <pre><code> NullPointerException </code></pre> to be thrown. <p> <span style="font-weight: bold; padding-right: 1em"> Example </span> Suppose we have a service type <tt> com.example.CodecSet </tt> which is intended to represent sets of encoder/decoder pairs for some protocol. In this case it is an abstract class with two abstract methods: <blockquote> <pre> public abstract Encoder getEncoder(String encodingName); public abstract Decoder getDecoder(String encodingName);</pre> </blockquote> Each method returns an appropriate object or <tt> null </tt> if the provider does not support the given encoding. Typical providers support more than one encoding. <p> If <tt> com.example.impl.StandardCodecs </tt> is an implementation of the <tt> CodecSet </tt> service then its jar file also contains a file named <blockquote> <pre> META-INF/services/com.example.CodecSet</pre> </blockquote> <p> This file contains the single line: <blockquote> <pre> com.example.impl.StandardCodecs # Standard codecs</pre> </blockquote> <p> The <tt> CodecSet </tt> class creates and saves a single service instance at initialization: <blockquote> <pre> private static ServiceLoader&lt;CodecSet&gt; codecSetLoader = ServiceLoader.load(CodecSet.class);</pre> </blockquote> <p> To locate an encoder for a given encoding name it defines a static factory method which iterates through the known and available providers, returning only when it has located a suitable encoder or has run out of providers. <blockquote> <pre> public static Encoder getEncoder(String encodingName) { for (CodecSet cp : codecSetLoader) { Encoder enc = cp.getEncoder(encodingName); if (enc != null) return enc; } return null; }</pre> </blockquote> <p> A <tt> getDecoder </tt> method is defined similarly. <p> <span style="font-weight: bold; padding-right: 1em"> Usage Note </span> If the class path of a class loader that is used for provider loading includes remote network URLs then those URLs will be dereferenced in the process of searching for provider-configuration files. <p> This activity is normal, although it may cause puzzling entries to be created in web-server logs. If a web server is not configured correctly, however, then this activity may cause the provider-loading algorithm to fail spuriously. <p> A web server should return an HTTP 404 (Not Found) response when a requested resource does not exist. Sometimes, however, web servers are erroneously configured to return an HTTP 200 (OK) response along with a helpful HTML error page in such cases. This will cause a <pre><code> ServiceConfigurationError </code></pre> to be thrown when this class attempts to parse the HTML page as a provider-configuration file. The best solution to this problem is to fix the misconfigured web server to return the correct response code (HTTP 404) along with the HTML error page. </p><pre><code>public final class ServiceLoader\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/ServiceLoader.html
Set	A										<section class="prog__container"><p> A collection that contains no duplicate elements. More formally, sets contain no pair of elements <pre><code> e1 </code></pre> and <pre><code> e2 </code></pre> such that <pre><code> e1.equals(e2) </code></pre> , and at most one null element. As implied by its name, this interface models the mathematical <i> set </i> abstraction. <p> The <tt> Set </tt> interface places additional stipulations, beyond those inherited from the <tt> Collection </tt> interface, on the contracts of all constructors and on the contracts of the <tt> add </tt> , <tt> equals </tt> and <tt> hashCode </tt> methods. Declarations for other inherited methods are also included here for convenience. (The specifications accompanying these declarations have been tailored to the <tt> Set </tt> interface, but they do not contain any additional stipulations.) <p> The additional stipulation on constructors is, not surprisingly, that all constructors must create a set that contains no duplicate elements (as defined above). <p> Note: Great care must be exercised if mutable objects are used as set elements. The behavior of a set is not specified if the value of an object is changed in a manner that affects <tt> equals </tt> comparisons while the object is an element in the set. A special case of this prohibition is that it is not permissible for a set to contain itself as an element. <p> Some set implementations have restrictions on the elements that they may contain. For example, some implementations prohibit null elements, and some have restrictions on the types of their elements. Attempting to add an ineligible element throws an unchecked exception, typically <tt> NullPointerException </tt> or <tt> ClassCastException </tt> . Attempting to query the presence of an ineligible element may throw an exception, or it may simply return false; some implementations will exhibit the former behavior and some will exhibit the latter. More generally, attempting an operation on an ineligible element whose completion would not result in the insertion of an ineligible element into the set may throw an exception or it may succeed, at the option of the implementation. Such exceptions are marked as "optional" in the specification for this interface. <p> This interface is a member of the Java Collections Framework . </p><pre><code>public interface Set\nimplements Collection&lt;E&gt;</code></pre></section>	https://developer.android.com/reference/java/util/Set.html
SimpleTimeZone	A										<section class="prog__container"><p> <pre><code> SimpleTimeZone </code></pre> is a concrete subclass of <pre><code> TimeZone </code></pre> that represents a time zone for use with a Gregorian calendar. The class holds an offset from GMT, called <em> raw offset </em> , and start and end rules for a daylight saving time schedule. Since it only holds single values for each, it cannot handle historical changes in the offset from GMT and the daylight saving schedule, except that the <pre><code> setStartYear </code></pre> method can specify the year when the daylight saving time schedule starts in effect. <p> To construct a <pre><code> SimpleTimeZone </code></pre> with a daylight saving time schedule, the schedule can be described with a set of rules, <em> start-rule </em> and <em> end-rule </em> . A day when daylight saving time starts or ends is specified by a combination of <em> month </em> , <em> day-of-month </em> , and <em> day-of-week </em> values. The <em> month </em> value is represented by a Calendar <pre><code> MONTH </code></pre> field value, such as <pre><code> MARCH </code></pre> . The <em> day-of-week </em> value is represented by a Calendar <pre><code> DAY_OF_WEEK </code></pre> value, such as <pre><code> SUNDAY </code></pre> . The meanings of value combinations are as follows. <ul> <li> <b> Exact day of month </b> <br> To specify an exact day of month, set the <em> month </em> and <em> day-of-month </em> to an exact value, and <em> day-of-week </em> to zero. For example, to specify March 1, set the <em> month </em> to <pre><code> MARCH </code></pre> , <em> day-of-month </em> to 1, and <em> day-of-week </em> to 0. </br> </li> <li> <b> Day of week on or after day of month </b> <br> To specify a day of week on or after an exact day of month, set the <em> month </em> to an exact month value, <em> day-of-month </em> to the day on or after which the rule is applied, and <em> day-of-week </em> to a negative <pre><code> DAY_OF_WEEK </code></pre> field value. For example, to specify the second Sunday of April, set <em> month </em> to <pre><code> APRIL </code></pre> , <em> day-of-month </em> to 8, and <em> day-of-week </em> to <pre><code> - </code></pre> <pre><code> SUNDAY </code></pre> . </br> </li> <li> <b> Day of week on or before day of month </b> <br> To specify a day of the week on or before an exact day of the month, set <em> day-of-month </em> and <em> day-of-week </em> to a negative value. For example, to specify the last Wednesday on or before the 21st of March, set <em> month </em> to <pre><code> MARCH </code></pre> , <em> day-of-month </em> is -21 and <em> day-of-week </em> is <pre><code> - </code></pre> <pre><code> WEDNESDAY </code></pre> . </br> </li> <li> <b> Last day-of-week of month </b> <br> To specify, the last day-of-week of the month, set <em> day-of-week </em> to a <pre><code> DAY_OF_WEEK </code></pre> value and <em> day-of-month </em> to -1. For example, to specify the last Sunday of October, set <em> month </em> to <pre><code> OCTOBER </code></pre> , <em> day-of-week </em> to <pre><code> SUNDAY </code></pre> and <em> day-of-month </em> to -1. </br> </li> </ul> The time of the day at which daylight saving time starts or ends is specified by a millisecond value within the day. There are three kinds of <em> mode </em> s to specify the time: <pre><code> WALL_TIME </code></pre> , <pre><code> STANDARD_TIME </code></pre> and <pre><code> UTC_TIME </code></pre> . For example, if daylight saving time ends at 2:00 am in the wall clock time, it can be specified by 7200000 milliseconds in the <pre><code> WALL_TIME </code></pre> mode. In this case, the wall clock time for an <em> end-rule </em> means the same thing as the daylight time. <p> The following are examples of parameters for constructing time zone objects. <pre><pre><code> // Base GMT offset: -8:00 // DST starts: at 2:00am in standard time // on the first Sunday in April // DST ends: at 2:00am in daylight time // on the last Sunday in October // Save: 1 hour SimpleTimeZone(-28800000, "America/Los_Angeles", Calendar.APRIL, 1, -Calendar.SUNDAY, 7200000, Calendar.OCTOBER, -1, Calendar.SUNDAY, 7200000, 3600000) // Base GMT offset: +1:00 // DST starts: at 1:00am in UTC time // on the last Sunday in March // DST ends: at 1:00am in UTC time // on the last Sunday in October // Save: 1 hour SimpleTimeZone(3600000, "Europe/Paris", Calendar.MARCH, -1, Calendar.SUNDAY, 3600000, SimpleTimeZone.UTC_TIME, Calendar.OCTOBER, -1, Calendar.SUNDAY, 3600000, SimpleTimeZone.UTC_TIME, 3600000) </code></pre></pre> These parameter rules are also applicable to the set rule methods, such as <pre><code> setStartRule </code></pre> . </p><pre><code>public class SimpleTimeZone\n</code></pre></section>	https://developer.android.com/reference/java/util/SimpleTimeZone.html
SortedMap	A										<section class="prog__container"><p> A <pre><code> Map </code></pre> that further provides a <em> total ordering </em> on its keys. The map is ordered according to the natural ordering</p><pre><code>public interface SortedMap\nimplements Map&lt;K,&nbsp;V&gt;</code></pre></section>	https://developer.android.com/reference/java/util/SortedMap.html
SortedSet	A										<section class="prog__container"><p> A <pre><code> Set </code></pre> that further provides a <i> total ordering </i> on its elements. The elements are ordered using their natural ordering</p><pre><code>public interface SortedSet\nimplements Set&lt;E&gt;</code></pre></section>	https://developer.android.com/reference/java/util/SortedSet.html
Spliterator	A										<section class="prog__container"><p> An object for traversing and partitioning elements of a source. The source of elements covered by a Spliterator could be, for example, an array, a <pre><code> Collection </code></pre> , an IO channel, or a generator function. <p> A Spliterator may traverse elements individually ( <pre><code> tryAdvance() </code></pre> ) or sequentially in bulk ( <pre><code> forEachRemaining() </code></pre> ). <p> A Spliterator may also partition off some of its elements (using <pre><code> trySplit() </code></pre> ) as another Spliterator, to be used in possibly-parallel operations. Operations using a Spliterator that cannot split, or does so in a highly imbalanced or inefficient manner, are unlikely to benefit from parallelism. Traversal and splitting exhaust elements; each Spliterator is useful for only a single bulk computation. <p> A Spliterator also reports a set of <pre><code> characteristics() </code></pre> of its structure, source, and elements from among <pre><code> ORDERED </code></pre> , <pre><code> DISTINCT </code></pre> , <pre><code> SORTED </code></pre> , <pre><code> SIZED </code></pre> , <pre><code> NONNULL </code></pre> , <pre><code> IMMUTABLE </code></pre> , <pre><code> CONCURRENT </code></pre> , and <pre><code> SUBSIZED </code></pre> . These may be employed by Spliterator clients to control, specialize or simplify computation. For example, a Spliterator for a <pre><code> Collection </code></pre> would report <pre><code> SIZED </code></pre> , a Spliterator for a <pre><code> Set </code></pre> would report <pre><code> DISTINCT </code></pre> , and a Spliterator for a <pre><code> SortedSet </code></pre> would also report <pre><code> SORTED </code></pre> . Characteristics are reported as a simple unioned bit set. Some characteristics additionally constrain method behavior; for example if <pre><code> ORDERED </code></pre> , traversal methods must conform to their documented ordering. New characteristics may be defined in the future, so implementors should not assign meanings to unlisted values. <p> A Spliterator that does not report <pre><code> IMMUTABLE </code></pre> or <pre><code> CONCURRENT </code></pre> is expected to have a documented policy concerning: when the spliterator <em> binds </em> to the element source; and detection of structural interference of the element source detected after binding. A <em> late-binding </em> Spliterator binds to the source of elements at the point of first traversal, first split, or first query for estimated size, rather than at the time the Spliterator is created. A Spliterator that is not <em> late-binding </em> binds to the source of elements at the point of construction or first invocation of any method. Modifications made to the source prior to binding are reflected when the Spliterator is traversed. After binding a Spliterator should, on a best-effort basis, throw <pre><code> ConcurrentModificationException </code></pre> if structural interference is detected. Spliterators that do this are called <em> fail-fast </em> . The bulk traversal method ( <pre><code> forEachRemaining() </code></pre> ) of a Spliterator may optimize traversal and check for structural interference after all elements have been traversed, rather than checking per-element and failing immediately. <p> Spliterators can provide an estimate of the number of remaining elements via the <pre><code> estimateSize() </code></pre> method. Ideally, as reflected in characteristic <pre><code> SIZED </code></pre> , this value corresponds exactly to the number of elements that would be encountered in a successful traversal. However, even when not exactly known, an estimated value value may still be useful to operations being performed on the source, such as helping to determine whether it is preferable to split further or traverse the remaining elements sequentially. <p> Despite their obvious utility in parallel algorithms, spliterators are not expected to be thread-safe; instead, implementations of parallel algorithms using spliterators should ensure that the spliterator is only used by one thread at a time. This is generally easy to attain via <em> serial thread-confinement </em> , which often is a natural consequence of typical parallel algorithms that work by recursive decomposition. A thread calling <pre><code> trySplit() </code></pre> may hand over the returned Spliterator to another thread, which in turn may traverse or further split that Spliterator. The behaviour of splitting and traversal is undefined if two or more threads operate concurrently on the same spliterator. If the original thread hands a spliterator off to another thread for processing, it is best if that handoff occurs before any elements are consumed with <pre><code> tryAdvance() </code></pre> , as certain guarantees (such as the accuracy of <pre><code> estimateSize() </code></pre> for <pre><code> SIZED </code></pre> spliterators) are only valid before traversal has begun. <p> Primitive subtype specializations of <pre><code> Spliterator </code></pre> are provided for <pre><code> int </code></pre> , <pre><code> long </code></pre> , and <pre><code> double </code></pre> values. The subtype default implementations of <pre><code> tryAdvance(java.util.function.Consumer) </code></pre> and <pre><code> forEachRemaining(java.util.function.Consumer) </code></pre> box primitive values to instances of their corresponding wrapper class. Such boxing may undermine any performance advantages gained by using the primitive specializations. To avoid boxing, the corresponding primitive-based methods should be used. For example, <pre><code> tryAdvance(java.util.function.IntConsumer) </code></pre> and <pre><code> forEachRemaining(java.util.function.IntConsumer) </code></pre> should be used in preference to <pre><code> tryAdvance(java.util.function.Consumer) </code></pre> and <pre><code> forEachRemaining(java.util.function.Consumer) </code></pre> . Traversal of primitive values using boxing-based methods <pre><code> tryAdvance() </code></pre> and <pre><code> forEachRemaining() </code></pre> does not affect the order in which the values, transformed to boxed values, are encountered. </p><pre><code>public interface Spliterator\n</code></pre></section>	https://developer.android.com/reference/java/util/Spliterator.html
Spliterator.OfDouble	A										<section class="prog__container"><p> A Spliterator specialized for <pre><code> double </code></pre> values.</p><pre><code>public static interface Spliterator.OfDouble\nimplements OfPrimitive&lt;Double,&nbsp;DoubleConsumer,&nbsp;Spliterator.OfDouble&gt;</code></pre></section>	https://developer.android.com/reference/java/util/Spliterator.OfDouble.html
Spliterator.OfInt	A										<section class="prog__container"><p> A Spliterator specialized for <pre><code> int </code></pre> values.</p><pre><code>public static interface Spliterator.OfInt\nimplements OfPrimitive&lt;Integer,&nbsp;IntConsumer,&nbsp;Spliterator.OfInt&gt;</code></pre></section>	https://developer.android.com/reference/java/util/Spliterator.OfInt.html
Spliterator.OfLong	A										<section class="prog__container"><p> A Spliterator specialized for <pre><code> long </code></pre> values.</p><pre><code>public static interface Spliterator.OfLong\nimplements OfPrimitive&lt;Long,&nbsp;LongConsumer,&nbsp;Spliterator.OfLong&gt;</code></pre></section>	https://developer.android.com/reference/java/util/Spliterator.OfLong.html
Spliterator.OfPrimitive	A										<section class="prog__container"><p> A Spliterator specialized for primitive values.</p><pre><code>public static interface Spliterator.OfPrimitive\nimplements Spliterator&lt;T&gt;</code></pre></section>	https://developer.android.com/reference/java/util/Spliterator.OfPrimitive.html
Spliterators.AbstractDoubleSpliterator	A										<section class="prog__container"><p> An abstract <pre><code> Spliterator.OfDouble </code></pre> that implements <pre><code> trySplit </code></pre> to permit limited parallelism. <p> To implement a spliterator an extending class need only implement <pre><code> tryAdvance(java.util.function.DoubleConsumer) </code></pre> tryAdvance}. The extending class should override <pre><code> forEachRemaining(java.util.function.DoubleConsumer) </code></pre> forEach} if it can provide a more performant implementation. </p><pre><code>public static abstract class Spliterators.AbstractDoubleSpliterator\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Spliterators.AbstractDoubleSpliterator.html
Spliterators.AbstractIntSpliterator	A										<section class="prog__container"><p> An abstract <pre><code> Spliterator.OfInt </code></pre> that implements <pre><code> trySplit </code></pre> to permit limited parallelism. <p> To implement a spliterator an extending class need only implement <pre><code> tryAdvance(java.util.function.IntConsumer) </code></pre> tryAdvance}. The extending class should override <pre><code> forEachRemaining(java.util.function.IntConsumer) </code></pre> forEach} if it can provide a more performant implementation. </p><pre><code>public static abstract class Spliterators.AbstractIntSpliterator\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Spliterators.AbstractIntSpliterator.html
Spliterators.AbstractLongSpliterator	A										<section class="prog__container"><p> An abstract <pre><code> Spliterator.OfLong </code></pre> that implements <pre><code> trySplit </code></pre> to permit limited parallelism. <p> To implement a spliterator an extending class need only implement <pre><code> tryAdvance(java.util.function.LongConsumer) </code></pre> tryAdvance}. The extending class should override <pre><code> forEachRemaining(java.util.function.LongConsumer) </code></pre> forEach} if it can provide a more performant implementation. </p><pre><code>public static abstract class Spliterators.AbstractLongSpliterator\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Spliterators.AbstractLongSpliterator.html
Spliterators.AbstractSpliterator	A										<section class="prog__container"><p> An abstract <pre><code> Spliterator </code></pre> that implements <pre><code> trySplit </code></pre> to permit limited parallelism. <p> An extending class need only implement <pre><code> tryAdvance </code></pre> . The extending class should override <pre><code> forEach </code></pre> if it can provide a more performant implementation. </p><pre><code>public static abstract class Spliterators.AbstractSpliterator\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Spliterators.AbstractSpliterator.html
Spliterators	A										<section class="prog__container"><p> Static classes and methods for operating on or creating instances of <pre><code> Spliterator </code></pre> and its primitive specializations <pre><code> Spliterator.OfInt </code></pre> , <pre><code> Spliterator.OfLong </code></pre> , and <pre><code> Spliterator.OfDouble </code></pre> .</p><pre><code>public final class Spliterators\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Spliterators.html
SplittableRandom	A										<section class="prog__container"><p> A generator of uniform pseudorandom values applicable for use in (among other contexts) isolated parallel computations that may generate subtasks. Class <pre><code> SplittableRandom </code></pre> supports methods for producing pseudorandom numbers of type <pre><code> int </code></pre> , <pre><code> long </code></pre> , and <pre><code> double </code></pre> with similar usages as for class <pre><code> Random </code></pre> but differs in the following ways: <ul> <li> Series of generated values pass the DieHarder suite testing independence and uniformity properties of random number generators. (Most recently validated with version 3.31.1 .) These tests validate only the methods for certain types and ranges, but similar properties are expected to hold, at least approximately, for others as well. The <em> period </em> (length of any series of generated values before it repeats) is at least 2 <sup> 64 </sup> . <li> Method <pre><code> split() </code></pre> constructs and returns a new SplittableRandom instance that shares no mutable state with the current instance. However, with very high probability, the values collectively generated by the two objects have the same statistical properties as if the same quantity of values were generated by a single thread using a single <pre><code> SplittableRandom </code></pre> object. <li> Instances of SplittableRandom are <em> not </em> thread-safe. They are designed to be split, not shared, across threads. For example, a <pre><code> fork/join-style </code></pre> computation using random numbers might include a construction of the form <pre><code> new Subtask(aSplittableRandom.split()).fork() </code></pre> . <li> This class provides additional methods for generating random streams, that employ the above techniques when used in <pre><code> stream.parallel() </code></pre> mode. </li> </li> </li> </li> </ul> <p> Instances of <pre><code> SplittableRandom </code></pre> are not cryptographically secure. Consider instead using <pre><code> SecureRandom </code></pre> in security-sensitive applications. Additionally, default-constructed instances do not use a cryptographically random seed unless the system property </p><pre><code>public final class SplittableRandom\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/SplittableRandom.html
Stack	A										<section class="prog__container"><p> The <pre><code> Stack </code></pre> class represents a last-in-first-out (LIFO) stack of objects. It extends class <tt> Vector </tt> with five operations that allow a vector to be treated as a stack. The usual <tt> push </tt> and <tt> pop </tt> operations are provided, as well as a method to <tt> peek </tt> at the top item on the stack, a method to test for whether the stack is <tt> empty </tt> , and a method to <tt> search </tt> the stack for an item and discover how far it is from the top. <p> When a stack is first created, it contains no items. <p> A more complete and consistent set of LIFO stack operations is provided by the <pre><code> Deque </code></pre> interface and its implementations, which should be used in preference to this class. For example: <pre> <pre><code>Deque&lt;Integer&gt; stack = new ArrayDeque&lt;Integer&gt;();</code></pre></pre> </p><pre><code>public class Stack\n</code></pre></section>	https://developer.android.com/reference/java/util/Stack.html
StringJoiner	A										<section class="prog__container"><p> <pre><code> StringJoiner </code></pre> is used to construct a sequence of characters separated by a delimiter and optionally starting with a supplied prefix and ending with a supplied suffix. <p> Prior to adding something to the <pre><code> StringJoiner </code></pre> , its <pre><code> sj.toString() </code></pre> method will, by default, return <pre><code> prefix + suffix </code></pre> . However, if the <pre><code> setEmptyValue </code></pre> method is called, the <pre><code> emptyValue </code></pre> supplied will be returned instead. This can be used, for example, when creating a string using set notation to indicate an empty set, i.e. <pre><code> "{}" </code></pre> , where the <pre><code> prefix </code></pre> is <pre><code> "{" </code></pre> , the <pre><code> suffix </code></pre> is <pre><code> "}" </code></pre> and nothing has been added to the <pre><code> StringJoiner </code></pre> . </p><pre><code>public final class StringJoiner\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/StringJoiner.html
StringTokenizer	A										<section class="prog__container"><p> The string tokenizer class allows an application to break a string into tokens. The tokenization method is much simpler than the one used by the <pre><code> StreamTokenizer </code></pre> class. The <pre><code> StringTokenizer </code></pre> methods do not distinguish among identifiers, numbers, and quoted strings, nor do they recognize and skip comments. <p> The set of delimiters (the characters that separate tokens) may be specified either at creation time or on a per-token basis. <p> An instance of <pre><code> StringTokenizer </code></pre> behaves in one of two ways, depending on whether it was created with the <pre><code> returnDelims </code></pre> flag having the value <pre><code> true </code></pre> or <pre><code> false </code></pre> : <ul> <li> If the flag is <pre><code> false </code></pre> , delimiter characters serve to separate tokens. A token is a maximal sequence of consecutive characters that are not delimiters. <li> If the flag is <pre><code> true </code></pre> , delimiter characters are themselves considered to be tokens. A token is thus either one delimiter character, or a maximal sequence of consecutive characters that are not delimiters. </li> </li> </ul> <p> A <tt> StringTokenizer </tt> object internally maintains a current position within the string to be tokenized. Some operations advance this current position past the characters processed. <p> A token is returned by taking a substring of the string that was used to create the <tt> StringTokenizer </tt> object. <p> The following is one example of the use of the tokenizer. The code: <blockquote> <pre> StringTokenizer st = new StringTokenizer("this is a test"); while (st.hasMoreTokens()) { System.out.println(st.nextToken()); } </pre> </blockquote> <p> prints the following output: <blockquote> <pre> this is a test </pre> </blockquote> <p> <tt> StringTokenizer </tt> is a legacy class that is retained for compatibility reasons although its use is discouraged in new code. It is recommended that anyone seeking this functionality use the <tt> split </tt> method of <tt> String </tt> or the java.util.regex package instead. <p> The following example illustrates how the <tt> String.split </tt> method can be used to break up a string into its basic tokens: <blockquote> <pre> String[] result = "this is a test".split("\\s"); for (int x=0; x&lt;result.length; x++) System.out.println(result[x]); </pre> </blockquote> <p> prints the following output: <blockquote> <pre> this is a test </pre> </blockquote> </p><pre><code>public class StringTokenizer\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/StringTokenizer.html
Timer	A										<section class="prog__container"><p> A facility for threads to schedule tasks for future execution in a background thread. Tasks may be scheduled for one-time execution, or for repeated execution at regular intervals. <p> Corresponding to each <tt> Timer </tt> object is a single background thread that is used to execute all of the timer's tasks, sequentially. Timer tasks should complete quickly. If a timer task takes excessive time to complete, it "hogs" the timer's task execution thread. This can, in turn, delay the execution of subsequent tasks, which may "bunch up" and execute in rapid succession when (and if) the offending task finally completes. <p> After the last live reference to a <tt> Timer </tt> object goes away <i> and </i> all outstanding tasks have completed execution, the timer's task execution thread terminates gracefully (and becomes subject to garbage collection). However, this can take arbitrarily long to occur. By default, the task execution thread does not run as a <i> daemon thread </i> , so it is capable of keeping an application from terminating. If a caller wants to terminate a timer's task execution thread rapidly, the caller should invoke the timer's <tt> cancel </tt> method. <p> If the timer's task execution thread terminates unexpectedly, for example, because its <tt> stop </tt> method is invoked, any further attempt to schedule a task on the timer will result in an <tt> IllegalStateException </tt> , as if the timer's <tt> cancel </tt> method had been invoked. <p> This class is thread-safe: multiple threads can share a single <tt> Timer </tt> object without the need for external synchronization. <p> This class does <i> not </i> offer real-time guarantees: it schedules tasks using the <tt> Object.wait(long) </tt> method. <p> Java 5.0 introduced the <pre><code> java.util.concurrent </code></pre> package and one of the concurrency utilities therein is the <pre><code> ScheduledThreadPoolExecutor </code></pre> which is a thread pool for repeatedly executing tasks at a given rate or delay. It is effectively a more versatile replacement for the <pre><code> Timer </code></pre> / <pre><code> TimerTask </code></pre> combination, as it allows multiple service threads, accepts various time units, and doesn't require subclassing <pre><code> TimerTask </code></pre> (just implement <pre><code> Runnable </code></pre> ). Configuring <pre><code> ScheduledThreadPoolExecutor </code></pre> with one thread makes it equivalent to <pre><code> Timer </code></pre> . <p> Implementation note: This class scales to large numbers of concurrently scheduled tasks (thousands should present no problem). Internally, it uses a binary heap to represent its task queue, so the cost to schedule a task is O(log n), where n is the number of concurrently scheduled tasks. <p> Implementation note: All constructors start a timer thread. </p><pre><code>public class Timer\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/Timer.html
TimerTask	A										<section class="prog__container"><p> A task that can be scheduled for one-time or repeated execution by a Timer.</p><pre><code>public abstract class TimerTask\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/TimerTask.html
TimeZone	A										<section class="prog__container"><p> <pre><code> TimeZone </code></pre> represents a time zone offset, and also figures out daylight savings. <p> Typically, you get a <pre><code> TimeZone </code></pre> using <pre><code> getDefault </code></pre> which creates a <pre><code> TimeZone </code></pre> based on the time zone where the program is running. For example, for a program running in Japan, <pre><code> getDefault </code></pre> creates a <pre><code> TimeZone </code></pre> object based on Japanese Standard Time. <p> You can also get a <pre><code> TimeZone </code></pre> using <pre><code> getTimeZone </code></pre> along with a time zone ID. For instance, the time zone ID for the U.S. Pacific Time zone is "America/Los_Angeles". So, you can get a U.S. Pacific Time <pre><code> TimeZone </code></pre> object with: <blockquote> <pre> TimeZone tz = TimeZone.getTimeZone("America/Los_Angeles"); </pre> </blockquote> You can use the <pre><code> getAvailableIDs </code></pre> method to iterate through all the supported time zone IDs. You can then choose a supported ID to get a <pre><code> TimeZone </code></pre> . If the time zone you want is not represented by one of the supported IDs, then a custom time zone ID can be specified to produce a TimeZone. The syntax of a custom time zone ID is: <blockquote> <pre> <i>CustomID:</i> <pre><code>GMT</code></pre> <i>Sign</i> <i>Hours</i> <pre><code>:</code></pre> <i>Minutes</i> <pre><code>GMT</code></pre> <i>Sign</i> <i>Hours</i> <i>Minutes</i> <pre><code>GMT</code></pre> <i>Sign</i> <i>Hours</i> <i>Sign:</i> one of <pre><code>+ -</code></pre> <i>Hours:</i> <i>Digit</i> <i>Digit</i> <i>Digit</i> <i>Minutes:</i> <i>Digit</i> <i>Digit</i> <i>Digit:</i> one of <pre><code>0 1 2 3 4 5 6 7 8 9</code></pre> </pre> </blockquote> <i> Hours </i> must be between 0 to 23 and <i> Minutes </i> must be between 00 to 59. For example, "GMT+10" and "GMT+0010" mean ten hours and ten minutes ahead of GMT, respectively. <p> The format is locale independent and digits must be taken from the Basic Latin block of the Unicode standard. No daylight saving time transition schedule can be specified with a custom time zone ID. If the specified string doesn't match the syntax, <pre><code> "GMT" </code></pre> is used. <p> When creating a <pre><code> TimeZone </code></pre> , the specified custom time zone ID is normalized in the following syntax: <blockquote> <pre> <i>NormalizedCustomID:</i> <pre><code>GMT</code></pre> <i>Sign</i> <i>TwoDigitHours</i> <pre><code>:</code></pre> <i>Minutes</i> <i>Sign:</i> one of <pre><code>+ -</code></pre> <i>TwoDigitHours:</i> <i>Digit</i> <i>Digit</i> <i>Minutes:</i> <i>Digit</i> <i>Digit</i> <i>Digit:</i> one of <pre><code>0 1 2 3 4 5 6 7 8 9</code></pre> </pre> </blockquote> For example, TimeZone.getTimeZone("GMT-8").getID() returns "GMT-08:00". <h4> Three-letter time zone IDs </h4> For compatibility with JDK 1.1.x, some other three-letter time zone IDs (such as "PST", "CTT", "AST") are also supported. However, <strong> their use is deprecated </strong> because the same abbreviation is often used for multiple time zones (for example, "CST" could be U.S. "Central Standard Time" and "China Standard Time"), and the Java platform can then only recognize one of them. </p><pre><code>public abstract class TimeZone\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/TimeZone.html
TooManyListenersException	A										<section class="prog__container"><p> <p> The <pre><code> TooManyListenersException </code></pre> Exception is used as part of the Java Event model to annotate and implement a unicast special case of a multicast Event Source. </p><pre><code>public class TooManyListenersException\n</code></pre></section>	https://developer.android.com/reference/java/util/TooManyListenersException.html
TreeMap	A										<section class="prog__container"><p> A Red-Black tree based <pre><code> NavigableMap </code></pre> implementation. The map is sorted according to the natural ordering</p><pre><code>public class TreeMap\n</code></pre></section>	https://developer.android.com/reference/java/util/TreeMap.html
TreeSet	A										<section class="prog__container"><p> A <pre><code> NavigableSet </code></pre> implementation based on a <pre><code> TreeMap </code></pre> . The elements are ordered using their natural ordering</p><pre><code>public class TreeSet\n</code></pre></section>	https://developer.android.com/reference/java/util/TreeSet.html
UnknownFormatConversionException	A										<section class="prog__container"><p> Unchecked exception thrown when an unknown conversion is given. <p> Unless otherwise specified, passing a <tt> null </tt> argument to any method or constructor in this class will cause a <pre><code> NullPointerException </code></pre> to be thrown. </p><pre><code>public class UnknownFormatConversionException\n</code></pre></section>	https://developer.android.com/reference/java/util/UnknownFormatConversionException.html
UnknownFormatFlagsException	A										<section class="prog__container"><p> Unchecked exception thrown when an unknown flag is given. <p> Unless otherwise specified, passing a <tt> null </tt> argument to any method or constructor in this class will cause a <pre><code> NullPointerException </code></pre> to be thrown. </p><pre><code>public class UnknownFormatFlagsException\n</code></pre></section>	https://developer.android.com/reference/java/util/UnknownFormatFlagsException.html
UUID	A										<section class="prog__container"><p> A class that represents an immutable universally unique identifier (UUID). A UUID represents a 128-bit value. <p> There exist different variants of these global identifiers. The methods of this class are for manipulating the Leach-Salz variant, although the constructors allow the creation of any variant of UUID (described below). <p> The layout of a variant 2 (Leach-Salz) UUID is as follows: The most significant long consists of the following unsigned fields: <pre> 0xFFFFFFFF00000000 time_low 0x00000000FFFF0000 time_mid 0x000000000000F000 version 0x0000000000000FFF time_hi </pre> The least significant long consists of the following unsigned fields: <pre> 0xC000000000000000 variant 0x3FFF000000000000 clock_seq 0x0000FFFFFFFFFFFF node </pre> <p> The variant field contains a value which identifies the layout of the <pre><code> UUID </code></pre> . The bit layout described above is valid only for a <pre><code> UUID </code></pre> with a variant value of 2, which indicates the Leach-Salz variant. <p> The version field holds a value that describes the type of this <pre><code> UUID </code></pre> . There are four different basic types of UUIDs: time-based, DCE security, name-based, and randomly generated UUIDs. These types have a version value of 1, 2, 3 and 4, respectively. <p> For more information including algorithms used to create <pre><code> UUID </code></pre> s, see <i> RFC 4122: A Universally Unique IDentifier (UUID) URN Namespace </i> , section 4.2 "Algorithms for Creating a Time-Based UUID". </p><pre><code>public final class UUID\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/UUID.html
Vector	A										<section class="prog__container"><p> The <pre><code> Vector </code></pre> class implements a growable array of objects. Like an array, it contains components that can be accessed using an integer index. However, the size of a <pre><code> Vector </code></pre> can grow or shrink as needed to accommodate adding and removing items after the <pre><code> Vector </code></pre> has been created. <p> Each vector tries to optimize storage management by maintaining a <pre><code> capacity </code></pre> and a <pre><code> capacityIncrement </code></pre> . The <pre><code> capacity </code></pre> is always at least as large as the vector size; it is usually larger because as components are added to the vector, the vector's storage increases in chunks the size of <pre><code> capacityIncrement </code></pre> . An application can increase the capacity of a vector before inserting a large number of components; this reduces the amount of incremental reallocation. <p> The iterators returned by this class's <pre><code> iterator </code></pre> and <pre><code> listIterator </code></pre> methods are <em> fail-fast </em> : if the vector is structurally modified at any time after the iterator is created, in any way except through the iterator's own <pre><code> remove </code></pre> or <pre><code> add </code></pre> methods, the iterator will throw a <pre><code> ConcurrentModificationException </code></pre> . Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. The <pre><code> Enumerations </code></pre> returned by the <pre><code> elements </code></pre> method are <em> not </em> fail-fast. <p> Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <pre><code> ConcurrentModificationException </code></pre> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i> the fail-fast behavior of iterators should be used only to detect bugs. </i> <p> As of the Java 2 platform v1.2, this class was retrofitted to implement the <pre><code> List </code></pre> interface, making it a member of the Java Collections Framework . Unlike the new collection implementations, <pre><code> Vector </code></pre> is synchronized. If a thread-safe implementation is not needed, it is recommended to use <pre><code> ArrayList </code></pre> in place of <pre><code> Vector </code></pre> . </p><pre><code>public class Vector\n</code></pre></section>	https://developer.android.com/reference/java/util/Vector.html
WeakHashMap	A										<section class="prog__container"><p> Hash table based implementation of the <tt> Map </tt> interface, with <em> weak keys </em> . An entry in a <tt> WeakHashMap </tt> will automatically be removed when its key is no longer in ordinary use. More precisely, the presence of a mapping for a given key will not prevent the key from being discarded by the garbage collector, that is, made finalizable, finalized, and then reclaimed. When a key has been discarded its entry is effectively removed from the map, so this class behaves somewhat differently from other <tt> Map </tt> implementations. <p> Both null values and the null key are supported. This class has performance characteristics similar to those of the <tt> HashMap </tt> class, and has the same efficiency parameters of <em> initial capacity </em> and <em> load factor </em> . <p> Like most collection classes, this class is not synchronized. A synchronized <tt> WeakHashMap </tt> may be constructed using the <pre><code> Collections.synchronizedMap </code></pre> method. <p> This class is intended primarily for use with key objects whose <tt> equals </tt> methods test for object identity using the <tt> == </tt> operator. Once such a key is discarded it can never be recreated, so it is impossible to do a lookup of that key in a <tt> WeakHashMap </tt> at some later time and be surprised that its entry has been removed. This class will work perfectly well with key objects whose <tt> equals </tt> methods are not based upon object identity, such as <tt> String </tt> instances. With such recreatable key objects, however, the automatic removal of <tt> WeakHashMap </tt> entries whose keys have been discarded may prove to be confusing. <p> The behavior of the <tt> WeakHashMap </tt> class depends in part upon the actions of the garbage collector, so several familiar (though not required) <tt> Map </tt> invariants do not hold for this class. Because the garbage collector may discard keys at any time, a <tt> WeakHashMap </tt> may behave as though an unknown thread is silently removing entries. In particular, even if you synchronize on a <tt> WeakHashMap </tt> instance and invoke none of its mutator methods, it is possible for the <tt> size </tt> method to return smaller values over time, for the <tt> isEmpty </tt> method to return <tt> false </tt> and then <tt> true </tt> , for the <tt> containsKey </tt> method to return <tt> true </tt> and later <tt> false </tt> for a given key, for the <tt> get </tt> method to return a value for a given key but later return <tt> null </tt> , for the <tt> put </tt> method to return <tt> null </tt> and the <tt> remove </tt> method to return <tt> false </tt> for a key that previously appeared to be in the map, and for successive examinations of the key set, the value collection, and the entry set to yield successively smaller numbers of elements. <p> Each key object in a <tt> WeakHashMap </tt> is stored indirectly as the referent of a weak reference. Therefore a key will automatically be removed only after the weak references to it, both inside and outside of the map, have been cleared by the garbage collector. <p> <strong> Implementation note: </strong> The value objects in a <tt> WeakHashMap </tt> are held by ordinary strong references. Thus care should be taken to ensure that value objects do not strongly refer to their own keys, either directly or indirectly, since that will prevent the keys from being discarded. Note that a value object may refer indirectly to its key via the <tt> WeakHashMap </tt> itself; that is, a value object may strongly refer to some other key object whose associated value object, in turn, strongly refers to the key of the first value object. If the values in the map do not rely on the map holding strong references to them, one way to deal with this is to wrap values themselves within <tt> WeakReferences </tt> before inserting, as in: <tt> m.put(key, new WeakReference(value)) </tt> , and then unwrapping upon each <tt> get </tt> . <p> The iterators returned by the <tt> iterator </tt> method of the collections returned by all of this class's "collection view methods" are <i> fail-fast </i> : if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own <tt> remove </tt> method, the iterator will throw a <pre><code> ConcurrentModificationException </code></pre> . Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. <p> Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw <tt> ConcurrentModificationException </tt> on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: <i> the fail-fast behavior of iterators should be used only to detect bugs. </i> <p> This class is a member of the Java Collections Framework . </p><pre><code>public class WeakHashMap\n</code></pre></section>	https://developer.android.com/reference/java/util/WeakHashMap.html
AbstractExecutorService	A										<section class="prog__container"><p> Provides default implementations of <pre><code> ExecutorService </code></pre> execution methods. This class implements the <pre><code> submit </code></pre> , <pre><code> invokeAny </code></pre> and <pre><code> invokeAll </code></pre> methods using a <pre><code> RunnableFuture </code></pre> returned by <pre><code> newTaskFor </code></pre> , which defaults to the <pre><code> FutureTask </code></pre> class provided in this package. For example, the implementation of <pre><code> submit(Runnable) </code></pre> creates an associated <pre><code> RunnableFuture </code></pre> that is executed and returned. Subclasses may override the <pre><code> newTaskFor </code></pre> methods to return <pre><code> RunnableFuture </code></pre> implementations other than <pre><code> FutureTask </code></pre> . <p> <b> Extension example </b> . Here is a sketch of a class that customizes <pre><code> ThreadPoolExecutor </code></pre> to use a <pre><code> CustomTask </code></pre> class instead of the default <pre><code> FutureTask </code></pre> : <pre> <pre><code>public class CustomThreadPoolExecutor extends ThreadPoolExecutor { static class CustomTask&lt;V&gt; implements RunnableFuture&lt;V&gt; {...} protected &lt;V&gt; RunnableFuture&lt;V&gt; newTaskFor(Callable&lt;V&gt; c) { return new CustomTask&lt;V&gt;(c); } protected &lt;V&gt; RunnableFuture&lt;V&gt; newTaskFor(Runnable r, V v) { return new CustomTask&lt;V&gt;(r, v); } // ... add constructors, etc. }</code></pre></pre> </p><pre><code>public abstract class AbstractExecutorService\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/AbstractExecutorService.html
ArrayBlockingQueue	A										<section class="prog__container"><p> A bounded blocking queue</p><pre><code>public class ArrayBlockingQueue\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ArrayBlockingQueue.html
BlockingDeque	A										<section class="prog__container"><p> A <pre><code> Deque </code></pre> that additionally supports blocking operations that wait for the deque to become non-empty when retrieving an element, and wait for space to become available in the deque when storing an element. <p> <pre><code> BlockingDeque </code></pre> methods come in four forms, with different ways of handling operations that cannot be satisfied immediately, but may be satisfied at some point in the future: one throws an exception, the second returns a special value (either <pre><code> null </code></pre> or <pre><code> false </code></pre> , depending on the operation), the third blocks the current thread indefinitely until the operation can succeed, and the fourth blocks for only a given maximum time limit before giving up. These methods are summarized in the following table: <table border="" cellpadding="3" cellspacing="1"> <caption> Summary of BlockingDeque methods </caption> <tr> <td align="CENTER" colspan="5"> <b> First Element (Head) </b> </td> </tr> <tr> <td> </td> <td align="CENTER"> <em> Throws exception </em> </td> <td align="CENTER"> <em> Special value </em> </td> <td align="CENTER"> <em> Blocks </em> </td> <td align="CENTER"> <em> Times out </em> </td> </tr> <tr> <td> <b> Insert </b> </td> <td> <pre><code> addFirst(e) </code></pre> </td> <td> <pre><code> offerFirst(e) </code></pre> </td> <td> <pre><code> putFirst(e) </code></pre> </td> <td> <pre><code> offerFirst(e, time, unit) </code></pre> </td> </tr> <tr> <td> <b> Remove </b> </td> <td> <pre><code> removeFirst() </code></pre> </td> <td> <pre><code> pollFirst() </code></pre> </td> <td> <pre><code> takeFirst() </code></pre> </td> <td> <pre><code> pollFirst(time, unit) </code></pre> </td> </tr> <tr> <td> <b> Examine </b> </td> <td> <pre><code> getFirst() </code></pre> </td> <td> <pre><code> peekFirst() </code></pre> </td> <td> <em> not applicable </em> </td> <td> <em> not applicable </em> </td> </tr> <tr> <td align="CENTER" colspan="5"> <b> Last Element (Tail) </b> </td> </tr> <tr> <td> </td> <td align="CENTER"> <em> Throws exception </em> </td> <td align="CENTER"> <em> Special value </em> </td> <td align="CENTER"> <em> Blocks </em> </td> <td align="CENTER"> <em> Times out </em> </td> </tr> <tr> <td> <b> Insert </b> </td> <td> <pre><code> addLast(e) </code></pre> </td> <td> <pre><code> offerLast(e) </code></pre> </td> <td> <pre><code> putLast(e) </code></pre> </td> <td> <pre><code> offerLast(e, time, unit) </code></pre> </td> </tr> <tr> <td> <b> Remove </b> </td> <td> <pre><code> removeLast() </code></pre> </td> <td> <pre><code> pollLast() </code></pre> </td> <td> <pre><code> takeLast() </code></pre> </td> <td> <pre><code> pollLast(time, unit) </code></pre> </td> </tr> <tr> <td> <b> Examine </b> </td> <td> <pre><code> getLast() </code></pre> </td> <td> <pre><code> peekLast() </code></pre> </td> <td> <em> not applicable </em> </td> <td> <em> not applicable </em> </td> </tr> </table> <p> Like any <pre><code> BlockingQueue </code></pre> , a <pre><code> BlockingDeque </code></pre> is thread safe, does not permit null elements, and may (or may not) be capacity-constrained. <p> A <pre><code> BlockingDeque </code></pre> implementation may be used directly as a FIFO <pre><code> BlockingQueue </code></pre> . The methods inherited from the <pre><code> BlockingQueue </code></pre> interface are precisely equivalent to <pre><code> BlockingDeque </code></pre> methods as indicated in the following table: <table border="" cellpadding="3" cellspacing="1"> <caption> Comparison of BlockingQueue and BlockingDeque methods </caption> <tr> <td align="CENTER"> <b> <pre><code> BlockingQueue </code></pre> Method </b> </td> <td align="CENTER"> <b> Equivalent <pre><code> BlockingDeque </code></pre> Method </b> </td> </tr> <tr> <td align="CENTER" colspan="2"> <b> Insert </b> </td> </tr> <tr> <td> <pre><code> add(e) </code></pre> </td> <td> <pre><code> addLast(e) </code></pre> </td> </tr> <tr> <td> <pre><code> offer(e) </code></pre> </td> <td> <pre><code> offerLast(e) </code></pre> </td> </tr> <tr> <td> <pre><code> put(e) </code></pre> </td> <td> <pre><code> putLast(e) </code></pre> </td> </tr> <tr> <td> <pre><code> offer(e, time, unit) </code></pre> </td> <td> <pre><code> offerLast(e, time, unit) </code></pre> </td> </tr> <tr> <td align="CENTER" colspan="2"> <b> Remove </b> </td> </tr> <tr> <td> <pre><code> remove() </code></pre> </td> <td> <pre><code> removeFirst() </code></pre> </td> </tr> <tr> <td> <pre><code> poll() </code></pre> </td> <td> <pre><code> pollFirst() </code></pre> </td> </tr> <tr> <td> <pre><code> take() </code></pre> </td> <td> <pre><code> takeFirst() </code></pre> </td> </tr> <tr> <td> <pre><code> poll(time, unit) </code></pre> </td> <td> <pre><code> pollFirst(time, unit) </code></pre> </td> </tr> <tr> <td align="CENTER" colspan="2"> <b> Examine </b> </td> </tr> <tr> <td> <pre><code> element() </code></pre> </td> <td> <pre><code> getFirst() </code></pre> </td> </tr> <tr> <td> <pre><code> peek() </code></pre> </td> <td> <pre><code> peekFirst() </code></pre> </td> </tr> </table> <p> Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a <pre><code> BlockingDeque </code></pre> <i> happen-before </i> actions subsequent to the access or removal of that element from the <pre><code> BlockingDeque </code></pre> in another thread. <p> This interface is a member of the Java Collections Framework . </p><pre><code>public interface BlockingDeque\nimplements BlockingQueue&lt;E&gt;, Deque&lt;E&gt;</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/BlockingDeque.html
BlockingQueue	A										<section class="prog__container"><p> A <pre><code> Queue </code></pre> that additionally supports operations that wait for the queue to become non-empty when retrieving an element, and wait for space to become available in the queue when storing an element. <p> <pre><code> BlockingQueue </code></pre> methods come in four forms, with different ways of handling operations that cannot be satisfied immediately, but may be satisfied at some point in the future: one throws an exception, the second returns a special value (either <pre><code> null </code></pre> or <pre><code> false </code></pre> , depending on the operation), the third blocks the current thread indefinitely until the operation can succeed, and the fourth blocks for only a given maximum time limit before giving up. These methods are summarized in the following table: <table border="" cellpadding="3" cellspacing="1"> <caption> Summary of BlockingQueue methods </caption> <tr> <td> </td> <td align="CENTER"> <em> Throws exception </em> </td> <td align="CENTER"> <em> Special value </em> </td> <td align="CENTER"> <em> Blocks </em> </td> <td align="CENTER"> <em> Times out </em> </td> </tr> <tr> <td> <b> Insert </b> </td> <td> <pre><code> add(e) </code></pre> </td> <td> <pre><code> offer(e) </code></pre> </td> <td> <pre><code> put(e) </code></pre> </td> <td> <pre><code> offer(e, time, unit) </code></pre> </td> </tr> <tr> <td> <b> Remove </b> </td> <td> <pre><code> remove() </code></pre> </td> <td> <pre><code> poll() </code></pre> </td> <td> <pre><code> take() </code></pre> </td> <td> <pre><code> poll(time, unit) </code></pre> </td> </tr> <tr> <td> <b> Examine </b> </td> <td> <pre><code> element() </code></pre> </td> <td> <pre><code> peek() </code></pre> </td> <td> <em> not applicable </em> </td> <td> <em> not applicable </em> </td> </tr> </table> <p> A <pre><code> BlockingQueue </code></pre> does not accept <pre><code> null </code></pre> elements. Implementations throw <pre><code> NullPointerException </code></pre> on attempts to <pre><code> add </code></pre> , <pre><code> put </code></pre> or <pre><code> offer </code></pre> a <pre><code> null </code></pre> . A <pre><code> null </code></pre> is used as a sentinel value to indicate failure of <pre><code> poll </code></pre> operations. <p> A <pre><code> BlockingQueue </code></pre> may be capacity bounded. At any given time it may have a <pre><code> remainingCapacity </code></pre> beyond which no additional elements can be <pre><code> put </code></pre> without blocking. A <pre><code> BlockingQueue </code></pre> without any intrinsic capacity constraints always reports a remaining capacity of <pre><code> Integer.MAX_VALUE </code></pre> . <p> <pre><code> BlockingQueue </code></pre> implementations are designed to be used primarily for producer-consumer queues, but additionally support the <pre><code> Collection </code></pre> interface. So, for example, it is possible to remove an arbitrary element from a queue using <pre><code> remove(x) </code></pre> . However, such operations are in general <em> not </em> performed very efficiently, and are intended for only occasional use, such as when a queued message is cancelled. <p> <pre><code> BlockingQueue </code></pre> implementations are thread-safe. All queuing methods achieve their effects atomically using internal locks or other forms of concurrency control. However, the <em> bulk </em> Collection operations <pre><code> addAll </code></pre> , <pre><code> containsAll </code></pre> , <pre><code> retainAll </code></pre> and <pre><code> removeAll </code></pre> are <em> not </em> necessarily performed atomically unless specified otherwise in an implementation. So it is possible, for example, for <pre><code> addAll(c) </code></pre> to fail (throwing an exception) after adding only some of the elements in <pre><code> c </code></pre> . <p> A <pre><code> BlockingQueue </code></pre> does <em> not </em> intrinsically support any kind of "close" or "shutdown" operation to indicate that no more items will be added. The needs and usage of such features tend to be implementation-dependent. For example, a common tactic is for producers to insert special <em> end-of-stream </em> or <em> poison </em> objects, that are interpreted accordingly when taken by consumers. <p> Usage example, based on a typical producer-consumer scenario. Note that a <pre><code> BlockingQueue </code></pre> can safely be used with multiple producers and multiple consumers. <pre> <pre><code>class Producer implements Runnable { private final BlockingQueue queue; Producer(BlockingQueue q) { queue = q; } public void run() { try { while (true) { queue.put(produce()); } } catch (InterruptedException ex) { ... handle ...} } Object produce() { ... } } class Consumer implements Runnable { private final BlockingQueue queue; Consumer(BlockingQueue q) { queue = q; } public void run() { try { while (true) { consume(queue.take()); } } catch (InterruptedException ex) { ... handle ...} } void consume(Object x) { ... } } class Setup { void main() { BlockingQueue q = new SomeQueueImplementation(); Producer p = new Producer(q); Consumer c1 = new Consumer(q); Consumer c2 = new Consumer(q); new Thread(p).start(); new Thread(c1).start(); new Thread(c2).start(); } }</code></pre></pre> <p> Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a <pre><code> BlockingQueue </code></pre> <i> happen-before </i> actions subsequent to the access or removal of that element from the <pre><code> BlockingQueue </code></pre> in another thread. </p><pre><code>public interface BlockingQueue\nimplements Queue&lt;E&gt;</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/BlockingQueue.html
BrokenBarrierException	A										<section class="prog__container"><p> Exception thrown when a thread tries to wait upon a barrier that is in a broken state, or which enters the broken state while the thread is waiting.</p><pre><code>public class BrokenBarrierException\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/BrokenBarrierException.html
Callable	A										<section class="prog__container"><p> A task that returns a result and may throw an exception. Implementors define a single method with no arguments called <pre><code> call </code></pre> . <p> The <pre><code> Callable </code></pre> interface is similar to <pre><code> Runnable </code></pre> , in that both are designed for classes whose instances are potentially executed by another thread. A <pre><code> Runnable </code></pre> , however, does not return a result and cannot throw a checked exception. <p> The <pre><code> Executors </code></pre> class contains utility methods to convert from other common forms to <pre><code> Callable </code></pre> classes. </p><pre><code>public interface Callable\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/Callable.html
CancellationException	A										<section class="prog__container"><p> Exception indicating that the result of a value-producing task, such as a <pre><code> FutureTask </code></pre> , cannot be retrieved because the task was cancelled.</p><pre><code>public class CancellationException\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/CancellationException.html
CompletableFuture.AsynchronousCompletionTask	A										<section class="prog__container"><p> A marker interface identifying asynchronous tasks produced by <pre><code> async </code></pre> methods. This may be useful for monitoring, debugging, and tracking asynchronous activities.</p><pre><code>public static interface CompletableFuture.AsynchronousCompletionTask\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/CompletableFuture.AsynchronousCompletionTask.html
CompletableFuture	A										<section class="prog__container"><p> A <pre><code> Future </code></pre> that may be explicitly completed (setting its value and status), and may be used as a <pre><code> CompletionStage </code></pre> , supporting dependent functions and actions that trigger upon its completion. <p> When two or more threads attempt to <pre><code> complete </code></pre> , <pre><code> completeExceptionally </code></pre> , or <pre><code> cancel </code></pre> a CompletableFuture, only one of them succeeds. <p> In addition to these and related methods for directly manipulating status and results, CompletableFuture implements interface <pre><code> CompletionStage </code></pre> with the following policies: <ul> <li> Actions supplied for dependent completions of <em> non-async </em> methods may be performed by the thread that completes the current CompletableFuture, or by any other caller of a completion method. <li> All <em> async </em> methods without an explicit Executor argument are performed using the <pre><code> commonPool() </code></pre> (unless it does not support a parallelism level of at least two, in which case, a new Thread is created to run each task). To simplify monitoring, debugging, and tracking, all generated asynchronous tasks are instances of the marker interface <pre><code> CompletableFuture.AsynchronousCompletionTask </code></pre> . Operations with time-delays can use adapter methods defined in this class, for example: <pre><code> supplyAsync(supplier, delayedExecutor(timeout, timeUnit)) </code></pre> . To support methods with delays and timeouts, this class maintains at most one daemon thread for triggering and cancelling actions, not for running them. <li> All CompletionStage methods are implemented independently of other public methods, so the behavior of one method is not impacted by overrides of others in subclasses. </li> </li> </li> </ul> <p> CompletableFuture also implements <pre><code> Future </code></pre> with the following policies: <ul> <li> Since (unlike <pre><code> FutureTask </code></pre> ) this class has no direct control over the computation that causes it to be completed, cancellation is treated as just another form of exceptional completion. Method <pre><code> cancel </code></pre> has the same effect as <pre><code> completeExceptionally(new CancellationException()) </code></pre> . Method <pre><code> isCompletedExceptionally() </code></pre> can be used to determine if a CompletableFuture completed in any exceptional fashion. <li> In case of exceptional completion with a CompletionException, methods <pre><code> get() </code></pre> and <pre><code> get(long, TimeUnit) </code></pre> throw an <pre><code> ExecutionException </code></pre> with the same cause as held in the corresponding CompletionException. To simplify usage in most contexts, this class also defines methods <pre><code> join() </code></pre> and <pre><code> getNow(T) </code></pre> that instead throw the CompletionException directly in these cases. </li> </li> </ul> <p> Arguments used to pass a completion result (that is, for parameters of type <pre><code> T </code></pre> ) for methods accepting them may be null, but passing a null value for any other parameter will result in a <pre><code> NullPointerException </code></pre> being thrown. </p><pre><code>public class CompletableFuture\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/CompletableFuture.html
CompletionException	A										<section class="prog__container"><p> Exception thrown when an error or other exception is encountered in the course of completing a result or task.</p><pre><code>public class CompletionException\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/CompletionException.html
CompletionService	A										<section class="prog__container"><p> A service that decouples the production of new asynchronous tasks from the consumption of the results of completed tasks. Producers <pre><code> submit </code></pre> tasks for execution. Consumers <pre><code> take </code></pre> completed tasks and process their results in the order they complete. A <pre><code> CompletionService </code></pre> can for example be used to manage asynchronous I/O, in which tasks that perform reads are submitted in one part of a program or system, and then acted upon in a different part of the program when the reads complete, possibly in a different order than they were requested. <p> Typically, a <pre><code> CompletionService </code></pre> relies on a separate <pre><code> Executor </code></pre> to actually execute the tasks, in which case the <pre><code> CompletionService </code></pre> only manages an internal completion queue. The <pre><code> ExecutorCompletionService </code></pre> class provides an implementation of this approach. <p> Memory consistency effects: Actions in a thread prior to submitting a task to a <pre><code> CompletionService </code></pre> <i> happen-before </i> actions taken by that task, which in turn <i> happen-before </i> actions following a successful return from the corresponding <pre><code> take() </code></pre> . </p><pre><code>public interface CompletionService\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/CompletionService.html
CompletionStage	A										<section class="prog__container"><p> A stage of a possibly asynchronous computation, that performs an action or computes a value when another CompletionStage completes. A stage completes upon termination of its computation, but this may in turn trigger other dependent stages. The functionality defined in this interface takes only a few basic forms, which expand out to a larger set of methods to capture a range of usage styles: <ul> <li> The computation performed by a stage may be expressed as a Function, Consumer, or Runnable (using methods with names including <em> apply </em> , <em> accept </em> , or <em> run </em> , respectively) depending on whether it requires arguments and/or produces results. For example: <pre> <pre><code>stage.thenApply(x -&gt; square(x)) .thenAccept(x -&gt; System.out.print(x)) .thenRun(() -&gt; System.out.println());</code></pre></pre> An additional form ( <em> compose </em> ) allows the construction of computation pipelines from functions returning completion stages. <p> Any argument to a stage's computation is the outcome of a triggering stage's computation. <li> One stage's execution may be triggered by completion of a single stage, or both of two stages, or either of two stages. Dependencies on a single stage are arranged using methods with prefix <em> then </em> . Those triggered by completion of <em> both </em> of two stages may <em> combine </em> their results or effects, using correspondingly named methods. Those triggered by <em> either </em> of two stages make no guarantees about which of the results or effects are used for the dependent stage's computation. <li> Dependencies among stages control the triggering of computations, but do not otherwise guarantee any particular ordering. Additionally, execution of a new stage's computations may be arranged in any of three ways: default execution, default asynchronous execution (using methods with suffix <em> async </em> that employ the stage's default asynchronous execution facility), or custom (via a supplied <pre><code> Executor </code></pre> ). The execution properties of default and async modes are specified by CompletionStage implementations, not this interface. Methods with explicit Executor arguments may have arbitrary execution properties, and might not even support concurrent execution, but are arranged for processing in a way that accommodates asynchrony. <li> Two method forms ( <pre><code> handle </code></pre> and <pre><code> whenComplete </code></pre> ) support unconditional computation whether the triggering stage completed normally or exceptionally. Method <pre><code> exceptionally </code></pre> supports computation only when the triggering stage completes exceptionally, computing a replacement result, similarly to the java <pre><code> catch </code></pre> keyword. In all other cases, if a stage's computation terminates abruptly with an (unchecked) exception or error, then all dependent stages requiring its completion complete exceptionally as well, with a <pre><code> CompletionException </code></pre> holding the exception as its cause. If a stage is dependent on <em> both </em> of two stages, and both complete exceptionally, then the CompletionException may correspond to either one of these exceptions. If a stage is dependent on <em> either </em> of two others, and only one of them completes exceptionally, no guarantees are made about whether the dependent stage completes normally or exceptionally. In the case of method <pre><code> whenComplete </code></pre> , when the supplied action itself encounters an exception, then the stage completes exceptionally with this exception unless the source stage also completed exceptionally, in which case the exceptional completion from the source stage is given preference and propagated to the dependent stage. </li> </li> </li> </p><pre><code>public interface CompletionStage\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/CompletionStage.html
ConcurrentHashMap	A										<section class="prog__container"><p> A hash table supporting full concurrency of retrievals and high expected concurrency for updates. This class obeys the same functional specification as <pre><code> Hashtable </code></pre> , and includes versions of methods corresponding to each method of <pre><code> Hashtable </code></pre> . However, even though all operations are thread-safe, retrieval operations do <em> not </em> entail locking, and there is <em> not </em> any support for locking the entire table in a way that prevents all access. This class is fully interoperable with <pre><code> Hashtable </code></pre> in programs that rely on its thread safety but not on its synchronization details. <p> Retrieval operations (including <pre><code> get </code></pre> ) generally do not block, so may overlap with update operations (including <pre><code> put </code></pre> and <pre><code> remove </code></pre> ). Retrievals reflect the results of the most recently <em> completed </em> update operations holding upon their onset. (More formally, an update operation for a given key bears a <em> happens-before </em> relation with any (non-null) retrieval for that key reporting the updated value.) For aggregate operations such as <pre><code> putAll </code></pre> and <pre><code> clear </code></pre> , concurrent retrievals may reflect insertion or removal of only some entries. Similarly, Iterators, Spliterators and Enumerations return elements reflecting the state of the hash table at some point at or since the creation of the iterator/enumeration. They do <em> not </em> throw <pre><code> ConcurrentModificationException </code></pre> . However, iterators are designed to be used by only one thread at a time. Bear in mind that the results of aggregate status methods including <pre><code> size </code></pre> , <pre><code> isEmpty </code></pre> , and <pre><code> containsValue </code></pre> are typically useful only when a map is not undergoing concurrent updates in other threads. Otherwise the results of these methods reflect transient states that may be adequate for monitoring or estimation purposes, but not for program control. <p> The table is dynamically expanded when there are too many collisions (i.e., keys that have distinct hash codes but fall into the same slot modulo the table size), with the expected average effect of maintaining roughly two bins per mapping (corresponding to a 0.75 load factor threshold for resizing). There may be much variance around this average as mappings are added and removed, but overall, this maintains a commonly accepted time/space tradeoff for hash tables. However, resizing this or any other kind of hash table may be a relatively slow operation. When possible, it is a good idea to provide a size estimate as an optional <pre><code> initialCapacity </code></pre> constructor argument. An additional optional <pre><code> loadFactor </code></pre> constructor argument provides a further means of customizing initial table capacity by specifying the table density to be used in calculating the amount of space to allocate for the given number of elements. Also, for compatibility with previous versions of this class, constructors may optionally specify an expected <pre><code> concurrencyLevel </code></pre> as an additional hint for internal sizing. Note that using many keys with exactly the same <pre><code> hashCode() </code></pre> is a sure way to slow down performance of any hash table. To ameliorate impact, when keys are <pre><code> Comparable </code></pre> , this class may use comparison order among keys to help break ties. <p> A <pre><code> Set </code></pre> projection of a ConcurrentHashMap may be created (using <pre><code> newKeySet() </code></pre> or <pre><code> newKeySet(int) </code></pre> ), or viewed (using <pre><code> keySet(Object) </code></pre> when only keys are of interest, and the mapped values are (perhaps transiently) not used or all take the same mapping value. <p> A ConcurrentHashMap can be used as a scalable frequency map (a form of histogram or multiset) by using <pre><code> LongAdder </code></pre> values and initializing via <pre><code> computeIfAbsent </code></pre> . For example, to add a count to a <pre><code> ConcurrentHashMap&lt;String,LongAdder&gt; freqs </code></pre> , you can use <pre><code> freqs.computeIfAbsent(key, k -&gt; new LongAdder()).increment(); </code></pre> <p> This class and its views and iterators implement all of the <em> optional </em> methods of the <pre><code> Map </code></pre> and <pre><code> Iterator </code></pre> interfaces. <p> Like <pre><code> Hashtable </code></pre> but unlike <pre><code> HashMap </code></pre> , this class does <em> not </em> allow <pre><code> null </code></pre> to be used as a key or value. <p> ConcurrentHashMaps support a set of sequential and parallel bulk operations that, unlike most <pre><code> Stream </code></pre> methods, are designed to be safely, and often sensibly, applied even with maps that are being concurrently updated by other threads; for example, when computing a snapshot summary of the values in a shared registry. There are three kinds of operation, each with four forms, accepting functions with keys, values, entries, and (key, value) pairs as arguments and/or return values. Because the elements of a ConcurrentHashMap are not ordered in any particular way, and may be processed in different orders in different parallel executions, the correctness of supplied functions should not depend on any ordering, or on any other objects or values that may transiently change while computation is in progress; and except for forEach actions, should ideally be side-effect-free. Bulk operations on <pre><code> Map.Entry </code></pre> objects do not support method <pre><code> setValue </code></pre> . <ul> <li> forEach: Performs a given action on each element. A variant form applies a given transformation on each element before performing the action. <li> search: Returns the first available non-null result of applying a given function on each element; skipping further search when a result is found. <li> reduce: Accumulates each element. The supplied reduction function cannot rely on ordering (more formally, it should be both associative and commutative). There are five variants: <ul> <li> Plain reductions. (There is not a form of this method for (key, value) function arguments since there is no corresponding return type.) <li> Mapped reductions that accumulate the results of a given function applied to each element. <li> Reductions to scalar doubles, longs, and ints, using a given basis value. </li> </li> </li> </ul> </li> </li> </li> </ul> <p> These bulk operations accept a <pre><code> parallelismThreshold </code></pre> argument. Methods proceed sequentially if the current map size is estimated to be less than the given threshold. Using a value of <pre><code> Long.MAX_VALUE </code></pre> suppresses all parallelism. Using a value of <pre><code> 1 </code></pre> results in maximal parallelism by partitioning into enough subtasks to fully utilize the <pre><code> commonPool() </code></pre> that is used for all parallel computations. Normally, you would initially choose one of these extreme values, and then measure performance of using in-between values that trade off overhead versus throughput. <p> The concurrency properties of bulk operations follow from those of ConcurrentHashMap: Any non-null result returned from <pre><code> get(key) </code></pre> and related access methods bears a happens-before relation with the associated insertion or update. The result of any bulk operation reflects the composition of these per-element relations (but is not necessarily atomic with respect to the map as a whole unless it is somehow known to be quiescent). Conversely, because keys and values in the map are never null, null serves as a reliable atomic indicator of the current lack of any result. To maintain this property, null serves as an implicit basis for all non-scalar reduction operations. For the double, long, and int versions, the basis should be one that, when combined with any other value, returns that other value (more formally, it should be the identity element for the reduction). Most common reductions have these properties; for example, computing a sum with basis 0 or a minimum with basis MAX_VALUE. <p> Search and transformation functions provided as arguments should similarly return null to indicate the lack of any result (in which case it is not used). In the case of mapped reductions, this also enables transformations to serve as filters, returning null (or, in the case of primitive specializations, the identity basis) if the element should not be combined. You can create compound transformations and filterings by composing them yourself under this "null means there is nothing there now" rule before using them in search or reduce operations. <p> Methods accepting and/or returning Entry arguments maintain key-value associations. They may be useful for example when finding the key for the greatest value. Note that "plain" Entry arguments can be supplied using <pre><code> new AbstractMap.SimpleEntry(k,v) </code></pre> . <p> Bulk operations may complete abruptly, throwing an exception encountered in the application of a supplied function. Bear in mind when handling such exceptions that other concurrently executing functions could also have thrown exceptions, or would have done so if the first exception had not occurred. <p> Speedups for parallel compared to sequential forms are common but not guaranteed. Parallel operations involving brief functions on small maps may execute more slowly than sequential forms if the underlying work to parallelize the computation is more expensive than the computation itself. Similarly, parallelization may not lead to much actual parallelism if all processors are busy performing unrelated tasks. <p> All arguments to all task methods must be non-null. </p><pre><code>public class ConcurrentHashMap\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ConcurrentHashMap.html
ConcurrentHashMap.KeySetView	A										<section class="prog__container"><p> A view of a ConcurrentHashMap as a <pre><code> Set </code></pre> of keys, in which additions may optionally be enabled by mapping to a common value. This class cannot be directly instantiated. See <pre><code> keySet(V) </code></pre> , <pre><code> newKeySet() </code></pre> , <pre><code> newKeySet(int) </code></pre> .</p><pre><code>public static class ConcurrentHashMap.KeySetView\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ConcurrentHashMap.KeySetView.html
ConcurrentLinkedDeque	A										<section class="prog__container"><p> An unbounded concurrent deque</p><pre><code>public class ConcurrentLinkedDeque\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ConcurrentLinkedDeque.html
ConcurrentLinkedQueue	A										<section class="prog__container"><p> An unbounded thread-safe queue</p><pre><code>public class ConcurrentLinkedQueue\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ConcurrentLinkedQueue.html
ConcurrentMap	A										<section class="prog__container"><p> A <pre><code> Map </code></pre> providing thread safety and atomicity guarantees. <p> To maintain the specified guarantees, default implementations of methods including <pre><code> putIfAbsent(K, V) </code></pre> inherited from <pre><code> Map </code></pre> must be overridden by implementations of this interface. Similarly, implementations of the collections returned by methods <pre><code> keySet() </code></pre> , <pre><code> values() </code></pre> , and <pre><code> entrySet() </code></pre> must override methods such as <pre><code> removeIf </code></pre> when necessary to preserve atomicity guarantees. <p> Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a <pre><code> ConcurrentMap </code></pre> as a key or value <i> happen-before </i> actions subsequent to the access or removal of that object from the <pre><code> ConcurrentMap </code></pre> in another thread. </p><pre><code>public interface ConcurrentMap\nimplements Map&lt;K,&nbsp;V&gt;</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ConcurrentMap.html
ConcurrentNavigableMap	A										<section class="prog__container"><p> A <pre><code> ConcurrentMap </code></pre> supporting <pre><code> NavigableMap </code></pre> operations, and recursively so for its navigable sub-maps.</p><pre><code>public interface ConcurrentNavigableMap\nimplements ConcurrentMap&lt;K,&nbsp;V&gt;, NavigableMap&lt;K,&nbsp;V&gt;</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ConcurrentNavigableMap.html
ConcurrentSkipListMap	A										<section class="prog__container"><p> A scalable concurrent <pre><code> ConcurrentNavigableMap </code></pre> implementation. The map is sorted according to the natural ordering</p><pre><code>public class ConcurrentSkipListMap\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ConcurrentSkipListMap.html
ConcurrentSkipListSet	A										<section class="prog__container"><p> A scalable concurrent <pre><code> NavigableSet </code></pre> implementation based on a <pre><code> ConcurrentSkipListMap </code></pre> . The elements of the set are kept sorted according to their natural ordering</p><pre><code>public class ConcurrentSkipListSet\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ConcurrentSkipListSet.html
CopyOnWriteArrayList	A										<section class="prog__container"><p> A thread-safe random-access list. <p> Read operations (including <pre><code> get(int) </code></pre> ) do not block and may overlap with update operations. Reads reflect the results of the most recently completed operations. Aggregate operations like <pre><code> addAll(int, Collection <? extends E> ) </code></pre> and <pre><code> clear() </code></pre> are atomic; they never expose an intermediate state. <p> Iterators of this list never throw <pre><code> ConcurrentModificationException </code></pre> . When an iterator is created, it keeps a copy of the list's contents. It is always safe to iterate this list, but iterations may not reflect the latest state of the list. <p> Iterators returned by this list and its sub lists cannot modify the underlying list. In particular, <pre><code> remove() </code></pre> , <pre><code> add(E) </code></pre> and <pre><code> set(E) </code></pre> all throw <pre><code> UnsupportedOperationException </code></pre> . <p> This class offers extended API beyond the <pre><code> List </code></pre> interface. It includes additional overloads for indexed search ( <pre><code> indexOf(E, int) </code></pre> and <pre><code> lastIndexOf(E, int) </code></pre> ) and methods for conditional adds ( <pre><code> addIfAbsent(E) </code></pre> and <pre><code> addAllAbsent(Collection <? extends E> ) </code></pre> ). </p><pre><code>public class CopyOnWriteArrayList\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/CopyOnWriteArrayList.html
CopyOnWriteArraySet	A										<section class="prog__container"><p> A <pre><code> Set </code></pre> that uses an internal <pre><code> CopyOnWriteArrayList </code></pre> for all of its operations. Thus, it shares the same basic properties: <ul> <li> It is best suited for applications in which set sizes generally stay small, read-only operations vastly outnumber mutative operations, and you need to prevent interference among threads during traversal. <li> It is thread-safe. <li> Mutative operations ( <pre><code> add </code></pre> , <pre><code> set </code></pre> , <pre><code> remove </code></pre> , etc.) are expensive since they usually entail copying the entire underlying array. <li> Iterators do not support the mutative <pre><code> remove </code></pre> operation. <li> Traversal via iterators is fast and cannot encounter interference from other threads. Iterators rely on unchanging snapshots of the array at the time the iterators were constructed. </li> </li> </li> </li> </li> </ul> <p> <b> Sample Usage. </b> The following code sketch uses a copy-on-write set to maintain a set of Handler objects that perform some action upon state updates. <pre> <pre><code>class Handler { void handle(); ... } class X { private final CopyOnWriteArraySet&lt;Handler&gt; handlers = new CopyOnWriteArraySet&lt;&gt;(); public void addHandler(Handler h) { handlers.add(h); } private long internalState; private synchronized void changeState() { internalState = ...; } public void update() { changeState(); for (Handler handler : handlers) handler.handle(); } }</code></pre></pre> </p><pre><code>public class CopyOnWriteArraySet\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/CopyOnWriteArraySet.html
CountDownLatch	A										<section class="prog__container"><p> A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes. <p> A <pre><code> CountDownLatch </code></pre> is initialized with a given <em> count </em> . The <pre><code> await </code></pre> methods block until the current count reaches zero due to invocations of the <pre><code> countDown() </code></pre> method, after which all waiting threads are released and any subsequent invocations of <pre><code> await </code></pre> return immediately. This is a one-shot phenomenon -- the count cannot be reset. If you need a version that resets the count, consider using a <pre><code> CyclicBarrier </code></pre> . <p> A <pre><code> CountDownLatch </code></pre> is a versatile synchronization tool and can be used for a number of purposes. A <pre><code> CountDownLatch </code></pre> initialized with a count of one serves as a simple on/off latch, or gate: all threads invoking <pre><code> await </code></pre> wait at the gate until it is opened by a thread invoking <pre><code> countDown() </code></pre> . A <pre><code> CountDownLatch </code></pre> initialized to <em> N </em> can be used to make one thread wait until <em> N </em> threads have completed some action, or some action has been completed N times. <p> A useful property of a <pre><code> CountDownLatch </code></pre> is that it doesn't require that threads calling <pre><code> countDown </code></pre> wait for the count to reach zero before proceeding, it simply prevents any thread from proceeding past an <pre><code> await </code></pre> until all threads could pass. <p> <b> Sample usage: </b> Here is a pair of classes in which a group of worker threads use two countdown latches: <ul> <li> The first is a start signal that prevents any worker from proceeding until the driver is ready for them to proceed; <li> The second is a completion signal that allows the driver to wait until all workers have completed. </li> </li> </ul> <pre> <pre><code>class Driver { // ... void main() throws InterruptedException { CountDownLatch startSignal = new CountDownLatch(1); CountDownLatch doneSignal = new CountDownLatch(N); for (int i = 0; i &lt; N; ++i) // create and start threads new Thread(new Worker(startSignal, doneSignal)).start(); doSomethingElse(); // don't let run yet startSignal.countDown(); // let all threads proceed doSomethingElse(); doneSignal.await(); // wait for all to finish } } class Worker implements Runnable { private final CountDownLatch startSignal; private final CountDownLatch doneSignal; Worker(CountDownLatch startSignal, CountDownLatch doneSignal) { this.startSignal = startSignal; this.doneSignal = doneSignal; } public void run() { try { startSignal.await(); doWork(); doneSignal.countDown(); } catch (InterruptedException ex) {} // return; } void doWork() { ... } }</code></pre></pre> <p> Another typical usage would be to divide a problem into N parts, describe each part with a Runnable that executes that portion and counts down on the latch, and queue all the Runnables to an Executor. When all sub-parts are complete, the coordinating thread will be able to pass through await. (When threads must repeatedly count down in this way, instead use a <pre><code> CyclicBarrier </code></pre> .) <pre> <pre><code>class Driver2 { // ... void main() throws InterruptedException { CountDownLatch doneSignal = new CountDownLatch(N); Executor e = ... for (int i = 0; i &lt; N; ++i) // create and start threads e.execute(new WorkerRunnable(doneSignal, i)); doneSignal.await(); // wait for all to finish } } class WorkerRunnable implements Runnable { private final CountDownLatch doneSignal; private final int i; WorkerRunnable(CountDownLatch doneSignal, int i) { this.doneSignal = doneSignal; this.i = i; } public void run() { try { doWork(i); doneSignal.countDown(); } catch (InterruptedException ex) {} // return; } void doWork() { ... } }</code></pre></pre> <p> Memory consistency effects: Until the count reaches zero, actions in a thread prior to calling <pre><code> countDown() </code></pre> <i> happen-before </i> actions following a successful return from a corresponding <pre><code> await() </code></pre> in another thread. </p><pre><code>public class CountDownLatch\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/CountDownLatch.html
CountedCompleter	A										<section class="prog__container"><p> A <pre><code> ForkJoinTask </code></pre> with a completion action performed when triggered and there are no remaining pending actions. CountedCompleters are in general more robust in the presence of subtask stalls and blockage than are other forms of ForkJoinTasks, but are less intuitive to program. Uses of CountedCompleter are similar to those of other completion based components except that multiple <em> pending </em> completions may be necessary to trigger the completion action <pre><code> onCompletion(CountedCompleter) </code></pre> , not just one. Unless initialized otherwise, the pending count</p><pre><code>public abstract class CountedCompleter\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/CountedCompleter.html
CyclicBarrier	A										<section class="prog__container"><p> A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point. CyclicBarriers are useful in programs involving a fixed sized party of threads that must occasionally wait for each other. The barrier is called <em> cyclic </em> because it can be re-used after the waiting threads are released. <p> A <pre><code> CyclicBarrier </code></pre> supports an optional <pre><code> Runnable </code></pre> command that is run once per barrier point, after the last thread in the party arrives, but before any threads are released. This <em> barrier action </em> is useful for updating shared-state before any of the parties continue. <p> <b> Sample usage: </b> Here is an example of using a barrier in a parallel decomposition design: <pre> <pre><code>class Solver { final int N; final float[][] data; final CyclicBarrier barrier; class Worker implements Runnable { int myRow; Worker(int row) { myRow = row; } public void run() { while (!done()) { processRow(myRow); try { barrier.await(); } catch (InterruptedException ex) { return; } catch (BrokenBarrierException ex) { return; } } } } public Solver(float[][] matrix) { data = matrix; N = matrix.length; Runnable barrierAction = new Runnable() { public void run() { mergeRows(...); }}; barrier = new CyclicBarrier(N, barrierAction); List&lt;Thread&gt; threads = new ArrayList&lt;&gt;(N); for (int i = 0; i &lt; N; i++) { Thread thread = new Thread(new Worker(i)); threads.add(thread); thread.start(); } // wait until done for (Thread thread : threads) thread.join(); } }</code></pre></pre> Here, each worker thread processes a row of the matrix then waits at the barrier until all rows have been processed. When all rows are processed the supplied <pre><code> Runnable </code></pre> barrier action is executed and merges the rows. If the merger determines that a solution has been found then <pre><code> done() </code></pre> will return <pre><code> true </code></pre> and each worker will terminate. <p> If the barrier action does not rely on the parties being suspended when it is executed, then any of the threads in the party could execute that action when it is released. To facilitate this, each invocation of <pre><code> await() </code></pre> returns the arrival index of that thread at the barrier. You can then choose which thread should execute the barrier action, for example: <pre> <pre><code>if (barrier.await() == 0) { // log the completion of this iteration }</code></pre></pre> <p> The <pre><code> CyclicBarrier </code></pre> uses an all-or-none breakage model for failed synchronization attempts: If a thread leaves a barrier point prematurely because of interruption, failure, or timeout, all other threads waiting at that barrier point will also leave abnormally via <pre><code> BrokenBarrierException </code></pre> (or <pre><code> InterruptedException </code></pre> if they too were interrupted at about the same time). <p> Memory consistency effects: Actions in a thread prior to calling <pre><code> await() </code></pre> <i> happen-before </i> actions that are part of the barrier action, which in turn <i> happen-before </i> actions following a successful return from the corresponding <pre><code> await() </code></pre> in other threads. </p><pre><code>public class CyclicBarrier\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/CyclicBarrier.html
Delayed	A										<section class="prog__container"><p> A mix-in style interface for marking objects that should be acted upon after a given delay. <p> An implementation of this interface must define a <pre><code> compareTo </code></pre> method that provides an ordering consistent with its <pre><code> getDelay </code></pre> method. </p><pre><code>public interface Delayed\nimplements Comparable&lt;Delayed&gt;</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/Delayed.html
DelayQueue	A										<section class="prog__container"><p> An unbounded blocking queue</p><pre><code>public class DelayQueue\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/DelayQueue.html
Exchanger	A										<section class="prog__container"><p> A synchronization point at which threads can pair and swap elements within pairs. Each thread presents some object on entry to the <pre><code> exchange </code></pre> method, matches with a partner thread, and receives its partner's object on return. An Exchanger may be viewed as a bidirectional form of a <pre><code> SynchronousQueue </code></pre> . Exchangers may be useful in applications such as genetic algorithms and pipeline designs. <p> <b> Sample Usage: </b> Here are the highlights of a class that uses an <pre><code> Exchanger </code></pre> to swap buffers between threads so that the thread filling the buffer gets a freshly emptied one when it needs it, handing off the filled one to the thread emptying the buffer. <pre> <pre><code>class FillAndEmpty { Exchanger&lt;DataBuffer&gt; exchanger = new Exchanger&lt;&gt;(); DataBuffer initialEmptyBuffer = ... a made-up type DataBuffer initialFullBuffer = ... class FillingLoop implements Runnable { public void run() { DataBuffer currentBuffer = initialEmptyBuffer; try { while (currentBuffer != null) { addToBuffer(currentBuffer); if (currentBuffer.isFull()) currentBuffer = exchanger.exchange(currentBuffer); } } catch (InterruptedException ex) { ... handle ... } } } class EmptyingLoop implements Runnable { public void run() { DataBuffer currentBuffer = initialFullBuffer; try { while (currentBuffer != null) { takeFromBuffer(currentBuffer); if (currentBuffer.isEmpty()) currentBuffer = exchanger.exchange(currentBuffer); } } catch (InterruptedException ex) { ... handle ...} } } void start() { new Thread(new FillingLoop()).start(); new Thread(new EmptyingLoop()).start(); } }</code></pre></pre> <p> Memory consistency effects: For each pair of threads that successfully exchange objects via an <pre><code> Exchanger </code></pre> , actions prior to the <pre><code> exchange() </code></pre> in each thread <i> happen-before </i> those subsequent to a return from the corresponding <pre><code> exchange() </code></pre> in the other thread. </p><pre><code>public class Exchanger\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/Exchanger.html
ExecutionException	A										<section class="prog__container"><p> Exception thrown when attempting to retrieve the result of a task that aborted by throwing an exception. This exception can be inspected using the <pre><code> getCause() </code></pre> method.</p><pre><code>public class ExecutionException\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ExecutionException.html
Executor	A										<section class="prog__container"><p> An object that executes submitted <pre><code> Runnable </code></pre> tasks. This interface provides a way of decoupling task submission from the mechanics of how each task will be run, including details of thread use, scheduling, etc. An <pre><code> Executor </code></pre> is normally used instead of explicitly creating threads. For example, rather than invoking <pre><code> new Thread(new RunnableTask()).start() </code></pre> for each of a set of tasks, you might use: <pre> <pre><code>Executor executor = anExecutor(); executor.execute(new RunnableTask1()); executor.execute(new RunnableTask2()); ...</code></pre></pre> However, the <pre><code> Executor </code></pre> interface does not strictly require that execution be asynchronous. In the simplest case, an executor can run the submitted task immediately in the caller's thread: <pre> <pre><code>class DirectExecutor implements Executor { public void execute(Runnable r) { r.run(); } }</code></pre></pre> More typically, tasks are executed in some thread other than the caller's thread. The executor below spawns a new thread for each task. <pre> <pre><code>class ThreadPerTaskExecutor implements Executor { public void execute(Runnable r) { new Thread(r).start(); } }</code></pre></pre> Many <pre><code> Executor </code></pre> implementations impose some sort of limitation on how and when tasks are scheduled. The executor below serializes the submission of tasks to a second executor, illustrating a composite executor. <pre> <pre><code>class SerialExecutor implements Executor { final Queue&lt;Runnable&gt; tasks = new ArrayDeque&lt;&gt;(); final Executor executor; Runnable active; SerialExecutor(Executor executor) { this.executor = executor; } public synchronized void execute(final Runnable r) { tasks.add(new Runnable() { public void run() { try { r.run(); } finally { scheduleNext(); } } }); if (active == null) { scheduleNext(); } } protected synchronized void scheduleNext() { if ((active = tasks.poll()) != null) { executor.execute(active); } } }</code></pre></pre> The <pre><code> Executor </code></pre> implementations provided in this package implement <pre><code> ExecutorService </code></pre> , which is a more extensive interface. The <pre><code> ThreadPoolExecutor </code></pre> class provides an extensible thread pool implementation. The <pre><code> Executors </code></pre> class provides convenient factory methods for these Executors. <p> Memory consistency effects: Actions in a thread prior to submitting a <pre><code> Runnable </code></pre> object to an <pre><code> Executor </code></pre> <i> happen-before </i> its execution begins, perhaps in another thread. </p><pre><code>public interface Executor\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/Executor.html
ExecutorCompletionService	A										<section class="prog__container"><p> A <pre><code> CompletionService </code></pre> that uses a supplied <pre><code> Executor </code></pre> to execute tasks. This class arranges that submitted tasks are, upon completion, placed on a queue accessible using <pre><code> take </code></pre> . The class is lightweight enough to be suitable for transient use when processing groups of tasks. <p> <b> Usage Examples. </b> Suppose you have a set of solvers for a certain problem, each returning a value of some type <pre><code> Result </code></pre> , and would like to run them concurrently, processing the results of each of them that return a non-null value, in some method <pre><code> use(Result r) </code></pre> . You could write this as: <pre> <pre><code>void solve(Executor e, Collection&lt;Callable&lt;Result&gt;&gt; solvers) throws InterruptedException, ExecutionException { CompletionService&lt;Result&gt; ecs = new ExecutorCompletionService&lt;Result&gt;(e); for (Callable&lt;Result&gt; s : solvers) ecs.submit(s); int n = solvers.size(); for (int i = 0; i &lt; n; ++i) { Result r = ecs.take().get(); if (r != null) use(r); } }</code></pre></pre> Suppose instead that you would like to use the first non-null result of the set of tasks, ignoring any that encounter exceptions, and cancelling all other tasks when the first one is ready: <pre> <pre><code>void solve(Executor e, Collection&lt;Callable&lt;Result&gt;&gt; solvers) throws InterruptedException { CompletionService&lt;Result&gt; ecs = new ExecutorCompletionService&lt;Result&gt;(e); int n = solvers.size(); List&lt;Future&lt;Result&gt;&gt; futures = new ArrayList&lt;&gt;(n); Result result = null; try { for (Callable&lt;Result&gt; s : solvers) futures.add(ecs.submit(s)); for (int i = 0; i &lt; n; ++i) { try { Result r = ecs.take().get(); if (r != null) { result = r; break; } } catch (ExecutionException ignore) {} } } finally { for (Future&lt;Result&gt; f : futures) f.cancel(true); } if (result != null) use(result); }</code></pre></pre> </p><pre><code>public class ExecutorCompletionService\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ExecutorCompletionService.html
Executors	A										<section class="prog__container"><p> Factory and utility methods for <pre><code> Executor </code></pre> , <pre><code> ExecutorService </code></pre> , <pre><code> ScheduledExecutorService </code></pre> , <pre><code> ThreadFactory </code></pre> , and <pre><code> Callable </code></pre> classes defined in this package. This class supports the following kinds of methods: <ul> <li> Methods that create and return an <pre><code> ExecutorService </code></pre> set up with commonly useful configuration settings. <li> Methods that create and return a <pre><code> ScheduledExecutorService </code></pre> set up with commonly useful configuration settings. <li> Methods that create and return a "wrapped" ExecutorService, that disables reconfiguration by making implementation-specific methods inaccessible. <li> Methods that create and return a <pre><code> ThreadFactory </code></pre> that sets newly created threads to a known state. <li> Methods that create and return a <pre><code> Callable </code></pre> out of other closure-like forms, so they can be used in execution methods requiring <pre><code> Callable </code></pre> . </li> </li> </li> </li> </li> </ul></p><pre><code>public class Executors\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/Executors.html
ExecutorService	A										<section class="prog__container"><p> An <pre><code> Executor </code></pre> that provides methods to manage termination and methods that can produce a <pre><code> Future </code></pre> for tracking progress of one or more asynchronous tasks. <p> An <pre><code> ExecutorService </code></pre> can be shut down, which will cause it to reject new tasks. Two different methods are provided for shutting down an <pre><code> ExecutorService </code></pre> . The <pre><code> shutdown() </code></pre> method will allow previously submitted tasks to execute before terminating, while the <pre><code> shutdownNow() </code></pre> method prevents waiting tasks from starting and attempts to stop currently executing tasks. Upon termination, an executor has no tasks actively executing, no tasks awaiting execution, and no new tasks can be submitted. An unused <pre><code> ExecutorService </code></pre> should be shut down to allow reclamation of its resources. <p> Method <pre><code> submit </code></pre> extends base method <pre><code> execute(Runnable) </code></pre> by creating and returning a <pre><code> Future </code></pre> that can be used to cancel execution and/or wait for completion. Methods <pre><code> invokeAny </code></pre> and <pre><code> invokeAll </code></pre> perform the most commonly useful forms of bulk execution, executing a collection of tasks and then waiting for at least one, or all, to complete. (Class <pre><code> ExecutorCompletionService </code></pre> can be used to write customized variants of these methods.) <p> The <pre><code> Executors </code></pre> class provides factory methods for the executor services provided in this package. </p><pre><code>public interface ExecutorService\nimplements Executor</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ExecutorService.html
ForkJoinPool.ForkJoinWorkerThreadFactory	A										<section class="prog__container"><p> Factory for creating new <pre><code> ForkJoinWorkerThread </code></pre> s. A <pre><code> ForkJoinWorkerThreadFactory </code></pre> must be defined and used for <pre><code> ForkJoinWorkerThread </code></pre> subclasses that extend base functionality or initialize threads with different contexts.</p><pre><code>public static interface ForkJoinPool.ForkJoinWorkerThreadFactory\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.ForkJoinWorkerThreadFactory.html
ForkJoinPool	A										<section class="prog__container"><p> An <pre><code> ExecutorService </code></pre> for running <pre><code> ForkJoinTask </code></pre> s. A <pre><code> ForkJoinPool </code></pre> provides the entry point for submissions from non- <pre><code> ForkJoinTask </code></pre> clients, as well as management and monitoring operations. <p> A <pre><code> ForkJoinPool </code></pre> differs from other kinds of <pre><code> ExecutorService </code></pre> mainly by virtue of employing <em> work-stealing </em> : all threads in the pool attempt to find and execute tasks submitted to the pool and/or created by other active tasks (eventually blocking waiting for work if none exist). This enables efficient processing when most tasks spawn other subtasks (as do most <pre><code> ForkJoinTask </code></pre> s), as well as when many small tasks are submitted to the pool from external clients. Especially when setting <em> asyncMode </em> to true in constructors, <pre><code> ForkJoinPool </code></pre> s may also be appropriate for use with event-style tasks that are never joined. <p> A static <pre><code> commonPool() </code></pre> is available and appropriate for most applications. The common pool is used by any ForkJoinTask that is not explicitly submitted to a specified pool. Using the common pool normally reduces resource usage (its threads are slowly reclaimed during periods of non-use, and reinstated upon subsequent use). <p> For applications that require separate or custom pools, a <pre><code> ForkJoinPool </code></pre> may be constructed with a given target parallelism level; by default, equal to the number of available processors. The pool attempts to maintain enough active (or available) threads by dynamically adding, suspending, or resuming internal worker threads, even if some tasks are stalled waiting to join others. However, no such adjustments are guaranteed in the face of blocked I/O or other unmanaged synchronization. The nested <pre><code> ForkJoinPool.ManagedBlocker </code></pre> interface enables extension of the kinds of synchronization accommodated. <p> In addition to execution and lifecycle control methods, this class provides status check methods (for example <pre><code> getStealCount() </code></pre> ) that are intended to aid in developing, tuning, and monitoring fork/join applications. Also, method <pre><code> toString() </code></pre> returns indications of pool state in a convenient form for informal monitoring. <p> As is the case with other ExecutorServices, there are three main task execution methods summarized in the following table. These are designed to be used primarily by clients not already engaged in fork/join computations in the current pool. The main forms of these methods accept instances of <pre><code> ForkJoinTask </code></pre> , but overloaded forms also allow mixed execution of plain <pre><code> Runnable </code></pre> - or <pre><code> Callable </code></pre> - based activities as well. However, tasks that are already executing in a pool should normally instead use the within-computation forms listed in the table unless using async event-style tasks that are not usually joined, in which case there is little difference among choice of methods. <table border="" cellpadding="3" cellspacing="1"> <caption> Summary of task execution methods </caption> <tr> <td> </td> <td align="CENTER"> <b> Call from non-fork/join clients </b> </td> <td align="CENTER"> <b> Call from within fork/join computations </b> </td> </tr> <tr> <td> <b> Arrange async execution </b> </td> <td> <pre><code> execute(ForkJoinTask) </code></pre> </td> <td> <pre><code> fork() </code></pre> </td> </tr> <tr> <td> <b> Await and obtain result </b> </td> <td> <pre><code> invoke(ForkJoinTask) </code></pre> </td> <td> <pre><code> invoke() </code></pre> </td> </tr> <tr> <td> <b> Arrange exec and obtain Future </b> </td> <td> <pre><code> submit(ForkJoinTask) </code></pre> </td> <td> <pre><code> fork() </code></pre> (ForkJoinTasks <em> are </em> Futures) </td> </tr> </table> <p> The common pool is by default constructed with default parameters, but these may be controlled by setting three system properties </p><pre><code>public class ForkJoinPool\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.html
ForkJoinPool.ManagedBlocker	A										<section class="prog__container"><p> Interface for extending managed parallelism for tasks running in <pre><code> ForkJoinPool </code></pre> s. <p> A <pre><code> ManagedBlocker </code></pre> provides two methods. Method <pre><code> isReleasable() </code></pre> must return <pre><code> true </code></pre> if blocking is not necessary. Method <pre><code> block() </code></pre> blocks the current thread if necessary (perhaps internally invoking <pre><code> isReleasable </code></pre> before actually blocking). These actions are performed by any thread invoking <pre><code> managedBlock(ManagedBlocker) </code></pre> . The unusual methods in this API accommodate synchronizers that may, but don't usually, block for long periods. Similarly, they allow more efficient internal handling of cases in which additional workers may be, but usually are not, needed to ensure sufficient parallelism. Toward this end, implementations of method <pre><code> isReleasable </code></pre> must be amenable to repeated invocation. <p> For example, here is a ManagedBlocker based on a ReentrantLock: <pre> <pre><code>class ManagedLocker implements ManagedBlocker { final ReentrantLock lock; boolean hasLock = false; ManagedLocker(ReentrantLock lock) { this.lock = lock; } public boolean block() { if (!hasLock) lock.lock(); return true; } public boolean isReleasable() { return hasLock || (hasLock = lock.tryLock()); } }</code></pre></pre> <p> Here is a class that possibly blocks waiting for an item on a given queue: <pre> <pre><code>class QueueTaker&lt;E&gt; implements ManagedBlocker { final BlockingQueue&lt;E&gt; queue; volatile E item = null; QueueTaker(BlockingQueue&lt;E&gt; q) { this.queue = q; } public boolean block() throws InterruptedException { if (item == null) item = queue.take(); return true; } public boolean isReleasable() { return item != null || (item = queue.poll()) != null; } public E getItem() { // call after pool.managedBlock completes return item; } }</code></pre></pre> </p><pre><code>public static interface ForkJoinPool.ManagedBlocker\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ForkJoinPool.ManagedBlocker.html
ForkJoinTask	A										<section class="prog__container"><p> Abstract base class for tasks that run within a <pre><code> ForkJoinPool </code></pre> . A <pre><code> ForkJoinTask </code></pre> is a thread-like entity that is much lighter weight than a normal thread. Huge numbers of tasks and subtasks may be hosted by a small number of actual threads in a ForkJoinPool, at the price of some usage limitations. <p> A "main" <pre><code> ForkJoinTask </code></pre> begins execution when it is explicitly submitted to a <pre><code> ForkJoinPool </code></pre> , or, if not already engaged in a ForkJoin computation, commenced in the <pre><code> commonPool() </code></pre> via <pre><code> fork() </code></pre> , <pre><code> invoke() </code></pre> , or related methods. Once started, it will usually in turn start other subtasks. As indicated by the name of this class, many programs using <pre><code> ForkJoinTask </code></pre> employ only methods <pre><code> fork() </code></pre> and <pre><code> join() </code></pre> , or derivatives such as <pre><code> invokeAll </code></pre> . However, this class also provides a number of other methods that can come into play in advanced usages, as well as extension mechanics that allow support of new forms of fork/join processing. <p> A <pre><code> ForkJoinTask </code></pre> is a lightweight form of <pre><code> Future </code></pre> . The efficiency of <pre><code> ForkJoinTask </code></pre> s stems from a set of restrictions (that are only partially statically enforceable) reflecting their main use as computational tasks calculating pure functions or operating on purely isolated objects. The primary coordination mechanisms are <pre><code> fork() </code></pre> , that arranges asynchronous execution, and <pre><code> join() </code></pre> , that doesn't proceed until the task's result has been computed. Computations should ideally avoid <pre><code> synchronized </code></pre> methods or blocks, and should minimize other blocking synchronization apart from joining other tasks or using synchronizers such as Phasers that are advertised to cooperate with fork/join scheduling. Subdividable tasks should also not perform blocking I/O, and should ideally access variables that are completely independent of those accessed by other running tasks. These guidelines are loosely enforced by not permitting checked exceptions such as <pre><code> IOExceptions </code></pre> to be thrown. However, computations may still encounter unchecked exceptions, that are rethrown to callers attempting to join them. These exceptions may additionally include <pre><code> RejectedExecutionException </code></pre> stemming from internal resource exhaustion, such as failure to allocate internal task queues. Rethrown exceptions behave in the same way as regular exceptions, but, when possible, contain stack traces (as displayed for example using <pre><code> ex.printStackTrace() </code></pre> ) of both the thread that initiated the computation as well as the thread actually encountering the exception; minimally only the latter. <p> It is possible to define and use ForkJoinTasks that may block, but doing do requires three further considerations: (1) Completion of few if any <em> other </em> tasks should be dependent on a task that blocks on external synchronization or I/O. Event-style async tasks that are never joined (for example, those subclassing <pre><code> CountedCompleter </code></pre> ) often fall into this category. (2) To minimize resource impact, tasks should be small; ideally performing only the (possibly) blocking action. (3) Unless the <pre><code> ForkJoinPool.ManagedBlocker </code></pre> API is used, or the number of possibly blocked tasks is known to be less than the pool's <pre><code> getParallelism() </code></pre> level, the pool cannot guarantee that enough threads will be available to ensure progress or good performance. <p> The primary method for awaiting completion and extracting results of a task is <pre><code> join() </code></pre> , but there are several variants: The <pre><code> get() </code></pre> methods support interruptible and/or timed waits for completion and report results using <pre><code> Future </code></pre> conventions. Method <pre><code> invoke() </code></pre> is semantically equivalent to <pre><code> fork(); join() </code></pre> but always attempts to begin execution in the current thread. The " <em> quiet </em> " forms of these methods do not extract results or report exceptions. These may be useful when a set of tasks are being executed, and you need to delay processing of results or exceptions until all complete. Method <pre><code> invokeAll </code></pre> (available in multiple versions) performs the most common form of parallel invocation: forking a set of tasks and joining them all. <p> In the most typical usages, a fork-join pair act like a call (fork) and return (join) from a parallel recursive function. As is the case with other forms of recursive calls, returns (joins) should be performed innermost-first. For example, <pre><code> a.fork(); b.fork(); b.join(); a.join(); </code></pre> is likely to be substantially more efficient than joining <pre><code> a </code></pre> before <pre><code> b </code></pre> . <p> The execution status of tasks may be queried at several levels of detail: <pre><code> isDone() </code></pre> is true if a task completed in any way (including the case where a task was cancelled without executing); <pre><code> isCompletedNormally() </code></pre> is true if a task completed without cancellation or encountering an exception; <pre><code> isCancelled() </code></pre> is true if the task was cancelled (in which case <pre><code> getException() </code></pre> returns a <pre><code> CancellationException </code></pre> ); and <pre><code> isCompletedAbnormally() </code></pre> is true if a task was either cancelled or encountered an exception, in which case <pre><code> getException() </code></pre> will return either the encountered exception or <pre><code> CancellationException </code></pre> . <p> The ForkJoinTask class is not usually directly subclassed. Instead, you subclass one of the abstract classes that support a particular style of fork/join processing, typically <pre><code> RecursiveAction </code></pre> for most computations that do not return results, <pre><code> RecursiveTask </code></pre> for those that do, and <pre><code> CountedCompleter </code></pre> for those in which completed actions trigger other actions. Normally, a concrete ForkJoinTask subclass declares fields comprising its parameters, established in a constructor, and then defines a <pre><code> compute </code></pre> method that somehow uses the control methods supplied by this base class. <p> Method <pre><code> join() </code></pre> and its variants are appropriate for use only when completion dependencies are acyclic; that is, the parallel computation can be described as a directed acyclic graph (DAG). Otherwise, executions may encounter a form of deadlock as tasks cyclically wait for each other. However, this framework supports other methods and techniques (for example the use of <pre><code> Phaser </code></pre> , <pre><code> helpQuiesce() </code></pre> , and <pre><code> complete(V) </code></pre> ) that may be of use in constructing custom subclasses for problems that are not statically structured as DAGs. To support such usages, a ForkJoinTask may be atomically <em> tagged </em> with a <pre><code> short </code></pre> value using <pre><code> setForkJoinTaskTag(short) </code></pre> or <pre><code> compareAndSetForkJoinTaskTag(short, short) </code></pre> and checked using <pre><code> getForkJoinTaskTag() </code></pre> . The ForkJoinTask implementation does not use these <pre><code> protected </code></pre> methods or tags for any purpose, but they may be of use in the construction of specialized subclasses. For example, parallel graph traversals can use the supplied methods to avoid revisiting nodes/tasks that have already been processed. (Method names for tagging are bulky in part to encourage definition of methods that reflect their usage patterns.) <p> Most base support methods are <pre><code> final </code></pre> , to prevent overriding of implementations that are intrinsically tied to the underlying lightweight task scheduling framework. Developers creating new basic styles of fork/join processing should minimally implement <pre><code> protected </code></pre> methods <pre><code> exec() </code></pre> , <pre><code> setRawResult(V) </code></pre> , and <pre><code> getRawResult() </code></pre> , while also introducing an abstract computational method that can be implemented in its subclasses, possibly relying on other <pre><code> protected </code></pre> methods provided by this class. <p> ForkJoinTasks should perform relatively small amounts of computation. Large tasks should be split into smaller subtasks, usually via recursive decomposition. As a very rough rule of thumb, a task should perform more than 100 and less than 10000 basic computational steps, and should avoid indefinite looping. If tasks are too big, then parallelism cannot improve throughput. If too small, then memory and internal task maintenance overhead may overwhelm processing. <p> This class provides <pre><code> adapt </code></pre> methods for <pre><code> Runnable </code></pre> and <pre><code> Callable </code></pre> , that may be of use when mixing execution of <pre><code> ForkJoinTasks </code></pre> with other kinds of tasks. When all tasks are of this form, consider using a pool constructed in <em> asyncMode </em> . <p> ForkJoinTasks are <pre><code> Serializable </code></pre> , which enables them to be used in extensions such as remote execution frameworks. It is sensible to serialize tasks only before or after, but not during, execution. Serialization is not relied on during execution itself. </p><pre><code>public abstract class ForkJoinTask\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ForkJoinTask.html
ForkJoinWorkerThread	A										<section class="prog__container"><p> A thread managed by a <pre><code> ForkJoinPool </code></pre> , which executes <pre><code> ForkJoinTask </code></pre> s. This class is subclassable solely for the sake of adding functionality -- there are no overridable methods dealing with scheduling or execution. However, you can override initialization and termination methods surrounding the main task processing loop. If you do create such a subclass, you will also need to supply a custom <pre><code> ForkJoinPool.ForkJoinWorkerThreadFactory </code></pre> to use it</p><pre><code>public class ForkJoinWorkerThread\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ForkJoinWorkerThread.html
Future	A										<section class="prog__container"><p> A <pre><code> Future </code></pre> represents the result of an asynchronous computation. Methods are provided to check if the computation is complete, to wait for its completion, and to retrieve the result of the computation. The result can only be retrieved using method <pre><code> get </code></pre> when the computation has completed, blocking if necessary until it is ready. Cancellation is performed by the <pre><code> cancel </code></pre> method. Additional methods are provided to determine if the task completed normally or was cancelled. Once a computation has completed, the computation cannot be cancelled. If you would like to use a <pre><code> Future </code></pre> for the sake of cancellability but not provide a usable result, you can declare types of the form <pre><code> Future&lt;?&gt; </code></pre> and return <pre><code> null </code></pre> as a result of the underlying task. <p> <b> Sample Usage </b> (Note that the following classes are all made-up.) <pre> <pre><code>interface ArchiveSearcher { String search(String target); } class App { ExecutorService executor = ... ArchiveSearcher searcher = ... void showSearch(final String target) throws InterruptedException { Future&lt;String&gt; future = executor.submit(new Callable&lt;String&gt;() { public String call() { return searcher.search(target); }}); displayOtherThings(); // do other things while searching try { displayText(future.get()); // use future } catch (ExecutionException ex) { cleanup(); return; } } }</code></pre></pre> The <pre><code> FutureTask </code></pre> class is an implementation of <pre><code> Future </code></pre> that implements <pre><code> Runnable </code></pre> , and so may be executed by an <pre><code> Executor </code></pre> . For example, the above construction with <pre><code> submit </code></pre> could be replaced by: <pre> <pre><code>FutureTask&lt;String&gt; future = new FutureTask&lt;&gt;(new Callable&lt;String&gt;() { public String call() { return searcher.search(target); }}); executor.execute(future);</code></pre></pre> <p> Memory consistency effects: Actions taken by the asynchronous computation <i> happen-before </i> actions following the corresponding <pre><code> Future.get() </code></pre> in another thread. </p><pre><code>public interface Future\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/Future.html
FutureTask	A										<section class="prog__container"><p> A cancellable asynchronous computation. This class provides a base implementation of <pre><code> Future </code></pre> , with methods to start and cancel a computation, query to see if the computation is complete, and retrieve the result of the computation. The result can only be retrieved when the computation has completed; the <pre><code> get </code></pre> methods will block if the computation has not yet completed. Once the computation has completed, the computation cannot be restarted or cancelled (unless the computation is invoked using <pre><code> runAndReset() </code></pre> ). <p> A <pre><code> FutureTask </code></pre> can be used to wrap a <pre><code> Callable </code></pre> or <pre><code> Runnable </code></pre> object. Because <pre><code> FutureTask </code></pre> implements <pre><code> Runnable </code></pre> , a <pre><code> FutureTask </code></pre> can be submitted to an <pre><code> Executor </code></pre> for execution. <p> In addition to serving as a standalone class, this class provides <pre><code> protected </code></pre> functionality that may be useful when creating customized task classes. </p><pre><code>public class FutureTask\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/FutureTask.html
LinkedBlockingDeque	A										<section class="prog__container"><p> An optionally-bounded blocking deque</p><pre><code>public class LinkedBlockingDeque\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/LinkedBlockingDeque.html
LinkedBlockingQueue	A										<section class="prog__container"><p> An optionally-bounded blocking queue</p><pre><code>public class LinkedBlockingQueue\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/LinkedBlockingQueue.html
LinkedTransferQueue	A										<section class="prog__container"><p> An unbounded <pre><code> TransferQueue </code></pre> based on linked nodes. This queue orders elements FIFO (first-in-first-out) with respect to any given producer. The <em> head </em> of the queue is that element that has been on the queue the longest time for some producer. The <em> tail </em> of the queue is that element that has been on the queue the shortest time for some producer. <p> Beware that, unlike in most collections, the <pre><code> size </code></pre> method is <em> NOT </em> a constant-time operation. Because of the asynchronous nature of these queues, determining the current number of elements requires a traversal of the elements, and so may report inaccurate results if this collection is modified during traversal. Additionally, the bulk operations <pre><code> addAll </code></pre> , <pre><code> removeAll </code></pre> , <pre><code> retainAll </code></pre> , <pre><code> containsAll </code></pre> , <pre><code> equals </code></pre> , and <pre><code> toArray </code></pre> are <em> not </em> guaranteed to be performed atomically. For example, an iterator operating concurrently with an <pre><code> addAll </code></pre> operation might view only some of the added elements. <p> This class and its iterator implement all of the <em> optional </em> methods of the <pre><code> Collection </code></pre> and <pre><code> Iterator </code></pre> interfaces. <p> Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a <pre><code> LinkedTransferQueue </code></pre> <i> happen-before </i> actions subsequent to the access or removal of that element from the <pre><code> LinkedTransferQueue </code></pre> in another thread. </p><pre><code>public class LinkedTransferQueue\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/LinkedTransferQueue.html
java.util.concurrent	A										<section class="prog__container"></section>	https://developer.android.com/reference/java/util/concurrent/package-summary.html
Phaser	A										<section class="prog__container"><p> A reusable synchronization barrier, similar in functionality to <pre><code> CyclicBarrier </code></pre> and <pre><code> CountDownLatch </code></pre> but supporting more flexible usage. <p> <b> Registration. </b> Unlike the case for other barriers, the number of parties <em> registered </em> to synchronize on a phaser may vary over time. Tasks may be registered at any time (using methods <pre><code> register() </code></pre> , <pre><code> bulkRegister(int) </code></pre> , or forms of constructors establishing initial numbers of parties), and optionally deregistered upon any arrival (using <pre><code> arriveAndDeregister() </code></pre> ). As is the case with most basic synchronization constructs, registration and deregistration affect only internal counts; they do not establish any further internal bookkeeping, so tasks cannot query whether they are registered. (However, you can introduce such bookkeeping by subclassing this class.) <p> <b> Synchronization. </b> Like a <pre><code> CyclicBarrier </code></pre> , a <pre><code> Phaser </code></pre> may be repeatedly awaited. Method <pre><code> arriveAndAwaitAdvance() </code></pre> has effect analogous to <pre><code> CyclicBarrier.await </code></pre> . Each generation of a phaser has an associated phase number. The phase number starts at zero, and advances when all parties arrive at the phaser, wrapping around to zero after reaching <pre><code> Integer.MAX_VALUE </code></pre> . The use of phase numbers enables independent control of actions upon arrival at a phaser and upon awaiting others, via two kinds of methods that may be invoked by any registered party: <ul> <li> <b> Arrival. </b> Methods <pre><code> arrive() </code></pre> and <pre><code> arriveAndDeregister() </code></pre> record arrival. These methods do not block, but return an associated <em> arrival phase number </em> ; that is, the phase number of the phaser to which the arrival applied. When the final party for a given phase arrives, an optional action is performed and the phase advances. These actions are performed by the party triggering a phase advance, and are arranged by overriding method <pre><code> onAdvance(int, int) </code></pre> , which also controls termination. Overriding this method is similar to, but more flexible than, providing a barrier action to a <pre><code> CyclicBarrier </code></pre> . <li> <b> Waiting. </b> Method <pre><code> awaitAdvance(int) </code></pre> requires an argument indicating an arrival phase number, and returns when the phaser advances to (or is already at) a different phase. Unlike similar constructions using <pre><code> CyclicBarrier </code></pre> , method <pre><code> awaitAdvance </code></pre> continues to wait even if the waiting thread is interrupted. Interruptible and timeout versions are also available, but exceptions encountered while tasks wait interruptibly or with timeout do not change the state of the phaser. If necessary, you can perform any associated recovery within handlers of those exceptions, often after invoking <pre><code> forceTermination </code></pre> . Phasers may also be used by tasks executing in a <pre><code> ForkJoinPool </code></pre> . Progress is ensured if the pool's parallelismLevel can accommodate the maximum number of simultaneously blocked parties. </li> </li> </ul> <p> <b> Termination. </b> A phaser may enter a <em> termination </em> state, that may be checked using method <pre><code> isTerminated() </code></pre> . Upon termination, all synchronization methods immediately return without waiting for advance, as indicated by a negative return value. Similarly, attempts to register upon termination have no effect. Termination is triggered when an invocation of <pre><code> onAdvance </code></pre> returns <pre><code> true </code></pre> . The default implementation returns <pre><code> true </code></pre> if a deregistration has caused the number of registered parties to become zero. As illustrated below, when phasers control actions with a fixed number of iterations, it is often convenient to override this method to cause termination when the current phase number reaches a threshold. Method <pre><code> forceTermination() </code></pre> is also available to abruptly release waiting threads and allow them to terminate. <p> <b> Tiering. </b> Phasers may be <em> tiered </em> (i.e., constructed in tree structures) to reduce contention. Phasers with large numbers of parties that would otherwise experience heavy synchronization contention costs may instead be set up so that groups of sub-phasers share a common parent. This may greatly increase throughput even though it incurs greater per-operation overhead. <p> In a tree of tiered phasers, registration and deregistration of child phasers with their parent are managed automatically. Whenever the number of registered parties of a child phaser becomes non-zero (as established in the <pre><code> Phaser(Phaser, int) </code></pre> constructor, <pre><code> register() </code></pre> , or <pre><code> bulkRegister(int) </code></pre> ), the child phaser is registered with its parent. Whenever the number of registered parties becomes zero as the result of an invocation of <pre><code> arriveAndDeregister() </code></pre> , the child phaser is deregistered from its parent. <p> <b> Monitoring. </b> While synchronization methods may be invoked only by registered parties, the current state of a phaser may be monitored by any caller. At any given moment there are <pre><code> getRegisteredParties() </code></pre> parties in total, of which <pre><code> getArrivedParties() </code></pre> have arrived at the current phase ( <pre><code> getPhase() </code></pre> ). When the remaining ( <pre><code> getUnarrivedParties() </code></pre> ) parties arrive, the phase advances. The values returned by these methods may reflect transient states and so are not in general useful for synchronization control. Method <pre><code> toString() </code></pre> returns snapshots of these state queries in a form convenient for informal monitoring. <p> <b> Sample usages: </b> <p> A <pre><code> Phaser </code></pre> may be used instead of a <pre><code> CountDownLatch </code></pre> to control a one-shot action serving a variable number of parties. The typical idiom is for the method setting this up to first register, then start the actions, then deregister, as in: <pre> <pre><code>void runTasks(List&lt;Runnable&gt; tasks) { final Phaser phaser = new Phaser(1); // "1" to register self // create and start threads for (final Runnable task : tasks) { phaser.register(); new Thread() { public void run() { phaser.arriveAndAwaitAdvance(); // await all creation task.run(); } }.start(); } // allow threads to start and deregister self phaser.arriveAndDeregister(); }</code></pre></pre> <p> One way to cause a set of threads to repeatedly perform actions for a given number of iterations is to override <pre><code> onAdvance </code></pre> : <pre> <pre><code>void startTasks(List&lt;Runnable&gt; tasks, final int iterations) { final Phaser phaser = new Phaser() { protected boolean onAdvance(int phase, int registeredParties) { return phase &gt;= iterations || registeredParties == 0; } }; phaser.register(); for (final Runnable task : tasks) { phaser.register(); new Thread() { public void run() { do { task.run(); phaser.arriveAndAwaitAdvance(); } while (!phaser.isTerminated()); } }.start(); } phaser.arriveAndDeregister(); // deregister self, don't wait }</code></pre></pre> If the main task must later await termination, it may re-register and then execute a similar loop: <pre> <pre><code>// ... phaser.register(); while (!phaser.isTerminated()) phaser.arriveAndAwaitAdvance();</code></pre></pre> <p> Related constructions may be used to await particular phase numbers in contexts where you are sure that the phase will never wrap around <pre><code> Integer.MAX_VALUE </code></pre> . For example: <pre> <pre><code>void awaitPhase(Phaser phaser, int phase) { int p = phaser.register(); // assumes caller not already registered while (p &lt; phase) { if (phaser.isTerminated()) // ... deal with unexpected termination else p = phaser.arriveAndAwaitAdvance(); } phaser.arriveAndDeregister(); }</code></pre></pre> <p> To create a set of <pre><code> n </code></pre> tasks using a tree of phasers, you could use code of the following form, assuming a Task class with a constructor accepting a <pre><code> Phaser </code></pre> that it registers with upon construction. After invocation of <pre><code> build(new Task[n], 0, n, new Phaser()) </code></pre> , these tasks could then be started, for example by submitting to a pool: <pre> <pre><code>void build(Task[] tasks, int lo, int hi, Phaser ph) { if (hi - lo &gt; TASKS_PER_PHASER) { for (int i = lo; i &lt; hi; i += TASKS_PER_PHASER) { int j = Math.min(i + TASKS_PER_PHASER, hi); build(tasks, i, j, new Phaser(ph)); } } else { for (int i = lo; i &lt; hi; ++i) tasks[i] = new Task(ph); // assumes new Task(ph) performs ph.register() } }</code></pre></pre> The best value of <pre><code> TASKS_PER_PHASER </code></pre> depends mainly on expected synchronization rates. A value as low as four may be appropriate for extremely small per-phase task bodies (thus high rates), or up to hundreds for extremely large ones. <p> <b> Implementation notes </b> : This implementation restricts the maximum number of parties to 65535. Attempts to register additional parties result in <pre><code> IllegalStateException </code></pre> . However, you can and should create tiered phasers to accommodate arbitrarily large sets of participants. </p><pre><code>public class Phaser\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/Phaser.html
PriorityBlockingQueue	A										<section class="prog__container"><p> An unbounded blocking queue</p><pre><code>public class PriorityBlockingQueue\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/PriorityBlockingQueue.html
RecursiveAction	A										<section class="prog__container"><p> A recursive resultless <pre><code> ForkJoinTask </code></pre> . This class establishes conventions to parameterize resultless actions as <pre><code> Void </code></pre> <pre><code> ForkJoinTask </code></pre> s. Because <pre><code> null </code></pre> is the only valid value of type <pre><code> Void </code></pre> , methods such as <pre><code> join </code></pre> always return <pre><code> null </code></pre> upon completion. <p> <b> Sample Usages. </b> Here is a simple but complete ForkJoin sort that sorts a given <pre><code> long[] </code></pre> array: <pre> <pre><code>static class SortTask extends RecursiveAction { final long[] array; final int lo, hi; SortTask(long[] array, int lo, int hi) { this.array = array; this.lo = lo; this.hi = hi; } SortTask(long[] array) { this(array, 0, array.length); } protected void compute() { if (hi - lo &lt; THRESHOLD) sortSequentially(lo, hi); else { int mid = (lo + hi) &gt;&gt;&gt; 1; invokeAll(new SortTask(array, lo, mid), new SortTask(array, mid, hi)); merge(lo, mid, hi); } } // implementation details follow: static final int THRESHOLD = 1000; void sortSequentially(int lo, int hi) { Arrays.sort(array, lo, hi); } void merge(int lo, int mid, int hi) { long[] buf = Arrays.copyOfRange(array, lo, mid); for (int i = 0, j = lo, k = mid; i &lt; buf.length; j++) array[j] = (k == hi || buf[i] &lt; array[k]) ? buf[i++] : array[k++]; } }</code></pre></pre> You could then sort <pre><code> anArray </code></pre> by creating <pre><code> new SortTask(anArray) </code></pre> and invoking it in a ForkJoinPool. As a more concrete simple example, the following task increments each element of an array: <pre> <pre><code>class IncrementTask extends RecursiveAction { final long[] array; final int lo, hi; IncrementTask(long[] array, int lo, int hi) { this.array = array; this.lo = lo; this.hi = hi; } protected void compute() { if (hi - lo &lt; THRESHOLD) { for (int i = lo; i &lt; hi; ++i) array[i]++; } else { int mid = (lo + hi) &gt;&gt;&gt; 1; invokeAll(new IncrementTask(array, lo, mid), new IncrementTask(array, mid, hi)); } } }</code></pre></pre> <p> The following example illustrates some refinements and idioms that may lead to better performance: RecursiveActions need not be fully recursive, so long as they maintain the basic divide-and-conquer approach. Here is a class that sums the squares of each element of a double array, by subdividing out only the right-hand-sides of repeated divisions by two, and keeping track of them with a chain of <pre><code> next </code></pre> references. It uses a dynamic threshold based on method <pre><code> getSurplusQueuedTaskCount </code></pre> , but counterbalances potential excess partitioning by directly performing leaf actions on unstolen tasks rather than further subdividing. <pre> <pre><code>double sumOfSquares(ForkJoinPool pool, double[] array) { int n = array.length; Applyer a = new Applyer(array, 0, n, null); pool.invoke(a); return a.result; } class Applyer extends RecursiveAction { final double[] array; final int lo, hi; double result; Applyer next; // keeps track of right-hand-side tasks Applyer(double[] array, int lo, int hi, Applyer next) { this.array = array; this.lo = lo; this.hi = hi; this.next = next; } double atLeaf(int l, int h) { double sum = 0; for (int i = l; i &lt; h; ++i) // perform leftmost base step sum += array[i] * array[i]; return sum; } protected void compute() { int l = lo; int h = hi; Applyer right = null; while (h - l &gt; 1 &amp;&amp; getSurplusQueuedTaskCount() &lt;= 3) { int mid = (l + h) &gt;&gt;&gt; 1; right = new Applyer(array, mid, h, right); right.fork(); h = mid; } double sum = atLeaf(l, h); while (right != null) { if (right.tryUnfork()) // directly calculate if not stolen sum += right.atLeaf(right.lo, right.hi); else { right.join(); sum += right.result; } right = right.next; } result = sum; } }</code></pre></pre> </p><pre><code>public abstract class RecursiveAction\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/RecursiveAction.html
RecursiveTask	A										<section class="prog__container"><p> A recursive result-bearing <pre><code> ForkJoinTask </code></pre> . <p> For a classic example, here is a task computing Fibonacci numbers: <pre> <pre><code>class Fibonacci extends RecursiveTask&lt;Integer&gt; { final int n; Fibonacci(int n) { this.n = n; } protected Integer compute() { if (n &lt;= 1) return n; Fibonacci f1 = new Fibonacci(n - 1); f1.fork(); Fibonacci f2 = new Fibonacci(n - 2); return f2.compute() + f1.join(); } }</code></pre></pre> However, besides being a dumb way to compute Fibonacci functions (there is a simple fast linear algorithm that you'd use in practice), this is likely to perform poorly because the smallest subtasks are too small to be worthwhile splitting up. Instead, as is the case for nearly all fork/join applications, you'd pick some minimum granularity size (for example 10 here) for which you always sequentially solve rather than subdividing. </p><pre><code>public abstract class RecursiveTask\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/RecursiveTask.html
RejectedExecutionException	A										<section class="prog__container"><p> Exception thrown by an <pre><code> Executor </code></pre> when a task cannot be accepted for execution.</p><pre><code>public class RejectedExecutionException\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/RejectedExecutionException.html
RejectedExecutionHandler	A										<section class="prog__container"><p> A handler for tasks that cannot be executed by a <pre><code> ThreadPoolExecutor </code></pre> .</p><pre><code>public interface RejectedExecutionHandler\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/RejectedExecutionHandler.html
RunnableFuture	A										<section class="prog__container"><p> A <pre><code> Future </code></pre> that is <pre><code> Runnable </code></pre> . Successful execution of the <pre><code> run </code></pre> method causes completion of the <pre><code> Future </code></pre> and allows access to its results.</p><pre><code>public interface RunnableFuture\nimplements Runnable, Future&lt;V&gt;</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/RunnableFuture.html
RunnableScheduledFuture	A										<section class="prog__container"><p> A <pre><code> ScheduledFuture </code></pre> that is <pre><code> Runnable </code></pre> . Successful execution of the <pre><code> run </code></pre> method causes completion of the <pre><code> Future </code></pre> and allows access to its results.</p><pre><code>public interface RunnableScheduledFuture\nimplements RunnableFuture&lt;V&gt;, ScheduledFuture&lt;V&gt;</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/RunnableScheduledFuture.html
ScheduledExecutorService	A										<section class="prog__container"><p> An <pre><code> ExecutorService </code></pre> that can schedule commands to run after a given delay, or to execute periodically. <p> The <pre><code> schedule </code></pre> methods create tasks with various delays and return a task object that can be used to cancel or check execution. The <pre><code> scheduleAtFixedRate </code></pre> and <pre><code> scheduleWithFixedDelay </code></pre> methods create and execute tasks that run periodically until cancelled. <p> Commands submitted using the <pre><code> execute(Runnable) </code></pre> and <pre><code> ExecutorService </code></pre> <pre><code> submit </code></pre> methods are scheduled with a requested delay of zero. Zero and negative delays (but not periods) are also allowed in <pre><code> schedule </code></pre> methods, and are treated as requests for immediate execution. <p> All <pre><code> schedule </code></pre> methods accept <em> relative </em> delays and periods as arguments, not absolute times or dates. It is a simple matter to transform an absolute time represented as a <pre><code> Date </code></pre> to the required form. For example, to schedule at a certain future <pre><code> date </code></pre> , you can use: <pre><code> schedule(task, date.getTime() - System.currentTimeMillis(), TimeUnit.MILLISECONDS) </code></pre> . Beware however that expiration of a relative delay need not coincide with the current <pre><code> Date </code></pre> at which the task is enabled due to network time synchronization protocols, clock drift, or other factors. <p> The <pre><code> Executors </code></pre> class provides convenient factory methods for the ScheduledExecutorService implementations provided in this package. </p><pre><code>public interface ScheduledExecutorService\nimplements ExecutorService</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ScheduledExecutorService.html
ScheduledFuture	A										<section class="prog__container"><p> A delayed result-bearing action that can be cancelled. Usually a scheduled future is the result of scheduling a task with a <pre><code> ScheduledExecutorService </code></pre> .</p><pre><code>public interface ScheduledFuture\nimplements Delayed, Future&lt;V&gt;</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ScheduledFuture.html
ScheduledThreadPoolExecutor	A										<section class="prog__container"><p> A <pre><code> ThreadPoolExecutor </code></pre> that can additionally schedule commands to run after a given delay, or to execute periodically. This class is preferable to <pre><code> Timer </code></pre> when multiple worker threads are needed, or when the additional flexibility or capabilities of <pre><code> ThreadPoolExecutor </code></pre> (which this class extends) are required. <p> Delayed tasks execute no sooner than they are enabled, but without any real-time guarantees about when, after they are enabled, they will commence. Tasks scheduled for exactly the same execution time are enabled in first-in-first-out (FIFO) order of submission. <p> When a submitted task is cancelled before it is run, execution is suppressed. By default, such a cancelled task is not automatically removed from the work queue until its delay elapses. While this enables further inspection and monitoring, it may also cause unbounded retention of cancelled tasks. <p> Successive executions of a periodic task scheduled via <pre><code> scheduleAtFixedRate </code></pre> or <pre><code> scheduleWithFixedDelay </code></pre> do not overlap. While different executions may be performed by different threads, the effects of prior executions <i> happen-before </i> those of subsequent ones. <p> While this class inherits from <pre><code> ThreadPoolExecutor </code></pre> , a few of the inherited tuning methods are not useful for it. In particular, because it acts as a fixed-sized pool using <pre><code> corePoolSize </code></pre> threads and an unbounded queue, adjustments to <pre><code> maximumPoolSize </code></pre> have no useful effect. Additionally, it is almost never a good idea to set <pre><code> corePoolSize </code></pre> to zero or use <pre><code> allowCoreThreadTimeOut </code></pre> because this may leave the pool without threads to handle tasks once they become eligible to run. <p> <b> Extension notes: </b> This class overrides the <pre><code> execute </code></pre> and <pre><code> submit </code></pre> methods to generate internal <pre><code> ScheduledFuture </code></pre> objects to control per-task delays and scheduling. To preserve functionality, any further overrides of these methods in subclasses must invoke superclass versions, which effectively disables additional task customization. However, this class provides alternative protected extension method <pre><code> decorateTask </code></pre> (one version each for <pre><code> Runnable </code></pre> and <pre><code> Callable </code></pre> ) that can be used to customize the concrete task types used to execute commands entered via <pre><code> execute </code></pre> , <pre><code> submit </code></pre> , <pre><code> schedule </code></pre> , <pre><code> scheduleAtFixedRate </code></pre> , and <pre><code> scheduleWithFixedDelay </code></pre> . By default, a <pre><code> ScheduledThreadPoolExecutor </code></pre> uses a task type extending <pre><code> FutureTask </code></pre> . However, this may be modified or replaced using subclasses of the form: <pre> <pre><code>public class CustomScheduledExecutor extends ScheduledThreadPoolExecutor { static class CustomTask&lt;V&gt; implements RunnableScheduledFuture&lt;V&gt; { ... } protected &lt;V&gt; RunnableScheduledFuture&lt;V&gt; decorateTask( Runnable r, RunnableScheduledFuture&lt;V&gt; task) { return new CustomTask&lt;V&gt;(r, task); } protected &lt;V&gt; RunnableScheduledFuture&lt;V&gt; decorateTask( Callable&lt;V&gt; c, RunnableScheduledFuture&lt;V&gt; task) { return new CustomTask&lt;V&gt;(c, task); } // ... add constructors, etc. }</code></pre></pre> </p><pre><code>public class ScheduledThreadPoolExecutor\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ScheduledThreadPoolExecutor.html
Semaphore	A										<section class="prog__container"><p> A counting semaphore. Conceptually, a semaphore maintains a set of permits. Each <pre><code> acquire() </code></pre> blocks if necessary until a permit is available, and then takes it. Each <pre><code> release() </code></pre> adds a permit, potentially releasing a blocking acquirer. However, no actual permit objects are used; the <pre><code> Semaphore </code></pre> just keeps a count of the number available and acts accordingly. <p> Semaphores are often used to restrict the number of threads than can access some (physical or logical) resource. For example, here is a class that uses a semaphore to control access to a pool of items: <pre> <pre><code>class Pool { private static final int MAX_AVAILABLE = 100; private final Semaphore available = new Semaphore(MAX_AVAILABLE, true); public Object getItem() throws InterruptedException { available.acquire(); return getNextAvailableItem(); } public void putItem(Object x) { if (markAsUnused(x)) available.release(); } // Not a particularly efficient data structure; just for demo protected Object[] items = ... whatever kinds of items being managed protected boolean[] used = new boolean[MAX_AVAILABLE]; protected synchronized Object getNextAvailableItem() { for (int i = 0; i &lt; MAX_AVAILABLE; ++i) { if (!used[i]) { used[i] = true; return items[i]; } } return null; // not reached } protected synchronized boolean markAsUnused(Object item) { for (int i = 0; i &lt; MAX_AVAILABLE; ++i) { if (item == items[i]) { if (used[i]) { used[i] = false; return true; } else return false; } } return false; } }</code></pre></pre> <p> Before obtaining an item each thread must acquire a permit from the semaphore, guaranteeing that an item is available for use. When the thread has finished with the item it is returned back to the pool and a permit is returned to the semaphore, allowing another thread to acquire that item. Note that no synchronization lock is held when <pre><code> acquire() </code></pre> is called as that would prevent an item from being returned to the pool. The semaphore encapsulates the synchronization needed to restrict access to the pool, separately from any synchronization needed to maintain the consistency of the pool itself. <p> A semaphore initialized to one, and which is used such that it only has at most one permit available, can serve as a mutual exclusion lock. This is more commonly known as a <em> binary semaphore </em> , because it only has two states: one permit available, or zero permits available. When used in this way, the binary semaphore has the property (unlike many <pre><code> Lock </code></pre> implementations), that the "lock" can be released by a thread other than the owner (as semaphores have no notion of ownership). This can be useful in some specialized contexts, such as deadlock recovery. <p> The constructor for this class optionally accepts a <em> fairness </em> parameter. When set false, this class makes no guarantees about the order in which threads acquire permits. In particular, <em> barging </em> is permitted, that is, a thread invoking <pre><code> acquire() </code></pre> can be allocated a permit ahead of a thread that has been waiting - logically the new thread places itself at the head of the queue of waiting threads. When fairness is set true, the semaphore guarantees that threads invoking any of the <pre><code> acquire </code></pre> methods are selected to obtain permits in the order in which their invocation of those methods was processed (first-in-first-out; FIFO). Note that FIFO ordering necessarily applies to specific internal points of execution within these methods. So, it is possible for one thread to invoke <pre><code> acquire </code></pre> before another, but reach the ordering point after the other, and similarly upon return from the method. Also note that the untimed <pre><code> tryAcquire </code></pre> methods do not honor the fairness setting, but will take any permits that are available. <p> Generally, semaphores used to control resource access should be initialized as fair, to ensure that no thread is starved out from accessing a resource. When using semaphores for other kinds of synchronization control, the throughput advantages of non-fair ordering often outweigh fairness considerations. <p> This class also provides convenience methods to <pre><code> acquire </code></pre> and <pre><code> release </code></pre> multiple permits at a time. These methods are generally more efficient and effective than loops. However, they do not establish any preference order. For example, if thread A invokes <pre><code> s.acquire(3 </code></pre> ) and thread B invokes <pre><code> s.acquire(2) </code></pre> , and two permits become available, then there is no guarantee that thread B will obtain them unless its acquire came first and Semaphore <pre><code> s </code></pre> is in fair mode. <p> Memory consistency effects: Actions in a thread prior to calling a "release" method such as <pre><code> release() </code></pre> <i> happen-before </i> actions following a successful "acquire" method such as <pre><code> acquire() </code></pre> in another thread. </p><pre><code>public class Semaphore\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/Semaphore.html
SynchronousQueue	A										<section class="prog__container"><p> A blocking queue</p><pre><code>public class SynchronousQueue\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/SynchronousQueue.html
ThreadFactory	A										<section class="prog__container"><p> An object that creates new threads on demand. Using thread factories removes hardwiring of calls to <pre><code> new Thread </code></pre> , enabling applications to use special thread subclasses, priorities, etc. <p> The simplest implementation of this interface is just: <pre> <pre><code>class SimpleThreadFactory implements ThreadFactory { public Thread newThread(Runnable r) { return new Thread(r); } }</code></pre></pre> The <pre><code> defaultThreadFactory() </code></pre> method provides a more useful simple implementation, that sets the created thread context to known values before returning it. </p><pre><code>public interface ThreadFactory\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ThreadFactory.html
ThreadLocalRandom	A										<section class="prog__container"><p> A random number generator isolated to the current thread. Like the global <pre><code> Random </code></pre> generator used by the <pre><code> Math </code></pre> class, a <pre><code> ThreadLocalRandom </code></pre> is initialized with an internally generated seed that may not otherwise be modified. When applicable, use of <pre><code> ThreadLocalRandom </code></pre> rather than shared <pre><code> Random </code></pre> objects in concurrent programs will typically encounter much less overhead and contention. Use of <pre><code> ThreadLocalRandom </code></pre> is particularly appropriate when multiple tasks (for example, each a <pre><code> ForkJoinTask </code></pre> ) use random numbers in parallel in thread pools. <p> Usages of this class should typically be of the form: <pre><code> ThreadLocalRandom.current().nextX(...) </code></pre> (where <pre><code> X </code></pre> is <pre><code> Int </code></pre> , <pre><code> Long </code></pre> , etc). When all usages are of this form, it is never possible to accidently share a <pre><code> ThreadLocalRandom </code></pre> across multiple threads. <p> This class also provides additional commonly used bounded random generation methods. <p> Instances of <pre><code> ThreadLocalRandom </code></pre> are not cryptographically secure. Consider instead using <pre><code> SecureRandom </code></pre> in security-sensitive applications. Additionally, default-constructed instances do not use a cryptographically random seed unless the system property </p><pre><code>public class ThreadLocalRandom\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ThreadLocalRandom.html
ThreadPoolExecutor.AbortPolicy	A										<section class="prog__container"><p> A handler for rejected tasks that throws a <pre><code> RejectedExecutionException </code></pre> .</p><pre><code>public static class ThreadPoolExecutor.AbortPolicy\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor.AbortPolicy.html
ThreadPoolExecutor.CallerRunsPolicy	A										<section class="prog__container"><p> A handler for rejected tasks that runs the rejected task directly in the calling thread of the <pre><code> execute </code></pre> method, unless the executor has been shut down, in which case the task is discarded.</p><pre><code>public static class ThreadPoolExecutor.CallerRunsPolicy\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor.CallerRunsPolicy.html
ThreadPoolExecutor.DiscardOldestPolicy	A										<section class="prog__container"><p> A handler for rejected tasks that discards the oldest unhandled request and then retries <pre><code> execute </code></pre> , unless the executor is shut down, in which case the task is discarded.</p><pre><code>public static class ThreadPoolExecutor.DiscardOldestPolicy\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor.DiscardOldestPolicy.html
ThreadPoolExecutor.DiscardPolicy	A										<section class="prog__container"><p> A handler for rejected tasks that silently discards the rejected task.</p><pre><code>public static class ThreadPoolExecutor.DiscardPolicy\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor.DiscardPolicy.html
ThreadPoolExecutor	A										<section class="prog__container"><p> An <pre><code> ExecutorService </code></pre> that executes each submitted task using one of possibly several pooled threads, normally configured using <pre><code> Executors </code></pre> factory methods. <p> Thread pools address two different problems: they usually provide improved performance when executing large numbers of asynchronous tasks, due to reduced per-task invocation overhead, and they provide a means of bounding and managing the resources, including threads, consumed when executing a collection of tasks. Each <pre><code> ThreadPoolExecutor </code></pre> also maintains some basic statistics, such as the number of completed tasks. <p> To be useful across a wide range of contexts, this class provides many adjustable parameters and extensibility hooks. However, programmers are urged to use the more convenient <pre><code> Executors </code></pre> factory methods <pre><code> newCachedThreadPool() </code></pre> (unbounded thread pool, with automatic thread reclamation), <pre><code> newFixedThreadPool(int) </code></pre> (fixed size thread pool) and <pre><code> newSingleThreadExecutor() </code></pre> (single background thread), that preconfigure settings for the most common usage scenarios. Otherwise, use the following guide when manually configuring and tuning this class: <dl> <dt> Core and maximum pool sizes </dt> <dd style="font-family:'DejaVu Sans', Arial, Helvetica, sans-serif"> A <pre><code> ThreadPoolExecutor </code></pre> will automatically adjust the pool size (see <pre><code> getPoolSize() </code></pre> ) according to the bounds set by corePoolSize (see <pre><code> getCorePoolSize() </code></pre> ) and maximumPoolSize (see <pre><code> getMaximumPoolSize() </code></pre> ). When a new task is submitted in method <pre><code> execute(Runnable) </code></pre> , and fewer than corePoolSize threads are running, a new thread is created to handle the request, even if other worker threads are idle. If there are more than corePoolSize but less than maximumPoolSize threads running, a new thread will be created only if the queue is full. By setting corePoolSize and maximumPoolSize the same, you create a fixed-size thread pool. By setting maximumPoolSize to an essentially unbounded value such as <pre><code> Integer.MAX_VALUE </code></pre> , you allow the pool to accommodate an arbitrary number of concurrent tasks. Most typically, core and maximum pool sizes are set only upon construction, but they may also be changed dynamically using <pre><code> setCorePoolSize(int) </code></pre> and <pre><code> setMaximumPoolSize(int) </code></pre> . </dd> <dt> On-demand construction </dt> <dd style="font-family:'DejaVu Sans', Arial, Helvetica, sans-serif"> By default, even core threads are initially created and started only when new tasks arrive, but this can be overridden dynamically using method <pre><code> prestartCoreThread() </code></pre> or <pre><code> prestartAllCoreThreads() </code></pre> . You probably want to prestart threads if you construct the pool with a non-empty queue. </dd> <dt> Creating new threads </dt> <dd style="font-family:'DejaVu Sans', Arial, Helvetica, sans-serif"> New threads are created using a <pre><code> ThreadFactory </code></pre> . If not otherwise specified, a <pre><code> defaultThreadFactory() </code></pre> is used, that creates threads to all be in the same <pre><code> ThreadGroup </code></pre> and with the same <pre><code> NORM_PRIORITY </code></pre> priority and non-daemon status. By supplying a different ThreadFactory, you can alter the thread's name, thread group, priority, daemon status, etc. If a <pre><code> ThreadFactory </code></pre> fails to create a thread when asked by returning null from <pre><code> newThread </code></pre> , the executor will continue, but might not be able to execute any tasks. Threads should possess the "modifyThread" <pre><code> RuntimePermission </code></pre> . If worker threads or other threads using the pool do not possess this permission, service may be degraded: configuration changes may not take effect in a timely manner, and a shutdown pool may remain in a state in which termination is possible but not completed. </dd> <dt> Keep-alive times </dt> <dd style="font-family:'DejaVu Sans', Arial, Helvetica, sans-serif"> If the pool currently has more than corePoolSize threads, excess threads will be terminated if they have been idle for more than the keepAliveTime (see <pre><code> getKeepAliveTime(TimeUnit) </code></pre> ). This provides a means of reducing resource consumption when the pool is not being actively used. If the pool becomes more active later, new threads will be constructed. This parameter can also be changed dynamically using method <pre><code> setKeepAliveTime(long, TimeUnit) </code></pre> . Using a value of <pre><code> Long.MAX_VALUE </code></pre> <pre><code> NANOSECONDS </code></pre> effectively disables idle threads from ever terminating prior to shut down. By default, the keep-alive policy applies only when there are more than corePoolSize threads, but method <pre><code> allowCoreThreadTimeOut(boolean) </code></pre> can be used to apply this time-out policy to core threads as well, so long as the keepAliveTime value is non-zero. </dd> <dt> Queuing </dt> <dd style="font-family:'DejaVu Sans', Arial, Helvetica, sans-serif"> Any <pre><code> BlockingQueue </code></pre> may be used to transfer and hold submitted tasks. The use of this queue interacts with pool sizing: <ul> <li> If fewer than corePoolSize threads are running, the Executor always prefers adding a new thread rather than queuing. <li> If corePoolSize or more threads are running, the Executor always prefers queuing a request rather than adding a new thread. <li> If a request cannot be queued, a new thread is created unless this would exceed maximumPoolSize, in which case, the task will be rejected. </li> </li> </li> </ul> There are three general strategies for queuing: <ol> <li> <em> Direct handoffs. </em> A good default choice for a work queue is a <pre><code> SynchronousQueue </code></pre> that hands off tasks to threads without otherwise holding them. Here, an attempt to queue a task will fail if no threads are immediately available to run it, so a new thread will be constructed. This policy avoids lockups when handling sets of requests that might have internal dependencies. Direct handoffs generally require unbounded maximumPoolSizes to avoid rejection of new submitted tasks. This in turn admits the possibility of unbounded thread growth when commands continue to arrive on average faster than they can be processed. <li> <em> Unbounded queues. </em> Using an unbounded queue (for example a <pre><code> LinkedBlockingQueue </code></pre> without a predefined capacity) will cause new tasks to wait in the queue when all corePoolSize threads are busy. Thus, no more than corePoolSize threads will ever be created. (And the value of the maximumPoolSize therefore doesn't have any effect.) This may be appropriate when each task is completely independent of others, so tasks cannot affect each others execution; for example, in a web page server. While this style of queuing can be useful in smoothing out transient bursts of requests, it admits the possibility of unbounded work queue growth when commands continue to arrive on average faster than they can be processed. <li> <em> Bounded queues. </em> A bounded queue (for example, an <pre><code> ArrayBlockingQueue </code></pre> ) helps prevent resource exhaustion when used with finite maximumPoolSizes, but can be more difficult to tune and control. Queue sizes and maximum pool sizes may be traded off for each other: Using large queues and small pools minimizes CPU usage, OS resources, and context-switching overhead, but can lead to artificially low throughput. If tasks frequently block (for example if they are I/O bound), a system may be able to schedule time for more threads than you otherwise allow. Use of small queues generally requires larger pool sizes, which keeps CPUs busier but may encounter unacceptable scheduling overhead, which also decreases throughput. </li> </li> </li> </ol> </dd> <dt> Rejected tasks </dt> <dd style="font-family:'DejaVu Sans', Arial, Helvetica, sans-serif"> New tasks submitted in method <pre><code> execute(Runnable) </code></pre> will be <em> rejected </em> when the Executor has been shut down, and also when the Executor uses finite bounds for both maximum threads and work queue capacity, and is saturated. In either case, the <pre><code> execute </code></pre> method invokes the <pre><code> rejectedExecution(Runnable, ThreadPoolExecutor) </code></pre> method of its <pre><code> RejectedExecutionHandler </code></pre> . Four predefined handler policies are provided: <ol> <li> In the default <pre><code> ThreadPoolExecutor.AbortPolicy </code></pre> , the handler throws a runtime <pre><code> RejectedExecutionException </code></pre> upon rejection. <li> In <pre><code> ThreadPoolExecutor.CallerRunsPolicy </code></pre> , the thread that invokes <pre><code> execute </code></pre> itself runs the task. This provides a simple feedback control mechanism that will slow down the rate that new tasks are submitted. <li> In <pre><code> ThreadPoolExecutor.DiscardPolicy </code></pre> , a task that cannot be executed is simply dropped. <li> In <pre><code> ThreadPoolExecutor.DiscardOldestPolicy </code></pre> , if the executor is not shut down, the task at the head of the work queue is dropped, and then execution is retried (which can fail again, causing this to be repeated.) </li> </li> </li> </li> </ol> It is possible to define and use other kinds of <pre><code> RejectedExecutionHandler </code></pre> classes. Doing so requires some care especially when policies are designed to work only under particular capacity or queuing policies. </dd> <dt> Hook methods </dt> <dd style="font-family:'DejaVu Sans', Arial, Helvetica, sans-serif"> This class provides <pre><code> protected </code></pre> overridable <pre><code> beforeExecute(Thread, Runnable) </code></pre> and <pre><code> afterExecute(Runnable, Throwable) </code></pre> methods that are called before and after execution of each task. These can be used to manipulate the execution environment; for example, reinitializing ThreadLocals, gathering statistics, or adding log entries. Additionally, method <pre><code> terminated() </code></pre> can be overridden to perform any special processing that needs to be done once the Executor has fully terminated. <p> If hook, callback, or BlockingQueue methods throw exceptions, internal worker threads may in turn fail, abruptly terminate, and possibly be replaced. </p><pre><code>public class ThreadPoolExecutor\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor.html
TimeoutException	A										<section class="prog__container"><p> Exception thrown when a blocking operation times out. Blocking operations for which a timeout is specified need a means to indicate that the timeout has occurred. For many such operations it is possible to return a value that indicates timeout; when that is not possible or desirable then <pre><code> TimeoutException </code></pre> should be declared and thrown.</p><pre><code>public class TimeoutException\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/TimeoutException.html
TimeUnit	A										<section class="prog__container"><p> A <pre><code> TimeUnit </code></pre> represents time durations at a given unit of granularity and provides utility methods to convert across units, and to perform timing and delay operations in these units. A <pre><code> TimeUnit </code></pre> does not maintain time information, but only helps organize and use time representations that may be maintained separately across various contexts. A nanosecond is defined as one thousandth of a microsecond, a microsecond as one thousandth of a millisecond, a millisecond as one thousandth of a second, a minute as sixty seconds, an hour as sixty minutes, and a day as twenty four hours. <p> A <pre><code> TimeUnit </code></pre> is mainly used to inform time-based methods how a given timing parameter should be interpreted. For example, the following code will timeout in 50 milliseconds if the <pre><code> lock </code></pre> is not available: <pre> <pre><code>Lock lock = ...; if (lock.tryLock(50L, TimeUnit.MILLISECONDS)) ...</code></pre></pre> while this code will timeout in 50 seconds: <pre> <pre><code>Lock lock = ...; if (lock.tryLock(50L, TimeUnit.SECONDS)) ...</code></pre></pre> Note however, that there is no guarantee that a particular timeout implementation will be able to notice the passage of time at the same granularity as the given <pre><code> TimeUnit </code></pre> . </p><pre><code>public enum TimeUnit\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/TimeUnit.html
TransferQueue	A										<section class="prog__container"><p> A <pre><code> BlockingQueue </code></pre> in which producers may wait for consumers to receive elements. A <pre><code> TransferQueue </code></pre> may be useful for example in message passing applications in which producers sometimes (using method <pre><code> transfer(E) </code></pre> ) await receipt of elements by consumers invoking <pre><code> take </code></pre> or <pre><code> poll </code></pre> , while at other times enqueue elements (via method <pre><code> put </code></pre> ) without waiting for receipt. Non-blocking</p><pre><code>public interface TransferQueue\nimplements BlockingQueue&lt;E&gt;</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/TransferQueue.html
AtomicBoolean	A										<section class="prog__container"><p> A <pre><code> boolean </code></pre> value that may be updated atomically. See the <pre><code> java.util.concurrent.atomic </code></pre> package specification for description of the properties of atomic variables. An <pre><code> AtomicBoolean </code></pre> is used in applications such as atomically updated flags, and cannot be used as a replacement for a <pre><code> Boolean </code></pre> .</p><pre><code>public class AtomicBoolean\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/atomic/AtomicBoolean.html
AtomicInteger	A										<section class="prog__container"><p> An <pre><code> int </code></pre> value that may be updated atomically. See the <pre><code> java.util.concurrent.atomic </code></pre> package specification for description of the properties of atomic variables. An <pre><code> AtomicInteger </code></pre> is used in applications such as atomically incremented counters, and cannot be used as a replacement for an <pre><code> Integer </code></pre> . However, this class does extend <pre><code> Number </code></pre> to allow uniform access by tools and utilities that deal with numerically-based classes.</p><pre><code>public class AtomicInteger\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/atomic/AtomicInteger.html
AtomicIntegerArray	A										<section class="prog__container"><p> An <pre><code> int </code></pre> array in which elements may be updated atomically. See the <pre><code> java.util.concurrent.atomic </code></pre> package specification for description of the properties of atomic variables.</p><pre><code>public class AtomicIntegerArray\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerArray.html
AtomicIntegerFieldUpdater	A										<section class="prog__container"><p> A reflection-based utility that enables atomic updates to designated <pre><code> volatile int </code></pre> fields of designated classes. This class is designed for use in atomic data structures in which several fields of the same node are independently subject to atomic updates. <p> Note that the guarantees of the <pre><code> compareAndSet </code></pre> method in this class are weaker than in other atomic classes. Because this class cannot ensure that all uses of the field are appropriate for purposes of atomic access, it can guarantee atomicity only with respect to other invocations of <pre><code> compareAndSet </code></pre> and <pre><code> set </code></pre> on the same updater. </p><pre><code>public abstract class AtomicIntegerFieldUpdater\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html
AtomicLong	A										<section class="prog__container"><p> A <pre><code> long </code></pre> value that may be updated atomically. See the <pre><code> java.util.concurrent.atomic </code></pre> package specification for description of the properties of atomic variables. An <pre><code> AtomicLong </code></pre> is used in applications such as atomically incremented sequence numbers, and cannot be used as a replacement for a <pre><code> Long </code></pre> . However, this class does extend <pre><code> Number </code></pre> to allow uniform access by tools and utilities that deal with numerically-based classes.</p><pre><code>public class AtomicLong\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLong.html
AtomicLongArray	A										<section class="prog__container"><p> A <pre><code> long </code></pre> array in which elements may be updated atomically. See the <pre><code> java.util.concurrent.atomic </code></pre> package specification for description of the properties of atomic variables.</p><pre><code>public class AtomicLongArray\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongArray.html
AtomicLongFieldUpdater	A										<section class="prog__container"><p> A reflection-based utility that enables atomic updates to designated <pre><code> volatile long </code></pre> fields of designated classes. This class is designed for use in atomic data structures in which several fields of the same node are independently subject to atomic updates. <p> Note that the guarantees of the <pre><code> compareAndSet </code></pre> method in this class are weaker than in other atomic classes. Because this class cannot ensure that all uses of the field are appropriate for purposes of atomic access, it can guarantee atomicity only with respect to other invocations of <pre><code> compareAndSet </code></pre> and <pre><code> set </code></pre> on the same updater. </p><pre><code>public abstract class AtomicLongFieldUpdater\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/atomic/AtomicLongFieldUpdater.html
AtomicMarkableReference	A										<section class="prog__container"><p> An <pre><code> AtomicMarkableReference </code></pre> maintains an object reference along with a mark bit, that can be updated atomically. <p> Implementation note: This implementation maintains markable references by creating internal objects representing "boxed" [reference, boolean] pairs. </p><pre><code>public class AtomicMarkableReference\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/atomic/AtomicMarkableReference.html
AtomicReference	A										<section class="prog__container"><p> An object reference that may be updated atomically. See the <pre><code> java.util.concurrent.atomic </code></pre> package specification for description of the properties of atomic variables.</p><pre><code>public class AtomicReference\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/atomic/AtomicReference.html
AtomicReferenceArray	A										<section class="prog__container"><p> An array of object references in which elements may be updated atomically. See the <pre><code> java.util.concurrent.atomic </code></pre> package specification for description of the properties of atomic variables.</p><pre><code>public class AtomicReferenceArray\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/atomic/AtomicReferenceArray.html
AtomicReferenceFieldUpdater	A										<section class="prog__container"><p> A reflection-based utility that enables atomic updates to designated <pre><code> volatile </code></pre> reference fields of designated classes. This class is designed for use in atomic data structures in which several reference fields of the same node are independently subject to atomic updates. For example, a tree node might be declared as <pre> <pre><code>class Node { private volatile Node left, right; private static final AtomicReferenceFieldUpdater&lt;Node, Node&gt; leftUpdater = AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, "left"); private static AtomicReferenceFieldUpdater&lt;Node, Node&gt; rightUpdater = AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, "right"); Node getLeft() { return left; } boolean compareAndSetLeft(Node expect, Node update) { return leftUpdater.compareAndSet(this, expect, update); } // ... and so on }</code></pre></pre> <p> Note that the guarantees of the <pre><code> compareAndSet </code></pre> method in this class are weaker than in other atomic classes. Because this class cannot ensure that all uses of the field are appropriate for purposes of atomic access, it can guarantee atomicity only with respect to other invocations of <pre><code> compareAndSet </code></pre> and <pre><code> set </code></pre> on the same updater. </p><pre><code>public abstract class AtomicReferenceFieldUpdater\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.html
AtomicStampedReference	A										<section class="prog__container"><p> An <pre><code> AtomicStampedReference </code></pre> maintains an object reference along with an integer "stamp", that can be updated atomically. <p> Implementation note: This implementation maintains stamped references by creating internal objects representing "boxed" [reference, integer] pairs. </p><pre><code>public class AtomicStampedReference\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/atomic/AtomicStampedReference.html
DoubleAccumulator	A										<section class="prog__container"><p> One or more variables that together maintain a running <pre><code> double </code></pre> value updated using a supplied function. When updates (method <pre><code> accumulate(double) </code></pre> ) are contended across threads, the set of variables may grow dynamically to reduce contention. Method <pre><code> get() </code></pre> (or, equivalently, <pre><code> doubleValue() </code></pre> ) returns the current value across the variables maintaining updates. <p> This class is usually preferable to alternatives when multiple threads update a common value that is used for purposes such as summary statistics that are frequently updated but less frequently read. <p> The supplied accumulator function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value as its first argument, and the given update as the second argument. For example, to maintain a running maximum value, you could supply <pre><code> Double::max </code></pre> along with <pre><code> Double.NEGATIVE_INFINITY </code></pre> as the identity. The order of accumulation within or across threads is not guaranteed. Thus, this class may not be applicable if numerical stability is required, especially when combining values of substantially different orders of magnitude. <p> Class <pre><code> DoubleAdder </code></pre> provides analogs of the functionality of this class for the common special case of maintaining sums. The call <pre><code> new DoubleAdder() </code></pre> is equivalent to <pre><code> new DoubleAccumulator((x, y) -&gt; x + y, 0.0) </code></pre> . <p> This class extends <pre><code> Number </code></pre> , but does <em> not </em> define methods such as <pre><code> equals </code></pre> , <pre><code> hashCode </code></pre> and <pre><code> compareTo </code></pre> because instances are expected to be mutated, and so are not useful as collection keys. </p><pre><code>public class DoubleAccumulator\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/atomic/DoubleAccumulator.html
DoubleAdder	A										<section class="prog__container"><p> One or more variables that together maintain an initially zero <pre><code> double </code></pre> sum. When updates (method <pre><code> add(double) </code></pre> ) are contended across threads, the set of variables may grow dynamically to reduce contention. Method <pre><code> sum() </code></pre> (or, equivalently <pre><code> doubleValue() </code></pre> ) returns the current total combined across the variables maintaining the sum. The order of accumulation within or across threads is not guaranteed. Thus, this class may not be applicable if numerical stability is required, especially when combining values of substantially different orders of magnitude. <p> This class is usually preferable to alternatives when multiple threads update a common value that is used for purposes such as summary statistics that are frequently updated but less frequently read. <p> This class extends <pre><code> Number </code></pre> , but does <em> not </em> define methods such as <pre><code> equals </code></pre> , <pre><code> hashCode </code></pre> and <pre><code> compareTo </code></pre> because instances are expected to be mutated, and so are not useful as collection keys. </p><pre><code>public class DoubleAdder\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/atomic/DoubleAdder.html
LongAccumulator	A										<section class="prog__container"><p> One or more variables that together maintain a running <pre><code> long </code></pre> value updated using a supplied function. When updates (method <pre><code> accumulate(long) </code></pre> ) are contended across threads, the set of variables may grow dynamically to reduce contention. Method <pre><code> get() </code></pre> (or, equivalently, <pre><code> longValue() </code></pre> ) returns the current value across the variables maintaining updates. <p> This class is usually preferable to <pre><code> AtomicLong </code></pre> when multiple threads update a common value that is used for purposes such as collecting statistics, not for fine-grained synchronization control. Under low update contention, the two classes have similar characteristics. But under high contention, expected throughput of this class is significantly higher, at the expense of higher space consumption. <p> The order of accumulation within or across threads is not guaranteed and cannot be depended upon, so this class is only applicable to functions for which the order of accumulation does not matter. The supplied accumulator function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value as its first argument, and the given update as the second argument. For example, to maintain a running maximum value, you could supply <pre><code> Long::max </code></pre> along with <pre><code> Long.MIN_VALUE </code></pre> as the identity. <p> Class <pre><code> LongAdder </code></pre> provides analogs of the functionality of this class for the common special case of maintaining counts and sums. The call <pre><code> new LongAdder() </code></pre> is equivalent to <pre><code> new LongAccumulator((x, y) -&gt; x + y, 0L </code></pre> . <p> This class extends <pre><code> Number </code></pre> , but does <em> not </em> define methods such as <pre><code> equals </code></pre> , <pre><code> hashCode </code></pre> and <pre><code> compareTo </code></pre> because instances are expected to be mutated, and so are not useful as collection keys. </p><pre><code>public class LongAccumulator\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/atomic/LongAccumulator.html
LongAdder	A										<section class="prog__container"><p> One or more variables that together maintain an initially zero <pre><code> long </code></pre> sum. When updates (method <pre><code> add(long) </code></pre> ) are contended across threads, the set of variables may grow dynamically to reduce contention. Method <pre><code> sum() </code></pre> (or, equivalently, <pre><code> longValue() </code></pre> ) returns the current total combined across the variables maintaining the sum. <p> This class is usually preferable to <pre><code> AtomicLong </code></pre> when multiple threads update a common sum that is used for purposes such as collecting statistics, not for fine-grained synchronization control. Under low update contention, the two classes have similar characteristics. But under high contention, expected throughput of this class is significantly higher, at the expense of higher space consumption. <p> LongAdders can be used with a <pre><code> ConcurrentHashMap </code></pre> to maintain a scalable frequency map (a form of histogram or multiset). For example, to add a count to a <pre><code> ConcurrentHashMap&lt;String,LongAdder&gt; freqs </code></pre> , initializing if not already present, you can use <pre><code> freqs.computeIfAbsent(key, k -&gt; new LongAdder()).increment(); </code></pre> <p> This class extends <pre><code> Number </code></pre> , but does <em> not </em> define methods such as <pre><code> equals </code></pre> , <pre><code> hashCode </code></pre> and <pre><code> compareTo </code></pre> because instances are expected to be mutated, and so are not useful as collection keys. </p><pre><code>public class LongAdder\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/atomic/LongAdder.html
java.util.concurrent.atomic	A										<section class="prog__container">This method (which varies in argument types across different classes) atomically sets a variable to the</section>	https://developer.android.com/reference/java/util/concurrent/atomic/package-summary.html
AbstractOwnableSynchronizer	A										<section class="prog__container"><p> A synchronizer that may be exclusively owned by a thread. This class provides a basis for creating locks and related synchronizers that may entail a notion of ownership. The <pre><code> AbstractOwnableSynchronizer </code></pre> class itself does not manage or use this information. However, subclasses and tools may use appropriately maintained values to help control and monitor access and provide diagnostics.</p><pre><code>public abstract class AbstractOwnableSynchronizer\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/locks/AbstractOwnableSynchronizer.html
AbstractQueuedLongSynchronizer.ConditionObject	A										<section class="prog__container"><p> Condition implementation for a <pre><code> AbstractQueuedLongSynchronizer </code></pre> serving as the basis of a <pre><code> Lock </code></pre> implementation. <p> Method documentation for this class describes mechanics, not behavioral specifications from the point of view of Lock and Condition users. Exported versions of this class will in general need to be accompanied by documentation describing condition semantics that rely on those of the associated <pre><code> AbstractQueuedLongSynchronizer </code></pre> . <p> This class is Serializable, but all fields are transient, so deserialized conditions have no waiters. </p><pre><code>public class AbstractQueuedLongSynchronizer.ConditionObject\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.ConditionObject.html
AbstractQueuedLongSynchronizer	A										<section class="prog__container"><p> A version of <pre><code> AbstractQueuedSynchronizer </code></pre> in which synchronization state is maintained as a <pre><code> long </code></pre> . This class has exactly the same structure, properties, and methods as <pre><code> AbstractQueuedSynchronizer </code></pre> with the exception that all state-related parameters and results are defined as <pre><code> long </code></pre> rather than <pre><code> int </code></pre> . This class may be useful when creating synchronizers such as multilevel locks and barriers that require 64 bits of state. <p> See <pre><code> AbstractQueuedSynchronizer </code></pre> for usage notes and examples. </p><pre><code>public abstract class AbstractQueuedLongSynchronizer\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html
AbstractQueuedSynchronizer.ConditionObject	A										<section class="prog__container"><p> Condition implementation for a <pre><code> AbstractQueuedSynchronizer </code></pre> serving as the basis of a <pre><code> Lock </code></pre> implementation. <p> Method documentation for this class describes mechanics, not behavioral specifications from the point of view of Lock and Condition users. Exported versions of this class will in general need to be accompanied by documentation describing condition semantics that rely on those of the associated <pre><code> AbstractQueuedSynchronizer </code></pre> . <p> This class is Serializable, but all fields are transient, so deserialized conditions have no waiters. </p><pre><code>public class AbstractQueuedSynchronizer.ConditionObject\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.ConditionObject.html
AbstractQueuedSynchronizer	A										<section class="prog__container"><p> Provides a framework for implementing blocking locks and related synchronizers (semaphores, events, etc) that rely on first-in-first-out (FIFO) wait queues. This class is designed to be a useful basis for most kinds of synchronizers that rely on a single atomic <pre><code> int </code></pre> value to represent state. Subclasses must define the protected methods that change this state, and which define what that state means in terms of this object being acquired or released. Given these, the other methods in this class carry out all queuing and blocking mechanics. Subclasses can maintain other state fields, but only the atomically updated <pre><code> int </code></pre> value manipulated using methods <pre><code> getState() </code></pre> , <pre><code> setState(int) </code></pre> and <pre><code> compareAndSetState(int, int) </code></pre> is tracked with respect to synchronization. <p> Subclasses should be defined as non-public internal helper classes that are used to implement the synchronization properties of their enclosing class. Class <pre><code> AbstractQueuedSynchronizer </code></pre> does not implement any synchronization interface. Instead it defines methods such as <pre><code> acquireInterruptibly(int) </code></pre> that can be invoked as appropriate by concrete locks and related synchronizers to implement their public methods. <p> This class supports either or both a default <em> exclusive </em> mode and a <em> shared </em> mode. When acquired in exclusive mode, attempted acquires by other threads cannot succeed. Shared mode acquires by multiple threads may (but need not) succeed. This class does not "understand" these differences except in the mechanical sense that when a shared mode acquire succeeds, the next waiting thread (if one exists) must also determine whether it can acquire as well. Threads waiting in the different modes share the same FIFO queue. Usually, implementation subclasses support only one of these modes, but both can come into play for example in a <pre><code> ReadWriteLock </code></pre> . Subclasses that support only exclusive or only shared modes need not define the methods supporting the unused mode. <p> This class defines a nested <pre><code> AbstractQueuedSynchronizer.ConditionObject </code></pre> class that can be used as a <pre><code> Condition </code></pre> implementation by subclasses supporting exclusive mode for which method <pre><code> isHeldExclusively() </code></pre> reports whether synchronization is exclusively held with respect to the current thread, method <pre><code> release(int) </code></pre> invoked with the current <pre><code> getState() </code></pre> value fully releases this object, and <pre><code> acquire(int) </code></pre> , given this saved state value, eventually restores this object to its previous acquired state. No <pre><code> AbstractQueuedSynchronizer </code></pre> method otherwise creates such a condition, so if this constraint cannot be met, do not use it. The behavior of <pre><code> AbstractQueuedSynchronizer.ConditionObject </code></pre> depends of course on the semantics of its synchronizer implementation. <p> This class provides inspection, instrumentation, and monitoring methods for the internal queue, as well as similar methods for condition objects. These can be exported as desired into classes using an <pre><code> AbstractQueuedSynchronizer </code></pre> for their synchronization mechanics. <p> Serialization of this class stores only the underlying atomic integer maintaining state, so deserialized objects have empty thread queues. Typical subclasses requiring serializability will define a <pre><code> readObject </code></pre> method that restores this to a known initial state upon deserialization. </p><pre><code>public abstract class AbstractQueuedSynchronizer\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/locks/AbstractQueuedSynchronizer.html
Condition	A										<section class="prog__container"><p> <pre><code> Condition </code></pre> factors out the <pre><code> Object </code></pre> monitor methods ( <pre><code> wait </code></pre> , <pre><code> notify </code></pre> and <pre><code> notifyAll </code></pre> ) into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary <pre><code> Lock </code></pre> implementations. Where a <pre><code> Lock </code></pre> replaces the use of <pre><code> synchronized </code></pre> methods and statements, a <pre><code> Condition </code></pre> replaces the use of the Object monitor methods. <p> Conditions (also known as <em> condition queues </em> or <em> condition variables </em> ) provide a means for one thread to suspend execution (to "wait") until notified by another thread that some state condition may now be true. Because access to this shared state information occurs in different threads, it must be protected, so a lock of some form is associated with the condition. The key property that waiting for a condition provides is that it <em> atomically </em> releases the associated lock and suspends the current thread, just like <pre><code> Object.wait </code></pre> . <p> A <pre><code> Condition </code></pre> instance is intrinsically bound to a lock. To obtain a <pre><code> Condition </code></pre> instance for a particular <pre><code> Lock </code></pre> instance use its <pre><code> newCondition() </code></pre> method. <p> As an example, suppose we have a bounded buffer which supports <pre><code> put </code></pre> and <pre><code> take </code></pre> methods. If a <pre><code> take </code></pre> is attempted on an empty buffer, then the thread will block until an item becomes available; if a <pre><code> put </code></pre> is attempted on a full buffer, then the thread will block until a space becomes available. We would like to keep waiting <pre><code> put </code></pre> threads and <pre><code> take </code></pre> threads in separate wait-sets so that we can use the optimization of only notifying a single thread at a time when items or spaces become available in the buffer. This can be achieved using two <pre><code> Condition </code></pre> instances. <pre> class BoundedBuffer { <b>final Lock lock = new ReentrantLock();</b> final Condition notFull = <b>lock.newCondition(); </b> final Condition notEmpty = <b>lock.newCondition(); </b> final Object[] items = new Object[100]; int putptr, takeptr, count; public void put(Object x) throws InterruptedException { <b>lock.lock(); try {</b> while (count == items.length) <b>notFull.await();</b> items[putptr] = x; if (++putptr == items.length) putptr = 0; ++count; <b>notEmpty.signal();</b> <b>} finally { lock.unlock(); }</b> } public Object take() throws InterruptedException { <b>lock.lock(); try {</b> while (count == 0) <b>notEmpty.await();</b> Object x = items[takeptr]; if (++takeptr == items.length) takeptr = 0; --count; <b>notFull.signal();</b> return x; <b>} finally { lock.unlock(); }</b> } } </pre> (The <pre><code> ArrayBlockingQueue </code></pre> class provides this functionality, so there is no reason to implement this sample usage class.) <p> A <pre><code> Condition </code></pre> implementation can provide behavior and semantics that is different from that of the <pre><code> Object </code></pre> monitor methods, such as guaranteed ordering for notifications, or not requiring a lock to be held when performing notifications. If an implementation provides such specialized semantics then the implementation must document those semantics. <p> Note that <pre><code> Condition </code></pre> instances are just normal objects and can themselves be used as the target in a <pre><code> synchronized </code></pre> statement, and can have their own monitor <pre><code> wait </code></pre> and <pre><code> notify </code></pre> methods invoked. Acquiring the monitor lock of a <pre><code> Condition </code></pre> instance, or using its monitor methods, has no specified relationship with acquiring the <pre><code> Lock </code></pre> associated with that <pre><code> Condition </code></pre> or the use of its waiting </p><pre><code>public interface Condition\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/locks/Condition.html
Lock	A										<section class="prog__container"><p> <pre><code> Lock </code></pre> implementations provide more extensive locking operations than can be obtained using <pre><code> synchronized </code></pre> methods and statements. They allow more flexible structuring, may have quite different properties, and may support multiple associated <pre><code> Condition </code></pre> objects. <p> A lock is a tool for controlling access to a shared resource by multiple threads. Commonly, a lock provides exclusive access to a shared resource: only one thread at a time can acquire the lock and all access to the shared resource requires that the lock be acquired first. However, some locks may allow concurrent access to a shared resource, such as the read lock of a <pre><code> ReadWriteLock </code></pre> . <p> The use of <pre><code> synchronized </code></pre> methods or statements provides access to the implicit monitor lock associated with every object, but forces all lock acquisition and release to occur in a block-structured way: when multiple locks are acquired they must be released in the opposite order, and all locks must be released in the same lexical scope in which they were acquired. <p> While the scoping mechanism for <pre><code> synchronized </code></pre> methods and statements makes it much easier to program with monitor locks, and helps avoid many common programming errors involving locks, there are occasions where you need to work with locks in a more flexible way. For example, some algorithms for traversing concurrently accessed data structures require the use of "hand-over-hand" or "chain locking": you acquire the lock of node A, then node B, then release A and acquire C, then release B and acquire D and so on. Implementations of the <pre><code> Lock </code></pre> interface enable the use of such techniques by allowing a lock to be acquired and released in different scopes, and allowing multiple locks to be acquired and released in any order. <p> With this increased flexibility comes additional responsibility. The absence of block-structured locking removes the automatic release of locks that occurs with <pre><code> synchronized </code></pre> methods and statements. In most cases, the following idiom should be used: <pre> <pre><code>Lock l = ...; l.lock(); try { // access the resource protected by this lock } finally { l.unlock(); }</code></pre></pre> When locking and unlocking occur in different scopes, care must be taken to ensure that all code that is executed while the lock is held is protected by try-finally or try-catch to ensure that the lock is released when necessary. <p> <pre><code> Lock </code></pre> implementations provide additional functionality over the use of <pre><code> synchronized </code></pre> methods and statements by providing a non-blocking attempt to acquire a lock ( <pre><code> tryLock() </code></pre> ), an attempt to acquire the lock that can be interrupted ( <pre><code> lockInterruptibly() </code></pre> , and an attempt to acquire the lock that can timeout ( <pre><code> tryLock(long, TimeUnit) </code></pre> ). <p> A <pre><code> Lock </code></pre> class can also provide behavior and semantics that is quite different from that of the implicit monitor lock, such as guaranteed ordering, non-reentrant usage, or deadlock detection. If an implementation provides such specialized semantics then the implementation must document those semantics. <p> Note that <pre><code> Lock </code></pre> instances are just normal objects and can themselves be used as the target in a <pre><code> synchronized </code></pre> statement. Acquiring the monitor lock of a <pre><code> Lock </code></pre> instance has no specified relationship with invoking any of the <pre><code> lock() </code></pre> methods of that instance. It is recommended that to avoid confusion you never use <pre><code> Lock </code></pre> instances in this way, except within their own implementation. <p> Except where noted, passing a <pre><code> null </code></pre> value for any parameter will result in a <pre><code> NullPointerException </code></pre> being thrown. </p><pre><code>public interface Lock\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/locks/Lock.html
LockSupport	A										<section class="prog__container"><p> Basic thread blocking primitives for creating locks and other synchronization classes. <p> This class associates, with each thread that uses it, a permit (in the sense of the <pre><code> Semaphore </code></pre> class). A call to <pre><code> park </code></pre> will return immediately if the permit is available, consuming it in the process; otherwise it <em> may </em> block. A call to <pre><code> unpark </code></pre> makes the permit available, if it was not already available. (Unlike with Semaphores though, permits do not accumulate. There is at most one.) Reliable usage requires the use of volatile (or atomic) variables to control when to park or unpark. Orderings of calls to these methods are maintained with respect to volatile variable accesses, but not necessarily non-volatile variable accesses. <p> Methods <pre><code> park </code></pre> and <pre><code> unpark </code></pre> provide efficient means of blocking and unblocking threads that do not encounter the problems that cause the deprecated methods <pre><code> Thread.suspend </code></pre> and <pre><code> Thread.resume </code></pre> to be unusable for such purposes: Races between one thread invoking <pre><code> park </code></pre> and another thread trying to <pre><code> unpark </code></pre> it will preserve liveness, due to the permit. Additionally, <pre><code> park </code></pre> will return if the caller's thread was interrupted, and timeout versions are supported. The <pre><code> park </code></pre> method may also return at any other time, for "no reason", so in general must be invoked within a loop that rechecks conditions upon return. In this sense <pre><code> park </code></pre> serves as an optimization of a "busy wait" that does not waste as much time spinning, but must be paired with an <pre><code> unpark </code></pre> to be effective. <p> The three forms of <pre><code> park </code></pre> each also support a <pre><code> blocker </code></pre> object parameter. This object is recorded while the thread is blocked to permit monitoring and diagnostic tools to identify the reasons that threads are blocked. (Such tools may access blockers using method <pre><code> getBlocker(Thread) </code></pre> .) The use of these forms rather than the original forms without this parameter is strongly encouraged. The normal argument to supply as a <pre><code> blocker </code></pre> within a lock implementation is <pre><code> this </code></pre> . <p> These methods are designed to be used as tools for creating higher-level synchronization utilities, and are not in themselves useful for most concurrency control applications. The <pre><code> park </code></pre> method is designed for use only in constructions of the form: <pre> <pre><code>while (!canProceed()) { // ensure request to unpark is visible to other threads ... LockSupport.park(this); }</code></pre></pre> where no actions by the thread publishing a request to unpark, prior to the call to <pre><code> park </code></pre> , entail locking or blocking. Because only one permit is associated with each thread, any intermediary uses of <pre><code> park </code></pre> , including implicitly via class loading, could lead to an unresponsive thread (a "lost unpark"). <p> <b> Sample Usage. </b> Here is a sketch of a first-in-first-out non-reentrant lock class: <pre> <pre><code>class FIFOMutex { private final AtomicBoolean locked = new AtomicBoolean(false); private final Queue&lt;Thread&gt; waiters = new ConcurrentLinkedQueue&lt;&gt;(); public void lock() { boolean wasInterrupted = false; // publish current thread for unparkers waiters.add(Thread.currentThread()); // Block while not first in queue or cannot acquire lock while (waiters.peek() != Thread.currentThread() || !locked.compareAndSet(false, true)) { LockSupport.park(this); // ignore interrupts while waiting if (Thread.interrupted()) wasInterrupted = true; } waiters.remove(); // ensure correct interrupt status on return if (wasInterrupted) Thread.currentThread().interrupt(); } public void unlock() { locked.set(false); LockSupport.unpark(waiters.peek()); } static { // Reduce the risk of "lost unpark" due to classloading Class&lt;?&gt; ensureLoaded = LockSupport.class; } }</code></pre></pre> </p><pre><code>public class LockSupport\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/locks/LockSupport.html
java.util.concurrent.locks	A										<section class="prog__container">The</section>	https://developer.android.com/reference/java/util/concurrent/locks/package-summary.html
ReadWriteLock	A										<section class="prog__container"><p> A <pre><code> ReadWriteLock </code></pre> maintains a pair of associated <pre><code> locks </code></pre> , one for read-only operations and one for writing. The read lock</p><pre><code>public interface ReadWriteLock\n</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/locks/ReadWriteLock.html
ReentrantLock	A										<section class="prog__container"><p> A reentrant mutual exclusion <pre><code> Lock </code></pre> with the same basic behavior and semantics as the implicit monitor lock accessed using <pre><code> synchronized </code></pre> methods and statements, but with extended capabilities. <p> A <pre><code> ReentrantLock </code></pre> is <em> owned </em> by the thread last successfully locking, but not yet unlocking it. A thread invoking <pre><code> lock </code></pre> will return, successfully acquiring the lock, when the lock is not owned by another thread. The method will return immediately if the current thread already owns the lock. This can be checked using methods <pre><code> isHeldByCurrentThread() </code></pre> , and <pre><code> getHoldCount() </code></pre> . <p> The constructor for this class accepts an optional <em> fairness </em> parameter. When set <pre><code> true </code></pre> , under contention, locks favor granting access to the longest-waiting thread. Otherwise this lock does not guarantee any particular access order. Programs using fair locks accessed by many threads may display lower overall throughput (i.e., are slower; often much slower) than those using the default setting, but have smaller variances in times to obtain locks and guarantee lack of starvation. Note however, that fairness of locks does not guarantee fairness of thread scheduling. Thus, one of many threads using a fair lock may obtain it multiple times in succession while other active threads are not progressing and not currently holding the lock. Also note that the untimed <pre><code> tryLock() </code></pre> method does not honor the fairness setting. It will succeed if the lock is available even if other threads are waiting. <p> It is recommended practice to <em> always </em> immediately follow a call to <pre><code> lock </code></pre> with a <pre><code> try </code></pre> block, most typically in a before/after construction such as: <pre> <pre><code>class X { private final ReentrantLock lock = new ReentrantLock(); // ... public void m() { lock.lock(); // block until condition holds try { // ... method body } finally { lock.unlock() } } }</code></pre></pre> <p> In addition to implementing the <pre><code> Lock </code></pre> interface, this class defines a number of <pre><code> public </code></pre> and <pre><code> protected </code></pre> methods for inspecting the state of the lock. Some of these methods are only useful for instrumentation and monitoring. <p> Serialization of this class behaves in the same way as built-in locks: a deserialized lock is in the unlocked state, regardless of its state when serialized. <p> This lock supports a maximum of 2147483647 recursive locks by the same thread. Attempts to exceed this limit result in <pre><code> Error </code></pre> throws from locking methods. </p><pre><code>public class ReentrantLock\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/locks/ReentrantLock.html
ReentrantReadWriteLock	A										<section class="prog__container"><p> An implementation of <pre><code> ReadWriteLock </code></pre> supporting similar semantics to <pre><code> ReentrantLock </code></pre> . <p> This class has the following properties: <ul> <li> <b> Acquisition order </b> <p> This class does not impose a reader or writer preference ordering for lock access. However, it does support an optional <em> fairness </em> policy. <dl> <dt> <b> <i> Non-fair mode (default) </i> </b> <dd style="font-family:'DejaVu Sans', Arial, Helvetica, sans-serif"> When constructed as non-fair (the default), the order of entry to the read and write lock is unspecified, subject to reentrancy constraints. A nonfair lock that is continuously contended may indefinitely postpone one or more reader or writer threads, but will normally have higher throughput than a fair lock. <dt> <b> <i> Fair mode </i> </b> <dd style="font-family:'DejaVu Sans', Arial, Helvetica, sans-serif"> When constructed as fair, threads contend for entry using an approximately arrival-order policy. When the currently held lock is released, either the longest-waiting single writer thread will be assigned the write lock, or if there is a group of reader threads waiting longer than all waiting writer threads, that group will be assigned the read lock. <p> A thread that tries to acquire a fair read lock (non-reentrantly) will block if either the write lock is held, or there is a waiting writer thread. The thread will not acquire the read lock until after the oldest currently waiting writer thread has acquired and released the write lock. Of course, if a waiting writer abandons its wait, leaving one or more reader threads as the longest waiters in the queue with the write lock free, then those readers will be assigned the read lock. <p> A thread that tries to acquire a fair write lock (non-reentrantly) will block unless both the read lock and write lock are free (which implies there are no waiting threads). (Note that the non-blocking <pre><code> tryLock() </code></pre> and <pre><code> tryLock() </code></pre> methods do not honor this fair setting and will immediately acquire the lock if it is possible, regardless of waiting threads.) </p><pre><code>public class ReentrantReadWriteLock\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.html
ReentrantReadWriteLock.ReadLock	A										<section class="prog__container"><p> The lock returned by method <pre><code> readLock() </code></pre> .</p><pre><code>public static class ReentrantReadWriteLock.ReadLock\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock.html
ReentrantReadWriteLock.WriteLock	A										<section class="prog__container"><p> The lock returned by method <pre><code> writeLock() </code></pre> .</p><pre><code>public static class ReentrantReadWriteLock.WriteLock\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/locks/ReentrantReadWriteLock.WriteLock.html
StampedLock	A										<section class="prog__container"><p> A capability-based lock with three modes for controlling read/write access. The state of a StampedLock consists of a version and mode. Lock acquisition methods return a stamp that represents and controls access with respect to a lock state; "try" versions of these methods may instead return the special value zero to represent failure to acquire access. Lock release and conversion methods require stamps as arguments, and fail if they do not match the state of the lock. The three modes are: <ul> <li> <b> Writing. </b> Method <pre><code> writeLock() </code></pre> possibly blocks waiting for exclusive access, returning a stamp that can be used in method <pre><code> unlockWrite(long) </code></pre> to release the lock. Untimed and timed versions of <pre><code> tryWriteLock </code></pre> are also provided. When the lock is held in write mode, no read locks may be obtained, and all optimistic read validations will fail. <li> <b> Reading. </b> Method <pre><code> readLock() </code></pre> possibly blocks waiting for non-exclusive access, returning a stamp that can be used in method <pre><code> unlockRead(long) </code></pre> to release the lock. Untimed and timed versions of <pre><code> tryReadLock </code></pre> are also provided. <li> <b> Optimistic Reading. </b> Method <pre><code> tryOptimisticRead() </code></pre> returns a non-zero stamp only if the lock is not currently held in write mode. Method <pre><code> validate(long) </code></pre> returns true if the lock has not been acquired in write mode since obtaining a given stamp. This mode can be thought of as an extremely weak version of a read-lock, that can be broken by a writer at any time. The use of optimistic mode for short read-only code segments often reduces contention and improves throughput. However, its use is inherently fragile. Optimistic read sections should only read fields and hold them in local variables for later use after validation. Fields read while in optimistic mode may be wildly inconsistent, so usage applies only when you are familiar enough with data representations to check consistency and/or repeatedly invoke method <pre><code> validate() </code></pre> . For example, such steps are typically required when first reading an object or array reference, and then accessing one of its fields, elements or methods. </li> </li> </li> </ul> <p> This class also supports methods that conditionally provide conversions across the three modes. For example, method <pre><code> tryConvertToWriteLock(long) </code></pre> attempts to "upgrade" a mode, returning a valid write stamp if (1) already in writing mode (2) in reading mode and there are no other readers or (3) in optimistic mode and the lock is available. The forms of these methods are designed to help reduce some of the code bloat that otherwise occurs in retry-based designs. <p> StampedLocks are designed for use as internal utilities in the development of thread-safe components. Their use relies on knowledge of the internal properties of the data, objects, and methods they are protecting. They are not reentrant, so locked bodies should not call other unknown methods that may try to re-acquire locks (although you may pass a stamp to other methods that can use or convert it). The use of read lock modes relies on the associated code sections being side-effect-free. Unvalidated optimistic read sections cannot call methods that are not known to tolerate potential inconsistencies. Stamps use finite representations, and are not cryptographically secure (i.e., a valid stamp may be guessable). Stamp values may recycle after (no sooner than) one year of continuous operation. A stamp held without use or validation for longer than this period may fail to validate correctly. StampedLocks are serializable, but always deserialize into initial unlocked state, so they are not useful for remote locking. <p> The scheduling policy of StampedLock does not consistently prefer readers over writers or vice versa. All "try" methods are best-effort and do not necessarily conform to any scheduling or fairness policy. A zero return from any "try" method for acquiring or converting locks does not carry any information about the state of the lock; a subsequent invocation may succeed. <p> Because it supports coordinated usage across multiple lock modes, this class does not directly implement the <pre><code> Lock </code></pre> or <pre><code> ReadWriteLock </code></pre> interfaces. However, a StampedLock may be viewed <pre><code> asReadLock() </code></pre> , <pre><code> asWriteLock() </code></pre> , or <pre><code> asReadWriteLock() </code></pre> in applications requiring only the associated set of functionality. <p> <b> Sample Usage. </b> The following illustrates some usage idioms in a class that maintains simple two-dimensional points. The sample code illustrates some try/catch conventions even though they are not strictly needed here because no exceptions can occur in their bodies. <br> <pre> <pre><code>class Point { private double x, y; private final StampedLock sl = new StampedLock(); void move(double deltaX, double deltaY) { // an exclusively locked method long stamp = sl.writeLock(); try { x += deltaX; y += deltaY; } finally { sl.unlockWrite(stamp); } } double distanceFromOrigin() { // A read-only method long stamp = sl.tryOptimisticRead(); double currentX = x, currentY = y; if (!sl.validate(stamp)) { stamp = sl.readLock(); try { currentX = x; currentY = y; } finally { sl.unlockRead(stamp); } } return Math.sqrt(currentX * currentX + currentY * currentY); } void moveIfAtOrigin(double newX, double newY) { // upgrade // Could instead start with optimistic, not read mode long stamp = sl.readLock(); try { while (x == 0.0 &amp;&amp; y == 0.0) { long ws = sl.tryConvertToWriteLock(stamp); if (ws != 0L) { stamp = ws; x = newX; y = newY; break; } else { sl.unlockRead(stamp); stamp = sl.writeLock(); } } } finally { sl.unlock(stamp); } } }</code></pre></pre> </br> </p><pre><code>public class StampedLock\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/concurrent/locks/StampedLock.html
BiConsumer	A										<section class="prog__container"><p> Represents an operation that accepts two input arguments and returns no result. This is the two-arity specialization of <pre><code> Consumer </code></pre> . Unlike most other functional interfaces, <pre><code> BiConsumer </code></pre> is expected to operate via side-effects. <p> This is a functional interface whose functional method is <pre><code> accept(Object, Object) </code></pre> . </p><pre><code>public interface BiConsumer\n</code></pre></section>	https://developer.android.com/reference/java/util/function/BiConsumer.html
BiFunction	A										<section class="prog__container"><p> Represents a function that accepts two arguments and produces a result. This is the two-arity specialization of <pre><code> Function </code></pre> . <p> This is a functional interface whose functional method is <pre><code> apply(Object, Object) </code></pre> . </p><pre><code>public interface BiFunction\n</code></pre></section>	https://developer.android.com/reference/java/util/function/BiFunction.html
BinaryOperator	A										<section class="prog__container"><p> Represents an operation upon two operands of the same type, producing a result of the same type as the operands. This is a specialization of <pre><code> BiFunction </code></pre> for the case where the operands and the result are all of the same type. <p> This is a functional interface whose functional method is <pre><code> apply(Object, Object) </code></pre> . </p><pre><code>public interface BinaryOperator\nimplements BiFunction&lt;T,&nbsp;T,&nbsp;T&gt;</code></pre></section>	https://developer.android.com/reference/java/util/function/BinaryOperator.html
BiPredicate	A										<section class="prog__container"><p> Represents a predicate (boolean-valued function) of two arguments. This is the two-arity specialization of <pre><code> Predicate </code></pre> . <p> This is a functional interface whose functional method is <pre><code> test(Object, Object) </code></pre> . </p><pre><code>public interface BiPredicate\n</code></pre></section>	https://developer.android.com/reference/java/util/function/BiPredicate.html
BooleanSupplier	A										<section class="prog__container"><p> Represents a supplier of <pre><code> boolean </code></pre> -valued results. This is the <pre><code> boolean </code></pre> -producing primitive specialization of <pre><code> Supplier </code></pre> . <p> There is no requirement that a new or distinct result be returned each time the supplier is invoked. <p> This is a functional interface whose functional method is <pre><code> getAsBoolean() </code></pre> . </p><pre><code>public interface BooleanSupplier\n</code></pre></section>	https://developer.android.com/reference/java/util/function/BooleanSupplier.html
Consumer	A										<section class="prog__container"><p> Represents an operation that accepts a single input argument and returns no result. Unlike most other functional interfaces, <pre><code> Consumer </code></pre> is expected to operate via side-effects. <p> This is a functional interface whose functional method is <pre><code> accept(Object) </code></pre> . </p><pre><code>public interface Consumer\n</code></pre></section>	https://developer.android.com/reference/java/util/function/Consumer.html
DoubleBinaryOperator	A										<section class="prog__container"><p> Represents an operation upon two <pre><code> double </code></pre> -valued operands and producing a <pre><code> double </code></pre> -valued result. This is the primitive type specialization of <pre><code> BinaryOperator </code></pre> for <pre><code> double </code></pre> . <p> This is a functional interface whose functional method is <pre><code> applyAsDouble(double, double) </code></pre> . </p><pre><code>public interface DoubleBinaryOperator\n</code></pre></section>	https://developer.android.com/reference/java/util/function/DoubleBinaryOperator.html
DoubleConsumer	A										<section class="prog__container"><p> Represents an operation that accepts a single <pre><code> double </code></pre> -valued argument and returns no result. This is the primitive type specialization of <pre><code> Consumer </code></pre> for <pre><code> double </code></pre> . Unlike most other functional interfaces, <pre><code> DoubleConsumer </code></pre> is expected to operate via side-effects. <p> This is a functional interface whose functional method is <pre><code> accept(double) </code></pre> . </p><pre><code>public interface DoubleConsumer\n</code></pre></section>	https://developer.android.com/reference/java/util/function/DoubleConsumer.html
DoubleFunction	A										<section class="prog__container"><p> Represents a function that accepts a double-valued argument and produces a result. This is the <pre><code> double </code></pre> -consuming primitive specialization for <pre><code> Function </code></pre> . <p> This is a functional interface whose functional method is <pre><code> apply(double) </code></pre> . </p><pre><code>public interface DoubleFunction\n</code></pre></section>	https://developer.android.com/reference/java/util/function/DoubleFunction.html
DoublePredicate	A										<section class="prog__container"><p> Represents a predicate (boolean-valued function) of one <pre><code> double </code></pre> -valued argument. This is the <pre><code> double </code></pre> -consuming primitive type specialization of <pre><code> Predicate </code></pre> . <p> This is a functional interface whose functional method is <pre><code> test(double) </code></pre> . </p><pre><code>public interface DoublePredicate\n</code></pre></section>	https://developer.android.com/reference/java/util/function/DoublePredicate.html
DoubleSupplier	A										<section class="prog__container"><p> Represents a supplier of <pre><code> double </code></pre> -valued results. This is the <pre><code> double </code></pre> -producing primitive specialization of <pre><code> Supplier </code></pre> . <p> There is no requirement that a distinct result be returned each time the supplier is invoked. <p> This is a functional interface whose functional method is <pre><code> getAsDouble() </code></pre> . </p><pre><code>public interface DoubleSupplier\n</code></pre></section>	https://developer.android.com/reference/java/util/function/DoubleSupplier.html
DoubleToIntFunction	A										<section class="prog__container"><p> Represents a function that accepts a double-valued argument and produces an int-valued result. This is the <pre><code> double </code></pre> -to- <pre><code> int </code></pre> primitive specialization for <pre><code> Function </code></pre> . <p> This is a functional interface whose functional method is <pre><code> applyAsInt(double) </code></pre> . </p><pre><code>public interface DoubleToIntFunction\n</code></pre></section>	https://developer.android.com/reference/java/util/function/DoubleToIntFunction.html
DoubleToLongFunction	A										<section class="prog__container"><p> Represents a function that accepts a double-valued argument and produces a long-valued result. This is the <pre><code> double </code></pre> -to- <pre><code> long </code></pre> primitive specialization for <pre><code> Function </code></pre> . <p> This is a functional interface whose functional method is <pre><code> applyAsLong(double) </code></pre> . </p><pre><code>public interface DoubleToLongFunction\n</code></pre></section>	https://developer.android.com/reference/java/util/function/DoubleToLongFunction.html
DoubleUnaryOperator	A										<section class="prog__container"><p> Represents an operation on a single <pre><code> double </code></pre> -valued operand that produces a <pre><code> double </code></pre> -valued result. This is the primitive type specialization of <pre><code> UnaryOperator </code></pre> for <pre><code> double </code></pre> . <p> This is a functional interface whose functional method is <pre><code> applyAsDouble(double) </code></pre> . </p><pre><code>public interface DoubleUnaryOperator\n</code></pre></section>	https://developer.android.com/reference/java/util/function/DoubleUnaryOperator.html
Function	A										<section class="prog__container"><p> Represents a function that accepts one argument and produces a result. <p> This is a functional interface whose functional method is <pre><code> apply(Object) </code></pre> . </p><pre><code>public interface Function\n</code></pre></section>	https://developer.android.com/reference/java/util/function/Function.html
IntBinaryOperator	A										<section class="prog__container"><p> Represents an operation upon two <pre><code> int </code></pre> -valued operands and producing an <pre><code> int </code></pre> -valued result. This is the primitive type specialization of <pre><code> BinaryOperator </code></pre> for <pre><code> int </code></pre> . <p> This is a functional interface whose functional method is <pre><code> applyAsInt(int, int) </code></pre> . </p><pre><code>public interface IntBinaryOperator\n</code></pre></section>	https://developer.android.com/reference/java/util/function/IntBinaryOperator.html
IntConsumer	A										<section class="prog__container"><p> Represents an operation that accepts a single <pre><code> int </code></pre> -valued argument and returns no result. This is the primitive type specialization of <pre><code> Consumer </code></pre> for <pre><code> int </code></pre> . Unlike most other functional interfaces, <pre><code> IntConsumer </code></pre> is expected to operate via side-effects. <p> This is a functional interface whose functional method is <pre><code> accept(int) </code></pre> . </p><pre><code>public interface IntConsumer\n</code></pre></section>	https://developer.android.com/reference/java/util/function/IntConsumer.html
IntFunction	A										<section class="prog__container"><p> Represents a function that accepts an int-valued argument and produces a result. This is the <pre><code> int </code></pre> -consuming primitive specialization for <pre><code> Function </code></pre> . <p> This is a functional interface whose functional method is <pre><code> apply(int) </code></pre> . </p><pre><code>public interface IntFunction\n</code></pre></section>	https://developer.android.com/reference/java/util/function/IntFunction.html
IntPredicate	A										<section class="prog__container"><p> Represents a predicate (boolean-valued function) of one <pre><code> int </code></pre> -valued argument. This is the <pre><code> int </code></pre> -consuming primitive type specialization of <pre><code> Predicate </code></pre> . <p> This is a functional interface whose functional method is <pre><code> test(int) </code></pre> . </p><pre><code>public interface IntPredicate\n</code></pre></section>	https://developer.android.com/reference/java/util/function/IntPredicate.html
IntSupplier	A										<section class="prog__container"><p> Represents a supplier of <pre><code> int </code></pre> -valued results. This is the <pre><code> int </code></pre> -producing primitive specialization of <pre><code> Supplier </code></pre> . <p> There is no requirement that a distinct result be returned each time the supplier is invoked. <p> This is a functional interface whose functional method is <pre><code> getAsInt() </code></pre> . </p><pre><code>public interface IntSupplier\n</code></pre></section>	https://developer.android.com/reference/java/util/function/IntSupplier.html
IntToDoubleFunction	A										<section class="prog__container"><p> Represents a function that accepts an int-valued argument and produces a double-valued result. This is the <pre><code> int </code></pre> -to- <pre><code> double </code></pre> primitive specialization for <pre><code> Function </code></pre> . <p> This is a functional interface whose functional method is <pre><code> applyAsDouble(int) </code></pre> . </p><pre><code>public interface IntToDoubleFunction\n</code></pre></section>	https://developer.android.com/reference/java/util/function/IntToDoubleFunction.html
IntToLongFunction	A										<section class="prog__container"><p> Represents a function that accepts an int-valued argument and produces a long-valued result. This is the <pre><code> int </code></pre> -to- <pre><code> long </code></pre> primitive specialization for <pre><code> Function </code></pre> . <p> This is a functional interface whose functional method is <pre><code> applyAsLong(int) </code></pre> . </p><pre><code>public interface IntToLongFunction\n</code></pre></section>	https://developer.android.com/reference/java/util/function/IntToLongFunction.html
IntUnaryOperator	A										<section class="prog__container"><p> Represents an operation on a single <pre><code> int </code></pre> -valued operand that produces an <pre><code> int </code></pre> -valued result. This is the primitive type specialization of <pre><code> UnaryOperator </code></pre> for <pre><code> int </code></pre> . <p> This is a functional interface whose functional method is <pre><code> applyAsInt(int) </code></pre> . </p><pre><code>public interface IntUnaryOperator\n</code></pre></section>	https://developer.android.com/reference/java/util/function/IntUnaryOperator.html
LongBinaryOperator	A										<section class="prog__container"><p> Represents an operation upon two <pre><code> long </code></pre> -valued operands and producing a <pre><code> long </code></pre> -valued result. This is the primitive type specialization of <pre><code> BinaryOperator </code></pre> for <pre><code> long </code></pre> . <p> This is a functional interface whose functional method is <pre><code> applyAsLong(long, long) </code></pre> . </p><pre><code>public interface LongBinaryOperator\n</code></pre></section>	https://developer.android.com/reference/java/util/function/LongBinaryOperator.html
LongConsumer	A										<section class="prog__container"><p> Represents an operation that accepts a single <pre><code> long </code></pre> -valued argument and returns no result. This is the primitive type specialization of <pre><code> Consumer </code></pre> for <pre><code> long </code></pre> . Unlike most other functional interfaces, <pre><code> LongConsumer </code></pre> is expected to operate via side-effects. <p> This is a functional interface whose functional method is <pre><code> accept(long) </code></pre> . </p><pre><code>public interface LongConsumer\n</code></pre></section>	https://developer.android.com/reference/java/util/function/LongConsumer.html
LongFunction	A										<section class="prog__container"><p> Represents a function that accepts a long-valued argument and produces a result. This is the <pre><code> long </code></pre> -consuming primitive specialization for <pre><code> Function </code></pre> . <p> This is a functional interface whose functional method is <pre><code> apply(long) </code></pre> . </p><pre><code>public interface LongFunction\n</code></pre></section>	https://developer.android.com/reference/java/util/function/LongFunction.html
LongPredicate	A										<section class="prog__container"><p> Represents a predicate (boolean-valued function) of one <pre><code> long </code></pre> -valued argument. This is the <pre><code> long </code></pre> -consuming primitive type specialization of <pre><code> Predicate </code></pre> . <p> This is a functional interface whose functional method is <pre><code> test(long) </code></pre> . </p><pre><code>public interface LongPredicate\n</code></pre></section>	https://developer.android.com/reference/java/util/function/LongPredicate.html
LongSupplier	A										<section class="prog__container"><p> Represents a supplier of <pre><code> long </code></pre> -valued results. This is the <pre><code> long </code></pre> -producing primitive specialization of <pre><code> Supplier </code></pre> . <p> There is no requirement that a distinct result be returned each time the supplier is invoked. <p> This is a functional interface whose functional method is <pre><code> getAsLong() </code></pre> . </p><pre><code>public interface LongSupplier\n</code></pre></section>	https://developer.android.com/reference/java/util/function/LongSupplier.html
LongToDoubleFunction	A										<section class="prog__container"><p> Represents a function that accepts a long-valued argument and produces a double-valued result. This is the <pre><code> long </code></pre> -to- <pre><code> double </code></pre> primitive specialization for <pre><code> Function </code></pre> . <p> This is a functional interface whose functional method is <pre><code> applyAsDouble(long) </code></pre> . </p><pre><code>public interface LongToDoubleFunction\n</code></pre></section>	https://developer.android.com/reference/java/util/function/LongToDoubleFunction.html
LongToIntFunction	A										<section class="prog__container"><p> Represents a function that accepts a long-valued argument and produces an int-valued result. This is the <pre><code> long </code></pre> -to- <pre><code> int </code></pre> primitive specialization for <pre><code> Function </code></pre> . <p> This is a functional interface whose functional method is <pre><code> applyAsInt(long) </code></pre> . </p><pre><code>public interface LongToIntFunction\n</code></pre></section>	https://developer.android.com/reference/java/util/function/LongToIntFunction.html
LongUnaryOperator	A										<section class="prog__container"><p> Represents an operation on a single <pre><code> long </code></pre> -valued operand that produces a <pre><code> long </code></pre> -valued result. This is the primitive type specialization of <pre><code> UnaryOperator </code></pre> for <pre><code> long </code></pre> . <p> This is a functional interface whose functional method is <pre><code> applyAsLong(long) </code></pre> . </p><pre><code>public interface LongUnaryOperator\n</code></pre></section>	https://developer.android.com/reference/java/util/function/LongUnaryOperator.html
ObjDoubleConsumer	A										<section class="prog__container"><p> Represents an operation that accepts an object-valued and a <pre><code> double </code></pre> -valued argument, and returns no result. This is the <pre><code> (reference, double) </code></pre> specialization of <pre><code> BiConsumer </code></pre> . Unlike most other functional interfaces, <pre><code> ObjDoubleConsumer </code></pre> is expected to operate via side-effects. <p> This is a functional interface whose functional method is <pre><code> accept(Object, double) </code></pre> . </p><pre><code>public interface ObjDoubleConsumer\n</code></pre></section>	https://developer.android.com/reference/java/util/function/ObjDoubleConsumer.html
ObjIntConsumer	A										<section class="prog__container"><p> Represents an operation that accepts an object-valued and a <pre><code> int </code></pre> -valued argument, and returns no result. This is the <pre><code> (reference, int) </code></pre> specialization of <pre><code> BiConsumer </code></pre> . Unlike most other functional interfaces, <pre><code> ObjIntConsumer </code></pre> is expected to operate via side-effects. <p> This is a functional interface whose functional method is <pre><code> accept(Object, int) </code></pre> . </p><pre><code>public interface ObjIntConsumer\n</code></pre></section>	https://developer.android.com/reference/java/util/function/ObjIntConsumer.html
ObjLongConsumer	A										<section class="prog__container"><p> Represents an operation that accepts an object-valued and a <pre><code> long </code></pre> -valued argument, and returns no result. This is the <pre><code> (reference, long) </code></pre> specialization of <pre><code> BiConsumer </code></pre> . Unlike most other functional interfaces, <pre><code> ObjLongConsumer </code></pre> is expected to operate via side-effects. <p> This is a functional interface whose functional method is <pre><code> accept(Object, long) </code></pre> . </p><pre><code>public interface ObjLongConsumer\n</code></pre></section>	https://developer.android.com/reference/java/util/function/ObjLongConsumer.html
java.util.function	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/java/util/function/package-summary.html
Predicate	A										<section class="prog__container"><p> Represents a predicate (boolean-valued function) of one argument. <p> This is a functional interface whose functional method is <pre><code> test(Object) </code></pre> . </p><pre><code>public interface Predicate\n</code></pre></section>	https://developer.android.com/reference/java/util/function/Predicate.html
Supplier	A										<section class="prog__container"><p> Represents a supplier of results. <p> There is no requirement that a new or distinct result be returned each time the supplier is invoked. <p> This is a functional interface whose functional method is <pre><code> get() </code></pre> . </p><pre><code>public interface Supplier\n</code></pre></section>	https://developer.android.com/reference/java/util/function/Supplier.html
ToDoubleBiFunction	A										<section class="prog__container"><p> Represents a function that accepts two arguments and produces a double-valued result. This is the <pre><code> double </code></pre> -producing primitive specialization for <pre><code> BiFunction </code></pre> . <p> This is a functional interface whose functional method is <pre><code> applyAsDouble(Object, Object) </code></pre> . </p><pre><code>public interface ToDoubleBiFunction\n</code></pre></section>	https://developer.android.com/reference/java/util/function/ToDoubleBiFunction.html
ToDoubleFunction	A										<section class="prog__container"><p> Represents a function that produces a double-valued result. This is the <pre><code> double </code></pre> -producing primitive specialization for <pre><code> Function </code></pre> . <p> This is a functional interface whose functional method is <pre><code> applyAsDouble(Object) </code></pre> . </p><pre><code>public interface ToDoubleFunction\n</code></pre></section>	https://developer.android.com/reference/java/util/function/ToDoubleFunction.html
ToIntBiFunction	A										<section class="prog__container"><p> Represents a function that accepts two arguments and produces an int-valued result. This is the <pre><code> int </code></pre> -producing primitive specialization for <pre><code> BiFunction </code></pre> . <p> This is a functional interface whose functional method is <pre><code> applyAsInt(Object, Object) </code></pre> . </p><pre><code>public interface ToIntBiFunction\n</code></pre></section>	https://developer.android.com/reference/java/util/function/ToIntBiFunction.html
ToIntFunction	A										<section class="prog__container"><p> Represents a function that produces an int-valued result. This is the <pre><code> int </code></pre> -producing primitive specialization for <pre><code> Function </code></pre> . <p> This is a functional interface whose functional method is <pre><code> applyAsInt(Object) </code></pre> . </p><pre><code>public interface ToIntFunction\n</code></pre></section>	https://developer.android.com/reference/java/util/function/ToIntFunction.html
ToLongBiFunction	A										<section class="prog__container"><p> Represents a function that accepts two arguments and produces a long-valued result. This is the <pre><code> long </code></pre> -producing primitive specialization for <pre><code> BiFunction </code></pre> . <p> This is a functional interface whose functional method is <pre><code> applyAsLong(Object, Object) </code></pre> . </p><pre><code>public interface ToLongBiFunction\n</code></pre></section>	https://developer.android.com/reference/java/util/function/ToLongBiFunction.html
ToLongFunction	A										<section class="prog__container"><p> Represents a function that produces a long-valued result. This is the <pre><code> long </code></pre> -producing primitive specialization for <pre><code> Function </code></pre> . <p> This is a functional interface whose functional method is <pre><code> applyAsLong(Object) </code></pre> . </p><pre><code>public interface ToLongFunction\n</code></pre></section>	https://developer.android.com/reference/java/util/function/ToLongFunction.html
UnaryOperator	A										<section class="prog__container"><p> Represents an operation on a single operand that produces a result of the same type as its operand. This is a specialization of <pre><code> Function </code></pre> for the case where the operand and result are of the same type. <p> This is a functional interface whose functional method is <pre><code> apply(Object) </code></pre> . </p><pre><code>public interface UnaryOperator\nimplements Function&lt;T,&nbsp;T&gt;</code></pre></section>	https://developer.android.com/reference/java/util/function/UnaryOperator.html
Attributes	A										<section class="prog__container"><p> The Attributes class maps Manifest attribute names to associated string values. Valid attribute names are case-insensitive, are restricted to the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed 70 characters in length. Attribute values can contain any characters and will be UTF8-encoded when written to the output stream. See the JAR File Specification for more information about valid attribute names and values.</p><pre><code>public class Attributes\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/jar/Attributes.html
Attributes.Name	A										<section class="prog__container"><p> The Attributes.Name class represents an attribute name stored in this Map. Valid attribute names are case-insensitive, are restricted to the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed 70 characters in length. Attribute values can contain any characters and will be UTF8-encoded when written to the output stream. See the JAR File Specification for more information about valid attribute names and values.</p><pre><code>public static class Attributes.Name\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/jar/Attributes.Name.html
JarEntry	A										<section class="prog__container"><p> This class is used to represent a JAR file entry.</p><pre><code>public class JarEntry\n</code></pre></section>	https://developer.android.com/reference/java/util/jar/JarEntry.html
JarException	A										<section class="prog__container"><p> Signals that an error of some sort has occurred while reading from or writing to a JAR file.</p><pre><code>public class JarException\n</code></pre></section>	https://developer.android.com/reference/java/util/jar/JarException.html
JarFile	A										<section class="prog__container"><p> The <pre><code> JarFile </code></pre> class is used to read the contents of a jar file from any file that can be opened with <pre><code> java.io.RandomAccessFile </code></pre> . It extends the class <pre><code> java.util.zip.ZipFile </code></pre> with support for reading an optional <pre><code> Manifest </code></pre> entry. The <pre><code> Manifest </code></pre> can be used to specify meta-information about the jar file and its entries. <p> Unless otherwise noted, passing a <tt> null </tt> argument to a constructor or method in this class will cause a <pre><code> NullPointerException </code></pre> to be thrown. </p><pre><code>public class JarFile\n</code></pre></section>	https://developer.android.com/reference/java/util/jar/JarFile.html
JarInputStream	A										<section class="prog__container"><p> The <pre><code> JarInputStream </code></pre> class is used to read the contents of a JAR file from any input stream. It extends the class <pre><code> java.util.zip.ZipInputStream </code></pre> with support for reading an optional <pre><code> Manifest </code></pre> entry. The <pre><code> Manifest </code></pre> can be used to store meta-information about the JAR file and its entries.</p><pre><code>public class JarInputStream\n</code></pre></section>	https://developer.android.com/reference/java/util/jar/JarInputStream.html
JarOutputStream	A										<section class="prog__container"><p> The <pre><code> JarOutputStream </code></pre> class is used to write the contents of a JAR file to any output stream. It extends the class <pre><code> java.util.zip.ZipOutputStream </code></pre> with support for writing an optional <pre><code> Manifest </code></pre> entry. The <pre><code> Manifest </code></pre> can be used to specify meta-information about the JAR file and its entries.</p><pre><code>public class JarOutputStream\n</code></pre></section>	https://developer.android.com/reference/java/util/jar/JarOutputStream.html
Manifest	A										<section class="prog__container"><p> The Manifest class is used to maintain Manifest entry names and their associated Attributes. There are main Manifest Attributes as well as per-entry Attributes. For information on the Manifest format, please see the Manifest format specification .</p><pre><code>public class Manifest\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/jar/Manifest.html
Pack200	A										<section class="prog__container"><p> Transforms a JAR file to or from a packed stream in Pack200 format. Please refer to Network Transfer Format JSR 200 Specification at http://jcp.org/aboutJava/communityprocess/review/jsr200/index.html <p> Typically the packer engine is used by application developers to deploy or host JAR files on a website. The unpacker engine is used by deployment applications to transform the byte-stream back to JAR format. <p> Here is an example using packer and unpacker: <p> <blockquote> <pre> import java.util.jar.Pack200; import java.util.jar.Pack200.*; ... // Create the Packer object Packer packer = Pack200.newPacker(); // Initialize the state by setting the desired properties Map p = packer.properties(); // take more time choosing codings for better compression p.put(Packer.EFFORT, "7"); // default is "5" // use largest-possible archive segments (&gt;10% better compression). p.put(Packer.SEGMENT_LIMIT, "-1"); // reorder files for better compression. p.put(Packer.KEEP_FILE_ORDER, Packer.FALSE); // smear modification times to a single value. p.put(Packer.MODIFICATION_TIME, Packer.LATEST); // ignore all JAR deflation requests, // transmitting a single request to use "store" mode. p.put(Packer.DEFLATE_HINT, Packer.FALSE); // discard debug attributes p.put(Packer.CODE_ATTRIBUTE_PFX+"LineNumberTable", Packer.STRIP); // throw an error if an attribute is unrecognized p.put(Packer.UNKNOWN_ATTRIBUTE, Packer.ERROR); // pass one class file uncompressed: p.put(Packer.PASS_FILE_PFX+0, "mutants/Rogue.class"); try { JarFile jarFile = new JarFile("/tmp/testref.jar"); FileOutputStream fos = new FileOutputStream("/tmp/test.pack"); // Call the packer packer.pack(jarFile, fos); jarFile.close(); fos.close(); File f = new File("/tmp/test.pack"); FileOutputStream fostream = new FileOutputStream("/tmp/test.jar"); JarOutputStream jostream = new JarOutputStream(fostream); Unpacker unpacker = Pack200.newUnpacker(); // Call the unpacker unpacker.unpack(f, jostream); // Must explicitly close the output. jostream.close(); } catch (IOException ioe) { ioe.printStackTrace(); } </pre> </blockquote> <p> A Pack200 file compressed with gzip can be hosted on HTTP/1.1 web servers. The deployment applications can use "Accept-Encoding=pack200-gzip". This indicates to the server that the client application desires a version of the file encoded with Pack200 and further compressed with gzip. Please refer to Java Deployment Guide for more details and techniques. <p> Unless otherwise noted, passing a <tt> null </tt> argument to a constructor or method in this class will cause a <pre><code> NullPointerException </code></pre> to be thrown. </p><pre><code>public abstract class Pack200\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/jar/Pack200.html
Pack200.Packer	A										<section class="prog__container"><pre><code>public static interface Pack200.Packer\n</code></pre></section>	https://developer.android.com/reference/java/util/jar/Pack200.Packer.html
Pack200.Unpacker	A										<section class="prog__container"><p> The unpacker engine converts the packed stream to a JAR file. An instance of the engine can be obtained using <pre><code> newUnpacker() </code></pre> . <p> Every JAR file produced by this engine will include the string " <tt> PACK200 </tt> " as a zip file comment. This allows a deployer to detect if a JAR archive was packed and unpacked. <p> Note: Unless otherwise noted, passing a <tt> null </tt> argument to a constructor or method in this class will cause a <pre><code> NullPointerException </code></pre> to be thrown. <p> This version of the unpacker is compatible with all previous versions. </p><pre><code>public static interface Pack200.Unpacker\n</code></pre></section>	https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html
java.util.jar	A										<section class="prog__container">In JAR files, all file names must be encoded in the UTF-8 encoding.</section>	https://developer.android.com/reference/java/util/jar/package-summary.html
ConsoleHandler	A										<section class="prog__container"><pre><code>public class ConsoleHandler\n</code></pre></section>	https://developer.android.com/reference/java/util/logging/ConsoleHandler.html
ErrorManager	A										<section class="prog__container"><p> ErrorManager objects can be attached to Handlers to process any error that occurs on a Handler during Logging. <p> When processing logging output, if a Handler encounters problems then rather than throwing an Exception back to the issuer of the logging call (who is unlikely to be interested) the Handler should call its associated ErrorManager. </p><pre><code>public class ErrorManager\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/logging/ErrorManager.html
FileHandler	A										<section class="prog__container"><p> Simple file logging <tt> Handler </tt> . <p> The <tt> FileHandler </tt> can either write to a specified file, or it can write to a rotating set of files. <p> For a rotating set of files, as each file reaches a given size limit, it is closed, rotated out, and a new file opened. Successively older files are named by adding "0", "1", "2", etc. into the base filename. <p> By default buffering is enabled in the IO libraries but each log record is flushed out when it is complete. <p> By default the <tt> XMLFormatter </tt> class is used for formatting. <p> <b> Configuration: </b> By default each <tt> FileHandler </tt> is initialized using the following <tt> LogManager </tt> configuration properties. If properties are not defined (or have invalid values) then the specified default values are used. <ul> <li> java.util.logging.FileHandler.level specifies the default level for the <tt> Handler </tt> (defaults to <tt> Level.ALL </tt> ). <li> java.util.logging.FileHandler.filter specifies the name of a <tt> Filter </tt> class to use (defaults to no <tt> Filter </tt> ). <li> java.util.logging.FileHandler.formatter specifies the name of a <tt> Formatter </tt> class to use (defaults to <tt> java.util.logging.XMLFormatter </tt> ) <li> java.util.logging.FileHandler.encoding the name of the character set encoding to use (defaults to the default platform encoding). <li> java.util.logging.FileHandler.limit specifies an approximate maximum amount to write (in bytes) to any one file. If this is zero, then there is no limit. (Defaults to no limit). <li> java.util.logging.FileHandler.count specifies how many output files to cycle through (defaults to 1). <li> java.util.logging.FileHandler.pattern specifies a pattern for generating the output file name. See below for details. (Defaults to "%h/java%u.log"). <li> java.util.logging.FileHandler.append specifies whether the FileHandler should append onto any existing files (defaults to false). </li> </li> </li> </li> </li> </li> </li> </li> </ul> <p> <p> A pattern consists of a string that includes the following special components that will be replaced at runtime: <ul> <li> "/" the local pathname separator <li> "%t" the system temporary directory <li> "%h" the value of the "user.home" system property <li> "%g" the generation number to distinguish rotated logs <li> "%u" a unique number to resolve conflicts <li> "%%" translates to a single percent sign "%" </li> </li> </li> </li> </li> </li> </ul> If no "%g" field has been specified and the file count is greater than one, then the generation number will be added to the end of the generated filename, after a dot. <p> Thus for example a pattern of "%t/java%g.log" with a count of 2 would typically cause log files to be written on Solaris to /var/tmp/java0.log and /var/tmp/java1.log whereas on Windows 95 they would be typically written to C:\TEMP\java0.log and C:\TEMP\java1.log <p> Generation numbers follow the sequence 0, 1, 2, etc. <p> Normally the "%u" unique field is set to 0. However, if the <tt> FileHandler </tt> tries to open the filename and finds the file is currently in use by another process it will increment the unique number field and try again. This will be repeated until <tt> FileHandler </tt> finds a file name that is not currently in use. If there is a conflict and no "%u" field has been specified, it will be added at the end of the filename after a dot. (This will be after any automatically added generation number.) <p> Thus if three processes were all trying to log to fred%u.%g.txt then they might end up using fred0.0.txt, fred1.0.txt, fred2.0.txt as the first file in their rotating sequences. <p> Note that the use of unique ids to avoid conflicts is only guaranteed to work reliably when using a local disk file system. </p><pre><code>public class FileHandler\n</code></pre></section>	https://developer.android.com/reference/java/util/logging/FileHandler.html
Filter	A										<section class="prog__container"><p> A Filter can be used to provide fine grain control over what is logged, beyond the control provided by log levels. <p> Each Logger and each Handler can have a filter associated with it. The Logger or Handler will call the isLoggable method to check if a given LogRecord should be published. If isLoggable returns false, the LogRecord will be discarded. </p><pre><code>public interface Filter\n</code></pre></section>	https://developer.android.com/reference/java/util/logging/Filter.html
Formatter	A										<section class="prog__container"><p> A Formatter provides support for formatting LogRecords. <p> Typically each logging Handler will have a Formatter associated with it. The Formatter takes a LogRecord and converts it to a string. <p> Some formatters (such as the XMLFormatter) need to wrap head and tail strings around a set of formatted records. The getHeader and getTail methods can be used to obtain these strings. </p><pre><code>public abstract class Formatter\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/logging/Formatter.html
Handler	A										<section class="prog__container"><p> A <tt> Handler </tt> object takes log messages from a <tt> Logger </tt> and exports them. It might for example, write them to a console or write them to a file, or send them to a network logging service, or forward them to an OS log, or whatever. <p> A <tt> Handler </tt> can be disabled by doing a <tt> setLevel(Level.OFF) </tt> and can be re-enabled by doing a <tt> setLevel </tt> with an appropriate level. <p> <tt> Handler </tt> classes typically use <tt> LogManager </tt> properties to set default values for the <tt> Handler </tt> 's <tt> Filter </tt> , <tt> Formatter </tt> , and <tt> Level </tt> . See the specific documentation for each concrete <tt> Handler </tt> class. </p><pre><code>public abstract class Handler\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/logging/Handler.html
Level	A										<section class="prog__container"><p> The Level class defines a set of standard logging levels that can be used to control logging output. The logging Level objects are ordered and are specified by ordered integers. Enabling logging at a given level also enables logging at all higher levels. <p> Clients should normally use the predefined Level constants such as Level.SEVERE. <p> The levels in descending order are: <ul> <li> SEVERE (highest value) <li> WARNING <li> INFO <li> CONFIG <li> FINE <li> FINER <li> FINEST (lowest value) </li> </li> </li> </li> </li> </li> </li> </ul> In addition there is a level OFF that can be used to turn off logging, and a level ALL that can be used to enable logging of all messages. <p> It is possible for third parties to define additional logging levels by subclassing Level. In such cases subclasses should take care to chose unique integer level values and to ensure that they maintain the Object uniqueness property across serialization by defining a suitable readResolve method. </p><pre><code>public class Level\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/logging/Level.html
Logger	A										<section class="prog__container"><p> A Logger object is used to log messages for a specific system or application component. Loggers are normally named, using a hierarchical dot-separated namespace. Logger names can be arbitrary strings, but they should normally be based on the package name or class name of the logged component, such as java.net or javax.swing. In addition it is possible to create "anonymous" Loggers that are not stored in the Logger namespace. <p> Logger objects may be obtained by calls on one of the getLogger factory methods. These will either create a new Logger or return a suitable existing Logger. It is important to note that the Logger returned by one of the <pre><code> getLogger </code></pre> factory methods may be garbage collected at any time if a strong reference to the Logger is not kept. <p> Logging messages will be forwarded to registered Handler objects, which can forward the messages to a variety of destinations, including consoles, files, OS logs, etc. <p> Each Logger keeps track of a "parent" Logger, which is its nearest existing ancestor in the Logger namespace. <p> Each Logger has a "Level" associated with it. This reflects a minimum Level that this logger cares about. If a Logger's level is set to <tt> null </tt> , then its effective level is inherited from its parent, which may in turn obtain it recursively from its parent, and so on up the tree. <p> The log level can be configured based on the properties from the logging configuration file, as described in the description of the LogManager class. However it may also be dynamically changed by calls on the Logger.setLevel method. If a logger's level is changed the change may also affect child loggers, since any child logger that has <tt> null </tt> as its level will inherit its effective level from its parent. <p> On each logging call the Logger initially performs a cheap check of the request level (e.g., SEVERE or FINE) against the effective log level of the logger. If the request level is lower than the log level, the logging call returns immediately. <p> After passing this initial (cheap) test, the Logger will allocate a LogRecord to describe the logging message. It will then call a Filter (if present) to do a more detailed check on whether the record should be published. If that passes it will then publish the LogRecord to its output Handlers. By default, loggers also publish to their parent's Handlers, recursively up the tree. <p> Each Logger may have a ResourceBundle name associated with it. The named bundle will be used for localizing logging messages. If a Logger does not have its own ResourceBundle name, then it will inherit the ResourceBundle name from its parent, recursively up the tree. <p> Most of the logger output methods take a "msg" argument. This msg argument may be either a raw value or a localization key. During formatting, if the logger has (or inherits) a localization ResourceBundle and if the ResourceBundle has a mapping for the msg string, then the msg string is replaced by the localized value. Otherwise the original msg string is used. Typically, formatters use java.text.MessageFormat style formatting to format parameters, so for example a format string "{0} {1}" would format two parameters as strings. <p> When mapping ResourceBundle names to ResourceBundles, the Logger will first try to use the Thread's ContextClassLoader. If that is null it will try the SystemClassLoader instead. As a temporary transition feature in the initial implementation, if the Logger is unable to locate a ResourceBundle from the ContextClassLoader or SystemClassLoader the Logger will also search up the class stack and use successive calling ClassLoaders to try to locate a ResourceBundle. (This call stack search is to allow containers to transition to using ContextClassLoaders and is likely to be removed in future versions.) <p> Formatting (including localization) is the responsibility of the output Handler, which will typically call a Formatter. <p> Note that formatting need not occur synchronously. It may be delayed until a LogRecord is actually written to an external sink. <p> The logging methods are grouped in five main categories: <ul> <li> <p> There are a set of "log" methods that take a log level, a message string, and optionally some parameters to the message string. <li> <p> There are a set of "logp" methods (for "log precise") that are like the "log" methods, but also take an explicit source class name and method name. <li> <p> There are a set of "logrb" method (for "log with resource bundle") that are like the "logp" method, but also take an explicit resource bundle name for use in localizing the log message. <li> <p> There are convenience methods for tracing method entries (the "entering" methods), method returns (the "exiting" methods) and throwing exceptions (the "throwing" methods). <li> <p> Finally, there are a set of convenience methods for use in the very simplest cases, when a developer simply wants to log a simple string at a given log level. These methods are named after the standard Level names ("severe", "warning", "info", etc.) and take a single argument, a message string. </p><pre><code>public class Logger\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/logging/Logger.html
LoggingMXBean	A										<section class="prog__container"><pre><code>public interface LoggingMXBean\n</code></pre></section>	https://developer.android.com/reference/java/util/logging/LoggingMXBean.html
LoggingPermission	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public final class LoggingPermission\n</code></pre></section>	https://developer.android.com/reference/java/util/logging/LoggingPermission.html
LogManager	A										<section class="prog__container"><p> There is a single global LogManager object that is used to maintain a set of shared state about Loggers and log services. <p> This LogManager object: <ul> <li> Manages a hierarchical namespace of Logger objects. All named Loggers are stored in this namespace. <li> Manages a set of logging control properties. These are simple key-value pairs that can be used by Handlers and other logging objects to configure themselves. </li> </li> </ul> <p> The global LogManager object can be retrieved using LogManager.getLogManager(). The LogManager object is created during class initialization and cannot subsequently be changed. <p> At startup the LogManager class is located using the java.util.logging.manager system property. <p> By default, the LogManager reads its initial configuration from a properties file "lib/logging.properties" in the JRE directory. If you edit that property file you can change the default logging configuration for all uses of that JRE. <p> In addition, the LogManager uses two optional system properties that allow more control over reading the initial configuration: <ul> <li> "java.util.logging.config.class" <li> "java.util.logging.config.file" </li> </li> </ul> These two properties may be set via the Preferences API, or as command line property definitions to the "java" command, or as system property definitions passed to JNI_CreateJavaVM. <p> If the "java.util.logging.config.class" property is set, then the property value is treated as a class name. The given class will be loaded, an object will be instantiated, and that object's constructor is responsible for reading in the initial configuration. (That object may use other system properties to control its configuration.) The alternate configuration class can use <tt> readConfiguration(InputStream) </tt> to define properties in the LogManager. <p> If "java.util.logging.config.class" property is <b> not </b> set, then the "java.util.logging.config.file" system property can be used to specify a properties file (in java.util.Properties format). The initial logging configuration will be read from this file. <p> If neither of these properties is defined then, as described above, the LogManager will read its initial configuration from a properties file "lib/logging.properties" in the JRE directory. <p> The properties for loggers and Handlers will have names starting with the dot-separated name for the handler or logger. <p> The global logging properties may include: <ul> <li> A property "handlers". This defines a whitespace or comma separated list of class names for handler classes to load and register as handlers on the root Logger (the Logger named ""). Each class name must be for a Handler class which has a default constructor. Note that these Handlers may be created lazily, when they are first used. <li> A property "&lt;logger&gt;.handlers". This defines a whitespace or comma separated list of class names for handlers classes to load and register as handlers to the specified logger. Each class name must be for a Handler class which has a default constructor. Note that these Handlers may be created lazily, when they are first used. <li> A property "&lt;logger&gt;.useParentHandlers". This defines a boolean value. By default every logger calls its parent in addition to handling the logging message itself, this often result in messages being handled by the root logger as well. When setting this property to false a Handler needs to be configured for this logger otherwise no logging messages are delivered. <li> A property "config". This property is intended to allow arbitrary configuration code to be run. The property defines a whitespace or comma separated list of class names. A new instance will be created for each named class. The default constructor of each class may execute arbitrary code to update the logging configuration, such as setting logger levels, adding handlers, adding filters, etc. </li> </li> </li> </li> </ul> <p> Note that all classes loaded during LogManager configuration are first searched on the system class path before any user class path. That includes the LogManager class, any config classes, and any handler classes. <p> Loggers are organized into a naming hierarchy based on their dot separated names. Thus "a.b.c" is a child of "a.b", but "a.b1" and a.b2" are peers. <p> All properties whose names end with ".level" are assumed to define log levels for Loggers. Thus "foo.level" defines a log level for the logger called "foo" and (recursively) for any of its children in the naming hierarchy. Log Levels are applied in the order they are defined in the properties file. Thus level settings for child nodes in the tree should come after settings for their parents. The property name ".level" can be used to set the level for the root of the tree. <p> All methods on the LogManager object are multi-thread safe. </p><pre><code>public class LogManager\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/logging/LogManager.html
LogRecord	A										<section class="prog__container"><p> LogRecord objects are used to pass logging requests between the logging framework and individual log Handlers. <p> When a LogRecord is passed into the logging framework it logically belongs to the framework and should no longer be used or updated by the client application. <p> Note that if the client application has not specified an explicit source method name and source class name, then the LogRecord class will infer them automatically when they are first accessed (due to a call on getSourceMethodName or getSourceClassName) by analyzing the call stack. Therefore, if a logging Handler wants to pass off a LogRecord to another thread, or to transmit it over RMI, and if it wishes to subsequently obtain method name or class name information it should call one of getSourceClassName or getSourceMethodName to force the values to be filled in. <p> <b> Serialization notes: </b> <ul> <li> The LogRecord class is serializable. <li> Because objects in the parameters array may not be serializable, during serialization all objects in the parameters array are written as the corresponding Strings (using Object.toString). <li> The ResourceBundle is not transmitted as part of the serialized form, but the resource bundle name is, and the recipient object's readObject method will attempt to locate a suitable resource bundle. </li> </li> </li> </ul> </p><pre><code>public class LogRecord\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/logging/LogRecord.html
MemoryHandler	A										<section class="prog__container"><p> <tt> Handler </tt> that buffers requests in a circular buffer in memory. <p> Normally this <tt> Handler </tt> simply stores incoming <tt> LogRecords </tt> into its memory buffer and discards earlier records. This buffering is very cheap and avoids formatting costs. On certain trigger conditions, the <tt> MemoryHandler </tt> will push out its current buffer contents to a target <tt> Handler </tt> , which will typically publish them to the outside world. <p> There are three main models for triggering a push of the buffer: <ul> <li> An incoming <tt> LogRecord </tt> has a type that is greater than a pre-defined level, the <tt> pushLevel </tt> . <li> An external class calls the <tt> push </tt> method explicitly. <li> A subclass overrides the <tt> log </tt> method and scans each incoming <tt> LogRecord </tt> and calls <tt> push </tt> if a record matches some desired criteria. </li> </li> </li> </ul> <p> <b> Configuration: </b> By default each <tt> MemoryHandler </tt> is initialized using the following LogManager configuration properties. If properties are not defined (or have invalid values) then the specified default values are used. If no default value is defined then a RuntimeException is thrown. <ul> <li> java.util.logging.MemoryHandler.level specifies the level for the <tt> Handler </tt> (defaults to <tt> Level.ALL </tt> ). <li> java.util.logging.MemoryHandler.filter specifies the name of a <tt> Filter </tt> class to use (defaults to no <tt> Filter </tt> ). <li> java.util.logging.MemoryHandler.size defines the buffer size (defaults to 1000). <li> java.util.logging.MemoryHandler.push defines the <tt> pushLevel </tt> (defaults to <tt> level.SEVERE </tt> ). <li> java.util.logging.MemoryHandler.target specifies the name of the target <tt> Handler </tt> class. (no default). </li> </li> </li> </li> </li> </ul> </p><pre><code>public class MemoryHandler\n</code></pre></section>	https://developer.android.com/reference/java/util/logging/MemoryHandler.html
java.util.logging	A										<section class="prog__container">Provides the classes and interfaces of the Java</section>	https://developer.android.com/reference/java/util/logging/package-summary.html
SimpleFormatter	A										<section class="prog__container"><p> Print a brief summary of the <pre><code> LogRecord </code></pre> in a human readable format. The summary will typically be 1 or 2 lines. <p> <b> Configuration: </b> The <pre><code> SimpleFormatter </code></pre> is initialized with the format string specified in the <pre><code> java.util.logging.SimpleFormatter.format </code></pre> property to format </p><pre><code>public class SimpleFormatter\n</code></pre></section>	https://developer.android.com/reference/java/util/logging/SimpleFormatter.html
SocketHandler	A										<section class="prog__container"><p> Simple network logging <tt> Handler </tt> . <p> <tt> LogRecords </tt> are published to a network stream connection. By default the <tt> XMLFormatter </tt> class is used for formatting. <p> <b> Configuration: </b> By default each <tt> SocketHandler </tt> is initialized using the following <tt> LogManager </tt> configuration properties. If properties are not defined (or have invalid values) then the specified default values are used. <ul> <li> java.util.logging.SocketHandler.level specifies the default level for the <tt> Handler </tt> (defaults to <tt> Level.ALL </tt> ). <li> java.util.logging.SocketHandler.filter specifies the name of a <tt> Filter </tt> class to use (defaults to no <tt> Filter </tt> ). <li> java.util.logging.SocketHandler.formatter specifies the name of a <tt> Formatter </tt> class to use (defaults to <tt> java.util.logging.XMLFormatter </tt> ). <li> java.util.logging.SocketHandler.encoding the name of the character set encoding to use (defaults to the default platform encoding). <li> java.util.logging.SocketHandler.host specifies the target host name to connect to (no default). <li> java.util.logging.SocketHandler.port specifies the target TCP port to use (no default). </li> </li> </li> </li> </li> </li> </ul> <p> The output IO stream is buffered, but is flushed after each <tt> LogRecord </tt> is written. </p><pre><code>public class SocketHandler\n</code></pre></section>	https://developer.android.com/reference/java/util/logging/SocketHandler.html
StreamHandler	A										<section class="prog__container"><p> Stream based logging <tt> Handler </tt> . <p> This is primarily intended as a base class or support class to be used in implementing other logging <tt> Handlers </tt> . <p> <tt> LogRecords </tt> are published to a given <tt> java.io.OutputStream </tt> . <p> <b> Configuration: </b> By default each <tt> StreamHandler </tt> is initialized using the following <tt> LogManager </tt> configuration properties. If properties are not defined (or have invalid values) then the specified default values are used. <ul> <li> java.util.logging.StreamHandler.level specifies the default level for the <tt> Handler </tt> (defaults to <tt> Level.INFO </tt> ). <li> java.util.logging.StreamHandler.filter specifies the name of a <tt> Filter </tt> class to use (defaults to no <tt> Filter </tt> ). <li> java.util.logging.StreamHandler.formatter specifies the name of a <tt> Formatter </tt> class to use (defaults to <tt> java.util.logging.SimpleFormatter </tt> ). <li> java.util.logging.StreamHandler.encoding the name of the character set encoding to use (defaults to the default platform encoding). </li> </li> </li> </li> </ul> </p><pre><code>public class StreamHandler\n</code></pre></section>	https://developer.android.com/reference/java/util/logging/StreamHandler.html
XMLFormatter	A										<section class="prog__container"><p> Format a LogRecord into a standard XML format. <p> The DTD specification is provided as Appendix A to the Java Logging APIs specification. <p> The XMLFormatter can be used with arbitrary character encodings, but it is recommended that it normally be used with UTF-8. The character encoding can be set on the output Handler. </p><pre><code>public class XMLFormatter\n</code></pre></section>	https://developer.android.com/reference/java/util/logging/XMLFormatter.html
AbstractPreferences	A										<section class="prog__container"><p> This class provides a skeletal implementation of the <pre><code> Preferences </code></pre> class, greatly easing the task of implementing it. <p> <strong> This class is for <tt> Preferences </tt> implementers only. Normal users of the <tt> Preferences </tt> facility should have no need to consult this documentation. The <pre><code> Preferences </code></pre> documentation should suffice. </strong> <p> Implementors must override the nine abstract service-provider interface (SPI) methods: <pre><code> getSpi(String) </code></pre> , <pre><code> putSpi(String, String) </code></pre> , <pre><code> removeSpi(String) </code></pre> , <pre><code> childSpi(String) </code></pre> , <pre><code> removeNodeSpi() </code></pre> , <pre><code> keysSpi() </code></pre> , <pre><code> childrenNamesSpi() </code></pre> , <pre><code> syncSpi() </code></pre> and <pre><code> flushSpi() </code></pre> . All of the concrete methods specify precisely how they are implemented atop these SPI methods. The implementor may, at his discretion, override one or more of the concrete methods if the default implementation is unsatisfactory for any reason, such as performance. <p> The SPI methods fall into three groups concerning exception behavior. The <tt> getSpi </tt> method should never throw exceptions, but it doesn't really matter, as any exception thrown by this method will be intercepted by <pre><code> get(String, String) </code></pre> , which will return the specified default value to the caller. The <tt> removeNodeSpi, keysSpi, childrenNamesSpi, syncSpi </tt> and <tt> flushSpi </tt> methods are specified to throw <pre><code> BackingStoreException </code></pre> , and the implementation is required to throw this checked exception if it is unable to perform the operation. The exception propagates outward, causing the corresponding API method to fail. <p> The remaining SPI methods <pre><code> putSpi(String, String) </code></pre> , <pre><code> removeSpi(String) </code></pre> and <pre><code> childSpi(String) </code></pre> have more complicated exception behavior. They are not specified to throw <tt> BackingStoreException </tt> , as they can generally obey their contracts even if the backing store is unavailable. This is true because they return no information and their effects are not required to become permanent until a subsequent call to <pre><code> flush() </code></pre> or <pre><code> sync() </code></pre> . Generally speaking, these SPI methods should not throw exceptions. In some implementations, there may be circumstances under which these calls cannot even enqueue the requested operation for later processing. Even under these circumstances it is generally better to simply ignore the invocation and return, rather than throwing an exception. Under these circumstances, however, all subsequent invocations of <tt> flush() </tt> and <tt> sync </tt> should return <tt> false </tt> , as returning <tt> true </tt> would imply that all previous operations had successfully been made permanent. <p> There is one circumstance under which <tt> putSpi, removeSpi and childSpi </tt> <i> should </i> throw an exception: if the caller lacks sufficient privileges on the underlying operating system to perform the requested operation. This will, for instance, occur on most systems if a non-privileged user attempts to modify system preferences. (The required privileges will vary from implementation to implementation. On some implementations, they are the right to modify the contents of some directory in the file system; on others they are the right to modify contents of some key in a registry.) Under any of these circumstances, it would generally be undesirable to let the program continue executing as if these operations would become permanent at a later time. While implementations are not required to throw an exception under these circumstances, they are encouraged to do so. A <pre><code> SecurityException </code></pre> would be appropriate. <p> Most of the SPI methods require the implementation to read or write information at a preferences node. The implementor should beware of the fact that another VM may have concurrently deleted this node from the backing store. It is the implementation's responsibility to recreate the node if it has been deleted. <p> Implementation note: In Sun's default <tt> Preferences </tt> implementations, the user's identity is inherited from the underlying operating system and does not change for the lifetime of the virtual machine. It is recognized that server-side <tt> Preferences </tt> implementations may have the user identity change from request to request, implicitly passed to <tt> Preferences </tt> methods via the use of a static <pre><code> ThreadLocal </code></pre> instance. Authors of such implementations are <i> strongly </i> encouraged to determine the user at the time preferences are accessed (for example by the <pre><code> get(String, String) </code></pre> or <pre><code> put(String, String) </code></pre> method) rather than permanently associating a user with each <tt> Preferences </tt> instance. The latter behavior conflicts with normal <tt> Preferences </tt> usage and would lead to great confusion. </p><pre><code>public abstract class AbstractPreferences\n</code></pre></section>	https://developer.android.com/reference/java/util/prefs/AbstractPreferences.html
BackingStoreException	A										<section class="prog__container"><p> Thrown to indicate that a preferences operation could not complete because of a failure in the backing store, or a failure to contact the backing store.</p><pre><code>public class BackingStoreException\n</code></pre></section>	https://developer.android.com/reference/java/util/prefs/BackingStoreException.html
InvalidPreferencesFormatException	A										<section class="prog__container"><p> Thrown to indicate that an operation could not complete because the input did not conform to the appropriate XML document type for a collection of preferences, as per the <pre><code> Preferences </code></pre> specification.</p><pre><code>public class InvalidPreferencesFormatException\n</code></pre></section>	https://developer.android.com/reference/java/util/prefs/InvalidPreferencesFormatException.html
NodeChangeEvent	A										<section class="prog__container"><p> An event emitted by a <tt> Preferences </tt> node to indicate that a child of that node has been added or removed. <p> Note, that although NodeChangeEvent inherits Serializable interface from java.util.EventObject, it is not intended to be Serializable. Appropriate serialization methods are implemented to throw NotSerializableException. </p><pre><code>public class NodeChangeEvent\n</code></pre></section>	https://developer.android.com/reference/java/util/prefs/NodeChangeEvent.html
NodeChangeListener	A										<section class="prog__container"><p> A listener for receiving preference node change events.</p><pre><code>public interface NodeChangeListener\nimplements EventListener</code></pre></section>	https://developer.android.com/reference/java/util/prefs/NodeChangeListener.html
java.util.prefs	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/java/util/prefs/package-summary.html
PreferenceChangeEvent	A										<section class="prog__container"><p> An event emitted by a <tt> Preferences </tt> node to indicate that a preference has been added, removed or has had its value changed. <p> Note, that although PreferenceChangeEvent inherits Serializable interface from EventObject, it is not intended to be Serializable. Appropriate serialization methods are implemented to throw NotSerializableException. </p><pre><code>public class PreferenceChangeEvent\n</code></pre></section>	https://developer.android.com/reference/java/util/prefs/PreferenceChangeEvent.html
PreferenceChangeListener	A										<section class="prog__container"><p> A listener for receiving preference change events.</p><pre><code>public interface PreferenceChangeListener\nimplements EventListener</code></pre></section>	https://developer.android.com/reference/java/util/prefs/PreferenceChangeListener.html
Preferences	A										<section class="prog__container"><p> A node in a hierarchical collection of preference data. This class allows applications to store and retrieve user and system preference and configuration data. This data is stored persistently in an implementation-dependent backing store. Typical implementations include flat files, OS-specific registries, directory servers and SQL databases. The user of this class needn't be concerned with details of the backing store. <p> There are two separate trees of preference nodes, one for user preferences and one for system preferences. Each user has a separate user preference tree, and all users in a given system share the same system preference tree. The precise description of "user" and "system" will vary from implementation to implementation. Typical information stored in the user preference tree might include font choice, color choice, or preferred window location and size for a particular application. Typical information stored in the system preference tree might include installation configuration data for an application. <p> Nodes in a preference tree are named in a similar fashion to directories in a hierarchical file system. Every node in a preference tree has a <i> node name </i> (which is not necessarily unique), a unique <i> absolute path name </i> , and a path name <i> relative </i> to each ancestor including itself. <p> The root node has a node name of the empty string (""). Every other node has an arbitrary node name, specified at the time it is created. The only restrictions on this name are that it cannot be the empty string, and it cannot contain the slash character ('/'). <p> The root node has an absolute path name of <tt> "/" </tt> . Children of the root node have absolute path names of <tt> "/" + </tt> <i> &lt;node name&gt; </i> . All other nodes have absolute path names of <i> &lt;parent's absolute path name&gt; </i> <tt> + "/" + </tt> <i> &lt;node name&gt; </i> . Note that all absolute path names begin with the slash character. <p> A node <i> n </i> 's path name relative to its ancestor <i> a </i> is simply the string that must be appended to <i> a </i> 's absolute path name in order to form <i> n </i> 's absolute path name, with the initial slash character (if present) removed. Note that: <ul> <li> No relative path names begin with the slash character. <li> Every node's path name relative to itself is the empty string. <li> Every node's path name relative to its parent is its node name (except for the root node, which does not have a parent). <li> Every node's path name relative to the root is its absolute path name with the initial slash character removed. </li> </li> </li> </li> </ul> <p> Note finally that: <ul> <li> No path name contains multiple consecutive slash characters. <li> No path name with the exception of the root's absolute path name ends in the slash character. <li> Any string that conforms to these two rules is a valid path name. </li> </li> </li> </ul> <p> All of the methods that modify preferences data are permitted to operate asynchronously; they may return immediately, and changes will eventually propagate to the persistent backing store with an implementation-dependent delay. The <tt> flush </tt> method may be used to synchronously force updates to the backing store. Normal termination of the Java Virtual Machine will <i> not </i> result in the loss of pending updates -- an explicit <tt> flush </tt> invocation is <i> not </i> required upon termination to ensure that pending updates are made persistent. <p> All of the methods that read preferences from a <tt> Preferences </tt> object require the invoker to provide a default value. The default value is returned if no value has been previously set <i> or if the backing store is unavailable </i> . The intent is to allow applications to operate, albeit with slightly degraded functionality, even if the backing store becomes unavailable. Several methods, like <tt> flush </tt> , have semantics that prevent them from operating if the backing store is unavailable. Ordinary applications should have no need to invoke any of these methods, which can be identified by the fact that they are declared to throw <pre><code> BackingStoreException </code></pre> . <p> The methods in this class may be invoked concurrently by multiple threads in a single JVM without the need for external synchronization, and the results will be equivalent to some serial execution. If this class is used concurrently <i> by multiple JVMs </i> that store their preference data in the same backing store, the data store will not be corrupted, but no other guarantees are made concerning the consistency of the preference data. <p> This class contains an export/import facility, allowing preferences to be "exported" to an XML document, and XML documents representing preferences to be "imported" back into the system. This facility may be used to back up all or part of a preference tree, and subsequently restore from the backup. <p> The XML document has the following DOCTYPE declaration: <pre> &lt;!DOCTYPE preferences SYSTEM "http://java.sun.com/dtd/preferences.dtd"&gt; </pre> Note that the system URI (http://java.sun.com/dtd/preferences.dtd) is <i> not </i> accessed when exporting or importing preferences; it merely serves as a string to uniquely identify the DTD, which is: <pre> &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!-- DTD for a Preferences tree. --&gt; &lt;!-- The preferences element is at the root of an XML document representing a Preferences tree. --&gt; &lt;!ELEMENT preferences (root)&gt; &lt;!-- The preferences element contains an optional version attribute, which specifies version of DTD. --&gt; &lt;!ATTLIST preferences EXTERNAL_XML_VERSION CDATA "0.0" &gt; &lt;!-- The root element has a map representing the root's preferences (if any), and one node for each child of the root (if any). --&gt; &lt;!ELEMENT root (map, node*) &gt; &lt;!-- Additionally, the root contains a type attribute, which specifies whether it's the system or user root. --&gt; &lt;!ATTLIST root type (system|user) #REQUIRED &gt; &lt;!-- Each node has a map representing its preferences (if any), and one node for each child (if any). --&gt; &lt;!ELEMENT node (map, node*) &gt; &lt;!-- Additionally, each node has a name attribute --&gt; &lt;!ATTLIST node name CDATA #REQUIRED &gt; &lt;!-- A map represents the preferences stored at a node (if any). --&gt; &lt;!ELEMENT map (entry*) &gt; &lt;!-- An entry represents a single preference, which is simply a key-value pair. --&gt; &lt;!ELEMENT entry EMPTY &gt; &lt;!ATTLIST entry key CDATA #REQUIRED value CDATA #REQUIRED &gt; </pre> Every <tt> Preferences </tt> implementation must have an associated <pre><code> PreferencesFactory </code></pre> implementation. Every Java(TM) SE implementation must provide some means of specifying which <tt> PreferencesFactory </tt> implementation is used to generate the root preferences nodes. This allows the administrator to replace the default preferences implementation with an alternative implementation. <p> Implementation note: In Sun's JRE, the <tt> PreferencesFactory </tt> implementation is located as follows: <ol> <li> <p> If the system property <tt> java.util.prefs.PreferencesFactory </tt> is defined, then it is taken to be the fully-qualified name of a class implementing the <tt> PreferencesFactory </tt> interface. The class is loaded and instantiated; if this process fails then an unspecified error is thrown. </p><pre><code>public abstract class Preferences\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/prefs/Preferences.html
PreferencesFactory	A										<section class="prog__container"><p> A factory object that generates Preferences objects. Providers of new <pre><code> Preferences </code></pre> implementations should provide corresponding <tt> PreferencesFactory </tt> implementations so that the new <tt> Preferences </tt> implementation can be installed in place of the platform-specific default implementation. <p> <strong> This class is for <tt> Preferences </tt> implementers only. Normal users of the <tt> Preferences </tt> facility should have no need to consult this documentation. </strong> </p><pre><code>public interface PreferencesFactory\n</code></pre></section>	https://developer.android.com/reference/java/util/prefs/PreferencesFactory.html
Matcher	A										<section class="prog__container"><p> An engine that performs match operations on a <pre><code> </code></pre> character sequence <pre><code> </code></pre></p><pre><code>public final class Matcher\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/regex/Matcher.html
MatchResult	A										<section class="prog__container"><p> The result of a match operation. <p> This interface contains query methods used to determine the results of a match against a regular expression. The match boundaries, groups and group boundaries can be seen but not modified through a <pre><code> MatchResult </code></pre> . </p><pre><code>public interface MatchResult\n</code></pre></section>	https://developer.android.com/reference/java/util/regex/MatchResult.html
java.util.regex	A										<section class="prog__container">An instance of the</section>	https://developer.android.com/reference/java/util/regex/package-summary.html
Pattern	A										<section class="prog__container"><p> A compiled representation of a regular expression. <p> A regular expression, specified as a string, must first be compiled into an instance of this class. The resulting pattern can then be used to create a <pre><code> Matcher </code></pre> object that can match arbitrary <pre><code> </code></pre> character sequences <pre><code> </code></pre> </p><pre><code>public final class Pattern\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/regex/Pattern.html
PatternSyntaxException	A										<section class="prog__container"><p> Unchecked exception thrown to indicate a syntax error in a regular-expression pattern.</p><pre><code>public class PatternSyntaxException\n</code></pre></section>	https://developer.android.com/reference/java/util/regex/PatternSyntaxException.html
BaseStream	A										<section class="prog__container"><p> Base interface for streams, which are sequences of elements supporting sequential and parallel aggregate operations. The following example illustrates an aggregate operation using the stream types <pre><code> Stream </code></pre> and <pre><code> IntStream </code></pre> , computing the sum of the weights of the red widgets: <pre><pre><code>int sum = widgets.stream() .filter(w -&gt; w.getColor() == RED) .mapToInt(w -&gt; w.getWeight()) .sum(); </code></pre></pre> See the class documentation for <pre><code> Stream </code></pre> and the package documentation for java.util.stream for additional specification of streams, stream operations, stream pipelines, and parallelism, which governs the behavior of all stream types.</p><pre><code>public interface BaseStream\nimplements AutoCloseable</code></pre></section>	https://developer.android.com/reference/java/util/stream/BaseStream.html
Collector.Characteristics	A										<section class="prog__container"><p> Characteristics indicating properties of a <pre><code> Collector </code></pre> , which can be used to optimize reduction implementations.</p><pre><code>public static final enum Collector.Characteristics\n</code></pre></section>	https://developer.android.com/reference/java/util/stream/Collector.Characteristics.html
Collector	A										<section class="prog__container"><p> A mutable reduction operation that accumulates input elements into a mutable result container, optionally transforming the accumulated result into a final representation after all input elements have been processed. Reduction operations can be performed either sequentially or in parallel. <p> Examples of mutable reduction operations include: accumulating elements into a <pre><code> Collection </code></pre> ; concatenating strings using a <pre><code> StringBuilder </code></pre> ; computing summary information about elements such as sum, min, max, or average; computing "pivot table" summaries such as "maximum valued transaction by seller", etc. The class <pre><code> Collectors </code></pre> provides implementations of many common mutable reductions. <p> A <pre><code> Collector </code></pre> is specified by four functions that work together to accumulate entries into a mutable result container, and optionally perform a final transform on the result. They are: <ul> <li> creation of a new result container ( <pre><code> supplier() </code></pre> ) </li> <li> incorporating a new data element into a result container ( <pre><code> accumulator() </code></pre> ) </li> <li> combining two result containers into one ( <pre><code> combiner() </code></pre> ) </li> <li> performing an optional final transform on the container ( <pre><code> finisher() </code></pre> ) </li> </ul> <p> Collectors also have a set of characteristics, such as <pre><code> CONCURRENT </code></pre> , that provide hints that can be used by a reduction implementation to provide better performance. <p> A sequential implementation of a reduction using a collector would create a single result container using the supplier function, and invoke the accumulator function once for each input element. A parallel implementation would partition the input, create a result container for each partition, accumulate the contents of each partition into a subresult for that partition, and then use the combiner function to merge the subresults into a combined result. <p> To ensure that sequential and parallel executions produce equivalent results, the collector functions must satisfy an <em> identity </em> and an associativity constraints. <p> The identity constraint says that for any partially accumulated result, combining it with an empty result container must produce an equivalent result. That is, for a partially accumulated result <pre><code> a </code></pre> that is the result of any series of accumulator and combiner invocations, <pre><code> a </code></pre> must be equivalent to <pre><code> combiner.apply(a, supplier.get()) </code></pre> . <p> The associativity constraint says that splitting the computation must produce an equivalent result. That is, for any input elements <pre><code> t1 </code></pre> and <pre><code> t2 </code></pre> , the results <pre><code> r1 </code></pre> and <pre><code> r2 </code></pre> in the computation below must be equivalent: <pre><pre><code>A a1 = supplier.get(); accumulator.accept(a1, t1); accumulator.accept(a1, t2); R r1 = finisher.apply(a1); // result without splitting A a2 = supplier.get(); accumulator.accept(a2, t1); A a3 = supplier.get(); accumulator.accept(a3, t2); R r2 = finisher.apply(combiner.apply(a2, a3)); // result with splitting </code></pre> </pre> <p> For collectors that do not have the <pre><code> UNORDERED </code></pre> characteristic, two accumulated results <pre><code> a1 </code></pre> and <pre><code> a2 </code></pre> are equivalent if <pre><code> finisher.apply(a1).equals(finisher.apply(a2)) </code></pre> . For unordered collectors, equivalence is relaxed to allow for non-equality related to differences in order. (For example, an unordered collector that accumulated elements to a <pre><code> List </code></pre> would consider two lists equivalent if they contained the same elements, ignoring order.) <p> Libraries that implement reduction based on <pre><code> Collector </code></pre> , such as <pre><code> collect(Collector) </code></pre> , must adhere to the following constraints: <ul> <li> The first argument passed to the accumulator function, both arguments passed to the combiner function, and the argument passed to the finisher function must be the result of a previous invocation of the result supplier, accumulator, or combiner functions. </li> <li> The implementation should not do anything with the result of any of the result supplier, accumulator, or combiner functions other than to pass them again to the accumulator, combiner, or finisher functions, or return them to the caller of the reduction operation. </li> <li> If a result is passed to the combiner or finisher function, and the same object is not returned from that function, it is never used again. </li> <li> Once a result is passed to the combiner or finisher function, it is never passed to the accumulator function again. </li> <li> For non-concurrent collectors, any result returned from the result supplier, accumulator, or combiner functions must be serially thread-confined. This enables collection to occur in parallel without the <pre><code> Collector </code></pre> needing to implement any additional synchronization. The reduction implementation must manage that the input is properly partitioned, that partitions are processed in isolation, and combining happens only after accumulation is complete. </li> <li> For concurrent collectors, an implementation is free to (but not required to) implement reduction concurrently. A concurrent reduction is one where the accumulator function is called concurrently from multiple threads, using the same concurrently-modifiable result container, rather than keeping the result isolated during accumulation. A concurrent reduction should only be applied if the collector has the <pre><code> UNORDERED </code></pre> characteristics or if the originating data is unordered. </li> </ul> <p> In addition to the predefined implementations in <pre><code> Collectors </code></pre> , the static factory methods <pre><code> of(Supplier, BiConsumer, BinaryOperator, Characteristics) </code></pre> can be used to construct collectors. For example, you could create a collector that accumulates widgets into a <pre><code> TreeSet </code></pre> with: <pre><pre><code>Collector&lt;Widget, ?, TreeSet&lt;Widget&gt;&gt; intoSet = Collector.of(TreeSet::new, TreeSet::add, (left, right) -&gt; { left.addAll(right); return left; }); </code></pre></pre> (This behavior is also implemented by the predefined collector <pre><code> toCollection(Supplier) </code></pre> ). </p><pre><code>public interface Collector\n</code></pre></section>	https://developer.android.com/reference/java/util/stream/Collector.html
Collectors	A										<section class="prog__container"><p> Implementations of <pre><code> Collector </code></pre> that implement various useful reduction operations, such as accumulating elements into collections, summarizing elements according to various criteria, etc. <p> The following are examples of using the predefined collectors to perform common mutable reduction tasks: <pre><pre><code>// Accumulate names into a List List&lt;String&gt; list = people.stream().map(Person::getName).collect(Collectors.toList()); // Accumulate names into a TreeSet Set&lt;String&gt; set = people.stream().map(Person::getName).collect(Collectors.toCollection(TreeSet::new)); // Convert elements to strings and concatenate them, separated by commas String joined = things.stream() .map(Object::toString) .collect(Collectors.joining(", ")); // Compute sum of salaries of employee int total = employees.stream() .collect(Collectors.summingInt(Employee::getSalary))); // Group employees by department Map&lt;Department, List&lt;Employee&gt;&gt; byDept = employees.stream() .collect(Collectors.groupingBy(Employee::getDepartment)); // Compute sum of salaries by department Map&lt;Department, Integer&gt; totalByDept = employees.stream() .collect(Collectors.groupingBy(Employee::getDepartment, Collectors.summingInt(Employee::getSalary))); // Partition students into passing and failing Map&lt;Boolean, List&lt;Student&gt;&gt; passingFailing = students.stream() .collect(Collectors.partitioningBy(s -&gt; s.getGrade() &gt;= PASS_THRESHOLD)); </code></pre></pre> </p><pre><code>public final class Collectors\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/stream/Collectors.html
DoubleStream.Builder	A										<section class="prog__container"><p> A mutable builder for a <pre><code> DoubleStream </code></pre> . <p> A stream builder has a lifecycle, which starts in a building phase, during which elements can be added, and then transitions to a built phase, after which elements may not be added. The built phase begins when the <pre><code> build() </code></pre> method is called, which creates an ordered stream whose elements are the elements that were added to the stream builder, in the order they were added. </p><pre><code>public static interface DoubleStream.Builder\nimplements DoubleConsumer</code></pre></section>	https://developer.android.com/reference/java/util/stream/DoubleStream.Builder.html
DoubleStream	A										<section class="prog__container"><p> A sequence of primitive double-valued elements supporting sequential and parallel aggregate operations. This is the <pre><code> double </code></pre> primitive specialization of <pre><code> Stream </code></pre> . <p> The following example illustrates an aggregate operation using <pre><code> Stream </code></pre> and <pre><code> DoubleStream </code></pre> , computing the sum of the weights of the red widgets: <pre><pre><code>double sum = widgets.stream() .filter(w -&gt; w.getColor() == RED) .mapToDouble(w -&gt; w.getWeight()) .sum(); </code></pre></pre> See the class documentation for <pre><code> Stream </code></pre> and the package documentation for java.util.stream for additional specification of streams, stream operations, stream pipelines, and parallelism. </p><pre><code>public interface DoubleStream\nimplements BaseStream&lt;Double,&nbsp;DoubleStream&gt;</code></pre></section>	https://developer.android.com/reference/java/util/stream/DoubleStream.html
IntStream.Builder	A										<section class="prog__container"><p> A mutable builder for an <pre><code> IntStream </code></pre> . <p> A stream builder has a lifecycle, which starts in a building phase, during which elements can be added, and then transitions to a built phase, after which elements may not be added. The built phase begins when the <pre><code> build() </code></pre> method is called, which creates an ordered stream whose elements are the elements that were added to the stream builder, in the order they were added. </p><pre><code>public static interface IntStream.Builder\nimplements IntConsumer</code></pre></section>	https://developer.android.com/reference/java/util/stream/IntStream.Builder.html
IntStream	A										<section class="prog__container"><p> A sequence of primitive int-valued elements supporting sequential and parallel aggregate operations. This is the <pre><code> int </code></pre> primitive specialization of <pre><code> Stream </code></pre> . <p> The following example illustrates an aggregate operation using <pre><code> Stream </code></pre> and <pre><code> IntStream </code></pre> , computing the sum of the weights of the red widgets: <pre><pre><code>int sum = widgets.stream() .filter(w -&gt; w.getColor() == RED) .mapToInt(w -&gt; w.getWeight()) .sum(); </code></pre></pre> See the class documentation for <pre><code> Stream </code></pre> and the package documentation for java.util.stream for additional specification of streams, stream operations, stream pipelines, and parallelism. </p><pre><code>public interface IntStream\nimplements BaseStream&lt;Integer,&nbsp;IntStream&gt;</code></pre></section>	https://developer.android.com/reference/java/util/stream/IntStream.html
LongStream.Builder	A										<section class="prog__container"><p> A mutable builder for a <pre><code> LongStream </code></pre> . <p> A stream builder has a lifecycle, which starts in a building phase, during which elements can be added, and then transitions to a built phase, after which elements may not be added. The built phase begins begins when the <pre><code> build() </code></pre> method is called, which creates an ordered stream whose elements are the elements that were added to the stream builder, in the order they were added. </p><pre><code>public static interface LongStream.Builder\nimplements LongConsumer</code></pre></section>	https://developer.android.com/reference/java/util/stream/LongStream.Builder.html
LongStream	A										<section class="prog__container"><p> A sequence of primitive long-valued elements supporting sequential and parallel aggregate operations. This is the <pre><code> long </code></pre> primitive specialization of <pre><code> Stream </code></pre> . <p> The following example illustrates an aggregate operation using <pre><code> Stream </code></pre> and <pre><code> LongStream </code></pre> , computing the sum of the weights of the red widgets: <pre><pre><code>long sum = widgets.stream() .filter(w -&gt; w.getColor() == RED) .mapToLong(w -&gt; w.getWeight()) .sum(); </code></pre></pre> See the class documentation for <pre><code> Stream </code></pre> and the package documentation for java.util.stream for additional specification of streams, stream operations, stream pipelines, and parallelism. </p><pre><code>public interface LongStream\nimplements BaseStream&lt;Long,&nbsp;LongStream&gt;</code></pre></section>	https://developer.android.com/reference/java/util/stream/LongStream.html
java.util.stream	A										<section class="prog__container">Here we use</section>	https://developer.android.com/reference/java/util/stream/package-summary.html
Stream.Builder	A										<section class="prog__container"><p> A mutable builder for a <pre><code> Stream </code></pre> . This allows the creation of a <pre><code> Stream </code></pre> by generating elements individually and adding them to the <pre><code> Builder </code></pre> (without the copying overhead that comes from using an <pre><code> ArrayList </code></pre> as a temporary buffer.) <p> A stream builder has a lifecycle, which starts in a building phase, during which elements can be added, and then transitions to a built phase, after which elements may not be added. The built phase begins when the <pre><code> build() </code></pre> method is called, which creates an ordered <pre><code> Stream </code></pre> whose elements are the elements that were added to the stream builder, in the order they were added. </p><pre><code>public static interface Stream.Builder\nimplements Consumer&lt;T&gt;</code></pre></section>	https://developer.android.com/reference/java/util/stream/Stream.Builder.html
Stream	A										<section class="prog__container"><p> A sequence of elements supporting sequential and parallel aggregate operations. The following example illustrates an aggregate operation using <pre><code> Stream </code></pre> and <pre><code> IntStream </code></pre> : <pre><pre><code>int sum = widgets.stream() .filter(w -&gt; w.getColor() == RED) .mapToInt(w -&gt; w.getWeight()) .sum(); </code></pre></pre> In this example, <pre><code> widgets </code></pre> is a <pre><code> Collection&lt;Widget&gt; </code></pre> . We create a stream of <pre><code> Widget </code></pre> objects via <pre><code> Collection.stream() </code></pre> , filter it to produce a stream containing only the red widgets, and then transform it into a stream of <pre><code> int </code></pre> values representing the weight of each red widget. Then this stream is summed to produce a total weight. <p> In addition to <pre><code> Stream </code></pre> , which is a stream of object references, there are primitive specializations for <pre><code> IntStream </code></pre> , <pre><code> LongStream </code></pre> , and <pre><code> DoubleStream </code></pre> , all of which are referred to as "streams" and conform to the characteristics and restrictions described here. <p> To perform a computation, stream operations are composed into a <em> stream pipeline </em> . A stream pipeline consists of a source (which might be an array, a collection, a generator function, an I/O channel, etc), zero or more <em> intermediate operations </em> (which transform a stream into another stream, such as <pre><code> filter(Predicate) </code></pre> ), and a <em> terminal operation </em> (which produces a result or side-effect, such as <pre><code> count() </code></pre> or <pre><code> forEach(Consumer) </code></pre> ). Streams are lazy; computation on the source data is only performed when the terminal operation is initiated, and source elements are consumed only as needed. <p> Collections and streams, while bearing some superficial similarities, have different goals. Collections are primarily concerned with the efficient management of, and access to, their elements. By contrast, streams do not provide a means to directly access or manipulate their elements, and are instead concerned with declaratively describing their source and the computational operations which will be performed in aggregate on that source. However, if the provided stream operations do not offer the desired functionality, the <pre><code> iterator() </code></pre> and <pre><code> spliterator() </code></pre> operations can be used to perform a controlled traversal. <p> A stream pipeline, like the "widgets" example above, can be viewed as a <em> query </em> on the stream source. Unless the source was explicitly designed for concurrent modification (such as a <pre><code> ConcurrentHashMap </code></pre> ), unpredictable or erroneous behavior may result from modifying the stream source while it is being queried. <p> Most stream operations accept parameters that describe user-specified behavior, such as the lambda expression <pre><code> w -&gt; w.getWeight() </code></pre> passed to <pre><code> mapToInt </code></pre> in the example above. To preserve correct behavior, these <em> behavioral parameters </em> : <ul> <li> must be non-interfering (they do not modify the stream source); and </li> <li> in most cases must be stateless (their result should not depend on any state that might change during execution of the stream pipeline). </li> </ul> <p> Such parameters are always instances of a functional interface such as <pre><code> Function </code></pre> , and are often lambda expressions or method references. Unless otherwise specified these parameters must be <em> non-null </em> . <p> A stream should be operated on (invoking an intermediate or terminal stream operation) only once. This rules out, for example, "forked" streams, where the same source feeds two or more pipelines, or multiple traversals of the same stream. A stream implementation may throw <pre><code> IllegalStateException </code></pre> if it detects that the stream is being reused. However, since some stream operations may return their receiver rather than a new stream object, it may not be possible to detect reuse in all cases. <p> Streams have a <pre><code> close() </code></pre> method and implement <pre><code> AutoCloseable </code></pre> , but nearly all stream instances do not actually need to be closed after use. Generally, only streams whose source is an IO channel will require closing. Most streams are backed by collections, arrays, or generating functions, which require no special resource management. (If a stream does require closing, it can be declared as a resource in a <pre><code> try </code></pre> -with-resources statement.) <p> Stream pipelines may execute either sequentially or in parallel . This execution mode is a property of the stream. Streams are created with an initial choice of sequential or parallel execution. (For example, <pre><code> Collection.stream() </code></pre> creates a sequential stream, and <pre><code> Collection.parallelStream() </code></pre> creates a parallel one.) This choice of execution mode may be modified by the <pre><code> sequential() </code></pre> or <pre><code> parallel() </code></pre> methods, and may be queried with the <pre><code> isParallel() </code></pre> method. </p><pre><code>public interface Stream\nimplements BaseStream&lt;T,&nbsp;Stream&lt;T&gt;&gt;</code></pre></section>	https://developer.android.com/reference/java/util/stream/Stream.html
StreamSupport	A										<section class="prog__container"><p> Low-level utility methods for creating and manipulating streams. <p> This class is mostly for library writers presenting stream views of data structures; most static stream methods intended for end users are in the various <pre><code> Stream </code></pre> classes. </p><pre><code>public final class StreamSupport\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/stream/StreamSupport.html
Adler32	A										<section class="prog__container"><p> A class that can be used to compute the Adler-32 checksum of a data stream. An Adler-32 checksum is almost as reliable as a CRC-32 but can be computed much faster.</p><pre><code>public class Adler32\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/zip/Adler32.html
CheckedInputStream	A										<section class="prog__container"><p> An input stream that also maintains a checksum of the data being read. The checksum can then be used to verify the integrity of the input data.</p><pre><code>public class CheckedInputStream\n</code></pre></section>	https://developer.android.com/reference/java/util/zip/CheckedInputStream.html
CheckedOutputStream	A										<section class="prog__container"><p> An output stream that also maintains a checksum of the data being written. The checksum can then be used to verify the integrity of the output data.</p><pre><code>public class CheckedOutputStream\n</code></pre></section>	https://developer.android.com/reference/java/util/zip/CheckedOutputStream.html
Checksum	A										<section class="prog__container"><p> An interface representing a data checksum.</p><pre><code>public interface Checksum\n</code></pre></section>	https://developer.android.com/reference/java/util/zip/Checksum.html
CRC32	A										<section class="prog__container"><p> A class that can be used to compute the CRC-32 of a data stream.</p><pre><code>public class CRC32\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/zip/CRC32.html
DataFormatException	A										<section class="prog__container"><p> Signals that a data format error has occurred.</p><pre><code>public class DataFormatException\n</code></pre></section>	https://developer.android.com/reference/java/util/zip/DataFormatException.html
Deflater	A										<section class="prog__container"><p> This class provides support for general purpose compression using the popular ZLIB compression library. The ZLIB compression library was initially developed as part of the PNG graphics standard and is not protected by patents. It is fully described in the specifications at the java.util.zip package description . <p> The following code fragment demonstrates a trivial compression and decompression of a string using <tt> Deflater </tt> and <tt> Inflater </tt> . <blockquote> <pre> try { // Encode a String into bytes String inputString = "blahblahblah"; byte[] input = inputString.getBytes("UTF-8"); // Compress the bytes byte[] output = new byte[100]; Deflater compresser = new Deflater(); compresser.setInput(input); compresser.finish(); int compressedDataLength = compresser.deflate(output); compresser.end(); // Decompress the bytes Inflater decompresser = new Inflater(); decompresser.setInput(output, 0, compressedDataLength); byte[] result = new byte[100]; int resultLength = decompresser.inflate(result); decompresser.end(); // Decode the bytes into a String String outputString = new String(result, 0, resultLength, "UTF-8"); } catch(java.io.UnsupportedEncodingException ex) { // handle } catch (java.util.zip.DataFormatException ex) { // handle } </pre> </blockquote> </p><pre><code>public class Deflater\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/zip/Deflater.html
DeflaterInputStream	A										<section class="prog__container"><p> Implements an input stream filter for compressing data in the "deflate" compression format.</p><pre><code>public class DeflaterInputStream\n</code></pre></section>	https://developer.android.com/reference/java/util/zip/DeflaterInputStream.html
DeflaterOutputStream	A										<section class="prog__container"><p> This class implements an output stream filter for compressing data in the "deflate" compression format. It is also used as the basis for other types of compression filters, such as GZIPOutputStream.</p><pre><code>public class DeflaterOutputStream\n</code></pre></section>	https://developer.android.com/reference/java/util/zip/DeflaterOutputStream.html
GZIPInputStream	A										<section class="prog__container"><p> This class implements a stream filter for reading compressed data in the GZIP file format.</p><pre><code>public class GZIPInputStream\n</code></pre></section>	https://developer.android.com/reference/java/util/zip/GZIPInputStream.html
GZIPOutputStream	A										<section class="prog__container"><p> This class implements a stream filter for writing compressed data in the GZIP file format.</p><pre><code>public class GZIPOutputStream\n</code></pre></section>	https://developer.android.com/reference/java/util/zip/GZIPOutputStream.html
Inflater	A										<section class="prog__container"><p> This class provides support for general purpose decompression using the popular ZLIB compression library. The ZLIB compression library was initially developed as part of the PNG graphics standard and is not protected by patents. It is fully described in the specifications at the java.util.zip package description . <p> The following code fragment demonstrates a trivial compression and decompression of a string using <tt> Deflater </tt> and <tt> Inflater </tt> . <blockquote> <pre> try { // Encode a String into bytes String inputString = "blahblahblah€€"; byte[] input = inputString.getBytes("UTF-8"); // Compress the bytes byte[] output = new byte[100]; Deflater compresser = new Deflater(); compresser.setInput(input); compresser.finish(); int compressedDataLength = compresser.deflate(output); // Decompress the bytes Inflater decompresser = new Inflater(); decompresser.setInput(output, 0, compressedDataLength); byte[] result = new byte[100]; int resultLength = decompresser.inflate(result); decompresser.end(); // Decode the bytes into a String String outputString = new String(result, 0, resultLength, "UTF-8"); } catch(java.io.UnsupportedEncodingException ex) { // handle } catch (java.util.zip.DataFormatException ex) { // handle } </pre> </blockquote> </p><pre><code>public class Inflater\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/zip/Inflater.html
InflaterInputStream	A										<section class="prog__container"><p> This class implements a stream filter for uncompressing data in the "deflate" compression format. It is also used as the basis for other decompression filters, such as GZIPInputStream.</p><pre><code>public class InflaterInputStream\n</code></pre></section>	https://developer.android.com/reference/java/util/zip/InflaterInputStream.html
InflaterOutputStream	A										<section class="prog__container"><p> Implements an output stream filter for uncompressing data stored in the "deflate" compression format.</p><pre><code>public class InflaterOutputStream\n</code></pre></section>	https://developer.android.com/reference/java/util/zip/InflaterOutputStream.html
java.util.zip	A										<section class="prog__container"></section>	https://developer.android.com/reference/java/util/zip/package-summary.html
ZipEntry	A										<section class="prog__container"><p> This class is used to represent a ZIP file entry.</p><pre><code>public class ZipEntry\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/zip/ZipEntry.html
ZipError	A										<section class="prog__container"><p> Signals that an unrecoverable error has occurred.</p><pre><code>public class ZipError\n</code></pre></section>	https://developer.android.com/reference/java/util/zip/ZipError.html
ZipException	A										<section class="prog__container"><p> Signals that a Zip exception of some sort has occurred.</p><pre><code>public class ZipException\n</code></pre></section>	https://developer.android.com/reference/java/util/zip/ZipException.html
ZipFile	A										<section class="prog__container"><p> This class is used to read entries from a zip file. <p> Unless otherwise noted, passing a <tt> null </tt> argument to a constructor or method in this class will cause a <pre><code> NullPointerException </code></pre> to be thrown. </p><pre><code>public class ZipFile\nextends Object</code></pre></section>	https://developer.android.com/reference/java/util/zip/ZipFile.html
ZipInputStream	A										<section class="prog__container"><p> This class implements an input stream filter for reading files in the ZIP file format. Includes support for both compressed and uncompressed entries.</p><pre><code>public class ZipInputStream\n</code></pre></section>	https://developer.android.com/reference/java/util/zip/ZipInputStream.html
ZipOutputStream	A										<section class="prog__container"><p> This class implements an output stream filter for writing files in the ZIP file format. Includes support for both compressed and uncompressed entries.</p><pre><code>public class ZipOutputStream\n</code></pre></section>	https://developer.android.com/reference/java/util/zip/ZipOutputStream.html
AEADBadTagException	A										<section class="prog__container"><p> This exception is thrown when a <pre><code> Cipher </code></pre> operating in an AEAD mode (such as GCM/CCM) is unable to verify the supplied authentication tag.</p><pre><code>public class AEADBadTagException\n</code></pre></section>	https://developer.android.com/reference/javax/crypto/AEADBadTagException.html
BadPaddingException	A										<section class="prog__container"><p> This exception is thrown when a particular padding mechanism is expected for the input data but the data is not padded properly.</p><pre><code>public class BadPaddingException\n</code></pre></section>	https://developer.android.com/reference/javax/crypto/BadPaddingException.html
Cipher	A										<section class="prog__container"><p> This class provides the functionality of a cryptographic cipher for encryption and decryption. It forms the core of the Java Cryptographic Extension (JCE) framework. <p> In order to create a Cipher object, the application calls the Cipher's <pre><code> getInstance </code></pre> method, and passes the name of the requested <i> transformation </i> to it. Optionally, the name of a provider may be specified. <p> A <i> transformation </i> is a string that describes the operation (or set of operations) to be performed on the given input, to produce some output. A transformation always includes the name of a cryptographic algorithm (e.g., <i> DES </i> ), and may be followed by a feedback mode and padding scheme. <p> A transformation is of the form: <p> <ul> <li> " <i> algorithm/mode/padding </i> " or <p> <li> " <i> algorithm </i> " </li> </p><pre><code>public class Cipher\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/Cipher.html
CipherInputStream	A										<section class="prog__container"><p> A CipherInputStream is composed of an InputStream and a Cipher so that read() methods return data that are read in from the underlying InputStream but have been additionally processed by the Cipher. The Cipher must be fully initialized before being used by a CipherInputStream. <p> For example, if the Cipher is initialized for decryption, the CipherInputStream will attempt to read in data and decrypt them, before returning the decrypted data. <p> This class adheres strictly to the semantics, especially the failure semantics, of its ancestor classes java.io.FilterInputStream and java.io.InputStream. This class has exactly those methods specified in its ancestor classes, and overrides them all. Moreover, this class catches all exceptions that are not thrown by its ancestor classes. In particular, the <pre><code> skip </code></pre> method skips, and the <pre><code> available </code></pre> method counts only data that have been processed by the encapsulated Cipher. <p> It is crucial for a programmer using this class not to use methods that are not defined or overriden in this class (such as a new method or constructor that is later added to one of the super classes), because the design and implementation of those methods are unlikely to have considered security impact with regard to CipherInputStream. </p><pre><code>public class CipherInputStream\n</code></pre></section>	https://developer.android.com/reference/javax/crypto/CipherInputStream.html
CipherOutputStream	A										<section class="prog__container"><p> A CipherOutputStream is composed of an OutputStream and a Cipher so that write() methods first process the data before writing them out to the underlying OutputStream. The cipher must be fully initialized before being used by a CipherOutputStream. <p> For example, if the cipher is initialized for encryption, the CipherOutputStream will attempt to encrypt data before writing out the encrypted data. <p> This class adheres strictly to the semantics, especially the failure semantics, of its ancestor classes java.io.OutputStream and java.io.FilterOutputStream. This class has exactly those methods specified in its ancestor classes, and overrides them all. Moreover, this class catches all exceptions that are not thrown by its ancestor classes. <p> It is crucial for a programmer using this class not to use methods that are not defined or overriden in this class (such as a new method or constructor that is later added to one of the super classes), because the design and implementation of those methods are unlikely to have considered security impact with regard to CipherOutputStream. </p><pre><code>public class CipherOutputStream\n</code></pre></section>	https://developer.android.com/reference/javax/crypto/CipherOutputStream.html
CipherSpi	A										<section class="prog__container"><p> This class defines the <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> Cipher </code></pre> class. All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a particular cipher algorithm. <p> In order to create an instance of <pre><code> Cipher </code></pre> , which encapsulates an instance of this <pre><code> CipherSpi </code></pre> class, an application calls one of the <pre><code> getInstance </code></pre> factory methods of the <pre><code> Cipher </code></pre> engine class and specifies the requested <i> transformation </i> . Optionally, the application may also specify the name of a provider. <p> A <i> transformation </i> is a string that describes the operation (or set of operations) to be performed on the given input, to produce some output. A transformation always includes the name of a cryptographic algorithm (e.g., <i> DES </i> ), and may be followed by a feedback mode and padding scheme. <p> A transformation is of the form: <p> <ul> <li> " <i> algorithm/mode/padding </i> " or <p> <li> " <i> algorithm </i> " </li> </p><pre><code>public abstract class CipherSpi\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/CipherSpi.html
EncryptedPrivateKeyInfo	A										<section class="prog__container"><p> This class implements the <pre><code> EncryptedPrivateKeyInfo </code></pre> type as defined in PKCS #8. <p> Its ASN.1 definition is as follows: <pre> EncryptedPrivateKeyInfo ::= SEQUENCE { encryptionAlgorithm AlgorithmIdentifier, encryptedData OCTET STRING } AlgorithmIdentifier ::= SEQUENCE { algorithm OBJECT IDENTIFIER, parameters ANY DEFINED BY algorithm OPTIONAL } </pre> </p><pre><code>public class EncryptedPrivateKeyInfo\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/EncryptedPrivateKeyInfo.html
ExemptionMechanism	A										<section class="prog__container"><p> This class provides the functionality of an exemption mechanism, examples of which are <i> key recovery </i> , <i> key weakening </i> , and <i> key escrow </i> . <p> Applications or applets that use an exemption mechanism may be granted stronger encryption capabilities than those which don't. </p><pre><code>public class ExemptionMechanism\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/ExemptionMechanism.html
ExemptionMechanismException	A										<section class="prog__container"><p> This is the generic ExemptionMechanism exception.</p><pre><code>public class ExemptionMechanismException\n</code></pre></section>	https://developer.android.com/reference/javax/crypto/ExemptionMechanismException.html
ExemptionMechanismSpi	A										<section class="prog__container"><p> This class defines the <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> ExemptionMechanism </code></pre> class. All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a particular exemption mechanism.</p><pre><code>public abstract class ExemptionMechanismSpi\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/ExemptionMechanismSpi.html
IllegalBlockSizeException	A										<section class="prog__container"><p> This exception is thrown when the length of data provided to a block cipher is incorrect, i.e., does not match the block size of the cipher.</p><pre><code>public class IllegalBlockSizeException\n</code></pre></section>	https://developer.android.com/reference/javax/crypto/IllegalBlockSizeException.html
KeyAgreement	A										<section class="prog__container"><p> This class provides the functionality of a key agreement (or key exchange) protocol. <p> The keys involved in establishing a shared secret are created by one of the key generators ( <pre><code> KeyPairGenerator </code></pre> or <pre><code> KeyGenerator </code></pre> ), a <pre><code> KeyFactory </code></pre> , or as a result from an intermediate phase of the key agreement protocol. <p> For each of the correspondents in the key exchange, <pre><code> doPhase </code></pre> needs to be called. For example, if this key exchange is with one other party, <pre><code> doPhase </code></pre> needs to be called once, with the <pre><code> lastPhase </code></pre> flag set to <pre><code> true </code></pre> . If this key exchange is with two other parties, <pre><code> doPhase </code></pre> needs to be called twice, the first time setting the <pre><code> lastPhase </code></pre> flag to <pre><code> false </code></pre> , and the second time setting it to <pre><code> true </code></pre> . There may be any number of parties involved in a key exchange. <p> Android provides the following <pre><code> KeyAgreement </code></pre> algorithms: <table> <thead> <tr> <th> Name </th> <th> Supported (API Levels) </th> </tr> </thead> <tbody> <tr> <td> DH </td> <td> 1+ </td> </tr> <tr> <td> ECDH </td> <td> 11+ </td> </tr> </tbody> </table> This algorithm is described in the KeyAgreement section of the Java Cryptography Architecture Standard Algorithm Name Documentation. </p><pre><code>public class KeyAgreement\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/KeyAgreement.html
KeyAgreementSpi	A										<section class="prog__container"><p> This class defines the <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> KeyAgreement </code></pre> class. All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a particular key agreement algorithm. <p> The keys involved in establishing a shared secret are created by one of the key generators ( <pre><code> KeyPairGenerator </code></pre> or <pre><code> KeyGenerator </code></pre> ), a <pre><code> KeyFactory </code></pre> , or as a result from an intermediate phase of the key agreement protocol ( <pre><code> engineDoPhase </code></pre> ). <p> For each of the correspondents in the key exchange, <pre><code> engineDoPhase </code></pre> needs to be called. For example, if the key exchange is with one other party, <pre><code> engineDoPhase </code></pre> needs to be called once, with the <pre><code> lastPhase </code></pre> flag set to <pre><code> true </code></pre> . If the key exchange is with two other parties, <pre><code> engineDoPhase </code></pre> needs to be called twice, the first time setting the <pre><code> lastPhase </code></pre> flag to <pre><code> false </code></pre> , and the second time setting it to <pre><code> true </code></pre> . There may be any number of parties involved in a key exchange. </p><pre><code>public abstract class KeyAgreementSpi\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/KeyAgreementSpi.html
KeyGenerator	A										<section class="prog__container"><p> This class provides the functionality of a secret (symmetric) key generator. <p> Key generators are constructed using one of the <pre><code> getInstance </code></pre> class methods of this class. <p> KeyGenerator objects are reusable, i.e., after a key has been generated, the same KeyGenerator object can be re-used to generate further keys. <p> There are two ways to generate a key: in an algorithm-independent manner, and in an algorithm-specific manner. The only difference between the two is the initialization of the object: <ul> <li> <b> Algorithm-Independent Initialization </b> <p> All key generators share the concepts of a <i> keysize </i> and a <i> source of randomness </i> . There is an <pre><code> init </code></pre> method in this KeyGenerator class that takes these two universally shared types of arguments. There is also one that takes just a <pre><code> keysize </code></pre> argument, and uses the SecureRandom implementation of the highest-priority installed provider as the source of randomness (or a system-provided source of randomness if none of the installed providers supply a SecureRandom implementation), and one that takes just a source of randomness. <p> Since no other parameters are specified when you call the above algorithm-independent <pre><code> init </code></pre> methods, it is up to the provider what to do about the algorithm-specific parameters (if any) to be associated with each of the keys. <p> <li> <b> Algorithm-Specific Initialization </b> <p> For situations where a set of algorithm-specific parameters already exists, there are two <pre><code> init </code></pre> methods that have an <pre><code> AlgorithmParameterSpec </code></pre> argument. One also has a <pre><code> SecureRandom </code></pre> argument, while the other uses the SecureRandom implementation of the highest-priority installed provider as the source of randomness (or a system-provided source of randomness if none of the installed providers supply a SecureRandom implementation). </p><pre><code>public class KeyGenerator\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/KeyGenerator.html
KeyGeneratorSpi	A										<section class="prog__container"><p> This class defines the <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> KeyGenerator </code></pre> class. All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a key generator for a particular algorithm.</p><pre><code>public abstract class KeyGeneratorSpi\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/KeyGeneratorSpi.html
Mac	A										<section class="prog__container"><p> This class provides the functionality of a "Message Authentication Code" (MAC) algorithm. <p> A MAC provides a way to check the integrity of information transmitted over or stored in an unreliable medium, based on a secret key. Typically, message authentication codes are used between two parties that share a secret key in order to validate information transmitted between these parties. <p> A MAC mechanism that is based on cryptographic hash functions is referred to as HMAC. HMAC can be used with any cryptographic hash function, e.g., MD5 or SHA-1, in combination with a secret shared key. HMAC is specified in RFC 2104. <p> Android provides the following <pre><code> Mac </code></pre> algorithms <table> <thead> <tr> <th> Name </th> <th> Supported (API Levels) </th> </tr> </thead> <tbody> <tr> <td> DESedeMAC </td> <td> 1–8 </td> </tr> <tr> <td> DESedeMAC/CFB8 </td> <td> 1–8 </td> </tr> <tr> <td> DESedeMAC64 </td> <td> 1–8 </td> </tr> <tr> <td> DESMAC </td> <td> 1–8 </td> </tr> <tr> <td> DESMAC/CFB8 </td> <td> 1–8 </td> </tr> <tr> <td> DESwithISO9797 </td> <td> 1–8 </td> </tr> <tr> <td> HmacMD5 </td> <td> 1+ </td> </tr> <tr> <td> HmacSHA1 </td> <td> 1+ </td> </tr> <tr> <td> HmacSHA224 </td> <td> 1–8, 22+ </td> </tr> <tr> <td> HmacSHA256 </td> <td> 1+ </td> </tr> <tr> <td> HmacSHA384 </td> <td> 1+ </td> </tr> <tr> <td> HmacSHA512 </td> <td> 1+ </td> </tr> <tr> <td> ISO9797ALG3MAC </td> <td> 1–8 </td> </tr> <tr> <td> PBEwithHmacSHA </td> <td> 1+ </td> </tr> <tr> <td> PBEwithHmacSHA1 </td> <td> 1+ </td> </tr> </tbody> </table> These algorithms are described in the Mac section of the Java Cryptography Architecture Standard Algorithm Name Documentation. </p><pre><code>public class Mac\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/Mac.html
MacSpi	A										<section class="prog__container"><p> This class defines the <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> Mac </code></pre> class. All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a particular MAC algorithm. <p> Implementations are free to implement the Cloneable interface. </p><pre><code>public abstract class MacSpi\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/MacSpi.html
NoSuchPaddingException	A										<section class="prog__container"><p> This exception is thrown when a particular padding mechanism is requested but is not available in the environment.</p><pre><code>public class NoSuchPaddingException\n</code></pre></section>	https://developer.android.com/reference/javax/crypto/NoSuchPaddingException.html
NullCipher	A										<section class="prog__container"><p> The NullCipher class is a class that provides an "identity cipher" -- one that does not tranform the plaintext. As a consequence, the ciphertext is identical to the plaintext. All initialization methods do nothing, while the blocksize is set to 1 byte.</p><pre><code>public class NullCipher\n</code></pre></section>	https://developer.android.com/reference/javax/crypto/NullCipher.html
javax.crypto	A										<section class="prog__container">Support for encryption includes symmetric, asymmetric, block, andstream ciphers. This package also supports secure streams and sealedobjects.</section>	https://developer.android.com/reference/javax/crypto/package-summary.html
SealedObject	A										<section class="prog__container"><p> This class enables a programmer to create an object and protect its confidentiality with a cryptographic algorithm. <p> Given any Serializable object, one can create a SealedObject that encapsulates the original object, in serialized format (i.e., a "deep copy"), and seals (encrypts) its serialized contents, using a cryptographic algorithm such as DES, to protect its confidentiality. The encrypted content can later be decrypted (with the corresponding algorithm using the correct decryption key) and de-serialized, yielding the original object. <p> Note that the Cipher object must be fully initialized with the correct algorithm, key, padding scheme, etc., before being applied to a SealedObject. <p> The original object that was sealed can be recovered in two different ways: <p> <ul> <li> by using the <pre><code> getObject </code></pre> method that takes a <pre><code> Cipher </code></pre> object. <p> This method requires a fully initialized <pre><code> Cipher </code></pre> object, initialized with the exact same algorithm, key, padding scheme, etc., that were used to seal the object. <p> This approach has the advantage that the party who unseals the sealed object does not require knowledge of the decryption key. For example, after one party has initialized the cipher object with the required decryption key, it could hand over the cipher object to another party who then unseals the sealed object. <p> <li> by using one of the <pre><code> getObject </code></pre> methods that take a <pre><code> Key </code></pre> object. <p> In this approach, the <pre><code> getObject </code></pre> method creates a cipher object for the appropriate decryption algorithm and initializes it with the given decryption key and the algorithm parameters (if any) that were stored in the sealed object. <p> This approach has the advantage that the party who unseals the object does not need to keep track of the parameters (e.g., an IV) that were used to seal the object. </p><pre><code>public class SealedObject\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/SealedObject.html
SecretKey	A										<section class="prog__container"><p> A secret (symmetric) key. <p> This interface contains no methods or constants. Its only purpose is to group (and provide type safety for) secret keys. <p> Provider implementations of this interface must overwrite the <pre><code> equals </code></pre> and <pre><code> hashCode </code></pre> methods inherited from <pre><code> java.lang.Object </code></pre> , so that secret keys are compared based on their underlying key material and not based on reference. <p> Keys that implement this interface return the string <pre><code> RAW </code></pre> as their encoding format (see <pre><code> getFormat </code></pre> ), and return the raw key bytes as the result of a <pre><code> getEncoded </code></pre> method call. (The <pre><code> getFormat </code></pre> and <pre><code> getEncoded </code></pre> methods are inherited from the <pre><code> java.security.Key </code></pre> parent interface.) </p><pre><code>public interface SecretKey\nimplements Key</code></pre></section>	https://developer.android.com/reference/javax/crypto/SecretKey.html
SecretKeyFactory	A										<section class="prog__container"><p> This class represents a factory for secret keys. <p> Key factories are used to convert <i> keys </i> (opaque cryptographic keys of type <pre><code> Key </code></pre> ) into <i> key specifications </i> (transparent representations of the underlying key material), and vice versa. Secret key factories operate only on secret (symmetric) keys. <p> Key factories are bi-directional, i.e., they allow to build an opaque key object from a given key specification (key material), or to retrieve the underlying key material of a key object in a suitable format. <p> Application developers should refer to their provider's documentation to find out which key specifications are supported by the <pre><code> generateSecret </code></pre> and <pre><code> getKeySpec </code></pre> methods. For example, the DES secret-key factory supplied by the "SunJCE" provider supports <pre><code> DESKeySpec </code></pre> as a transparent representation of DES keys, and that provider's secret-key factory for Triple DES keys supports <pre><code> DESedeKeySpec </code></pre> as a transparent representation of Triple DES keys. <p> Android provides the following <pre><code> SecretKeyFactory </code></pre> algorithms: <table> <thead> <tr> <th> Name </th> <th> Supported (API Levels) </th> </tr> </thead> <tbody> <tr> <td> AES </td> <td> 23+ </td> </tr> <tr> <td> DES </td> <td> 1+ </td> </tr> <tr> <td> DESede </td> <td> 1+ </td> </tr> <tr> <td> HmacSHA1 </td> <td> 23+ </td> </tr> <tr> <td> HmacSHA224 </td> <td> 23+ </td> </tr> <tr> <td> HmacSHA256 </td> <td> 23+ </td> </tr> <tr> <td> HmacSHA384 </td> <td> 23+ </td> </tr> <tr> <td> HmacSHA512 </td> <td> 23+ </td> </tr> <tr> <td> PBEwithHmacSHA1 </td> <td> 1+ </td> </tr> <tr> <td> PBEwithMD5and128BITAES-CBC-OPENSSL </td> <td> 1+ </td> </tr> <tr> <td> PBEwithMD5and192BITAES-CBC-OPENSSL </td> <td> 1+ </td> </tr> <tr> <td> PBEwithMD5and256BITAES-CBC-OPENSSL </td> <td> 1+ </td> </tr> <tr> <td> PBEwithMD5andDES </td> <td> 1+ </td> </tr> <tr> <td> PBEwithMD5andRC2 </td> <td> 1+ </td> </tr> <tr> <td> PBEwithSHA1andDES </td> <td> 1+ </td> </tr> <tr> <td> PBEwithSHA1andRC2 </td> <td> 1+ </td> </tr> <tr> <td> PBEwithSHA256and128BITAES-CBC-BC </td> <td> 1+ </td> </tr> <tr> <td> PBEwithSHA256and192BITAES-CBC-BC </td> <td> 1+ </td> </tr> <tr> <td> PBEwithSHA256and256BITAES-CBC-BC </td> <td> 1+ </td> </tr> <tr> <td> PBEwithSHAand128BITAES-CBC-BC </td> <td> 1+ </td> </tr> <tr> <td> PBEwithSHAand128BITRC2-CBC </td> <td> 10+ </td> </tr> <tr> <td> PBEwithSHAand128BITRC4 </td> <td> 10+ </td> </tr> <tr> <td> PBEwithSHAand192BITAES-CBC-BC </td> <td> 1+ </td> </tr> <tr> <td> PBEwithSHAand2-KEYTRIPLEDES-CBC </td> <td> 1+ </td> </tr> <tr> <td> PBEwithSHAand256BITAES-CBC-BC </td> <td> 1+ </td> </tr> <tr> <td> PBEwithSHAand3-KEYTRIPLEDES-CBC </td> <td> 1+ </td> </tr> <tr> <td> PBEwithSHAand40BITRC2-CBC </td> <td> 1+ </td> </tr> <tr> <td> PBEwithSHAand40BITRC4 </td> <td> 10+ </td> </tr> <tr> <td> PBEwithSHAandTWOFISH-CBC </td> <td> 10+ </td> </tr> <tr> <td> PBKDF2withHmacSHA1 </td> <td> 10+ </td> </tr> <tr> <td> PBKDF2withHmacSHA1and8BIT </td> <td> 19+ </td> </tr> </tbody> </table> These algorithms are described in the SecretKeyFactory section of the Java Cryptography Architecture Standard Algorithm Name Documentation. </p><pre><code>public class SecretKeyFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/SecretKeyFactory.html
SecretKeyFactorySpi	A										<section class="prog__container"><p> This class defines the <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> SecretKeyFactory </code></pre> class. All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a secret-key factory for a particular algorithm. <p> A provider should document all the key specifications supported by its secret key factory. For example, the DES secret-key factory supplied by the "SunJCE" provider supports <pre><code> DESKeySpec </code></pre> as a transparent representation of DES keys, and that provider's secret-key factory for Triple DES keys supports <pre><code> DESedeKeySpec </code></pre> as a transparent representation of Triple DES keys. </p><pre><code>public abstract class SecretKeyFactorySpi\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/SecretKeyFactorySpi.html
ShortBufferException	A										<section class="prog__container"><p> This exception is thrown when an output buffer provided by the user is too short to hold the operation result.</p><pre><code>public class ShortBufferException\n</code></pre></section>	https://developer.android.com/reference/javax/crypto/ShortBufferException.html
DHKey	A										<section class="prog__container"><p> The interface to a Diffie-Hellman key.</p><pre><code>public interface DHKey\n</code></pre></section>	https://developer.android.com/reference/javax/crypto/interfaces/DHKey.html
DHPrivateKey	A										<section class="prog__container"><p> The interface to a Diffie-Hellman private key.</p><pre><code>public interface DHPrivateKey\nimplements DHKey, PrivateKey</code></pre></section>	https://developer.android.com/reference/javax/crypto/interfaces/DHPrivateKey.html
DHPublicKey	A										<section class="prog__container"><p> The interface to a Diffie-Hellman public key.</p><pre><code>public interface DHPublicKey\nimplements DHKey, PublicKey</code></pre></section>	https://developer.android.com/reference/javax/crypto/interfaces/DHPublicKey.html
javax.crypto.interfaces	A										<section class="prog__container">Note that these interfaces are intended onlyfor key implementations whose key materialis accessible and available. Theseinterfaces are not intended for keyimplementations whose key material residesin inaccessible, protected storage (such asin a hardware device).</section>	https://developer.android.com/reference/javax/crypto/interfaces/package-summary.html
PBEKey	A										<section class="prog__container"><p> The interface to a PBE key.</p><pre><code>public interface PBEKey\nimplements SecretKey</code></pre></section>	https://developer.android.com/reference/javax/crypto/interfaces/PBEKey.html
DESedeKeySpec	A										<section class="prog__container"><p> This class specifies a DES-EDE ("triple-DES") key.</p><pre><code>public class DESedeKeySpec\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/spec/DESedeKeySpec.html
DESKeySpec	A										<section class="prog__container"><p> This class specifies a DES key.</p><pre><code>public class DESKeySpec\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/spec/DESKeySpec.html
DHGenParameterSpec	A										<section class="prog__container"><p> This class specifies the set of parameters used for generating Diffie-Hellman (system) parameters for use in Diffie-Hellman key agreement. This is typically done by a central authority. <p> The central authority, after computing the parameters, must send this information to the parties looking to agree on a secret key. </p><pre><code>public class DHGenParameterSpec\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/spec/DHGenParameterSpec.html
DHParameterSpec	A										<section class="prog__container"><p> This class specifies the set of parameters used with the Diffie-Hellman algorithm, as specified in PKCS #3: <i> Diffie-Hellman Key-Agreement Standard </i> . <p> A central authority generates parameters and gives them to the two entities seeking to generate a secret key. The parameters are a prime <pre><code> p </code></pre> , a base <pre><code> g </code></pre> , and optionally the length in bits of the private value, <pre><code> l </code></pre> . <p> It is possible that more than one instance of parameters may be generated by a given central authority, and that there may be more than one central authority. Indeed, each individual may be its own central authority, with different entities having different parameters. <p> Note that this class does not perform any validation on specified parameters. Thus, the specified values are returned directly even if they are null. </p><pre><code>public class DHParameterSpec\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/spec/DHParameterSpec.html
DHPrivateKeySpec	A										<section class="prog__container"><p> This class specifies a Diffie-Hellman private key with its associated parameters. <p> Note that this class does not perform any validation on specified parameters. Thus, the specified values are returned directly even if they are null. </p><pre><code>public class DHPrivateKeySpec\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/spec/DHPrivateKeySpec.html
DHPublicKeySpec	A										<section class="prog__container"><p> This class specifies a Diffie-Hellman public key with its associated parameters. <p> Note that this class does not perform any validation on specified parameters. Thus, the specified values are returned directly even if they are null. </p><pre><code>public class DHPublicKeySpec\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/spec/DHPublicKeySpec.html
GCMParameterSpec	A										<section class="prog__container"><p> Specifies the set of parameters required by a <pre><code> Cipher </code></pre> using the Galois/Counter Mode (GCM) mode. <p> Simple block cipher modes (such as CBC) generally require only an initialization vector (such as <pre><code> IvParameterSpec </code></pre> ), but GCM needs these parameters: <ul> <li> <pre><code> IV </code></pre> : Initialization Vector (IV) </li> <li> <pre><code> tLen </code></pre> : length (in bits) of authentication tag T </li> </ul> <p> In addition to the parameters described here, other GCM inputs/output (Additional Authenticated Data (AAD), Keys, block ciphers, plain/ciphertext and authentication tags) are handled in the <pre><code> Cipher </code></pre> class. <p> Please see RFC 5116 for more information on the Authenticated Encryption with Associated Data (AEAD) algorithm, and NIST Special Publication 800-38D , "NIST Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC." <p> The GCM specification states that <pre><code> tLen </code></pre> may only have the values {128, 120, 112, 104, 96}, or {64, 32} for certain applications. Other values can be specified for this class, but not all CSP implementations will support them. </p><pre><code>public class GCMParameterSpec\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/spec/GCMParameterSpec.html
IvParameterSpec	A										<section class="prog__container"><p> This class specifies an <i> initialization vector </i> (IV). Examples which use IVs are ciphers in feedback mode, e.g., DES in CBC mode and RSA ciphers with OAEP encoding operation.</p><pre><code>public class IvParameterSpec\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/spec/IvParameterSpec.html
OAEPParameterSpec	A										<section class="prog__container"><p> This class specifies the set of parameters used with OAEP Padding, as defined in the PKCS #1 standard. Its ASN.1 definition in PKCS#1 standard is described below: <pre> RSAES-OAEP-params ::= SEQUENCE { hashAlgorithm [0] OAEP-PSSDigestAlgorithms DEFAULT sha1, maskGenAlgorithm [1] PKCS1MGFAlgorithms DEFAULT mgf1SHA1, pSourceAlgorithm [2] PKCS1PSourceAlgorithms DEFAULT pSpecifiedEmpty } </pre> where <pre> OAEP-PSSDigestAlgorithms ALGORITHM-IDENTIFIER ::= { { OID id-sha1 PARAMETERS NULL }| { OID id-sha256 PARAMETERS NULL }| { OID id-sha384 PARAMETERS NULL }| { OID id-sha512 PARAMETERS NULL }, ... -- Allows for future expansion -- } PKCS1MGFAlgorithms ALGORITHM-IDENTIFIER ::= { { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms }, ... -- Allows for future expansion -- } PKCS1PSourceAlgorithms ALGORITHM-IDENTIFIER ::= { { OID id-pSpecified PARAMETERS OCTET STRING }, ... -- Allows for future expansion -- } </pre> <p> Note: the OAEPParameterSpec.DEFAULT uses the following: message digest -- "SHA-1" mask generation function (mgf) -- "MGF1" parameters for mgf -- MGF1ParameterSpec.SHA1 source of encoding input -- PSource.PSpecified.DEFAULT </p><pre><code>public class OAEPParameterSpec\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/spec/OAEPParameterSpec.html
javax.crypto.spec	A										<section class="prog__container">A key specification is a transparent representation of the keymaterial that constitutes a key. A key may be specified in analgorithm-specific way, or in an algorithm-independent encoding format(such as ASN.1). This package contains key specifications forDiffie-Hellman public and private keys, as well as key specifications for DES,Triple DES, and PBE secret keys.</section>	https://developer.android.com/reference/javax/crypto/spec/package-summary.html
PBEKeySpec	A										<section class="prog__container"><p> A user-chosen password that can be used with password-based encryption ( <i> PBE </i> ). <p> The password can be viewed as some kind of raw key material, from which the encryption mechanism that uses it derives a cryptographic key. <p> Different PBE mechanisms may consume different bits of each password character. For example, the PBE mechanism defined in PKCS #5 looks at only the low order 8 bits of each character, whereas PKCS #12 looks at all 16 bits of each character. <p> You convert the password characters to a PBE key by creating an instance of the appropriate secret-key factory. For example, a secret-key factory for PKCS #5 will construct a PBE key from only the low order 8 bits of each password character, whereas a secret-key factory for PKCS #12 will take all 16 bits of each character. <p> Also note that this class stores passwords as char arrays instead of <pre><code> String </code></pre> objects (which would seem more logical), because the String class is immutable and there is no way to overwrite its internal value when the password stored in it is no longer needed. Hence, this class requests the password as a char array, so it can be overwritten when done. </p><pre><code>public class PBEKeySpec\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/spec/PBEKeySpec.html
PBEParameterSpec	A										<section class="prog__container"><p> This class specifies the set of parameters used with password-based encryption (PBE), as defined in the PKCS #5 standard.</p><pre><code>public class PBEParameterSpec\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/spec/PBEParameterSpec.html
PSource	A										<section class="prog__container"><p> This class specifies the source for encoding input P in OAEP Padding, as defined in the PKCS #1 standard. <pre> PKCS1PSourceAlgorithms ALGORITHM-IDENTIFIER ::= { { OID id-pSpecified PARAMETERS OCTET STRING }, ... -- Allows for future expansion -- } </pre></p><pre><code>public class PSource\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/spec/PSource.html
PSource.PSpecified	A										<section class="prog__container"><p> This class is used to explicitly specify the value for encoding input P in OAEP Padding.</p><pre><code>public static final class PSource.PSpecified\n</code></pre></section>	https://developer.android.com/reference/javax/crypto/spec/PSource.PSpecified.html
RC2ParameterSpec	A										<section class="prog__container"><p> This class specifies the parameters used with the <i> RC2 </i> algorithm. <p> The parameters consist of an effective key size and optionally an 8-byte initialization vector (IV) (only in feedback mode). <p> This class can be used to initialize a <pre><code> Cipher </code></pre> object that implements the <i> RC2 </i> algorithm. </p><pre><code>public class RC2ParameterSpec\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/spec/RC2ParameterSpec.html
RC5ParameterSpec	A										<section class="prog__container"><p> This class specifies the parameters used with the <i> RC5 </i> algorithm. <p> The parameters consist of a version number, a rounds count, a word size, and optionally an initialization vector (IV) (only in feedback mode). <p> This class can be used to initialize a <pre><code> Cipher </code></pre> object that implements the <i> RC5 </i> algorithm as supplied by RSA Security Inc. , or any parties authorized by RSA Security. </p><pre><code>public class RC5ParameterSpec\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/spec/RC5ParameterSpec.html
SecretKeySpec	A										<section class="prog__container"><p> This class specifies a secret key in a provider-independent fashion. <p> It can be used to construct a <pre><code> SecretKey </code></pre> from a byte array, without having to go through a (provider-based) <pre><code> SecretKeyFactory </code></pre> . <p> This class is only useful for raw secret keys that can be represented as a byte array and have no key parameters associated with them, e.g., DES or Triple DES keys. </p><pre><code>public class SecretKeySpec\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/crypto/spec/SecretKeySpec.html
EGL	A										<section class="prog__container"><p class="dac-footer-copyright"> Except as noted, this content is licensed under Creative Commons Attribution 2.5 . For details and restrictions, see the Content License .</p><pre><code>public interface EGL\n</code></pre></section>	https://developer.android.com/reference/javax/microedition/khronos/egl/EGL.html
EGL10	A										<section class="prog__container"><pre><code>public interface EGL10\nimplements EGL</code></pre></section>	https://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html
EGL11	A										<section class="prog__container"><pre><code>public interface EGL11\nimplements EGL10</code></pre></section>	https://developer.android.com/reference/javax/microedition/khronos/egl/EGL11.html
EGLConfig	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public abstract class EGLConfig\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/microedition/khronos/egl/EGLConfig.html
EGLContext	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public abstract class EGLContext\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/microedition/khronos/egl/EGLContext.html
EGLDisplay	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public abstract class EGLDisplay\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/microedition/khronos/egl/EGLDisplay.html
EGLSurface	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p><pre><code>public abstract class EGLSurface\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/microedition/khronos/egl/EGLSurface.html
javax.microedition.khronos.egl	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/javax/microedition/khronos/egl/package-summary.html
GL	A										<section class="prog__container"><p class="dac-footer-copyright"> Except as noted, this content is licensed under Creative Commons Attribution 2.5 . For details and restrictions, see the Content License .</p><pre><code>public interface GL\n</code></pre></section>	https://developer.android.com/reference/javax/microedition/khronos/opengles/GL.html
GL10	A										<section class="prog__container"><pre><code>public interface GL10\nimplements GL</code></pre></section>	https://developer.android.com/reference/javax/microedition/khronos/opengles/GL10.html
GL10Ext	A										<section class="prog__container"><pre><code>public interface GL10Ext\nimplements GL</code></pre></section>	https://developer.android.com/reference/javax/microedition/khronos/opengles/GL10Ext.html
GL11	A										<section class="prog__container"><pre><code>public interface GL11\nimplements GL10</code></pre></section>	https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11.html
GL11Ext	A										<section class="prog__container"><pre><code>public interface GL11Ext\nimplements GL</code></pre></section>	https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html
GL11ExtensionPack	A										<section class="prog__container"><pre><code>public interface GL11ExtensionPack\nimplements GL</code></pre></section>	https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11ExtensionPack.html
javax.microedition.khronos.opengles	A										<section class="prog__container">Provides a standard OpenGL interface.</section>	https://developer.android.com/reference/javax/microedition/khronos/opengles/package-summary.html
javax.net	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/javax/net/package-summary.html
ServerSocketFactory	A										<section class="prog__container"><p> This class creates server sockets. It may be subclassed by other factories, which create particular types of server sockets. This provides a general framework for the addition of public socket-level functionality. It is the server side analogue of a socket factory, and similarly provides a way to capture a variety of policies related to the sockets being constructed. <p> Like socket factories, server Socket factory instances have methods used to create sockets. There is also an environment specific default server socket factory; frameworks will often use their own customized factory. </p><pre><code>public abstract class ServerSocketFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/net/ServerSocketFactory.html
SocketFactory	A										<section class="prog__container"><p> This class creates sockets. It may be subclassed by other factories, which create particular subclasses of sockets and thus provide a general framework for the addition of public socket-level functionality. <p> Socket factories are a simple way to capture a variety of policies related to the sockets being constructed, producing such sockets in a way which does not require special configuration of the code which asks for the sockets: <ul> <li> Due to polymorphism of both factories and sockets, different kinds of sockets can be used by the same application code just by passing it different kinds of factories. <li> Factories can themselves be customized with parameters used in socket construction. So for example, factories could be customized to return sockets with different networking timeouts or security parameters already configured. <li> The sockets returned to the application can be subclasses of java.net.Socket, so that they can directly expose new APIs for features such as compression, security, record marking, statistics collection, or firewall tunneling. </li> </li> </li> </ul> <p> Factory classes are specified by environment-specific configuration mechanisms. For example, the <em> getDefault </em> method could return a factory that was appropriate for a particular user or applet, and a framework could use a factory customized to its own purposes. </p><pre><code>public abstract class SocketFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/net/SocketFactory.html
CertPathTrustManagerParameters	A										<section class="prog__container"><p> A wrapper for CertPathParameters. This class is used to pass validation settings to CertPath based <pre><code> TrustManager </code></pre> s using the <pre><code> TrustManagerFactory.init() </code></pre> method. <p> Instances of this class are immutable. </p><pre><code>public class CertPathTrustManagerParameters\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/CertPathTrustManagerParameters.html
ExtendedSSLSession	A										<section class="prog__container"><p> Extends the <pre><code> SSLSession </code></pre> interface to support additional session attributes.</p><pre><code>public abstract class ExtendedSSLSession\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/ExtendedSSLSession.html
HandshakeCompletedEvent	A										<section class="prog__container"><p> This event indicates that an SSL handshake completed on a given SSL connection. All of the core information about that handshake's result is captured through an "SSLSession" object. As a convenience, this event class provides direct access to some important session attributes. <p> The source of this event is the SSLSocket on which handshaking just completed. </p><pre><code>public class HandshakeCompletedEvent\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/HandshakeCompletedEvent.html
HandshakeCompletedListener	A										<section class="prog__container"><p> This interface is implemented by any class which wants to receive notifications about the completion of an SSL protocol handshake on a given SSL connection. <p> When an SSL handshake completes, new security parameters will have been established. Those parameters always include the security keys used to protect messages. They may also include parameters associated with a new <em> session </em> such as authenticated peer identity and a new SSL cipher suite. </p><pre><code>public interface HandshakeCompletedListener\nimplements EventListener</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/HandshakeCompletedListener.html
HostnameVerifier	A										<section class="prog__container"><p> This class is the base interface for hostname verification. <p> During handshaking, if the URL's hostname and the server's identification hostname mismatch, the verification mechanism can call back to implementers of this interface to determine if this connection should be allowed. <p> The policies can be certificate-based or may depend on other authentication schemes. <p> These callbacks are used when the default rules for URL hostname verification fail. </p><pre><code>public interface HostnameVerifier\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/HostnameVerifier.html
HttpsURLConnection	A										<section class="prog__container"><p> <pre><code> HttpsURLConnection </code></pre> extends <pre><code> HttpURLConnection </code></pre> with support for https-specific features. <p> See http://www.w3.org/pub/WWW/Protocols/ and RFC 2818 for more details on the https specification. <p> This class uses <pre><code> HostnameVerifier </code></pre> and <pre><code> SSLSocketFactory </code></pre> . There are default implementations defined for both classes. However, the implementations can be replaced on a per-class (static) or per-instance basis. All new <pre><code> HttpsURLConnection </code></pre> s instances will be assigned the "default" static values at instance creation, but they can be overriden by calling the appropriate per-instance set method(s) before <pre><code> connect </code></pre> ing. </p><pre><code>public abstract class HttpsURLConnection\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html
KeyManager	A										<section class="prog__container"><p> This is the base interface for JSSE key managers. <p> <pre><code> KeyManager </code></pre> s are responsible for managing the key material which is used to authenticate the local SSLSocket to its peer. If no key material is available, the socket will be unable to present authentication credentials. <p> <pre><code> KeyManager </code></pre> s are created by either using a <pre><code> KeyManagerFactory </code></pre> , or by implementing one of the <pre><code> KeyManager </code></pre> subclasses. </p><pre><code>public interface KeyManager\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/KeyManager.html
KeyManagerFactory	A										<section class="prog__container"><p> This class acts as a factory for key managers based on a source of key material. Each key manager manages a specific type of key material for use by secure sockets. The key material is based on a KeyStore and/or provider specific sources.</p><pre><code>public class KeyManagerFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/KeyManagerFactory.html
KeyManagerFactorySpi	A										<section class="prog__container"><p> This class defines the <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> KeyManagerFactory </code></pre> class. <p> All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a particular key manager factory. </p><pre><code>public abstract class KeyManagerFactorySpi\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/KeyManagerFactorySpi.html
KeyStoreBuilderParameters	A										<section class="prog__container"><p> A parameters object for X509KeyManagers that encapsulates a List of KeyStore.Builders.</p><pre><code>public class KeyStoreBuilderParameters\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/KeyStoreBuilderParameters.html
ManagerFactoryParameters	A										<section class="prog__container"><p> This class is the base interface for providing algorithm-specific information to a KeyManagerFactory or TrustManagerFactory. <p> In some cases, initialization parameters other than keystores may be needed by a provider. Users of that particular provider are expected to pass an implementation of the appropriate sub-interface of this class as defined by the provider. The provider can then call the specified methods in the <pre><code> ManagerFactoryParameters </code></pre> implementation to obtain the needed information. </p><pre><code>public interface ManagerFactoryParameters\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/ManagerFactoryParameters.html
javax.net.ssl	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/javax/net/ssl/package-summary.html
SNIHostName	A										<section class="prog__container"><p> Instances of this class represent a server name of type <pre><code> host_name </code></pre> in a Server Name Indication (SNI) extension. <p> As described in section 3, "Server Name Indication", of TLS Extensions (RFC 6066) , "HostName" contains the fully qualified DNS hostname of the server, as understood by the client. The encoded server name value of a hostname is represented as a byte string using ASCII encoding without a trailing dot. This allows the support of Internationalized Domain Names (IDN) through the use of A-labels (the ASCII-Compatible Encoding (ACE) form of a valid string of Internationalized Domain Names for Applications (IDNA)) defined in RFC 5890 . <p> Note that <pre><code> SNIHostName </code></pre> objects are immutable. </p><pre><code>public final class SNIHostName\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SNIHostName.html
SNIMatcher	A										<section class="prog__container"><p> Instances of this class represent a matcher that performs match operations on an <pre><code> SNIServerName </code></pre> instance. <p> Servers can use Server Name Indication (SNI) information to decide if specific <pre><code> SSLSocket </code></pre> or <pre><code> SSLEngine </code></pre> instances should accept a connection. For example, when multiple "virtual" or "name-based" servers are hosted on a single underlying network address, the server application can use SNI information to determine whether this server is the exact server that the client wants to access. Instances of this class can be used by a server to verify the acceptable server names of a particular type, such as host names. <p> <pre><code> SNIMatcher </code></pre> objects are immutable. Subclasses should not provide methods that can change the state of an instance once it has been created. </p><pre><code>public abstract class SNIMatcher\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SNIMatcher.html
SNIServerName	A										<section class="prog__container"><p> Instances of this class represent a server name in a Server Name Indication (SNI) extension. <p> The SNI extension is a feature that extends the SSL/TLS protocols to indicate what server name the client is attempting to connect to during handshaking. See section 3, "Server Name Indication", of TLS Extensions (RFC 6066) . <p> <pre><code> SNIServerName </code></pre> objects are immutable. Subclasses should not provide methods that can change the state of an instance once it has been created. </p><pre><code>public abstract class SNIServerName\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SNIServerName.html
SSLContext	A										<section class="prog__container"><p> Instances of this class represent a secure socket protocol implementation which acts as a factory for secure socket factories or <pre><code> SSLEngine </code></pre> s. This class is initialized with an optional set of key and trust managers and source of secure random bytes. <p> Android provides the following <pre><code> SSLContext </code></pre> protocols: <table> <thead> <tr> <th> Name </th> <th> Supported (API Levels) </th> </tr> </thead> <tbody> <tr> <td> Default </td> <td> 10+ </td> </tr> <tr> <td> SSL </td> <td> 10+ </td> </tr> <tr> <td> SSLv3 </td> <td> 10+ </td> </tr> <tr> <td> TLS </td> <td> 1+ </td> </tr> <tr> <td> TLSv1 </td> <td> 10+ </td> </tr> <tr> <td> TLSv1.1 </td> <td> 16+ </td> </tr> <tr> <td> TLSv1.2 </td> <td> 16+ </td> </tr> </tbody> </table> This protocol is described in the SSLContext section of the Java Cryptography Architecture Standard Algorithm Name Documentation. </p><pre><code>public class SSLContext\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLContext.html
SSLContextSpi	A										<section class="prog__container"><p> This class defines the <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> SSLContext </code></pre> class. <p> All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a particular SSL context. </p><pre><code>public abstract class SSLContextSpi\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLContextSpi.html
SSLEngine	A										<section class="prog__container"><p> A class which enables secure communications using protocols such as the Secure Sockets Layer (SSL) or IETF RFC 2246 "Transport Layer Security" (TLS) protocols, but is transport independent. <p> The secure communications modes include: <ul> <li> <em> Integrity Protection </em> . SSL/TLS protects against modification of messages by an active wiretapper. <li> <em> Authentication </em> . In most modes, SSL/TLS provides peer authentication. Servers are usually authenticated, and clients may be authenticated as requested by servers. <li> <em> Confidentiality (Privacy Protection) </em> . In most modes, SSL/TLS encrypts data being sent between client and server. This protects the confidentiality of data, so that passive wiretappers won't see sensitive data such as financial information or personal information of many kinds. </li> </li> </li> </ul> These kinds of protection are specified by a "cipher suite", which is a combination of cryptographic algorithms used by a given SSL connection. During the negotiation process, the two endpoints must agree on a cipher suite that is available in both environments. If there is no such suite in common, no SSL connection can be established, and no data can be exchanged. <p> The cipher suite used is established by a negotiation process called "handshaking". The goal of this process is to create or rejoin a "session", which may protect many connections over time. After handshaking has completed, you can access session attributes by using the <pre><code> getSession() </code></pre> method. <p> The <pre><code> SSLSocket </code></pre> class provides much of the same security functionality, but all of the inbound and outbound data is automatically transported using the underlying <pre><code> Socket </code></pre> , which by design uses a blocking model. While this is appropriate for many applications, this model does not provide the scalability required by large servers. <p> The primary distinction of an <pre><code> SSLEngine </code></pre> is that it operates on inbound and outbound byte streams, independent of the transport mechanism. It is the responsibility of the <pre><code> SSLEngine </code></pre> user to arrange for reliable I/O transport to the peer. By separating the SSL/TLS abstraction from the I/O transport mechanism, the <pre><code> SSLEngine </code></pre> can be used for a wide variety of I/O types, such as <pre><code> non-blocking I/O (polling) </code></pre> , <pre><code> selectable non-blocking I/O </code></pre> , <pre><code> Socket </code></pre> and the traditional Input/OutputStreams, local <pre><code> ByteBuffers </code></pre> or byte arrays, future asynchronous I/O models , and so on. <p> At a high level, the <pre><code> SSLEngine </code></pre> appears thus: <pre> app data | ^ | | | v | | +----+-----|-----+----+ | | | | SSL|Engine | wrap() | | | unwrap() | OUTBOUND | INBOUND | | | | +----+-----|-----+----+ | | ^ | | | v | net data </pre> Application data (also known as plaintext or cleartext) is data which is produced or consumed by an application. Its counterpart is network data, which consists of either handshaking and/or ciphertext (encrypted) data, and destined to be transported via an I/O mechanism. Inbound data is data which has been received from the peer, and outbound data is destined for the peer. <p> (In the context of an <pre><code> SSLEngine </code></pre> , the term "handshake data" is taken to mean any data exchanged to establish and control a secure connection. Handshake data includes the SSL/TLS messages "alert", "change_cipher_spec," and "handshake.") <p> There are five distinct phases to an <pre><code> SSLEngine </code></pre> . <ol> <li> Creation - The <pre><code> SSLEngine </code></pre> has been created and initialized, but has not yet been used. During this phase, an application may set any <pre><code> SSLEngine </code></pre> -specific settings (enabled cipher suites, whether the <pre><code> SSLEngine </code></pre> should handshake in client or server mode, and so on). Once handshaking has begun, though, any new settings (except client/server mode, see below) will be used for the next handshake. <li> Initial Handshake - The initial handshake is a procedure by which the two peers exchange communication parameters until an SSLSession is established. Application data can not be sent during this phase. <li> Application Data - Once the communication parameters have been established and the handshake is complete, application data may flow through the <pre><code> SSLEngine </code></pre> . Outbound application messages are encrypted and integrity protected, and inbound messages reverse the process. <li> Rehandshaking - Either side may request a renegotiation of the session at any time during the Application Data phase. New handshaking data can be intermixed among the application data. Before starting the rehandshake phase, the application may reset the SSL/TLS communication parameters such as the list of enabled ciphersuites and whether to use client authentication, but can not change between client/server modes. As before, once handshaking has begun, any new <pre><code> SSLEngine </code></pre> configuration settings will not be used until the next handshake. <li> Closure - When the connection is no longer needed, the application should close the <pre><code> SSLEngine </code></pre> and should send/receive any remaining messages to the peer before closing the underlying transport mechanism. Once an engine is closed, it is not reusable: a new <pre><code> SSLEngine </code></pre> must be created. </li> </li> </li> </li> </li> </ol> An <pre><code> SSLEngine </code></pre> is created by calling <pre><code> createSSLEngine() </code></pre> from an initialized <pre><code> SSLContext </code></pre> . Any configuration parameters should be set before making the first call to <pre><code> wrap() </code></pre> , <pre><code> unwrap() </code></pre> , or <pre><code> beginHandshake() </code></pre> . These methods all trigger the initial handshake. <p> Data moves through the engine by calling <pre><code> wrap() </code></pre> or <pre><code> unwrap() </code></pre> on outbound or inbound data, respectively. Depending on the state of the <pre><code> SSLEngine </code></pre> , a <pre><code> wrap() </code></pre> call may consume application data from the source buffer and may produce network data in the destination buffer. The outbound data may contain application and/or handshake data. A call to <pre><code> unwrap() </code></pre> will examine the source buffer and may advance the handshake if the data is handshaking information, or may place application data in the destination buffer if the data is application. The state of the underlying SSL/TLS algorithm will determine when data is consumed and produced. <p> Calls to <pre><code> wrap() </code></pre> and <pre><code> unwrap() </code></pre> return an <pre><code> SSLEngineResult </code></pre> which indicates the status of the operation, and (optionally) how to interact with the engine to make progress. <p> The <pre><code> SSLEngine </code></pre> produces/consumes complete SSL/TLS packets only, and does not store application data internally between calls to <pre><code> wrap()/unwrap() </code></pre> . Thus input and output <pre><code> ByteBuffer </code></pre> s must be sized appropriately to hold the maximum record that can be produced. Calls to <pre><code> getPacketBufferSize() </code></pre> and <pre><code> getApplicationBufferSize() </code></pre> should be used to determine the appropriate buffer sizes. The size of the outbound application data buffer generally does not matter. If buffer conditions do not allow for the proper consumption/production of data, the application must determine (via <pre><code> SSLEngineResult </code></pre> ) and correct the problem, and then try the call again. <p> For example, <pre><code> unwrap() </code></pre> will return a <pre><code> BUFFER_OVERFLOW </code></pre> result if the engine determines that there is not enough destination buffer space available. Applications should call <pre><code> getApplicationBufferSize() </code></pre> and compare that value with the space available in the destination buffer, enlarging the buffer if necessary. Similarly, if <pre><code> unwrap() </code></pre> were to return a <pre><code> BUFFER_UNDERFLOW </code></pre> , the application should call <pre><code> getPacketBufferSize() </code></pre> to ensure that the source buffer has enough room to hold a record (enlarging if necessary), and then obtain more inbound data. <pre> SSLEngineResult r = engine.unwrap(src, dst); switch (r.getStatus()) { BUFFER_OVERFLOW: // Could attempt to drain the dst buffer of any already obtained // data, but we'll just increase it to the size needed. int appSize = engine.getSession().getApplicationBufferSize(); ByteBuffer b = ByteBuffer.allocate(appSize + dst.position()); dst.flip(); b.put(dst); dst = b; // retry the operation. break; BUFFER_UNDERFLOW: int netSize = engine.getSession().getPacketBufferSize(); // Resize buffer if needed. if (netSize &gt; dst.capacity()) { ByteBuffer b = ByteBuffer.allocate(netSize); src.flip(); b.put(src); src = b; } // Obtain more inbound network data for src, // then retry the operation. break; // other cases: CLOSED, OK. } </pre> <p> Unlike <pre><code> SSLSocket </code></pre> , all methods of SSLEngine are non-blocking. <pre><code> SSLEngine </code></pre> implementations may require the results of tasks that may take an extended period of time to complete, or may even block. For example, a TrustManager may need to connect to a remote certificate validation service, or a KeyManager might need to prompt a user to determine which certificate to use as part of client authentication. Additionally, creating cryptographic signatures and verifying them can be slow, seemingly blocking. <p> For any operation which may potentially block, the <pre><code> SSLEngine </code></pre> will create a <pre><code> Runnable </code></pre> delegated task. When <pre><code> SSLEngineResult </code></pre> indicates that a delegated task result is needed, the application must call <pre><code> getDelegatedTask() </code></pre> to obtain an outstanding delegated task and call its <pre><code> run() </code></pre> method (possibly using a different thread depending on the compute strategy). The application should continue obtaining delegated tasks until no more exist, and try the original operation again. <p> At the end of a communication session, applications should properly close the SSL/TLS link. The SSL/TLS protocols have closure handshake messages, and these messages should be communicated to the peer before releasing the <pre><code> SSLEngine </code></pre> and closing the underlying transport mechanism. A close can be initiated by one of: an SSLException, an inbound closure handshake message, or one of the close methods. In all cases, closure handshake messages are generated by the engine, and <pre><code> wrap() </code></pre> should be repeatedly called until the resulting <pre><code> SSLEngineResult </code></pre> 's status returns "CLOSED", or <pre><code> isOutboundDone() </code></pre> returns true. All data obtained from the <pre><code> wrap() </code></pre> method should be sent to the peer. <p> <pre><code> closeOutbound() </code></pre> is used to signal the engine that the application will not be sending any more data. <p> A peer will signal its intent to close by sending its own closure handshake message. After this message has been received and processed by the local <pre><code> SSLEngine </code></pre> 's <pre><code> unwrap() </code></pre> call, the application can detect the close by calling <pre><code> unwrap() </code></pre> and looking for a <pre><code> SSLEngineResult </code></pre> with status "CLOSED", or if <pre><code> isInboundDone() </code></pre> returns true. If for some reason the peer closes the communication link without sending the proper SSL/TLS closure message, the application can detect the end-of-stream and can signal the engine via <pre><code> closeInbound() </code></pre> that there will no more inbound messages to process. Some applications might choose to require orderly shutdown messages from a peer, in which case they can check that the closure was generated by a handshake message and not by an end-of-stream condition. <p> There are two groups of cipher suites which you will need to know about when managing cipher suites: <ul> <li> <em> Supported </em> cipher suites: all the suites which are supported by the SSL implementation. This list is reported using <pre><code> getSupportedCipherSuites() </code></pre> . <li> <em> Enabled </em> cipher suites, which may be fewer than the full set of supported suites. This group is set using the <pre><code> setEnabledCipherSuites(String[]) </code></pre> method, and queried using the <pre><code> getEnabledCipherSuites() </code></pre> method. Initially, a default set of cipher suites will be enabled on a new engine that represents the minimum suggested configuration. </li> </li> </ul> Implementation defaults require that only cipher suites which authenticate servers and provide confidentiality be enabled by default. Only if both sides explicitly agree to unauthenticated and/or non-private (unencrypted) communications will such a cipher suite be selected. <p> Each SSL/TLS connection must have one client and one server, thus each endpoint must decide which role to assume. This choice determines who begins the handshaking process as well as which type of messages should be sent by each party. The method <pre><code> setUseClientMode(boolean) </code></pre> configures the mode. Once the initial handshaking has started, an <pre><code> SSLEngine </code></pre> can not switch between client and server modes, even when performing renegotiations. <p> Applications might choose to process delegated tasks in different threads. When an <pre><code> SSLEngine </code></pre> is created, the current <pre><code> AccessControlContext </code></pre> is saved. All future delegated tasks will be processed using this context: that is, all access control decisions will be made using the context captured at engine creation. <p> <hr> <b> Concurrency Notes </b> : There are two concurrency issues to be aware of: <ol> <li> The <pre><code> wrap() </code></pre> and <pre><code> unwrap() </code></pre> methods may execute concurrently of each other. <li> The SSL/TLS protocols employ ordered packets. Applications must take care to ensure that generated packets are delivered in sequence. If packets arrive out-of-order, unexpected or fatal results may occur. <p> For example: <p> <pre> synchronized (outboundLock) { sslEngine.wrap(src, dst); outboundQueue.put(dst); } </pre> As a corollary, two threads must not attempt to call the same method (either <pre><code> wrap() </code></pre> or <pre><code> unwrap() </code></pre> ) concurrently, because there is no way to guarantee the eventual packet ordering. </p><pre><code>public abstract class SSLEngine\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLEngine.html
SSLEngineResult.HandshakeStatus	A										<section class="prog__container"><p> An <pre><code> SSLEngineResult </code></pre> enum describing the current handshaking state of this <pre><code> SSLEngine </code></pre> .</p><pre><code>public static final enum SSLEngineResult.HandshakeStatus\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLEngineResult.HandshakeStatus.html
SSLEngineResult	A										<section class="prog__container"><p> An encapsulation of the result state produced by <pre><code> SSLEngine </code></pre> I/O calls. <p> A <pre><code> SSLEngine </code></pre> provides a means for establishing secure communication sessions between two peers. <pre><code> SSLEngine </code></pre> operations typically consume bytes from an input buffer and produce bytes in an output buffer. This class provides operational result values describing the state of the <pre><code> SSLEngine </code></pre> , including indications of what operations are needed to finish an ongoing handshake. Lastly, it reports the number of bytes consumed and produced as a result of this operation. </p><pre><code>public class SSLEngineResult\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLEngineResult.html
SSLEngineResult.Status	A										<section class="prog__container"><p> An <pre><code> SSLEngineResult </code></pre> enum describing the overall result of the <pre><code> SSLEngine </code></pre> operation. The <pre><code> Status </code></pre> value does not reflect the state of a <pre><code> SSLEngine </code></pre> handshake currently in progress. The <pre><code> SSLEngineResult's HandshakeStatus </code></pre> should be consulted for that information.</p><pre><code>public static final enum SSLEngineResult.Status\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLEngineResult.Status.html
SSLException	A										<section class="prog__container"><p> Indicates some kind of error detected by an SSL subsystem. This class is the general class of exceptions produced by failed SSL-related operations.</p><pre><code>public class SSLException\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLException.html
SSLHandshakeException	A										<section class="prog__container"><p> Indicates that the client and server could not negotiate the desired level of security. The connection is no longer usable.</p><pre><code>public class SSLHandshakeException\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLHandshakeException.html
SSLKeyException	A										<section class="prog__container"><p> Reports a bad SSL key. Normally, this indicates misconfiguration of the server or client SSL certificate and private key.</p><pre><code>public class SSLKeyException\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLKeyException.html
SSLParameters	A										<section class="prog__container"><p> Encapsulates parameters for an SSL/TLS connection. The parameters are the list of ciphersuites to be accepted in an SSL/TLS handshake, the list of protocols to be allowed, the endpoint identification algorithm during SSL/TLS handshaking, the Server Name Indication (SNI), the algorithm constraints and whether SSL/TLS servers should request or require client authentication, etc. <p> SSLParameters can be created via the constructors in this class. Objects can also be obtained using the <pre><code> getSSLParameters() </code></pre> methods in <pre><code> SSLSocket </code></pre> and <pre><code> SSLServerSocket </code></pre> and <pre><code> SSLEngine </code></pre> or the <pre><code> getDefaultSSLParameters() </code></pre> and <pre><code> getSupportedSSLParameters() </code></pre> methods in <pre><code> SSLContext </code></pre> . <p> SSLParameters can be applied to a connection via the methods <pre><code> SSLSocket.setSSLParameters() </code></pre> and <pre><code> SSLServerSocket.setSSLParameters() </code></pre> and <pre><code> SSLEngine.setSSLParameters() </code></pre> . </p><pre><code>public class SSLParameters\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLParameters.html
SSLPeerUnverifiedException	A										<section class="prog__container"><p> Indicates that the peer's identity has not been verified. <p> When the peer was not able to identify itself (for example; no certificate, the particular cipher suite being used does not support authentication, or no peer authentication was established during SSL handshaking) this exception is thrown. </p><pre><code>public class SSLPeerUnverifiedException\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLPeerUnverifiedException.html
SSLPermission	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public final class SSLPermission\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLPermission.html
SSLProtocolException	A										<section class="prog__container"><p> Reports an error in the operation of the SSL protocol. Normally this indicates a flaw in one of the protocol implementations.</p><pre><code>public class SSLProtocolException\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLProtocolException.html
SSLServerSocket	A										<section class="prog__container"><p> This class extends <pre><code> ServerSocket </code></pre> s and provides secure server sockets using protocols such as the Secure Sockets Layer (SSL) or Transport Layer Security (TLS) protocols. <p> Instances of this class are generally created using a <pre><code> SSLServerSocketFactory </code></pre> . The primary function of <pre><code> SSLServerSocket </code></pre> s is to create <pre><code> SSLSocket </code></pre> s by <pre><code> accept </code></pre> ing connections. <p> <pre><code> SSLServerSocket </code></pre> s contain several pieces of state data which are inherited by the <pre><code> SSLSocket </code></pre> at socket creation. These include the enabled cipher suites and protocols, whether client authentication is necessary, and whether created sockets should begin handshaking in client or server mode. The state inherited by the created <pre><code> SSLSocket </code></pre> can be overriden by calling the appropriate methods. </p><pre><code>public abstract class SSLServerSocket\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLServerSocket.html
SSLServerSocketFactory	A										<section class="prog__container"><p> <pre><code> SSLServerSocketFactory </code></pre> s create <pre><code> SSLServerSocket </code></pre> s.</p><pre><code>public abstract class SSLServerSocketFactory\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLServerSocketFactory.html
SSLSession	A										<section class="prog__container"><p> In SSL, sessions are used to describe an ongoing relationship between two entities. Each SSL connection involves one session at a time, but that session may be used on many connections between those entities, simultaneously or sequentially. The session used on a connection may also be replaced by a different session. Sessions are created, or rejoined, as part of the SSL handshaking protocol. Sessions may be invalidated due to policies affecting security or resource usage, or by an application explicitly calling <pre><code> invalidate </code></pre> . Session management policies are typically used to tune performance. <p> In addition to the standard session attributes, SSL sessions expose these read-only attributes: <ul> <li> <em> Peer Identity. </em> Sessions are between a particular client and a particular server. The identity of the peer may have been established as part of session setup. Peers are generally identified by X.509 certificate chains. <li> <em> Cipher Suite Name. </em> Cipher suites describe the kind of cryptographic protection that's used by connections in a particular session. <li> <em> Peer Host. </em> All connections in a session are between the same two hosts. The address of the host on the other side of the connection is available. </li> </li> </li> </ul> <p> Sessions may be explicitly invalidated. Invalidation may also be done implicitly, when faced with certain kinds of errors. </p><pre><code>public interface SSLSession\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLSession.html
SSLSessionBindingEvent	A										<section class="prog__container"><p> This event is propagated to a SSLSessionBindingListener. When a listener object is bound or unbound to an SSLSession by <pre><code> putValue(String, Object) </code></pre> or <pre><code> removeValue(String) </code></pre> , objects which implement the SSLSessionBindingListener will be receive an event of this type. The event's <pre><code> name </code></pre> field is the key in which the listener is being bound or unbound.</p><pre><code>public class SSLSessionBindingEvent\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLSessionBindingEvent.html
SSLSessionBindingListener	A										<section class="prog__container"><p> This interface is implemented by objects which want to know when they are being bound or unbound from a SSLSession. When either event occurs via <pre><code> putValue(String, Object) </code></pre> or <pre><code> removeValue(String) </code></pre> , the event is communicated through a SSLSessionBindingEvent identifying the session.</p><pre><code>public interface SSLSessionBindingListener\nimplements EventListener</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLSessionBindingListener.html
SSLSessionContext	A										<section class="prog__container"><p> A <pre><code> SSLSessionContext </code></pre> represents a set of <pre><code> SSLSession </code></pre> s associated with a single entity. For example, it could be associated with a server or client who participates in many sessions concurrently. <p> Not all environments will contain session contexts. <p> There are <pre><code> SSLSessionContext </code></pre> parameters that affect how sessions are stored: <ul> <li> Sessions can be set to expire after a specified time limit. <li> The number of sessions that can be stored in context can be limited. </li> </li> </ul> A session can be retrieved based on its session id, and all session id's in a <pre><code> SSLSessionContext </code></pre> can be listed. </p><pre><code>public interface SSLSessionContext\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLSessionContext.html
SSLSocket	A										<section class="prog__container"><p> This class extends <pre><code> Socket </code></pre> s and provides secure socket using protocols such as the "Secure Sockets Layer" (SSL) or IETF "Transport Layer Security" (TLS) protocols. <p> Such sockets are normal stream sockets, but they add a layer of security protections over the underlying network transport protocol, such as TCP. Those protections include: <ul> <li> <em> Integrity Protection </em> . SSL protects against modification of messages by an active wiretapper. <li> <em> Authentication </em> . In most modes, SSL provides peer authentication. Servers are usually authenticated, and clients may be authenticated as requested by servers. <li> <em> Confidentiality (Privacy Protection) </em> . In most modes, SSL encrypts data being sent between client and server. This protects the confidentiality of data, so that passive wiretappers won't see sensitive data such as financial information or personal information of many kinds. </li> </li> </li> </ul> <p> These kinds of protection are specified by a "cipher suite", which is a combination of cryptographic algorithms used by a given SSL connection. During the negotiation process, the two endpoints must agree on a ciphersuite that is available in both environments. If there is no such suite in common, no SSL connection can be established, and no data can be exchanged. <p> The cipher suite used is established by a negotiation process called "handshaking". The goal of this process is to create or rejoin a "session", which may protect many connections over time. After handshaking has completed, you can access session attributes by using the <em> getSession </em> method. The initial handshake on this connection can be initiated in one of three ways: <ul> <li> calling <pre><code> startHandshake </code></pre> which explicitly begins handshakes, or <li> any attempt to read or write application data on this socket causes an implicit handshake, or <li> a call to <pre><code> getSession </code></pre> tries to set up a session if there is no currently valid session, and an implicit handshake is done. </li> </li> </li> </ul> <p> If handshaking fails for any reason, the <pre><code> SSLSocket </code></pre> is closed, and no futher communications can be done. <p> There are two groups of cipher suites which you will need to know about when managing cipher suites: <ul> <li> <em> Supported </em> cipher suites: all the suites which are supported by the SSL implementation. This list is reported using <em> getSupportedCipherSuites </em> . <li> <em> Enabled </em> cipher suites, which may be fewer than the full set of supported suites. This group is set using the <em> setEnabledCipherSuites </em> method, and queried using the <em> getEnabledCipherSuites </em> method. Initially, a default set of cipher suites will be enabled on a new socket that represents the minimum suggested configuration. </li> </li> </ul> <p> Implementation defaults require that only cipher suites which authenticate servers and provide confidentiality be enabled by default. Only if both sides explicitly agree to unauthenticated and/or non-private (unencrypted) communications will such a ciphersuite be selected. <p> When <pre><code> SSLSocket </code></pre> s are first created, no handshaking is done so that applications may first set their communication preferences: what cipher suites to use, whether the socket should be in client or server mode, etc. However, security is always provided by the time that application data is sent over the connection. <p> You may register to receive event notification of handshake completion. This involves the use of two additional classes. <em> HandshakeCompletedEvent </em> objects are passed to <em> HandshakeCompletedListener </em> instances, which are registered by users of this API. <pre><code> SSLSocket </code></pre> s are created by <pre><code> SSLSocketFactory </code></pre> s, or by <pre><code> accept </code></pre> ing a connection from a <pre><code> SSLServerSocket </code></pre> . <p> A SSL socket must choose to operate in the client or server mode. This will determine who begins the handshaking process, as well as which messages should be sent by each party. Each connection must have one client and one server, or handshaking will not progress properly. Once the initial handshaking has started, a socket can not switch between client and server modes, even when performing renegotiations. </p><pre><code>public abstract class SSLSocket\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLSocket.html
SSLSocketFactory	A										<section class="prog__container"><p> <pre><code> SSLSocketFactory </code></pre> s create <pre><code> SSLSocket </code></pre> s.</p><pre><code>public abstract class SSLSocketFactory\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/SSLSocketFactory.html
StandardConstants	A										<section class="prog__container"><p> Standard constants definitions</p><pre><code>public final class StandardConstants\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/StandardConstants.html
TrustManager	A										<section class="prog__container"><p> This is the base interface for JSSE trust managers. <p> <pre><code> TrustManager </code></pre> s are responsible for managing the trust material that is used when making trust decisions, and for deciding whether credentials presented by a peer should be accepted. <p> <pre><code> TrustManager </code></pre> s are created by either using a <pre><code> TrustManagerFactory </code></pre> , or by implementing one of the <pre><code> TrustManager </code></pre> subclasses. </p><pre><code>public interface TrustManager\n</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/TrustManager.html
TrustManagerFactory	A										<section class="prog__container"><p> This class acts as a factory for trust managers based on a source of trust material. Each trust manager manages a specific type of trust material for use by secure sockets. The trust material is based on a KeyStore and/or provider specific sources.</p><pre><code>public class TrustManagerFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/TrustManagerFactory.html
TrustManagerFactorySpi	A										<section class="prog__container"><p> This class defines the <i> Service Provider Interface </i> ( <b> SPI </b> ) for the <pre><code> TrustManagerFactory </code></pre> class. <p> All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a particular trust manager factory. </p><pre><code>public abstract class TrustManagerFactorySpi\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/TrustManagerFactorySpi.html
X509ExtendedKeyManager	A										<section class="prog__container"><p> Abstract class that provides for extension of the X509KeyManager interface. <p> Methods in this class should be overriden to provide actual implementations. </p><pre><code>public abstract class X509ExtendedKeyManager\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/X509ExtendedKeyManager.html
X509ExtendedTrustManager	A										<section class="prog__container"><p> Extensions to the <pre><code> X509TrustManager </code></pre> interface to support SSL/TLS connection sensitive trust management. <p> To prevent man-in-the-middle attacks, hostname checks can be done to verify that the hostname in an end-entity certificate matches the targeted hostname. TLS does not require such checks, but some protocols over TLS (such as HTTPS) do. In earlier versions of the JDK, the certificate chain checks were done at the SSL/TLS layer, and the hostname verification checks were done at the layer over TLS. This class allows for the checking to be done during a single call to this class. <p> RFC 2830 defines the server identification specification for the "LDAPS" algorithm. RFC 2818 defines both the server identification and the client identification specification for the "HTTPS" algorithm. </p><pre><code>public abstract class X509ExtendedTrustManager\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/X509ExtendedTrustManager.html
X509KeyManager	A										<section class="prog__container"><p> Instances of this interface manage which X509 certificate-based key pairs are used to authenticate the local side of a secure socket. <p> During secure socket negotiations, implentations call methods in this interface to: <ul> <li> determine the set of aliases that are available for negotiations based on the criteria presented, <li> select the <italic> best alias </italic> based on the criteria presented, and <li> obtain the corresponding key material for given aliases. </li> </li> </li> </ul> <p> Note: the X509ExtendedKeyManager should be used in favor of this class. </p><pre><code>public interface X509KeyManager\nimplements KeyManager</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/X509KeyManager.html
X509TrustManager	A										<section class="prog__container"><p> Instance of this interface manage which X509 certificates may be used to authenticate the remote side of a secure socket. Decisions may be based on trusted certificate authorities, certificate revocation lists, online status checking or other means.</p><pre><code>public interface X509TrustManager\nimplements TrustManager</code></pre></section>	https://developer.android.com/reference/javax/net/ssl/X509TrustManager.html
AuthPermission	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public final class AuthPermission\n</code></pre></section>	https://developer.android.com/reference/javax/security/auth/AuthPermission.html
Destroyable	A										<section class="prog__container"><p> Objects such as credentials may optionally implement this interface to provide the capability to destroy its contents.</p><pre><code>public interface Destroyable\n</code></pre></section>	https://developer.android.com/reference/javax/security/auth/Destroyable.html
DestroyFailedException	A										<section class="prog__container"><p> Signals that a <pre><code> destroy </code></pre> operation failed. <p> This exception is thrown by credentials implementing the <pre><code> Destroyable </code></pre> interface when the <pre><code> destroy </code></pre> method fails. </p><pre><code>public class DestroyFailedException\n</code></pre></section>	https://developer.android.com/reference/javax/security/auth/DestroyFailedException.html
javax.security.auth	A										<section class="prog__container">A</section>	https://developer.android.com/reference/javax/security/auth/package-summary.html
PrivateCredentialPermission	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public final class PrivateCredentialPermission\n</code></pre></section>	https://developer.android.com/reference/javax/security/auth/PrivateCredentialPermission.html
Subject	A										<section class="prog__container"><p> <p> A <pre><code> Subject </code></pre> represents a grouping of related information for a single entity, such as a person. Such information includes the Subject's identities as well as its security-related attributes (passwords and cryptographic keys, for example). <p> Subjects may potentially have multiple identities. Each identity is represented as a <pre><code> Principal </code></pre> within the <pre><code> Subject </code></pre> . Principals simply bind names to a <pre><code> Subject </code></pre> . For example, a <pre><code> Subject </code></pre> that happens to be a person, Alice, might have two Principals: one which binds "Alice Bar", the name on her driver license, to the <pre><code> Subject </code></pre> , and another which binds, "999-99-9999", the number on her student identification card, to the <pre><code> Subject </code></pre> . Both Principals refer to the same <pre><code> Subject </code></pre> even though each has a different name. <p> A <pre><code> Subject </code></pre> may also own security-related attributes, which are referred to as credentials. Sensitive credentials that require special protection, such as private cryptographic keys, are stored within a private credential <pre><code> Set </code></pre> . Credentials intended to be shared, such as public key certificates or Kerberos server tickets are stored within a public credential <pre><code> Set </code></pre> . Different permissions are required to access and modify the different credential Sets. <p> To retrieve all the Principals associated with a <pre><code> Subject </code></pre> , invoke the <pre><code> getPrincipals </code></pre> method. To retrieve all the public or private credentials belonging to a <pre><code> Subject </code></pre> , invoke the <pre><code> getPublicCredentials </code></pre> method or <pre><code> getPrivateCredentials </code></pre> method, respectively. To modify the returned <pre><code> Set </code></pre> of Principals and credentials, use the methods defined in the <pre><code> Set </code></pre> class. For example: <pre> Subject subject; Principal principal; Object credential; // add a Principal and credential to the Subject subject.getPrincipals().add(principal); subject.getPublicCredentials().add(credential); </pre> <p> This <pre><code> Subject </code></pre> class implements <pre><code> Serializable </code></pre> . While the Principals associated with the <pre><code> Subject </code></pre> are serialized, the credentials associated with the <pre><code> Subject </code></pre> are not. Note that the <pre><code> java.security.Principal </code></pre> class does not implement <pre><code> Serializable </code></pre> . Therefore all concrete <pre><code> Principal </code></pre> implementations associated with Subjects must implement <pre><code> Serializable </code></pre> . </p><pre><code>public final class Subject\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/security/auth/Subject.html
SubjectDomainCombiner	A										<section class="prog__container"><p> Legacy security code; do not use.</p><pre><code>public class SubjectDomainCombiner\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/security/auth/SubjectDomainCombiner.html
Callback	A										<section class="prog__container"><p> <p> Implementations of this interface are passed to a <pre><code> CallbackHandler </code></pre> , allowing underlying security services the ability to interact with a calling application to retrieve specific authentication data such as usernames and passwords, or to display certain information, such as error and warning messages. <p> <pre><code> Callback </code></pre> implementations do not retrieve or display the information requested by underlying security services. <pre><code> Callback </code></pre> implementations simply provide the means to pass such requests to applications, and for applications, if appropriate, to return requested information back to the underlying security services. </p><pre><code>public interface Callback\n</code></pre></section>	https://developer.android.com/reference/javax/security/auth/callback/Callback.html
CallbackHandler	A										<section class="prog__container"><p> <p> An application implements a <pre><code> CallbackHandler </code></pre> and passes it to underlying security services so that they may interact with the application to retrieve specific authentication data, such as usernames and passwords, or to display certain information, such as error and warning messages. <p> CallbackHandlers are implemented in an application-dependent fashion. For example, implementations for an application with a graphical user interface (GUI) may pop up windows to prompt for requested information or to display error messages. An implementation may also choose to obtain requested information from an alternate source without asking the end user. <p> Underlying security services make requests for different types of information by passing individual Callbacks to the <pre><code> CallbackHandler </code></pre> . The <pre><code> CallbackHandler </code></pre> implementation decides how to retrieve and display information depending on the Callbacks passed to it. For example, if the underlying service needs a username and password to authenticate a user, it uses a <pre><code> NameCallback </code></pre> and <pre><code> PasswordCallback </code></pre> . The <pre><code> CallbackHandler </code></pre> can then choose to prompt for a username and password serially, or to prompt for both in a single window. <p> A default <pre><code> CallbackHandler </code></pre> class implementation may be specified in the <i> auth.login.defaultCallbackHandler </i> security property. The security property can be set in the Java security properties file located in the file named &lt;JAVA_HOME&gt;/lib/security/java.security. &lt;JAVA_HOME&gt; refers to the value of the java.home system property, and specifies the directory where the JRE is installed. <p> If the security property is set to the fully qualified name of a <pre><code> CallbackHandler </code></pre> implementation class, then a <pre><code> LoginContext </code></pre> will load the specified <pre><code> CallbackHandler </code></pre> and pass it to the underlying LoginModules. The <pre><code> LoginContext </code></pre> only loads the default handler if it was not provided one. <p> All default handler implementations must provide a public zero-argument constructor. </p><pre><code>public interface CallbackHandler\n</code></pre></section>	https://developer.android.com/reference/javax/security/auth/callback/CallbackHandler.html
javax.security.auth.callback	A										<section class="prog__container">Implementations of this interface are passed to a</section>	https://developer.android.com/reference/javax/security/auth/callback/package-summary.html
PasswordCallback	A										<section class="prog__container"><p> <p> Underlying security services instantiate and pass a <pre><code> PasswordCallback </code></pre> to the <pre><code> handle </code></pre> method of a <pre><code> CallbackHandler </code></pre> to retrieve password information. </p><pre><code>public class PasswordCallback\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/security/auth/callback/PasswordCallback.html
UnsupportedCallbackException	A										<section class="prog__container"><p> Signals that a <pre><code> CallbackHandler </code></pre> does not recognize a particular <pre><code> Callback </code></pre> .</p><pre><code>public class UnsupportedCallbackException\n</code></pre></section>	https://developer.android.com/reference/javax/security/auth/callback/UnsupportedCallbackException.html
LoginException	A										<section class="prog__container"><p> This is the basic login exception.</p><pre><code>public class LoginException\n</code></pre></section>	https://developer.android.com/reference/javax/security/auth/login/LoginException.html
javax.security.auth.login	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/javax/security/auth/login/package-summary.html
javax.security.auth.x500	A										<section class="prog__container">This class represents an X.500</section>	https://developer.android.com/reference/javax/security/auth/x500/package-summary.html
X500Principal	A										<section class="prog__container"><p> <p> This class represents an X.500 <pre><code> Principal </code></pre> . <pre><code> X500Principal </code></pre> s are represented by distinguished names such as "CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US". <p> This class can be instantiated by using a string representation of the distinguished name, or by using the ASN.1 DER encoded byte representation of the distinguished name. The current specification for the string representation of a distinguished name is defined in RFC 2253: Lightweight Directory Access Protocol (v3): UTF-8 String Representation of Distinguished Names . This class, however, accepts string formats from both RFC 2253 and RFC 1779: A String Representation of Distinguished Names , and also recognizes attribute type keywords whose OIDs (Object Identifiers) are defined in RFC 3280: Internet X.509 Public Key Infrastructure Certificate and CRL Profile . <p> The string representation for this <pre><code> X500Principal </code></pre> can be obtained by calling the <pre><code> getName </code></pre> methods. <p> Note that the <pre><code> getSubjectX500Principal </code></pre> and <pre><code> getIssuerX500Principal </code></pre> methods of <pre><code> X509Certificate </code></pre> return X500Principals representing the issuer and subject fields of the certificate. </p><pre><code>public final class X500Principal\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/security/auth/x500/X500Principal.html
Certificate	A										<section class="prog__container"><p> <p> Abstract class for managing a variety of identity certificates. An identity certificate is a guarantee by a principal that a public key is that of another principal. (A principal represents an entity such as an individual user, a group, or a corporation.) <p> This class is an abstraction for certificates that have different formats but important common uses. For example, different types of certificates, such as X.509 and PGP, share general certificate functionality (like encoding and verifying) and some types of information (like a public key). <p> X.509, PGP, and SDSI certificates can all be implemented by subclassing the Certificate class, even though they contain different sets of information, and they store and retrieve the information in different ways. <p> <em> Note: The classes in the package <pre><code> javax.security.cert </code></pre> exist for compatibility with earlier versions of the Java Secure Sockets Extension (JSSE). New applications should instead use the standard Java SE certificate classes located in <pre><code> java.security.cert </code></pre> . </em> </p><pre><code>public abstract class Certificate\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/security/cert/Certificate.html
CertificateEncodingException	A										<section class="prog__container"><p> Certificate Encoding Exception. This is thrown whenever an error occurs whilst attempting to encode a certificate. <p> <em> Note: The classes in the package <pre><code> javax.security.cert </code></pre> exist for compatibility with earlier versions of the Java Secure Sockets Extension (JSSE). New applications should instead use the standard Java SE certificate classes located in <pre><code> java.security.cert </code></pre> . </em> </p><pre><code>public class CertificateEncodingException\n</code></pre></section>	https://developer.android.com/reference/javax/security/cert/CertificateEncodingException.html
CertificateException	A										<section class="prog__container"><p> This exception indicates one of a variety of certificate problems. <p> <em> Note: The classes in the package <pre><code> javax.security.cert </code></pre> exist for compatibility with earlier versions of the Java Secure Sockets Extension (JSSE). New applications should instead use the standard Java SE certificate classes located in <pre><code> java.security.cert </code></pre> . </em> </p><pre><code>public class CertificateException\n</code></pre></section>	https://developer.android.com/reference/javax/security/cert/CertificateException.html
CertificateExpiredException	A										<section class="prog__container"><p> Certificate Expired Exception. This is thrown whenever the current <pre><code> Date </code></pre> or the specified <pre><code> Date </code></pre> is after the <pre><code> notAfter </code></pre> date/time specified in the validity period of the certificate. <p> <em> Note: The classes in the package <pre><code> javax.security.cert </code></pre> exist for compatibility with earlier versions of the Java Secure Sockets Extension (JSSE). New applications should instead use the standard Java SE certificate classes located in <pre><code> java.security.cert </code></pre> . </em> </p><pre><code>public class CertificateExpiredException\n</code></pre></section>	https://developer.android.com/reference/javax/security/cert/CertificateExpiredException.html
CertificateNotYetValidException	A										<section class="prog__container"><p> Certificate is not yet valid exception. This is thrown whenever the current <pre><code> Date </code></pre> or the specified <pre><code> Date </code></pre> is before the <pre><code> notBefore </code></pre> date/time in the Certificate validity period. <p> <em> Note: The classes in the package <pre><code> javax.security.cert </code></pre> exist for compatibility with earlier versions of the Java Secure Sockets Extension (JSSE). New applications should instead use the standard Java SE certificate classes located in <pre><code> java.security.cert </code></pre> . </em> </p><pre><code>public class CertificateNotYetValidException\n</code></pre></section>	https://developer.android.com/reference/javax/security/cert/CertificateNotYetValidException.html
CertificateParsingException	A										<section class="prog__container"><p> Certificate Parsing Exception. This is thrown whenever invalid DER encoded certificate is parsed or unsupported DER features are found in the Certificate. <p> <em> Note: The classes in the package <pre><code> javax.security.cert </code></pre> exist for compatibility with earlier versions of the Java Secure Sockets Extension (JSSE). New applications should instead use the standard Java SE certificate classes located in <pre><code> java.security.cert </code></pre> . </em> </p><pre><code>public class CertificateParsingException\n</code></pre></section>	https://developer.android.com/reference/javax/security/cert/CertificateParsingException.html
javax.security.cert	A										<section class="prog__container">These classes include a simplified version of thejava.security.cert package. These classes were developedas part of the Java Secure SocketExtension (JSSE). When JSSE was added to the J2SE version 1.4, thispackage was added for backward-compatibility reasons only.</section>	https://developer.android.com/reference/javax/security/cert/package-summary.html
X509Certificate	A										<section class="prog__container"><p> Abstract class for X.509 v1 certificates. This provides a standard way to access all the version 1 attributes of an X.509 certificate. Attributes that are specific to X.509 v2 or v3 are not available through this interface. Future API evolution will provide full access to complete X.509 v3 attributes. <p> The basic X.509 format was defined by ISO/IEC and ANSI X9 and is described below in ASN.1: <pre> Certificate ::= SEQUENCE { tbsCertificate TBSCertificate, signatureAlgorithm AlgorithmIdentifier, signature BIT STRING } </pre> <p> These certificates are widely used to support authentication and other functionality in Internet security systems. Common applications include Privacy Enhanced Mail (PEM), Transport Layer Security (SSL), code signing for trusted software distribution, and Secure Electronic Transactions (SET). <p> These certificates are managed and vouched for by <em> Certificate Authorities </em> (CAs). CAs are services which create certificates by placing data in the X.509 standard format and then digitally signing that data. CAs act as trusted third parties, making introductions between principals who have no direct knowledge of each other. CA certificates are either signed by themselves, or by some other CA such as a "root" CA. <p> The ASN.1 definition of <pre><code> tbsCertificate </code></pre> is: <pre> TBSCertificate ::= SEQUENCE { version [0] EXPLICIT Version DEFAULT v1, serialNumber CertificateSerialNumber, signature AlgorithmIdentifier, issuer Name, validity Validity, subject Name, subjectPublicKeyInfo SubjectPublicKeyInfo, } </pre> <p> Here is sample code to instantiate an X.509 certificate: <pre> InputStream inStream = new FileInputStream("fileName-of-cert"); X509Certificate cert = X509Certificate.getInstance(inStream); inStream.close(); </pre> OR <pre> byte[] certData = &lt;certificate read from a file, say&gt; X509Certificate cert = X509Certificate.getInstance(certData); </pre> <p> In either case, the code that instantiates an X.509 certificate consults the Java security properties file to locate the actual implementation or instantiates a default implementation. <p> The Java security properties file is located in the file named &lt;JAVA_HOME&gt;/lib/security/java.security. &lt;JAVA_HOME&gt; refers to the value of the java.home system property, and specifies the directory where the JRE is installed. In the Security properties file, a default implementation for X.509 v1 may be given such as: <pre> cert.provider.x509v1=com.sun.security.cert.internal.x509.X509V1CertImpl </pre> <p> The value of this <pre><code> cert.provider.x509v1 </code></pre> property has to be changed to instatiate another implementation. If this security property is not set, a default implementation will be used. Currently, due to possible security restrictions on access to Security properties, this value is looked up and cached at class initialization time and will fallback on a default implementation if the Security property is not accessible. <p> <em> Note: The classes in the package <pre><code> javax.security.cert </code></pre> exist for compatibility with earlier versions of the Java Secure Sockets Extension (JSSE). New applications should instead use the standard Java SE certificate classes located in <pre><code> java.security.cert </code></pre> . </em> </p><pre><code>public abstract class X509Certificate\n</code></pre></section>	https://developer.android.com/reference/javax/security/cert/X509Certificate.html
CommonDataSource	A										<section class="prog__container"><pre><code>public interface CommonDataSource\n</code></pre></section>	https://developer.android.com/reference/javax/sql/CommonDataSource.html
ConnectionEvent	A										<section class="prog__container"><p> <p> An <pre><code> Event </code></pre> object that provides information about the source of a connection-related event. <pre><code> ConnectionEvent </code></pre> objects are generated when an application closes a pooled connection and when an error occurs. The <pre><code> ConnectionEvent </code></pre> object contains two kinds of information: <ul> <li> The pooled connection closed by the application <li> In the case of an error event, the <pre><code> SQLException </code></pre> about to be thrown to the application </li> </li> </ul> </p><pre><code>public class ConnectionEvent\n</code></pre></section>	https://developer.android.com/reference/javax/sql/ConnectionEvent.html
ConnectionEventListener	A										<section class="prog__container"><p> <p> An object that registers to be notified of events generated by a <pre><code> PooledConnection </code></pre> object. <p> The <pre><code> ConnectionEventListener </code></pre> interface is implemented by a connection pooling component. A connection pooling component will usually be provided by a JDBC driver vendor or another system software vendor. A JDBC driver notifies a <pre><code> ConnectionEventListener </code></pre> object when an application is finished using a pooled connection with which the listener has registered. The notification occurs after the application calls the method <pre><code> close </code></pre> on its representation of a <pre><code> PooledConnection </code></pre> object. A <pre><code> ConnectionEventListener </code></pre> is also notified when a connection error occurs due to the fact that the <pre><code> PooledConnection </code></pre> is unfit for future use---the server has crashed, for example. The listener is notified by the JDBC driver just before the driver throws an <pre><code> SQLException </code></pre> to the application using the <pre><code> PooledConnection </code></pre> object. </p><pre><code>public interface ConnectionEventListener\nimplements EventListener</code></pre></section>	https://developer.android.com/reference/javax/sql/ConnectionEventListener.html
ConnectionPoolDataSource	A										<section class="prog__container"><p> A factory for <pre><code> PooledConnection </code></pre> objects. An object that implements this interface will typically be registered with a naming service that is based on the Java <sup> <font size="-2"> TM </font> </sup> Naming and Directory Interface (JNDI).</p><pre><code>public interface ConnectionPoolDataSource\nimplements CommonDataSource</code></pre></section>	https://developer.android.com/reference/javax/sql/ConnectionPoolDataSource.html
DataSource	A										<section class="prog__container"><p> <p> A factory for connections to the physical data source that this <pre><code> DataSource </code></pre> object represents. An alternative to the <pre><code> DriverManager </code></pre> facility, a <pre><code> DataSource </code></pre> object is the preferred means of getting a connection. An object that implements the <pre><code> DataSource </code></pre> interface will typically be registered with a naming service based on the Java <sup> <font size="-2"> TM </font> </sup> Naming and Directory (JNDI) API. <p> The <pre><code> DataSource </code></pre> interface is implemented by a driver vendor. There are three types of implementations: <ol> <li> Basic implementation -- produces a standard <pre><code> Connection </code></pre> object <li> Connection pooling implementation -- produces a <pre><code> Connection </code></pre> object that will automatically participate in connection pooling. This implementation works with a middle-tier connection pooling manager. <li> Distributed transaction implementation -- produces a <pre><code> Connection </code></pre> object that may be used for distributed transactions and almost always participates in connection pooling. This implementation works with a middle-tier transaction manager and almost always with a connection pooling manager. </li> </li> </li> </ol> <p> A <pre><code> DataSource </code></pre> object has properties that can be modified when necessary. For example, if the data source is moved to a different server, the property for the server can be changed. The benefit is that because the data source's properties can be changed, any code accessing that data source does not need to be changed. <p> A driver that is accessed via a <pre><code> DataSource </code></pre> object does not register itself with the <pre><code> DriverManager </code></pre> . Rather, a <pre><code> DataSource </code></pre> object is retrieved though a lookup operation and then used to create a <pre><code> Connection </code></pre> object. With a basic implementation, the connection obtained through a <pre><code> DataSource </code></pre> object is identical to a connection obtained through the <pre><code> DriverManager </code></pre> facility. </p><pre><code>public interface DataSource\nimplements CommonDataSource, Wrapper</code></pre></section>	https://developer.android.com/reference/javax/sql/DataSource.html
javax.sql	A										<section class="prog__container">The</section>	https://developer.android.com/reference/javax/sql/package-summary.html
PooledConnection	A										<section class="prog__container"><pre><code>public interface PooledConnection\n</code></pre></section>	https://developer.android.com/reference/javax/sql/PooledConnection.html
RowSet	A										<section class="prog__container"><p> The interface that adds support to the JDBC API for the JavaBeans <sup> <font size="-2"> TM </font> </sup> component model. A rowset, which can be used as a JavaBeans component in a visual Bean development environment, can be created and configured at design time and executed at run time. <p> The <pre><code> RowSet </code></pre> interface provides a set of JavaBeans properties that allow a <pre><code> RowSet </code></pre> instance to be configured to connect to a JDBC data source and read some data from the data source. A group of setter methods ( <pre><code> setInt </code></pre> , <pre><code> setBytes </code></pre> , <pre><code> setString </code></pre> , and so on) provide a way to pass input parameters to a rowset's command property. This command is the SQL query the rowset uses when it gets its data from a relational database, which is generally the case. <p> The <pre><code> RowSet </code></pre> interface supports JavaBeans events, allowing other components in an application to be notified when an event occurs on a rowset, such as a change in its value. <p> The <pre><code> RowSet </code></pre> interface is unique in that it is intended to be implemented using the rest of the JDBC API. In other words, a <pre><code> RowSet </code></pre> implementation is a layer of software that executes "on top" of a JDBC driver. Implementations of the <pre><code> RowSet </code></pre> interface can be provided by anyone, including JDBC driver vendors who want to provide a <pre><code> RowSet </code></pre> implementation as part of their JDBC products. <p> A <pre><code> RowSet </code></pre> object may make a connection with a data source and maintain that connection throughout its life cycle, in which case it is called a <i> connected </i> rowset. A rowset may also make a connection with a data source, get data from it, and then close the connection. Such a rowset is called a <i> disconnected </i> rowset. A disconnected rowset may make changes to its data while it is disconnected and then send the changes back to the original source of the data, but it must reestablish a connection to do so. <p> A disconnected rowset may have a reader (a <pre><code> RowSetReader </code></pre> object) and a writer (a <pre><code> RowSetWriter </code></pre> object) associated with it. The reader may be implemented in many different ways to populate a rowset with data, including getting data from a non-relational data source. The writer can also be implemented in many different ways to propagate changes made to the rowset's data back to the underlying data source. <p> Rowsets are easy to use. The <pre><code> RowSet </code></pre> interface extends the standard <pre><code> java.sql.ResultSet </code></pre> interface. The <pre><code> RowSetMetaData </code></pre> interface extends the <pre><code> java.sql.ResultSetMetaData </code></pre> interface. Thus, developers familiar with the JDBC API will have to learn a minimal number of new APIs to use rowsets. In addition, third-party software tools that work with JDBC <pre><code> ResultSet </code></pre> objects will also easily be made to work with rowsets. </p><pre><code>public interface RowSet\nimplements ResultSet</code></pre></section>	https://developer.android.com/reference/javax/sql/RowSet.html
RowSetEvent	A										<section class="prog__container"><p> An <pre><code> Event </code></pre> object generated when an event occurs to a <pre><code> RowSet </code></pre> object. A <pre><code> RowSetEvent </code></pre> object is generated when a single row in a rowset is changed, the whole rowset is changed, or the rowset cursor moves. <p> When an event occurs on a <pre><code> RowSet </code></pre> object, one of the <pre><code> RowSetListener </code></pre> methods will be sent to all registered listeners to notify them of the event. An <pre><code> Event </code></pre> object is supplied to the <pre><code> RowSetListener </code></pre> method so that the listener can use it to find out which <pre><code> RowSet </code></pre> object is the source of the event. </p><pre><code>public class RowSetEvent\n</code></pre></section>	https://developer.android.com/reference/javax/sql/RowSetEvent.html
RowSetInternal	A										<section class="prog__container"><p> The interface that a <pre><code> RowSet </code></pre> object implements in order to present itself to a <pre><code> RowSetReader </code></pre> or <pre><code> RowSetWriter </code></pre> object. The <pre><code> RowSetInternal </code></pre> interface contains methods that let the reader or writer access and modify the internal state of the rowset.</p><pre><code>public interface RowSetInternal\n</code></pre></section>	https://developer.android.com/reference/javax/sql/RowSetInternal.html
RowSetListener	A										<section class="prog__container"><p> An interface that must be implemented by a component that wants to be notified when a significant event happens in the life of a <pre><code> RowSet </code></pre> object. A component becomes a listener by being registered with a <pre><code> RowSet </code></pre> object via the method <pre><code> RowSet.addRowSetListener </code></pre> . How a registered component implements this interface determines what it does when it is notified of an event.</p><pre><code>public interface RowSetListener\nimplements EventListener</code></pre></section>	https://developer.android.com/reference/javax/sql/RowSetListener.html
RowSetMetaData	A										<section class="prog__container"><p> An object that contains information about the columns in a <pre><code> RowSet </code></pre> object. This interface is an extension of the <pre><code> ResultSetMetaData </code></pre> interface with methods for setting the values in a <pre><code> RowSetMetaData </code></pre> object. When a <pre><code> RowSetReader </code></pre> object reads data into a <pre><code> RowSet </code></pre> object, it creates a <pre><code> RowSetMetaData </code></pre> object and initializes it using the methods in the <pre><code> RowSetMetaData </code></pre> interface. Then the reader passes the <pre><code> RowSetMetaData </code></pre> object to the rowset. <p> The methods in this interface are invoked internally when an application calls the method <pre><code> RowSet.execute </code></pre> ; an application programmer would not use them directly. </p><pre><code>public interface RowSetMetaData\nimplements ResultSetMetaData</code></pre></section>	https://developer.android.com/reference/javax/sql/RowSetMetaData.html
RowSetReader	A										<section class="prog__container"><p> The facility that a disconnected <pre><code> RowSet </code></pre> object calls on to populate itself with rows of data. A reader (an object implementing the <pre><code> RowSetReader </code></pre> interface) may be registered with a <pre><code> RowSet </code></pre> object that supports the reader/writer paradigm. When the <pre><code> RowSet </code></pre> object's <pre><code> execute </code></pre> method is called, it in turn calls the reader's <pre><code> readData </code></pre> method.</p><pre><code>public interface RowSetReader\n</code></pre></section>	https://developer.android.com/reference/javax/sql/RowSetReader.html
RowSetWriter	A										<section class="prog__container"><p> An object that implements the <pre><code> RowSetWriter </code></pre> interface, called a <i> writer </i> . A writer may be registered with a <pre><code> RowSet </code></pre> object that supports the reader/writer paradigm. <p> If a disconnected <pre><code> RowSet </code></pre> object modifies some of its data, and it has a writer associated with it, it may be implemented so that it calls on the writer's <pre><code> writeData </code></pre> method internally to write the updates back to the data source. In order to do this, the writer must first establish a connection with the rowset's data source. <p> If the data to be updated has already been changed in the data source, there is a conflict, in which case the writer will not write the changes to the data source. The algorithm the writer uses for preventing or limiting conflicts depends entirely on its implementation. </p><pre><code>public interface RowSetWriter\n</code></pre></section>	https://developer.android.com/reference/javax/sql/RowSetWriter.html
StatementEvent	A										<section class="prog__container"><pre><code>public class StatementEvent\n</code></pre></section>	https://developer.android.com/reference/javax/sql/StatementEvent.html
StatementEventListener	A										<section class="prog__container"><pre><code>public interface StatementEventListener\nimplements EventListener</code></pre></section>	https://developer.android.com/reference/javax/sql/StatementEventListener.html
javax.xml	A										<section class="prog__container">Utility class to contain basic XML values as constants. </section>	https://developer.android.com/reference/javax/xml/package-summary.html
XMLConstants	A										<section class="prog__container"><p> <p> Utility class to contain basic XML values as constants. </p><pre><code>public final class XMLConstants\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/XMLConstants.html
DatatypeConfigurationException	A										<section class="prog__container"><p> <p> Indicates a serious configuration error. </p><pre><code>public class DatatypeConfigurationException\n</code></pre></section>	https://developer.android.com/reference/javax/xml/datatype/DatatypeConfigurationException.html
DatatypeConstants.Field	A										<section class="prog__container"><p> Type-safe enum class that represents six fields of the <pre><code> Duration </code></pre> class.</p><pre><code>public static final class DatatypeConstants.Field\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/datatype/DatatypeConstants.Field.html
DatatypeConstants	A										<section class="prog__container"><p> <p> Utility class to contain basic Datatype values as constants. </p><pre><code>public final class DatatypeConstants\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/datatype/DatatypeConstants.html
DatatypeFactory	A										<section class="prog__container"><p> <p> Factory that creates new <pre><code> javax.xml.datatype </code></pre> <pre><code> Object </code></pre> s that map XML to/from Java <pre><code> Object </code></pre> s. </p><pre><code>public abstract class DatatypeFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/datatype/DatatypeFactory.html
Duration	A										<section class="prog__container"><p> <p> Immutable representation of a time span as defined in the W3C XML Schema 1.0 specification. </p><pre><code>public abstract class Duration\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/datatype/Duration.html
javax.xml.datatype	A										<section class="prog__container">Utility class to contain basic Datatype values as constants. </section>	https://developer.android.com/reference/javax/xml/datatype/package-summary.html
XMLGregorianCalendar	A										<section class="prog__container"><p> <p> Representation for W3C XML Schema 1.0 date/time datatypes. Specifically, these date/time datatypes are <pre><code> dateTime </code></pre> , <pre><code> time </code></pre> , <pre><code> date </code></pre> , <pre><code> gYearMonth </code></pre> , <pre><code> gMonthDay </code></pre> , <pre><code> gYear </code></pre> <pre><code> gMonth </code></pre> and <pre><code> gDay </code></pre> defined in the XML Namespace <pre><code> "http://www.w3.org/2001/XMLSchema" </code></pre> . These datatypes are normatively defined in W3C XML Schema 1.0 Part 2, Section 3.2.7-14 . </p><pre><code>public abstract class XMLGregorianCalendar\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/datatype/XMLGregorianCalendar.html
NamespaceContext	A										<section class="prog__container"><p> <p> Interface for read only XML Namespace context processing. </p><pre><code>public interface NamespaceContext\n</code></pre></section>	https://developer.android.com/reference/javax/xml/namespace/NamespaceContext.html
javax.xml.namespace	A										<section class="prog__container">Interface for read only XML Namespace context processing. </section>	https://developer.android.com/reference/javax/xml/namespace/package-summary.html
QName	A										<section class="prog__container"><p> <p> <pre><code> QName </code></pre> represents a <strong> qualified name </strong> as defined in the XML specifications: XML Schema Part2: Datatypes specification , Namespaces in XML , Namespaces in XML Errata . </p><pre><code>public class QName\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/namespace/QName.html
DocumentBuilder	A										<section class="prog__container"><p> Defines the API to obtain DOM Document instances from an XML document. Using this class, an application programmer can obtain a <pre><code> Document </code></pre> from XML. <p> An instance of this class can be obtained from the <pre><code> newDocumentBuilder() </code></pre> method. Once an instance of this class is obtained, XML can be parsed from a variety of input sources. These input sources are InputStreams, Files, URLs, and SAX InputSources. <p> Note that this class reuses several classes from the SAX API. This does not require that the implementor of the underlying DOM implementation use a SAX parser to parse XML document into a <pre><code> Document </code></pre> . It merely requires that the implementation communicate with the application using these existing APIs. </p><pre><code>public abstract class DocumentBuilder\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/parsers/DocumentBuilder.html
DocumentBuilderFactory	A										<section class="prog__container"><p> Defines a factory API that enables applications to obtain a parser that produces DOM object trees from XML documents.</p><pre><code>public abstract class DocumentBuilderFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/parsers/DocumentBuilderFactory.html
FactoryConfigurationError	A										<section class="prog__container"><p> Thrown when a problem with configuration with the Parser Factories exists. This error will typically be thrown when the class of a parser factory specified in the system properties cannot be found or instantiated.</p><pre><code>public class FactoryConfigurationError\n</code></pre></section>	https://developer.android.com/reference/javax/xml/parsers/FactoryConfigurationError.html
javax.xml.parsers	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/javax/xml/parsers/package-summary.html
ParserConfigurationException	A										<section class="prog__container"><p> Indicates a serious configuration error.</p><pre><code>public class ParserConfigurationException\n</code></pre></section>	https://developer.android.com/reference/javax/xml/parsers/ParserConfigurationException.html
SAXParser	A										<section class="prog__container"><p> Defines the API that wraps an <pre><code> XMLReader </code></pre> implementation class. In JAXP 1.0, this class wrapped the <pre><code> Parser </code></pre> interface, however this interface was replaced by the <pre><code> XMLReader </code></pre> . For ease of transition, this class continues to support the same name and interface as well as supporting new methods. An instance of this class can be obtained from the <pre><code> newSAXParser() </code></pre> method. Once an instance of this class is obtained, XML can be parsed from a variety of input sources. These input sources are InputStreams, Files, URLs, and SAX InputSources. <p> This static method creates a new factory instance based on a system property setting or uses the platform default if no property has been defined. <p> The system property that controls which Factory implementation to create is named <pre><code> "javax.xml.parsers.SAXParserFactory" </code></pre> . This property names a class that is a concrete subclass of this abstract class. If no property is defined, a platform default will be used. </p><pre><code>public abstract class SAXParser\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/parsers/SAXParser.html
SAXParserFactory	A										<section class="prog__container"><p> Defines a factory API that enables applications to configure and obtain a SAX based parser to parse XML documents.</p><pre><code>public abstract class SAXParserFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/parsers/SAXParserFactory.html
ErrorListener	A										<section class="prog__container"><p> <p> To provide customized error handling, implement this interface and use the <pre><code> setErrorListener </code></pre> method to register an instance of the implementation with the <pre><code> Transformer </code></pre> . The <pre><code> Transformer </code></pre> then reports all errors and warnings through this interface. </p><pre><code>public interface ErrorListener\n</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/ErrorListener.html
OutputKeys	A										<section class="prog__container"><p> Provides string constants that can be used to set output properties for a Transformer, or to retrieve output properties from a Transformer or Templates object. <p> All the fields in this class are read-only. </p><pre><code>public class OutputKeys\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/OutputKeys.html
javax.xml.transform	A										<section class="prog__container">To provide customized error handling, implement this interface and use the</section>	https://developer.android.com/reference/javax/xml/transform/package-summary.html
Result	A										<section class="prog__container"><p> <p> An object that implements this interface contains the information needed to build a transformation result tree. </p><pre><code>public interface Result\n</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/Result.html
Source	A										<section class="prog__container"><p> An object that implements this interface contains the information needed to act as source input (XML source or transformation instructions).</p><pre><code>public interface Source\n</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/Source.html
SourceLocator	A										<section class="prog__container"><p> This interface is primarily for the purposes of reporting where an error occurred in the XML source or transformation instructions.</p><pre><code>public interface SourceLocator\n</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/SourceLocator.html
Templates	A										<section class="prog__container"><p> An object that implements this interface is the runtime representation of processed transformation instructions. <p> Templates must be thread-safe for a given instance over multiple threads running concurrently, and may be used multiple times in a given session. </p><pre><code>public interface Templates\n</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/Templates.html
Transformer	A										<section class="prog__container"><p> An instance of this abstract class can transform a source tree into a result tree. <p> An instance of this class can be obtained with the <pre><code> TransformerFactory.newTransformer </code></pre> method. This instance may then be used to process XML from a variety of sources and write the transformation output to a variety of sinks. </p><pre><code>public abstract class Transformer\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/Transformer.html
TransformerConfigurationException	A										<section class="prog__container"><p> Indicates a serious configuration error.</p><pre><code>public class TransformerConfigurationException\n</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/TransformerConfigurationException.html
TransformerException	A										<section class="prog__container"><p> This class specifies an exceptional condition that occurred during the transformation process.</p><pre><code>public class TransformerException\n</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/TransformerException.html
TransformerFactory	A										<section class="prog__container"><p> <p> A TransformerFactory instance can be used to create <pre><code> Transformer </code></pre> and <pre><code> Templates </code></pre> objects. </p><pre><code>public abstract class TransformerFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/TransformerFactory.html
TransformerFactoryConfigurationError	A										<section class="prog__container"><p> Thrown when a problem with configuration with the Transformer Factories exists. This error will typically be thrown when the class of a transformation factory specified in the system properties cannot be found or instantiated.</p><pre><code>public class TransformerFactoryConfigurationError\n</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/TransformerFactoryConfigurationError.html
URIResolver	A										<section class="prog__container"><p> <p> An object that implements this interface that can be called by the processor to turn a URI used in document(), xsl:import, or xsl:include into a Source object. </p><pre><code>public interface URIResolver\n</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/URIResolver.html
DOMLocator	A										<section class="prog__container"><p> Indicates the position of a node in a source DOM, intended primarily for error reporting. To use a DOMLocator, the receiver of an error must downcast the <pre><code> SourceLocator </code></pre> object returned by an exception. A <pre><code> Transformer </code></pre> may use this object for purposes other than error reporting, for instance, to indicate the source node that originated a result node.</p><pre><code>public interface DOMLocator\nimplements SourceLocator</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/dom/DOMLocator.html
DOMResult	A										<section class="prog__container"><p> <p> Acts as a holder for a transformation result tree in the form of a Document Object Model (DOM) tree. </p><pre><code>public class DOMResult\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/dom/DOMResult.html
DOMSource	A										<section class="prog__container"><p> <p> Acts as a holder for a transformation Source tree in the form of a Document Object Model (DOM) tree. </p><pre><code>public class DOMSource\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/dom/DOMSource.html
javax.xml.transform.dom	A										<section class="prog__container">Acts as a holder for a transformation result tree in the form of a Document Object Model (DOM) tree. </section>	https://developer.android.com/reference/javax/xml/transform/dom/package-summary.html
javax.xml.transform.sax	A										<section class="prog__container">Acts as an holder for a transformation Result. </section>	https://developer.android.com/reference/javax/xml/transform/sax/package-summary.html
SAXResult	A										<section class="prog__container"><p> <p> Acts as an holder for a transformation Result. </p><pre><code>public class SAXResult\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/sax/SAXResult.html
SAXSource	A										<section class="prog__container"><p> <p> Acts as an holder for SAX-style Source. </p><pre><code>public class SAXSource\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/sax/SAXSource.html
SAXTransformerFactory	A										<section class="prog__container"><p> This class extends TransformerFactory to provide SAX-specific factory methods. It provides two types of ContentHandlers, one for creating Transformers, the other for creating Templates objects. <p> If an application wants to set the ErrorHandler or EntityResolver for an XMLReader used during a transformation, it should use a URIResolver to return the SAXSource which provides (with getXMLReader) a reference to the XMLReader. </p><pre><code>public abstract class SAXTransformerFactory\n</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/sax/SAXTransformerFactory.html
TemplatesHandler	A										<section class="prog__container"><p> A SAX ContentHandler that may be used to process SAX parse events (parsing transformation instructions) into a Templates object. <p> Note that TemplatesHandler does not need to implement LexicalHandler. </p><pre><code>public interface TemplatesHandler\nimplements ContentHandler</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/sax/TemplatesHandler.html
TransformerHandler	A										<section class="prog__container"><p> A TransformerHandler listens for SAX ContentHandler parse events and transforms them to a Result.</p><pre><code>public interface TransformerHandler\nimplements ContentHandler, LexicalHandler, DTDHandler</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/sax/TransformerHandler.html
javax.xml.transform.stream	A										<section class="prog__container">Acts as an holder for a transformation result, which may be XML, plain Text, HTML, or some other form of markup. </section>	https://developer.android.com/reference/javax/xml/transform/stream/package-summary.html
StreamResult	A										<section class="prog__container"><p> <p> Acts as an holder for a transformation result, which may be XML, plain Text, HTML, or some other form of markup. </p><pre><code>public class StreamResult\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/stream/StreamResult.html
StreamSource	A										<section class="prog__container"><p> <p> Acts as an holder for a transformation Source in the form of a stream of XML markup. </p><pre><code>public class StreamSource\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/transform/stream/StreamSource.html
javax.xml.validation	A										<section class="prog__container">This class was removed from JAXP 1.3 before it was finalized but was mistakenly included in Java 5. </section>	https://developer.android.com/reference/javax/xml/validation/package-summary.html
Schema	A										<section class="prog__container"><p> Immutable in-memory representation of grammar. <p> This object represents a set of constraints that can be checked/ enforced against an XML document. <p> A <pre><code> Schema </code></pre> object is thread safe and applications are encouraged to share it across many parsers in many threads. <p> A <pre><code> Schema </code></pre> object is immutable in the sense that it shouldn't change the set of constraints once it is created. In other words, if an application validates the same document twice against the same <pre><code> Schema </code></pre> , it must always produce the same result. <p> A <pre><code> Schema </code></pre> object is usually created from <pre><code> SchemaFactory </code></pre> . <p> Two kinds of validators can be created from a <pre><code> Schema </code></pre> object. One is <pre><code> Validator </code></pre> , which provides highly-level validation operations that cover typical use cases. The other is <pre><code> ValidatorHandler </code></pre> , which works on top of SAX for better modularity. <p> This specification does not refine the <pre><code> equals(java.lang.Object) </code></pre> method. In other words, if you parse the same schema twice, you may still get <pre><code> !schemaA.equals(schemaB) </code></pre> . </p><pre><code>public abstract class Schema\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/validation/Schema.html
SchemaFactory	A										<section class="prog__container"><p> Factory that creates <pre><code> Schema </code></pre> objects. Entry-point to the validation API. <p> <pre><code> SchemaFactory </code></pre> is a schema compiler. It reads external representations of schemas and prepares them for validation. <p> The <pre><code> SchemaFactory </code></pre> class is not thread-safe. In other words, it is the application's responsibility to ensure that at most one thread is using a <pre><code> SchemaFactory </code></pre> object at any given moment. Implementations are encouraged to mark methods as <tt> synchronized </tt> to protect themselves from broken clients. <p> <pre><code> SchemaFactory </code></pre> is not re-entrant. While one of the <pre><code> newSchema </code></pre> methods is being invoked, applications may not attempt to recursively invoke the <pre><code> newSchema </code></pre> method, even from the same thread. </p><pre><code>public abstract class SchemaFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/validation/SchemaFactory.html
SchemaFactoryLoader	A										<section class="prog__container"><p> <p> This class was removed from JAXP 1.3 before it was finalized but was mistakenly included in Java 5. It only exists now for compatibility reasons. Applications should avoid using it. </p><pre><code>public abstract class SchemaFactoryLoader\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/validation/SchemaFactoryLoader.html
TypeInfoProvider	A										<section class="prog__container"><p> This class provides access to the type information determined by <pre><code> ValidatorHandler </code></pre> . <p> Some schema languages, such as W3C XML Schema, encourages a validator to report the "type" it assigns to each attribute/element. Those applications who wish to access this type information can invoke methods defined on this "interface" to access such type information. <p> Implementation of this "interface" can be obtained through the <pre><code> getTypeInfoProvider() </code></pre> method. </p><pre><code>public abstract class TypeInfoProvider\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/validation/TypeInfoProvider.html
Validator	A										<section class="prog__container"><p> <p> A processor that checks an XML document against <pre><code> Schema </code></pre> . </p><pre><code>public abstract class Validator\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/validation/Validator.html
ValidatorHandler	A										<section class="prog__container"><p> Streaming validator that works on SAX stream. <p> A <pre><code> ValidatorHandler </code></pre> object is a thread-unsafe, non-reentrant object. In other words, it is the application's responsibility to make sure that one <pre><code> ValidatorHandler </code></pre> object is not used from more than one thread at any given time. <p> <pre><code> ValidatorHandler </code></pre> checks if the SAX events follow the set of constraints described in the associated <pre><code> Schema </code></pre> , and additionally it may modify the SAX events (for example by adding default values, etc.) <p> <pre><code> ValidatorHandler </code></pre> extends from <pre><code> ContentHandler </code></pre> , but it refines the underlying <pre><code> ContentHandler </code></pre> in the following way: <ol> <li> startElement/endElement events must receive non-null String for <pre><code> uri </code></pre> , <pre><code> localName </code></pre> , and <pre><code> qname </code></pre> , even though SAX allows some of them to be null. Similarly, the user-specified <pre><code> ContentHandler </code></pre> will receive non-null Strings for all three parameters. <li> Applications must ensure that <pre><code> ValidatorHandler </code></pre> 's <pre><code> startPrefixMapping(String, String) </code></pre> and <pre><code> endPrefixMapping(String) </code></pre> are invoked properly. Similarly, the user-specified <pre><code> ContentHandler </code></pre> will receive startPrefixMapping/endPrefixMapping events. If the <pre><code> ValidatorHandler </code></pre> introduces additional namespace bindings, the user-specified <pre><code> ContentHandler </code></pre> will receive additional startPrefixMapping/endPrefixMapping events. <li> <pre><code> Attributes </code></pre> for the <pre><code> startElement(String, String, String, Attributes) </code></pre> method may or may not include xmlns* attributes. </li> </li> </li> </ol> <p> A <pre><code> ValidatorHandler </code></pre> is automatically reset every time the startDocument method is invoked. </p><pre><code>public abstract class ValidatorHandler\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/validation/ValidatorHandler.html
javax.xml.xpath	A										<section class="prog__container"><pre><code>XPath</code></pre></section>	https://developer.android.com/reference/javax/xml/xpath/package-summary.html
XPath	A										<section class="prog__container"><p> <p> <pre><code> XPath </code></pre> provides access to the XPath evaluation environment and expressions. </p><pre><code>public interface XPath\n</code></pre></section>	https://developer.android.com/reference/javax/xml/xpath/XPath.html
XPathConstants	A										<section class="prog__container"><p> <p> XPath constants. </p><pre><code>public class XPathConstants\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/xpath/XPathConstants.html
XPathException	A										<section class="prog__container"><p> <pre><code> XPathException </code></pre> represents a generic XPath exception.</p><pre><code>public class XPathException\n</code></pre></section>	https://developer.android.com/reference/javax/xml/xpath/XPathException.html
XPathExpression	A										<section class="prog__container"><p> <p> <pre><code> XPathExpression </code></pre> provides access to compiled XPath expressions. </p><pre><code>public interface XPathExpression\n</code></pre></section>	https://developer.android.com/reference/javax/xml/xpath/XPathExpression.html
XPathExpressionException	A										<section class="prog__container"><p> <pre><code> XPathExpressionException </code></pre> represents an error in an XPath expression.</p><pre><code>public class XPathExpressionException\n</code></pre></section>	https://developer.android.com/reference/javax/xml/xpath/XPathExpressionException.html
XPathFactory	A										<section class="prog__container"><p> <p> An <pre><code> XPathFactory </code></pre> instance can be used to create <pre><code> XPath </code></pre> objects. </p><pre><code>public abstract class XPathFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/javax/xml/xpath/XPathFactory.html
XPathFactoryConfigurationException	A										<section class="prog__container"><p> <pre><code> XPathFactoryConfigurationException </code></pre> represents a configuration error in a <pre><code> XPathFactory </code></pre> environment.</p><pre><code>public class XPathFactoryConfigurationException\n</code></pre></section>	https://developer.android.com/reference/javax/xml/xpath/XPathFactoryConfigurationException.html
XPathFunction	A										<section class="prog__container"><p> <p> <pre><code> XPathFunction </code></pre> provides access to XPath functions. </p><pre><code>public interface XPathFunction\n</code></pre></section>	https://developer.android.com/reference/javax/xml/xpath/XPathFunction.html
XPathFunctionException	A										<section class="prog__container"><p> <pre><code> XPathFunctionException </code></pre> represents an error with an XPath function.</p><pre><code>public class XPathFunctionException\n</code></pre></section>	https://developer.android.com/reference/javax/xml/xpath/XPathFunctionException.html
XPathFunctionResolver	A										<section class="prog__container"><p> <p> <pre><code> XPathFunctionResolver </code></pre> provides access to the set of user defined <pre><code> XPathFunction </code></pre> s. </p><pre><code>public interface XPathFunctionResolver\n</code></pre></section>	https://developer.android.com/reference/javax/xml/xpath/XPathFunctionResolver.html
XPathVariableResolver	A										<section class="prog__container"><p> <p> <pre><code> XPathVariableResolver </code></pre> provides access to the set of user defined XPath variables. </p><pre><code>public interface XPathVariableResolver\n</code></pre></section>	https://developer.android.com/reference/javax/xml/xpath/XPathVariableResolver.html
Assert	A										<section class="prog__container"><p> A set of assert methods. Messages are only displayed when an assert fails.</p><pre><code>public class Assert\nextends Object</code></pre></section>	https://developer.android.com/reference/junit/framework/Assert.html
AssertionFailedError	A										<section class="prog__container"><p> Thrown when an assertion failed.</p><pre><code>public class AssertionFailedError\n</code></pre></section>	https://developer.android.com/reference/junit/framework/AssertionFailedError.html
ComparisonFailure	A										<section class="prog__container"><p> Thrown when an assert equals for Strings failed. Inspired by a patch from Alex Chaffee mailto:alex@purpletech.com</p><pre><code>public class ComparisonFailure\n</code></pre></section>	https://developer.android.com/reference/junit/framework/ComparisonFailure.html
junit.framework	A										<section class="prog__container">A</section>	https://developer.android.com/reference/junit/framework/package-summary.html
Protectable	A										<section class="prog__container"><p> A <em> Protectable </em> can be run and can throw a Throwable.</p><pre><code>public interface Protectable\n</code></pre></section>	https://developer.android.com/reference/junit/framework/Protectable.html
Test	A										<section class="prog__container"><p> A <em> Test </em> can be run and collect its results.</p><pre><code>public interface Test\n</code></pre></section>	https://developer.android.com/reference/junit/framework/Test.html
TestCase	A										<section class="prog__container"><p> A test case defines the fixture to run multiple tests. To define a test case <br/> <ol> <li> implement a subclass of <pre><code> TestCase </code></pre> </li> <li> define instance variables that store the state of the fixture </li> <li> initialize the fixture state by overriding <pre><code> setUp() </code></pre> </li> <li> clean-up after a test by overriding <pre><code> tearDown() </code></pre> . </li> </ol> Each test runs in its own fixture so there can be no side effects among test runs. Here is an example: <pre> public class MathTest extends TestCase { protected double fValue1; protected double fValue2; protected void setUp() { fValue1= 2.0; fValue2= 3.0; } } </pre> For each test implement a method which interacts with the fixture. Verify the expected results with assertions specified by calling <pre><code> assertTrue(String, boolean) </code></pre> with a boolean. <pre> public void testAdd() { double result= fValue1 + fValue2; assertTrue(result == 5.0); } </pre> Once the methods are defined you can run them. The framework supports both a static type safe and more dynamic way to run a test. In the static way you override the runTest method and define the method to be invoked. A convenient way to do so is with an anonymous inner class. <pre> TestCase test= new MathTest("add") { public void runTest() { testAdd(); } }; test.run(); </pre> The dynamic way uses reflection to implement <pre><code> runTest() </code></pre> . It dynamically finds and invokes a method. In this case the name of the test case has to correspond to the test method to be run. <pre> TestCase test= new MathTest("testAdd"); test.run(); </pre> The tests to be run can be collected into a TestSuite. JUnit provides different <i> test runners </i> which can run a test suite and collect the results. A test runner either expects a static method <pre><code> suite </code></pre> as the entry point to get a test to run or it will extract the suite automatically. <pre> public static Test suite() { suite.addTest(new MathTest("testAdd")); suite.addTest(new MathTest("testDivideByZero")); return suite; } </pre></p><pre><code>public abstract class TestCase\n</code></pre></section>	https://developer.android.com/reference/junit/framework/TestCase.html
TestFailure	A										<section class="prog__container"><p> A <pre><code> TestFailure </code></pre> collects a failed test together with the caught exception.</p><pre><code>public class TestFailure\nextends Object</code></pre></section>	https://developer.android.com/reference/junit/framework/TestFailure.html
TestListener	A										<section class="prog__container"><p> A Listener for test progress</p><pre><code>public interface TestListener\n</code></pre></section>	https://developer.android.com/reference/junit/framework/TestListener.html
TestResult	A										<section class="prog__container"><p> A <pre><code> TestResult </code></pre> collects the results of executing a test case. It is an instance of the Collecting Parameter pattern. The test framework distinguishes between <i> failures </i> and <i> errors </i> . A failure is anticipated and checked for with assertions. Errors are unanticipated problems like an <pre><code> ArrayIndexOutOfBoundsException </code></pre> .</p><pre><code>public class TestResult\nextends Object</code></pre></section>	https://developer.android.com/reference/junit/framework/TestResult.html
TestSuite	A										<section class="prog__container"><p> <p> A <pre><code> TestSuite </code></pre> is a <pre><code> Composite </code></pre> of Tests. It runs a collection of test cases. Here is an example using the dynamic test definition. <pre> TestSuite suite= new TestSuite(); suite.addTest(new MathTest("testAdd")); suite.addTest(new MathTest("testDivideByZero")); </pre> </p><pre><code>public class TestSuite\nextends Object</code></pre></section>	https://developer.android.com/reference/junit/framework/TestSuite.html
BaseTestRunner	A										<section class="prog__container"><p> Base class for all test runners. This class was born live on stage in Sardinia during XP2000.</p><pre><code>public abstract class BaseTestRunner\nextends Object</code></pre></section>	https://developer.android.com/reference/junit/runner/BaseTestRunner.html
junit.runner	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/junit/runner/package-summary.html
TestSuiteLoader	A										<section class="prog__container"><p> An interface to define how a test suite should be loaded.</p><pre><code>public interface TestSuiteLoader\n</code></pre></section>	https://developer.android.com/reference/junit/runner/TestSuiteLoader.html
Version	A										<section class="prog__container"><p> This class defines the current version of JUnit</p><pre><code>public class Version\nextends Object</code></pre></section>	https://developer.android.com/reference/junit/runner/Version.html
ConnectTimeoutException	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 22. </strong> <br/> Please use <pre><code> openConnection() </code></pre> instead. Please visit this webpage for further details. </p><pre><code>public class ConnectTimeoutException\n</code></pre></section>	https://developer.android.com/reference/org/apache/http/conn/ConnectTimeoutException.html
org.apache.http.conn	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/org/apache/http/conn/package-summary.html
HostNameResolver	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 22. </strong> <br/> Please use <pre><code> openConnection() </code></pre> instead. Please visit this webpage for further details. </p><pre><code>public interface HostNameResolver\n</code></pre></section>	https://developer.android.com/reference/org/apache/http/conn/scheme/HostNameResolver.html
LayeredSocketFactory	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 22. </strong> <br/> Please use <pre><code> openConnection() </code></pre> instead. Please visit this webpage for further details. </p><pre><code>public interface LayeredSocketFactory\nimplements SocketFactory</code></pre></section>	https://developer.android.com/reference/org/apache/http/conn/scheme/LayeredSocketFactory.html
org.apache.http.conn.scheme	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/org/apache/http/conn/scheme/package-summary.html
SocketFactory	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 22. </strong> <br/> Please use <pre><code> openConnection() </code></pre> instead. Please visit this webpage for further details. </p><pre><code>public interface SocketFactory\n</code></pre></section>	https://developer.android.com/reference/org/apache/http/conn/scheme/SocketFactory.html
AbstractVerifier	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 22. </strong> <br/> Please use <pre><code> openConnection() </code></pre> instead. Please visit this webpage for further details. </p><pre><code>public abstract class AbstractVerifier\nextends Object</code></pre></section>	https://developer.android.com/reference/org/apache/http/conn/ssl/AbstractVerifier.html
AllowAllHostnameVerifier	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 22. </strong> <br/> Please use <pre><code> openConnection() </code></pre> instead. Please visit this webpage for further details. </p><pre><code>public class AllowAllHostnameVerifier\n</code></pre></section>	https://developer.android.com/reference/org/apache/http/conn/ssl/AllowAllHostnameVerifier.html
BrowserCompatHostnameVerifier	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 22. </strong> <br/> Please use <pre><code> openConnection() </code></pre> instead. Please visit this webpage for further details. </p><pre><code>public class BrowserCompatHostnameVerifier\n</code></pre></section>	https://developer.android.com/reference/org/apache/http/conn/ssl/BrowserCompatHostnameVerifier.html
org.apache.http.conn.ssl	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/org/apache/http/conn/ssl/package-summary.html
SSLSocketFactory	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 22. </strong> <br/> Please use <pre><code> openConnection() </code></pre> instead. Please visit this webpage for further details. </p><pre><code>public class SSLSocketFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html
StrictHostnameVerifier	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 22. </strong> <br/> Please use <pre><code> openConnection() </code></pre> instead. Please visit this webpage for further details. </p><pre><code>public class StrictHostnameVerifier\n</code></pre></section>	https://developer.android.com/reference/org/apache/http/conn/ssl/StrictHostnameVerifier.html
X509HostnameVerifier	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 22. </strong> <br/> Please use <pre><code> openConnection() </code></pre> instead. Please visit this webpage for further details. </p><pre><code>public interface X509HostnameVerifier\nimplements HostnameVerifier</code></pre></section>	https://developer.android.com/reference/org/apache/http/conn/ssl/X509HostnameVerifier.html
CoreConnectionPNames	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 22. </strong> <br/> Please use <pre><code> openConnection() </code></pre> instead. Please visit this webpage for further details. </p><pre><code>public interface CoreConnectionPNames\n</code></pre></section>	https://developer.android.com/reference/org/apache/http/params/CoreConnectionPNames.html
HttpConnectionParams	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 22. </strong> <br/> Please use <pre><code> openConnection() </code></pre> instead. Please visit this webpage for further details. </p><pre><code>public final class HttpConnectionParams\nextends Object</code></pre></section>	https://developer.android.com/reference/org/apache/http/params/HttpConnectionParams.html
HttpParams	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 22. </strong> <br/> Please use <pre><code> openConnection() </code></pre> instead. Please visit this webpage for further details. </p><pre><code>public interface HttpParams\n</code></pre></section>	https://developer.android.com/reference/org/apache/http/params/HttpParams.html
org.apache.http.params	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/org/apache/http/params/package-summary.html
JSONArray	A										<section class="prog__container"><p> A dense indexed sequence of values. Values may be any mix of <pre><code> JSONObjects </code></pre> , other <pre><code> JSONArrays </code></pre> , Strings, Booleans, Integers, Longs, Doubles, <pre><code> null </code></pre> or <pre><code> NULL </code></pre> . Values may not be <pre><code> NaNs </code></pre> , <pre><code> infinities </code></pre> , or of any type not listed here. <p> <pre><code> JSONArray </code></pre> has the same type coercion behavior and optional/mandatory accessors as <pre><code> JSONObject </code></pre> . See that class' documentation for details. <p> <strong> Warning: </strong> this class represents null in two incompatible ways: the standard Java <pre><code> null </code></pre> reference, and the sentinel value <pre><code> NULL </code></pre> . In particular, <pre><code> get </code></pre> fails if the requested index holds the null reference, but succeeds if it holds <pre><code> JSONObject.NULL </code></pre> . <p> Instances of this class are not thread safe. Although this class is nonfinal, it was not designed for inheritance and should not be subclassed. In particular, self-use by overridable methods is not specified. See <i> Effective Java </i> Item 17, "Design and Document or inheritance or else prohibit it" for further information. </p><pre><code>public class JSONArray\nextends Object</code></pre></section>	https://developer.android.com/reference/org/json/JSONArray.html
JSONException	A										<section class="prog__container"><p> Thrown to indicate a problem with the JSON API. Such problems include: <ul> <li> Attempts to parse or construct malformed documents <li> Use of null as a name <li> Use of numeric types not available to JSON, such as <pre><code> NaNs </code></pre> or <pre><code> infinities </code></pre> . <li> Lookups using an out of range index or nonexistent name <li> Type mismatches on lookups </li> </li> </li> </li> </li> </ul> <p> Although this is a checked exception, it is rarely recoverable. Most callers should simply wrap this exception in an unchecked exception and rethrow: <pre> public JSONArray toJSONObject() { try { JSONObject result = new JSONObject(); ... } catch (JSONException e) { throw new RuntimeException(e); } }</pre> </p><pre><code>public class JSONException\n</code></pre></section>	https://developer.android.com/reference/org/json/JSONException.html
JSONObject	A										<section class="prog__container"><p> A modifiable set of name/value mappings. Names are unique, non-null strings. Values may be any mix of <pre><code> JSONObjects </code></pre> , <pre><code> JSONArrays </code></pre> , Strings, Booleans, Integers, Longs, Doubles or <pre><code> NULL </code></pre> . Values may not be <pre><code> null </code></pre> , <pre><code> NaNs </code></pre> , <pre><code> infinities </code></pre> , or of any type not listed here. <p> This class can coerce values to another type when requested. <ul> <li> When the requested type is a boolean, strings will be coerced using a case-insensitive comparison to "true" and "false". <li> When the requested type is a double, other <pre><code> Number </code></pre> types will be coerced using <pre><code> doubleValue </code></pre> . Strings that can be coerced using <pre><code> valueOf(String) </code></pre> will be. <li> When the requested type is an int, other <pre><code> Number </code></pre> types will be coerced using <pre><code> intValue </code></pre> . Strings that can be coerced using <pre><code> valueOf(String) </code></pre> will be, and then cast to int. <li> When the requested type is a long, other <pre><code> Number </code></pre> types will be coerced using <pre><code> longValue </code></pre> . Strings that can be coerced using <pre><code> valueOf(String) </code></pre> will be, and then cast to long. This two-step conversion is lossy for very large values. For example, the string "9223372036854775806" yields the long 9223372036854775807. <li> When the requested type is a String, other non-null values will be coerced using <pre><code> valueOf(Object) </code></pre> . Although null cannot be coerced, the sentinel value <pre><code> NULL </code></pre> is coerced to the string "null". </li> </li> </li> </li> </li> </ul> <p> This class can look up both mandatory and optional values: <ul> <li> Use <pre><code> get <i> Type </i> () </code></pre> to retrieve a mandatory value. This fails with a <pre><code> JSONException </code></pre> if the requested name has no value or if the value cannot be coerced to the requested type. <li> Use <pre><code> opt <i> Type </i> () </code></pre> to retrieve an optional value. This returns a system- or user-supplied default if the requested name has no value or if the value cannot be coerced to the requested type. </li> </li> </ul> <p> <strong> Warning: </strong> this class represents null in two incompatible ways: the standard Java <pre><code> null </code></pre> reference, and the sentinel value <pre><code> NULL </code></pre> . In particular, calling <pre><code> put(name, null) </code></pre> removes the named entry from the object but <pre><code> put(name, JSONObject.NULL) </code></pre> stores an entry whose value is <pre><code> JSONObject.NULL </code></pre> . <p> Instances of this class are not thread safe. Although this class is nonfinal, it was not designed for inheritance and should not be subclassed. In particular, self-use by overrideable methods is not specified. See <i> Effective Java </i> Item 17, "Design and Document or inheritance or else prohibit it" for further information. </p><pre><code>public class JSONObject\nextends Object</code></pre></section>	https://developer.android.com/reference/org/json/JSONObject.html
JSONStringer	A										<section class="prog__container"><p> Implements <pre><code> toString() </code></pre> and <pre><code> toString() </code></pre> . Most application developers should use those methods directly and disregard this API. For example: <pre> JSONObject object = ... String json = object.toString();</pre> <p> Stringers only encode well-formed JSON strings. In particular: <ul> <li> The stringer must have exactly one top-level array or object. <li> Lexical scopes must be balanced: every call to <pre><code> array() </code></pre> must have a matching call to <pre><code> endArray() </code></pre> and every call to <pre><code> object() </code></pre> must have a matching call to <pre><code> endObject() </code></pre> . <li> Arrays may not contain keys (property names). <li> Objects must alternate keys (property names) and values. <li> Values are inserted with either literal <pre><code> value </code></pre> calls, or by nesting arrays or objects. </li> </li> </li> </li> </li> </ul> Calls that would result in a malformed JSON string will fail with a <pre><code> JSONException </code></pre> . <p> This class provides no facility for pretty-printing (ie. indenting) output. To encode indented output, use <pre><code> toString(int) </code></pre> or <pre><code> toString(int) </code></pre> . <p> Some implementations of the API support at most 20 levels of nesting. Attempts to create more than 20 levels of nesting may fail with a <pre><code> JSONException </code></pre> . <p> Each stringer may be used to encode a single top level value. Instances of this class are not thread safe. Although this class is nonfinal, it was not designed for inheritance and should not be subclassed. In particular, self-use by overrideable methods is not specified. See <i> Effective Java </i> Item 17, "Design and Document or inheritance or else prohibit it" for further information. </p><pre><code>public class JSONStringer\nextends Object</code></pre></section>	https://developer.android.com/reference/org/json/JSONStringer.html
JSONTokener	A										<section class="prog__container"><p> Parses a JSON ( RFC 4627 ) encoded string into the corresponding object. Most clients of this class will use only need the <pre><code> constructor </code></pre> and <pre><code> nextValue() </code></pre> method. Example usage: <pre> String json = "{" + " \"query\": \"Pizza\", " + " \"locations\": [ 94043, 90210 ] " + "}"; JSONObject object = (JSONObject) new JSONTokener(json).nextValue(); String query = object.getString("query"); JSONArray locations = object.getJSONArray("locations");</pre> <p> For best interoperability and performance use JSON that complies with RFC 4627, such as that generated by <pre><code> JSONStringer </code></pre> . For legacy reasons this parser is lenient, so a successful parse does not indicate that the input string was valid JSON. All of the following syntax errors will be ignored: <ul> <li> End of line comments starting with <pre><code> // </code></pre> or <pre><code> # </code></pre> and ending with a newline character. <li> C-style comments starting with <pre><code> /* </code></pre> and ending with <pre><code> * </code></pre> <pre><code> / </code></pre> . Such comments may not be nested. <li> Strings that are unquoted or <pre><code> 'single quoted' </code></pre> . <li> Hexadecimal integers prefixed with <pre><code> 0x </code></pre> or <pre><code> 0X </code></pre> . <li> Octal integers prefixed with <pre><code> 0 </code></pre> . <li> Array elements separated by <pre><code> ; </code></pre> . <li> Unnecessary array separators. These are interpreted as if null was the omitted value. <li> Key-value pairs separated by <pre><code> = </code></pre> or <pre><code> =&gt; </code></pre> . <li> Key-value pairs separated by <pre><code> ; </code></pre> . </li> </li> </li> </li> </li> </li> </li> </li> </li> </ul> <p> Each tokener may be used to parse a single JSON string. Instances of this class are not thread safe. Although this class is nonfinal, it was not designed for inheritance and should not be subclassed. In particular, self-use by overrideable methods is not specified. See <i> Effective Java </i> Item 17, "Design and Document or inheritance or else prohibit it" for further information. </p><pre><code>public class JSONTokener\nextends Object</code></pre></section>	https://developer.android.com/reference/org/json/JSONTokener.html
org.json	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/org/json/package-summary.html
Attr	A										<section class="prog__container"><p> The <pre><code> Attr </code></pre> interface represents an attribute in an <pre><code> Element </code></pre> object. Typically the allowable values for the attribute are defined in a schema associated with the document. <p> <pre><code> Attr </code></pre> objects inherit the <pre><code> Node </code></pre> interface, but since they are not actually child nodes of the element they describe, the DOM does not consider them part of the document tree. Thus, the <pre><code> Node </code></pre> attributes <pre><code> parentNode </code></pre> , <pre><code> previousSibling </code></pre> , and <pre><code> nextSibling </code></pre> have a <pre><code> null </code></pre> value for <pre><code> Attr </code></pre> objects. The DOM takes the view that attributes are properties of elements rather than having a separate identity from the elements they are associated with; this should make it more efficient to implement such features as default attributes associated with all elements of a given type. Furthermore, <pre><code> Attr </code></pre> nodes may not be immediate children of a <pre><code> DocumentFragment </code></pre> . However, they can be associated with <pre><code> Element </code></pre> nodes contained within a <pre><code> DocumentFragment </code></pre> . In short, users and implementors of the DOM need to be aware that <pre><code> Attr </code></pre> nodes have some things in common with other objects inheriting the <pre><code> Node </code></pre> interface, but they also are quite distinct. <p> The attribute's effective value is determined as follows: if this attribute has been explicitly assigned any value, that value is the attribute's effective value; otherwise, if there is a declaration for this attribute, and that declaration includes a default value, then that default value is the attribute's effective value; otherwise, the attribute does not exist on this element in the structure model until it has been explicitly added. Note that the <pre><code> Node.nodeValue </code></pre> attribute on the <pre><code> Attr </code></pre> instance can also be used to retrieve the string version of the attribute's value(s). <p> If the attribute was not explicitly given a value in the instance document but has a default value provided by the schema associated with the document, an attribute node will be created with <pre><code> specified </code></pre> set to <pre><code> false </code></pre> . Removing attribute nodes for which a default value is defined in the schema generates a new attribute node with the default value and <pre><code> specified </code></pre> set to <pre><code> false </code></pre> . If validation occurred while invoking <pre><code> Document.normalizeDocument() </code></pre> , attribute nodes with <pre><code> specified </code></pre> equals to <pre><code> false </code></pre> are recomputed according to the default attribute values provided by the schema. If no default value is associate with this attribute in the schema, the attribute node is discarded. <p> In XML, where the value of an attribute can contain entity references, the child nodes of the <pre><code> Attr </code></pre> node may be either <pre><code> Text </code></pre> or <pre><code> EntityReference </code></pre> nodes (when these are in use; see the description of <pre><code> EntityReference </code></pre> for discussion). <p> The DOM Core represents all attribute values as simple strings, even if the DTD or schema associated with the document declares them of some specific type such as tokenized. <p> The way attribute value normalization is performed by the DOM implementation depends on how much the implementation knows about the schema in use. Typically, the <pre><code> value </code></pre> and <pre><code> nodeValue </code></pre> attributes of an <pre><code> Attr </code></pre> node initially returns the normalized value given by the parser. It is also the case after <pre><code> Document.normalizeDocument() </code></pre> is called (assuming the right options have been set). But this may not be the case after mutation, independently of whether the mutation is performed by setting the string value directly or by changing the <pre><code> Attr </code></pre> child nodes. In particular, this is true when character references are involved, given that they are not represented in the DOM and they impact attribute value normalization. On the other hand, if the implementation knows about the schema in use when the attribute value is changed, and it is of a different type than CDATA, it may normalize it again at that time. This is especially true of specialized DOM implementations, such as SVG DOM implementations, which store attribute values in an internal form different from a string. <p> The following table gives some examples of the relations between the attribute value in the original document (parsed attribute), the value as exposed in the DOM, and the serialization of the value: <table border="1" cellpadding="3"> <tr> <th> Examples </th> <th> Parsed attribute value </th> <th> Initial <pre><code> Attr.value </code></pre> </th> <th> Serialized attribute value </th> </tr> <tr> <td colspan="1" rowspan="1" valign="top"> Character reference </td> <td colspan="1" rowspan="1" valign="top"> <pre>"x&amp;#178;=5"</pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre>"x²=5"</pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre>"x&amp;#178;=5"</pre> </td> </tr> <tr> <td colspan="1" rowspan="1" valign="top"> Built-in character entity </td> <td colspan="1" rowspan="1" valign="top"> <pre>"y&amp;lt;6"</pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre>"y&lt;6"</pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre>"y&amp;lt;6"</pre> </td> </tr> <tr> <td colspan="1" rowspan="1" valign="top"> Literal newline between </td> <td colspan="1" rowspan="1" valign="top"> <pre> "x=5&amp;#10;y=6"</pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre>"x=5 y=6"</pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre>"x=5&amp;#10;y=6"</pre> </td> </tr> <tr> <td colspan="1" rowspan="1" valign="top"> Normalized newline between </td> <td colspan="1" rowspan="1" valign="top"> <pre>"x=5 y=6"</pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre>"x=5 y=6"</pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre>"x=5 y=6"</pre> </td> </tr> <tr> <td colspan="1" rowspan="1" valign="top"> Entity <pre><code> e </code></pre> with literal newline </td> <td colspan="1" rowspan="1" valign="top"> <pre> &lt;!ENTITY e '...&amp;#10;...'&gt; [...]&gt; "x=5&amp;e;y=6"</pre> </td> <td colspan="1" rowspan="1" valign="top"> <em> Dependent on Implementation and Load Options </em> </td> <td colspan="1" rowspan="1" valign="top"> <em> Dependent on Implementation and Load/Save Options </em> </td> </tr> </table> <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface Attr\nimplements Node</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/Attr.html
CDATASection	A										<section class="prog__container"><p> CDATA sections are used to escape blocks of text containing characters that would otherwise be regarded as markup. The only delimiter that is recognized in a CDATA section is the "]]&gt;" string that ends the CDATA section. CDATA sections cannot be nested. Their primary purpose is for including material such as XML fragments, without needing to escape all the delimiters. <p> The <pre><code> CharacterData.data </code></pre> attribute holds the text that is contained by the CDATA section. Note that this <em> may </em> contain characters that need to be escaped outside of CDATA sections and that, depending on the character encoding ("charset") chosen for serialization, it may be impossible to write out some characters as part of a CDATA section. <p> The <pre><code> CDATASection </code></pre> interface inherits from the <pre><code> CharacterData </code></pre> interface through the <pre><code> Text </code></pre> interface. Adjacent <pre><code> CDATASection </code></pre> nodes are not merged by use of the <pre><code> normalize </code></pre> method of the <pre><code> Node </code></pre> interface. <p> No lexical check is done on the content of a CDATA section and it is therefore possible to have the character sequence <pre><code> "]]&gt;" </code></pre> in the content, which is illegal in a CDATA section per section 2.7 of [ XML 1.0 ]. The presence of this character sequence must generate a fatal error during serialization or the cdata section must be splitted before the serialization (see also the parameter <pre><code> "split-cdata-sections" </code></pre> in the <pre><code> DOMConfiguration </code></pre> interface). <p> <b> Note: </b> Because no markup is recognized within a <pre><code> CDATASection </code></pre> , character numeric references cannot be used as an escape mechanism when serializing. Therefore, action needs to be taken when serializing a <pre><code> CDATASection </code></pre> with a character encoding where some of the contained characters cannot be represented. Failure to do so would not produce well-formed XML. <p> <b> Note: </b> One potential solution in the serialization process is to end the CDATA section before the character, output the character using a character reference or entity reference, and open a new CDATA section for any further characters in the text node. Note, however, that some code conversion libraries at the time of writing do not return an error or exception when a character is missing from the encoding, making the task of ensuring that data is not corrupted on serialization more difficult. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface CDATASection\nimplements Text</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/CDATASection.html
CharacterData	A										<section class="prog__container"><p> The <pre><code> CharacterData </code></pre> interface extends Node with a set of attributes and methods for accessing character data in the DOM. For clarity this set is defined here rather than on each object that uses these attributes and methods. No DOM objects correspond directly to <pre><code> CharacterData </code></pre> , though <pre><code> Text </code></pre> and others do inherit the interface from it. All <pre><code> offsets </code></pre> in this interface start from <pre><code> 0 </code></pre> . <p> As explained in the <pre><code> DOMString </code></pre> interface, text strings in the DOM are represented in UTF-16, i.e. as a sequence of 16-bit units. In the following, the term 16-bit units is used whenever necessary to indicate that indexing on CharacterData is done in 16-bit units. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface CharacterData\nimplements Node</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/CharacterData.html
Comment	A										<section class="prog__container"><p> This interface inherits from <pre><code> CharacterData </code></pre> and represents the content of a comment, i.e., all the characters between the starting ' <pre><code> &lt;!-- </code></pre> ' and ending ' <pre><code> --&gt; </code></pre> '. Note that this is the definition of a comment in XML, and, in practice, HTML, although some HTML tools may implement the full SGML comment structure. <p> No lexical check is done on the content of a comment and it is therefore possible to have the character sequence <pre><code> "--" </code></pre> (double-hyphen) in the content, which is illegal in a comment per section 2.5 of [ XML 1.0 ]. The presence of this character sequence must generate a fatal error during serialization. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface Comment\nimplements CharacterData</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/Comment.html
Document	A										<section class="prog__container"><p> The <pre><code> Document </code></pre> interface represents the entire HTML or XML document. Conceptually, it is the root of the document tree, and provides the primary access to the document's data. <p> Since elements, text nodes, comments, processing instructions, etc. cannot exist outside the context of a <pre><code> Document </code></pre> , the <pre><code> Document </code></pre> interface also contains the factory methods needed to create these objects. The <pre><code> Node </code></pre> objects created have a <pre><code> ownerDocument </code></pre> attribute which associates them with the <pre><code> Document </code></pre> within whose context they were created. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface Document\nimplements Node</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/Document.html
DocumentFragment	A										<section class="prog__container"><p> <pre><code> DocumentFragment </code></pre> is a "lightweight" or "minimal" <pre><code> Document </code></pre> object. It is very common to want to be able to extract a portion of a document's tree or to create a new fragment of a document. Imagine implementing a user command like cut or rearranging a document by moving fragments around. It is desirable to have an object which can hold such fragments and it is quite natural to use a Node for this purpose. While it is true that a <pre><code> Document </code></pre> object could fulfill this role, a <pre><code> Document </code></pre> object can potentially be a heavyweight object, depending on the underlying implementation. What is really needed for this is a very lightweight object. <pre><code> DocumentFragment </code></pre> is such an object. <p> Furthermore, various operations -- such as inserting nodes as children of another <pre><code> Node </code></pre> -- may take <pre><code> DocumentFragment </code></pre> objects as arguments; this results in all the child nodes of the <pre><code> DocumentFragment </code></pre> being moved to the child list of this node. <p> The children of a <pre><code> DocumentFragment </code></pre> node are zero or more nodes representing the tops of any sub-trees defining the structure of the document. <pre><code> DocumentFragment </code></pre> nodes do not need to be well-formed XML documents (although they do need to follow the rules imposed upon well-formed XML parsed entities, which can have multiple top nodes). For example, a <pre><code> DocumentFragment </code></pre> might have only one child and that child node could be a <pre><code> Text </code></pre> node. Such a structure model represents neither an HTML document nor a well-formed XML document. <p> When a <pre><code> DocumentFragment </code></pre> is inserted into a <pre><code> Document </code></pre> (or indeed any other <pre><code> Node </code></pre> that may take children) the children of the <pre><code> DocumentFragment </code></pre> and not the <pre><code> DocumentFragment </code></pre> itself are inserted into the <pre><code> Node </code></pre> . This makes the <pre><code> DocumentFragment </code></pre> very useful when the user wishes to create nodes that are siblings; the <pre><code> DocumentFragment </code></pre> acts as the parent of these nodes so that the user can use the standard methods from the <pre><code> Node </code></pre> interface, such as <pre><code> Node.insertBefore </code></pre> and <pre><code> Node.appendChild </code></pre> . <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface DocumentFragment\nimplements Node</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/DocumentFragment.html
DocumentType	A										<section class="prog__container"><p> Each <pre><code> Document </code></pre> has a <pre><code> doctype </code></pre> attribute whose value is either <pre><code> null </code></pre> or a <pre><code> DocumentType </code></pre> object. The <pre><code> DocumentType </code></pre> interface in the DOM Core provides an interface to the list of entities that are defined for the document, and little else because the effect of namespaces and the various XML schema efforts on DTD representation are not clearly understood as of this writing. <p> DOM Level 3 doesn't support editing <pre><code> DocumentType </code></pre> nodes. <pre><code> DocumentType </code></pre> nodes are read-only. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface DocumentType\nimplements Node</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/DocumentType.html
DOMConfiguration	A										<section class="prog__container"><p> The <pre><code> DOMConfiguration </code></pre> interface represents the configuration of a document and maintains a table of recognized parameters. Using the configuration, it is possible to change <pre><code> Document.normalizeDocument() </code></pre> behavior, such as replacing the <pre><code> CDATASection </code></pre> nodes with <pre><code> Text </code></pre> nodes or specifying the type of the schema that must be used when the validation of the <pre><code> Document </code></pre> is requested. <pre><code> DOMConfiguration </code></pre> objects are also used in [ DOM Level 3 Load and Save ] in the <pre><code> DOMParser </code></pre> and <pre><code> DOMSerializer </code></pre> interfaces. <p> The parameter names used by the <pre><code> DOMConfiguration </code></pre> object are defined throughout the DOM Level 3 specifications. Names are case-insensitive. To avoid possible conflicts, as a convention, names referring to parameters defined outside the DOM specification should be made unique. Because parameters are exposed as properties in the , names are recommended to follow the section 5.16 Identifiers of [Unicode] with the addition of the character '-' (HYPHEN-MINUS) but it is not enforced by the DOM implementation. DOM Level 3 Core Implementations are required to recognize all parameters defined in this specification. Some parameter values may also be required to be supported by the implementation. Refer to the definition of the parameter to know if a value must be supported or not. <p> <b> Note: </b> Parameters are similar to features and properties used in SAX2 [ SAX ]. <p> The following list of parameters defined in the DOM: <dl> <dt> <pre><code> "canonical-form" </code></pre> </dt> <dd> <dl> <dt> <pre><code> true </code></pre> </dt> <dd> [ <em> optional </em> ] Canonicalize the document according to the rules specified in [ Canonical XML ], such as removing the <pre><code> DocumentType </code></pre> node (if any) from the tree, or removing superfluous namespace declarations from each element. Note that this is limited to what can be represented in the DOM; in particular, there is no way to specify the order of the attributes in the DOM. In addition, Setting this parameter to <pre><code> true </code></pre> will also set the state of the parameters listed below. Later changes to the state of one of those parameters will revert "canonical-form" back to <pre><code> false </code></pre> . Parameters set to <pre><code> false </code></pre> : "entities", " normalize-characters", "cdata-sections". Parameters set to <pre><code> true </code></pre> : "namespaces", "namespace-declarations", "well-formed", "element-content-whitespace". Other parameters are not changed unless explicitly specified in the description of the parameters. </dd> <dt> <pre><code> false </code></pre> </dt> <dd> [ <em> required </em> ] ( <em> default </em> )Do not canonicalize the document. </dd> </dl> </dd> <dt> <pre><code> "cdata-sections" </code></pre> </dt> <dd> <dl> <dt> <pre><code> true </code></pre> </dt> <dd> [ <em> required </em> ] ( <em> default </em> )Keep <pre><code> CDATASection </code></pre> nodes in the document. </dd> <dt> <pre><code> false </code></pre> </dt> <dd> [ <em> required </em> ]Transform <pre><code> CDATASection </code></pre> nodes in the document into <pre><code> Text </code></pre> nodes. The new <pre><code> Text </code></pre> node is then combined with any adjacent <pre><code> Text </code></pre> node. </dd> </dl> </dd> <dt> <pre><code> "check-character-normalization" </code></pre> </dt> <dd> <dl> <dt> <pre><code> true </code></pre> </dt> <dd> [ <em> optional </em> ] Check if the characters in the document are fully normalized , as defined in appendix B of [ XML 1.1 ]. When a sequence of characters is encountered that fails normalization checking, an error with the <pre><code> DOMError.type </code></pre> equals to "check-character-normalization-failure" is issued. </dd> <dt> <pre><code> false </code></pre> </dt> <dd> [ <em> required </em> ] ( <em> default </em> )Do not check if characters are normalized. </dd> </dl> </dd> <dt> <pre><code> "comments" </code></pre> </dt> <dd> <dl> <dt> <pre><code> true </code></pre> </dt> <dd> [ <em> required </em> ] ( <em> default </em> )Keep <pre><code> Comment </code></pre> nodes in the document. </dd> <dt> <pre><code> false </code></pre> </dt> <dd> [ <em> required </em> ]Discard <pre><code> Comment </code></pre> nodes in the document. </dd> </dl> </dd> <dt> <pre><code> "datatype-normalization" </code></pre> </dt> <dd> <dl> <dt> <pre><code> true </code></pre> </dt> <dd> [ <em> optional </em> ] Expose schema normalized values in the tree, such as XML Schema normalized values in the case of XML Schema. Since this parameter requires to have schema information, the "validate" parameter will also be set to <pre><code> true </code></pre> . Having this parameter activated when "validate" is <pre><code> false </code></pre> has no effect and no schema-normalization will happen. <p> <b> Note: </b> Since the document contains the result of the XML 1.0 processing, this parameter does not apply to attribute value normalization as defined in section 3.3.3 of [ XML 1.0 ] and is only meant for schema languages other than Document Type Definition (DTD). </p><pre><code>public interface DOMConfiguration\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/DOMConfiguration.html
DOMError	A										<section class="prog__container"><p> <pre><code> DOMError </code></pre> is an interface that describes an error. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface DOMError\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/DOMError.html
DOMErrorHandler	A										<section class="prog__container"><p> <pre><code> DOMErrorHandler </code></pre> is a callback interface that the DOM implementation can call when reporting errors that happens while processing XML data, or when doing some other processing (e.g. validating a document). A <pre><code> DOMErrorHandler </code></pre> object can be attached to a <pre><code> Document </code></pre> using the "error-handler" on the <pre><code> DOMConfiguration </code></pre> interface. If more than one error needs to be reported during an operation, the sequence and numbers of the errors passed to the error handler are implementation dependent. <p> The application that is using the DOM implementation is expected to implement this interface. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface DOMErrorHandler\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/DOMErrorHandler.html
DOMException	A										<section class="prog__container"><p> DOM operations only raise exceptions in "exceptional" circumstances, i.e., when an operation is impossible to perform (either for logical reasons, because data is lost, or because the implementation has become unstable). In general, DOM methods return specific error values in ordinary processing situations, such as out-of-bound errors when using <pre><code> NodeList </code></pre> . <p> Implementations should raise other exceptions under other circumstances. For example, implementations should raise an implementation-dependent exception if a <pre><code> null </code></pre> argument is passed when <pre><code> null </code></pre> was not expected. <p> Some languages and object systems do not support the concept of exceptions. For such systems, error conditions may be indicated using native error reporting mechanisms. For some bindings, for example, methods may return error codes similar to those listed in the corresponding method descriptions. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public class DOMException\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/DOMException.html
DOMImplementation	A										<section class="prog__container"><p> The <pre><code> DOMImplementation </code></pre> interface provides a number of methods for performing operations that are independent of any particular instance of the document object model. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface DOMImplementation\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/DOMImplementation.html
DOMImplementationList	A										<section class="prog__container"><p> The <pre><code> DOMImplementationList </code></pre> interface provides the abstraction of an ordered collection of DOM implementations, without defining or constraining how this collection is implemented. The items in the <pre><code> DOMImplementationList </code></pre> are accessible via an integral index, starting from 0. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface DOMImplementationList\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/DOMImplementationList.html
DOMImplementationSource	A										<section class="prog__container"><p> This interface permits a DOM implementer to supply one or more implementations, based upon requested features and versions, as specified in . Each implemented <pre><code> DOMImplementationSource </code></pre> object is listed in the binding-specific list of available sources so that its <pre><code> DOMImplementation </code></pre> objects are made available. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface DOMImplementationSource\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/DOMImplementationSource.html
DOMLocator	A										<section class="prog__container"><p> <pre><code> DOMLocator </code></pre> is an interface that describes a location (e.g. where an error occurred). <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface DOMLocator\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/DOMLocator.html
DOMStringList	A										<section class="prog__container"><p> The <pre><code> DOMStringList </code></pre> interface provides the abstraction of an ordered collection of <pre><code> DOMString </code></pre> values, without defining or constraining how this collection is implemented. The items in the <pre><code> DOMStringList </code></pre> are accessible via an integral index, starting from 0. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface DOMStringList\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/DOMStringList.html
Element	A										<section class="prog__container"><p> The <pre><code> Element </code></pre> interface represents an element in an HTML or XML document. Elements may have attributes associated with them; since the <pre><code> Element </code></pre> interface inherits from <pre><code> Node </code></pre> , the generic <pre><code> Node </code></pre> interface attribute <pre><code> attributes </code></pre> may be used to retrieve the set of all attributes for an element. There are methods on the <pre><code> Element </code></pre> interface to retrieve either an <pre><code> Attr </code></pre> object by name or an attribute value by name. In XML, where an attribute value may contain entity references, an <pre><code> Attr </code></pre> object should be retrieved to examine the possibly fairly complex sub-tree representing the attribute value. On the other hand, in HTML, where all attributes have simple string values, methods to directly access an attribute value can safely be used as a convenience. <p> <b> Note: </b> In DOM Level 2, the method <pre><code> normalize </code></pre> is inherited from the <pre><code> Node </code></pre> interface where it was moved. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface Element\nimplements Node</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/Element.html
Entity	A										<section class="prog__container"><p> This interface represents a known entity, either parsed or unparsed, in an XML document. Note that this models the entity itself <em> not </em> the entity declaration. <p> The <pre><code> nodeName </code></pre> attribute that is inherited from <pre><code> Node </code></pre> contains the name of the entity. <p> An XML processor may choose to completely expand entities before the structure model is passed to the DOM; in this case there will be no <pre><code> EntityReference </code></pre> nodes in the document tree. <p> XML does not mandate that a non-validating XML processor read and process entity declarations made in the external subset or declared in parameter entities. This means that parsed entities declared in the external subset need not be expanded by some classes of applications, and that the replacement text of the entity may not be available. When the replacement text is available, the corresponding <pre><code> Entity </code></pre> node's child list represents the structure of that replacement value. Otherwise, the child list is empty. <p> DOM Level 3 does not support editing <pre><code> Entity </code></pre> nodes; if a user wants to make changes to the contents of an <pre><code> Entity </code></pre> , every related <pre><code> EntityReference </code></pre> node has to be replaced in the structure model by a clone of the <pre><code> Entity </code></pre> 's contents, and then the desired changes must be made to each of those clones instead. <pre><code> Entity </code></pre> nodes and all their descendants are readonly. <p> An <pre><code> Entity </code></pre> node does not have any parent. <p> <b> Note: </b> If the entity contains an unbound namespace prefix, the <pre><code> namespaceURI </code></pre> of the corresponding node in the <pre><code> Entity </code></pre> node subtree is <pre><code> null </code></pre> . The same is true for <pre><code> EntityReference </code></pre> nodes that refer to this entity, when they are created using the <pre><code> createEntityReference </code></pre> method of the <pre><code> Document </code></pre> interface. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface Entity\nimplements Node</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/Entity.html
EntityReference	A										<section class="prog__container"><p> <pre><code> EntityReference </code></pre> nodes may be used to represent an entity reference in the tree. Note that character references and references to predefined entities are considered to be expanded by the HTML or XML processor so that characters are represented by their Unicode equivalent rather than by an entity reference. Moreover, the XML processor may completely expand references to entities while building the <pre><code> Document </code></pre> , instead of providing <pre><code> EntityReference </code></pre> nodes. If it does provide such nodes, then for an <pre><code> EntityReference </code></pre> node that represents a reference to a known entity an <pre><code> Entity </code></pre> exists, and the subtree of the <pre><code> EntityReference </code></pre> node is a copy of the <pre><code> Entity </code></pre> node subtree. However, the latter may not be true when an entity contains an unbound namespace prefix. In such a case, because the namespace prefix resolution depends on where the entity reference is, the descendants of the <pre><code> EntityReference </code></pre> node may be bound to different namespace URIs. When an <pre><code> EntityReference </code></pre> node represents a reference to an unknown entity, the node has no children and its replacement value, when used by <pre><code> Attr.value </code></pre> for example, is empty. <p> As for <pre><code> Entity </code></pre> nodes, <pre><code> EntityReference </code></pre> nodes and all their descendants are readonly. <p> <b> Note: </b> <pre><code> EntityReference </code></pre> nodes may cause element content and attribute value normalization problems when, such as in XML 1.0 and XML Schema, the normalization is performed after entity reference are expanded. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface EntityReference\nimplements Node</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/EntityReference.html
NamedNodeMap	A										<section class="prog__container"><p> Objects implementing the <pre><code> NamedNodeMap </code></pre> interface are used to represent collections of nodes that can be accessed by name. Note that <pre><code> NamedNodeMap </code></pre> does not inherit from <pre><code> NodeList </code></pre> ; <pre><code> NamedNodeMaps </code></pre> are not maintained in any particular order. Objects contained in an object implementing <pre><code> NamedNodeMap </code></pre> may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a <pre><code> NamedNodeMap </code></pre> , and does not imply that the DOM specifies an order to these Nodes. <p> <pre><code> NamedNodeMap </code></pre> objects in the DOM are live. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface NamedNodeMap\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/NamedNodeMap.html
NameList	A										<section class="prog__container"><p> The <pre><code> NameList </code></pre> interface provides the abstraction of an ordered collection of parallel pairs of name and namespace values (which could be null values), without defining or constraining how this collection is implemented. The items in the <pre><code> NameList </code></pre> are accessible via an integral index, starting from 0. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface NameList\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/NameList.html
Node	A										<section class="prog__container"><p> The <pre><code> Node </code></pre> interface is the primary datatype for the entire Document Object Model. It represents a single node in the document tree. While all objects implementing the <pre><code> Node </code></pre> interface expose methods for dealing with children, not all objects implementing the <pre><code> Node </code></pre> interface may have children. For example, <pre><code> Text </code></pre> nodes may not have children, and adding children to such nodes results in a <pre><code> DOMException </code></pre> being raised. <p> The attributes <pre><code> nodeName </code></pre> , <pre><code> nodeValue </code></pre> and <pre><code> attributes </code></pre> are included as a mechanism to get at node information without casting down to the specific derived interface. In cases where there is no obvious mapping of these attributes for a specific <pre><code> nodeType </code></pre> (e.g., <pre><code> nodeValue </code></pre> for an <pre><code> Element </code></pre> or <pre><code> attributes </code></pre> for a <pre><code> Comment </code></pre> ), this returns <pre><code> null </code></pre> . Note that the specialized interfaces may contain additional and more convenient mechanisms to get and set the relevant information. <p> The values of <pre><code> nodeName </code></pre> , <pre><code> nodeValue </code></pre> , and <pre><code> attributes </code></pre> vary according to the node type as follows: <table border="1" cellpadding="3"> <tr> <th> Interface </th> <th> nodeName </th> <th> nodeValue </th> <th> attributes </th> </tr> <tr> <td colspan="1" rowspan="1" valign="top"> <pre><code> Attr </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> same as <pre><code> Attr.name </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> same as <pre><code> Attr.value </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> null </code></pre> </td> </tr> <tr> <td colspan="1" rowspan="1" valign="top"> <pre><code> CDATASection </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> "#cdata-section" </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> same as <pre><code> CharacterData.data </code></pre> , the content of the CDATA Section </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> null </code></pre> </td> </tr> <tr> <td colspan="1" rowspan="1" valign="top"> <pre><code> Comment </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> "#comment" </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> same as <pre><code> CharacterData.data </code></pre> , the content of the comment </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> null </code></pre> </td> </tr> <tr> <td colspan="1" rowspan="1" valign="top"> <pre><code> Document </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> "#document" </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> null </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> null </code></pre> </td> </tr> <tr> <td colspan="1" rowspan="1" valign="top"> <pre><code> DocumentFragment </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> "#document-fragment" </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> null </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> null </code></pre> </td> </tr> <tr> <td colspan="1" rowspan="1" valign="top"> <pre><code> DocumentType </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> same as <pre><code> DocumentType.name </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> null </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> null </code></pre> </td> </tr> <tr> <td colspan="1" rowspan="1" valign="top"> <pre><code> Element </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> same as <pre><code> Element.tagName </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> null </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> NamedNodeMap </code></pre> </td> </tr> <tr> <td colspan="1" rowspan="1" valign="top"> <pre><code> Entity </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> entity name </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> null </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> null </code></pre> </td> </tr> <tr> <td colspan="1" rowspan="1" valign="top"> <pre><code> EntityReference </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> name of entity referenced </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> null </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> null </code></pre> </td> </tr> <tr> <td colspan="1" rowspan="1" valign="top"> <pre><code> Notation </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> notation name </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> null </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> null </code></pre> </td> </tr> <tr> <td colspan="1" rowspan="1" valign="top"> <pre><code> ProcessingInstruction </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> same as <pre><code> ProcessingInstruction.target </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> same as <pre><code> ProcessingInstruction.data </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> null </code></pre> </td> </tr> <tr> <td colspan="1" rowspan="1" valign="top"> <pre><code> Text </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> "#text" </code></pre> </td> <td colspan="1" rowspan="1" valign="top"> same as <pre><code> CharacterData.data </code></pre> , the content of the text node </td> <td colspan="1" rowspan="1" valign="top"> <pre><code> null </code></pre> </td> </tr> </table> <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface Node\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/Node.html
NodeList	A										<section class="prog__container"><p> The <pre><code> NodeList </code></pre> interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. <pre><code> NodeList </code></pre> objects in the DOM are live. <p> The items in the <pre><code> NodeList </code></pre> are accessible via an integral index, starting from 0. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface NodeList\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/NodeList.html
Notation	A										<section class="prog__container"><p> This interface represents a notation declared in the DTD. A notation either declares, by name, the format of an unparsed entity (see section 4.7 of the XML 1.0 specification [ XML 1.0 ]), or is used for formal declaration of processing instruction targets (see section 2.6 of the XML 1.0 specification [ XML 1.0 ]). The <pre><code> nodeName </code></pre> attribute inherited from <pre><code> Node </code></pre> is set to the declared name of the notation. <p> The DOM Core does not support editing <pre><code> Notation </code></pre> nodes; they are therefore readonly. <p> A <pre><code> Notation </code></pre> node does not have any parent. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface Notation\nimplements Node</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/Notation.html
org.w3c.dom	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/org/w3c/dom/package-summary.html
ProcessingInstruction	A										<section class="prog__container"><p> The <pre><code> ProcessingInstruction </code></pre> interface represents a "processing instruction", used in XML as a way to keep processor-specific information in the text of the document. <p> No lexical check is done on the content of a processing instruction and it is therefore possible to have the character sequence <pre><code> "?&gt;" </code></pre> in the content, which is illegal a processing instruction per section 2.6 of [ XML 1.0 ]. The presence of this character sequence must generate a fatal error during serialization. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface ProcessingInstruction\nimplements Node</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/ProcessingInstruction.html
Text	A										<section class="prog__container"><p> The <pre><code> Text </code></pre> interface inherits from <pre><code> CharacterData </code></pre> and represents the textual content (termed character data in XML) of an <pre><code> Element </code></pre> or <pre><code> Attr </code></pre> . If there is no markup inside an element's content, the text is contained in a single object implementing the <pre><code> Text </code></pre> interface that is the only child of the element. If there is markup, it is parsed into the information items (elements, comments, etc.) and <pre><code> Text </code></pre> nodes that form the list of children of the element. <p> When a document is first made available via the DOM, there is only one <pre><code> Text </code></pre> node for each block of text. Users may create adjacent <pre><code> Text </code></pre> nodes that represent the contents of a given element without any intervening markup, but should be aware that there is no way to represent the separations between these nodes in XML or HTML, so they will not (in general) persist between DOM editing sessions. The <pre><code> Node.normalize() </code></pre> method merges any such adjacent <pre><code> Text </code></pre> objects into a single node for each block of text. <p> No lexical check is done on the content of a <pre><code> Text </code></pre> node and, depending on its position in the document, some characters must be escaped during serialization using character references; e.g. the characters "&lt;&amp;" if the textual content is part of an element or of an attribute, the character sequence "]]&gt;" when part of an element, the quotation mark character " or the apostrophe character ' when part of an attribute. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface Text\nimplements CharacterData</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/Text.html
TypeInfo	A										<section class="prog__container"><p> The <pre><code> TypeInfo </code></pre> interface represents a type referenced from <pre><code> Element </code></pre> or <pre><code> Attr </code></pre> nodes, specified in the schemas associated with the document. The type is a pair of a namespace URI and name properties, and depends on the document's schema. <p> If the document's schema is an XML DTD [ XML 1.0 ], the values are computed as follows: <ul> <li> If this type is referenced from an <pre><code> Attr </code></pre> node, <pre><code> typeNamespace </code></pre> is <pre><code> "http://www.w3.org/TR/REC-xml" </code></pre> and <pre><code> typeName </code></pre> represents the <b> [attribute type] </b> property in the [ XML Information Set ] . If there is no declaration for the attribute, <pre><code> typeNamespace </code></pre> and <pre><code> typeName </code></pre> are <pre><code> null </code></pre> . </li> <li> If this type is referenced from an <pre><code> Element </code></pre> node, <pre><code> typeNamespace </code></pre> and <pre><code> typeName </code></pre> are <pre><code> null </code></pre> . </li> </ul> <p> If the document's schema is an XML Schema [ XML Schema Part 1 ] , the values are computed as follows using the post-schema-validation infoset contributions (also called PSVI contributions): <ul> <li> If the <b> [validity] </b> property exists AND is <em> "invalid" </em> or <em> "notKnown" </em> : the {target namespace} and {name} properties of the declared type if available, otherwise <pre><code> null </code></pre> . <p> <b> Note: </b> At the time of writing, the XML Schema specification does not require exposing the declared type. Thus, DOM implementations might choose not to provide type information if validity is not valid. </p><pre><code>public interface TypeInfo\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/TypeInfo.html
UserDataHandler	A										<section class="prog__container"><p> When associating an object to a key on a node using <pre><code> Node.setUserData() </code></pre> the application can provide a handler that gets called when the node the object is associated to is being cloned, imported, or renamed. This can be used by the application to implement various behaviors regarding the data it associates to the DOM nodes. This interface defines that handler. <p> See also the Document Object Model (DOM) Level 3 Core Specification . </p><pre><code>public interface UserDataHandler\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/UserDataHandler.html
DOMImplementationLS	A										<section class="prog__container"><p> <pre><code> DOMImplementationLS </code></pre> contains the factory methods for creating Load and Save objects. <p> The expectation is that an instance of the <pre><code> DOMImplementationLS </code></pre> interface can be obtained by using binding-specific casting methods on an instance of the <pre><code> DOMImplementation </code></pre> interface or, if the <pre><code> Document </code></pre> supports the feature <pre><code> "Core" </code></pre> version <pre><code> "3.0" </code></pre> defined in [ DOM Level 3 Core ] , by using the method <pre><code> DOMImplementation.getFeature </code></pre> with parameter values <pre><code> "LS" </code></pre> (or <pre><code> "LS-Async" </code></pre> ) and <pre><code> "3.0" </code></pre> (respectively). <p> See also the Document Object Model (DOM) Level 3 Loadand Save Specification . </p><pre><code>public interface DOMImplementationLS\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/ls/DOMImplementationLS.html
LSException	A										<section class="prog__container"><p> Parser or write operations may throw an <pre><code> LSException </code></pre> if the processing is stopped. The processing can be stopped due to a <pre><code> DOMError </code></pre> with a severity of <pre><code> DOMError.SEVERITY_FATAL_ERROR </code></pre> or a non recovered <pre><code> DOMError.SEVERITY_ERROR </code></pre> , or if <pre><code> DOMErrorHandler.handleError() </code></pre> returned <pre><code> false </code></pre> . <p> <b> Note: </b> As suggested in the definition of the constants in the <pre><code> DOMError </code></pre> interface, a DOM implementation may choose to continue after a fatal error, but the resulting DOM tree is then implementation dependent. <p> See also the Document Object Model (DOM) Level 3 Loadand Save Specification . </p><pre><code>public class LSException\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/ls/LSException.html
LSInput	A										<section class="prog__container"><p> This interface represents an input source for data. <p> This interface allows an application to encapsulate information about an input source in a single object, which may include a public identifier, a system identifier, a byte stream (possibly with a specified encoding), a base URI, and/or a character stream. <p> The exact definitions of a byte stream and a character stream are binding dependent. <p> The application is expected to provide objects that implement this interface whenever such objects are needed. The application can either provide its own objects that implement this interface, or it can use the generic factory method <pre><code> DOMImplementationLS.createLSInput() </code></pre> to create objects that implement this interface. <p> The <pre><code> LSParser </code></pre> will use the <pre><code> LSInput </code></pre> object to determine how to read data. The <pre><code> LSParser </code></pre> will look at the different inputs specified in the <pre><code> LSInput </code></pre> in the following order to know which one to read from, the first one that is not null and not an empty string will be used: <ol> <li> <pre><code> LSInput.characterStream </code></pre> </li> <li> <pre><code> LSInput.byteStream </code></pre> </li> <li> <pre><code> LSInput.stringData </code></pre> </li> <li> <pre><code> LSInput.systemId </code></pre> </li> <li> <pre><code> LSInput.publicId </code></pre> </li> </ol> <p> If all inputs are null, the <pre><code> LSParser </code></pre> will report a <pre><code> DOMError </code></pre> with its <pre><code> DOMError.type </code></pre> set to <pre><code> "no-input-specified" </code></pre> and its <pre><code> DOMError.severity </code></pre> set to <pre><code> DOMError.SEVERITY_FATAL_ERROR </code></pre> . <p> <pre><code> LSInput </code></pre> objects belong to the application. The DOM implementation will never modify them (though it may make copies and modify the copies, if necessary). <p> See also the Document Object Model (DOM) Level 3 Loadand Save Specification . </p><pre><code>public interface LSInput\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/ls/LSInput.html
LSOutput	A										<section class="prog__container"><p> This interface represents an output destination for data. <p> This interface allows an application to encapsulate information about an output destination in a single object, which may include a URI, a byte stream (possibly with a specified encoding), a base URI, and/or a character stream. <p> The exact definitions of a byte stream and a character stream are binding dependent. <p> The application is expected to provide objects that implement this interface whenever such objects are needed. The application can either provide its own objects that implement this interface, or it can use the generic factory method <pre><code> DOMImplementationLS.createLSOutput() </code></pre> to create objects that implement this interface. <p> The <pre><code> LSSerializer </code></pre> will use the <pre><code> LSOutput </code></pre> object to determine where to serialize the output to. The <pre><code> LSSerializer </code></pre> will look at the different outputs specified in the <pre><code> LSOutput </code></pre> in the following order to know which one to output to, the first one that is not null and not an empty string will be used: <ol> <li> <pre><code> LSOutput.characterStream </code></pre> </li> <li> <pre><code> LSOutput.byteStream </code></pre> </li> <li> <pre><code> LSOutput.systemId </code></pre> </li> </ol> <p> <pre><code> LSOutput </code></pre> objects belong to the application. The DOM implementation will never modify them (though it may make copies and modify the copies, if necessary). <p> See also the Document Object Model (DOM) Level 3 Loadand Save Specification . </p><pre><code>public interface LSOutput\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/ls/LSOutput.html
LSParser	A										<section class="prog__container"><p> An interface to an object that is able to build, or augment, a DOM tree from various input sources. <p> <pre><code> LSParser </code></pre> provides an API for parsing XML and building the corresponding DOM document structure. A <pre><code> LSParser </code></pre> instance can be obtained by invoking the <pre><code> DOMImplementationLS.createLSParser() </code></pre> method. <p> As specified in [ DOM Level 3 Core ] , when a document is first made available via the LSParser: <ul> <li> there will never be two adjacent nodes of type NODE_TEXT, and there will never be empty text nodes. </li> <li> it is expected that the <pre><code> value </code></pre> and <pre><code> nodeValue </code></pre> attributes of an <pre><code> Attr </code></pre> node initially return the XML 1.0 normalized value . However, if the parameters " validate-if-schema " and " datatype-normalization " are set to <pre><code> true </code></pre> , depending on the attribute normalization used, the attribute values may differ from the ones obtained by the XML 1.0 attribute normalization. If the parameters " datatype-normalization " is set to <pre><code> false </code></pre> , the XML 1.0 attribute normalization is guaranteed to occur, and if the attributes list does not contain namespace declarations, the <pre><code> attributes </code></pre> attribute on <pre><code> Element </code></pre> node represents the property <b> [attributes] </b> defined in [ XML Information Set ] . </li> </ul> <p> Asynchronous <pre><code> LSParser </code></pre> objects are expected to also implement the <pre><code> events::EventTarget </code></pre> interface so that event listeners can be registered on asynchronous <pre><code> LSParser </code></pre> objects. <p> Events supported by asynchronous <pre><code> LSParser </code></pre> objects are: <dl> <dt> load </dt> <dd> The <pre><code> LSParser </code></pre> finishes to load the document. See also the definition of the <pre><code> LSLoadEvent </code></pre> interface. </dd> <dt> progress </dt> <dd> The <pre><code> LSParser </code></pre> signals progress as data is parsed. This specification does not attempt to define exactly when progress events should be dispatched. That is intentionally left as implementation-dependent. Here is one example of how an application might dispatch progress events: Once the parser starts receiving data, a progress event is dispatched to indicate that the parsing starts. From there on, a progress event is dispatched for every 4096 bytes of data that is received and processed. This is only one example, though, and implementations can choose to dispatch progress events at any time while parsing, or not dispatch them at all. See also the definition of the <pre><code> LSProgressEvent </code></pre> interface. </dd> </dl> <p> <b> Note: </b> All events defined in this specification use the namespace URI <pre><code> "http://www.w3.org/2002/DOMLS" </code></pre> . <p> While parsing an input source, errors are reported to the application through the error handler ( <pre><code> LSParser.domConfig </code></pre> 's " error-handler " parameter). This specification does in no way try to define all possible errors that can occur while parsing XML, or any other markup, but some common error cases are defined. The types ( <pre><code> DOMError.type </code></pre> ) of errors and warnings defined by this specification are: <dl> <dt> <pre><code> "check-character-normalization-failure" [error] </code></pre> </dt> <dd> Raised if the parameter " check-character-normalization " is set to true and a string is encountered that fails normalization checking. </dd> <dt> <pre><code> "doctype-not-allowed" [fatal] </code></pre> </dt> <dd> Raised if the configuration parameter "disallow-doctype" is set to <pre><code> true </code></pre> and a doctype is encountered. </dd> <dt> <pre><code> "no-input-specified" [fatal] </code></pre> </dt> <dd> Raised when loading a document and no input is specified in the <pre><code> LSInput </code></pre> object. </dd> <dt> <pre><code> "pi-base-uri-not-preserved" [warning] </code></pre> </dt> <dd> Raised if a processing instruction is encountered in a location where the base URI of the processing instruction can not be preserved. One example of a case where this warning will be raised is if the configuration parameter " entities " is set to <pre><code> false </code></pre> and the following XML file is parsed: <pre> &lt;!DOCTYPE root [ &lt;!ENTITY e SYSTEM 'subdir/myentity.ent' ]&gt; &lt;root&gt; &amp;e; &lt;/root&gt;</pre> And <pre><code> subdir/myentity.ent </code></pre> contains: <pre>&lt;one&gt; &lt;two/&gt; &lt;/one&gt; &lt;?pi 3.14159?&gt; &lt;more/&gt;</pre> </dd> <dt> <pre><code> "unbound-prefix-in-entity" [warning] </code></pre> </dt> <dd> An implementation dependent warning that may be raised if the configuration parameter " namespaces " is set to <pre><code> true </code></pre> and an unbound namespace prefix is encountered in an entity's replacement text. Raising this warning is not enforced since some existing parsers may not recognize unbound namespace prefixes in the replacement text of entities. </dd> <dt> <pre><code> "unknown-character-denormalization" [fatal] </code></pre> </dt> <dd> Raised if the configuration parameter "ignore-unknown-character-denormalizations" is set to <pre><code> false </code></pre> and a character is encountered for which the processor cannot determine the normalization properties. </dd> <dt> <pre><code> "unsupported-encoding" [fatal] </code></pre> </dt> <dd> Raised if an unsupported encoding is encountered. </dd> <dt> <pre><code> "unsupported-media-type" [fatal] </code></pre> </dt> <dd> Raised if the configuration parameter "supported-media-types-only" is set to <pre><code> true </code></pre> and an unsupported media type is encountered. </dd> </dl> <p> In addition to raising the defined errors and warnings, implementations are expected to raise implementation specific errors and warnings for any other error and warning cases such as IO errors (file not found, permission denied,...), XML well-formedness errors, and so on. <p> See also the Document Object Model (DOM) Level 3 Loadand Save Specification . </p><pre><code>public interface LSParser\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/ls/LSParser.html
LSParserFilter	A										<section class="prog__container"><p> <pre><code> LSParserFilter </code></pre> s provide applications the ability to examine nodes as they are being constructed while parsing. As each node is examined, it may be modified or removed, or the entire parse may be terminated early. <p> At the time any of the filter methods are called by the parser, the owner Document and DOMImplementation objects exist and are accessible. The document element is never passed to the <pre><code> LSParserFilter </code></pre> methods, i.e. it is not possible to filter out the document element. <pre><code> Document </code></pre> , <pre><code> DocumentType </code></pre> , <pre><code> Notation </code></pre> , <pre><code> Entity </code></pre> , and <pre><code> Attr </code></pre> nodes are never passed to the <pre><code> acceptNode </code></pre> method on the filter. The child nodes of an <pre><code> EntityReference </code></pre> node are passed to the filter if the parameter " entities " is set to <pre><code> false </code></pre> . Note that, as described by the parameter " entities ", unexpanded entity reference nodes are never discarded and are always passed to the filter. <p> All validity checking while parsing a document occurs on the source document as it appears on the input stream, not on the DOM document as it is built in memory. With filters, the document in memory may be a subset of the document on the stream, and its validity may have been affected by the filtering. <p> All default attributes must be present on elements when the elements are passed to the filter methods. All other default content must be passed to the filter methods. <p> DOM applications must not raise exceptions in a filter. The effect of throwing exceptions from a filter is DOM implementation dependent. <p> See also the Document Object Model (DOM) Level 3 Loadand Save Specification . </p><pre><code>public interface LSParserFilter\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/ls/LSParserFilter.html
LSResourceResolver	A										<section class="prog__container"><p> <pre><code> LSResourceResolver </code></pre> provides a way for applications to redirect references to external resources. <p> Applications needing to implement custom handling for external resources can implement this interface and register their implementation by setting the "resource-resolver" parameter of <pre><code> DOMConfiguration </code></pre> objects attached to <pre><code> LSParser </code></pre> and <pre><code> LSSerializer </code></pre> . It can also be register on <pre><code> DOMConfiguration </code></pre> objects attached to <pre><code> Document </code></pre> if the "LS" feature is supported. <p> The <pre><code> LSParser </code></pre> will then allow the application to intercept any external entities, including the external DTD subset and external parameter entities, before including them. The top-level document entity is never passed to the <pre><code> resolveResource </code></pre> method. <p> Many DOM applications will not need to implement this interface, but it will be especially useful for applications that build XML documents from databases or other specialized input sources, or for applications that use URNs. <p> <b> Note: </b> <pre><code> LSResourceResolver </code></pre> is based on the SAX2 [ SAX ] <pre><code> EntityResolver </code></pre> interface. <p> See also the Document Object Model (DOM) Level 3 Loadand Save Specification . </p><pre><code>public interface LSResourceResolver\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/ls/LSResourceResolver.html
LSSerializer	A										<section class="prog__container"><p> A <pre><code> LSSerializer </code></pre> provides an API for serializing (writing) a DOM document out into XML. The XML data is written to a string or an output stream. Any changes or fixups made during the serialization affect only the serialized data. The <pre><code> Document </code></pre> object and its children are never altered by the serialization operation. <p> During serialization of XML data, namespace fixup is done as defined in [ DOM Level 3 Core ] , Appendix B. [ DOM Level 2 Core ] allows empty strings as a real namespace URI. If the <pre><code> namespaceURI </code></pre> of a <pre><code> Node </code></pre> is empty string, the serialization will treat them as <pre><code> null </code></pre> , ignoring the prefix if any. <p> <pre><code> LSSerializer </code></pre> accepts any node type for serialization. For nodes of type <pre><code> Document </code></pre> or <pre><code> Entity </code></pre> , well-formed XML will be created when possible (well-formedness is guaranteed if the document or entity comes from a parse operation and is unchanged since it was created). The serialized output for these node types is either as a XML document or an External XML Entity, respectively, and is acceptable input for an XML parser. For all other types of nodes the serialized form is implementation dependent. <p> Within a <pre><code> Document </code></pre> , <pre><code> DocumentFragment </code></pre> , or <pre><code> Entity </code></pre> being serialized, <pre><code> Nodes </code></pre> are processed as follows <ul> <li> <pre><code> Document </code></pre> nodes are written, including the XML declaration (unless the parameter "xml-declaration" is set to <pre><code> false </code></pre> ) and a DTD subset, if one exists in the DOM. Writing a <pre><code> Document </code></pre> node serializes the entire document. </li> <li> <pre><code> Entity </code></pre> nodes, when written directly by <pre><code> LSSerializer.write </code></pre> , outputs the entity expansion but no namespace fixup is done. The resulting output will be valid as an external entity. </li> <li> If the parameter " entities " is set to <pre><code> true </code></pre> , <pre><code> EntityReference </code></pre> nodes are serialized as an entity reference of the form " <pre><code> &amp;entityName; </code></pre> " in the output. Child nodes (the expansion) of the entity reference are ignored. If the parameter " entities " is set to <pre><code> false </code></pre> , only the children of the entity reference are serialized. <pre><code> EntityReference </code></pre> nodes with no children (no corresponding <pre><code> Entity </code></pre> node or the corresponding <pre><code> Entity </code></pre> nodes have no children) are always serialized. </li> <li> <pre><code> CDATAsections </code></pre> containing content characters that cannot be represented in the specified output encoding are handled according to the " split-cdata-sections " parameter. If the parameter is set to <pre><code> true </code></pre> , <pre><code> CDATAsections </code></pre> are split, and the unrepresentable characters are serialized as numeric character references in ordinary content. The exact position and number of splits is not specified. If the parameter is set to <pre><code> false </code></pre> , unrepresentable characters in a <pre><code> CDATAsection </code></pre> are reported as <pre><code> "wf-invalid-character" </code></pre> errors if the parameter " well-formed " is set to <pre><code> true </code></pre> . The error is not recoverable - there is no mechanism for supplying alternative characters and continuing with the serialization. </li> <li> <pre><code> DocumentFragment </code></pre> nodes are serialized by serializing the children of the document fragment in the order they appear in the document fragment. </li> <li> All other node types (Element, Text, etc.) are serialized to their corresponding XML source form. </li> </ul> <p> <b> Note: </b> The serialization of a <pre><code> Node </code></pre> does not always generate a well-formed XML document, i.e. a <pre><code> LSParser </code></pre> might throw fatal errors when parsing the resulting serialization. <p> Within the character data of a document (outside of markup), any characters that cannot be represented directly are replaced with character references. Occurrences of '&lt;' and '&amp;' are replaced by the predefined entities &amp;lt; and &amp;amp;. The other predefined entities (&amp;gt;, &amp;apos;, and &amp;quot;) might not be used, except where needed (e.g. using &amp;gt; in cases such as ']]&gt;'). Any characters that cannot be represented directly in the output character encoding are serialized as numeric character references (and since character encoding standards commonly use hexadecimal representations of characters, using the hexadecimal representation when serializing character references is encouraged). <p> To allow attribute values to contain both single and double quotes, the apostrophe or single-quote character (') may be represented as "&amp;apos;", and the double-quote character (") as "&amp;quot;". New line characters and other characters that cannot be represented directly in attribute values in the output character encoding are serialized as a numeric character reference. <p> Within markup, but outside of attributes, any occurrence of a character that cannot be represented in the output character encoding is reported as a <pre><code> DOMError </code></pre> fatal error. An example would be serializing the element &lt;LaCañada/&gt; with <pre><code> encoding="us-ascii" </code></pre> . This will result with a generation of a <pre><code> DOMError </code></pre> "wf-invalid-character-in-node-name" (as proposed in " well-formed "). <p> When requested by setting the parameter " normalize-characters " on <pre><code> LSSerializer </code></pre> to true, character normalization is performed according to the definition of fully normalized characters included in appendix E of [ XML 1.1 ] on all data to be serialized, both markup and character data. The character normalization process affects only the data as it is being written; it does not alter the DOM's view of the document after serialization has completed. <p> Implementations are required to support the encodings "UTF-8", "UTF-16", "UTF-16BE", and "UTF-16LE" to guarantee that data is serializable in all encodings that are required to be supported by all XML parsers. When the encoding is UTF-8, whether or not a byte order mark is serialized, or if the output is big-endian or little-endian, is implementation dependent. When the encoding is UTF-16, whether or not the output is big-endian or little-endian is implementation dependent, but a Byte Order Mark must be generated for non-character outputs, such as <pre><code> LSOutput.byteStream </code></pre> or <pre><code> LSOutput.systemId </code></pre> . If the Byte Order Mark is not generated, a "byte-order-mark-needed" warning is reported. When the encoding is UTF-16LE or UTF-16BE, the output is big-endian (UTF-16BE) or little-endian (UTF-16LE) and the Byte Order Mark is not be generated. In all cases, the encoding declaration, if generated, will correspond to the encoding used during the serialization (e.g. <pre><code> encoding="UTF-16" </code></pre> will appear if UTF-16 was requested). <p> Namespaces are fixed up during serialization, the serialization process will verify that namespace declarations, namespace prefixes and the namespace URI associated with elements and attributes are consistent. If inconsistencies are found, the serialized form of the document will be altered to remove them. The method used for doing the namespace fixup while serializing a document is the algorithm defined in Appendix B.1, "Namespace normalization", of [ DOM Level 3 Core ] . <p> While serializing a document, the parameter "discard-default-content" controls whether or not non-specified data is serialized. <p> While serializing, errors and warnings are reported to the application through the error handler ( <pre><code> LSSerializer.domConfig </code></pre> 's " error-handler " parameter). This specification does in no way try to define all possible errors and warnings that can occur while serializing a DOM node, but some common error and warning cases are defined. The types ( <pre><code> DOMError.type </code></pre> ) of errors and warnings defined by this specification are: <dl> <dt> <pre><code> "no-output-specified" [fatal] </code></pre> </dt> <dd> Raised when writing to a <pre><code> LSOutput </code></pre> if no output is specified in the <pre><code> LSOutput </code></pre> . </dd> <dt> <pre><code> "unbound-prefix-in-entity-reference" [fatal] </code></pre> </dt> <dd> Raised if the configuration parameter " namespaces " is set to <pre><code> true </code></pre> and an entity whose replacement text contains unbound namespace prefixes is referenced in a location where there are no bindings for the namespace prefixes. </dd> <dt> <pre><code> "unsupported-encoding" [fatal] </code></pre> </dt> <dd> Raised if an unsupported encoding is encountered. </dd> </dl> <p> In addition to raising the defined errors and warnings, implementations are expected to raise implementation specific errors and warnings for any other error and warning cases such as IO errors (file not found, permission denied,...) and so on. <p> See also the Document Object Model (DOM) Level 3 Loadand Save Specification . </p><pre><code>public interface LSSerializer\n</code></pre></section>	https://developer.android.com/reference/org/w3c/dom/ls/LSSerializer.html
org.w3c.dom.ls	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/org/w3c/dom/ls/package-summary.html
AttributeList	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 1. </strong> <br/> This interface has been replaced by the SAX2 <pre><code> Attributes </code></pre> interface, which includes Namespace support. </p><pre><code>public interface AttributeList\n</code></pre></section>	https://developer.android.com/reference/org/xml/sax/AttributeList.html
Attributes	A										<section class="prog__container"><p> Interface for a list of XML attributes. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> This interface allows access to a list of attributes in three different ways: </p><pre><code>public interface Attributes\n</code></pre></section>	https://developer.android.com/reference/org/xml/sax/Attributes.html
ContentHandler	A										<section class="prog__container"><p> Receive notification of the logical content of a document. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> This is the main interface that most SAX applications implement: if the application needs to be informed of basic parsing events, it implements this interface and registers an instance with the SAX parser using the <pre><code> setContentHandler </code></pre> method. The parser uses the instance to report basic document-related events like the start and end of elements and character data. </p><pre><code>public interface ContentHandler\n</code></pre></section>	https://developer.android.com/reference/org/xml/sax/ContentHandler.html
DocumentHandler	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 1. </strong> <br/> This interface has been replaced by the SAX2 <pre><code> ContentHandler </code></pre> interface, which includes Namespace support. </p><pre><code>public interface DocumentHandler\n</code></pre></section>	https://developer.android.com/reference/org/xml/sax/DocumentHandler.html
DTDHandler	A										<section class="prog__container"><p> Receive notification of basic DTD-related events. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> If a SAX application needs information about notations and unparsed entities, then the application implements this interface and registers an instance with the SAX parser using the parser's setDTDHandler method. The parser uses the instance to report notation and unparsed entity declarations to the application. </p><pre><code>public interface DTDHandler\n</code></pre></section>	https://developer.android.com/reference/org/xml/sax/DTDHandler.html
EntityResolver	A										<section class="prog__container"><p> Basic interface for resolving entities. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> If a SAX application needs to implement customized handling for external entities, it must implement this interface and register an instance with the SAX driver using the <pre><code> setEntityResolver </code></pre> method. </p><pre><code>public interface EntityResolver\n</code></pre></section>	https://developer.android.com/reference/org/xml/sax/EntityResolver.html
ErrorHandler	A										<section class="prog__container"><p> Basic interface for SAX error handlers. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> If a SAX application needs to implement customized error handling, it must implement this interface and then register an instance with the XML reader using the <pre><code> setErrorHandler </code></pre> method. The parser will then report all errors and warnings through this interface. </p><pre><code>public interface ErrorHandler\n</code></pre></section>	https://developer.android.com/reference/org/xml/sax/ErrorHandler.html
HandlerBase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 1. </strong> <br/> This class works with the deprecated <pre><code> DocumentHandler </code></pre> interface. It has been replaced by the SAX2 <pre><code> DefaultHandler </code></pre> class. </p><pre><code>public class HandlerBase\nextends Object</code></pre></section>	https://developer.android.com/reference/org/xml/sax/HandlerBase.html
InputSource	A										<section class="prog__container"><p> A single input source for an XML entity. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> This class allows a SAX application to encapsulate information about an input source in a single object, which may include a public identifier, a system identifier, a byte stream (possibly with a specified encoding), and/or a character stream. </p><pre><code>public class InputSource\nextends Object</code></pre></section>	https://developer.android.com/reference/org/xml/sax/InputSource.html
Locator	A										<section class="prog__container"><p> Interface for associating a SAX event with a document location. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> If a SAX parser provides location information to the SAX application, it does so by implementing this interface and then passing an instance to the application using the content handler's <pre><code> setDocumentLocator </code></pre> method. The application can use the object to obtain the location of any other SAX event in the XML source document. </p><pre><code>public interface Locator\n</code></pre></section>	https://developer.android.com/reference/org/xml/sax/Locator.html
org.xml.sax	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/org/xml/sax/package-summary.html
Parser	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 1. </strong> <br/> This interface has been replaced by the SAX2 <pre><code> XMLReader </code></pre> interface, which includes Namespace support. </p><pre><code>public interface Parser\n</code></pre></section>	https://developer.android.com/reference/org/xml/sax/Parser.html
SAXException	A										<section class="prog__container"><p> Encapsulate a general SAX error or warning. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> This class can contain basic error or warning information from either the XML parser or the application: a parser writer or application writer can subclass it to provide additional functionality. SAX handlers may throw this exception or any exception subclassed from it. </p><pre><code>public class SAXException\n</code></pre></section>	https://developer.android.com/reference/org/xml/sax/SAXException.html
SAXNotRecognizedException	A										<section class="prog__container"><p> Exception class for an unrecognized identifier. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> An XMLReader will throw this exception when it finds an unrecognized feature or property identifier; SAX applications and extensions may use this class for other, similar purposes. </p><pre><code>public class SAXNotRecognizedException\n</code></pre></section>	https://developer.android.com/reference/org/xml/sax/SAXNotRecognizedException.html
SAXNotSupportedException	A										<section class="prog__container"><p> Exception class for an unsupported operation. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> An XMLReader will throw this exception when it recognizes a feature or property identifier, but cannot perform the requested operation (setting a state or value). Other SAX2 applications and extensions may use this class for similar purposes. </p><pre><code>public class SAXNotSupportedException\n</code></pre></section>	https://developer.android.com/reference/org/xml/sax/SAXNotSupportedException.html
SAXParseException	A										<section class="prog__container"><p> Encapsulate an XML parse error or warning. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> This exception may include information for locating the error in the original XML document, as if it came from a <pre><code> Locator </code></pre> object. Note that although the application will receive a SAXParseException as the argument to the handlers in the <pre><code> ErrorHandler </code></pre> interface, the application is not actually required to throw the exception; instead, it can simply read the information in it and take a different action. </p><pre><code>public class SAXParseException\n</code></pre></section>	https://developer.android.com/reference/org/xml/sax/SAXParseException.html
XMLFilter	A										<section class="prog__container"><p> Interface for an XML filter. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> An XML filter is like an XML reader, except that it obtains its events from another XML reader rather than a primary source like an XML document or database. Filters can modify a stream of events as they pass on to the final application. </p><pre><code>public interface XMLFilter\nimplements XMLReader</code></pre></section>	https://developer.android.com/reference/org/xml/sax/XMLFilter.html
XMLReader	A										<section class="prog__container"><p> Interface for reading an XML document using callbacks. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> <strong> Note: </strong> despite its name, this interface does <em> not </em> extend the standard Java <pre><code> Reader </code></pre> interface, because reading XML is a fundamentally different activity than reading character data. </p><pre><code>public interface XMLReader\n</code></pre></section>	https://developer.android.com/reference/org/xml/sax/XMLReader.html
Attributes2	A										<section class="prog__container"><p> SAX2 extension to augment the per-attribute information provided though <pre><code> Attributes </code></pre> . If an implementation supports this extension, the attributes provided in <pre><code> ContentHandler.startElement() </code></pre> will implement this interface, and the <em> http://xml.org/sax/features/use-attributes2 </em> feature flag will have the value <em> true </em> . <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> </blockquote> <p> XMLReader implementations are not required to support this information, and it is not part of core-only SAX2 distributions. </p><pre><code>public interface Attributes2\nimplements Attributes</code></pre></section>	https://developer.android.com/reference/org/xml/sax/ext/Attributes2.html
Attributes2Impl	A										<section class="prog__container"><p> SAX2 extension helper for additional Attributes information, implementing the <pre><code> Attributes2 </code></pre> interface. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> </blockquote> <p> This is not part of core-only SAX2 distributions. </p><pre><code>public class Attributes2Impl\n</code></pre></section>	https://developer.android.com/reference/org/xml/sax/ext/Attributes2Impl.html
DeclHandler	A										<section class="prog__container"><p> SAX2 extension handler for DTD declaration events. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> This is an optional extension handler for SAX2 to provide more complete information about DTD declarations in an XML document. XML readers are not required to recognize this handler, and it is not part of core-only SAX2 distributions. </p><pre><code>public interface DeclHandler\n</code></pre></section>	https://developer.android.com/reference/org/xml/sax/ext/DeclHandler.html
DefaultHandler2	A										<section class="prog__container"><p> This class extends the SAX2 base handler class to support the SAX2 <pre><code> LexicalHandler </code></pre> , <pre><code> DeclHandler </code></pre> , and <pre><code> EntityResolver2 </code></pre> extensions. Except for overriding the original SAX1 <pre><code> resolveEntity() </code></pre> method the added handler methods just return. Subclassers may override everything on a method-by-method basis. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> </blockquote> <p> <em> Note: </em> this class might yet learn that the <em> ContentHandler.setDocumentLocator() </em> call might be passed a <pre><code> Locator2 </code></pre> object, and that the <em> ContentHandler.startElement() </em> call might be passed a <pre><code> Attributes2 </code></pre> object. </p><pre><code>public class DefaultHandler2\n</code></pre></section>	https://developer.android.com/reference/org/xml/sax/ext/DefaultHandler2.html
EntityResolver2	A										<section class="prog__container"><p> Extended interface for mapping external entity references to input sources, or providing a missing external subset. The <pre><code> XMLReader.setEntityResolver() </code></pre> method is used to provide implementations of this interface to parsers. When a parser uses the methods in this interface, the <pre><code> EntityResolver2.resolveEntity() </code></pre> method (in this interface) is used <em> instead of </em> the older (SAX 1.0) <pre><code> EntityResolver.resolveEntity() </code></pre> method. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> </blockquote> <p> If a SAX application requires the customized handling which this interface defines for external entities, it must ensure that it uses an XMLReader with the <em> http://xml.org/sax/features/use-entity-resolver2 </em> feature flag set to <em> true </em> (which is its default value when the feature is recognized). If that flag is unrecognized, or its value is false, or the resolver does not implement this interface, then only the <pre><code> EntityResolver </code></pre> method will be used. </p><pre><code>public interface EntityResolver2\nimplements EntityResolver</code></pre></section>	https://developer.android.com/reference/org/xml/sax/ext/EntityResolver2.html
LexicalHandler	A										<section class="prog__container"><p> SAX2 extension handler for lexical events. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> This is an optional extension handler for SAX2 to provide lexical information about an XML document, such as comments and CDATA section boundaries. XML readers are not required to recognize this handler, and it is not part of core-only SAX2 distributions. </p><pre><code>public interface LexicalHandler\n</code></pre></section>	https://developer.android.com/reference/org/xml/sax/ext/LexicalHandler.html
Locator2	A										<section class="prog__container"><p> SAX2 extension to augment the entity information provided though a <pre><code> Locator </code></pre> . If an implementation supports this extension, the Locator provided in <pre><code> ContentHandler.setDocumentLocator() </code></pre> will implement this interface, and the <em> http://xml.org/sax/features/use-locator2 </em> feature flag will have the value <em> true </em> . <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> </blockquote> <p> XMLReader implementations are not required to support this information, and it is not part of core-only SAX2 distributions. </p><pre><code>public interface Locator2\nimplements Locator</code></pre></section>	https://developer.android.com/reference/org/xml/sax/ext/Locator2.html
Locator2Impl	A										<section class="prog__container"><p> SAX2 extension helper for holding additional Entity information, implementing the <pre><code> Locator2 </code></pre> interface. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> </blockquote> <p> This is not part of core-only SAX2 distributions. </p><pre><code>public class Locator2Impl\n</code></pre></section>	https://developer.android.com/reference/org/xml/sax/ext/Locator2Impl.html
org.xml.sax.ext	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/org/xml/sax/ext/package-summary.html
AttributeListImpl	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 1. </strong> <br/> This class implements a deprecated interface, <pre><code> AttributeList </code></pre> ; that interface has been replaced by <pre><code> Attributes </code></pre> , which is implemented in the <pre><code> AttributesImpl </code></pre> helper class. </p><pre><code>public class AttributeListImpl\nextends Object</code></pre></section>	https://developer.android.com/reference/org/xml/sax/helpers/AttributeListImpl.html
AttributesImpl	A										<section class="prog__container"><p> Default implementation of the Attributes interface. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> This class provides a default implementation of the SAX2 <pre><code> Attributes </code></pre> interface, with the addition of manipulators so that the list can be modified or reused. </p><pre><code>public class AttributesImpl\nextends Object</code></pre></section>	https://developer.android.com/reference/org/xml/sax/helpers/AttributesImpl.html
DefaultHandler	A										<section class="prog__container"><p> Default base class for SAX2 event handlers. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> This class is available as a convenience base class for SAX2 applications: it provides default implementations for all of the callbacks in the four core SAX2 handler classes: </p><pre><code>public class DefaultHandler\nextends Object</code></pre></section>	https://developer.android.com/reference/org/xml/sax/helpers/DefaultHandler.html
LocatorImpl	A										<section class="prog__container"><p> Provide an optional convenience implementation of Locator. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> This class is available mainly for application writers, who can use it to make a persistent snapshot of a locator at any point during a document parse: </p><pre><code>public class LocatorImpl\nextends Object</code></pre></section>	https://developer.android.com/reference/org/xml/sax/helpers/LocatorImpl.html
NamespaceSupport	A										<section class="prog__container"><p> Encapsulate Namespace logic for use by applications using SAX, or internally by SAX drivers. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> This class encapsulates the logic of Namespace processing: it tracks the declarations currently in force for each context and automatically processes qualified XML names into their Namespace parts; it can also be used in reverse for generating XML qnames from Namespaces. </p><pre><code>public class NamespaceSupport\nextends Object</code></pre></section>	https://developer.android.com/reference/org/xml/sax/helpers/NamespaceSupport.html
org.xml.sax.helpers	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/org/xml/sax/helpers/package-summary.html
ParserAdapter	A										<section class="prog__container"><p> Adapt a SAX1 Parser as a SAX2 XMLReader. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> This class wraps a SAX1 <pre><code> Parser </code></pre> and makes it act as a SAX2 <pre><code> XMLReader </code></pre> , with feature, property, and Namespace support. Note that it is not possible to report <pre><code> skippedEntity </code></pre> events, since SAX1 does not make that information available. </p><pre><code>public class ParserAdapter\nextends Object</code></pre></section>	https://developer.android.com/reference/org/xml/sax/helpers/ParserAdapter.html
ParserFactory	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 1. </strong> <br/> This class works with the deprecated <pre><code> Parser </code></pre> interface. </p><pre><code>public class ParserFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/org/xml/sax/helpers/ParserFactory.html
XMLFilterImpl	A										<section class="prog__container"><p> Base class for deriving an XML filter. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> This class is designed to sit between an <pre><code> XMLReader </code></pre> and the client application's event handlers. By default, it does nothing but pass requests up to the reader and events on to the handlers unmodified, but subclasses can override specific methods to modify the event stream or the configuration requests as they pass through. </p><pre><code>public class XMLFilterImpl\nextends Object</code></pre></section>	https://developer.android.com/reference/org/xml/sax/helpers/XMLFilterImpl.html
XMLReaderAdapter	A										<section class="prog__container"><p> Adapt a SAX2 XMLReader as a SAX1 Parser. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> This class wraps a SAX2 <pre><code> XMLReader </code></pre> and makes it act as a SAX1 <pre><code> Parser </code></pre> . The XMLReader must support a true value for the http://xml.org/sax/features/namespace-prefixes property or parsing will fail with a <pre><code> SAXException </code></pre> ; if the XMLReader supports a false value for the http://xml.org/sax/features/namespaces property, that will also be used to improve efficiency. </p><pre><code>public class XMLReaderAdapter\nextends Object</code></pre></section>	https://developer.android.com/reference/org/xml/sax/helpers/XMLReaderAdapter.html
XMLReaderFactory	A										<section class="prog__container"><p> Factory for creating an XML reader. <blockquote> <em> This module, both source code and documentation, is in the Public Domain, and comes with <strong> NO WARRANTY </strong> . </em> See http://www.saxproject.org for further information. </blockquote> <p> This class contains static methods for creating an XML reader from an explicit class name, or based on runtime defaults: </p><pre><code>public final class XMLReaderFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/org/xml/sax/helpers/XMLReaderFactory.html
org.xmlpull.v1	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/org/xmlpull/v1/package-summary.html
XmlPullParser	A										<section class="prog__container"><p> XML Pull Parser is an interface that defines parsing functionality provided in XMLPULL V1 API (visit this website to learn more about API and its implementations). <p> There are following different kinds of parser depending on which features are set: <ul> <li> <b> non-validating </b> parser as defined in XML 1.0 spec when FEATURE_PROCESS_DOCDECL is set to true <li> <b> validating parser </b> as defined in XML 1.0 spec when FEATURE_VALIDATION is true (and that implies that FEATURE_PROCESS_DOCDECL is true) <li> when FEATURE_PROCESS_DOCDECL is false (this is default and if different value is required necessary must be changed before parsing is started) then parser behaves like XML 1.0 compliant non-validating parser under condition that <em> no DOCDECL is present </em> in XML documents (internal entites can still be defined with defineEntityReplacementText()). This mode of operation is intended <b> for operation in constrained environments </b> such as J2ME. </li> </li> </li> </ul> <p> There are two key methods: next() and nextToken(). While next() provides access to high level parsing events, nextToken() allows access to lower level tokens. <p> The current event state of the parser can be determined by calling the getEventType() method. Initially, the parser is in the START_DOCUMENT state. <p> The method next() advances the parser to the next event. The int value returned from next determines the current parser state and is identical to the value returned from following calls to getEventType (). <p> Th following event types are seen by next() <dl> <dt> START_TAG <dd> An XML start tag was read. <dt> TEXT <dd> Text content was read; the text content can be retrieved using the getText() method. (when in validating mode next() will not report ignorable whitespace, use nextToken() instead) <dt> END_TAG <dd> An end tag was read <dt> END_DOCUMENT <dd> No more events are available </dd> </dt> </dd> </dt> </dd> </dt> </dd> </dt> </dl> <p> after first next() or nextToken() (or any other next*() method) is called user application can obtain XML version, standalone and encoding from XML declaration in following ways: <ul> <li> <b> version </b> : getProperty(" http://xmlpull.org/v1/doc/properties.html#xmldecl-version ") returns String ("1.0") or null if XMLDecl was not read or if property is not supported <li> <b> standalone </b> : getProperty(" http://xmlpull.org/v1/doc/properties.html#xmldecl-standalone ") returns Boolean: null if there was no standalone declaration or if property is not supported otherwise returns Boolean(true) if standalone="yes" and Boolean(false) when standalone="no" <li> <b> encoding </b> : obtained from getInputEncoding() null if stream had unknown encoding (not set in setInputStream) and it was not declared in XMLDecl </li> </li> </li> </ul> A minimal example for using this API may look as follows: <pre> import java.io.IOException; import java.io.StringReader; import org.xmlpull.v1.XmlPullParser; import org.xmlpull.v1.XmlPullParserException; import org.xmlpull.v1.XmlPullParserFactory; public class SimpleXmlPullApp { public static void main (String args[]) throws XmlPullParserException, IOException { XmlPullParserFactory factory = XmlPullParserFactory.newInstance(); factory.setNamespaceAware(true); XmlPullParser xpp = factory.newPullParser(); xpp.setInput( new StringReader ( "&lt;foo&gt;Hello World!&lt;/foo&gt;" ) ); int eventType = xpp.getEventType(); while (eventType != XmlPullParser.END_DOCUMENT) { if(eventType == XmlPullParser.START_DOCUMENT) { System.out.println("Start document"); } else if(eventType == XmlPullParser.START_TAG) { System.out.println("Start tag "+xpp.getName()); } else if(eventType == XmlPullParser.END_TAG) { System.out.println("End tag "+xpp.getName()); } else if(eventType == XmlPullParser.TEXT) { System.out.println("Text "+xpp.getText()); } eventType = xpp.next(); } System.out.println("End document"); } } </pre> <p> The above example will generate the following output: <pre> Start document Start tag foo Text Hello World! End tag foo End document </pre> <p> For more details on API usage, please refer to the quick Introduction available at http://www.xmlpull.org </p><pre><code>public interface XmlPullParser\n</code></pre></section>	https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html
XmlPullParserException	A										<section class="prog__container"><p> This exception is thrown to signal XML Pull Parser related faults.</p><pre><code>public class XmlPullParserException\n</code></pre></section>	https://developer.android.com/reference/org/xmlpull/v1/XmlPullParserException.html
XmlPullParserFactory	A										<section class="prog__container"><p> This class is used to create implementations of XML Pull Parser defined in XMPULL V1 API.</p><pre><code>public class XmlPullParserFactory\nextends Object</code></pre></section>	https://developer.android.com/reference/org/xmlpull/v1/XmlPullParserFactory.html
XmlSerializer	A										<section class="prog__container"><p> Define an interface to serialization of XML Infoset. This interface abstracts away if serialized XML is XML 1.0 compatible text or other formats of XML 1.0 serializations (such as binary XML for example with WBXML). <p> <b> PLEASE NOTE: </b> This interface will be part of XmlPull 1.2 API. It is included as basis for discussion. It may change in any way. <p> Exceptions that may be thrown are: IOException or runtime exception (more runtime exceptions can be thrown but are not declared and as such have no semantics defined for this interface): <ul> <li> <em> IllegalArgumentException </em> - for almost all methods to signal that argument is illegal <li> <em> IllegalStateException </em> - to signal that call has good arguments but is not expected here (violation of contract) and for features/properties when requesting setting unimplemented feature/property (UnsupportedOperationException would be better but it is not in MIDP) </li> </li> </ul> <p> <b> NOTE: </b> writing CDSECT, ENTITY_REF, IGNORABLE_WHITESPACE, PROCESSING_INSTRUCTION, COMMENT, and DOCDECL in some implementations may not be supported (for example when serializing to WBXML). In such case IllegalStateException will be thrown and it is recommended to use an optional feature to signal that implementation is not supporting this kind of output. </p><pre><code>public interface XmlSerializer\n</code></pre></section>	https://developer.android.com/reference/org/xmlpull/v1/XmlSerializer.html
Driver	A										<section class="prog__container"><p> SAX2 Driver that pulls events from XmlPullParser and converts them into SAX2 callbacks.</p><pre><code>public class Driver\nextends Object</code></pre></section>	https://developer.android.com/reference/org/xmlpull/v1/sax2/Driver.html
org.xmlpull.v1.sax2	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/org/xmlpull/v1/sax2/package-summary.html
