Manifest	A										<section class="prog__container"><p></p>\n<pre><code>public final class Manifest\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/Manifest.html
Manifest.permission	A										<section class="prog__container"><p> Allows read/write access to the "properties" table in the checkin database, to change values that get uploaded.</p>\n<pre><code>public static final class Manifest.permission\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/Manifest.permission.html
Manifest.permission_group	A										<section class="prog__container"><p> Used for runtime permissions related to user's calendar.</p>\n<pre><code>public static final class Manifest.permission_group\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/Manifest.permission_group.html
android	A										<section class="prog__container">Contains resource classes used by applications included in the platform and defines applicationpermissions for system features.</section>	https://developer.android.com/reference/android/package-summary.html
R.anim	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.anim\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.anim.html
R.animator	A										<section class="prog__container"><p> A simple fade-in animation.</p>\n<pre><code>public static final class R.animator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.animator.html
R.array	A										<section class="prog__container"><p> Email address types from android.provider.Contacts.</p>\n<pre><code>public static final class R.array\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.array.html
R.attr	A										<section class="prog__container"><p> Default AbsListView style.</p>\n<pre><code>public static final class R.attr\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.attr.html
R.bool	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public static final class R.bool\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.bool.html
R.color	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.color\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.color.html
R.dimen	A										<section class="prog__container"><p> The standard size (both width and height) of an application icon that will be displayed in the app launcher and elsewhere.</p>\n<pre><code>public static final class R.dimen\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.dimen.html
R.drawable	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.drawable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.drawable.html
R.fraction	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public static final class R.fraction\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.fraction.html
R	A										<section class="prog__container"><p></p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.html
R.id	A										<section class="prog__container"><p> Accessibility action identifier for <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_CONTEXT_CLICK"> ACTION_CONTEXT_CLICK </a> </code></pre> .</p>\n<pre><code>public static final class R.id\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.id.html
R.integer	A										<section class="prog__container"><p> The duration (in milliseconds) of a long animation.</p>\n<pre><code>public static final class R.integer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.integer.html
R.interpolator	A										<section class="prog__container"><p> Acceleration curve matching a cubic ease out function.</p>\n<pre><code>public static final class R.interpolator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.interpolator.html
R.layout	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.layout\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.layout.html
R.menu	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public static final class R.menu\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.menu.html
R.mipmap	A										<section class="prog__container"><p> Default icon for applications that don't specify an icon.</p>\n<pre><code>public static final class R.mipmap\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.mipmap.html
R.plurals	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public static final class R.plurals\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.plurals.html
R.raw	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public static final class R.raw\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.raw.html
R.string	A										<section class="prog__container"><p> Button to close error alert when a video cannot be played</p>\n<pre><code>public static final class R.string\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.string.html
R.style	A										<section class="prog__container"><p> Base style for animations.</p>\n<pre><code>public static final class R.style\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.style.html
R.styleable	A										<section class="prog__container"><p> <p> Indicates that this list will always be drawn on top of solid, single-color opaque background. </p>\n<pre><code>public static final class R.styleable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.styleable.html
R.transition	A										<section class="prog__container"><p> A transition that moves views in or out of the scene to or from the edges when a view visibility changes.</p>\n<pre><code>public static final class R.transition\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.transition.html
R.xml	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public static final class R.xml\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/R.xml.html
AccessibilityService.GestureResultCallback	A										<section class="prog__container"><p> Class used to report status of dispatched gestures</p>\n<pre><code>public static abstract class AccessibilityService.GestureResultCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.GestureResultCallback.html
AccessibilityService	A										<section class="prog__container"><p> Accessibility services should only be used to assist users with disabilities in using Android devices and apps. They run in the background and receive callbacks by the system when <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html"> AccessibilityEvent </a> </code></pre> s are fired. Such events denote some state transition in the user interface, for example, the focus has changed, a button has been clicked, etc. Such a service can optionally request the capability for querying the content of the active window. Development of an accessibility service requires extending this class and implementing its abstract methods. </p>\n<pre><code>public abstract class AccessibilityService\n</code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html
AccessibilityService.MagnificationController	A										<section class="prog__container"><p> Used to control and query the state of display magnification.</p>\n<pre><code>public static final class AccessibilityService.MagnificationController\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html
AccessibilityService.MagnificationController.OnMagnificationChangedListener	A										<section class="prog__container"><p> Listener for changes in the state of magnification.</p>\n<pre><code>public static interface AccessibilityService.MagnificationController.OnMagnificationChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.OnMagnificationChangedListener.html
AccessibilityService.SoftKeyboardController	A										<section class="prog__container"><p> Used to control and query the soft keyboard show mode.</p>\n<pre><code>public static final class AccessibilityService.SoftKeyboardController\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.SoftKeyboardController.html
AccessibilityService.SoftKeyboardController.OnShowModeChangedListener	A										<section class="prog__container"><p> Listener for changes in the soft keyboard show mode.</p>\n<pre><code>public static interface AccessibilityService.SoftKeyboardController.OnShowModeChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.SoftKeyboardController.OnShowModeChangedListener.html
AccessibilityServiceInfo	A										<section class="prog__container"><p> This class describes an <pre><code> <a href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html"> AccessibilityService </a> </code></pre> . The system notifies an <pre><code> <a href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html"> AccessibilityService </a> </code></pre> for <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html"> AccessibilityEvent </a> </code></pre> s according to the information encapsulated in this class. </p>\n<pre><code>public class AccessibilityServiceInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html
GestureDescription.Builder	A										<section class="prog__container"><p> Builder for a <pre><code> GestureDescription </code></pre></p>\n<pre><code>public static class GestureDescription.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/GestureDescription.Builder.html
GestureDescription	A										<section class="prog__container"><p> Accessibility services with the <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#AccessibilityService_canPerformGestures"> AccessibilityService_canPerformGestures </a> </code></pre> property can dispatch gestures. This class describes those gestures. Gestures are made up of one or more strokes. Gestures are immutable once built. <p> Spatial dimensions throughout are in screen pixels. Time is measured in milliseconds. </p>\n<pre><code>public final class GestureDescription\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/GestureDescription.html
GestureDescription.StrokeDescription	A										<section class="prog__container"><p> Immutable description of stroke that can be part of a gesture.</p>\n<pre><code>public static class GestureDescription.StrokeDescription\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/accessibilityservice/GestureDescription.StrokeDescription.html
android.accessibilityservice	A										<section class="prog__container">The classes in this package are used for development of accessibility service that provide alternative or augmented feedback to the user.</section>	https://developer.android.com/reference/android/accessibilityservice/package-summary.html
AbstractAccountAuthenticator	A										<section class="prog__container"><p> Abstract base class for creating AccountAuthenticators. In order to be an authenticator one must extend this class, provider implementations for the abstract methods and write a service that returns the result of <pre><code> <a href="https://developer.android.com/reference/android/accounts/AbstractAccountAuthenticator.html#getIBinder()"> getIBinder() </a> </code></pre> in the service's <pre><code> <a href="https://developer.android.com/reference/android/app/Service.html#onBind(android.content.Intent)"> onBind(android.content.Intent) </a> </code></pre> when invoked with an intent with action <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManager.html#ACTION_AUTHENTICATOR_INTENT"> ACTION_AUTHENTICATOR_INTENT </a> </code></pre> . This service must specify the following intent filter and metadata tags in its AndroidManifest.xml file <pre> &lt;intent-filter&gt; &lt;action android:name="android.accounts.AccountAuthenticator" /&gt; &lt;/intent-filter&gt; &lt;meta-data android:name="android.accounts.AccountAuthenticator" android:resource="@xml/authenticator" /&gt; </pre> The <pre><code> android:resource </code></pre> attribute must point to a resource that looks like: <pre> &lt;account-authenticator xmlns:android="http://schemas.android.com/apk/res/android" android:accountType="typeOfAuthenticator" android:icon="@drawable/icon" android:smallIcon="@drawable/miniIcon" android:label="@string/label" android:accountPreferences="@xml/account_preferences" /&gt; </pre> Replace the icons and labels with your own resources. The <pre><code> android:accountType </code></pre> attribute must be a string that uniquely identifies your authenticator and will be the same string that user will use when making calls on the <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManager.html"> AccountManager </a> </code></pre> and it also corresponds to <pre><code> <a href="https://developer.android.com/reference/android/accounts/Account.html#type"> type </a> </code></pre> for your accounts. One user of the android:icon is the "Account &amp; Sync" settings page and one user of the android:smallIcon is the Contact Application's tab panels. <p> The preferences attribute points to a PreferenceScreen xml hierarchy that contains a list of PreferenceScreens that can be invoked to manage the authenticator. An example is: <pre> &lt;PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"&gt; &lt;PreferenceCategory android:title="@string/title_fmt" /&gt; &lt;PreferenceScreen android:key="key1" android:title="@string/key1_action" android:summary="@string/key1_summary"&gt; &lt;intent android:action="key1.ACTION" android:targetPackage="key1.package" android:targetClass="key1.class" /&gt; &lt;/PreferenceScreen&gt; &lt;/PreferenceScreen&gt; </pre> <p> The standard pattern for implementing any of the abstract methods is the following: <ul> <li> If the supplied arguments are enough for the authenticator to fully satisfy the request then it will do so and return a <pre><code> <a href="https://developer.android.com/reference/android/os/Bundle.html"> Bundle </a> </code></pre> that contains the results. <li> If the authenticator needs information from the user to satisfy the request then it will create an <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html"> Intent </a> </code></pre> to an activity that will prompt the user for the information and then carry out the request. This intent must be returned in a Bundle as key <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_INTENT"> KEY_INTENT </a> </code></pre> . <p> The activity needs to return the final result when it is complete so the Intent should contain the <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountAuthenticatorResponse.html"> AccountAuthenticatorResponse </a> </code></pre> as <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_ACCOUNT_MANAGER_RESPONSE"> KEY_ACCOUNT_MANAGER_RESPONSE </a> </code></pre> . The activity must then call <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountAuthenticatorResponse.html#onResult(android.os.Bundle)"> onResult(Bundle) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountAuthenticatorResponse.html#onError(int, java.lang.String)"> onError(int, String) </a> </code></pre> when it is complete. <li> If the authenticator cannot synchronously process the request and return a result then it may choose to return null and then use the AccountManagerResponse to send the result when it has completed the request. </li> </p>\n<pre><code>public abstract class AbstractAccountAuthenticator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/accounts/AbstractAccountAuthenticator.html
Account	A										<section class="prog__container"><p> Value type that represents an Account in the <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManager.html"> AccountManager </a> </code></pre> . This object is <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html"> Parcelable </a> </code></pre> and also overrides <pre><code> <a href="https://developer.android.com/reference/android/accounts/Account.html#equals(java.lang.Object)"> equals(Object) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/accounts/Account.html#hashCode()"> hashCode() </a> </code></pre> , making it suitable for use as the key of a <pre><code> <a href="https://developer.android.com/reference/java/util/Map.html"> Map </a> </code></pre></p>\n<pre><code>public class Account\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/accounts/Account.html
AccountAuthenticatorActivity	A										<section class="prog__container"><p> Base class for implementing an Activity that is used to help implement an AbstractAccountAuthenticator. If the AbstractAccountAuthenticator needs to use an activity to handle the request then it can have the activity extend AccountAuthenticatorActivity. The AbstractAccountAuthenticator passes in the response to the intent using the following: <pre> intent.putExtra(<pre><code><a href="https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_ACCOUNT_AUTHENTICATOR_RESPONSE">KEY_ACCOUNT_AUTHENTICATOR_RESPONSE</a></code></pre>, response); </pre> The activity then sets the result that is to be handed to the response via <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountAuthenticatorActivity.html#setAccountAuthenticatorResult(android.os.Bundle)"> setAccountAuthenticatorResult(android.os.Bundle) </a> </code></pre> . This result will be sent as the result of the request when the activity finishes. If this is never set or if it is set to null then error <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManager.html#ERROR_CODE_CANCELED"> ERROR_CODE_CANCELED </a> </code></pre> will be called on the response.</p>\n<pre><code>public class AccountAuthenticatorActivity\n</code></pre></section>	https://developer.android.com/reference/android/accounts/AccountAuthenticatorActivity.html
AccountAuthenticatorResponse	A										<section class="prog__container"><p> Object used to communicate responses back to the AccountManager</p>\n<pre><code>public class AccountAuthenticatorResponse\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/accounts/AccountAuthenticatorResponse.html
AccountManager	A										<section class="prog__container"><p> This class provides access to a centralized registry of the user's online accounts. The user enters credentials (username and password) once per account, granting applications access to online resources with "one-click" approval. <p> Different online services have different ways of handling accounts and authentication, so the account manager uses pluggable <em> authenticator </em> modules for different <em> account types </em> . Authenticators (which may be written by third parties) handle the actual details of validating account credentials and storing account information. For example, Google, Facebook, and Microsoft Exchange each have their own authenticator. <p> Many servers support some notion of an <em> authentication token </em> , which can be used to authenticate a request to the server without sending the user's actual password. (Auth tokens are normally created with a separate request which does include the user's credentials.) AccountManager can generate auth tokens for applications, so the application doesn't need to handle passwords directly. Auth tokens are normally reusable and cached by AccountManager, but must be refreshed periodically. It's the responsibility of applications to <em> invalidate </em> auth tokens when they stop working so the AccountManager knows it needs to regenerate them. <p> Applications accessing a server normally go through these steps: <ul> <li> Get an instance of AccountManager using <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManager.html#get(android.content.Context)"> get(Context) </a> </code></pre> . <li> List the available accounts using <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManager.html#getAccountsByType(java.lang.String)"> getAccountsByType(String) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManager.html#getAccountsByTypeAndFeatures(java.lang.String, java.lang.String[], android.accounts.AccountManagerCallback&lt;android.accounts.Account[]&gt;, android.os.Handler)"> getAccountsByTypeAndFeatures(String, String[], AccountManagerCallback <account[]> , Handler) </account[]> </a> </code></pre> . Normally applications will only be interested in accounts with one particular <em> type </em> , which identifies the authenticator. Account <em> features </em> are used to identify particular account subtypes and capabilities. Both the account type and features are authenticator-specific strings, and must be known by the application in coordination with its preferred authenticators. <li> Select one or more of the available accounts, possibly by asking the user for their preference. If no suitable accounts are available, <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManager.html#addAccount(java.lang.String, java.lang.String, java.lang.String[], android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback&lt;android.os.Bundle&gt;, android.os.Handler)"> addAccount(String, String, String[], Bundle, Activity, AccountManagerCallback <bundle> , Handler) </bundle> </a> </code></pre> may be called to prompt the user to create an account of the appropriate type. <li> <b> Important: </b> If the application is using a previously remembered account selection, it must make sure the account is still in the list of accounts returned by <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManager.html#getAccountsByType(java.lang.String)"> getAccountsByType(String) </a> </code></pre> . Requesting an auth token for an account no longer on the device results in an undefined failure. <li> Request an auth token for the selected account(s) using one of the <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManager.html#getAuthToken(android.accounts.Account, java.lang.String, android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback&lt;android.os.Bundle&gt;, android.os.Handler)"> getAuthToken(Account, String, Bundle, Activity, AccountManagerCallback <bundle> , Handler) </bundle> </a> </code></pre> methods or related helpers. Refer to the description of each method for exact usage and error handling details. <li> Make the request using the auth token. The form of the auth token, the format of the request, and the protocol used are all specific to the service you are accessing. The application may use whatever network and protocol libraries are useful. <li> <b> Important: </b> If the request fails with an authentication error, it could be that a cached auth token is stale and no longer honored by the server. The application must call <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManager.html#invalidateAuthToken(java.lang.String, java.lang.String)"> invalidateAuthToken(String, String) </a> </code></pre> to remove the token from the cache, otherwise requests will continue failing! After invalidating the auth token, immediately go back to the "Request an auth token" step above. If the process fails the second time, then it can be treated as a "genuine" authentication failure and the user notified or other appropriate actions taken. </li> </li> </li> </li> </li> </li> </li> </ul> <p> Some AccountManager methods may need to interact with the user to prompt for credentials, present options, or ask the user to add an account. The caller may choose whether to allow AccountManager to directly launch the necessary user interface and wait for the user, or to return an Intent which the caller may use to launch the interface, or (in some cases) to install a notification which the user can select at any time to launch the interface. To have AccountManager launch the interface directly, the caller must supply the current foreground <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> context. <p> Many AccountManager methods take <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManagerCallback.html"> AccountManagerCallback </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/os/Handler.html"> Handler </a> </code></pre> as parameters. These methods return immediately and run asynchronously. If a callback is provided then <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManagerCallback.html#run(android.accounts.AccountManagerFuture&lt;V&gt;)"> run(AccountManagerFuture <v> ) </v> </a> </code></pre> will be invoked on the Handler's thread when the request completes, successfully or not. The result is retrieved by calling <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManagerFuture.html#getResult()"> getResult() </a> </code></pre> on the <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManagerFuture.html"> AccountManagerFuture </a> </code></pre> returned by the method (and also passed to the callback). This method waits for the operation to complete (if necessary) and either returns the result or throws an exception if an error occurred during the operation. To make the request synchronously, call <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManagerFuture.html#getResult()"> getResult() </a> </code></pre> immediately on receiving the future from the method; no callback need be supplied. <p> Requests which may block, including <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManagerFuture.html#getResult()"> getResult() </a> </code></pre> , must never be called on the application's main event thread. These operations throw <pre><code> <a href="https://developer.android.com/reference/java/lang/IllegalStateException.html"> IllegalStateException </a> </code></pre> if they are used on the main thread. </p>\n<pre><code>public class AccountManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/accounts/AccountManager.html
AccountManagerCallback	A										<section class="prog__container"><p></p>\n<pre><code>public interface AccountManagerCallback\n</code></pre></section>	https://developer.android.com/reference/android/accounts/AccountManagerCallback.html
AccountManagerFuture	A										<section class="prog__container"><p> A <tt> AccountManagerFuture </tt> represents the result of an asynchronous <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManager.html"> AccountManager </a> </code></pre> call. Methods are provided to check if the computation is complete, to wait for its completion, and to retrieve the result of the computation. The result can only be retrieved using method <tt> get </tt> when the computation has completed, blocking if necessary until it is ready. Cancellation is performed by the <tt> cancel </tt> method. Additional methods are provided to determine if the task completed normally or was cancelled. Once a computation has completed, the computation cannot be cancelled. If you would like to use a <tt> Future </tt> for the sake of cancellability but not provide a usable result, you can declare types of the form <tt> Future&lt;?&gt; </tt> and return <tt> null </tt> as a result of the underlying task.</p>\n<pre><code>public interface AccountManagerFuture\n</code></pre></section>	https://developer.android.com/reference/android/accounts/AccountManagerFuture.html
AccountsException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p>\n<pre><code>public class AccountsException\n</code></pre></section>	https://developer.android.com/reference/android/accounts/AccountsException.html
AuthenticatorDescription	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html"> Parcelable </a> </code></pre> value type that contains information about an account authenticator.</p>\n<pre><code>public class AuthenticatorDescription\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/accounts/AuthenticatorDescription.html
AuthenticatorException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p>\n<pre><code>public class AuthenticatorException\n</code></pre></section>	https://developer.android.com/reference/android/accounts/AuthenticatorException.html
NetworkErrorException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p>\n<pre><code>public class NetworkErrorException\n</code></pre></section>	https://developer.android.com/reference/android/accounts/NetworkErrorException.html
OnAccountsUpdateListener	A										<section class="prog__container"><p> An interface that contains the callback used by the AccountManager</p>\n<pre><code>public interface OnAccountsUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/accounts/OnAccountsUpdateListener.html
OperationCanceledException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p>\n<pre><code>public class OperationCanceledException\n</code></pre></section>	https://developer.android.com/reference/android/accounts/OperationCanceledException.html
android.accounts	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/accounts/package-summary.html
Animator.AnimatorListener	A										<section class="prog__container"><p> <p> An animation listener receives notifications from an animation. Notifications indicate animation related events, such as the end or the repetition of the animation. </p>\n<pre><code>public static interface Animator.AnimatorListener\n</code></pre></section>	https://developer.android.com/reference/android/animation/Animator.AnimatorListener.html
Animator.AnimatorPauseListener	A										<section class="prog__container"><p> A pause listener receives notifications from an animation when the animation is <pre><code> <a href="https://developer.android.com/reference/android/animation/Animator.html#pause()"> paused </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/animation/Animator.html#resume()"> resumed </a> </code></pre> .</p>\n<pre><code>public static interface Animator.AnimatorPauseListener\n</code></pre></section>	https://developer.android.com/reference/android/animation/Animator.AnimatorPauseListener.html
Animator	A										<section class="prog__container"><p> This is the superclass for classes which provide basic support for animations which can be started, ended, and have <pre><code> AnimatorListeners </code></pre> added to them.</p>\n<pre><code>public abstract class Animator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/animation/Animator.html
AnimatorInflater	A										<section class="prog__container"><p> This class is used to instantiate animator XML files into Animator objects. <p> For performance reasons, inflation relies heavily on pre-processing of XML files that is done at build time. Therefore, it is not currently possible to use this inflater with an XmlPullParser over a plain XML file at runtime; it only works with an XmlPullParser returned from a compiled resource (R. <em> something </em> file.) </p>\n<pre><code>public class AnimatorInflater\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/animation/AnimatorInflater.html
AnimatorListenerAdapter	A										<section class="prog__container"><p> This adapter class provides empty implementations of the methods from <pre><code> <a href="https://developer.android.com/reference/android/animation/Animator.AnimatorListener.html"> Animator.AnimatorListener </a> </code></pre> . Any custom listener that cares only about a subset of the methods of this listener can simply subclass this adapter class instead of implementing the interface directly.</p>\n<pre><code>public abstract class AnimatorListenerAdapter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/animation/AnimatorListenerAdapter.html
AnimatorSet.Builder	A										<section class="prog__container"><p> The <pre><code> Builder </code></pre> object is a utility class to facilitate adding animations to a <pre><code> AnimatorSet </code></pre> along with the relationships between the various animations. The intention of the <pre><code> Builder </code></pre> methods, along with the <pre><code> <a href="https://developer.android.com/reference/android/animation/AnimatorSet.html#play(android.animation.Animator)"> play() </a> </code></pre> method of <pre><code> AnimatorSet </code></pre> is to make it possible to express the dependency relationships of animations in a natural way. Developers can also use the <pre><code> <a href="https://developer.android.com/reference/android/animation/AnimatorSet.html#playTogether(android.animation.Animator...)"> playTogether() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/animation/AnimatorSet.html#playSequentially(android.animation.Animator...)"> playSequentially() </a> </code></pre> methods if these suit the need, but it might be easier in some situations to express the AnimatorSet of animations in pairs. <p> </p>\n<pre><code>public class AnimatorSet.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/animation/AnimatorSet.Builder.html
AnimatorSet	A										<section class="prog__container"><p> This class plays a set of <pre><code> <a href="https://developer.android.com/reference/android/animation/Animator.html"> Animator </a> </code></pre> objects in the specified order. Animations can be set up to play together, in sequence, or after a specified delay. <p> There are two different approaches to adding animations to a <pre><code> AnimatorSet </code></pre> : either the <pre><code> <a href="https://developer.android.com/reference/android/animation/AnimatorSet.html#playTogether(android.animation.Animator...)"> playTogether() </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/animation/AnimatorSet.html#playSequentially(android.animation.Animator...)"> playSequentially() </a> </code></pre> methods can be called to add a set of animations all at once, or the <pre><code> <a href="https://developer.android.com/reference/android/animation/AnimatorSet.html#play(android.animation.Animator)"> play(Animator) </a> </code></pre> can be used in conjunction with methods in the <pre><code> <a href="https://developer.android.com/reference/android/animation/AnimatorSet.Builder.html"> Builder </a> </code></pre> class to add animations one by one. </p>\n<pre><code>public final class AnimatorSet\n</code></pre></section>	https://developer.android.com/reference/android/animation/AnimatorSet.html
ArgbEvaluator	A										<section class="prog__container"><p> This evaluator can be used to perform type interpolation between integer values that represent ARGB colors.</p>\n<pre><code>public class ArgbEvaluator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/animation/ArgbEvaluator.html
BidirectionalTypeConverter	A										<section class="prog__container"><p> Abstract base class used convert type T to another type V and back again. This is necessary when the value types of in animation are different from the property type. BidirectionalTypeConverter is needed when only the final value for the animation is supplied to animators.</p>\n<pre><code>public abstract class BidirectionalTypeConverter\n</code></pre></section>	https://developer.android.com/reference/android/animation/BidirectionalTypeConverter.html
FloatArrayEvaluator	A										<section class="prog__container"><p> This evaluator can be used to perform type interpolation between <pre><code> float[] </code></pre> values. Each index into the array is treated as a separate value to interpolate. For example, evaluating <pre><code> {100, 200} </code></pre> and <pre><code> {300, 400} </code></pre> will interpolate the value at the first index between 100 and 300 and the value at the second index value between 200 and 400.</p>\n<pre><code>public class FloatArrayEvaluator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/animation/FloatArrayEvaluator.html
FloatEvaluator	A										<section class="prog__container"><p> This evaluator can be used to perform type interpolation between <pre><code> float </code></pre> values.</p>\n<pre><code>public class FloatEvaluator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/animation/FloatEvaluator.html
IntArrayEvaluator	A										<section class="prog__container"><p> This evaluator can be used to perform type interpolation between <pre><code> int[] </code></pre> values. Each index into the array is treated as a separate value to interpolate. For example, evaluating <pre><code> {100, 200} </code></pre> and <pre><code> {300, 400} </code></pre> will interpolate the value at the first index between 100 and 300 and the value at the second index value between 200 and 400.</p>\n<pre><code>public class IntArrayEvaluator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/animation/IntArrayEvaluator.html
IntEvaluator	A										<section class="prog__container"><p> This evaluator can be used to perform type interpolation between <pre><code> int </code></pre> values.</p>\n<pre><code>public class IntEvaluator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/animation/IntEvaluator.html
Keyframe	A										<section class="prog__container"><p> This class holds a time/value pair for an animation. The Keyframe class is used by <pre><code> <a href="https://developer.android.com/reference/android/animation/ValueAnimator.html"> ValueAnimator </a> </code></pre> to define the values that the animation target will have over the course of the animation. As the time proceeds from one keyframe to the other, the value of the target object will animate between the value at the previous keyframe and the value at the next keyframe. Each keyframe also holds an optional <pre><code> <a href="https://developer.android.com/reference/android/animation/TimeInterpolator.html"> TimeInterpolator </a> </code></pre> object, which defines the time interpolation over the intervalue preceding the keyframe. <p> The Keyframe class itself is abstract. The type-specific factory methods will return a subclass of Keyframe specific to the type of value being stored. This is done to improve performance when dealing with the most common cases (e.g., <pre><code> float </code></pre> and <pre><code> int </code></pre> values). Other types will fall into a more general Keyframe class that treats its values as Objects. Unless your animation requires dealing with a custom type or a data structure that needs to be animated directly (and evaluated using an implementation of <pre><code> <a href="https://developer.android.com/reference/android/animation/TypeEvaluator.html"> TypeEvaluator </a> </code></pre> ), you should stick to using float and int as animations using those types have lower runtime overhead than other types. </p>\n<pre><code>public abstract class Keyframe\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/animation/Keyframe.html
LayoutTransition	A										<section class="prog__container"><p> This class enables automatic animations on layout changes in ViewGroup objects. To enable transitions for a layout container, create a LayoutTransition object and set it on any ViewGroup by calling <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.html#setLayoutTransition(android.animation.LayoutTransition)"> setLayoutTransition(LayoutTransition) </a> </code></pre> . This will cause default animations to run whenever items are added to or removed from that container. To specify custom animations, use the <pre><code> <a href="https://developer.android.com/reference/android/animation/LayoutTransition.html#setAnimator(int, android.animation.Animator)"> setAnimator() </a> </code></pre> method. <p> One of the core concepts of these transition animations is that there are two types of changes that cause the transition and four different animations that run because of those changes. The changes that trigger the transition are items being added to a container (referred to as an "appearing" transition) or removed from a container (also known as "disappearing"). Setting the visibility of views (between GONE and VISIBLE) will trigger the same add/remove logic. The animations that run due to those events are one that animates items being added, one that animates items being removed, and two that animate the other items in the container that change due to the add/remove occurrence. Users of the transition may want different animations for the changing items depending on whether they are changing due to an appearing or disappearing event, so there is one animation for each of these variations of the changing event. Most of the API of this class is concerned with setting up the basic properties of the animations used in these four situations, or with setting up custom animations for any or all of the four. </p>\n<pre><code>public class LayoutTransition\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/animation/LayoutTransition.html
LayoutTransition.TransitionListener	A										<section class="prog__container"><p> This interface is used for listening to starting and ending events for transitions.</p>\n<pre><code>public static interface LayoutTransition.TransitionListener\n</code></pre></section>	https://developer.android.com/reference/android/animation/LayoutTransition.TransitionListener.html
ObjectAnimator	A										<section class="prog__container"><p> This subclass of <pre><code> <a href="https://developer.android.com/reference/android/animation/ValueAnimator.html"> ValueAnimator </a> </code></pre> provides support for animating properties on target objects. The constructors of this class take parameters to define the target object that will be animated as well as the name of the property that will be animated. Appropriate set/get functions are then determined internally and the animation will call these functions as necessary to animate the property. <p> Animators can be created from either code or resource files, as shown here: </p>\n<pre><code>public final class ObjectAnimator\n</code></pre></section>	https://developer.android.com/reference/android/animation/ObjectAnimator.html
android.animation	A										<section class="prog__container">These classes provide functionality for the property animation system, which allows you to animate object properties of any type.</section>	https://developer.android.com/reference/android/animation/package-summary.html
PointFEvaluator	A										<section class="prog__container"><p> This evaluator can be used to perform type interpolation between <pre><code> PointF </code></pre> values.</p>\n<pre><code>public class PointFEvaluator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/animation/PointFEvaluator.html
PropertyValuesHolder	A										<section class="prog__container"><p> This class holds information about a property and the values that that property should take on during an animation. PropertyValuesHolder objects can be used to create animations with ValueAnimator or ObjectAnimator that operate on several different properties in parallel.</p>\n<pre><code>public class PropertyValuesHolder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/animation/PropertyValuesHolder.html
RectEvaluator	A										<section class="prog__container"><p> This evaluator can be used to perform type interpolation between <pre><code> Rect </code></pre> values.</p>\n<pre><code>public class RectEvaluator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/animation/RectEvaluator.html
StateListAnimator	A										<section class="prog__container"><p> Lets you define a number of Animators that will run on the attached View depending on the View's drawable state. <p> It can be defined in an XML file with the <pre><code> &lt;selector&gt; </code></pre> element. Each State Animator is defined in a nested <pre><code> &lt;item&gt; </code></pre> element. </p>\n<pre><code>public class StateListAnimator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/animation/StateListAnimator.html
TimeAnimator	A										<section class="prog__container"><p> This class provides a simple callback mechanism to listeners that is synchronized with all other animators in the system. There is no duration, interpolation, or object value-setting with this Animator. Instead, it is simply started, after which it proceeds to send out events on every animation frame to its TimeListener (if set), with information about this animator, the total elapsed time, and the elapsed time since the previous animation frame.</p>\n<pre><code>public class TimeAnimator\n</code></pre></section>	https://developer.android.com/reference/android/animation/TimeAnimator.html
TimeAnimator.TimeListener	A										<section class="prog__container"><p> Implementors of this interface can set themselves as update listeners to a <pre><code> TimeAnimator </code></pre> instance to receive callbacks on every animation frame to receive the total time since the animator started and the delta time since the last frame. The first time the listener is called, deltaTime will be zero. The same is true for totalTime, unless the animator was set to a specific <pre><code> <a href="https://developer.android.com/reference/android/animation/ValueAnimator.html#setCurrentPlayTime(long)"> currentPlayTime </a> </code></pre> prior to starting.</p>\n<pre><code>public static interface TimeAnimator.TimeListener\n</code></pre></section>	https://developer.android.com/reference/android/animation/TimeAnimator.TimeListener.html
TimeInterpolator	A										<section class="prog__container"><p> A time interpolator defines the rate of change of an animation. This allows animations to have non-linear motion, such as acceleration and deceleration.</p>\n<pre><code>public interface TimeInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/animation/TimeInterpolator.html
TypeConverter	A										<section class="prog__container"><p> Abstract base class used convert type T to another type V. This is necessary when the value types of in animation are different from the property type.</p>\n<pre><code>public abstract class TypeConverter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/animation/TypeConverter.html
TypeEvaluator	A										<section class="prog__container"><p> Interface for use with the <pre><code> <a href="https://developer.android.com/reference/android/animation/ValueAnimator.html#setEvaluator(android.animation.TypeEvaluator)"> setEvaluator(TypeEvaluator) </a> </code></pre> function. Evaluators allow developers to create animations on arbitrary property types, by allowing them to supply custom evaluators for types that are not automatically understood and used by the animation system.</p>\n<pre><code>public interface TypeEvaluator\n</code></pre></section>	https://developer.android.com/reference/android/animation/TypeEvaluator.html
ValueAnimator.AnimatorUpdateListener	A										<section class="prog__container"><p> Implementors of this interface can add themselves as update listeners to an <pre><code> ValueAnimator </code></pre> instance to receive callbacks on every animation frame, after the current frame's values have been calculated for that <pre><code> ValueAnimator </code></pre> .</p>\n<pre><code>public static interface ValueAnimator.AnimatorUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/animation/ValueAnimator.AnimatorUpdateListener.html
ValueAnimator	A										<section class="prog__container"><p> This class provides a simple timing engine for running animations which calculate animated values and set them on target objects. <p> There is a single timing pulse that all animations use. It runs in a custom handler to ensure that property changes happen on the UI thread. </p>\n<pre><code>public class ValueAnimator\n</code></pre></section>	https://developer.android.com/reference/android/animation/ValueAnimator.html
android.annotation	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/annotation/package-summary.html
SuppressLint	A										<section class="prog__container"><p> Indicates that Lint should ignore the specified warnings for the annotated element.</p>\n<pre><code>public abstract @interface SuppressLint\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/annotation/SuppressLint.html
TargetApi	A										<section class="prog__container"><p> Indicates that Lint should treat this type as targeting a given API level, no matter what the project target is.</p>\n<pre><code>public abstract @interface TargetApi\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/annotation/TargetApi.html
ActionBar	A										<section class="prog__container"><p> A primary toolbar within the activity that may display the activity title, application-level navigation affordances, and other interactive items. <p> Beginning with Android 3.0 (API level 11), the action bar appears at the top of an activity's window when the activity uses the system's <pre><code> <a href="https://developer.android.com/reference/android/R.style.html#Theme_Holo"> Holo </a> </code></pre> theme (or one of its descendant themes), which is the default. You may otherwise add the action bar by calling <pre><code> <a href="https://developer.android.com/reference/android/view/Window.html#requestFeature(int)"> requestFeature(FEATURE_ACTION_BAR) </a> </code></pre> or by declaring it in a custom theme with the <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#Theme_windowActionBar"> windowActionBar </a> </code></pre> property. </p>\n<pre><code>public abstract class ActionBar\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/ActionBar.html
ActionBar.LayoutParams	A										<section class="prog__container"><p> Per-child layout information associated with action bar custom views.</p>\n<pre><code>public static class ActionBar.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/app/ActionBar.LayoutParams.html
ActionBar.OnMenuVisibilityListener	A										<section class="prog__container"><p> Listener for receiving events when action bar menus are shown or hidden.</p>\n<pre><code>public static interface ActionBar.OnMenuVisibilityListener\n</code></pre></section>	https://developer.android.com/reference/android/app/ActionBar.OnMenuVisibilityListener.html
ActionBar.OnNavigationListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other <a href="http://developer.android.com/design/patterns/navigation.html"> common navigation patterns </a> instead. </p>\n<pre><code>public static interface ActionBar.OnNavigationListener\n</code></pre></section>	https://developer.android.com/reference/android/app/ActionBar.OnNavigationListener.html
ActionBar.Tab	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other <a href="http://developer.android.com/design/patterns/navigation.html"> common navigation patterns </a> instead. </p>\n<pre><code>public static abstract class ActionBar.Tab\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/ActionBar.Tab.html
ActionBar.TabListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other <a href="http://developer.android.com/design/patterns/navigation.html"> common navigation patterns </a> instead. </p>\n<pre><code>public static interface ActionBar.TabListener\n</code></pre></section>	https://developer.android.com/reference/android/app/ActionBar.TabListener.html
Activity	A										<section class="prog__container"><p> An activity is a single, focused thing that the user can do. Almost all activities interact with the user, so the Activity class takes care of creating a window for you in which you can place your UI with <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#setContentView(android.view.View)"> setContentView(View) </a> </code></pre> . While activities are often presented to the user as full-screen windows, they can also be used in other ways: as floating windows (via a theme with <pre><code> <a href="https://developer.android.com/reference/android/R.attr.html#windowIsFloating"> windowIsFloating </a> </code></pre> set) or embedded inside of another activity (using <pre><code> <a href="https://developer.android.com/reference/android/app/ActivityGroup.html"> ActivityGroup </a> </code></pre> ). There are two methods almost all subclasses of Activity will implement: <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#onCreate(android.os.Bundle)"> onCreate(Bundle) </a> </code></pre> is where you initialize your activity. Most importantly, here you will usually call <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#setContentView(int)"> setContentView(int) </a> </code></pre> with a layout resource defining your UI, and using <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#findViewById(int)"> findViewById(int) </a> </code></pre> to retrieve the widgets in that UI that you need to interact with programmatically. <li> <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#onPause()"> onPause() </a> </code></pre> is where you deal with the user leaving your activity. Most importantly, any changes made by the user should at this point be committed (usually to the <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProvider.html"> ContentProvider </a> </code></pre> holding the data). </li> </li> </ul> <p> To be of use with <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#startActivity(android.content.Intent)"> Context.startActivity() </a> </code></pre> , all activity classes must have a corresponding <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#AndroidManifestActivity"> &lt;activity&gt; </a> </code></pre> declaration in their package's <pre><code> AndroidManifest.xml </code></pre> . </p>\n<pre><code>public class Activity\n</code></pre></section>	https://developer.android.com/reference/android/app/Activity.html
ActivityGroup	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 13. </strong> <br/> Use the new <pre><code> <a href="https://developer.android.com/reference/android/app/Fragment.html"> Fragment </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/FragmentManager.html"> FragmentManager </a> </code></pre> APIs instead; these are also available on older platforms through the Android compatibility package. </p>\n<pre><code>public class ActivityGroup\n</code></pre></section>	https://developer.android.com/reference/android/app/ActivityGroup.html
ActivityManager.AppTask	A										<section class="prog__container"><p> The AppTask allows you to manage your own application's tasks. See <pre><code> <a href="https://developer.android.com/reference/android/app/ActivityManager.html#getAppTasks()"> getAppTasks() </a> </code></pre></p>\n<pre><code>public static class ActivityManager.AppTask\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/ActivityManager.AppTask.html
ActivityManager	A										<section class="prog__container"><p> Interact with the overall activities running in the system.</p>\n<pre><code>public class ActivityManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/ActivityManager.html
ActivityManager.MemoryInfo	A										<section class="prog__container"><p> Information you can retrieve about the available memory through <pre><code> <a href="https://developer.android.com/reference/android/app/ActivityManager.html#getMemoryInfo(android.app.ActivityManager.MemoryInfo)"> getMemoryInfo(ActivityManager.MemoryInfo) </a> </code></pre> .</p>\n<pre><code>public static class ActivityManager.MemoryInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/ActivityManager.MemoryInfo.html
ActivityManager.ProcessErrorStateInfo	A										<section class="prog__container"><p> Information you can retrieve about any processes that are in an error condition.</p>\n<pre><code>public static class ActivityManager.ProcessErrorStateInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/ActivityManager.ProcessErrorStateInfo.html
ActivityManager.RecentTaskInfo	A										<section class="prog__container"><p> Information you can retrieve about tasks that the user has most recently started or visited.</p>\n<pre><code>public static class ActivityManager.RecentTaskInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/ActivityManager.RecentTaskInfo.html
ActivityManager.RunningAppProcessInfo	A										<section class="prog__container"><p> Information you can retrieve about a running process.</p>\n<pre><code>public static class ActivityManager.RunningAppProcessInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html
ActivityManager.RunningServiceInfo	A										<section class="prog__container"><p> Information you can retrieve about a particular Service that is currently running in the system.</p>\n<pre><code>public static class ActivityManager.RunningServiceInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/ActivityManager.RunningServiceInfo.html
ActivityManager.RunningTaskInfo	A										<section class="prog__container"><p> Information you can retrieve about a particular task that is currently "running" in the system. Note that a running task does not mean the given task actually has a process it is actively running in; it simply means that the user has gone to it and never closed it, but currently the system may have killed its process and is only holding on to its last state in order to restart it when the user returns.</p>\n<pre><code>public static class ActivityManager.RunningTaskInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/ActivityManager.RunningTaskInfo.html
ActivityManager.TaskDescription	A										<section class="prog__container"><p> Information you can set and retrieve about the current activity within the recent task list.</p>\n<pre><code>public static class ActivityManager.TaskDescription\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/ActivityManager.TaskDescription.html
ActivityOptions	A										<section class="prog__container"><p> Helper class for building an options Bundle that can be used with <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#startActivity(android.content.Intent, android.os.Bundle)"> Context.startActivity(Intent, Bundle) </a> </code></pre> and related methods.</p>\n<pre><code>public class ActivityOptions\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/ActivityOptions.html
AlarmManager.AlarmClockInfo	A										<section class="prog__container"><p> An immutable description of a scheduled "alarm clock" event.</p>\n<pre><code>public static final class AlarmManager.AlarmClockInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/AlarmManager.AlarmClockInfo.html
AlarmManager	A										<section class="prog__container"><p> This class provides access to the system alarm services. These allow you to schedule your application to be run at some point in the future. When an alarm goes off, the <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html"> Intent </a> </code></pre> that had been registered for it is broadcast by the system, automatically starting the target application if it is not already running. Registered alarms are retained while the device is asleep (and can optionally wake the device up if they go off during that time), but will be cleared if it is turned off and rebooted. <p> The Alarm Manager holds a CPU wake lock as long as the alarm receiver's onReceive() method is executing. This guarantees that the phone will not sleep until you have finished handling the broadcast. Once onReceive() returns, the Alarm Manager releases this wake lock. This means that the phone will in some cases sleep as soon as your onReceive() method completes. If your alarm receiver called <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)"> Context.startService() </a> </code></pre> , it is possible that the phone will sleep before the requested service is launched. To prevent this, your BroadcastReceiver and Service will need to implement a separate wake lock policy to ensure that the phone continues running until the service becomes available. <p> <b> Note: The Alarm Manager is intended for cases where you want to have your application code run at a specific time, even if your application is not currently running. For normal timing operations (ticks, timeouts, etc) it is easier and much more efficient to use <pre><code> <a href="https://developer.android.com/reference/android/os/Handler.html"> Handler </a> </code></pre> . </b> <p class="caution"> <strong> Note: </strong> Beginning with API 19 ( <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#KITKAT"> KITKAT </a> </code></pre> ) alarm delivery is inexact: the OS will shift alarms in order to minimize wakeups and battery use. There are new APIs to support applications which need strict delivery guarantees; see <pre><code> <a href="https://developer.android.com/reference/android/app/AlarmManager.html#setWindow(int, long, long, android.app.PendingIntent)"> setWindow(int, long, long, PendingIntent) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/AlarmManager.html#setExact(int, long, android.app.PendingIntent)"> setExact(int, long, PendingIntent) </a> </code></pre> . Applications whose <pre><code> targetSdkVersion </code></pre> is earlier than API 19 will continue to see the previous behavior in which all alarms are delivered exactly when requested. <p> You do not instantiate this class directly; instead, retrieve it through <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.Class&lt;T&gt;)"> Context.getSystemService(Context.ALARM_SERVICE) </a> </code></pre> . </p>\n<pre><code>public class AlarmManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/AlarmManager.html
AlarmManager.OnAlarmListener	A										<section class="prog__container"><p> Direct-notification alarms: the requester must be running continuously from the time the alarm is set to the time it is delivered, or delivery will fail. Only one-shot alarms can be set using this mechanism, not repeating alarms.</p>\n<pre><code>public static interface AlarmManager.OnAlarmListener\n</code></pre></section>	https://developer.android.com/reference/android/app/AlarmManager.OnAlarmListener.html
AlertDialog.Builder	A										<section class="prog__container"><p> Creates a builder for an alert dialog that uses the default alert dialog theme.</p>\n<pre><code>public static class AlertDialog.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/AlertDialog.Builder.html
AlertDialog	A										<section class="prog__container"><p> A subclass of Dialog that can display one, two or three buttons. If you only want to display a String in this dialog box, use the setMessage() method. If you want to display a more complex view, look up the FrameLayout called "custom" and add your view to it: <pre> FrameLayout fl = (FrameLayout) findViewById(android.R.id.custom); fl.addView(myView, new LayoutParams(MATCH_PARENT, WRAP_CONTENT)); </pre> <p> The AlertDialog class takes care of automatically setting <pre><code> <a href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_ALT_FOCUSABLE_IM"> WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM </a> </code></pre> for you based on whether any views in the dialog return true from <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#onCheckIsTextEditor()"> View.onCheckIsTextEditor() </a> </code></pre> . Generally you want this set for a Dialog without text editors, so that it will be placed on top of the current input method UI. You can modify this behavior by forcing the flag to your desired mode after calling <pre><code> <a href="https://developer.android.com/reference/android/app/AlertDialog.html#onCreate(android.os.Bundle)"> onCreate(Bundle) </a> </code></pre> . </p>\n<pre><code>public class AlertDialog\n</code></pre></section>	https://developer.android.com/reference/android/app/AlertDialog.html
AliasActivity	A										<section class="prog__container"><p> Stub activity that launches another activity (and then finishes itself) based on information in its component's manifest meta-data. This is a simple way to implement an alias-like mechanism. To use this activity, you should include in the manifest for the associated component an entry named "android.app.alias". It is a reference to an XML resource describing an intent that launches the real application.</p>\n<pre><code>public class AliasActivity\n</code></pre></section>	https://developer.android.com/reference/android/app/AliasActivity.html
Application.ActivityLifecycleCallbacks	A										<section class="prog__container"><p></p>\n<pre><code>public static interface Application.ActivityLifecycleCallbacks\n</code></pre></section>	https://developer.android.com/reference/android/app/Application.ActivityLifecycleCallbacks.html
Application	A										<section class="prog__container"><p> Base class for maintaining global application state. You can provide your own implementation by creating a subclass and specifying the fully-qualified name of this subclass as the <pre><code> "android:name" </code></pre> attribute in your AndroidManifest.xml's <pre><code> &lt;application&gt; </code></pre> tag. The Application class, or your subclass of the Application class, is instantiated before any other class when the process for your application/package is created. <p class="note"> <strong> Note: </strong> There is normally no need to subclass Application. In most situations, static singletons can provide the same functionality in a more modular way. If your singleton needs a global context (for example to register broadcast receivers), include <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getApplicationContext()"> Context.getApplicationContext() </a> </code></pre> as a <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html"> Context </a> </code></pre> argument when invoking your singleton's <pre><code> getInstance() </code></pre> method. </p>\n<pre><code>public class Application\n</code></pre></section>	https://developer.android.com/reference/android/app/Application.html
Application.OnProvideAssistDataListener	A										<section class="prog__container"><p> Callback interface for use with <pre><code> <a href="https://developer.android.com/reference/android/app/Application.html#registerOnProvideAssistDataListener(android.app.Application.OnProvideAssistDataListener)"> registerOnProvideAssistDataListener(Application.OnProvideAssistDataListener) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/Application.html#unregisterOnProvideAssistDataListener(android.app.Application.OnProvideAssistDataListener)"> unregisterOnProvideAssistDataListener(Application.OnProvideAssistDataListener) </a> </code></pre> .</p>\n<pre><code>public static interface Application.OnProvideAssistDataListener\n</code></pre></section>	https://developer.android.com/reference/android/app/Application.OnProvideAssistDataListener.html
ApplicationErrorReport.AnrInfo	A										<section class="prog__container"><p> Describes an application not responding error.</p>\n<pre><code>public static class ApplicationErrorReport.AnrInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/ApplicationErrorReport.AnrInfo.html
ApplicationErrorReport.BatteryInfo	A										<section class="prog__container"><p> Describes a battery usage report.</p>\n<pre><code>public static class ApplicationErrorReport.BatteryInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/ApplicationErrorReport.BatteryInfo.html
ApplicationErrorReport.CrashInfo	A										<section class="prog__container"><p> Describes an application crash.</p>\n<pre><code>public static class ApplicationErrorReport.CrashInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/ApplicationErrorReport.CrashInfo.html
ApplicationErrorReport	A										<section class="prog__container"><p> Describes an application error. A report has a type, which is one of <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/app/ApplicationErrorReport.html#TYPE_NONE"> TYPE_NONE </a> </code></pre> uninitialized instance of <pre><code> <a href="https://developer.android.com/reference/android/app/ApplicationErrorReport.html"> ApplicationErrorReport </a> </code></pre> . <li> <pre><code> <a href="https://developer.android.com/reference/android/app/ApplicationErrorReport.html#TYPE_CRASH"> TYPE_CRASH </a> </code></pre> application crash. Information about the crash is stored in <pre><code> <a href="https://developer.android.com/reference/android/app/ApplicationErrorReport.html#crashInfo"> crashInfo </a> </code></pre> . <li> <pre><code> <a href="https://developer.android.com/reference/android/app/ApplicationErrorReport.html#TYPE_ANR"> TYPE_ANR </a> </code></pre> application not responding. Information about the ANR is stored in <pre><code> <a href="https://developer.android.com/reference/android/app/ApplicationErrorReport.html#anrInfo"> anrInfo </a> </code></pre> . <li> <pre><code> <a href="https://developer.android.com/reference/android/app/ApplicationErrorReport.html#TYPE_BATTERY"> TYPE_BATTERY </a> </code></pre> user reported application is using too much battery. Information about the battery use is stored in <pre><code> <a href="https://developer.android.com/reference/android/app/ApplicationErrorReport.html#batteryInfo"> batteryInfo </a> </code></pre> . <li> <pre><code> <a href="https://developer.android.com/reference/android/app/ApplicationErrorReport.html#TYPE_RUNNING_SERVICE"> TYPE_RUNNING_SERVICE </a> </code></pre> user reported application is leaving an unneeded serive running. Information about the battery use is stored in <pre><code> <a href="https://developer.android.com/reference/android/app/ApplicationErrorReport.html#runningServiceInfo"> runningServiceInfo </a> </code></pre> . </li> </li> </li> </li> </li> </ul></p>\n<pre><code>public class ApplicationErrorReport\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/ApplicationErrorReport.html
ApplicationErrorReport.RunningServiceInfo	A										<section class="prog__container"><p> Describes a running service report.</p>\n<pre><code>public static class ApplicationErrorReport.RunningServiceInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/ApplicationErrorReport.RunningServiceInfo.html
AppOpsManager	A										<section class="prog__container"><p> API for interacting with "application operation" tracking. <p> This API is not generally intended for third party application developers; most features are only available to system applications. Obtain an instance of it through <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> Context.getSystemService </a> </code></pre> with <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#APP_OPS_SERVICE"> Context.APP_OPS_SERVICE </a> </code></pre> . </p>\n<pre><code>public class AppOpsManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/AppOpsManager.html
AppOpsManager.OnOpChangedListener	A										<section class="prog__container"><p> Callback for notification of changes to operation state.</p>\n<pre><code>public static interface AppOpsManager.OnOpChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/app/AppOpsManager.OnOpChangedListener.html
AutomaticZenRule	A										<section class="prog__container"><p> Rule instance information for zen mode.</p>\n<pre><code>public final class AutomaticZenRule\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/AutomaticZenRule.html
DatePickerDialog	A										<section class="prog__container"><p> A simple dialog containing an <pre><code> <a href="https://developer.android.com/reference/android/widget/DatePicker.html"> DatePicker </a> </code></pre> . <p> See the <a href="https://developer.android.com/guide/topics/ui/controls/pickers.html"> Pickers </a> guide. </p>\n<pre><code>public class DatePickerDialog\n</code></pre></section>	https://developer.android.com/reference/android/app/DatePickerDialog.html
DatePickerDialog.OnDateSetListener	A										<section class="prog__container"><p> The listener used to indicate the user has finished selecting a date.</p>\n<pre><code>public static interface DatePickerDialog.OnDateSetListener\n</code></pre></section>	https://developer.android.com/reference/android/app/DatePickerDialog.OnDateSetListener.html
Dialog	A										<section class="prog__container"><p> Base class for Dialogs. <p> Note: Activities provide a facility to manage the creation, saving and restoring of dialogs. See <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#onCreateDialog(int)"> onCreateDialog(int) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#onPrepareDialog(int, android.app.Dialog)"> onPrepareDialog(int, Dialog) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#showDialog(int)"> showDialog(int) </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#dismissDialog(int)"> dismissDialog(int) </a> </code></pre> . If these methods are used, <pre><code> <a href="https://developer.android.com/reference/android/app/Dialog.html#getOwnerActivity()"> getOwnerActivity() </a> </code></pre> will return the Activity that managed this dialog. <p> Often you will want to have a Dialog display on top of the current input method, because there is no reason for it to accept text. You can do this by setting the <pre><code> <a href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_ALT_FOCUSABLE_IM"> WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM </a> </code></pre> window flag (assuming your Dialog takes input focus, as it the default) with the following code: <pre> getWindow().setFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM, WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);</pre> </p>\n<pre><code>public class Dialog\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/Dialog.html
DialogFragment	A										<section class="prog__container"><p> A fragment that displays a dialog window, floating on top of its activity's window. This fragment contains a Dialog object, which it displays as appropriate based on the fragment's state. Control of the dialog (deciding when to show, hide, dismiss it) should be done through the API here, not with direct calls on the dialog. <p> Implementations should override this class and implement <pre><code> <a href="https://developer.android.com/reference/android/app/Fragment.html#onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle)"> onCreateView(LayoutInflater, ViewGroup, Bundle) </a> </code></pre> to supply the content of the dialog. Alternatively, they can override <pre><code> <a href="https://developer.android.com/reference/android/app/DialogFragment.html#onCreateDialog(android.os.Bundle)"> onCreateDialog(Bundle) </a> </code></pre> to create an entirely custom dialog, such as an AlertDialog, with its own content. <p> Topics covered here: <ol> <li> <a href="#Lifecycle"> Lifecycle </a> <li> <a href="#BasicDialog"> Basic Dialog </a> <li> <a href="#AlertDialog"> Alert Dialog </a> <li> <a href="#DialogOrEmbed"> Selecting Between Dialog or Embedding </a> </li> </li> </li> </li> </ol> <a name="Lifecycle"> </a> </p>\n<pre><code>public class DialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/app/DialogFragment.html
DownloadManager	A										<section class="prog__container"><p> The download manager is a system service that handles long-running HTTP downloads. Clients may request that a URI be downloaded to a particular destination file. The download manager will conduct the download in the background, taking care of HTTP interactions and retrying downloads after failures or across connectivity changes and system reboots. Instances of this class should be obtained through <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> getSystemService(String) </a> </code></pre> by passing <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#DOWNLOAD_SERVICE"> DOWNLOAD_SERVICE </a> </code></pre> . Apps that request downloads through this API should register a broadcast receiver for <pre><code> <a href="https://developer.android.com/reference/android/app/DownloadManager.html#ACTION_NOTIFICATION_CLICKED"> ACTION_NOTIFICATION_CLICKED </a> </code></pre> to appropriately handle when the user clicks on a running download in a notification or from the downloads UI. Note that the application must have the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#INTERNET"> INTERNET </a> </code></pre> permission to use this class.</p>\n<pre><code>public class DownloadManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/DownloadManager.html
DownloadManager.Query	A										<section class="prog__container"><p> This class may be used to filter download manager queries.</p>\n<pre><code>public static class DownloadManager.Query\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/DownloadManager.Query.html
DownloadManager.Request	A										<section class="prog__container"><p> This class contains all the information necessary to request a new download. The URI is the only required parameter. Note that the default download destination is a shared volume where the system might delete your file if it needs to reclaim space for system use. If this is a problem, use a location on external storage (see <pre><code> <a href="https://developer.android.com/reference/android/app/DownloadManager.Request.html#setDestinationUri(android.net.Uri)"> setDestinationUri(Uri) </a> </code></pre> .</p>\n<pre><code>public static class DownloadManager.Request\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/DownloadManager.Request.html
ExpandableListActivity	A										<section class="prog__container"><p> An activity that displays an expandable list of items by binding to a data source implementing the ExpandableListAdapter, and exposes event handlers when the user selects an item. <p> ExpandableListActivity hosts a <pre><code> <a href="https://developer.android.com/reference/android/widget/ExpandableListView.html"> ExpandableListView </a> </code></pre> object that can be bound to different data sources that provide a two-levels of data (the top-level is group, and below each group are children). Binding, screen layout, and row layout are discussed in the following sections. <p> <strong> Screen Layout </strong> </p>\n<pre><code>public class ExpandableListActivity\n</code></pre></section>	https://developer.android.com/reference/android/app/ExpandableListActivity.html
Fragment	A										<section class="prog__container"><p> A Fragment is a piece of an application's user interface or behavior that can be placed in an <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> . Interaction with fragments is done through <pre><code> <a href="https://developer.android.com/reference/android/app/FragmentManager.html"> FragmentManager </a> </code></pre> , which can be obtained via <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#getFragmentManager()"> Activity.getFragmentManager() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/Fragment.html#getFragmentManager()"> Fragment.getFragmentManager() </a> </code></pre> . <p> The Fragment class can be used many ways to achieve a wide variety of results. In its core, it represents a particular operation or interface that is running within a larger <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> . A Fragment is closely tied to the Activity it is in, and can not be used apart from one. Though Fragment defines its own lifecycle, that lifecycle is dependent on its activity: if the activity is stopped, no fragments inside of it can be started; when the activity is destroyed, all fragments will be destroyed. <p> All subclasses of Fragment must include a public no-argument constructor. The framework will often re-instantiate a fragment class when needed, in particular during state restore, and needs to be able to find this constructor to instantiate it. If the no-argument constructor is not available, a runtime exception will occur in some cases during state restore. <p> Topics covered here: <ol> <li> <a href="#OlderPlatforms"> Older Platforms </a> <li> <a href="#Lifecycle"> Lifecycle </a> <li> <a href="#Layout"> Layout </a> <li> <a href="#BackStack"> Back Stack </a> </li> </li> </li> </li> </ol> </p>\n<pre><code>public class Fragment\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/Fragment.html
Fragment.InstantiationException	A										<section class="prog__container"><p> Thrown by <pre><code> <a href="https://developer.android.com/reference/android/app/Fragment.html#instantiate(android.content.Context, java.lang.String, android.os.Bundle)"> instantiate(Context, String, Bundle) </a> </code></pre> when there is an instantiation failure.</p>\n<pre><code>public static class Fragment.InstantiationException\n</code></pre></section>	https://developer.android.com/reference/android/app/Fragment.InstantiationException.html
Fragment.SavedState	A										<section class="prog__container"><p> State information that has been retrieved from a fragment instance through <pre><code> <a href="https://developer.android.com/reference/android/app/FragmentManager.html#saveFragmentInstanceState(android.app.Fragment)"> FragmentManager.saveFragmentInstanceState </a> </code></pre> .</p>\n<pre><code>public static class Fragment.SavedState\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/Fragment.SavedState.html
FragmentBreadCrumbs	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> This widget is no longer supported. </p>\n<pre><code>public class FragmentBreadCrumbs\n</code></pre></section>	https://developer.android.com/reference/android/app/FragmentBreadCrumbs.html
FragmentBreadCrumbs.OnBreadCrumbClickListener	A										<section class="prog__container"><p> Interface to intercept clicks on the bread crumbs.</p>\n<pre><code>public static interface FragmentBreadCrumbs.OnBreadCrumbClickListener\n</code></pre></section>	https://developer.android.com/reference/android/app/FragmentBreadCrumbs.OnBreadCrumbClickListener.html
FragmentContainer	A										<section class="prog__container"><p> Callbacks to a <pre><code> <a href="https://developer.android.com/reference/android/app/Fragment.html"> Fragment </a> </code></pre> 's container.</p>\n<pre><code>public abstract class FragmentContainer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/FragmentContainer.html
FragmentController	A										<section class="prog__container"><p> Provides integration points with a <pre><code> <a href="https://developer.android.com/reference/android/app/FragmentManager.html"> FragmentManager </a> </code></pre> for a fragment host. <p> It is the responsibility of the host to take care of the Fragment's lifecycle. The methods provided by <pre><code> <a href="https://developer.android.com/reference/android/app/FragmentController.html"> FragmentController </a> </code></pre> are for that purpose. </p>\n<pre><code>public class FragmentController\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/FragmentController.html
FragmentHostCallback	A										<section class="prog__container"><p> Integration points with the Fragment host. <p> Fragments may be hosted by any object; such as an <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> . In order to host fragments, implement <pre><code> <a href="https://developer.android.com/reference/android/app/FragmentHostCallback.html"> FragmentHostCallback </a> </code></pre> , overriding the methods applicable to the host. </p>\n<pre><code>public abstract class FragmentHostCallback\n</code></pre></section>	https://developer.android.com/reference/android/app/FragmentHostCallback.html
FragmentManager.BackStackEntry	A										<section class="prog__container"><p> Representation of an entry on the fragment back stack, as created with <pre><code> <a href="https://developer.android.com/reference/android/app/FragmentTransaction.html#addToBackStack(java.lang.String)"> FragmentTransaction.addToBackStack() </a> </code></pre> . Entries can later be retrieved with <pre><code> <a href="https://developer.android.com/reference/android/app/FragmentManager.html#getBackStackEntryAt(int)"> FragmentManager.getBackStackEntryAt() </a> </code></pre> . <p> Note that you should never hold on to a BackStackEntry object; the identifier as returned by <pre><code> <a href="https://developer.android.com/reference/android/app/FragmentManager.BackStackEntry.html#getId()"> getId() </a> </code></pre> is the only thing that will be persisted across activity instances. </p>\n<pre><code>public static interface FragmentManager.BackStackEntry\n</code></pre></section>	https://developer.android.com/reference/android/app/FragmentManager.BackStackEntry.html
FragmentManager	A										<section class="prog__container"><p> Interface for interacting with <pre><code> <a href="https://developer.android.com/reference/android/app/Fragment.html"> Fragment </a> </code></pre> objects inside of an <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> </p>\n<pre><code>public abstract class FragmentManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/FragmentManager.html
FragmentManager.OnBackStackChangedListener	A										<section class="prog__container"><p> Interface to watch for changes to the back stack.</p>\n<pre><code>public static interface FragmentManager.OnBackStackChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/app/FragmentManager.OnBackStackChangedListener.html
FragmentManagerNonConfig	A										<section class="prog__container"><p> FragmentManagerNonConfig stores the retained instance fragments across activity recreation events. <p> Apps should treat objects of this type as opaque, returned by and passed to the state save and restore process for fragments in <pre><code> <a href="https://developer.android.com/reference/android/app/FragmentController.html#retainNonConfig()"> retainNonConfig() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/FragmentController.html#restoreAllState(android.os.Parcelable, android.app.FragmentManagerNonConfig)"> restoreAllState(Parcelable, FragmentManagerNonConfig) </a> </code></pre> . </p>\n<pre><code>public class FragmentManagerNonConfig\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/FragmentManagerNonConfig.html
FragmentTransaction	A										<section class="prog__container"><p> API for performing a set of Fragment operations. </p>\n<pre><code>public abstract class FragmentTransaction\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/FragmentTransaction.html
Instrumentation.ActivityMonitor	A										<section class="prog__container"><p> Information about a particular kind of Intent that is being monitored. An instance of this class is added to the current instrumentation through <pre><code> <a href="https://developer.android.com/reference/android/app/Instrumentation.html#addMonitor(android.app.Instrumentation.ActivityMonitor)"> addMonitor(Instrumentation.ActivityMonitor) </a> </code></pre> ; after being added, when a new activity is being started the monitor will be checked and, if matching, its hit count updated and (optionally) the call stopped and a canned result returned. <p> An ActivityMonitor can also be used to look for the creation of an activity, through the <pre><code> <a href="https://developer.android.com/reference/android/app/Instrumentation.ActivityMonitor.html#waitForActivity()"> waitForActivity() </a> </code></pre> method. This will return after a matching activity has been created with that activity object. </p>\n<pre><code>public static class Instrumentation.ActivityMonitor\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/Instrumentation.ActivityMonitor.html
Instrumentation.ActivityResult	A										<section class="prog__container"><p> Description of a Activity execution result to return to the original activity.</p>\n<pre><code>public static final class Instrumentation.ActivityResult\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/Instrumentation.ActivityResult.html
Instrumentation	A										<section class="prog__container"><p> Base class for implementing application instrumentation code. When running with instrumentation turned on, this class will be instantiated for you before any of the application code, allowing you to monitor all of the interaction the system has with the application. An Instrumentation implementation is described to the system through an AndroidManifest.xml's &lt;instrumentation&gt; tag.</p>\n<pre><code>public class Instrumentation\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/Instrumentation.html
IntentService	A										<section class="prog__container"><p> IntentService is a base class for <pre><code> <a href="https://developer.android.com/reference/android/app/Service.html"> Service </a> </code></pre> s that handle asynchronous requests (expressed as <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html"> Intent </a> </code></pre> s) on demand. Clients send requests through <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)"> startService(Intent) </a> </code></pre> calls; the service is started as needed, handles each Intent in turn using a worker thread, and stops itself when it runs out of work. <p> This "work queue processor" pattern is commonly used to offload tasks from an application's main thread. The IntentService class exists to simplify this pattern and take care of the mechanics. To use it, extend IntentService and implement <pre><code> <a href="https://developer.android.com/reference/android/app/IntentService.html#onHandleIntent(android.content.Intent)"> onHandleIntent(Intent) </a> </code></pre> . IntentService will receive the Intents, launch a worker thread, and stop the service as appropriate. <p> All requests are handled on a single worker thread -- they may take as long as necessary (and will not block the application's main loop), but only one request will be processed at a time. </p>\n<pre><code>public abstract class IntentService\n</code></pre></section>	https://developer.android.com/reference/android/app/IntentService.html
KeyguardManager	A										<section class="prog__container"><p> Class that can be used to lock and unlock the keyboard. Get an instance of this class by calling <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> getSystemService(java.lang.String) </a> </code></pre> with argument <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#KEYGUARD_SERVICE"> KEYGUARD_SERVICE </a> </code></pre> . The actual class to control the keyboard locking is <pre><code> <a href="https://developer.android.com/reference/android/app/KeyguardManager.KeyguardLock.html"> KeyguardManager.KeyguardLock </a> </code></pre> .</p>\n<pre><code>public class KeyguardManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/KeyguardManager.html
KeyguardManager.KeyguardLock	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 13. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_DISMISS_KEYGUARD"> FLAG_DISMISS_KEYGUARD </a> </code></pre> and/or <pre><code> <a href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SHOW_WHEN_LOCKED"> FLAG_SHOW_WHEN_LOCKED </a> </code></pre> instead; this allows you to seamlessly hide the keyguard as your application moves in and out of the foreground and does not require that any special permissions be requested. Handle returned by <pre><code> <a href="https://developer.android.com/reference/android/app/KeyguardManager.html#newKeyguardLock(java.lang.String)"> newKeyguardLock(String) </a> </code></pre> that allows you to disable / reenable the keyguard. </p>\n<pre><code>public class KeyguardManager.KeyguardLock\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/KeyguardManager.KeyguardLock.html
KeyguardManager.OnKeyguardExitResult	A										<section class="prog__container"><p> Callback passed to <pre><code> <a href="https://developer.android.com/reference/android/app/KeyguardManager.html#exitKeyguardSecurely(android.app.KeyguardManager.OnKeyguardExitResult)"> exitKeyguardSecurely(KeyguardManager.OnKeyguardExitResult) </a> </code></pre> to notify caller of result.</p>\n<pre><code>public static interface KeyguardManager.OnKeyguardExitResult\n</code></pre></section>	https://developer.android.com/reference/android/app/KeyguardManager.OnKeyguardExitResult.html
LauncherActivity	A										<section class="prog__container"><p> Displays a list of all activities which can be performed for a given intent. Launches when clicked.</p>\n<pre><code>public abstract class LauncherActivity\n</code></pre></section>	https://developer.android.com/reference/android/app/LauncherActivity.html
LauncherActivity.IconResizer	A										<section class="prog__container"><p> Utility class to resize icons to match default icon size.</p>\n<pre><code>public class LauncherActivity.IconResizer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/LauncherActivity.IconResizer.html
LauncherActivity.ListItem	A										<section class="prog__container"><p> An item in the list</p>\n<pre><code>public static class LauncherActivity.ListItem\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/LauncherActivity.ListItem.html
ListActivity	A										<section class="prog__container"><p> An activity that displays a list of items by binding to a data source such as an array or Cursor, and exposes event handlers when the user selects an item. <p> ListActivity hosts a <pre><code> <a href="https://developer.android.com/reference/android/widget/ListView.html"> ListView </a> </code></pre> object that can be bound to different data sources, typically either an array or a Cursor holding query results. Binding, screen layout, and row layout are discussed in the following sections. <p> <strong> Screen Layout </strong> </p>\n<pre><code>public class ListActivity\n</code></pre></section>	https://developer.android.com/reference/android/app/ListActivity.html
ListFragment	A										<section class="prog__container"><p> A fragment that displays a list of items by binding to a data source such as an array or Cursor, and exposes event handlers when the user selects an item. <p> ListFragment hosts a <pre><code> <a href="https://developer.android.com/reference/android/widget/ListView.html"> ListView </a> </code></pre> object that can be bound to different data sources, typically either an array or a Cursor holding query results. Binding, screen layout, and row layout are discussed in the following sections. <p> <strong> Screen Layout </strong> </p>\n<pre><code>public class ListFragment\n</code></pre></section>	https://developer.android.com/reference/android/app/ListFragment.html
LoaderManager	A										<section class="prog__container"><p> Interface associated with an <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/app/Fragment.html"> Fragment </a> </code></pre> for managing one or more <pre><code> <a href="https://developer.android.com/reference/android/content/Loader.html"> Loader </a> </code></pre> instances associated with it. This helps an application manage longer-running operations in conjunction with the Activity or Fragment lifecycle; the most common use of this is with a <pre><code> <a href="https://developer.android.com/reference/android/content/CursorLoader.html"> CursorLoader </a> </code></pre> , however applications are free to write their own loaders for loading other types of data. While the LoaderManager API was introduced in <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#HONEYCOMB"> HONEYCOMB </a> </code></pre> , a version of the API at is also available for use on older platforms through <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentActivity.html"> FragmentActivity </a> </code></pre> . See the blog post <a href="http://android-developers.blogspot.com/2011/03/fragments-for-all.html"> Fragments For All </a> for more details. <p> As an example, here is the full implementation of a <pre><code> <a href="https://developer.android.com/reference/android/app/Fragment.html"> Fragment </a> </code></pre> that displays a <pre><code> <a href="https://developer.android.com/reference/android/widget/ListView.html"> ListView </a> </code></pre> containing the results of a query against the contacts content provider. It uses a <pre><code> <a href="https://developer.android.com/reference/android/content/CursorLoader.html"> CursorLoader </a> </code></pre> to manage the query on the provider. <pre>public static class CursorLoaderListFragment extends ListFragment implements OnQueryTextListener, OnCloseListener, LoaderManager.LoaderCallbacks&lt;Cursor&gt; { // This is the Adapter being used to display the list's data. SimpleCursorAdapter mAdapter; // The SearchView for doing filtering. SearchView mSearchView; // If non-null, this is the current filter the user has provided. String mCurFilter; @Override public void onActivityCreated(Bundle savedInstanceState) { super.onActivityCreated(savedInstanceState); // Give some text to display if there is no data. In a real // application this would come from a resource. setEmptyText("No phone numbers"); // We have a menu item to show in action bar. setHasOptionsMenu(true); // Create an empty adapter we will use to display the loaded data. mAdapter = new SimpleCursorAdapter(getActivity(), android.R.layout.simple_list_item_2, null, new String[] { Contacts.DISPLAY_NAME, Contacts.CONTACT_STATUS }, new int[] { android.R.id.text1, android.R.id.text2 }, 0); setListAdapter(mAdapter); // Start out with a progress indicator. setListShown(false); // Prepare the loader. Either re-connect with an existing one, // or start a new one. getLoaderManager().initLoader(0, null, this); } public static class MySearchView extends SearchView { public MySearchView(Context context) { super(context); } // The normal SearchView doesn't clear its search text when // collapsed, so we will do this for it. @Override public void onActionViewCollapsed() { setQuery("", false); super.onActionViewCollapsed(); } } @Override public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) { // Place an action bar item for searching. MenuItem item = menu.add("Search"); item.setIcon(android.R.drawable.ic_menu_search); item.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW); mSearchView = new MySearchView(getActivity()); mSearchView.setOnQueryTextListener(this); mSearchView.setOnCloseListener(this); mSearchView.setIconifiedByDefault(true); item.setActionView(mSearchView); } public boolean onQueryTextChange(String newText) { // Called when the action bar search text has changed. Update // the search filter, and restart the loader to do a new query // with this filter. String newFilter = !TextUtils.isEmpty(newText) ? newText : null; // Don't do anything if the filter hasn't actually changed. // Prevents restarting the loader when restoring state. if (mCurFilter == null &amp;&amp; newFilter == null) { return true; } if (mCurFilter != null &amp;&amp; mCurFilter.equals(newFilter)) { return true; } mCurFilter = newFilter; getLoaderManager().restartLoader(0, null, this); return true; } @Override public boolean onQueryTextSubmit(String query) { // Don't care about this. return true; } @Override public boolean onClose() { if (!TextUtils.isEmpty(mSearchView.getQuery())) { mSearchView.setQuery(null, true); } return true; } @Override public void onListItemClick(ListView l, View v, int position, long id) { // Insert desired behavior here. Log.i("FragmentComplexList", "Item clicked: " + id); } // These are the Contacts rows that we will retrieve. static final String[] CONTACTS_SUMMARY_PROJECTION = new String[] { Contacts._ID, Contacts.DISPLAY_NAME, Contacts.CONTACT_STATUS, Contacts.CONTACT_PRESENCE, Contacts.PHOTO_ID, Contacts.LOOKUP_KEY, }; public Loader&lt;Cursor&gt; onCreateLoader(int id, Bundle args) { // This is called when a new Loader needs to be created. This // sample only has one Loader, so we don't care about the ID. // First, pick the base URI to use depending on whether we are // currently filtering. Uri baseUri; if (mCurFilter != null) { baseUri = Uri.withAppendedPath(Contacts.CONTENT_FILTER_URI, Uri.encode(mCurFilter)); } else { baseUri = Contacts.CONTENT_URI; } // Now create and return a CursorLoader that will take care of // creating a Cursor for the data being displayed. String select = "((" + Contacts.DISPLAY_NAME + " NOTNULL) AND (" + Contacts.HAS_PHONE_NUMBER + "=1) AND (" + Contacts.DISPLAY_NAME + " != '' ))"; return new CursorLoader(getActivity(), baseUri, CONTACTS_SUMMARY_PROJECTION, select, null, Contacts.DISPLAY_NAME + " COLLATE LOCALIZED ASC"); } public void onLoadFinished(Loader&lt;Cursor&gt; loader, Cursor data) { // Swap the new cursor in. (The framework will take care of closing the // old cursor once we return.) mAdapter.swapCursor(data); // The list should now be shown. if (isResumed()) { setListShown(true); } else { setListShownNoAnimation(true); } } public void onLoaderReset(Loader&lt;Cursor&gt; loader) { // This is called when the last Cursor provided to onLoadFinished() // above is about to be closed. We need to make sure we are no // longer using it. mAdapter.swapCursor(null); }}</pre> </p>\n<pre><code>public abstract class LoaderManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/LoaderManager.html
LoaderManager.LoaderCallbacks	A										<section class="prog__container"><p> Callback interface for a client to interact with the manager.</p>\n<pre><code>public static interface LoaderManager.LoaderCallbacks\n</code></pre></section>	https://developer.android.com/reference/android/app/LoaderManager.LoaderCallbacks.html
LocalActivityManager	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 13. </strong> <br/> Use the new <pre><code> <a href="https://developer.android.com/reference/android/app/Fragment.html"> Fragment </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/FragmentManager.html"> FragmentManager </a> </code></pre> APIs instead; these are also available on older platforms through the Android compatibility package. </p>\n<pre><code>public class LocalActivityManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/LocalActivityManager.html
MediaRouteActionProvider	A										<section class="prog__container"><p> The media route action provider displays a <pre><code> <a href="https://developer.android.com/reference/android/app/MediaRouteButton.html"> media route button </a> </code></pre> in the application's <pre><code> <a href="https://developer.android.com/reference/android/app/ActionBar.html"> ActionBar </a> </code></pre> to allow the user to select routes and to control the currently selected route. <p> The application must specify the kinds of routes that the user should be allowed to select by specifying the route types with the <pre><code> <a href="https://developer.android.com/reference/android/app/MediaRouteActionProvider.html#setRouteTypes(int)"> setRouteTypes(int) </a> </code></pre> method. </p>\n<pre><code>public class MediaRouteActionProvider\n</code></pre></section>	https://developer.android.com/reference/android/app/MediaRouteActionProvider.html
MediaRouteButton	A										<section class="prog__container"><p> Must be a dimension value, which is a floating point number appended with a unit such as " <pre><code> 14.5sp </code></pre> ".</p>\n<pre><code>public class MediaRouteButton\n</code></pre></section>	https://developer.android.com/reference/android/app/MediaRouteButton.html
NativeActivity	A										<section class="prog__container"><p> Convenience for implementing an activity that will be implemented purely in native code. That is, a game (or game-like thing). There is no need to derive from this class; you can simply declare it in your manifest, and use the NDK APIs from there. <p> A typical manifest would look like: <pre>&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.example.native_activity" android:versionCode="1" android:versionName="1.0"&gt; &lt;!-- This is the platform API where NativeActivity was introduced. --&gt; &lt;uses-sdk android:minSdkVersion="9" /&gt; &lt;!-- This .apk has no Java code itself, so set hasCode to false. --&gt; &lt;application android:label="@string/app_name" android:hasCode="false"&gt; &lt;!-- Our activity is the built-in NativeActivity framework class. This will take care of integrating with our NDK code. --&gt; &lt;activity android:name="android.app.NativeActivity" android:label="@string/app_name" android:configChanges="orientation|keyboardHidden"&gt; &lt;!-- Tell NativeActivity the name of or .so --&gt; &lt;meta-data android:name="android.app.lib_name" android:value="native-activity" /&gt; &lt;intent-filter&gt; &lt;action android:name="android.intent.action.MAIN" /&gt; &lt;category android:name="android.intent.category.LAUNCHER" /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;/application&gt;&lt;/manifest&gt; </pre> <p> A very simple example of native code that is run by NativeActivity follows. This reads input events from the user and uses OpenGLES to draw into the native activity's window. <pre>#include &lt;jni.h&gt;#include &lt;errno.h&gt;#include &lt;EGL/egl.h&gt;#include &lt;GLES/gl.h&gt;#include &lt;android/sensor.h&gt;#include &lt;android/log.h&gt;#include &lt;android_native_app_glue.h&gt;#define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, "native-activity", __VA_ARGS__))#define LOGW(...) ((void)__android_log_print(ANDROID_LOG_WARN, "native-activity", __VA_ARGS__))/** * Our saved state data. */struct saved_state { float angle; int32_t x; int32_t y;};/** * Shared state for our app. */struct engine { struct android_app* app; ASensorManager* sensorManager; const ASensor* accelerometerSensor; ASensorEventQueue* sensorEventQueue; int animating; EGLDisplay display; EGLSurface surface; EGLContext context; int32_t width; int32_t height; struct saved_state state;};/** * Initialize an EGL context for the current display. */static int engine_init_display(struct engine* engine) { // initialize OpenGL ES and EGL /* * Here specify the attributes of the desired configuration. * Below, we select an EGLConfig with at least 8 bits per color * component compatible with on-screen windows */ const EGLint attribs[] = { EGL_SURFACE_TYPE, EGL_WINDOW_BIT, EGL_BLUE_SIZE, 8, EGL_GREEN_SIZE, 8, EGL_RED_SIZE, 8, EGL_NONE }; EGLint w, h, dummy, format; EGLint numConfigs; EGLConfig config; EGLSurface surface; EGLContext context; EGLDisplay display = eglGetDisplay(EGL_DEFAULT_DISPLAY); eglInitialize(display, 0, 0); /* Here, the application chooses the configuration it desires. In this * sample, we have a very simplified selection process, where we pick * the first EGLConfig that matches our criteria */ eglChooseConfig(display, attribs, &amp;config, 1, &amp;numConfigs); /* EGL_NATIVE_VISUAL_ID is an attribute of the EGLConfig that is * guaranteed to be accepted by ANativeWindow_setBuffersGeometry(). * As soon as we picked a EGLConfig, we can safely reconfigure the * ANativeWindow buffers to match, using EGL_NATIVE_VISUAL_ID. */ eglGetConfigAttrib(display, config, EGL_NATIVE_VISUAL_ID, &amp;format); ANativeWindow_setBuffersGeometry(engine-&gt;app-&gt;window, 0, 0, format); surface = eglCreateWindowSurface(display, config, engine-&gt;app-&gt;window, NULL); context = eglCreateContext(display, config, NULL, NULL); if (eglMakeCurrent(display, surface, surface, context) == EGL_FALSE) { LOGW("Unable to eglMakeCurrent"); return -1; } eglQuerySurface(display, surface, EGL_WIDTH, &amp;w); eglQuerySurface(display, surface, EGL_HEIGHT, &amp;h); engine-&gt;display = display; engine-&gt;context = context; engine-&gt;surface = surface; engine-&gt;width = w; engine-&gt;height = h; engine-&gt;state.angle = 0; // Initialize GL state. glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_FASTEST); glEnable(GL_CULL_FACE); glShadeModel(GL_SMOOTH); glDisable(GL_DEPTH_TEST); return 0;}/** * Just the current frame in the display. */static void engine_draw_frame(struct engine* engine) { if (engine-&gt;display == NULL) { // No display. return; } // Just fill the screen with a color. glClearColor(((float)engine-&gt;state.x)/engine-&gt;width, engine-&gt;state.angle, ((float)engine-&gt;state.y)/engine-&gt;height, 1); glClear(GL_COLOR_BUFFER_BIT); eglSwapBuffers(engine-&gt;display, engine-&gt;surface);}/** * Tear down the EGL context currently associated with the display. */static void engine_term_display(struct engine* engine) { if (engine-&gt;display != EGL_NO_DISPLAY) { eglMakeCurrent(engine-&gt;display, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT); if (engine-&gt;context != EGL_NO_CONTEXT) { eglDestroyContext(engine-&gt;display, engine-&gt;context); } if (engine-&gt;surface != EGL_NO_SURFACE) { eglDestroySurface(engine-&gt;display, engine-&gt;surface); } eglTerminate(engine-&gt;display); } engine-&gt;animating = 0; engine-&gt;display = EGL_NO_DISPLAY; engine-&gt;context = EGL_NO_CONTEXT; engine-&gt;surface = EGL_NO_SURFACE;}/** * Process the next input event. */static int32_t engine_handle_input(struct android_app* app, AInputEvent* event) { struct engine* engine = (struct engine*)app-&gt;userData; if (AInputEvent_getType(event) == AINPUT_EVENT_TYPE_MOTION) { engine-&gt;animating = 1; engine-&gt;state.x = AMotionEvent_getX(event, 0); engine-&gt;state.y = AMotionEvent_getY(event, 0); return 1; } return 0;}/** * Process the next main command. */static void engine_handle_cmd(struct android_app* app, int32_t cmd) { struct engine* engine = (struct engine*)app-&gt;userData; switch (cmd) { case APP_CMD_SAVE_STATE: // The system has asked us to save our current state. Do so. engine-&gt;app-&gt;savedState = malloc(sizeof(struct saved_state)); *((struct saved_state*)engine-&gt;app-&gt;savedState) = engine-&gt;state; engine-&gt;app-&gt;savedStateSize = sizeof(struct saved_state); break; case APP_CMD_INIT_WINDOW: // The window is being shown, get it ready. if (engine-&gt;app-&gt;window != NULL) { engine_init_display(engine); engine_draw_frame(engine); } break; case APP_CMD_TERM_WINDOW: // The window is being hidden or closed, clean it up. engine_term_display(engine); break; case APP_CMD_GAINED_FOCUS: // When our app gains focus, we start monitoring the accelerometer. if (engine-&gt;accelerometerSensor != NULL) { ASensorEventQueue_enableSensor(engine-&gt;sensorEventQueue, engine-&gt;accelerometerSensor); // We'd like to get 60 events per second (in us). ASensorEventQueue_setEventRate(engine-&gt;sensorEventQueue, engine-&gt;accelerometerSensor, (1000L/60)*1000); } break; case APP_CMD_LOST_FOCUS: // When our app loses focus, we stop monitoring the accelerometer. // This is to avoid consuming battery while not being used. if (engine-&gt;accelerometerSensor != NULL) { ASensorEventQueue_disableSensor(engine-&gt;sensorEventQueue, engine-&gt;accelerometerSensor); } // Also stop animating. engine-&gt;animating = 0; engine_draw_frame(engine); break; }}/** * This is the main entry point of a native application that is using * android_native_app_glue. It runs in its own thread, with its own * event loop for receiving input events and doing other things. */void android_main(struct android_app* state) { struct engine engine; // Make sure glue isn't stripped. app_dummy(); memset(&amp;engine, 0, sizeof(engine)); state-&gt;userData = &amp;engine; state-&gt;onAppCmd = engine_handle_cmd; state-&gt;onInputEvent = engine_handle_input; engine.app = state; // Prepare to monitor accelerometer engine.sensorManager = ASensorManager_getInstance(); engine.accelerometerSensor = ASensorManager_getDefaultSensor(engine.sensorManager, ASENSOR_TYPE_ACCELEROMETER); engine.sensorEventQueue = ASensorManager_createEventQueue(engine.sensorManager, state-&gt;looper, LOOPER_ID_USER, NULL, NULL); if (state-&gt;savedState != NULL) { // We are starting with a previous saved state; restore from it. engine.state = *(struct saved_state*)state-&gt;savedState; } // loop waiting for stuff to do. while (1) { // Read all pending events. int ident; int events; struct android_poll_source* source; // If not animating, we will block forever waiting for events. // If animating, we loop until all events are read, then continue // to draw the next frame of animation. while ((ident=ALooper_pollAll(engine.animating ? 0 : -1, NULL, &amp;events, (void**)&amp;source)) &gt;= 0) { // Process this event. if (source != NULL) { source-&gt;process(state, source); } // If a sensor has data, process it now. if (ident == LOOPER_ID_USER) { if (engine.accelerometerSensor != NULL) { ASensorEvent event; while (ASensorEventQueue_getEvents(engine.sensorEventQueue, &amp;event, 1) &gt; 0) { LOGI("accelerometer: x=%f y=%f z=%f", event.acceleration.x, event.acceleration.y, event.acceleration.z); } } } // Check if we are exiting. if (state-&gt;destroyRequested != 0) { engine_term_display(&amp;engine); return; } } if (engine.animating) { // Done with events; draw next animation frame. engine.state.angle += .01f; if (engine.state.angle &gt; 1) { engine.state.angle = 0; } // Drawing is throttled to the screen update rate, so there // is no need to do timing here. engine_draw_frame(&amp;engine); } }}</pre> </p>\n<pre><code>public class NativeActivity\n</code></pre></section>	https://developer.android.com/reference/android/app/NativeActivity.html
Notification.Action.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Action.html"> Notification.Action </a> </code></pre> objects.</p>\n<pre><code>public static final class Notification.Action.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/Notification.Action.Builder.html
Notification.Action.Extender	A										<section class="prog__container"><p> Extender interface for use with <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Action.Builder.html#extend(android.app.Notification.Action.Extender)"> extend(Notification.Action.Extender) </a> </code></pre> . Extenders may be used to add metadata or change options on an action builder.</p>\n<pre><code>public static interface Notification.Action.Extender\n</code></pre></section>	https://developer.android.com/reference/android/app/Notification.Action.Extender.html
Notification.Action	A										<section class="prog__container"><p> Structure to encapsulate a named action that can be shown as part of this notification. It must include an icon, a label, and a <pre><code> <a href="https://developer.android.com/reference/android/app/PendingIntent.html"> PendingIntent </a> </code></pre> to be fired when the action is selected by the user. <p> Apps should use <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#addAction(int, java.lang.CharSequence, android.app.PendingIntent)"> addAction(int, CharSequence, PendingIntent) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#addAction(android.app.Notification.Action)"> addAction(Notification.Action) </a> </code></pre> to attach actions. </p>\n<pre><code>public static class Notification.Action\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/Notification.Action.html
Notification.Action.WearableExtender	A										<section class="prog__container"><p> Wearable extender for notification actions. To add extensions to an action, create a new <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html"> Notification.Action.WearableExtender </a> </code></pre> object using the <pre><code> WearableExtender() </code></pre> constructor and apply it to a <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Action.Builder.html"> Notification.Action.Builder </a> </code></pre> using <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Action.Builder.html#extend(android.app.Notification.Action.Extender)"> extend(Notification.Action.Extender) </a> </code></pre> . <pre class="prettyprint"> Notification.Action action = new Notification.Action.Builder( R.drawable.archive_all, "Archive all", actionIntent) .extend(new Notification.Action.WearableExtender() .setAvailableOffline(false)) .build();</pre></p>\n<pre><code>public static final class Notification.Action.WearableExtender\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html
Notification.BigPictureStyle	A										<section class="prog__container"><p> Helper class for generating large-format notifications that include a large image attachment. Here's how you'd set the <pre><code> BigPictureStyle </code></pre> on a notification: <pre class="prettyprint"> Notification notif = new Notification.Builder(mContext) .setContentTitle("New photo from " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_post) .setLargeIcon(aBitmap) .setStyle(new Notification.BigPictureStyle() .bigPicture(aBigBitmap)) .build(); </pre></p>\n<pre><code>public static class Notification.BigPictureStyle\n</code></pre></section>	https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html
Notification.BigTextStyle	A										<section class="prog__container"><p> Helper class for generating large-format notifications that include a lot of text. Here's how you'd set the <pre><code> BigTextStyle </code></pre> on a notification: <pre class="prettyprint"> Notification notif = new Notification.Builder(mContext) .setContentTitle("New mail from " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_mail) .setLargeIcon(aBitmap) .setStyle(new Notification.BigTextStyle() .bigText(aVeryLongString)) .build(); </pre></p>\n<pre><code>public static class Notification.BigTextStyle\n</code></pre></section>	https://developer.android.com/reference/android/app/Notification.BigTextStyle.html
Notification.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.html"> Notification </a> </code></pre> objects. Provides a convenient way to set the various fields of a <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.html"> Notification </a> </code></pre> and generate content views using the platform's notification layout template. If your app supports versions of Android as old as API level 4, you can instead use <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html"> NotificationCompat.Builder </a> </code></pre> , available in the <a href="https://developer.android.com/tools/extras/support-library.html"> Android Support library </a> . <p> Example: <pre class="prettyprint"> Notification noti = new Notification.Builder(mContext) .setContentTitle("New mail from " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_mail) .setLargeIcon(aBitmap) .build(); </pre> </p>\n<pre><code>public static class Notification.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/Notification.Builder.html
Notification.CarExtender.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.CarExtender.UnreadConversation.html"> Notification.CarExtender.UnreadConversation </a> </code></pre> objects.</p>\n<pre><code>public static class Notification.CarExtender.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/Notification.CarExtender.Builder.html
Notification.CarExtender	A										<section class="prog__container"><p> <p> Helper class to add Android Auto extensions to notifications. To create a notification with car extensions: <ol> <li> Create an <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html"> Notification.Builder </a> </code></pre> , setting any desired properties. <li> Create a <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.CarExtender.html"> Notification.CarExtender </a> </code></pre> . <li> Set car-specific properties using the <pre><code> add </code></pre> and <pre><code> set </code></pre> methods of <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.CarExtender.html"> Notification.CarExtender </a> </code></pre> . <li> Call <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#extend(android.app.Notification.Extender)"> extend(Notification.Extender) </a> </code></pre> to apply the extensions to a notification. </li> </li> </li> </li> </ol> <pre class="prettyprint"> Notification notification = new Notification.Builder(context) ... .extend(new CarExtender() .set*(...)) .build(); </pre> <p> Car extensions can be accessed on an existing notification by using the <pre><code> CarExtender(Notification) </code></pre> constructor, and then using the <pre><code> get </code></pre> methods to access values. </p>\n<pre><code>public static final class Notification.CarExtender\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/Notification.CarExtender.html
Notification.CarExtender.UnreadConversation	A										<section class="prog__container"><p> A class which holds the unread messages from a conversation.</p>\n<pre><code>public static class Notification.CarExtender.UnreadConversation\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/Notification.CarExtender.UnreadConversation.html
Notification.DecoratedCustomViewStyle	A										<section class="prog__container"><p> Notification style for custom views that are decorated by the system <p> Instead of providing a notification that is completely custom, a developer can set this style and still obtain system decorations like the notification header with the expand affordance and actions. <p> Use <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#setCustomContentView(android.widget.RemoteViews)"> setCustomContentView(RemoteViews) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#setCustomBigContentView(android.widget.RemoteViews)"> setCustomBigContentView(RemoteViews) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#setCustomHeadsUpContentView(android.widget.RemoteViews)"> setCustomHeadsUpContentView(RemoteViews) </a> </code></pre> to set the corresponding custom views to display. To use this style with your Notification, feed it to <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#setStyle(android.app.Notification.Style)"> setStyle(android.app.Notification.Style) </a> </code></pre> like so: <pre class="prettyprint"> Notification noti = new Notification.Builder() .setSmallIcon(R.drawable.ic_stat_player) .setLargeIcon(albumArtBitmap)) .setCustomContentView(contentView); .setStyle(<b>new Notification.DecoratedCustomViewStyle()</b>) .build(); </pre> </p>\n<pre><code>public static class Notification.DecoratedCustomViewStyle\n</code></pre></section>	https://developer.android.com/reference/android/app/Notification.DecoratedCustomViewStyle.html
Notification.DecoratedMediaCustomViewStyle	A										<section class="prog__container"><p> Notification style for media custom views that are decorated by the system <p> Instead of providing a media notification that is completely custom, a developer can set this style and still obtain system decorations like the notification header with the expand affordance and actions. <p> Use <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#setCustomContentView(android.widget.RemoteViews)"> setCustomContentView(RemoteViews) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#setCustomBigContentView(android.widget.RemoteViews)"> setCustomBigContentView(RemoteViews) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#setCustomHeadsUpContentView(android.widget.RemoteViews)"> setCustomHeadsUpContentView(RemoteViews) </a> </code></pre> to set the corresponding custom views to display. To use this style with your Notification, feed it to <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#setStyle(android.app.Notification.Style)"> setStyle(android.app.Notification.Style) </a> </code></pre> like so: <pre class="prettyprint"> Notification noti = new Notification.Builder() .setSmallIcon(R.drawable.ic_stat_player) .setLargeIcon(albumArtBitmap)) .setCustomContentView(contentView); .setStyle(<b>new Notification.DecoratedMediaCustomViewStyle()</b> .setMediaSession(mySession)) .build(); </pre> </p>\n<pre><code>public static class Notification.DecoratedMediaCustomViewStyle\n</code></pre></section>	https://developer.android.com/reference/android/app/Notification.DecoratedMediaCustomViewStyle.html
Notification.Extender	A										<section class="prog__container"><p> Extender interface for use with <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Action.Builder.html#extend(android.app.Notification.Action.Extender)"> extend(Notification.Action.Extender) </a> </code></pre> . Extenders may be used to add metadata or change options on a notification builder.</p>\n<pre><code>public static interface Notification.Extender\n</code></pre></section>	https://developer.android.com/reference/android/app/Notification.Extender.html
Notification	A										<section class="prog__container"><p> A class that represents how a persistent notification is to be presented to the user using the <pre><code> <a href="https://developer.android.com/reference/android/app/NotificationManager.html"> NotificationManager </a> </code></pre> . <p> The <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html"> Notification.Builder </a> </code></pre> has been added to make it easier to construct Notifications. </p>\n<pre><code>public class Notification\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/Notification.html
Notification.InboxStyle	A										<section class="prog__container"><p> Helper class for generating large-format notifications that include a list of (up to 5) strings. Here's how you'd set the <pre><code> InboxStyle </code></pre> on a notification: <pre class="prettyprint"> Notification notif = new Notification.Builder(mContext) .setContentTitle("5 New mails from " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_mail) .setLargeIcon(aBitmap) .setStyle(new Notification.InboxStyle() .addLine(str1) .addLine(str2) .setContentTitle("") .setSummaryText("+3 more")) .build(); </pre></p>\n<pre><code>public static class Notification.InboxStyle\n</code></pre></section>	https://developer.android.com/reference/android/app/Notification.InboxStyle.html
Notification.MediaStyle	A										<section class="prog__container"><p> Notification style for media playback notifications. In the expanded form, <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.html#bigContentView"> bigContentView </a> </code></pre> , up to 5 <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Action.html"> Notification.Action </a> </code></pre> s specified with <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#addAction(android.app.Notification.Action)"> addAction </a> </code></pre> will be shown as icon-only pushbuttons, suitable for transport controls. The Bitmap given to <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#setLargeIcon(android.graphics.Bitmap)"> setLargeIcon() </a> </code></pre> will be treated as album artwork. Unlike the other styles provided here, MediaStyle can also modify the standard-size <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.html#contentView"> contentView </a> </code></pre> ; by providing action indices to <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.MediaStyle.html#setShowActionsInCompactView(int...)"> setShowActionsInCompactView(int) </a> </code></pre> you can promote up to 3 actions to be displayed in the standard view alongside the usual content. Notifications created with MediaStyle will have their category set to <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_TRANSPORT"> CATEGORY_TRANSPORT </a> </code></pre> unless you set a different category using <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#setCategory(java.lang.String)"> setCategory() </a> </code></pre> . Finally, if you attach a <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSession.Token.html"> MediaSession.Token </a> </code></pre> using <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.MediaStyle.html#setMediaSession(android.media.session.MediaSession.Token)"> setMediaSession(MediaSession.Token) </a> </code></pre> , the System UI can identify this as a notification representing an active media session and respond accordingly (by showing album artwork in the lockscreen, for example). To use this style with your Notification, feed it to <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#setStyle(android.app.Notification.Style)"> setStyle(android.app.Notification.Style) </a> </code></pre> like so: <pre class="prettyprint"> Notification noti = new Notification.Builder() .setSmallIcon(R.drawable.ic_stat_player) .setContentTitle("Track title") .setContentText("Artist - Album") .setLargeIcon(albumArtBitmap)) .setStyle(<b>new Notification.MediaStyle()</b> .setMediaSession(mySession)) .build(); </pre></p>\n<pre><code>public static class Notification.MediaStyle\n</code></pre></section>	https://developer.android.com/reference/android/app/Notification.MediaStyle.html
Notification.MessagingStyle	A										<section class="prog__container"><p> Helper class for generating large-format notifications that include multiple back-and-forth messages of varying types between any number of people. <br> If the platform does not provide large-format notifications, this method has no effect. The user will always see the normal notification view. <br> This class is a "rebuilder": It attaches to a Builder object and modifies its behavior, like so: <pre class="prettyprint"> Notification noti = new Notification.Builder() .setContentTitle("2 new messages wtih " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_message) .setLargeIcon(aBitmap) .setStyle(new Notification.MessagingStyle(resources.getString(R.string.reply_name)) .addMessage(messages[0].getText(), messages[0].getTime(), messages[0].getSender()) .addMessage(messages[1].getText(), messages[1].getTime(), messages[1].getSender())) .build(); </pre> </br> </br></p>\n<pre><code>public static class Notification.MessagingStyle\n</code></pre></section>	https://developer.android.com/reference/android/app/Notification.MessagingStyle.html
Notification.MessagingStyle.Message	A										<section class="prog__container"><p> Constructor</p>\n<pre><code>public static final class Notification.MessagingStyle.Message\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/Notification.MessagingStyle.Message.html
Notification.Style	A										<section class="prog__container"><p> An object that can apply a rich notification style to a <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html"> Notification.Builder </a> </code></pre> object.</p>\n<pre><code>public static abstract class Notification.Style\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/Notification.Style.html
Notification.WearableExtender	A										<section class="prog__container"><p> Helper class to add wearable extensions to notifications. <p class="note"> See <a href="https://developer.android.com/wear/notifications/creating.html"> Creating Notifications for Android Wear </a> for more information on how to use this class. <p> To create a notification with wearable extensions: <ol> <li> Create a <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html"> Notification.Builder </a> </code></pre> , setting any desired properties. <li> Create a <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html"> Notification.WearableExtender </a> </code></pre> . <li> Set wearable-specific properties using the <pre><code> add </code></pre> and <pre><code> set </code></pre> methods of <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.WearableExtender.html"> Notification.WearableExtender </a> </code></pre> . <li> Call <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#extend(android.app.Notification.Extender)"> extend(Notification.Extender) </a> </code></pre> to apply the extensions to a notification. <li> Post the notification to the notification system with the <pre><code> NotificationManager.notify(...) </code></pre> methods. </li> </li> </li> </li> </li> </ol> <pre class="prettyprint"> Notification notif = new Notification.Builder(mContext) .setContentTitle("New mail from " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_mail) .extend(new Notification.WearableExtender() .setContentIcon(R.drawable.new_mail)) .build(); NotificationManager notificationManger = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE); notificationManger.notify(0, notif);</pre> <p> Wearable extensions can be accessed on an existing notification by using the <pre><code> WearableExtender(Notification) </code></pre> constructor, and then using the <pre><code> get </code></pre> methods to access values. <pre class="prettyprint"> Notification.WearableExtender wearableExtender = new Notification.WearableExtender( notification); List&lt;Notification&gt; pages = wearableExtender.getPages();</pre> </p>\n<pre><code>public static final class Notification.WearableExtender\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/Notification.WearableExtender.html
NotificationManager	A										<section class="prog__container"><p> Class to notify the user of events that happen. This is how you tell the user that something has happened in the background. <p> Notifications can take different forms: <ul> <li> A persistent icon that goes in the status bar and is accessible through the launcher, (when the user selects it, a designated Intent can be launched), </li> <li> Turning on or flashing LEDs on the device, or </li> <li> Alerting the user by flashing the backlight, playing a sound, or vibrating. </li> </ul> <p> Each of the notify methods takes an int id parameter and optionally a <pre><code> <a href="https://developer.android.com/reference/java/lang/String.html"> String </a> </code></pre> tag parameter, which may be <pre><code> null </code></pre> . These parameters are used to form a pair (tag, id), or ( <pre><code> null </code></pre> , id) if tag is unspecified. This pair identifies this notification from your app to the system, so that pair should be unique within your app. If you call one of the notify methods with a (tag, id) pair that is currently active and a new set of notification parameters, it will be updated. For example, if you pass a new status bar icon, the old icon in the status bar will be replaced with the new one. This is also the same tag and id you pass to the <pre><code> <a href="https://developer.android.com/reference/android/app/NotificationManager.html#cancel(int)"> cancel(int) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/app/NotificationManager.html#cancel(java.lang.String, int)"> cancel(String, int) </a> </code></pre> method to clear this notification. <p> You do not instantiate this class directly; instead, retrieve it through <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.Class&lt;T&gt;)"> getSystemService(Class <t> ) </t> </a> </code></pre> . </p>\n<pre><code>public class NotificationManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/NotificationManager.html
NotificationManager.Policy	A										<section class="prog__container"><p> Notification policy configuration. Represents user-preferences for notification filtering.</p>\n<pre><code>public static class NotificationManager.Policy\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/NotificationManager.Policy.html
android.app	A										<section class="prog__container">Contains high-level classes encapsulating the overall Android application model.</section>	https://developer.android.com/reference/android/app/package-summary.html
PendingIntent.CanceledException	A										<section class="prog__container"><p> Exception thrown when trying to send through a PendingIntent that has been canceled or is otherwise no longer able to execute the request.</p>\n<pre><code>public static class PendingIntent.CanceledException\n</code></pre></section>	https://developer.android.com/reference/android/app/PendingIntent.CanceledException.html
PendingIntent	A										<section class="prog__container"><p> A description of an Intent and target action to perform with it. Instances of this class are created with <pre><code> <a href="https://developer.android.com/reference/android/app/PendingIntent.html#getActivity(android.content.Context, int, android.content.Intent, int)"> getActivity(Context, int, Intent, int) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/app/PendingIntent.html#getActivities(android.content.Context, int, android.content.Intent[], int)"> getActivities(Context, int, Intent[], int) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/app/PendingIntent.html#getBroadcast(android.content.Context, int, android.content.Intent, int)"> getBroadcast(Context, int, Intent, int) </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/app/PendingIntent.html#getService(android.content.Context, int, android.content.Intent, int)"> getService(Context, int, Intent, int) </a> </code></pre> ; the returned object can be handed to other applications so that they can perform the action you described on your behalf at a later time. <p> By giving a PendingIntent to another application, you are granting it the right to perform the operation you have specified as if the other application was yourself (with the same permissions and identity). As such, you should be careful about how you build the PendingIntent: almost always, for example, the base Intent you supply should have the component name explicitly set to one of your own components, to ensure it is ultimately sent there and nowhere else. <p> A PendingIntent itself is simply a reference to a token maintained by the system describing the original data used to retrieve it. This means that, even if its owning application's process is killed, the PendingIntent itself will remain usable from other processes that have been given it. If the creating application later re-retrieves the same kind of PendingIntent (same operation, same Intent action, data, categories, and components, and same flags), it will receive a PendingIntent representing the same token if that is still valid, and can thus call <pre><code> <a href="https://developer.android.com/reference/android/app/PendingIntent.html#cancel()"> cancel() </a> </code></pre> to remove it. <p> Because of this behavior, it is important to know when two Intents are considered to be the same for purposes of retrieving a PendingIntent. A common mistake people make is to create multiple PendingIntent objects with Intents that only vary in their "extra" contents, expecting to get a different PendingIntent each time. This does <em> not </em> happen. The parts of the Intent that are used for matching are the same ones defined by <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#filterEquals(android.content.Intent)"> Intent.filterEquals </a> </code></pre> . If you use two Intent objects that are equivalent as per <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#filterEquals(android.content.Intent)"> Intent.filterEquals </a> </code></pre> , then you will get the same PendingIntent for both of them. <p> There are two typical ways to deal with this. <p> If you truly need multiple distinct PendingIntent objects active at the same time (such as to use as two notifications that are both shown at the same time), then you will need to ensure there is something that is different about them to associate them with different PendingIntents. This may be any of the Intent attributes considered by <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#filterEquals(android.content.Intent)"> Intent.filterEquals </a> </code></pre> , or different request code integers supplied to <pre><code> <a href="https://developer.android.com/reference/android/app/PendingIntent.html#getActivity(android.content.Context, int, android.content.Intent, int)"> getActivity(Context, int, Intent, int) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/app/PendingIntent.html#getActivities(android.content.Context, int, android.content.Intent[], int)"> getActivities(Context, int, Intent[], int) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/app/PendingIntent.html#getBroadcast(android.content.Context, int, android.content.Intent, int)"> getBroadcast(Context, int, Intent, int) </a> </code></pre> , or <pre><code> <a href="https://developer.android.com/reference/android/app/PendingIntent.html#getService(android.content.Context, int, android.content.Intent, int)"> getService(Context, int, Intent, int) </a> </code></pre> . <p> If you only need one PendingIntent active at a time for any of the Intents you will use, then you can alternatively use the flags <pre><code> <a href="https://developer.android.com/reference/android/app/PendingIntent.html#FLAG_CANCEL_CURRENT"> FLAG_CANCEL_CURRENT </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/app/PendingIntent.html#FLAG_UPDATE_CURRENT"> FLAG_UPDATE_CURRENT </a> </code></pre> to either cancel or modify whatever current PendingIntent is associated with the Intent you are supplying. </p>\n<pre><code>public final class PendingIntent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/PendingIntent.html
PendingIntent.OnFinished	A										<section class="prog__container"><p> Callback interface for discovering when a send operation has completed. Primarily for use with a PendingIntent that is performing a broadcast, this provides the same information as calling <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)"> Context.sendBroadcast() </a> </code></pre> with a final BroadcastReceiver.</p>\n<pre><code>public static interface PendingIntent.OnFinished\n</code></pre></section>	https://developer.android.com/reference/android/app/PendingIntent.OnFinished.html
Presentation	A										<section class="prog__container"><p> Base class for presentations. <p> A presentation is a special kind of dialog whose purpose is to present content on a secondary display. A <pre><code> <a href="https://developer.android.com/reference/android/app/Presentation.html"> Presentation </a> </code></pre> is associated with the target <pre><code> <a href="https://developer.android.com/reference/android/view/Display.html"> Display </a> </code></pre> at creation time and configures its context and resource configuration according to the display's metrics. </p>\n<pre><code>public class Presentation\n</code></pre></section>	https://developer.android.com/reference/android/app/Presentation.html
ProgressDialog	A										<section class="prog__container"><p> <p> A dialog showing a progress indicator and an optional text message or view. Only a text message or a view can be used at the same time. </p>\n<pre><code>public class ProgressDialog\n</code></pre></section>	https://developer.android.com/reference/android/app/ProgressDialog.html
RemoteInput.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> <a href="https://developer.android.com/reference/android/app/RemoteInput.html"> RemoteInput </a> </code></pre> objects.</p>\n<pre><code>public static final class RemoteInput.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/RemoteInput.Builder.html
RemoteInput	A										<section class="prog__container"><p> A <pre><code> RemoteInput </code></pre> object specifies input to be collected from a user to be passed along with an intent inside a <pre><code> <a href="https://developer.android.com/reference/android/app/PendingIntent.html"> PendingIntent </a> </code></pre> that is sent. Always use <pre><code> <a href="https://developer.android.com/reference/android/app/RemoteInput.Builder.html"> RemoteInput.Builder </a> </code></pre> to create instances of this class. <p class="note"> See <a href="https://developer.android.com/wear/notifications/remote-input.html"> Receiving Voice Input from a Notification </a> for more information on how to use this class. <p> The following example adds a <pre><code> RemoteInput </code></pre> to a <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Action.html"> Notification.Action </a> </code></pre> , sets the result key as <pre><code> quick_reply </code></pre> , and sets the label as <pre><code> Quick reply </code></pre> . Users are prompted to input a response when they trigger the action. The results are sent along with the intent and can be retrieved with the result key (provided to the <pre><code> <a href="https://developer.android.com/reference/android/app/RemoteInput.Builder.html"> RemoteInput.Builder </a> </code></pre> constructor) from the Bundle returned by <pre><code> <a href="https://developer.android.com/reference/android/app/RemoteInput.html#getResultsFromIntent(android.content.Intent)"> getResultsFromIntent(Intent) </a> </code></pre> . <pre class="prettyprint"> public static final String KEY_QUICK_REPLY_TEXT = "quick_reply"; Notification.Action action = new Notification.Action.Builder( R.drawable.reply, "Reply", actionIntent) <b>.addRemoteInput(new RemoteInput.Builder(KEY_QUICK_REPLY_TEXT) .setLabel("Quick reply").build()</b>) .build();</pre> <p> When the <pre><code> <a href="https://developer.android.com/reference/android/app/PendingIntent.html"> PendingIntent </a> </code></pre> is fired, the intent inside will contain the input results if collected. To access these results, use the <pre><code> <a href="https://developer.android.com/reference/android/app/RemoteInput.html#getResultsFromIntent(android.content.Intent)"> getResultsFromIntent(Intent) </a> </code></pre> function. The result values will present under the result key passed to the <pre><code> <a href="https://developer.android.com/reference/android/app/RemoteInput.Builder.html"> RemoteInput.Builder </a> </code></pre> constructor. <pre class="prettyprint"> public static final String KEY_QUICK_REPLY_TEXT = "quick_reply"; Bundle results = RemoteInput.getResultsFromIntent(intent); if (results != null) { CharSequence quickReplyResult = results.getCharSequence(KEY_QUICK_REPLY_TEXT); }</pre> </p>\n<pre><code>public final class RemoteInput\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/RemoteInput.html
SearchableInfo	A										<section class="prog__container"><p> Searchability meta-data for an activity. Only applications that search other applications should need to use this class. See <a href="https://developer.android.com/guide/topics/search/searchable-config.html"> Searchable Configuration </a> for more information about declaring searchability meta-data for your application.</p>\n<pre><code>public final class SearchableInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/SearchableInfo.html
SearchManager	A										<section class="prog__container"><p> This class provides access to the system search services. <p> In practice, you won't interact with this class directly, as search services are provided through methods in <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> and the <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_SEARCH"> ACTION_SEARCH </a> </code></pre> <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html"> Intent </a> </code></pre> . If you do require direct access to the SearchManager, do not instantiate this class directly. Instead, retrieve it through <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.Class&lt;T&gt;)"> context.getSystemService(Context.SEARCH_SERVICE) </a> </code></pre> . </p>\n<pre><code>public class SearchManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/SearchManager.html
SearchManager.OnCancelListener	A										<section class="prog__container"><p> See <pre><code> <a href="https://developer.android.com/reference/android/app/SearchManager.html#setOnCancelListener(android.app.SearchManager.OnCancelListener)"> setOnCancelListener(SearchManager.OnCancelListener) </a> </code></pre> for configuring your activity to monitor search UI state.</p>\n<pre><code>public static interface SearchManager.OnCancelListener\n</code></pre></section>	https://developer.android.com/reference/android/app/SearchManager.OnCancelListener.html
SearchManager.OnDismissListener	A										<section class="prog__container"><p> See <pre><code> <a href="https://developer.android.com/reference/android/app/SearchManager.html#setOnDismissListener(android.app.SearchManager.OnDismissListener)"> setOnDismissListener(SearchManager.OnDismissListener) </a> </code></pre> for configuring your activity to monitor search UI state.</p>\n<pre><code>public static interface SearchManager.OnDismissListener\n</code></pre></section>	https://developer.android.com/reference/android/app/SearchManager.OnDismissListener.html
Service	A										<section class="prog__container"><p> A Service is an application component representing either an application's desire to perform a longer-running operation while not interacting with the user or to supply functionality for other applications to use. Each service class must have a corresponding <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#AndroidManifestService"> &lt;service&gt; </a> </code></pre> declaration in its package's <pre><code> AndroidManifest.xml </code></pre> . Services can be started with <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)"> Context.startService() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent, android.content.ServiceConnection, int)"> Context.bindService() </a> </code></pre> . <p> Note that services, like other application objects, run in the main thread of their hosting process. This means that, if your service is going to do any CPU intensive (such as MP3 playback) or blocking (such as networking) operations, it should spawn its own thread in which to do that work. More information on this can be found in <a href="https://developer.android.com/guide/topics/fundamentals/processes-and-threads.html"> Processes and Threads </a> . The <pre><code> <a href="https://developer.android.com/reference/android/app/IntentService.html"> IntentService </a> </code></pre> class is available as a standard implementation of Service that has its own thread where it schedules its work to be done. </p>\n<pre><code>public abstract class Service\n</code></pre></section>	https://developer.android.com/reference/android/app/Service.html
SharedElementCallback	A										<section class="prog__container"><p> Listener provided in <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#setEnterSharedElementCallback(android.app.SharedElementCallback)"> setEnterSharedElementCallback(SharedElementCallback) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#setExitSharedElementCallback(android.app.SharedElementCallback)"> setExitSharedElementCallback(SharedElementCallback) </a> </code></pre> as well as <pre><code> <a href="https://developer.android.com/reference/android/app/Fragment.html#setEnterSharedElementCallback(android.app.SharedElementCallback)"> setEnterSharedElementCallback(SharedElementCallback) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/Fragment.html#setExitSharedElementCallback(android.app.SharedElementCallback)"> setExitSharedElementCallback(SharedElementCallback) </a> </code></pre> to monitor the Shared element transitions. The events can be used to customize Activity and Fragment Transition behavior.</p>\n<pre><code>public abstract class SharedElementCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/SharedElementCallback.html
SharedElementCallback.OnSharedElementsReadyListener	A										<section class="prog__container"><p> Listener to be called after <pre><code> <a href="https://developer.android.com/reference/android/app/SharedElementCallback.html#onSharedElementsArrived(java.util.List&lt;java.lang.String&gt;, java.util.List&lt;android.view.View&gt;, android.app.SharedElementCallback.OnSharedElementsReadyListener)"> onSharedElementsArrived(List, List, OnSharedElementsReadyListener) </a> </code></pre> when the shared elements are ready to be hidden in the source Activity and shown in the destination Activity.</p>\n<pre><code>public static interface SharedElementCallback.OnSharedElementsReadyListener\n</code></pre></section>	https://developer.android.com/reference/android/app/SharedElementCallback.OnSharedElementsReadyListener.html
TabActivity	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 13. </strong> <br/> New applications should use Fragments instead of this class; to continue to run on older devices, you can use the v4 support library which provides a version of the Fragment API that is compatible down to <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#DONUT"> DONUT </a> </code></pre> . </p>\n<pre><code>public class TabActivity\n</code></pre></section>	https://developer.android.com/reference/android/app/TabActivity.html
TaskStackBuilder	A										<section class="prog__container"><p> Utility class for constructing synthetic back stacks for cross-task navigation on Android 3.0 and newer. <p> In API level 11 (Android 3.0/Honeycomb) the recommended conventions for app navigation using the back key changed. The back key's behavior is local to the current task and does not capture navigation across different tasks. Navigating across tasks and easily reaching the previous task is accomplished through the "recents" UI, accessible through the software-provided Recents key on the navigation or system bar. On devices with the older hardware button configuration the recents UI can be accessed with a long press on the Home key. </p>\n<pre><code>public class TaskStackBuilder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/TaskStackBuilder.html
TimePickerDialog	A										<section class="prog__container"><p> A dialog that prompts the user for the time of day using a <pre><code> <a href="https://developer.android.com/reference/android/widget/TimePicker.html"> TimePicker </a> </code></pre> . <p> See the <a href="https://developer.android.com/guide/topics/ui/controls/pickers.html"> Pickers </a> guide. </p>\n<pre><code>public class TimePickerDialog\n</code></pre></section>	https://developer.android.com/reference/android/app/TimePickerDialog.html
TimePickerDialog.OnTimeSetListener	A										<section class="prog__container"><p> The callback interface used to indicate the user is done filling in the time (e.g. they clicked on the 'OK' button).</p>\n<pre><code>public static interface TimePickerDialog.OnTimeSetListener\n</code></pre></section>	https://developer.android.com/reference/android/app/TimePickerDialog.OnTimeSetListener.html
UiAutomation.AccessibilityEventFilter	A										<section class="prog__container"><p> Listener for filtering accessibility events.</p>\n<pre><code>public static interface UiAutomation.AccessibilityEventFilter\n</code></pre></section>	https://developer.android.com/reference/android/app/UiAutomation.AccessibilityEventFilter.html
UiAutomation	A										<section class="prog__container"><p> Class for interacting with the device's UI by simulation user actions and introspection of the screen content. It relies on the platform accessibility APIs to introspect the screen and to perform some actions on the remote view tree. It also allows injecting of arbitrary raw input events simulating user interaction with keyboards and touch devices. One can think of a UiAutomation as a special type of <pre><code> <a href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html"> AccessibilityService </a> </code></pre> which does not provide hooks for the service life cycle and exposes other APIs that are useful for UI test automation. <p> The APIs exposed by this class are low-level to maximize flexibility when developing UI test automation tools and libraries. Generally, a UiAutomation client should be using a higher-level library or implement high-level functions. For example, performing a tap on the screen requires construction and injecting of a touch down and up events which have to be delivered to the system by a call to <pre><code> <a href="https://developer.android.com/reference/android/app/UiAutomation.html#injectInputEvent(android.view.InputEvent, boolean)"> injectInputEvent(InputEvent, boolean) </a> </code></pre> . </p>\n<pre><code>public final class UiAutomation\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/UiAutomation.html
UiAutomation.OnAccessibilityEventListener	A										<section class="prog__container"><p> Listener for observing the <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html"> AccessibilityEvent </a> </code></pre> stream.</p>\n<pre><code>public static interface UiAutomation.OnAccessibilityEventListener\n</code></pre></section>	https://developer.android.com/reference/android/app/UiAutomation.OnAccessibilityEventListener.html
UiModeManager	A										<section class="prog__container"><p> This class provides access to the system uimode services. These services allow applications to control UI modes of the device. It provides functionality to disable the car mode and it gives access to the night mode settings. <p> These facilities are built on top of the underlying <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_DOCK_EVENT"> ACTION_DOCK_EVENT </a> </code></pre> broadcasts that are sent when the user physical places the device into and out of a dock. When that happens, the UiModeManager switches the system <pre><code> <a href="https://developer.android.com/reference/android/content/res/Configuration.html"> Configuration </a> </code></pre> to the appropriate UI mode, sends broadcasts about the mode switch, and starts the corresponding mode activity if appropriate. See the broadcasts <pre><code> <a href="https://developer.android.com/reference/android/app/UiModeManager.html#ACTION_ENTER_CAR_MODE"> ACTION_ENTER_CAR_MODE </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/UiModeManager.html#ACTION_ENTER_DESK_MODE"> ACTION_ENTER_DESK_MODE </a> </code></pre> for more information. <p> In addition, the user may manually switch the system to car mode without physically being in a dock. While in car mode -- whether by manual action from the user or being physically placed in a dock -- a notification is displayed allowing the user to exit dock mode. Thus the dock mode represented here may be different than the current state of the underlying dock event broadcast. <p> You do not instantiate this class directly; instead, retrieve it through <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.Class&lt;T&gt;)"> Context.getSystemService(Context.UI_MODE_SERVICE) </a> </code></pre> . </p>\n<pre><code>public class UiModeManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/UiModeManager.html
VoiceInteractor.AbortVoiceRequest	A										<section class="prog__container"><p> Reports that the current interaction can not be complete with voice, so the application will need to switch to a traditional input UI. Applications should only use this when they need to completely bail out of the voice interaction and switch to a traditional UI. When the response comes back, the voice system has handled the request and is ready to switch; at that point the application can start a new non-voice activity. Be sure when starting the new activity to use <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_TASK"> Intent.FLAG_ACTIVITY_NEW_TASK </a> </code></pre> to keep the new activity out of the current voice interaction task.</p>\n<pre><code>public static class VoiceInteractor.AbortVoiceRequest\n</code></pre></section>	https://developer.android.com/reference/android/app/VoiceInteractor.AbortVoiceRequest.html
VoiceInteractor.CommandRequest	A										<section class="prog__container"><p> Execute a vendor-specific command using the trusted system VoiceInteractionService. This allows an Activity to request additional information from the user needed to complete an action (e.g. booking a table might have several possible times that the user could select from or an app might need the user to agree to a terms of service). The result of the confirmation will be returned through an asynchronous call to either <pre><code> <a href="https://developer.android.com/reference/android/app/VoiceInteractor.CommandRequest.html#onCommandResult(boolean, android.os.Bundle)"> onCommandResult(boolean, android.os.Bundle) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/app/VoiceInteractor.Request.html#onCancel()"> onCancel() </a> </code></pre> . <p> The command is a string that describes the generic operation to be performed. The command will determine how the properties in extras are interpreted and the set of available commands is expected to grow over time. An example might be "com.google.voice.commands.REQUEST_NUMBER_BAGS" to request the number of bags as part of airline check-in. (This is not an actual working example.) </p>\n<pre><code>public static class VoiceInteractor.CommandRequest\n</code></pre></section>	https://developer.android.com/reference/android/app/VoiceInteractor.CommandRequest.html
VoiceInteractor.CompleteVoiceRequest	A										<section class="prog__container"><p> Reports that the current interaction was successfully completed with voice, so the application can report the final status to the user. When the response comes back, the voice system has handled the request and is ready to switch; at that point the application can start a new non-voice activity or finish. Be sure when starting the new activity to use <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_TASK"> Intent.FLAG_ACTIVITY_NEW_TASK </a> </code></pre> to keep the new activity out of the current voice interaction task.</p>\n<pre><code>public static class VoiceInteractor.CompleteVoiceRequest\n</code></pre></section>	https://developer.android.com/reference/android/app/VoiceInteractor.CompleteVoiceRequest.html
VoiceInteractor.ConfirmationRequest	A										<section class="prog__container"><p> Confirms an operation with the user via the trusted system VoiceInteractionService. This allows an Activity to complete an unsafe operation that would require the user to touch the screen when voice interaction mode is not enabled. The result of the confirmation will be returned through an asynchronous call to either <pre><code> <a href="https://developer.android.com/reference/android/app/VoiceInteractor.ConfirmationRequest.html#onConfirmationResult(boolean, android.os.Bundle)"> onConfirmationResult(boolean, android.os.Bundle) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/app/VoiceInteractor.Request.html#onCancel()"> onCancel() </a> </code></pre> - these methods should be overridden to define the application specific behavior. <p> In some cases this may be a simple yes / no confirmation or the confirmation could include context information about how the action will be completed (e.g. booking a cab might include details about how long until the cab arrives) so the user can give a confirmation. </p>\n<pre><code>public static class VoiceInteractor.ConfirmationRequest\n</code></pre></section>	https://developer.android.com/reference/android/app/VoiceInteractor.ConfirmationRequest.html
VoiceInteractor	A										<section class="prog__container"><p> Interface for an <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> to interact with the user through voice. Use <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#getVoiceInteractor()"> Activity.getVoiceInteractor </a> </code></pre> to retrieve the interface, if the activity is currently involved in a voice interaction. <p> The voice interactor revolves around submitting voice interaction requests to the back-end voice interaction service that is working with the user. These requests are submitted with <pre><code> <a href="https://developer.android.com/reference/android/app/VoiceInteractor.html#submitRequest(android.app.VoiceInteractor.Request)"> submitRequest(VoiceInteractor.Request) </a> </code></pre> , providing a new instance of a <pre><code> <a href="https://developer.android.com/reference/android/app/VoiceInteractor.Request.html"> VoiceInteractor.Request </a> </code></pre> subclass describing the type of operation to perform -- currently the possible requests are <pre><code> <a href="https://developer.android.com/reference/android/app/VoiceInteractor.ConfirmationRequest.html"> VoiceInteractor.ConfirmationRequest </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/VoiceInteractor.CommandRequest.html"> VoiceInteractor.CommandRequest </a> </code></pre> . <p> Once a request is submitted, the voice system will process it and eventually deliver the result to the request object. The application can cancel a pending request at any time. <p> The VoiceInteractor is integrated with Activity's state saving mechanism, so that if an activity is being restarted with retained state, it will retain the current VoiceInteractor and any outstanding requests. Because of this, you should always use <pre><code> <a href="https://developer.android.com/reference/android/app/VoiceInteractor.Request.html#getActivity()"> Request.getActivity </a> </code></pre> to get back to the activity of a request, rather than holding on to the activity instance yourself, either explicitly or implicitly through a non-static inner class. </p>\n<pre><code>public final class VoiceInteractor\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/VoiceInteractor.html
VoiceInteractor.PickOptionRequest	A										<section class="prog__container"><p> Select a single option from multiple potential options with the user via the trusted system VoiceInteractionService. Typically, the application would present this visually as a list view to allow selecting the option by touch. The result of the confirmation will be returned through an asynchronous call to either <pre><code> <a href="https://developer.android.com/reference/android/app/VoiceInteractor.PickOptionRequest.html#onPickOptionResult(boolean, android.app.VoiceInteractor.PickOptionRequest.Option[], android.os.Bundle)"> onPickOptionResult(boolean, VoiceInteractor.PickOptionRequest.Option[], Bundle) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/app/VoiceInteractor.Request.html#onCancel()"> onCancel() </a> </code></pre> - these methods should be overridden to define the application specific behavior.</p>\n<pre><code>public static class VoiceInteractor.PickOptionRequest\n</code></pre></section>	https://developer.android.com/reference/android/app/VoiceInteractor.PickOptionRequest.html
VoiceInteractor.PickOptionRequest.Option	A										<section class="prog__container"><p> Represents a single option that the user may select using their voice. The <pre><code> <a href="https://developer.android.com/reference/android/app/VoiceInteractor.PickOptionRequest.Option.html#getIndex()"> getIndex() </a> </code></pre> method should be used as a unique ID to identify the option when it is returned from the voice interactor.</p>\n<pre><code>public static final class VoiceInteractor.PickOptionRequest.Option\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/VoiceInteractor.PickOptionRequest.Option.html
VoiceInteractor.Prompt	A										<section class="prog__container"><p> A set of voice prompts to use with the voice interaction system to confirm an action, select an option, or do similar operations. Multiple voice prompts may be provided for variety. A visual prompt must be provided, which might not match the spoken version. For example, the confirmation "Are you sure you want to purchase this item?" might use a visual label like "Purchase item".</p>\n<pre><code>public static class VoiceInteractor.Prompt\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/VoiceInteractor.Prompt.html
VoiceInteractor.Request	A										<section class="prog__container"><p> Base class for voice interaction requests that can be submitted to the interactor. Do not instantiate this directly -- instead, use the appropriate subclass.</p>\n<pre><code>public static abstract class VoiceInteractor.Request\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/VoiceInteractor.Request.html
WallpaperInfo	A										<section class="prog__container"><p> This class is used to specify meta information of a wallpaper service.</p>\n<pre><code>public final class WallpaperInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/WallpaperInfo.html
WallpaperManager	A										<section class="prog__container"><p> Provides access to the system wallpaper. With WallpaperManager, you can get the current wallpaper, get the desired dimensions for the wallpaper, set the wallpaper, and more. Get an instance of WallpaperManager with <pre><code> <a href="https://developer.android.com/reference/android/app/WallpaperManager.html#getInstance(android.content.Context)"> getInstance() </a> </code></pre> . <p> An app can check whether wallpapers are supported for the current user, by calling <pre><code> <a href="https://developer.android.com/reference/android/app/WallpaperManager.html#isWallpaperSupported()"> isWallpaperSupported() </a> </code></pre> , and whether setting of wallpapers is allowed, by calling <pre><code> <a href="https://developer.android.com/reference/android/app/WallpaperManager.html#isSetWallpaperAllowed()"> isSetWallpaperAllowed() </a> </code></pre> . </p>\n<pre><code>public class WallpaperManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/WallpaperManager.html
DeviceAdminInfo	A										<section class="prog__container"><p> This class is used to specify meta information of a device administrator component.</p>\n<pre><code>public final class DeviceAdminInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/admin/DeviceAdminInfo.html
DeviceAdminReceiver	A										<section class="prog__container"><p> Base class for implementing a device administration component. This class provides a convenience for interpreting the raw intent actions that are sent by the system. <p> The callback methods, like the base <pre><code> <a href="https://developer.android.com/reference/android/content/BroadcastReceiver.html#onReceive(android.content.Context, android.content.Intent)"> BroadcastReceiver.onReceive() </a> </code></pre> method, happen on the main thread of the process. Thus long running operations must be done on another thread. Note that because a receiver is done once returning from its receive function, such long-running operations should probably be done in a <pre><code> <a href="https://developer.android.com/reference/android/app/Service.html"> Service </a> </code></pre> . <p> When publishing your DeviceAdmin subclass as a receiver, it must handle <pre><code> <a href="https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_DEVICE_ADMIN_ENABLED"> ACTION_DEVICE_ADMIN_ENABLED </a> </code></pre> and require the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_DEVICE_ADMIN"> BIND_DEVICE_ADMIN </a> </code></pre> permission. A typical manifest entry would look like: </p>\n<pre><code>public class DeviceAdminReceiver\n</code></pre></section>	https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html
DevicePolicyManager	A										<section class="prog__container"><p> Public interface for managing policies enforced on a device. Most clients of this class must be registered with the system as a <a href="https://developer.android.com/guide/topics/admin/device-admin.html"> device administrator </a> . Additionally, a device administrator may be registered as either a profile or device owner. A given method is accessible to all device administrators unless the documentation for that method specifies that it is restricted to either device or profile owners. Any application calling an api may only pass as an argument a device administrator component it owns. Otherwise, a <pre><code> <a href="https://developer.android.com/reference/java/lang/SecurityException.html"> SecurityException </a> </code></pre> will be thrown. </p>\n<pre><code>public class DevicePolicyManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html
android.app.admin	A										<section class="prog__container">Provides device administration features at the system level, allowing you to createsecurity-aware applications that are useful in enterprise settings, in which IT professionalsrequire rich control over employee devices.</section>	https://developer.android.com/reference/android/app/admin/package-summary.html
SecurityLog	A										<section class="prog__container"><p> A class representing a security event log entry.</p>\n<pre><code>public class SecurityLog\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/admin/SecurityLog.html
SecurityLog.SecurityEvent	A										<section class="prog__container"><p> A class representing a security event log entry.</p>\n<pre><code>public static final class SecurityLog.SecurityEvent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/admin/SecurityLog.SecurityEvent.html
SystemUpdatePolicy	A										<section class="prog__container"><p> A class that represents a local system update policy set by the device owner.</p>\n<pre><code>public class SystemUpdatePolicy\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/admin/SystemUpdatePolicy.html
AssistContent	A										<section class="prog__container"><p> Holds information about the content an application is viewing, to hand to an assistant at the user's request. This is filled in by <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#onProvideAssistContent(android.app.assist.AssistContent)"> Activity.onProvideAssistContent </a> </code></pre> .</p>\n<pre><code>public class AssistContent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/assist/AssistContent.html
AssistStructure	A										<section class="prog__container"><p> Assist data automatically created by the platform's implementation of <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#onProvideAssistData(android.os.Bundle)"> onProvideAssistData(Bundle) </a> </code></pre> .</p>\n<pre><code>public class AssistStructure\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/assist/AssistStructure.html
AssistStructure.ViewNode	A										<section class="prog__container"><p> Describes a single view in the assist data.</p>\n<pre><code>public static class AssistStructure.ViewNode\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html
AssistStructure.WindowNode	A										<section class="prog__container"><p> Describes a window in the assist data.</p>\n<pre><code>public static class AssistStructure.WindowNode\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/assist/AssistStructure.WindowNode.html
android.app.assist	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/app/assist/package-summary.html
BackupAgent	A										<section class="prog__container"><p> Provides the central interface between an application and Android's data backup infrastructure. An application that wishes to participate in the backup and restore mechanism will declare a subclass of <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgent.html"> BackupAgent </a> </code></pre> , implement the <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgent.html#onBackup(android.os.ParcelFileDescriptor, android.app.backup.BackupDataOutput, android.os.ParcelFileDescriptor)"> onBackup() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgent.html#onRestore(android.app.backup.BackupDataInput, int, android.os.ParcelFileDescriptor)"> onRestore() </a> </code></pre> methods, and provide the name of its backup agent class in its <pre><code> AndroidManifest.xml </code></pre> file via the <pre><code> <a href="https://developer.android.com/guide/topics/manifest/application-element.html"> &lt;application&gt; </a> </code></pre> tag's <pre><code> android:backupAgent </code></pre> attribute. </p>\n<pre><code>public abstract class BackupAgent\n</code></pre></section>	https://developer.android.com/reference/android/app/backup/BackupAgent.html
BackupAgentHelper	A										<section class="prog__container"><p> A convenient <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgent.html"> BackupAgent </a> </code></pre> wrapper class that automatically manages heterogeneous data sets within the backup data, each identified by a unique key prefix. When processing a backup or restore operation, the BackupAgentHelper dispatches to one or more installed <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupHelper.html"> BackupHelper </a> </code></pre> objects, each of which is responsible for a defined subset of the data being processed. <p> An application will typically extend this class in its own backup agent. Then, within the agent's <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgent.html#onCreate()"> onCreate() </a> </code></pre> method, it will call <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgentHelper.html#addHelper(java.lang.String, android.app.backup.BackupHelper)"> addHelper() </a> </code></pre> one or more times to install the handlers for each kind of data it wishes to manage within its backups. <p> The Android framework currently provides two predefined <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupHelper.html"> BackupHelper </a> </code></pre> classes: </p>\n<pre><code>public class BackupAgentHelper\n</code></pre></section>	https://developer.android.com/reference/android/app/backup/BackupAgentHelper.html
BackupDataInput	A										<section class="prog__container"><p> Provides the structured interface through which a <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgent.html"> BackupAgent </a> </code></pre> reads information from the backup data set, via its <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgent.html#onRestore(android.app.backup.BackupDataInput, int, android.os.ParcelFileDescriptor)"> onRestore() </a> </code></pre> method. The data is presented as a set of "entities," each representing one named record as previously stored by the agent's <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgent.html#onBackup(android.os.ParcelFileDescriptor, android.app.backup.BackupDataOutput, android.os.ParcelFileDescriptor)"> onBackup() </a> </code></pre> implementation. An entity is composed of a descriptive header plus a byte array that holds the raw data saved in the remote backup. <p> The agent must consume every entity in the data stream, otherwise the restored state of the application will be incomplete. </p>\n<pre><code>public class BackupDataInput\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/backup/BackupDataInput.html
BackupDataInputStream	A										<section class="prog__container"><p> Provides an <pre><code> <a href="https://developer.android.com/reference/java/io/InputStream.html"> InputStream </a> </code></pre> -like interface for accessing an entity's data during a restore operation. Used by <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupHelper.html"> BackupHelper </a> </code></pre> classes within the <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgentHelper.html"> BackupAgentHelper </a> </code></pre> mechanism. <p> When <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupHelper.html#restoreEntity(android.app.backup.BackupDataInputStream)"> BackupHelper.restoreEntity() </a> </code></pre> is called, the current entity's header has already been read from the underlying <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupDataInput.html"> BackupDataInput </a> </code></pre> . The entity's key string and total data size are available through this class's <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupDataInputStream.html#getKey()"> getKey() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupDataInputStream.html#size()"> size() </a> </code></pre> methods, respectively. <p class="note"> <strong> Note: </strong> The caller should take care not to seek or close the underlying data source, nor read more than <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupDataInputStream.html#size()"> size() </a> </code></pre> bytes from the stream. </p>\n<pre><code>public class BackupDataInputStream\n</code></pre></section>	https://developer.android.com/reference/android/app/backup/BackupDataInputStream.html
BackupDataOutput	A										<section class="prog__container"><p> Provides the structured interface through which a <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgent.html"> BackupAgent </a> </code></pre> commits information to the backup data set, via its <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgent.html#onBackup(android.os.ParcelFileDescriptor, android.app.backup.BackupDataOutput, android.os.ParcelFileDescriptor)"> onBackup() </a> </code></pre> method. Data written for backup is presented as a set of "entities," key/value pairs in which each binary data record "value" is named with a string "key." <p> To commit a data record to the backup transport, the agent's <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgent.html#onBackup(android.os.ParcelFileDescriptor, android.app.backup.BackupDataOutput, android.os.ParcelFileDescriptor)"> onBackup() </a> </code></pre> method first writes an "entity header" that supplies the key string for the record and the total size of the binary value for the record. After the header has been written, the agent then writes the binary entity value itself. The entity value can be written in multiple chunks if desired, as long as the total count of bytes written matches what was supplied to <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupDataOutput.html#writeEntityHeader(java.lang.String, int)"> writeEntityHeader() </a> </code></pre> . <p> Entity key strings are considered to be unique within a given application's backup data set. If a backup agent writes a new entity under an existing key string, its value will replace any previous value in the transport's remote data store. You can remove a record entirely from the remote data set by writing a new entity header using the existing record's key, but supplying a negative <pre><code> dataSize </code></pre> parameter. When you do so, the agent does not need to call <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupDataOutput.html#writeEntityData(byte[], int)"> writeEntityData(byte[], int) </a> </code></pre> . </p>\n<pre><code>public class BackupDataOutput\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/backup/BackupDataOutput.html
BackupHelper	A										<section class="prog__container"><p> Defines the calling interface that <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgentHelper.html"> BackupAgentHelper </a> </code></pre> uses when dispatching backup and restore operations to the installed helpers. Applications can define and install their own helpers as well as using those provided as part of the Android framework. <p> Although multiple helper objects may be installed simultaneously, each helper is responsible only for handling its own data, and will not see entities created by other components within the backup system. Invocations of multiple helpers are performed sequentially by the <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgentHelper.html"> BackupAgentHelper </a> </code></pre> , with each helper given a chance to access its own saved state from within the state record produced during the previous backup operation. </p>\n<pre><code>public interface BackupHelper\n</code></pre></section>	https://developer.android.com/reference/android/app/backup/BackupHelper.html
BackupManager	A										<section class="prog__container"><p> The interface through which an application interacts with the Android backup service to request backup and restore operations. Applications instantiate it using the constructor and issue calls through that instance. <p> When an application has made changes to data which should be backed up, a call to <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupManager.html#dataChanged()"> dataChanged() </a> </code></pre> will notify the backup service. The system will then schedule a backup operation to occur in the near future. Repeated calls to <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupManager.html#dataChanged()"> dataChanged() </a> </code></pre> have no further effect until the backup operation actually occurs. <p> A backup or restore operation for your application begins when the system launches the <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgent.html"> BackupAgent </a> </code></pre> subclass you've declared in your manifest. See the documentation for <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgent.html"> BackupAgent </a> </code></pre> for a detailed description of how the operation then proceeds. <p> Several attributes affecting the operation of the backup and restore mechanism can be set on the <pre><code> <a href="https://developer.android.com/guide/topics/manifest/application-element.html"> &lt;application&gt; </a> </code></pre> tag in your application's AndroidManifest.xml file. </p>\n<pre><code>public class BackupManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/backup/BackupManager.html
FileBackupHelper	A										<section class="prog__container"><p> A helper class that can be used in conjunction with <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgentHelper.html"> BackupAgentHelper </a> </code></pre> to manage the backup of a set of files. Whenever backup is performed, all files changed since the last backup will be saved in their entirety. When backup first occurs, every file in the list provided to <pre><code> <a href="https://developer.android.com/reference/android/app/backup/FileBackupHelper.html#FileBackupHelper(android.content.Context, java.lang.String...)"> FileBackupHelper(Context, String...) </a> </code></pre> will be backed up. <p> During restore, if the helper encounters data for a file that was not specified when the FileBackupHelper object was constructed, that data will be ignored. <p class="note"> <strong> Note: </strong> This should be used only with small configuration files, not large binary files. </p>\n<pre><code>public class FileBackupHelper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/backup/FileBackupHelper.html
FullBackupDataOutput	A										<section class="prog__container"><p> Provides the interface through which a <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgent.html"> BackupAgent </a> </code></pre> writes entire files to a full backup data set, via its <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgent.html#onFullBackup(android.app.backup.FullBackupDataOutput)"> onFullBackup(FullBackupDataOutput) </a> </code></pre> method.</p>\n<pre><code>public class FullBackupDataOutput\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/backup/FullBackupDataOutput.html
android.app.backup	A										<section class="prog__container">Contains the backup and restore functionality available toapplications. If a user wipes the data on their device or upgrades to a new Android-powereddevice, all applications that have enabled backup can restore the user's previous data when theapplication is reinstalled.</section>	https://developer.android.com/reference/android/app/backup/package-summary.html
RestoreObserver	A										<section class="prog__container"><p> Callback class for receiving progress reports during a restore operation. These methods will all be called on your application's main thread.</p>\n<pre><code>public abstract class RestoreObserver\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/backup/RestoreObserver.html
SharedPreferencesBackupHelper	A										<section class="prog__container"><p> A helper class that can be used in conjunction with <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgentHelper.html"> BackupAgentHelper </a> </code></pre> to manage the backup of <pre><code> <a href="https://developer.android.com/reference/android/content/SharedPreferences.html"> SharedPreferences </a> </code></pre> . Whenever a backup is performed, it will back up all named shared preferences that have changed since the last backup operation. <p> To use this class, the application's backup agent class should extend <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgentHelper.html"> BackupAgentHelper </a> </code></pre> . Then, in the agent's <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgent.html#onCreate()"> onCreate() </a> </code></pre> method, an instance of this class should be allocated and installed as a backup/restore handler within the BackupAgentHelper framework. For example, an agent supporting backup and restore for an application with two groups of <pre><code> <a href="https://developer.android.com/reference/android/content/SharedPreferences.html"> SharedPreferences </a> </code></pre> data might look something like this: <pre> import android.app.backup.BackupAgentHelper; import android.app.backup.SharedPreferencesBackupHelper; public class MyBackupAgent extends BackupAgentHelper { // The names of the SharedPreferences groups that the application maintains. These // are the same strings that are passed to <pre><code><a href="https://developer.android.com/reference/android/content/Context.html#getSharedPreferences(java.lang.String, int)">getSharedPreferences(String, int)</a></code></pre>. static final String PREFS_DISPLAY = "displayprefs"; static final String PREFS_SCORES = "highscores"; // An arbitrary string used within the BackupAgentHelper implementation to // identify the SharedPreferenceBackupHelper's data. static final String MY_PREFS_BACKUP_KEY = "myprefs"; // Simply allocate a helper and install it void onCreate() { SharedPreferencesBackupHelper helper = new SharedPreferencesBackupHelper(this, PREFS_DISPLAY, PREFS_SCORES); addHelper(MY_PREFS_BACKUP_KEY, helper); } }</pre> <p> No further implementation is needed; the <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgentHelper.html"> BackupAgentHelper </a> </code></pre> mechanism automatically dispatches the <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgent.html#onBackup(android.os.ParcelFileDescriptor, android.app.backup.BackupDataOutput, android.os.ParcelFileDescriptor)"> BackupAgent.onBackup() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/backup/BackupAgent.html#onRestore(android.app.backup.BackupDataInput, int, android.os.ParcelFileDescriptor)"> BackupAgent.onRestore() </a> </code></pre> callbacks to the SharedPreferencesBackupHelper as appropriate. </p>\n<pre><code>public class SharedPreferencesBackupHelper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/backup/SharedPreferencesBackupHelper.html
JobInfo.Builder	A										<section class="prog__container"><p> Builder class for constructing <pre><code> <a href="https://developer.android.com/reference/android/app/job/JobInfo.html"> JobInfo </a> </code></pre> objects.</p>\n<pre><code>public static final class JobInfo.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/job/JobInfo.Builder.html
JobInfo	A										<section class="prog__container"><p> Container of data passed to the <pre><code> <a href="https://developer.android.com/reference/android/app/job/JobScheduler.html"> JobScheduler </a> </code></pre> fully encapsulating the parameters required to schedule work against the calling application. These are constructed using the <pre><code> <a href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html"> JobInfo.Builder </a> </code></pre> . You must specify at least one sort of constraint on the JobInfo object that you are creating. The goal here is to provide the scheduler with high-level semantics about the work you want to accomplish. Doing otherwise with throw an exception in your app.</p>\n<pre><code>public class JobInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/job/JobInfo.html
JobInfo.TriggerContentUri	A										<section class="prog__container"><p> Information about a content URI modification that a job would like to trigger on.</p>\n<pre><code>public static final class JobInfo.TriggerContentUri\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/job/JobInfo.TriggerContentUri.html
JobParameters	A										<section class="prog__container"><p> Contains the parameters used to configure/identify your job. You do not create this object yourself, instead it is handed in to your application by the System.</p>\n<pre><code>public class JobParameters\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/job/JobParameters.html
JobScheduler	A										<section class="prog__container"><p> This is an API for scheduling various types of jobs against the framework that will be executed in your application's own process. <p> See <pre><code> <a href="https://developer.android.com/reference/android/app/job/JobInfo.html"> JobInfo </a> </code></pre> for more description of the types of jobs that can be run and how to construct them. You will construct these JobInfo objects and pass them to the JobScheduler with <pre><code> <a href="https://developer.android.com/reference/android/app/job/JobScheduler.html#schedule(android.app.job.JobInfo)"> schedule(JobInfo) </a> </code></pre> . When the criteria declared are met, the system will execute this job on your application's <pre><code> <a href="https://developer.android.com/reference/android/app/job/JobService.html"> JobService </a> </code></pre> . You identify which JobService is meant to execute the logic for your job when you create the JobInfo with <pre><code> <a href="https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#JobInfo.Builder(int, android.content.ComponentName)"> JobInfo.Builder(int, android.content.ComponentName) </a> </code></pre> . </p>\n<pre><code>public abstract class JobScheduler\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/job/JobScheduler.html
JobService	A										<section class="prog__container"><p> <p> Entry point for the callback from the <pre><code> <a href="https://developer.android.com/reference/android/app/job/JobScheduler.html"> JobScheduler </a> </code></pre> . </p>\n<pre><code>public abstract class JobService\n</code></pre></section>	https://developer.android.com/reference/android/app/job/JobService.html
android.app.job	A										<section class="prog__container">Entry point for the callback from the</section>	https://developer.android.com/reference/android/app/job/package-summary.html
ConfigurationStats	A										<section class="prog__container"><p> Represents the usage statistics of a device <pre><code> <a href="https://developer.android.com/reference/android/content/res/Configuration.html"> Configuration </a> </code></pre> for a specific time range.</p>\n<pre><code>public final class ConfigurationStats\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/usage/ConfigurationStats.html
NetworkStats.Bucket	A										<section class="prog__container"><p> Buckets are the smallest elements of a query result. As some dimensions of a result may be aggregated (e.g. time or state) some values may be equal across all buckets.</p>\n<pre><code>public static class NetworkStats.Bucket\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/usage/NetworkStats.Bucket.html
NetworkStats	A										<section class="prog__container"><p> Class providing enumeration over buckets of network usage statistics. <pre><code> <a href="https://developer.android.com/reference/android/app/usage/NetworkStats.html"> NetworkStats </a> </code></pre> objects are returned as results to various queries in <pre><code> <a href="https://developer.android.com/reference/android/app/usage/NetworkStatsManager.html"> NetworkStatsManager </a> </code></pre> .</p>\n<pre><code>public final class NetworkStats\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/usage/NetworkStats.html
NetworkStatsManager	A										<section class="prog__container"><p> Provides access to network usage history and statistics. Usage data is collected in discrete bins of time called 'Buckets'. See <pre><code> <a href="https://developer.android.com/reference/android/app/usage/NetworkStats.Bucket.html"> NetworkStats.Bucket </a> </code></pre> for details. <p> </p>\n<pre><code>public class NetworkStatsManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/usage/NetworkStatsManager.html
NetworkStatsManager.UsageCallback	A										<section class="prog__container"><p> Base class for usage callbacks. Should be extended by applications wanting notifications.</p>\n<pre><code>public static abstract class NetworkStatsManager.UsageCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/usage/NetworkStatsManager.UsageCallback.html
android.app.usage	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/app/usage/package-summary.html
UsageEvents.Event	A										<section class="prog__container"><p> An event representing a state change for a component.</p>\n<pre><code>public static final class UsageEvents.Event\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/usage/UsageEvents.Event.html
UsageEvents	A										<section class="prog__container"><p> A result returned from <pre><code> <a href="https://developer.android.com/reference/android/app/usage/UsageStatsManager.html#queryEvents(long, long)"> queryEvents(long, long) </a> </code></pre> from which to read <pre><code> <a href="https://developer.android.com/reference/android/app/usage/UsageEvents.Event.html"> UsageEvents.Event </a> </code></pre> objects.</p>\n<pre><code>public final class UsageEvents\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/usage/UsageEvents.html
UsageStats	A										<section class="prog__container"><p> Contains usage statistics for an app package for a specific time range.</p>\n<pre><code>public final class UsageStats\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/usage/UsageStats.html
UsageStatsManager	A										<section class="prog__container"><p> Provides access to device usage history and statistics. Usage data is aggregated into time intervals: days, weeks, months, and years. <p> </p>\n<pre><code>public final class UsageStatsManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/app/usage/UsageStatsManager.html
AppWidgetHost	A										<section class="prog__container"><p> AppWidgetHost provides the interaction with the AppWidget service for apps, like the home screen, that want to embed AppWidgets in their UI.</p>\n<pre><code>public class AppWidgetHost\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/appwidget/AppWidgetHost.html
AppWidgetHostView	A										<section class="prog__container"><p> Provides the glue to show AppWidget views. This class offers automatic animation between updates, and will try recycling old views for each incoming <pre><code> <a href="https://developer.android.com/reference/android/widget/RemoteViews.html"> RemoteViews </a> </code></pre> .</p>\n<pre><code>public class AppWidgetHostView\n</code></pre></section>	https://developer.android.com/reference/android/appwidget/AppWidgetHostView.html
AppWidgetManager	A										<section class="prog__container"><p> Updates AppWidget state; gets information about installed AppWidget providers and other AppWidget related state. </p>\n<pre><code>public class AppWidgetManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/appwidget/AppWidgetManager.html
AppWidgetProvider	A										<section class="prog__container"><p> A convenience class to aid in implementing an AppWidget provider. Everything you can do with AppWidgetProvider, you can do with a regular <pre><code> <a href="https://developer.android.com/reference/android/content/BroadcastReceiver.html"> BroadcastReceiver </a> </code></pre> . AppWidgetProvider merely parses the relevant fields out of the Intent that is received in <pre><code> <a href="https://developer.android.com/reference/android/appwidget/AppWidgetProvider.html#onReceive(android.content.Context, android.content.Intent)"> onReceive(Context,Intent) </a> </code></pre> , and calls hook methods with the received extras. <p> Extend this class and override one or more of the <pre><code> <a href="https://developer.android.com/reference/android/appwidget/AppWidgetProvider.html#onUpdate(android.content.Context, android.appwidget.AppWidgetManager, int[])"> onUpdate(Context, AppWidgetManager, int[]) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/appwidget/AppWidgetProvider.html#onDeleted(android.content.Context, int[])"> onDeleted(Context, int[]) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/appwidget/AppWidgetProvider.html#onEnabled(android.content.Context)"> onEnabled(Context) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/appwidget/AppWidgetProvider.html#onDisabled(android.content.Context)"> onDisabled(Context) </a> </code></pre> methods to implement your own AppWidget functionality. </p>\n<pre><code>public class AppWidgetProvider\n</code></pre></section>	https://developer.android.com/reference/android/appwidget/AppWidgetProvider.html
AppWidgetProviderInfo	A										<section class="prog__container"><p> Describes the meta data for an installed AppWidget provider. The fields in this class correspond to the fields in the <pre><code> &lt;appwidget-provider&gt; </code></pre> xml tag.</p>\n<pre><code>public class AppWidgetProviderInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/appwidget/AppWidgetProviderInfo.html
android.appwidget	A										<section class="prog__container">Contains the components necessary to create "app widgets", which users can embed in otherapplications (such as the home screen) to quickly access application data and services withoutlaunching a new activity.</section>	https://developer.android.com/reference/android/appwidget/package-summary.html
BluetoothA2dp	A										<section class="prog__container"><p> This class provides the public APIs to control the Bluetooth A2DP profile. <p> BluetoothA2dp is a proxy object for controlling the Bluetooth A2DP Service via IPC. Use <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getProfileProxy(android.content.Context, android.bluetooth.BluetoothProfile.ServiceListener, int)"> getProfileProxy(Context, BluetoothProfile.ServiceListener, int) </a> </code></pre> to get the BluetoothA2dp proxy object. <p> Android only supports one connected Bluetooth A2dp device at a time. Each method is protected with its appropriate permission. </p>\n<pre><code>public final class BluetoothA2dp\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothA2dp.html
BluetoothAdapter	A										<section class="prog__container"><p> Represents the local device Bluetooth adapter. The <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html"> BluetoothAdapter </a> </code></pre> lets you perform fundamental Bluetooth tasks, such as initiate device discovery, query a list of bonded (paired) devices, instantiate a <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html"> BluetoothDevice </a> </code></pre> using a known MAC address, and create a <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html"> BluetoothServerSocket </a> </code></pre> to listen for connection requests from other devices, and start a scan for Bluetooth LE devices. <p> To get a <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html"> BluetoothAdapter </a> </code></pre> representing the local Bluetooth adapter, when running on JELLY_BEAN_MR1 and below, call the static <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getDefaultAdapter()"> getDefaultAdapter() </a> </code></pre> method; when running on JELLY_BEAN_MR2 and higher, call <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothManager.html#getAdapter()"> getAdapter() </a> </code></pre> . Fundamentally, this is your starting point for all Bluetooth actions. Once you have the local adapter, you can get a set of <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html"> BluetoothDevice </a> </code></pre> objects representing all paired devices with <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBondedDevices()"> getBondedDevices() </a> </code></pre> ; start device discovery with <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#startDiscovery()"> startDiscovery() </a> </code></pre> ; or create a <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html"> BluetoothServerSocket </a> </code></pre> to listen for incoming connection requests with <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingRfcommWithServiceRecord(java.lang.String, java.util.UUID)"> listenUsingRfcommWithServiceRecord(String, UUID) </a> </code></pre> ; or start a scan for Bluetooth LE devices with <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#startLeScan(android.bluetooth.BluetoothAdapter.LeScanCallback)"> startLeScan(LeScanCallback) </a> </code></pre> . <p> This class is thread safe. <p class="note"> <strong> Note: </strong> Most methods require the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#BLUETOOTH"> BLUETOOTH </a> </code></pre> permission and some also require the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#BLUETOOTH_ADMIN"> BLUETOOTH_ADMIN </a> </code></pre> permission. </p>\n<pre><code>public final class BluetoothAdapter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html
BluetoothAdapter.LeScanCallback	A										<section class="prog__container"><p> Callback interface used to deliver LE scan results.</p>\n<pre><code>public static interface BluetoothAdapter.LeScanCallback\n</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.LeScanCallback.html
BluetoothAssignedNumbers	A										<section class="prog__container"><p> Bluetooth Assigned Numbers. <p> For now we only include Company ID values. </p>\n<pre><code>public class BluetoothAssignedNumbers\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothAssignedNumbers.html
BluetoothClass.Device	A										<section class="prog__container"><p> Defines all device class constants. <p> Each <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothClass.html"> BluetoothClass </a> </code></pre> encodes exactly one device class, with major and minor components. <p> The constants in <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html"> BluetoothClass.Device </a> </code></pre> represent a combination of major and minor device components (the complete device class). The constants in <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html"> BluetoothClass.Device.Major </a> </code></pre> represent only major device classes. <p> See <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html"> BluetoothClass.Service </a> </code></pre> for service class constants. </p>\n<pre><code>public static class BluetoothClass.Device\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html
BluetoothClass.Device.Major	A										<section class="prog__container"><p> Defines all major device class constants. <p> See <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.html"> BluetoothClass.Device </a> </code></pre> for minor classes. </p>\n<pre><code>public static class BluetoothClass.Device.Major\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothClass.Device.Major.html
BluetoothClass	A										<section class="prog__container"><p> Represents a Bluetooth class, which describes general characteristics and capabilities of a device. For example, a Bluetooth class will specify the general device type such as a phone, a computer, or headset, and whether it's capable of services such as audio or telephony. <p> Every Bluetooth class is composed of zero or more service classes, and exactly one device class. The device class is further broken down into major and minor device class components. <p> <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothClass.html"> BluetoothClass </a> </code></pre> is useful as a hint to roughly describe a device (for example to show an icon in the UI), but does not reliably describe which Bluetooth profiles or services are actually supported by a device. Accurate service discovery is done through SDP requests, which are automatically performed when creating an RFCOMM socket with <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createRfcommSocketToServiceRecord(java.util.UUID)"> createRfcommSocketToServiceRecord(UUID) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingRfcommWithServiceRecord(java.lang.String, java.util.UUID)"> listenUsingRfcommWithServiceRecord(String, UUID) </a> </code></pre> </p>\n<pre><code>public final class BluetoothClass\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothClass.html
BluetoothClass.Service	A										<section class="prog__container"><p> Defines all service class constants. <p> Each <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothClass.html"> BluetoothClass </a> </code></pre> encodes zero or more service classes. </p>\n<pre><code>public static final class BluetoothClass.Service\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothClass.Service.html
BluetoothDevice	A										<section class="prog__container"><p> Represents a remote Bluetooth device. A <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html"> BluetoothDevice </a> </code></pre> lets you create a connection with the respective device or query information about it, such as the name, address, class, and bonding state. <p> This class is really just a thin wrapper for a Bluetooth hardware address. Objects of this class are immutable. Operations on this class are performed on the remote Bluetooth hardware address, using the <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html"> BluetoothAdapter </a> </code></pre> that was used to create this <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html"> BluetoothDevice </a> </code></pre> . <p> To get a <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html"> BluetoothDevice </a> </code></pre> , use <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getRemoteDevice(java.lang.String)"> BluetoothAdapter.getRemoteDevice(String) </a> </code></pre> to create one representing a device of a known MAC address (which you can get through device discovery with <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html"> BluetoothAdapter </a> </code></pre> ) or get one from the set of bonded devices returned by <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBondedDevices()"> BluetoothAdapter.getBondedDevices() </a> </code></pre> . You can then open a <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html"> BluetoothSocket </a> </code></pre> for communication with the remote device, using <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createRfcommSocketToServiceRecord(java.util.UUID)"> createRfcommSocketToServiceRecord(UUID) </a> </code></pre> . <p class="note"> <strong> Note: </strong> Requires the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#BLUETOOTH"> BLUETOOTH </a> </code></pre> permission. </p>\n<pre><code>public final class BluetoothDevice\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html
BluetoothGatt	A										<section class="prog__container"><p> Public API for the Bluetooth GATT Profile. <p> This class provides Bluetooth GATT functionality to enable communication with Bluetooth Smart or Smart Ready devices. <p> To connect to a remote peripheral device, create a <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html"> BluetoothGattCallback </a> </code></pre> and call <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#connectGatt(android.content.Context, boolean, android.bluetooth.BluetoothGattCallback)"> connectGatt(Context, boolean, BluetoothGattCallback) </a> </code></pre> to get a instance of this class. GATT capable devices can be discovered using the Bluetooth device discovery or BLE scan process. </p>\n<pre><code>public final class BluetoothGatt\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html
BluetoothGattCallback	A										<section class="prog__container"><p> This abstract class is used to implement <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html"> BluetoothGatt </a> </code></pre> callbacks.</p>\n<pre><code>public abstract class BluetoothGattCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html
BluetoothGattCharacteristic	A										<section class="prog__container"><p> Represents a Bluetooth GATT Characteristic <p> A GATT characteristic is a basic data element used to construct a GATT service, <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html"> BluetoothGattService </a> </code></pre> . The characteristic contains a value as well as additional information and optional GATT descriptors, <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html"> BluetoothGattDescriptor </a> </code></pre> . </p>\n<pre><code>public class BluetoothGattCharacteristic\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html
BluetoothGattDescriptor	A										<section class="prog__container"><p> Represents a Bluetooth GATT Descriptor <p> GATT Descriptors contain additional information and attributes of a GATT characteristic, <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html"> BluetoothGattCharacteristic </a> </code></pre> . They can be used to describe the characteristic's features or to control certain behaviours of the characteristic. </p>\n<pre><code>public class BluetoothGattDescriptor\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothGattDescriptor.html
BluetoothGattServer	A										<section class="prog__container"><p> Public API for the Bluetooth GATT Profile server role. <p> This class provides Bluetooth GATT server role functionality, allowing applications to create Bluetooth Smart services and characteristics. <p> BluetoothGattServer is a proxy object for controlling the Bluetooth Service via IPC. Use <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothManager.html#openGattServer(android.content.Context, android.bluetooth.BluetoothGattServerCallback)"> openGattServer(Context, BluetoothGattServerCallback) </a> </code></pre> to get an instance of this class. </p>\n<pre><code>public final class BluetoothGattServer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html
BluetoothGattServerCallback	A										<section class="prog__container"><p> This abstract class is used to implement <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothGattServer.html"> BluetoothGattServer </a> </code></pre> callbacks.</p>\n<pre><code>public abstract class BluetoothGattServerCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothGattServerCallback.html
BluetoothGattService	A										<section class="prog__container"><p> Represents a Bluetooth GATT Service <p> Gatt Service contains a collection of <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothGattCharacteristic.html"> BluetoothGattCharacteristic </a> </code></pre> , as well as referenced services. </p>\n<pre><code>public class BluetoothGattService\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothGattService.html
BluetoothHeadset	A										<section class="prog__container"><p> Public API for controlling the Bluetooth Headset Service. This includes both Bluetooth Headset and Handsfree (v1.5) profiles. <p> BluetoothHeadset is a proxy object for controlling the Bluetooth Headset Service via IPC. <p> Use <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getProfileProxy(android.content.Context, android.bluetooth.BluetoothProfile.ServiceListener, int)"> getProfileProxy(Context, BluetoothProfile.ServiceListener, int) </a> </code></pre> to get the BluetoothHeadset proxy object. Use <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#closeProfileProxy(int, android.bluetooth.BluetoothProfile)"> closeProfileProxy(int, BluetoothProfile) </a> </code></pre> to close the service connection. <p> Android only supports one connected Bluetooth Headset at a time. Each method is protected with its appropriate permission. </p>\n<pre><code>public final class BluetoothHeadset\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothHeadset.html
BluetoothHealth	A										<section class="prog__container"><p> Public API for Bluetooth Health Profile. <p> BluetoothHealth is a proxy object for controlling the Bluetooth Service via IPC. <p> How to connect to a health device which is acting in the source role. <li> Use <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getProfileProxy(android.content.Context, android.bluetooth.BluetoothProfile.ServiceListener, int)"> getProfileProxy(Context, BluetoothProfile.ServiceListener, int) </a> </code></pre> to get the BluetoothHealth proxy object. </li> <li> Create an <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html"> BluetoothHealth </a> </code></pre> callback and call <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#registerSinkAppConfiguration(java.lang.String, int, android.bluetooth.BluetoothHealthCallback)"> registerSinkAppConfiguration(String, int, BluetoothHealthCallback) </a> </code></pre> to register an application configuration </li> <li> Pair with the remote device. This currently needs to be done manually from Bluetooth Settings </li> <li> Connect to a health device using <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#connectChannelToSource(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration)"> connectChannelToSource(BluetoothDevice, BluetoothHealthAppConfiguration) </a> </code></pre> . Some devices will connect the channel automatically. The <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html"> BluetoothHealth </a> </code></pre> callback will inform the application of channel state change. </li> <li> Use the file descriptor provided with a connected channel to read and write data to the health channel. </li> <li> The received data needs to be interpreted using a health manager which implements the IEEE 11073-xxxxx specifications. <li> When done, close the health channel by calling <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#disconnectChannel(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration, int)"> disconnectChannel(BluetoothDevice, BluetoothHealthAppConfiguration, int) </a> </code></pre> and unregister the application configuration calling <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html#unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)"> unregisterAppConfiguration(BluetoothHealthAppConfiguration) </a> </code></pre> </li> </li> </p>\n<pre><code>public final class BluetoothHealth\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html
BluetoothHealthAppConfiguration	A										<section class="prog__container"><p> The Bluetooth Health Application Configuration that is used in conjunction with the <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html"> BluetoothHealth </a> </code></pre> class. This class represents an application configuration that the Bluetooth Health third party application will register to communicate with the remote Bluetooth health device.</p>\n<pre><code>public final class BluetoothHealthAppConfiguration\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothHealthAppConfiguration.html
BluetoothHealthCallback	A										<section class="prog__container"><p> This abstract class is used to implement <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothHealth.html"> BluetoothHealth </a> </code></pre> callbacks.</p>\n<pre><code>public abstract class BluetoothHealthCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothHealthCallback.html
BluetoothManager	A										<section class="prog__container"><p> High level manager used to obtain an instance of an <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html"> BluetoothAdapter </a> </code></pre> and to conduct overall Bluetooth Management. <p> Use <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> getSystemService(java.lang.String) </a> </code></pre> with <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#BLUETOOTH_SERVICE"> BLUETOOTH_SERVICE </a> </code></pre> to create an <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothManager.html"> BluetoothManager </a> </code></pre> , then call <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothManager.html#getAdapter()"> getAdapter() </a> </code></pre> to obtain the <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html"> BluetoothAdapter </a> </code></pre> . <p> Alternately, you can just call the static helper <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getDefaultAdapter()"> getDefaultAdapter() </a> </code></pre> . </p>\n<pre><code>public final class BluetoothManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothManager.html
BluetoothProfile	A										<section class="prog__container"><p> Public APIs for the Bluetooth Profiles. <p> Clients should call <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getProfileProxy(android.content.Context, android.bluetooth.BluetoothProfile.ServiceListener, int)"> getProfileProxy(Context, BluetoothProfile.ServiceListener, int) </a> </code></pre> , to get the Profile Proxy. Each public profile implements this interface. </p>\n<pre><code>public interface BluetoothProfile\n</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothProfile.html
BluetoothProfile.ServiceListener	A										<section class="prog__container"><p> An interface for notifying BluetoothProfile IPC clients when they have been connected or disconnected to the service.</p>\n<pre><code>public static interface BluetoothProfile.ServiceListener\n</code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothProfile.ServiceListener.html
BluetoothServerSocket	A										<section class="prog__container"><p> A listening Bluetooth socket. <p> The interface for Bluetooth Sockets is similar to that of TCP sockets: <pre><code> <a href="https://developer.android.com/reference/java/net/Socket.html"> Socket </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/java/net/ServerSocket.html"> ServerSocket </a> </code></pre> . On the server side, use a <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html"> BluetoothServerSocket </a> </code></pre> to create a listening server socket. When a connection is accepted by the <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html"> BluetoothServerSocket </a> </code></pre> , it will return a new <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html"> BluetoothSocket </a> </code></pre> to manage the connection. On the client side, use a single <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html"> BluetoothSocket </a> </code></pre> to both initiate an outgoing connection and to manage the connection. <p> The most common type of Bluetooth socket is RFCOMM, which is the type supported by the Android APIs. RFCOMM is a connection-oriented, streaming transport over Bluetooth. It is also known as the Serial Port Profile (SPP). <p> To create a listening <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html"> BluetoothServerSocket </a> </code></pre> that's ready for incoming connections, use <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingRfcommWithServiceRecord(java.lang.String, java.util.UUID)"> BluetoothAdapter.listenUsingRfcommWithServiceRecord() </a> </code></pre> . Then call <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html#accept()"> accept() </a> </code></pre> to listen for incoming connection requests. This call will block until a connection is established, at which point, it will return a <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html"> BluetoothSocket </a> </code></pre> to manage the connection. Once the <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html"> BluetoothSocket </a> </code></pre> is acquired, it's a good idea to call <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html#close()"> close() </a> </code></pre> on the <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html"> BluetoothServerSocket </a> </code></pre> when it's no longer needed for accepting connections. Closing the <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html"> BluetoothServerSocket </a> </code></pre> will <em> not </em> close the returned <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html"> BluetoothSocket </a> </code></pre> . <p> <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html"> BluetoothServerSocket </a> </code></pre> is thread safe. In particular, <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html#close()"> close() </a> </code></pre> will always immediately abort ongoing operations and close the server socket. <p class="note"> <strong> Note: </strong> Requires the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#BLUETOOTH"> BLUETOOTH </a> </code></pre> permission. </p>\n<pre><code>public final class BluetoothServerSocket\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html
BluetoothSocket	A										<section class="prog__container"><p> A connected or connecting Bluetooth socket. <p> The interface for Bluetooth Sockets is similar to that of TCP sockets: <pre><code> <a href="https://developer.android.com/reference/java/net/Socket.html"> Socket </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/java/net/ServerSocket.html"> ServerSocket </a> </code></pre> . On the server side, use a <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html"> BluetoothServerSocket </a> </code></pre> to create a listening server socket. When a connection is accepted by the <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html"> BluetoothServerSocket </a> </code></pre> , it will return a new <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html"> BluetoothSocket </a> </code></pre> to manage the connection. On the client side, use a single <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html"> BluetoothSocket </a> </code></pre> to both initiate an outgoing connection and to manage the connection. <p> The most common type of Bluetooth socket is RFCOMM, which is the type supported by the Android APIs. RFCOMM is a connection-oriented, streaming transport over Bluetooth. It is also known as the Serial Port Profile (SPP). <p> To create a <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html"> BluetoothSocket </a> </code></pre> for connecting to a known device, use <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createRfcommSocketToServiceRecord(java.util.UUID)"> BluetoothDevice.createRfcommSocketToServiceRecord() </a> </code></pre> . Then call <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#connect()"> connect() </a> </code></pre> to attempt a connection to the remote device. This call will block until a connection is established or the connection fails. <p> To create a <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html"> BluetoothSocket </a> </code></pre> as a server (or "host"), see the <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothServerSocket.html"> BluetoothServerSocket </a> </code></pre> documentation. <p> Once the socket is connected, whether initiated as a client or accepted as a server, open the IO streams by calling <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#getInputStream()"> getInputStream() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#getOutputStream()"> getOutputStream() </a> </code></pre> in order to retrieve <pre><code> <a href="https://developer.android.com/reference/java/io/InputStream.html"> InputStream </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/java/io/OutputStream.html"> OutputStream </a> </code></pre> objects, respectively, which are automatically connected to the socket. <p> <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html"> BluetoothSocket </a> </code></pre> is thread safe. In particular, <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html#close()"> close() </a> </code></pre> will always immediately abort ongoing operations and close the socket. <p class="note"> <strong> Note: </strong> Requires the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#BLUETOOTH"> BLUETOOTH </a> </code></pre> permission. </p>\n<pre><code>public final class BluetoothSocket\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/BluetoothSocket.html
android.bluetooth	A										<section class="prog__container">Provides classes that manage Bluetooth functionality, such as scanning fordevices, connecting with devices, and managing data transfer between devices.The Bluetooth API supports both "Classic Bluetooth" and Bluetooth Low Energy.</section>	https://developer.android.com/reference/android/bluetooth/package-summary.html
AdvertiseCallback	A										<section class="prog__container"><p> Bluetooth LE advertising callbacks, used to deliver advertising operation status.</p>\n<pre><code>public abstract class AdvertiseCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html
AdvertiseData.Builder	A										<section class="prog__container"><p> Builder for <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html"> AdvertiseData </a> </code></pre> .</p>\n<pre><code>public static final class AdvertiseData.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html
AdvertiseData	A										<section class="prog__container"><p> Advertise data packet container for Bluetooth LE advertising. This represents the data to be advertised as well as the scan response data for active scans. <p> Use <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.Builder.html"> AdvertiseData.Builder </a> </code></pre> to create an instance of <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html"> AdvertiseData </a> </code></pre> to be advertised. </p>\n<pre><code>public final class AdvertiseData\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html
AdvertiseSettings.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html"> AdvertiseSettings </a> </code></pre> .</p>\n<pre><code>public static final class AdvertiseSettings.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html
AdvertiseSettings	A										<section class="prog__container"><p> The <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html"> AdvertiseSettings </a> </code></pre> provide a way to adjust advertising preferences for each Bluetooth LE advertisement instance. Use <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html"> AdvertiseSettings.Builder </a> </code></pre> to create an instance of this class.</p>\n<pre><code>public final class AdvertiseSettings\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html
BluetoothLeAdvertiser	A										<section class="prog__container"><p> This class provides a way to perform Bluetooth LE advertise operations, such as starting and stopping advertising. An advertiser can broadcast up to 31 bytes of advertisement data represented by <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseData.html"> AdvertiseData </a> </code></pre> . <p> To get an instance of <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html"> BluetoothLeAdvertiser </a> </code></pre> , call the <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBluetoothLeAdvertiser()"> getBluetoothLeAdvertiser() </a> </code></pre> method. <p> <b> Note: </b> Most of the methods here require <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#BLUETOOTH_ADMIN"> BLUETOOTH_ADMIN </a> </code></pre> permission. </p>\n<pre><code>public final class BluetoothLeAdvertiser\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html
BluetoothLeScanner	A										<section class="prog__container"><p> This class provides methods to perform scan related operations for Bluetooth LE devices. An application can scan for a particular type of Bluetooth LE devices using <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html"> ScanFilter </a> </code></pre> . It can also request different types of callbacks for delivering the result. <p> Use <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBluetoothLeScanner()"> getBluetoothLeScanner() </a> </code></pre> to get an instance of <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html"> BluetoothLeScanner </a> </code></pre> . <p> <b> Note: </b> Most of the scan methods here require <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#BLUETOOTH_ADMIN"> BLUETOOTH_ADMIN </a> </code></pre> permission. </p>\n<pre><code>public final class BluetoothLeScanner\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html
android.bluetooth.le	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/bluetooth/le/package-summary.html
ScanCallback	A										<section class="prog__container"><p> Bluetooth LE scan callbacks. Scan results are reported using these callbacks.</p>\n<pre><code>public abstract class ScanCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html
ScanFilter.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html"> ScanFilter </a> </code></pre> .</p>\n<pre><code>public static final class ScanFilter.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html
ScanFilter	A										<section class="prog__container"><p> Criteria for filtering result from Bluetooth LE scans. A <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html"> ScanFilter </a> </code></pre> allows clients to restrict scan results to only those that are of interest to them. <p> Current filtering on the following fields are supported: <li> Service UUIDs which identify the bluetooth gatt services running on the device. <li> Name of remote Bluetooth LE device. <li> Mac address of the remote device. <li> Service data which is the data associated with a service. <li> Manufacturer specific data which is the data associated with a particular manufacturer. </li> </li> </li> </li> </li> </p>\n<pre><code>public final class ScanFilter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html
ScanRecord	A										<section class="prog__container"><p> Represents a scan record from Bluetooth LE scan.</p>\n<pre><code>public final class ScanRecord\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/ScanRecord.html
ScanResult	A										<section class="prog__container"><p> ScanResult for Bluetooth LE scan.</p>\n<pre><code>public final class ScanResult\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/ScanResult.html
ScanSettings.Builder	A										<section class="prog__container"><p> Builder for <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html"> ScanSettings </a> </code></pre> .</p>\n<pre><code>public static final class ScanSettings.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html
ScanSettings	A										<section class="prog__container"><p> Bluetooth LE scan settings are passed to <pre><code> <a href="https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#startScan(android.bluetooth.le.ScanCallback)"> startScan(ScanCallback) </a> </code></pre> to define the parameters for the scan.</p>\n<pre><code>public final class ScanSettings\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/bluetooth/le/ScanSettings.html
AbstractThreadedSyncAdapter	A										<section class="prog__container"><p> An abstract implementation of a SyncAdapter that spawns a thread to invoke a sync operation. If a sync operation is already in progress when a sync request is received, an error will be returned to the new request and the existing request will be allowed to continue. However if there is no sync in progress then a thread will be spawned and <pre><code> <a href="https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html#onPerformSync(android.accounts.Account, android.os.Bundle, java.lang.String, android.content.ContentProviderClient, android.content.SyncResult)"> onPerformSync(Account, Bundle, String, ContentProviderClient, SyncResult) </a> </code></pre> will be invoked on that thread. <p> Syncs can be cancelled at any time by the framework. For example a sync that was not user-initiated and lasts longer than 30 minutes will be considered timed-out and cancelled. Similarly the framework will attempt to determine whether or not an adapter is making progress by monitoring its network activity over the course of a minute. If the network traffic over this window is close enough to zero the sync will be cancelled. You can also request the sync be cancelled via <pre><code> <a href="https://developer.android.com/reference/android/content/ContentResolver.html#cancelSync(android.accounts.Account, java.lang.String)"> cancelSync(Account, String) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/content/ContentResolver.html#cancelSync(android.content.SyncRequest)"> cancelSync(SyncRequest) </a> </code></pre> . <p> A sync is cancelled by issuing a <pre><code> <a href="https://developer.android.com/reference/java/lang/Thread.html#interrupt()"> interrupt() </a> </code></pre> on the syncing thread. <strong> Either your code in <pre><code> <a href="https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html#onPerformSync(android.accounts.Account, android.os.Bundle, java.lang.String, android.content.ContentProviderClient, android.content.SyncResult)"> onPerformSync(Account, Bundle, String, ContentProviderClient, SyncResult) </a> </code></pre> must check <pre><code> <a href="https://developer.android.com/reference/java/lang/Thread.html#interrupted()"> interrupted() </a> </code></pre> , or you you must override one of <pre><code> <a href="https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html#onSyncCanceled(java.lang.Thread)"> onSyncCanceled(Thread) </a> </code></pre> / <pre><code> <a href="https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html#onSyncCanceled()"> onSyncCanceled() </a> </code></pre> </strong> (depending on whether or not your adapter supports syncing of multiple accounts in parallel). If your adapter does not respect the cancel issued by the framework you run the risk of your app's entire process being killed. <p> In order to be a sync adapter one must extend this class, provide implementations for the abstract methods and write a service that returns the result of <pre><code> <a href="https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html#getSyncAdapterBinder()"> getSyncAdapterBinder() </a> </code></pre> in the service's <pre><code> <a href="https://developer.android.com/reference/android/app/Service.html#onBind(android.content.Intent)"> onBind(android.content.Intent) </a> </code></pre> when invoked with an intent with action <pre><code> android.content.SyncAdapter </code></pre> . This service must specify the following intent filter and metadata tags in its AndroidManifest.xml file <pre> &lt;intent-filter&gt; &lt;action android:name="android.content.SyncAdapter" /&gt; &lt;/intent-filter&gt; &lt;meta-data android:name="android.content.SyncAdapter" android:resource="@xml/syncadapter" /&gt; </pre> The <pre><code> android:resource </code></pre> attribute must point to a resource that looks like: <pre> &lt;sync-adapter xmlns:android="http://schemas.android.com/apk/res/android" android:contentAuthority="authority" android:accountType="accountType" android:userVisible="true|false" android:supportsUploading="true|false" android:allowParallelSyncs="true|false" android:isAlwaysSyncable="true|false" android:syncAdapterSettingsAction="ACTION_OF_SETTINGS_ACTIVITY" /&gt; </pre> <ul> <li> The <pre><code> android:contentAuthority </code></pre> and <pre><code> android:accountType </code></pre> attributes indicate which content authority and for which account types this sync adapter serves. <li> <pre><code> android:userVisible </code></pre> defaults to true and controls whether or not this sync adapter shows up in the Sync Settings screen. <li> <pre><code> android:supportsUploading </code></pre> defaults to true and if true an upload-only sync will be requested for all syncadapters associated with an authority whenever that authority's content provider does a <pre><code> <a href="https://developer.android.com/reference/android/content/ContentResolver.html#notifyChange(android.net.Uri, android.database.ContentObserver, boolean)"> notifyChange(android.net.Uri, android.database.ContentObserver, boolean) </a> </code></pre> with syncToNetwork set to true. <li> <pre><code> android:allowParallelSyncs </code></pre> defaults to false and if true indicates that the sync adapter can handle syncs for multiple accounts at the same time. Otherwise the SyncManager will wait until the sync adapter is not in use before requesting that it sync an account's data. <li> <pre><code> android:isAlwaysSyncable </code></pre> defaults to false and if true tells the SyncManager to intialize the isSyncable state to 1 for that sync adapter for each account that is added. <li> <pre><code> android:syncAdapterSettingsAction </code></pre> defaults to null and if supplied it specifies an Intent action of an activity that can be used to adjust the sync adapter's sync settings. The activity must live in the same package as the sync adapter. </li> </li> </li> </li> </li> </li> </ul> </p>\n<pre><code>public abstract class AbstractThreadedSyncAdapter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html
ActivityNotFoundException	A										<section class="prog__container"><p> This exception is thrown when a call to <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#startActivity(android.content.Intent)"> startActivity(Intent) </a> </code></pre> or one of its variants fails because an Activity can not be found to execute the given Intent.</p>\n<pre><code>public class ActivityNotFoundException\n</code></pre></section>	https://developer.android.com/reference/android/content/ActivityNotFoundException.html
AsyncQueryHandler	A										<section class="prog__container"><p> A helper class to help make handling asynchronous <pre><code> <a href="https://developer.android.com/reference/android/content/ContentResolver.html"> ContentResolver </a> </code></pre> queries easier.</p>\n<pre><code>public abstract class AsyncQueryHandler\n</code></pre></section>	https://developer.android.com/reference/android/content/AsyncQueryHandler.html
AsyncQueryHandler.WorkerArgs	A										<section class="prog__container"><p></p>\n<pre><code>protected static final class AsyncQueryHandler.WorkerArgs\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html
AsyncQueryHandler.WorkerHandler	A										<section class="prog__container"><p> Subclasses must implement this to receive messages.</p>\n<pre><code>protected class AsyncQueryHandler.WorkerHandler\n</code></pre></section>	https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerHandler.html
AsyncTaskLoader	A										<section class="prog__container"><p> Abstract Loader that provides an <pre><code> <a href="https://developer.android.com/reference/android/os/AsyncTask.html"> AsyncTask </a> </code></pre> to do the work. See <pre><code> <a href="https://developer.android.com/reference/android/content/Loader.html"> Loader </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/LoaderManager.html"> LoaderManager </a> </code></pre> for more details. <p> Here is an example implementation of an AsyncTaskLoader subclass that loads the currently installed applications from the package manager. This implementation takes care of retrieving the application labels and sorting its result set from them, monitoring for changes to the installed applications, and rebuilding the list when a change in configuration requires this (such as a locale change). <pre>/** * This class holds the per-item data in our Loader. */public static class AppEntry { public AppEntry(AppListLoader loader, ApplicationInfo info) { mLoader = loader; mInfo = info; mApkFile = new File(info.sourceDir); } public ApplicationInfo getApplicationInfo() { return mInfo; } public String getLabel() { return mLabel; } public Drawable getIcon() { if (mIcon == null) { if (mApkFile.exists()) { mIcon = mInfo.loadIcon(mLoader.mPm); return mIcon; } else { mMounted = false; } } else if (!mMounted) { // If the app wasn't mounted but is now mounted, reload // its icon. if (mApkFile.exists()) { mMounted = true; mIcon = mInfo.loadIcon(mLoader.mPm); return mIcon; } } else { return mIcon; } return mLoader.getContext().getResources().getDrawable( android.R.drawable.sym_def_app_icon); } @Override public String toString() { return mLabel; } void loadLabel(Context context) { if (mLabel == null || !mMounted) { if (!mApkFile.exists()) { mMounted = false; mLabel = mInfo.packageName; } else { mMounted = true; CharSequence label = mInfo.loadLabel(context.getPackageManager()); mLabel = label != null ? label.toString() : mInfo.packageName; } } } private final AppListLoader mLoader; private final ApplicationInfo mInfo; private final File mApkFile; private String mLabel; private Drawable mIcon; private boolean mMounted;}/** * Perform alphabetical comparison of application entry objects. */public static final Comparator&lt;AppEntry&gt; ALPHA_COMPARATOR = new Comparator&lt;AppEntry&gt;() { private final Collator sCollator = Collator.getInstance(); @Override public int compare(AppEntry object1, AppEntry object2) { return sCollator.compare(object1.getLabel(), object2.getLabel()); }};/** * Helper for determining if the configuration has changed in an interesting * way so we need to rebuild the app list. */public static class InterestingConfigChanges { final Configuration mLastConfiguration = new Configuration(); int mLastDensity; boolean applyNewConfig(Resources res) { int configChanges = mLastConfiguration.updateFrom(res.getConfiguration()); boolean densityChanged = mLastDensity != res.getDisplayMetrics().densityDpi; if (densityChanged || (configChanges&amp;(ActivityInfo.CONFIG_LOCALE |ActivityInfo.CONFIG_UI_MODE|ActivityInfo.CONFIG_SCREEN_LAYOUT)) != 0) { mLastDensity = res.getDisplayMetrics().densityDpi; return true; } return false; }}/** * Helper class to look for interesting changes to the installed apps * so that the loader can be updated. */public static class PackageIntentReceiver extends BroadcastReceiver { final AppListLoader mLoader; public PackageIntentReceiver(AppListLoader loader) { mLoader = loader; IntentFilter filter = new IntentFilter(Intent.ACTION_PACKAGE_ADDED); filter.addAction(Intent.ACTION_PACKAGE_REMOVED); filter.addAction(Intent.ACTION_PACKAGE_CHANGED); filter.addDataScheme("package"); mLoader.getContext().registerReceiver(this, filter); // Register for events related to sdcard installation. IntentFilter sdFilter = new IntentFilter(); sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE); sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE); mLoader.getContext().registerReceiver(this, sdFilter); } @Override public void onReceive(Context context, Intent intent) { // Tell the loader about the change. mLoader.onContentChanged(); }}/** * A custom Loader that loads all of the installed applications. */public static class AppListLoader extends AsyncTaskLoader&lt;List&lt;AppEntry&gt;&gt; { final InterestingConfigChanges mLastConfig = new InterestingConfigChanges(); final PackageManager mPm; List&lt;AppEntry&gt; mApps; PackageIntentReceiver mPackageObserver; public AppListLoader(Context context) { super(context); // Retrieve the package manager for later use; note we don't // use 'context' directly but instead the save global application // context returned by getContext(). mPm = getContext().getPackageManager(); } /** * This is where the bulk of our work is done. This function is * called in a background thread and should generate a new set of * data to be published by the loader. */ @Override public List&lt;AppEntry&gt; loadInBackground() { // Retrieve all known applications. List&lt;ApplicationInfo&gt; apps = mPm.getInstalledApplications( PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS); if (apps == null) { apps = new ArrayList&lt;ApplicationInfo&gt;(); } final Context context = getContext(); // Create corresponding array of entries and load their labels. List&lt;AppEntry&gt; entries = new ArrayList&lt;AppEntry&gt;(apps.size()); for (int i=0; i&lt;apps.size(); i++) { AppEntry entry = new AppEntry(this, apps.get(i)); entry.loadLabel(context); entries.add(entry); } // Sort the list. Collections.sort(entries, ALPHA_COMPARATOR); // Done! return entries; } /** * Called when there is new data to deliver to the client. The * super class will take care of delivering it; the implementation * here just adds a little more logic. */ @Override public void deliverResult(List&lt;AppEntry&gt; apps) { if (isReset()) { // An async query came in while the loader is stopped. We // don't need the result. if (apps != null) { onReleaseResources(apps); } } List&lt;AppEntry&gt; oldApps = mApps; mApps = apps; if (isStarted()) { // If the Loader is currently started, we can immediately // deliver its results. super.deliverResult(apps); } // At this point we can release the resources associated with // 'oldApps' if needed; now that the new result is delivered we // know that it is no longer in use. if (oldApps != null) { onReleaseResources(oldApps); } } /** * Handles a request to start the Loader. */ @Override protected void onStartLoading() { if (mApps != null) { // If we currently have a result available, deliver it // immediately. deliverResult(mApps); } // Start watching for changes in the app data. if (mPackageObserver == null) { mPackageObserver = new PackageIntentReceiver(this); } // Has something interesting in the configuration changed since we // last built the app list? boolean configChange = mLastConfig.applyNewConfig(getContext().getResources()); if (takeContentChanged() || mApps == null || configChange) { // If the data has changed since the last time it was loaded // or is not currently available, start a load. forceLoad(); } } /** * Handles a request to stop the Loader. */ @Override protected void onStopLoading() { // Attempt to cancel the current load task if possible. cancelLoad(); } /** * Handles a request to cancel a load. */ @Override public void onCanceled(List&lt;AppEntry&gt; apps) { super.onCanceled(apps); // At this point we can release the resources associated with 'apps' // if needed. onReleaseResources(apps); } /** * Handles a request to completely reset the Loader. */ @Override protected void onReset() { super.onReset(); // Ensure the loader is stopped onStopLoading(); // At this point we can release the resources associated with 'apps' // if needed. if (mApps != null) { onReleaseResources(mApps); mApps = null; } // Stop monitoring for changes. if (mPackageObserver != null) { getContext().unregisterReceiver(mPackageObserver); mPackageObserver = null; } } /** * Helper function to take care of releasing resources associated * with an actively loaded data set. */ protected void onReleaseResources(List&lt;AppEntry&gt; apps) { // For a simple List&lt;&gt; there is nothing to do. For something // like a Cursor, we would close it here. }}</pre> <p> An example implementation of a fragment that uses the above loader to show the currently installed applications in a list is below. <pre>public static class AppListAdapter extends ArrayAdapter&lt;AppEntry&gt; { private final LayoutInflater mInflater; public AppListAdapter(Context context) { super(context, android.R.layout.simple_list_item_2); mInflater = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE); } public void setData(List&lt;AppEntry&gt; data) { clear(); if (data != null) { addAll(data); } } /** * Populate new items in the list. */ @Override public View getView(int position, View convertView, ViewGroup parent) { View view; if (convertView == null) { view = mInflater.inflate(R.layout.list_item_icon_text, parent, false); } else { view = convertView; } AppEntry item = getItem(position); ((ImageView)view.findViewById(R.id.icon)).setImageDrawable(item.getIcon()); ((TextView)view.findViewById(R.id.text)).setText(item.getLabel()); return view; }}public static class AppListFragment extends ListFragment implements OnQueryTextListener, OnCloseListener, LoaderManager.LoaderCallbacks&lt;List&lt;AppEntry&gt;&gt; { // This is the Adapter being used to display the list's data. AppListAdapter mAdapter; // The SearchView for doing filtering. SearchView mSearchView; // If non-null, this is the current filter the user has provided. String mCurFilter; @Override public void onActivityCreated(Bundle savedInstanceState) { super.onActivityCreated(savedInstanceState); // Give some text to display if there is no data. In a real // application this would come from a resource. setEmptyText("No applications"); // We have a menu item to show in action bar. setHasOptionsMenu(true); // Create an empty adapter we will use to display the loaded data. mAdapter = new AppListAdapter(getActivity()); setListAdapter(mAdapter); // Start out with a progress indicator. setListShown(false); // Prepare the loader. Either re-connect with an existing one, // or start a new one. getLoaderManager().initLoader(0, null, this); } public static class MySearchView extends SearchView { public MySearchView(Context context) { super(context); } // The normal SearchView doesn't clear its search text when // collapsed, so we will do this for it. @Override public void onActionViewCollapsed() { setQuery("", false); super.onActionViewCollapsed(); } } @Override public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) { // Place an action bar item for searching. MenuItem item = menu.add("Search"); item.setIcon(android.R.drawable.ic_menu_search); item.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW); mSearchView = new MySearchView(getActivity()); mSearchView.setOnQueryTextListener(this); mSearchView.setOnCloseListener(this); mSearchView.setIconifiedByDefault(true); item.setActionView(mSearchView); } @Override public boolean onQueryTextChange(String newText) { // Called when the action bar search text has changed. Since this // is a simple array adapter, we can just have it do the filtering. mCurFilter = !TextUtils.isEmpty(newText) ? newText : null; mAdapter.getFilter().filter(mCurFilter); return true; } @Override public boolean onQueryTextSubmit(String query) { // Don't care about this. return true; } @Override public boolean onClose() { if (!TextUtils.isEmpty(mSearchView.getQuery())) { mSearchView.setQuery(null, true); } return true; } @Override public void onListItemClick(ListView l, View v, int position, long id) { // Insert desired behavior here. Log.i("LoaderCustom", "Item clicked: " + id); } @Override public Loader&lt;List&lt;AppEntry&gt;&gt; onCreateLoader(int id, Bundle args) { // This is called when a new Loader needs to be created. This // sample only has one Loader with no arguments, so it is simple. return new AppListLoader(getActivity()); } @Override public void onLoadFinished(Loader&lt;List&lt;AppEntry&gt;&gt; loader, List&lt;AppEntry&gt; data) { // Set the new data in the adapter. mAdapter.setData(data); // The list should now be shown. if (isResumed()) { setListShown(true); } else { setListShownNoAnimation(true); } } @Override public void onLoaderReset(Loader&lt;List&lt;AppEntry&gt;&gt; loader) { // Clear the data in the adapter. mAdapter.setData(null); }}</pre> </p>\n<pre><code>public abstract class AsyncTaskLoader\n</code></pre></section>	https://developer.android.com/reference/android/content/AsyncTaskLoader.html
BroadcastReceiver	A										<section class="prog__container"><p> Base class for code that will receive intents sent by sendBroadcast(). <p> If you don't need to send broadcasts across applications, consider using this class with <pre><code> <a href="https://developer.android.com/reference/android/support/v4/content/LocalBroadcastManager.html"> LocalBroadcastManager </a> </code></pre> instead of the more general facilities described below. This will give you a much more efficient implementation (no cross-process communication needed) and allow you to avoid thinking about any security issues related to other applications being able to receive or send your broadcasts. <p> You can either dynamically register an instance of this class with <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)"> Context.registerReceiver() </a> </code></pre> or statically publish an implementation through the <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#AndroidManifestReceiver"> &lt;receiver&gt; </a> </code></pre> tag in your <pre><code> AndroidManifest.xml </code></pre> . <p> <em> <strong> Note: </strong> </em> If registering a receiver in your <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#onResume()"> Activity.onResume() </a> </code></pre> implementation, you should unregister it in <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#onPause()"> Activity.onPause() </a> </code></pre> . (You won't receive intents when paused, and this will cut down on unnecessary system overhead). Do not unregister in <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#onSaveInstanceState(android.os.Bundle)"> Activity.onSaveInstanceState() </a> </code></pre> , because this won't be called if the user moves back in the history stack. <p> There are two major classes of broadcasts that can be received: </p>\n<pre><code>public abstract class BroadcastReceiver\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/BroadcastReceiver.html
BroadcastReceiver.PendingResult	A										<section class="prog__container"><p> State for a result that is pending for a broadcast receiver. Returned by <pre><code> <a href="https://developer.android.com/reference/android/content/BroadcastReceiver.html#goAsync()"> goAsync() </a> </code></pre> while in <pre><code> <a href="https://developer.android.com/reference/android/content/BroadcastReceiver.html#onReceive(android.content.Context, android.content.Intent)"> BroadcastReceiver.onReceive() </a> </code></pre> . This allows you to return from onReceive() without having the broadcast terminate; you must call <pre><code> <a href="https://developer.android.com/reference/android/content/BroadcastReceiver.PendingResult.html#finish()"> finish() </a> </code></pre> once you are done with the broadcast. This allows you to process the broadcast off of the main thread of your app. <p> Note on threading: the state inside of this class is not itself thread-safe, however you can use it from any thread if you properly sure that you do not have races. Typically this means you will hand the entire object to another thread, which will be solely responsible for setting any results and finally calling <pre><code> <a href="https://developer.android.com/reference/android/content/BroadcastReceiver.PendingResult.html#finish()"> finish() </a> </code></pre> . </p>\n<pre><code>public static class BroadcastReceiver.PendingResult\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/BroadcastReceiver.PendingResult.html
ClipboardManager	A										<section class="prog__container"><p> Interface to the clipboard service, for placing and retrieving text in the global clipboard. <p> You do not instantiate this class directly; instead, retrieve it through <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.Class&lt;T&gt;)"> getSystemService(Class <t> ) </t> </a> </code></pre> . <p> The ClipboardManager API itself is very simple: it consists of methods to atomically get and set the current primary clipboard data. That data is expressed as a <pre><code> <a href="https://developer.android.com/reference/android/content/ClipData.html"> ClipData </a> </code></pre> object, which defines the protocol for data exchange between applications. </p>\n<pre><code>public class ClipboardManager\n</code></pre></section>	https://developer.android.com/reference/android/content/ClipboardManager.html
ClipboardManager.OnPrimaryClipChangedListener	A										<section class="prog__container"><p> Defines a listener callback that is invoked when the primary clip on the clipboard changes. Objects that want to register a listener call <pre><code> <a href="https://developer.android.com/reference/android/content/ClipboardManager.html#addPrimaryClipChangedListener(android.content.ClipboardManager.OnPrimaryClipChangedListener)"> addPrimaryClipChangedListener() </a> </code></pre> with an object that implements OnPrimaryClipChangedListener.</p>\n<pre><code>public static interface ClipboardManager.OnPrimaryClipChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/content/ClipboardManager.OnPrimaryClipChangedListener.html
ClipData	A										<section class="prog__container"><p> Representation of a clipped data on the clipboard. <p> ClipData is a complex type containing one or more Item instances, each of which can hold one or more representations of an item of data. For display to the user, it also has a label. </p>\n<pre><code>public class ClipData\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/ClipData.html
ClipData.Item	A										<section class="prog__container"><p> Description of a single item in a ClipData. <p> The types than an individual item can currently contain are: </p>\n<pre><code>public static class ClipData.Item\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/ClipData.Item.html
ClipDescription	A										<section class="prog__container"><p> Meta-data describing the contents of a <pre><code> <a href="https://developer.android.com/reference/android/content/ClipData.html"> ClipData </a> </code></pre> . Provides enough information to know if you can handle the ClipData, but not the data itself. </p>\n<pre><code>public class ClipDescription\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/ClipDescription.html
ComponentCallbacks	A										<section class="prog__container"><p> The set of callback APIs that are common to all application components ( <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/app/Service.html"> Service </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProvider.html"> ContentProvider </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/app/Application.html"> Application </a> </code></pre> ). <p class="note"> <strong> Note: </strong> You should also implement the <pre><code> <a href="https://developer.android.com/reference/android/content/ComponentCallbacks2.html"> ComponentCallbacks2 </a> </code></pre> interface, which provides the <pre><code> <a href="https://developer.android.com/reference/android/content/ComponentCallbacks2.html#onTrimMemory(int)"> onTrimMemory(int) </a> </code></pre> callback to help your app manage its memory usage more effectively. </p>\n<pre><code>public interface ComponentCallbacks\n</code></pre></section>	https://developer.android.com/reference/android/content/ComponentCallbacks.html
ComponentCallbacks2	A										<section class="prog__container"><p> Extended <pre><code> <a href="https://developer.android.com/reference/android/content/ComponentCallbacks.html"> ComponentCallbacks </a> </code></pre> interface with a new callback for finer-grained memory management. This interface is available in all application components ( <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/app/Service.html"> Service </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProvider.html"> ContentProvider </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/app/Application.html"> Application </a> </code></pre> ). <p> You should implement <pre><code> <a href="https://developer.android.com/reference/android/content/ComponentCallbacks2.html#onTrimMemory(int)"> onTrimMemory(int) </a> </code></pre> to incrementally release memory based on current system constraints. Using this callback to release your resources helps provide a more responsive system overall, but also directly benefits the user experience for your app by allowing the system to keep your process alive longer. That is, if you <em> don't </em> trim your resources based on memory levels defined by this callback, the system is more likely to kill your process while it is cached in the least-recently used (LRU) list, thus requiring your app to restart and restore all state when the user returns to it. <p> The values provided by <pre><code> <a href="https://developer.android.com/reference/android/content/ComponentCallbacks2.html#onTrimMemory(int)"> onTrimMemory(int) </a> </code></pre> do not represent a single linear progression of memory limits, but provide you different types of clues about memory availability: </p>\n<pre><code>public interface ComponentCallbacks2\nimplements <a href="https://developer.android.com/reference/android/content/ComponentCallbacks.html">ComponentCallbacks</a></code></pre></section>	https://developer.android.com/reference/android/content/ComponentCallbacks2.html
ComponentName	A										<section class="prog__container"><p> Identifier for a specific application component ( <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/app/Service.html"> Service </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/content/BroadcastReceiver.html"> BroadcastReceiver </a> </code></pre> , or <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProvider.html"> ContentProvider </a> </code></pre> ) that is available. Two pieces of information, encapsulated here, are required to identify a component: the package (a String) it exists in, and the class (a String) name inside of that package.</p>\n<pre><code>public final class ComponentName\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/ComponentName.html
ContentProvider	A										<section class="prog__container"><p> Content providers are one of the primary building blocks of Android applications, providing content to applications. They encapsulate data and provide it to applications through the single <pre><code> <a href="https://developer.android.com/reference/android/content/ContentResolver.html"> ContentResolver </a> </code></pre> interface. A content provider is only required if you need to share data between multiple applications. For example, the contacts data is used by multiple applications and must be stored in a content provider. If you don't need to share data amongst multiple applications you can use a database directly via <pre><code> <a href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html"> SQLiteDatabase </a> </code></pre> . <p> When a request is made via a <pre><code> <a href="https://developer.android.com/reference/android/content/ContentResolver.html"> ContentResolver </a> </code></pre> the system inspects the authority of the given URI and passes the request to the content provider registered with the authority. The content provider can interpret the rest of the URI however it wants. The <pre><code> <a href="https://developer.android.com/reference/android/content/UriMatcher.html"> UriMatcher </a> </code></pre> class is helpful for parsing URIs. </p>\n<pre><code>public abstract class ContentProvider\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/ContentProvider.html
ContentProvider.PipeDataWriter	A										<section class="prog__container"><p> Interface to write a stream of data to a pipe. Use with <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProvider.html#openPipeHelper(android.net.Uri, java.lang.String, android.os.Bundle, T, android.content.ContentProvider.PipeDataWriter&lt;T&gt;)"> openPipeHelper(Uri, String, Bundle, T, ContentProvider.PipeDataWriter <t> ) </t> </a> </code></pre> .</p>\n<pre><code>public static interface ContentProvider.PipeDataWriter\n</code></pre></section>	https://developer.android.com/reference/android/content/ContentProvider.PipeDataWriter.html
ContentProviderClient	A										<section class="prog__container"><p> The public interface object used to interact with a specific <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProvider.html"> ContentProvider </a> </code></pre> . <p> Instances can be obtained by calling <pre><code> <a href="https://developer.android.com/reference/android/content/ContentResolver.html#acquireContentProviderClient(android.net.Uri)"> acquireContentProviderClient(Uri) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/content/ContentResolver.html#acquireUnstableContentProviderClient(android.net.Uri)"> acquireUnstableContentProviderClient(Uri) </a> </code></pre> . Instances must be released using <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProviderClient.html#close()"> close() </a> </code></pre> in order to indicate to the system that the underlying <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProvider.html"> ContentProvider </a> </code></pre> is no longer needed and can be killed to free up resources. <p> Note that you should generally create a new ContentProviderClient instance for each thread that will be performing operations. Unlike <pre><code> <a href="https://developer.android.com/reference/android/content/ContentResolver.html"> ContentResolver </a> </code></pre> , the methods here such as <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProviderClient.html#query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)"> query(Uri, String[], String, String[], String) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProviderClient.html#openFile(android.net.Uri, java.lang.String)"> openFile(Uri, String) </a> </code></pre> are not thread safe -- you must not call <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProviderClient.html#close()"> close() </a> </code></pre> on the ContentProviderClient those calls are made from until you are finished with the data they have returned. </p>\n<pre><code>public class ContentProviderClient\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/ContentProviderClient.html
ContentProviderOperation.Builder	A										<section class="prog__container"><p> Used to add parameters to a <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProviderOperation.html"> ContentProviderOperation </a> </code></pre> . The <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProviderOperation.Builder.html"> ContentProviderOperation.Builder </a> </code></pre> is first created by calling <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProviderOperation.html#newInsert(android.net.Uri)"> newInsert(android.net.Uri) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProviderOperation.html#newUpdate(android.net.Uri)"> newUpdate(android.net.Uri) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProviderOperation.html#newDelete(android.net.Uri)"> newDelete(android.net.Uri) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProviderOperation.html#newAssertQuery(android.net.Uri)"> newAssertQuery(Uri) </a> </code></pre> . The withXXX methods can then be used to add parameters to the builder. See the specific methods to find for which <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProviderOperation.Builder.html"> ContentProviderOperation.Builder </a> </code></pre> type each is allowed. Call <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProviderOperation.Builder.html#build()"> build() </a> </code></pre> to create the <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProviderOperation.html"> ContentProviderOperation </a> </code></pre> once all the parameters have been supplied.</p>\n<pre><code>public static class ContentProviderOperation.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/ContentProviderOperation.Builder.html
ContentProviderOperation	A										<section class="prog__container"><p> Represents a single operation to be performed as part of a batch of operations.</p>\n<pre><code>public class ContentProviderOperation\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/ContentProviderOperation.html
ContentProviderResult	A										<section class="prog__container"><p> Contains the result of the application of a <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProviderOperation.html"> ContentProviderOperation </a> </code></pre> . It is guaranteed to have exactly one of <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProviderResult.html#uri"> uri </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProviderResult.html#count"> count </a> </code></pre> set.</p>\n<pre><code>public class ContentProviderResult\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/ContentProviderResult.html
ContentQueryMap	A										<section class="prog__container"><p> Caches the contents of a cursor into a Map of String-&gt;ContentValues and optionally keeps the cache fresh by registering for updates on the content backing the cursor. The column of the database that is to be used as the key of the map is user-configurable, and the ContentValues contains all columns other than the one that is designated the key. <p> The cursor data is accessed by row key and column name via getValue(). </p>\n<pre><code>public class ContentQueryMap\n</code></pre></section>	https://developer.android.com/reference/android/content/ContentQueryMap.html
ContentResolver	A										<section class="prog__container"><p> This class provides applications access to the content model. </p>\n<pre><code>public abstract class ContentResolver\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/ContentResolver.html
ContentUris	A										<section class="prog__container"><p> Utility methods useful for working with <pre><code> <a href="https://developer.android.com/reference/android/net/Uri.html"> Uri </a> </code></pre> objects that use the "content" (content://) scheme. <p> Content URIs have the syntax </p>\n<pre><code>public class ContentUris\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/ContentUris.html
ContentValues	A										<section class="prog__container"><p> This class is used to store a set of values that the <pre><code> <a href="https://developer.android.com/reference/android/content/ContentResolver.html"> ContentResolver </a> </code></pre> can process.</p>\n<pre><code>public final class ContentValues\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/ContentValues.html
Context	A										<section class="prog__container"><p> Interface to global information about an application environment. This is an abstract class whose implementation is provided by the Android system. It allows access to application-specific resources and classes, as well as up-calls for application-level operations such as launching activities, broadcasting and receiving intents, etc.</p>\n<pre><code>public abstract class Context\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/Context.html
ContextWrapper	A										<section class="prog__container"><p> Proxying implementation of Context that simply delegates all of its calls to another Context. Can be subclassed to modify behavior without changing the original Context.</p>\n<pre><code>public class ContextWrapper\n</code></pre></section>	https://developer.android.com/reference/android/content/ContextWrapper.html
CursorLoader	A										<section class="prog__container"><p> A loader that queries the <pre><code> <a href="https://developer.android.com/reference/android/content/ContentResolver.html"> ContentResolver </a> </code></pre> and returns a <pre><code> <a href="https://developer.android.com/reference/android/database/Cursor.html"> Cursor </a> </code></pre> . This class implements the <pre><code> <a href="https://developer.android.com/reference/android/content/Loader.html"> Loader </a> </code></pre> protocol in a standard way for querying cursors, building on <pre><code> <a href="https://developer.android.com/reference/android/content/AsyncTaskLoader.html"> AsyncTaskLoader </a> </code></pre> to perform the cursor query on a background thread so that it does not block the application's UI. <p> A CursorLoader must be built with the full information for the query to perform, either through the <pre><code> <a href="https://developer.android.com/reference/android/content/CursorLoader.html#CursorLoader(android.content.Context, android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)"> CursorLoader(Context, Uri, String[], String, String[], String) </a> </code></pre> or creating an empty instance with <pre><code> <a href="https://developer.android.com/reference/android/content/CursorLoader.html#CursorLoader(android.content.Context)"> CursorLoader(Context) </a> </code></pre> and filling in the desired paramters with <pre><code> <a href="https://developer.android.com/reference/android/content/CursorLoader.html#setUri(android.net.Uri)"> setUri(Uri) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/content/CursorLoader.html#setSelection(java.lang.String)"> setSelection(String) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/content/CursorLoader.html#setSelectionArgs(java.lang.String[])"> setSelectionArgs(String[]) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/content/CursorLoader.html#setSortOrder(java.lang.String)"> setSortOrder(String) </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/content/CursorLoader.html#setProjection(java.lang.String[])"> setProjection(String[]) </a> </code></pre> . </p>\n<pre><code>public class CursorLoader\n</code></pre></section>	https://developer.android.com/reference/android/content/CursorLoader.html
DialogInterface	A										<section class="prog__container"><p></p>\n<pre><code>public interface DialogInterface\n</code></pre></section>	https://developer.android.com/reference/android/content/DialogInterface.html
DialogInterface.OnCancelListener	A										<section class="prog__container"><p> Interface used to allow the creator of a dialog to run some code when the dialog is canceled. <p> This will only be called when the dialog is canceled, if the creator needs to know when it is dismissed in general, use <pre><code> <a href="https://developer.android.com/reference/android/content/DialogInterface.OnDismissListener.html"> DialogInterface.OnDismissListener </a> </code></pre> . </p>\n<pre><code>public static interface DialogInterface.OnCancelListener\n</code></pre></section>	https://developer.android.com/reference/android/content/DialogInterface.OnCancelListener.html
DialogInterface.OnClickListener	A										<section class="prog__container"><p> Interface used to allow the creator of a dialog to run some code when an item on the dialog is clicked..</p>\n<pre><code>public static interface DialogInterface.OnClickListener\n</code></pre></section>	https://developer.android.com/reference/android/content/DialogInterface.OnClickListener.html
DialogInterface.OnDismissListener	A										<section class="prog__container"><p> Interface used to allow the creator of a dialog to run some code when the dialog is dismissed.</p>\n<pre><code>public static interface DialogInterface.OnDismissListener\n</code></pre></section>	https://developer.android.com/reference/android/content/DialogInterface.OnDismissListener.html
DialogInterface.OnKeyListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a key event is dispatched to this dialog. The callback will be invoked before the key event is given to the dialog.</p>\n<pre><code>public static interface DialogInterface.OnKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/content/DialogInterface.OnKeyListener.html
DialogInterface.OnMultiChoiceClickListener	A										<section class="prog__container"><p> Interface used to allow the creator of a dialog to run some code when an item in a multi-choice dialog is clicked.</p>\n<pre><code>public static interface DialogInterface.OnMultiChoiceClickListener\n</code></pre></section>	https://developer.android.com/reference/android/content/DialogInterface.OnMultiChoiceClickListener.html
DialogInterface.OnShowListener	A										<section class="prog__container"><p> Interface used to allow the creator of a dialog to run some code when the dialog is shown.</p>\n<pre><code>public static interface DialogInterface.OnShowListener\n</code></pre></section>	https://developer.android.com/reference/android/content/DialogInterface.OnShowListener.html
Entity	A										<section class="prog__container"><p> A representation of a item using ContentValues. It contains one top level ContentValue plus a collection of Uri, ContentValues tuples as subvalues. One example of its use is in Contacts, where the top level ContentValue contains the columns from the RawContacts table and the subvalues contain a ContentValues object for each row from the Data table that corresponds to that RawContact. The uri refers to the Data table uri for each row.</p>\n<pre><code>public final class Entity\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/Entity.html
Entity.NamedContentValues	A										<section class="prog__container"><p></p>\n<pre><code>public static class Entity.NamedContentValues\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/Entity.NamedContentValues.html
EntityIterator	A										<section class="prog__container"><p> A specialization of <pre><code> <a href="https://developer.android.com/reference/java/util/Iterator.html"> Iterator </a> </code></pre> that allows iterating over a collection of <pre><code> <a href="https://developer.android.com/reference/android/content/Entity.html"> Entity </a> </code></pre> objects. In addition to the iteration functionality it also allows resetting the iterator back to the beginning and provides for an explicit <pre><code> <a href="https://developer.android.com/reference/android/content/EntityIterator.html#close()"> close() </a> </code></pre> method to indicate that the iterator is no longer needed and that its resources can be released.</p>\n<pre><code>public interface EntityIterator\nimplements <a href="https://developer.android.com/reference/java/util/Iterator.html">Iterator</a>&lt;<a href="https://developer.android.com/reference/android/content/Entity.html">Entity</a>&gt;</code></pre></section>	https://developer.android.com/reference/android/content/EntityIterator.html
Intent.FilterComparison	A										<section class="prog__container"><p> Wrapper class holding an Intent and implementing comparisons on it for the purpose of filtering. The class implements its <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.FilterComparison.html#equals(java.lang.Object)"> equals() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.FilterComparison.html#hashCode()"> hashCode() </a> </code></pre> methods as simple calls to <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#filterEquals(android.content.Intent)"> filterEquals(Intent) </a> </code></pre> filterEquals()} and <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#filterHashCode()"> filterHashCode() </a> </code></pre> filterHashCode()} on the wrapped Intent.</p>\n<pre><code>public static final class Intent.FilterComparison\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/Intent.FilterComparison.html
Intent	A										<section class="prog__container"><p> An intent is an abstract description of an operation to be performed. It can be used with <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#startActivity(android.content.Intent)"> startActivity </a> </code></pre> to launch an <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#sendBroadcast(android.content.Intent)"> broadcastIntent </a> </code></pre> to send it to any interested <pre><code> <a href="https://developer.android.com/reference/android/content/BroadcastReceiver.html"> BroadcastReceiver </a> </code></pre> components, and <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent)"> startService(Intent) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent, android.content.ServiceConnection, int)"> bindService(Intent, ServiceConnection, int) </a> </code></pre> to communicate with a background <pre><code> <a href="https://developer.android.com/reference/android/app/Service.html"> Service </a> </code></pre> . <p> An Intent provides a facility for performing late runtime binding between the code in different applications. Its most significant use is in the launching of activities, where it can be thought of as the glue between activities. It is basically a passive data structure holding an abstract description of an action to be performed. </p>\n<pre><code>public class Intent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/Intent.html
Intent.ShortcutIconResource	A										<section class="prog__container"><p> Represents a shortcut/live folder icon resource.</p>\n<pre><code>public static class Intent.ShortcutIconResource\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/Intent.ShortcutIconResource.html
IntentFilter.AuthorityEntry	A										<section class="prog__container"><p> This is an entry for a single authority in the Iterator returned by <pre><code> <a href="https://developer.android.com/reference/android/content/IntentFilter.html#authoritiesIterator()"> authoritiesIterator() </a> </code></pre> .</p>\n<pre><code>public static final class IntentFilter.AuthorityEntry\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/IntentFilter.AuthorityEntry.html
IntentFilter	A										<section class="prog__container"><p> Structured description of Intent values to be matched. An IntentFilter can match against actions, categories, and data (either via its type, scheme, and/or path) in an Intent. It also includes a "priority" value which is used to order multiple matching filters. <p> IntentFilter objects are often created in XML as part of a package's <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#AndroidManifest"> AndroidManifest.xml </a> </code></pre> file, using <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#AndroidManifestIntentFilter"> intent-filter </a> </code></pre> tags. <p> There are three Intent characteristics you can filter on: the <em> action </em> , <em> data </em> , and <em> categories </em> . For each of these characteristics you can provide multiple possible matching values (via <pre><code> <a href="https://developer.android.com/reference/android/content/IntentFilter.html#addAction(java.lang.String)"> addAction(String) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/content/IntentFilter.html#addDataType(java.lang.String)"> addDataType(String) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/content/IntentFilter.html#addDataScheme(java.lang.String)"> addDataScheme(String) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/content/IntentFilter.html#addDataSchemeSpecificPart(java.lang.String, int)"> addDataSchemeSpecificPart(String, int) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/content/IntentFilter.html#addDataAuthority(java.lang.String, java.lang.String)"> addDataAuthority(String, String) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/content/IntentFilter.html#addDataPath(java.lang.String, int)"> addDataPath(String, int) </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/content/IntentFilter.html#addCategory(java.lang.String)"> addCategory(String) </a> </code></pre> , respectively). For actions, the field will not be tested if no values have been given (treating it as a wildcard); if no data characteristics are specified, however, then the filter will only match intents that contain no data. <p> The data characteristic is itself divided into three attributes: type, scheme, authority, and path. Any that are specified must match the contents of the Intent. If you specify a scheme but no type, only Intent that does not have a type (such as mailto:) will match; a content: URI will never match because they always have a MIME type that is supplied by their content provider. Specifying a type with no scheme has somewhat special meaning: it will match either an Intent with no URI field, or an Intent with a content: or file: URI. If you specify neither, then only an Intent with no data or type will match. To specify an authority, you must also specify one or more schemes that it is associated with. To specify a path, you also must specify both one or more authorities and one or more schemes it is associated with. </p>\n<pre><code>public class IntentFilter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/IntentFilter.html
IntentFilter.MalformedMimeTypeException	A										<section class="prog__container"><p> This exception is thrown when a given MIME type does not have a valid syntax.</p>\n<pre><code>public static class IntentFilter.MalformedMimeTypeException\n</code></pre></section>	https://developer.android.com/reference/android/content/IntentFilter.MalformedMimeTypeException.html
IntentSender	A										<section class="prog__container"><p> A description of an Intent and target action to perform with it. The returned object can be handed to other applications so that they can perform the action you described on your behalf at a later time. <p> By giving a IntentSender to another application, you are granting it the right to perform the operation you have specified as if the other application was yourself (with the same permissions and identity). As such, you should be careful about how you build the IntentSender: often, for example, the base Intent you supply will have the component name explicitly set to one of your own components, to ensure it is ultimately sent there and nowhere else. <p> A IntentSender itself is simply a reference to a token maintained by the system describing the original data used to retrieve it. This means that, even if its owning application's process is killed, the IntentSender itself will remain usable from other processes that have been given it. If the creating application later re-retrieves the same kind of IntentSender (same operation, same Intent action, data, categories, and components, and same flags), it will receive a IntentSender representing the same token if that is still valid. <p> Instances of this class can not be made directly, but rather must be created from an existing <pre><code> <a href="https://developer.android.com/reference/android/app/PendingIntent.html"> PendingIntent </a> </code></pre> with <pre><code> <a href="https://developer.android.com/reference/android/app/PendingIntent.html#getIntentSender()"> PendingIntent.getIntentSender() </a> </code></pre> . </p>\n<pre><code>public class IntentSender\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/IntentSender.html
IntentSender.OnFinished	A										<section class="prog__container"><p> Callback interface for discovering when a send operation has completed. Primarily for use with a IntentSender that is performing a broadcast, this provides the same information as calling <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)"> Context.sendBroadcast() </a> </code></pre> with a final BroadcastReceiver.</p>\n<pre><code>public static interface IntentSender.OnFinished\n</code></pre></section>	https://developer.android.com/reference/android/content/IntentSender.OnFinished.html
IntentSender.SendIntentException	A										<section class="prog__container"><p> Exception thrown when trying to send through a PendingIntent that has been canceled or is otherwise no longer able to execute the request.</p>\n<pre><code>public static class IntentSender.SendIntentException\n</code></pre></section>	https://developer.android.com/reference/android/content/IntentSender.SendIntentException.html
Loader.ForceLoadContentObserver	A										<section class="prog__container"><p> An implementation of a ContentObserver that takes care of connecting it to the Loader to have the loader re-load its data when the observer is told it has changed. You do not normally need to use this yourself; it is used for you by <pre><code> <a href="https://developer.android.com/reference/android/content/CursorLoader.html"> CursorLoader </a> </code></pre> to take care of executing an update when the cursor's backing data changes.</p>\n<pre><code>public final class Loader.ForceLoadContentObserver\n</code></pre></section>	https://developer.android.com/reference/android/content/Loader.ForceLoadContentObserver.html
Loader	A										<section class="prog__container"><p> A class that performs asynchronous loading of data. While Loaders are active they should monitor the source of their data and deliver new results when the contents change. See <pre><code> <a href="https://developer.android.com/reference/android/app/LoaderManager.html"> LoaderManager </a> </code></pre> for more detail. <p> <b> Note on threading: </b> Clients of loaders should as a rule perform any calls on to a Loader from the main thread of their process (that is, the thread the Activity callbacks and other things occur on). Subclasses of Loader (such as <pre><code> <a href="https://developer.android.com/reference/android/content/AsyncTaskLoader.html"> AsyncTaskLoader </a> </code></pre> ) will often perform their work in a separate thread, but when delivering their results this too should be done on the main thread. </p>\n<pre><code>public class Loader\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/Loader.html
Loader.OnLoadCanceledListener	A										<section class="prog__container"><p> Interface that is implemented to discover when a Loader has been canceled before it finished loading its data. You do not normally need to implement this yourself; it is used in the implementation of <pre><code> <a href="https://developer.android.com/reference/android/app/LoaderManager.html"> LoaderManager </a> </code></pre> to find out when a Loader it is managing has been canceled so that it can schedule the next Loader. This interface should only be used if a Loader is not being used in conjunction with LoaderManager.</p>\n<pre><code>public static interface Loader.OnLoadCanceledListener\n</code></pre></section>	https://developer.android.com/reference/android/content/Loader.OnLoadCanceledListener.html
Loader.OnLoadCompleteListener	A										<section class="prog__container"><p> Interface that is implemented to discover when a Loader has finished loading its data. You do not normally need to implement this yourself; it is used in the implementation of <pre><code> <a href="https://developer.android.com/reference/android/app/LoaderManager.html"> LoaderManager </a> </code></pre> to find out when a Loader it is managing has completed so that this can be reported to its client. This interface should only be used if a Loader is not being used in conjunction with LoaderManager.</p>\n<pre><code>public static interface Loader.OnLoadCompleteListener\n</code></pre></section>	https://developer.android.com/reference/android/content/Loader.OnLoadCompleteListener.html
MutableContextWrapper	A										<section class="prog__container"><p> Special version of <pre><code> <a href="https://developer.android.com/reference/android/content/ContextWrapper.html"> ContextWrapper </a> </code></pre> that allows the base context to be modified after it is initially set.</p>\n<pre><code>public class MutableContextWrapper\n</code></pre></section>	https://developer.android.com/reference/android/content/MutableContextWrapper.html
OperationApplicationException	A										<section class="prog__container"><p> Thrown when an application of a <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProviderOperation.html"> ContentProviderOperation </a> </code></pre> fails due the specified constraints.</p>\n<pre><code>public class OperationApplicationException\n</code></pre></section>	https://developer.android.com/reference/android/content/OperationApplicationException.html
android.content	A										<section class="prog__container">Contains classes for accessing and publishing data on a device. It includes three maincategories of APIs:</section>	https://developer.android.com/reference/android/content/package-summary.html
PeriodicSync	A										<section class="prog__container"><p> Value type that contains information about a periodic sync.</p>\n<pre><code>public class PeriodicSync\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/PeriodicSync.html
ReceiverCallNotAllowedException	A										<section class="prog__container"><p> This exception is thrown from <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)"> registerReceiver(BroadcastReceiver, IntentFilter) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent, android.content.ServiceConnection, int)"> bindService(Intent, ServiceConnection, int) </a> </code></pre> when these methods are being used from an <pre><code> <a href="https://developer.android.com/reference/android/content/BroadcastReceiver.html"> BroadcastReceiver </a> </code></pre> component. In this case, the component will no longer be active upon returning from receiving the Intent, so it is not valid to use asynchronous APIs.</p>\n<pre><code>public class ReceiverCallNotAllowedException\n</code></pre></section>	https://developer.android.com/reference/android/content/ReceiverCallNotAllowedException.html
RestrictionEntry	A										<section class="prog__container"><p> Applications can expose restrictions for a restricted user on a multiuser device. The administrator can configure these restrictions that will then be applied to the restricted user. Each RestrictionsEntry is one configurable restriction. <p> </p>\n<pre><code>public class RestrictionEntry\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/RestrictionEntry.html
RestrictionsManager	A										<section class="prog__container"><p> Provides a mechanism for apps to query restrictions imposed by an entity that manages the user. Apps can also send permission requests to a local or remote device administrator to override default app-specific restrictions or any other operation that needs explicit authorization from the administrator. <p> Apps can expose a set of restrictions via an XML file specified in the manifest. <p> If the user has an active Restrictions Provider, dynamic requests can be made in addition to the statically imposed restrictions. Dynamic requests are app-specific and can be expressed via a predefined set of request types. <p> The RestrictionsManager forwards the dynamic requests to the active Restrictions Provider. The Restrictions Provider can respond back to requests by calling <pre><code> <a href="https://developer.android.com/reference/android/content/RestrictionsManager.html#notifyPermissionResponse(java.lang.String, android.os.PersistableBundle)"> notifyPermissionResponse(String, PersistableBundle) </a> </code></pre> , when a response is received from the administrator of the device or user. The response is relayed back to the application via a protected broadcast, <pre><code> <a href="https://developer.android.com/reference/android/content/RestrictionsManager.html#ACTION_PERMISSION_RESPONSE_RECEIVED"> ACTION_PERMISSION_RESPONSE_RECEIVED </a> </code></pre> . <p> Static restrictions are specified by an XML file referenced by a meta-data attribute in the manifest. This enables applications as well as any web administration consoles to be able to read the list of available restrictions from the apk. <p> The syntax of the XML format is as follows: <pre> &lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;restrictions xmlns:android="http://schemas.android.com/apk/res/android" &gt; &lt;restriction android:key="string" android:title="string resource" android:restrictionType=["bool" | "string" | "integer" | "choice" | "multi-select" | "hidden" | "bundle" | "bundle_array"] android:description="string resource" android:entries="string-array resource" android:entryValues="string-array resource" android:defaultValue="reference" &gt; &lt;restriction ... /&gt; ... &lt;/restriction&gt; &lt;restriction ... /&gt; ... &lt;/restrictions&gt; </pre> <p> The attributes for each restriction depend on the restriction type. <p> <ul> <li> <pre><code> key </code></pre> , <pre><code> title </code></pre> and <pre><code> restrictionType </code></pre> are mandatory. </li> <li> <pre><code> entries </code></pre> and <pre><code> entryValues </code></pre> are required if <pre><code> restrictionType </code></pre> is <pre><code> choice </code></pre> or <pre><code> multi-select </code></pre> . </li> <li> <pre><code> defaultValue </code></pre> is optional and its type depends on the <pre><code> restrictionType </code></pre> </li> <li> <pre><code> hidden </code></pre> type must have a <pre><code> defaultValue </code></pre> and will not be shown to the administrator. It can be used to pass along data that cannot be modified, such as a version code. </li> <li> <pre><code> description </code></pre> is meant to describe the restriction in more detail to the administrator controlling the values, if the title is not sufficient. </li> </ul> <p> Only restrictions of type <pre><code> bundle </code></pre> and <pre><code> bundle_array </code></pre> can have one or multiple nested restriction elements. <p> In your manifest's <pre><code> application </code></pre> section, add the meta-data tag to point to the restrictions XML file as shown below: <pre> &lt;application ... &gt; &lt;meta-data android:name="android.content.APP_RESTRICTIONS" android:resource="@xml/app_restrictions" /&gt; ... &lt;/application&gt; </pre> </p>\n<pre><code>public class RestrictionsManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/RestrictionsManager.html
SearchRecentSuggestionsProvider	A										<section class="prog__container"><p> This superclass can be used to create a simple search suggestions provider for your application. It creates suggestions (as the user types) based on recent queries and/or recent views. <p> In order to use this class, you must do the following. <ul> <li> Implement and test query search, as described in <pre><code> <a href="https://developer.android.com/reference/android/app/SearchManager.html"> SearchManager </a> </code></pre> . (This provider will send any suggested queries via the standard <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_SEARCH"> ACTION_SEARCH </a> </code></pre> Intent, which you'll already support once you have implemented and tested basic searchability.) </li> <li> Create a Content Provider within your application by extending <pre><code> <a href="https://developer.android.com/reference/android/content/SearchRecentSuggestionsProvider.html"> SearchRecentSuggestionsProvider </a> </code></pre> . The class you create will be very simple - typically, it will have only a constructor. But the constructor has a very important responsibility: When it calls <pre><code> <a href="https://developer.android.com/reference/android/content/SearchRecentSuggestionsProvider.html#setupSuggestions(java.lang.String, int)"> setupSuggestions(String, int) </a> </code></pre> , it <i> configures </i> the provider to match the requirements of your searchable activity. </li> <li> Create a manifest entry describing your provider. Typically this would be as simple as adding the following lines: <pre class="prettyprint"> &lt;!-- Content provider for search suggestions --&gt; &lt;provider android:name="YourSuggestionProviderClass" android:authorities="your.suggestion.authority" /&gt;</pre> </li> <li> Please note that you <i> do not </i> instantiate this content provider directly from within your code. This is done automatically by the system Content Resolver, when the search dialog looks for suggestions. </li> <li> In order for the Content Resolver to do this, you must update your searchable activity's XML configuration file with information about your content provider. The following additions are usually sufficient: <pre class="prettyprint"> android:searchSuggestAuthority="your.suggestion.authority" android:searchSuggestSelection=" ? "</pre> </li> <li> In your searchable activities, capture any user-generated queries and record them for future searches by calling <pre><code> <a href="https://developer.android.com/reference/android/provider/SearchRecentSuggestions.html#saveRecentQuery(java.lang.String, java.lang.String)"> SearchRecentSuggestions.saveRecentQuery() </a> </code></pre> . </li> </ul> </p>\n<pre><code>public class SearchRecentSuggestionsProvider\n</code></pre></section>	https://developer.android.com/reference/android/content/SearchRecentSuggestionsProvider.html
ServiceConnection	A										<section class="prog__container"><p> Interface for monitoring the state of an application service. See <pre><code> <a href="https://developer.android.com/reference/android/app/Service.html"> Service </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent, android.content.ServiceConnection, int)"> Context.bindService() </a> </code></pre> for more information. <p> Like many callbacks from the system, the methods on this class are called from the main thread of your process. </p>\n<pre><code>public interface ServiceConnection\n</code></pre></section>	https://developer.android.com/reference/android/content/ServiceConnection.html
SharedPreferences.Editor	A										<section class="prog__container"><p> Interface used for modifying values in a <pre><code> <a href="https://developer.android.com/reference/android/content/SharedPreferences.html"> SharedPreferences </a> </code></pre> object. All changes you make in an editor are batched, and not copied back to the original <pre><code> <a href="https://developer.android.com/reference/android/content/SharedPreferences.html"> SharedPreferences </a> </code></pre> until you call <pre><code> <a href="https://developer.android.com/reference/android/content/SharedPreferences.Editor.html#commit()"> commit() </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/content/SharedPreferences.Editor.html#apply()"> apply() </a> </code></pre></p>\n<pre><code>public static interface SharedPreferences.Editor\n</code></pre></section>	https://developer.android.com/reference/android/content/SharedPreferences.Editor.html
SharedPreferences	A										<section class="prog__container"><p> Interface for accessing and modifying preference data returned by <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSharedPreferences(java.lang.String, int)"> getSharedPreferences(String, int) </a> </code></pre> . For any particular set of preferences, there is a single instance of this class that all clients share. Modifications to the preferences must go through an <pre><code> <a href="https://developer.android.com/reference/android/content/SharedPreferences.Editor.html"> SharedPreferences.Editor </a> </code></pre> object to ensure the preference values remain in a consistent state and control when they are committed to storage. Objects that are returned from the various <pre><code> get </code></pre> methods must be treated as immutable by the application. <p> <em> Note: This class does not support use across multiple processes. </em> </p>\n<pre><code>public interface SharedPreferences\n</code></pre></section>	https://developer.android.com/reference/android/content/SharedPreferences.html
SharedPreferences.OnSharedPreferenceChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a shared preference is changed.</p>\n<pre><code>public static interface SharedPreferences.OnSharedPreferenceChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/content/SharedPreferences.OnSharedPreferenceChangeListener.html
SyncAdapterType	A										<section class="prog__container"><p> Value type that represents a SyncAdapterType. This object overrides <pre><code> <a href="https://developer.android.com/reference/android/content/SyncAdapterType.html#equals(java.lang.Object)"> equals(Object) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/content/SyncAdapterType.html#hashCode()"> hashCode() </a> </code></pre> , making it suitable for use as the key of a <pre><code> <a href="https://developer.android.com/reference/java/util/Map.html"> Map </a> </code></pre></p>\n<pre><code>public class SyncAdapterType\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/SyncAdapterType.html
SyncContext	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public class SyncContext\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/SyncContext.html
SyncInfo	A										<section class="prog__container"><p> Information about the sync operation that is currently underway.</p>\n<pre><code>public class SyncInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/SyncInfo.html
SyncRequest.Builder	A										<section class="prog__container"><p> Builder class for a @link SyncRequest. As you build your SyncRequest this class will also perform validation.</p>\n<pre><code>public static class SyncRequest.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/SyncRequest.Builder.html
SyncRequest	A										<section class="prog__container"><p> Convenience class to construct sync requests. See <pre><code> <a href="https://developer.android.com/reference/android/content/SyncRequest.Builder.html"> SyncRequest.Builder </a> </code></pre> for an explanation of the various functions. The resulting object is passed through to the framework via <pre><code> <a href="https://developer.android.com/reference/android/content/ContentResolver.html#requestSync(android.content.SyncRequest)"> requestSync(SyncRequest) </a> </code></pre> .</p>\n<pre><code>public class SyncRequest\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/SyncRequest.html
SyncResult	A										<section class="prog__container"><p> This class is used to communicate the results of a sync operation to the SyncManager. Based on the values here the SyncManager will determine the disposition of the sync and whether or not a new sync operation needs to be scheduled in the future.</p>\n<pre><code>public final class SyncResult\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/SyncResult.html
SyncStats	A										<section class="prog__container"><p> Used to record various statistics about the result of a sync operation. The SyncManager gets access to these via a <pre><code> <a href="https://developer.android.com/reference/android/content/SyncResult.html"> SyncResult </a> </code></pre> and uses some of them to determine the disposition of the sync. See <pre><code> <a href="https://developer.android.com/reference/android/content/SyncResult.html"> SyncResult </a> </code></pre> for further dicussion on how the SyncManager uses these values.</p>\n<pre><code>public class SyncStats\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/SyncStats.html
SyncStatusObserver	A										<section class="prog__container"><p></p>\n<pre><code>public interface SyncStatusObserver\n</code></pre></section>	https://developer.android.com/reference/android/content/SyncStatusObserver.html
UriMatcher	A										<section class="prog__container"><p> Utility class to aid in matching URIs in content providers. <p> To use this class, build up a tree of <pre><code> UriMatcher </code></pre> objects.For example: <pre> private static final int PEOPLE = 1; private static final int PEOPLE_ID = 2; private static final int PEOPLE_PHONES = 3; private static final int PEOPLE_PHONES_ID = 4; private static final int PEOPLE_CONTACTMETHODS = 7; private static final int PEOPLE_CONTACTMETHODS_ID = 8; private static final int DELETED_PEOPLE = 20; private static final int PHONES = 9; private static final int PHONES_ID = 10; private static final int PHONES_FILTER = 14; private static final int CONTACTMETHODS = 18; private static final int CONTACTMETHODS_ID = 19; private static final int CALLS = 11; private static final int CALLS_ID = 12; private static final int CALLS_FILTER = 15; private static final UriMatcher sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH); static { sURIMatcher.addURI("contacts", "people", PEOPLE); sURIMatcher.addURI("contacts", "people/#", PEOPLE_ID); sURIMatcher.addURI("contacts", "people/#/phones", PEOPLE_PHONES); sURIMatcher.addURI("contacts", "people/#/phones/#", PEOPLE_PHONES_ID); sURIMatcher.addURI("contacts", "people/#/contact_methods", PEOPLE_CONTACTMETHODS); sURIMatcher.addURI("contacts", "people/#/contact_methods/#", PEOPLE_CONTACTMETHODS_ID); sURIMatcher.addURI("contacts", "deleted_people", DELETED_PEOPLE); sURIMatcher.addURI("contacts", "phones", PHONES); sURIMatcher.addURI("contacts", "phones/filter/*", PHONES_FILTER); sURIMatcher.addURI("contacts", "phones/#", PHONES_ID); sURIMatcher.addURI("contacts", "contact_methods", CONTACTMETHODS); sURIMatcher.addURI("contacts", "contact_methods/#", CONTACTMETHODS_ID); sURIMatcher.addURI("call_log", "calls", CALLS); sURIMatcher.addURI("call_log", "calls/filter/*", CALLS_FILTER); sURIMatcher.addURI("call_log", "calls/#", CALLS_ID); }</pre> <p> Starting from API level <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#JELLY_BEAN_MR2"> JELLY_BEAN_MR2 </a> </code></pre> , paths can start with a leading slash. For example: <pre> sURIMatcher.addURI("contacts", "/people", PEOPLE);</pre> <p> Then when you need to match against a URI, call <pre><code> <a href="https://developer.android.com/reference/android/content/UriMatcher.html#match(android.net.Uri)"> match(Uri) </a> </code></pre> , providingthe URL that you have been given. You can use the result to build a query,return a type, insert or delete a row, or whatever you need, without duplicatingall of the if-else logic that you would otherwise need. For example: <pre> public String getType(Uri url) { int match = sURIMatcher.match(url); switch (match) { case PEOPLE: return "vnd.android.cursor.dir/person"; case PEOPLE_ID: return "vnd.android.cursor.item/person";... snip ... return "vnd.android.cursor.dir/snail-mail"; case PEOPLE_ADDRESS_ID: return "vnd.android.cursor.item/snail-mail"; default: return null; } }</pre> instead of: <pre> public String getType(Uri url) { List<string> pathSegments = url.getPathSegments(); if (pathSegments.size() &gt;= 2) { if ("people".equals(pathSegments.get(1))) { if (pathSegments.size() == 2) { return "vnd.android.cursor.dir/person"; } else if (pathSegments.size() == 3) { return "vnd.android.cursor.item/person";... snip ... return "vnd.android.cursor.dir/snail-mail"; } else if (pathSegments.size() == 3) { return "vnd.android.cursor.item/snail-mail"; } } } return null; }</string></pre> </p>\n<pre><code>public class UriMatcher\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/UriMatcher.html
UriPermission	A										<section class="prog__container"><p> Description of a single Uri permission grant. This grants may have been created via <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#FLAG_GRANT_READ_URI_PERMISSION"> FLAG_GRANT_READ_URI_PERMISSION </a> </code></pre> , etc when sending an <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html"> Intent </a> </code></pre> , or explicitly through <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#grantUriPermission(java.lang.String, android.net.Uri, int)"> grantUriPermission(String, android.net.Uri, int) </a> </code></pre> .</p>\n<pre><code>public final class UriPermission\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/UriPermission.html
ActivityInfo	A										<section class="prog__container"><p> Information you can retrieve about a particular application activity or receiver. This corresponds to information collected from the AndroidManifest.xml's &lt;activity&gt; and &lt;receiver&gt; tags.</p>\n<pre><code>public class ActivityInfo\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/ActivityInfo.html
ActivityInfo.WindowLayout	A										<section class="prog__container"><p> Contains information about position and size of the activity on the display. Used in freeform mode to set desired position when activity is first launched. It describes how big the activity wants to be in both width and height, the minimal allowed size, and the gravity to be applied.</p>\n<pre><code>public static final class ActivityInfo.WindowLayout\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/ActivityInfo.WindowLayout.html
ApplicationInfo.DisplayNameComparator	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public static class ApplicationInfo.DisplayNameComparator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/ApplicationInfo.DisplayNameComparator.html
ApplicationInfo	A										<section class="prog__container"><p> Information you can retrieve about a particular application. This corresponds to information collected from the AndroidManifest.xml's &lt;application&gt; tag.</p>\n<pre><code>public class ApplicationInfo\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/ApplicationInfo.html
ComponentInfo	A										<section class="prog__container"><p> Base class containing information common to all application components ( <pre><code> <a href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html"> ActivityInfo </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/content/pm/ServiceInfo.html"> ServiceInfo </a> </code></pre> ). This class is not intended to be used by itself; it is simply here to share common definitions between all application components. As such, it does not itself implement Parcelable, but does provide convenience methods to assist in the implementation of Parcelable in subclasses.</p>\n<pre><code>public class ComponentInfo\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/ComponentInfo.html
ConfigurationInfo	A										<section class="prog__container"><p> Information you can retrieve about hardware configuration preferences declared by an application. This corresponds to information collected from the AndroidManifest.xml's &lt;uses-configuration&gt; and &lt;uses-feature&gt; tags.</p>\n<pre><code>public class ConfigurationInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/ConfigurationInfo.html
FeatureGroupInfo	A										<section class="prog__container"><p> A set of features that can be requested by an application. This corresponds to information collected from the AndroidManifest.xml's <pre><code> &lt;feature-group&gt; </code></pre> tag.</p>\n<pre><code>public final class FeatureGroupInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/FeatureGroupInfo.html
FeatureInfo	A										<section class="prog__container"><p> Definition of a single optional hardware or software feature of an Android device. <p> This object is used to represent both features supported by a device and features requested by an app. Apps can request that certain features be available as a prerequisite to being installed through the <pre><code> uses-feature </code></pre> tag in their manifests. <p> Starting in <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#N"> N </a> </code></pre> , features can have a version, which must always be backwards compatible. That is, a device claiming to support version 3 of a specific feature must support apps requesting version 1 of that feature. </p>\n<pre><code>public class FeatureInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/FeatureInfo.html
InstrumentationInfo	A										<section class="prog__container"><p> Information you can retrieve about a particular piece of test instrumentation. This corresponds to information collected from the AndroidManifest.xml's &lt;instrumentation&gt; tag.</p>\n<pre><code>public class InstrumentationInfo\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html
LabeledIntent	A										<section class="prog__container"><p> A special subclass of Intent that can have a custom label/icon associated with it. Primarily for use with <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_CHOOSER"> ACTION_CHOOSER </a> </code></pre> .</p>\n<pre><code>public class LabeledIntent\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/LabeledIntent.html
LauncherActivityInfo	A										<section class="prog__container"><p> A representation of an activity that can belong to this user or a managed profile associated with this user. It can be used to query the label, icon and badged icon for the activity.</p>\n<pre><code>public class LauncherActivityInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/LauncherActivityInfo.html
LauncherApps.Callback	A										<section class="prog__container"><p> Callbacks for package changes to this and related managed profiles.</p>\n<pre><code>public static abstract class LauncherApps.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/LauncherApps.Callback.html
LauncherApps	A										<section class="prog__container"><p> Class for retrieving a list of launchable activities for the current user and any associated managed profiles. This is mainly for use by launchers. Apps can be queried for each user profile. Since the PackageManager will not deliver package broadcasts for other profiles, you can register for package changes here. <p> To watch for managed profiles being added or removed, register for the following broadcasts: <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_MANAGED_PROFILE_ADDED"> ACTION_MANAGED_PROFILE_ADDED </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_MANAGED_PROFILE_REMOVED"> ACTION_MANAGED_PROFILE_REMOVED </a> </code></pre> . <p> You can retrieve the list of profiles associated with this user with <pre><code> <a href="https://developer.android.com/reference/android/os/UserManager.html#getUserProfiles()"> getUserProfiles() </a> </code></pre> . </p>\n<pre><code>public class LauncherApps\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/LauncherApps.html
LauncherApps.ShortcutQuery	A										<section class="prog__container"><p> Represents a query passed to <pre><code> <a href="https://developer.android.com/reference/android/content/pm/LauncherApps.html#getShortcuts(android.content.pm.LauncherApps.ShortcutQuery, android.os.UserHandle)"> getShortcuts(ShortcutQuery, UserHandle) </a> </code></pre> .</p>\n<pre><code>public static class LauncherApps.ShortcutQuery\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/LauncherApps.ShortcutQuery.html
android.content.pm	A										<section class="prog__container">Contains classes for accessing information about anapplication package, including information about its activities,permissions, services, signatures, and providers.</section>	https://developer.android.com/reference/android/content/pm/package-summary.html
PackageInfo	A										<section class="prog__container"><p> Overall information about the contents of a package. This corresponds to all of the information collected from AndroidManifest.xml.</p>\n<pre><code>public class PackageInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageInfo.html
PackageInstaller	A										<section class="prog__container"><p> Offers the ability to install, upgrade, and remove applications on the device. This includes support for apps packaged either as a single "monolithic" APK, or apps packaged as multiple "split" APKs. <p> An app is delivered for installation through a <pre><code> <a href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html"> PackageInstaller.Session </a> </code></pre> , which any app can create. Once the session is created, the installer can stream one or more APKs into place until it decides to either commit or destroy the session. Committing may require user intervention to complete the installation. <p> Sessions can install brand new apps, upgrade existing apps, or add new splits into an existing app. <p> Apps packaged as multiple split APKs always consist of a single "base" APK (with a <pre><code> null </code></pre> split name) and zero or more "split" APKs (with unique split names). Any subset of these APKs can be installed together, as long as the following constraints are met: <ul> <li> All APKs must have the exact same package name, version code, and signing certificates. <li> All APKs must have unique split names. <li> All installations must contain a single base APK. </li> </li> </li> </ul> </p>\n<pre><code>public class PackageInstaller\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageInstaller.html
PackageInstaller.Session	A										<section class="prog__container"><p> An installation that is being actively staged. For an install to succeed, all existing and new packages must have identical package names, version codes, and signing certificates. <p> A session may contain any number of split packages. If the application does not yet exist, this session must include a base package. <p> If an APK included in this session is already defined by the existing installation (for example, the same split name), the APK in this session will replace the existing APK. </p>\n<pre><code>public static class PackageInstaller.Session\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html
PackageInstaller.SessionCallback	A										<section class="prog__container"><p> Events for observing session lifecycle. <p> A typical session lifecycle looks like this: <ul> <li> An installer creates a session to indicate pending app delivery. All install details are available at this point. <li> The installer opens the session to deliver APK data. Note that a session may be opened and closed multiple times as network connectivity changes. The installer may deliver periodic progress updates. <li> The installer commits or abandons the session, resulting in the session being finished. </li> </li> </li> </ul> </p>\n<pre><code>public static abstract class PackageInstaller.SessionCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionCallback.html
PackageInstaller.SessionInfo	A										<section class="prog__container"><p> Details for an active install session.</p>\n<pre><code>public static class PackageInstaller.SessionInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html
PackageInstaller.SessionParams	A										<section class="prog__container"><p> Parameters for creating a new <pre><code> <a href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session.html"> PackageInstaller.Session </a> </code></pre> .</p>\n<pre><code>public static class PackageInstaller.SessionParams\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams.html
PackageItemInfo.DisplayNameComparator	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public static class PackageItemInfo.DisplayNameComparator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageItemInfo.DisplayNameComparator.html
PackageItemInfo	A										<section class="prog__container"><p> Base class containing information common to all package items held by the package manager. This provides a very common basic set of attributes: a label, icon, and meta-data. This class is not intended to be used by itself; it is simply here to share common definitions between all items returned by the package manager. As such, it does not itself implement Parcelable, but does provide convenience methods to assist in the implementation of Parcelable in subclasses.</p>\n<pre><code>public class PackageItemInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageItemInfo.html
PackageManager	A										<section class="prog__container"><p> Class for retrieving various kinds of information related to the application packages that are currently installed on the device. You can find this class through <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getPackageManager()"> getPackageManager() </a> </code></pre> .</p>\n<pre><code>public abstract class PackageManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageManager.html
PackageManager.NameNotFoundException	A										<section class="prog__container"><p> This exception is thrown when a given package, application, or component name cannot be found.</p>\n<pre><code>public static class PackageManager.NameNotFoundException\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageManager.NameNotFoundException.html
PackageStats	A										<section class="prog__container"><p> implementation of PackageStats associated with a application package.</p>\n<pre><code>public class PackageStats\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/PackageStats.html
PathPermission	A										<section class="prog__container"><p> Description of permissions needed to access a particular path in a <pre><code> <a href="https://developer.android.com/reference/android/content/pm/ProviderInfo.html"> ProviderInfo </a> </code></pre> .</p>\n<pre><code>public class PathPermission\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/PathPermission.html
PermissionGroupInfo	A										<section class="prog__container"><p> Information you can retrieve about a particular security permission group known to the system. This corresponds to information collected from the AndroidManifest.xml's &lt;permission-group&gt; tags.</p>\n<pre><code>public class PermissionGroupInfo\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/PermissionGroupInfo.html
PermissionInfo	A										<section class="prog__container"><p> Information you can retrieve about a particular security permission known to the system. This corresponds to information collected from the AndroidManifest.xml's &lt;permission&gt; tags.</p>\n<pre><code>public class PermissionInfo\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/PermissionInfo.html
ProviderInfo	A										<section class="prog__container"><p> Holds information about a specific <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProvider.html"> content provider </a> </code></pre> . This is returned by <pre><code> <a href="https://developer.android.com/reference/android/content/pm/PackageManager.html#resolveContentProvider(java.lang.String, int)"> PackageManager.resolveContentProvider() </a> </code></pre> .</p>\n<pre><code>public final class ProviderInfo\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/ProviderInfo.html
ResolveInfo.DisplayNameComparator	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public static class ResolveInfo.DisplayNameComparator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/ResolveInfo.DisplayNameComparator.html
ResolveInfo	A										<section class="prog__container"><p> Information that is returned from resolving an intent against an IntentFilter. This partially corresponds to information collected from the AndroidManifest.xml's &lt;intent&gt; tags.</p>\n<pre><code>public class ResolveInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/ResolveInfo.html
ServiceInfo	A										<section class="prog__container"><p> Information you can retrieve about a particular application service. This corresponds to information collected from the AndroidManifest.xml's &lt;service&gt; tags.</p>\n<pre><code>public class ServiceInfo\n</code></pre></section>	https://developer.android.com/reference/android/content/pm/ServiceInfo.html
ShortcutInfo.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> <a href="https://developer.android.com/reference/android/content/pm/ShortcutInfo.html"> ShortcutInfo </a> </code></pre> objects.</p>\n<pre><code>public static class ShortcutInfo.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/ShortcutInfo.Builder.html
ShortcutInfo	A										<section class="prog__container"><p> Represents a shortcut that can be published via <pre><code> <a href="https://developer.android.com/reference/android/content/pm/ShortcutManager.html"> ShortcutManager </a> </code></pre> .</p>\n<pre><code>public final class ShortcutInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/ShortcutInfo.html
ShortcutManager	A										<section class="prog__container"><p> The ShortcutManager manages an app's <em> shortcuts </em> . Shortcuts provide users with quick access to activities other than an app's main activity in the currently-active launcher. For example, an email app may publish the "compose new email" action, which will directly open the compose activity. The <pre><code> <a href="https://developer.android.com/reference/android/content/pm/ShortcutInfo.html"> ShortcutInfo </a> </code></pre> class contains information about each of the shortcuts themselves. </p>\n<pre><code>public class ShortcutManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/ShortcutManager.html
Signature	A										<section class="prog__container"><p> Opaque, immutable representation of a signing certificate associated with an application package. <p> This class name is slightly misleading, since it's not actually a signature. </p>\n<pre><code>public class Signature\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/pm/Signature.html
AssetFileDescriptor.AutoCloseInputStream	A										<section class="prog__container"><p> An InputStream you can create on a ParcelFileDescriptor, which will take care of calling <pre><code> <a href="https://developer.android.com/reference/android/os/ParcelFileDescriptor.html#close()"> ParcelFileDescritor.close() </a> </code></pre> for you when the stream is closed.</p>\n<pre><code>public static class AssetFileDescriptor.AutoCloseInputStream\n</code></pre></section>	https://developer.android.com/reference/android/content/res/AssetFileDescriptor.AutoCloseInputStream.html
AssetFileDescriptor.AutoCloseOutputStream	A										<section class="prog__container"><p> An OutputStream you can create on a ParcelFileDescriptor, which will take care of calling <pre><code> <a href="https://developer.android.com/reference/android/os/ParcelFileDescriptor.html#close()"> ParcelFileDescritor.close() </a> </code></pre> for you when the stream is closed.</p>\n<pre><code>public static class AssetFileDescriptor.AutoCloseOutputStream\n</code></pre></section>	https://developer.android.com/reference/android/content/res/AssetFileDescriptor.AutoCloseOutputStream.html
AssetFileDescriptor	A										<section class="prog__container"><p> File descriptor of an entry in the AssetManager. This provides your own opened FileDescriptor that can be used to read the data, as well as the offset and length of that entry's data in the file.</p>\n<pre><code>public class AssetFileDescriptor\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/res/AssetFileDescriptor.html
AssetManager.AssetInputStream	A										<section class="prog__container"><p> Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.</p>\n<pre><code>public final class AssetManager.AssetInputStream\n</code></pre></section>	https://developer.android.com/reference/android/content/res/AssetManager.AssetInputStream.html
AssetManager	A										<section class="prog__container"><p> Provides access to an application's raw asset files; see <pre><code> <a href="https://developer.android.com/reference/android/content/res/Resources.html"> Resources </a> </code></pre> for the way most applications will want to retrieve their resource data. This class presents a lower-level API that allows you to open and read raw files that have been bundled with the application as a simple stream of bytes.</p>\n<pre><code>public final class AssetManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/res/AssetManager.html
ColorStateList	A										<section class="prog__container"><p> Lets you map <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> state sets to colors. <p> <pre><code> <a href="https://developer.android.com/reference/android/content/res/ColorStateList.html"> ColorStateList </a> </code></pre> s are created from XML resource files defined in the "color" subdirectory directory of an application's resource directory. The XML file contains a single "selector" element with a number of "item" elements inside. For example: <pre> &lt;selector xmlns:android="http://schemas.android.com/apk/res/android"&gt; &lt;item android:state_focused="true" android:color="@color/sample_focused" /&gt; &lt;item android:state_pressed="true" android:state_enabled="false" android:color="@color/sample_disabled_pressed" /&gt; &lt;item android:state_enabled="false" android:color="@color/sample_disabled_not_pressed" /&gt; &lt;item android:color="@color/sample_default" /&gt; &lt;/selector&gt; </pre> This defines a set of state spec / color pairs where each state spec specifies a set of states that a view must either be in or not be in and the color specifies the color associated with that spec. <a name="StateSpec"> </a> </p>\n<pre><code>public class ColorStateList\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/res/ColorStateList.html
Configuration	A										<section class="prog__container"><p> This class describes all device configuration information that can impact the resources the application retrieves. This includes both user-specified configuration options (locale list and scaling) as well as device configurations (such as input modes, screen size and screen orientation). <p> You can acquire this object from <pre><code> <a href="https://developer.android.com/reference/android/content/res/Resources.html"> Resources </a> </code></pre> , using <pre><code> <a href="https://developer.android.com/reference/android/content/res/Resources.html#getConfiguration()"> getConfiguration() </a> </code></pre> . Thus, from an activity, you can get it by chaining the request with <pre><code> <a href="https://developer.android.com/reference/android/view/ContextThemeWrapper.html#getResources()"> getResources() </a> </code></pre> : </p>\n<pre><code>public final class Configuration\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/res/Configuration.html
ObbInfo	A										<section class="prog__container"><p> Basic information about a Opaque Binary Blob (OBB) that reflects the info from the footer on the OBB file. This information may be manipulated by a developer with the <pre><code> obbtool </code></pre> program in the Android SDK.</p>\n<pre><code>public class ObbInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/res/ObbInfo.html
ObbScanner	A										<section class="prog__container"><p> Class to scan Opaque Binary Blob (OBB) files. Use this to get information about an OBB file for use in a program via <pre><code> <a href="https://developer.android.com/reference/android/content/res/ObbInfo.html"> ObbInfo </a> </code></pre> .</p>\n<pre><code>public class ObbScanner\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/res/ObbScanner.html
android.content.res	A										<section class="prog__container">Contains classes for accessing application resources,such as raw asset files, colors, drawables, media or other other filesin the package, plus important device configuration details(orientation, input types, etc.) that affect how the application may behave.</section>	https://developer.android.com/reference/android/content/res/package-summary.html
Resources	A										<section class="prog__container"><p> Class for accessing an application's resources. This sits on top of the asset manager of the application (accessible through <pre><code> <a href="https://developer.android.com/reference/android/content/res/Resources.html#getAssets()"> getAssets() </a> </code></pre> ) and provides a high-level API for getting typed data from the assets. <p> The Android resource system keeps track of all non-code assets associated with an application. You can use this class to access your application's resources. You can generally acquire the <pre><code> <a href="https://developer.android.com/reference/android/content/res/Resources.html"> Resources </a> </code></pre> instance associated with your application with <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getResources()"> getResources() </a> </code></pre> . </p>\n<pre><code>public class Resources\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/res/Resources.html
Resources.NotFoundException	A										<section class="prog__container"><p> This exception is thrown by the resource APIs when a requested resource can not be found.</p>\n<pre><code>public static class Resources.NotFoundException\n</code></pre></section>	https://developer.android.com/reference/android/content/res/Resources.NotFoundException.html
Resources.Theme	A										<section class="prog__container"><p> This class holds the current attribute values for a particular theme. In other words, a Theme is a set of values for resource attributes; these are used in conjunction with <pre><code> <a href="https://developer.android.com/reference/android/content/res/TypedArray.html"> TypedArray </a> </code></pre> to resolve the final value for an attribute. <p> The Theme's attributes come into play in two ways: (1) a styled attribute can explicit reference a value in the theme through the "?themeAttribute" syntax; (2) if no value has been defined for a particular styled attribute, as a last resort we will try to find that attribute's value in the Theme. <p> You will normally use the <pre><code> <a href="https://developer.android.com/reference/android/content/res/Resources.Theme.html#obtainStyledAttributes(android.util.AttributeSet, int[], int, int)"> obtainStyledAttributes(AttributeSet, int[], int, int) </a> </code></pre> APIs to retrieve XML attributes with style and theme information applied. </p>\n<pre><code>public final class Resources.Theme\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/res/Resources.Theme.html
TypedArray	A										<section class="prog__container"><p> Container for an array of values that were retrieved with <pre><code> <a href="https://developer.android.com/reference/android/content/res/Resources.Theme.html#obtainStyledAttributes(android.util.AttributeSet, int[], int, int)"> obtainStyledAttributes(AttributeSet, int[], int, int) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/content/res/Resources.html#obtainAttributes(android.util.AttributeSet, int[])"> obtainAttributes(AttributeSet, int[]) </a> </code></pre> . Be sure to call <pre><code> <a href="https://developer.android.com/reference/android/content/res/TypedArray.html#recycle()"> recycle() </a> </code></pre> when done with them. The indices used to retrieve values from this structure correspond to the positions of the attributes given to obtainStyledAttributes.</p>\n<pre><code>public class TypedArray\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/content/res/TypedArray.html
XmlResourceParser	A										<section class="prog__container"><p> The XML parsing interface returned for an XML resource. This is a standard XmlPullParser interface, as well as an extended AttributeSet interface and an additional close() method on this interface for the client to indicate when it is done reading the resource.</p>\n<pre><code>public interface XmlResourceParser\nimplements <a href="https://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html">XmlPullParser</a>, <a href="https://developer.android.com/reference/android/util/AttributeSet.html">AttributeSet</a>, <a href="https://developer.android.com/reference/java/lang/AutoCloseable.html">AutoCloseable</a></code></pre></section>	https://developer.android.com/reference/android/content/res/XmlResourceParser.html
AbstractCursor	A										<section class="prog__container"><p> This is an abstract cursor class that handles a lot of the common code that all cursors need to deal with and is provided for convenience reasons.</p>\n<pre><code>public abstract class AbstractCursor\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/database/AbstractCursor.html
AbstractCursor.SelfContentObserver	A										<section class="prog__container"><p> Cursors use this class to track changes others make to their URI.</p>\n<pre><code>protected static class AbstractCursor.SelfContentObserver\n</code></pre></section>	https://developer.android.com/reference/android/database/AbstractCursor.SelfContentObserver.html
AbstractWindowedCursor	A										<section class="prog__container"><p> A base class for Cursors that store their data in <pre><code> <a href="https://developer.android.com/reference/android/database/CursorWindow.html"> CursorWindow </a> </code></pre> s. <p> The cursor owns the cursor window it uses. When the cursor is closed, its window is also closed. Likewise, when the window used by the cursor is changed, its old window is closed. This policy of strict ownership ensures that cursor windows are not leaked. </p>\n<pre><code>public abstract class AbstractWindowedCursor\n</code></pre></section>	https://developer.android.com/reference/android/database/AbstractWindowedCursor.html
CharArrayBuffer	A										<section class="prog__container"><p> This is used for <pre><code> <a href="https://developer.android.com/reference/android/database/Cursor.html#copyStringToBuffer(int, android.database.CharArrayBuffer)"> copyStringToBuffer(int, CharArrayBuffer) </a> </code></pre></p>\n<pre><code>public final class CharArrayBuffer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/database/CharArrayBuffer.html
ContentObservable	A										<section class="prog__container"><p> A specialization of <pre><code> <a href="https://developer.android.com/reference/android/database/Observable.html"> Observable </a> </code></pre> for <pre><code> <a href="https://developer.android.com/reference/android/database/ContentObserver.html"> ContentObserver </a> </code></pre> that provides methods for sending notifications to a list of <pre><code> <a href="https://developer.android.com/reference/android/database/ContentObserver.html"> ContentObserver </a> </code></pre> objects.</p>\n<pre><code>public class ContentObservable\n</code></pre></section>	https://developer.android.com/reference/android/database/ContentObservable.html
ContentObserver	A										<section class="prog__container"><p> Receives call backs for changes to content. Must be implemented by objects which are added to a <pre><code> <a href="https://developer.android.com/reference/android/database/ContentObservable.html"> ContentObservable </a> </code></pre> .</p>\n<pre><code>public abstract class ContentObserver\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/database/ContentObserver.html
CrossProcessCursor	A										<section class="prog__container"><p> A cross process cursor is an extension of a <pre><code> <a href="https://developer.android.com/reference/android/database/Cursor.html"> Cursor </a> </code></pre> that also supports usage from remote processes. <p> The contents of a cross process cursor are marshalled to the remote process by filling <pre><code> <a href="https://developer.android.com/reference/android/database/CursorWindow.html"> CursorWindow </a> </code></pre> objects using <pre><code> <a href="https://developer.android.com/reference/android/database/CrossProcessCursor.html#fillWindow(int, android.database.CursorWindow)"> fillWindow(int, CursorWindow) </a> </code></pre> . As an optimization, the cursor can provide a pre-filled window to use via <pre><code> <a href="https://developer.android.com/reference/android/database/CrossProcessCursor.html#getWindow()"> getWindow() </a> </code></pre> thereby obviating the need to copy the data to yet another cursor window. </p>\n<pre><code>public interface CrossProcessCursor\nimplements <a href="https://developer.android.com/reference/android/database/Cursor.html">Cursor</a></code></pre></section>	https://developer.android.com/reference/android/database/CrossProcessCursor.html
CrossProcessCursorWrapper	A										<section class="prog__container"><p> Cursor wrapper that implements <pre><code> <a href="https://developer.android.com/reference/android/database/CrossProcessCursor.html"> CrossProcessCursor </a> </code></pre> . <p> If the wrapped cursor implements <pre><code> <a href="https://developer.android.com/reference/android/database/CrossProcessCursor.html"> CrossProcessCursor </a> </code></pre> , then the wrapper delegates <pre><code> <a href="https://developer.android.com/reference/android/database/CrossProcessCursorWrapper.html#fillWindow(int, android.database.CursorWindow)"> fillWindow(int, CursorWindow) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/database/CrossProcessCursorWrapper.html#getWindow()"> getWindow() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/database/CrossProcessCursorWrapper.html#onMove(int, int)"> onMove(int, int) </a> </code></pre> to it. Otherwise, the wrapper provides default implementations of these methods that traverse the contents of the cursor similar to <pre><code> <a href="https://developer.android.com/reference/android/database/AbstractCursor.html#fillWindow(int, android.database.CursorWindow)"> fillWindow(int, CursorWindow) </a> </code></pre> . </p>\n<pre><code>public class CrossProcessCursorWrapper\n</code></pre></section>	https://developer.android.com/reference/android/database/CrossProcessCursorWrapper.html
Cursor	A										<section class="prog__container"><p> This interface provides random read-write access to the result set returned by a database query. <p> Cursor implementations are not required to be synchronized so code using a Cursor from multiple threads should perform its own synchronization when using the Cursor. </p>\n<pre><code>public interface Cursor\nimplements <a href="https://developer.android.com/reference/java/io/Closeable.html">Closeable</a></code></pre></section>	https://developer.android.com/reference/android/database/Cursor.html
CursorIndexOutOfBoundsException	A										<section class="prog__container"><p> An exception indicating that a cursor is out of bounds.</p>\n<pre><code>public class CursorIndexOutOfBoundsException\n</code></pre></section>	https://developer.android.com/reference/android/database/CursorIndexOutOfBoundsException.html
CursorJoiner	A										<section class="prog__container"><p> Does a join on two cursors using the specified columns. The cursors must already be sorted on each of the specified columns in ascending order. This joiner only supports the case where the tuple of key column values is unique. <p> Typical usage: <pre> CursorJoiner joiner = new CursorJoiner(cursorA, keyColumnsofA, cursorB, keyColumnsofB); for (CursorJoiner.Result joinerResult : joiner) { switch (joinerResult) { case LEFT: // handle case where a row in cursorA is unique break; case RIGHT: // handle case where a row in cursorB is unique break; case BOTH: // handle case where a row with the same key is in both cursors break; } } </pre> </p>\n<pre><code>public final class CursorJoiner\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/database/CursorJoiner.html
CursorJoiner.Result	A										<section class="prog__container"><p> The result of a call to next().</p>\n<pre><code>public static final enum CursorJoiner.Result\n</code></pre></section>	https://developer.android.com/reference/android/database/CursorJoiner.Result.html
CursorWindow	A										<section class="prog__container"><p> A buffer containing multiple cursor rows. <p> A <pre><code> <a href="https://developer.android.com/reference/android/database/CursorWindow.html"> CursorWindow </a> </code></pre> is read-write when initially created and used locally. When sent to a remote process (by writing it to a <pre><code> <a href="https://developer.android.com/reference/android/os/Parcel.html"> Parcel </a> </code></pre> ), the remote process receives a read-only view of the cursor window. Typically the cursor window will be allocated by the producer, filled with data, and then sent to the consumer for reading. </p>\n<pre><code>public class CursorWindow\n</code></pre></section>	https://developer.android.com/reference/android/database/CursorWindow.html
CursorWrapper	A										<section class="prog__container"><p> Wrapper class for Cursor that delegates all calls to the actual cursor object. The primary use for this class is to extend a cursor while overriding only a subset of its methods.</p>\n<pre><code>public class CursorWrapper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/database/CursorWrapper.html
DatabaseErrorHandler	A										<section class="prog__container"><p> An interface to let apps define an action to take when database corruption is detected.</p>\n<pre><code>public interface DatabaseErrorHandler\n</code></pre></section>	https://developer.android.com/reference/android/database/DatabaseErrorHandler.html
DatabaseUtils	A										<section class="prog__container"><p> Static utility methods for dealing with databases and <pre><code> <a href="https://developer.android.com/reference/android/database/Cursor.html"> Cursor </a> </code></pre> s.</p>\n<pre><code>public class DatabaseUtils\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/database/DatabaseUtils.html
DatabaseUtils.InsertHelper	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 17. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/database/sqlite/SQLiteStatement.html"> SQLiteStatement </a> </code></pre> instead. </p>\n<pre><code>public static class DatabaseUtils.InsertHelper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/database/DatabaseUtils.InsertHelper.html
DataSetObservable	A										<section class="prog__container"><p> A specialization of <pre><code> <a href="https://developer.android.com/reference/android/database/Observable.html"> Observable </a> </code></pre> for <pre><code> <a href="https://developer.android.com/reference/android/database/DataSetObserver.html"> DataSetObserver </a> </code></pre> that provides methods for sending notifications to a list of <pre><code> <a href="https://developer.android.com/reference/android/database/DataSetObserver.html"> DataSetObserver </a> </code></pre> objects.</p>\n<pre><code>public class DataSetObservable\n</code></pre></section>	https://developer.android.com/reference/android/database/DataSetObservable.html
DataSetObserver	A										<section class="prog__container"><p> Receives call backs when a data set has been changed, or made invalid. The typically data sets that are observed are <pre><code> <a href="https://developer.android.com/reference/android/database/Cursor.html"> Cursor </a> </code></pre> s or <pre><code> <a href="https://developer.android.com/reference/android/widget/Adapter.html"> Adapter </a> </code></pre> s. DataSetObserver must be implemented by objects which are added to a DataSetObservable.</p>\n<pre><code>public abstract class DataSetObserver\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/database/DataSetObserver.html
DefaultDatabaseErrorHandler	A										<section class="prog__container"><p> Default class used to define the action to take when database corruption is reported by sqlite. <p> An application can specify an implementation of <pre><code> <a href="https://developer.android.com/reference/android/database/DatabaseErrorHandler.html"> DatabaseErrorHandler </a> </code></pre> on the following: <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#openOrCreateDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase.CursorFactory, android.database.DatabaseErrorHandler)"> openOrCreateDatabase(String, android.database.sqlite.SQLiteDatabase.CursorFactory, DatabaseErrorHandler) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase.CursorFactory, int, android.database.DatabaseErrorHandler)"> openDatabase(String, android.database.sqlite.SQLiteDatabase.CursorFactory, int, DatabaseErrorHandler) </a> </code></pre> </li> </ul> The specified <pre><code> <a href="https://developer.android.com/reference/android/database/DatabaseErrorHandler.html"> DatabaseErrorHandler </a> </code></pre> is used to handle database corruption errors, if they occur. <p> If null is specified for the DatabaseErrorHandler param in the above calls, this class is used as the default <pre><code> <a href="https://developer.android.com/reference/android/database/DatabaseErrorHandler.html"> DatabaseErrorHandler </a> </code></pre> . </p>\n<pre><code>public final class DefaultDatabaseErrorHandler\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/database/DefaultDatabaseErrorHandler.html
MatrixCursor	A										<section class="prog__container"><p> A mutable cursor implementation backed by an array of <pre><code> Object </code></pre> s. Use <pre><code> <a href="https://developer.android.com/reference/android/database/MatrixCursor.html#newRow()"> newRow() </a> </code></pre> to add rows. Automatically expands internal capacity as needed.</p>\n<pre><code>public class MatrixCursor\n</code></pre></section>	https://developer.android.com/reference/android/database/MatrixCursor.html
MatrixCursor.RowBuilder	A										<section class="prog__container"><p> Builds a row of values using either of these approaches: <ul> <li> Values can be added with explicit column ordering using <pre><code> <a href="https://developer.android.com/reference/android/database/MatrixCursor.RowBuilder.html#add(java.lang.Object)"> add(Object) </a> </code></pre> , which starts from the left-most column and adds one column value at a time. This follows the same ordering as the column names specified at cursor construction time. <li> Column and value pairs can be offered for possible inclusion using <pre><code> <a href="https://developer.android.com/reference/android/database/MatrixCursor.RowBuilder.html#add(java.lang.String, java.lang.Object)"> add(String, Object) </a> </code></pre> . If the cursor includes the given column, the value will be set for that column, otherwise the value is ignored. This approach is useful when matching data to a custom projection. </li> </li> </ul> Undefined values are left as <pre><code> null </code></pre> .</p>\n<pre><code>public class MatrixCursor.RowBuilder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/database/MatrixCursor.RowBuilder.html
MergeCursor	A										<section class="prog__container"><p> A convience class that lets you present an array of Cursors as a single linear Cursor. The schema of the cursors presented is entirely up to the creator of the MergeCursor, and may be different if that is desired. Calls to getColumns, getColumnIndex, etc will return the value for the row that the MergeCursor is currently pointing at.</p>\n<pre><code>public class MergeCursor\n</code></pre></section>	https://developer.android.com/reference/android/database/MergeCursor.html
Observable	A										<section class="prog__container"><p> Provides methods for registering or unregistering arbitrary observers in an <pre><code> <a href="https://developer.android.com/reference/java/util/ArrayList.html"> ArrayList </a> </code></pre> . This abstract class is intended to be subclassed and specialized to maintain a registry of observers of specific types and dispatch notifications to them.</p>\n<pre><code>public abstract class Observable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/database/Observable.html
android.database	A										<section class="prog__container">If you need to manage data in a private database, use the</section>	https://developer.android.com/reference/android/database/package-summary.html
SQLException	A										<section class="prog__container"><p> An exception that indicates there was an error with SQL parsing or execution.</p>\n<pre><code>public class SQLException\n</code></pre></section>	https://developer.android.com/reference/android/database/SQLException.html
StaleDataException	A										<section class="prog__container"><p> This exception is thrown when a Cursor contains stale data and must be requeried before being used again.</p>\n<pre><code>public class StaleDataException\n</code></pre></section>	https://developer.android.com/reference/android/database/StaleDataException.html
android.database.sqlite	A										<section class="prog__container">Applications use these classes to manage private databases. If creating acontent provider, you will probably have to use these classes to create andmanage your own database to store content. See</section>	https://developer.android.com/reference/android/database/sqlite/package-summary.html
SQLiteAbortException	A										<section class="prog__container"><p> An exception that indicates that the SQLite program was aborted. This can happen either through a call to ABORT in a trigger, or as the result of using the ABORT conflict clause.</p>\n<pre><code>public class SQLiteAbortException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteAbortException.html
SQLiteAccessPermException	A										<section class="prog__container"><p> This exception class is used when sqlite can't access the database file due to lack of permissions on the file.</p>\n<pre><code>public class SQLiteAccessPermException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteAccessPermException.html
SQLiteBindOrColumnIndexOutOfRangeException	A										<section class="prog__container"><p> Thrown if the the bind or column parameter index is out of range</p>\n<pre><code>public class SQLiteBindOrColumnIndexOutOfRangeException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteBindOrColumnIndexOutOfRangeException.html
SQLiteBlobTooBigException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p>\n<pre><code>public class SQLiteBlobTooBigException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteBlobTooBigException.html
SQLiteCantOpenDatabaseException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p>\n<pre><code>public class SQLiteCantOpenDatabaseException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteCantOpenDatabaseException.html
SQLiteClosable	A										<section class="prog__container"><p> An object created from a SQLiteDatabase that can be closed. This class implements a primitive reference counting scheme for database objects.</p>\n<pre><code>public abstract class SQLiteClosable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteClosable.html
SQLiteConstraintException	A										<section class="prog__container"><p> An exception that indicates that an integrity constraint was violated.</p>\n<pre><code>public class SQLiteConstraintException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteConstraintException.html
SQLiteCursor	A										<section class="prog__container"><p> A Cursor implementation that exposes results from a query on a <pre><code> <a href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html"> SQLiteDatabase </a> </code></pre> . SQLiteCursor is not internally synchronized so code using a SQLiteCursor from multiple threads should perform its own synchronization when using the SQLiteCursor.</p>\n<pre><code>public class SQLiteCursor\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteCursor.html
SQLiteCursorDriver	A										<section class="prog__container"><p> A driver for SQLiteCursors that is used to create them and gets notified by the cursors it creates on significant events in their lifetimes.</p>\n<pre><code>public interface SQLiteCursorDriver\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteCursorDriver.html
SQLiteDatabase.CursorFactory	A										<section class="prog__container"><p> Used to allow returning sub-classes of <pre><code> <a href="https://developer.android.com/reference/android/database/Cursor.html"> Cursor </a> </code></pre> when calling query.</p>\n<pre><code>public static interface SQLiteDatabase.CursorFactory\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.CursorFactory.html
SQLiteDatabase	A										<section class="prog__container"><p> Exposes methods to manage a SQLite database. <p> SQLiteDatabase has methods to create, delete, execute SQL commands, and perform other common database management tasks. </p>\n<pre><code>public final class SQLiteDatabase\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html
SQLiteDatabaseCorruptException	A										<section class="prog__container"><p> An exception that indicates that the SQLite database file is corrupt.</p>\n<pre><code>public class SQLiteDatabaseCorruptException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteDatabaseCorruptException.html
SQLiteDatabaseLockedException	A										<section class="prog__container"><p> Thrown if the database engine was unable to acquire the database locks it needs to do its job. If the statement is a [COMMIT] or occurs outside of an explicit transaction, then you can retry the statement. If the statement is not a [COMMIT] and occurs within a explicit transaction then you should rollback the transaction before continuing.</p>\n<pre><code>public class SQLiteDatabaseLockedException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteDatabaseLockedException.html
SQLiteDatatypeMismatchException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p>\n<pre><code>public class SQLiteDatatypeMismatchException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteDatatypeMismatchException.html
SQLiteDiskIOException	A										<section class="prog__container"><p> An exception that indicates that an IO error occured while accessing the SQLite database file.</p>\n<pre><code>public class SQLiteDiskIOException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteDiskIOException.html
SQLiteDoneException	A										<section class="prog__container"><p> An exception that indicates that the SQLite program is done. Thrown when an operation that expects a row (such as <pre><code> <a href="https://developer.android.com/reference/android/database/sqlite/SQLiteStatement.html#simpleQueryForString()"> simpleQueryForString() </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/database/sqlite/SQLiteStatement.html#simpleQueryForLong()"> simpleQueryForLong() </a> </code></pre> ) does not get one.</p>\n<pre><code>public class SQLiteDoneException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteDoneException.html
SQLiteException	A										<section class="prog__container"><p> A SQLite exception that indicates there was an error with SQL parsing or execution.</p>\n<pre><code>public class SQLiteException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteException.html
SQLiteFullException	A										<section class="prog__container"><p> An exception that indicates that the SQLite database is full.</p>\n<pre><code>public class SQLiteFullException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteFullException.html
SQLiteMisuseException	A										<section class="prog__container"><p> This error can occur if the application creates a SQLiteStatement object and allows multiple threads in the application use it at the same time. Sqlite returns this error if bind and execute methods on this object occur at the same time from multiple threads, like so: thread # 1: in execute() method of the SQLiteStatement object while thread # 2: is in bind..() on the same object.</p>\n<pre><code>public class SQLiteMisuseException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteMisuseException.html
SQLiteOpenHelper	A										<section class="prog__container"><p> A helper class to manage database creation and version management. <p> You create a subclass implementing <pre><code> <a href="https://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html#onCreate(android.database.sqlite.SQLiteDatabase)"> onCreate(SQLiteDatabase) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html#onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)"> onUpgrade(SQLiteDatabase, int, int) </a> </code></pre> and optionally <pre><code> <a href="https://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html#onOpen(android.database.sqlite.SQLiteDatabase)"> onOpen(SQLiteDatabase) </a> </code></pre> , and this class takes care of opening the database if it exists, creating it if it does not, and upgrading it as necessary. Transactions are used to make sure the database is always in a sensible state. <p> This class makes it easy for <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProvider.html"> ContentProvider </a> </code></pre> implementations to defer opening and upgrading the database until first use, to avoid blocking application startup with long-running database upgrades. <p> For an example, see the NotePadProvider class in the NotePad sample application, in the <em> samples/ </em> directory of the SDK. </p>\n<pre><code>public abstract class SQLiteOpenHelper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html
SQLiteOutOfMemoryException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p>\n<pre><code>public class SQLiteOutOfMemoryException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteOutOfMemoryException.html
SQLiteProgram	A										<section class="prog__container"><p> A base class for compiled SQLite programs. <p> This class is not thread-safe. </p>\n<pre><code>public abstract class SQLiteProgram\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteProgram.html
SQLiteQuery	A										<section class="prog__container"><p> Represents a query that reads the resulting rows into a <pre><code> <a href="https://developer.android.com/reference/android/database/sqlite/SQLiteQuery.html"> SQLiteQuery </a> </code></pre> . This class is used by <pre><code> <a href="https://developer.android.com/reference/android/database/sqlite/SQLiteCursor.html"> SQLiteCursor </a> </code></pre> and isn't useful itself. <p> This class is not thread-safe. </p>\n<pre><code>public final class SQLiteQuery\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteQuery.html
SQLiteQueryBuilder	A										<section class="prog__container"><p> This is a convience class that helps build SQL queries to be sent to <pre><code> <a href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html"> SQLiteDatabase </a> </code></pre> objects.</p>\n<pre><code>public class SQLiteQueryBuilder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteQueryBuilder.html
SQLiteReadOnlyDatabaseException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p>\n<pre><code>public class SQLiteReadOnlyDatabaseException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteReadOnlyDatabaseException.html
SQLiteStatement	A										<section class="prog__container"><p> Represents a statement that can be executed against a database. The statement cannot return multiple rows or columns, but single value (1 x 1) result sets are supported. <p> This class is not thread-safe. </p>\n<pre><code>public final class SQLiteStatement\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteStatement.html
SQLiteTableLockedException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p>\n<pre><code>public class SQLiteTableLockedException\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteTableLockedException.html
SQLiteTransactionListener	A										<section class="prog__container"><p> A listener for transaction events.</p>\n<pre><code>public interface SQLiteTransactionListener\n</code></pre></section>	https://developer.android.com/reference/android/database/sqlite/SQLiteTransactionListener.html
BaseObservable	A										<section class="prog__container"><p> A convenience class that implements <pre><code> <a href="https://developer.android.com/reference/android/databinding/Observable.html"> Observable </a> </code></pre> interface and provides <pre><code> <a href="https://developer.android.com/reference/android/databinding/BaseObservable.html#notifyPropertyChanged(int)"> notifyPropertyChanged(int) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/databinding/BaseObservable.html#notifyChange()"> notifyChange() </a> </code></pre> methods.</p>\n<pre><code>public class BaseObservable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/databinding/BaseObservable.html
Bindable	A										<section class="prog__container"><p> The Bindable annotation should be applied to any getter accessor method of an <pre><code> <a href="https://developer.android.com/reference/android/databinding/Observable.html"> Observable </a> </code></pre> class. Bindable will generate a field in the BR class to identify the field that has changed.</p>\n<pre><code>public abstract @interface Bindable\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/databinding/Bindable.html
BindingAdapter	A										<section class="prog__container"><p> BindingAdapter is applied to methods that are used to manipulate how values with expressions are set to views. The simplest example is to have a public static method that takes the view and the value to set: <p> <pre><pre><code>@BindingAdapter("android:bufferType") public static void setBufferType(TextView view, TextView.BufferType bufferType) { view.setText(view.getText(), bufferType); }</code></pre></pre> In the above example, when android:bufferType is used on a TextView, the method setBufferType is called. <p> It is also possible to take previously set values, if the old values are listed first: <p> <pre><pre><code>@BindingAdapter("android:onLayoutChange") public static void setOnLayoutChangeListener(View view, View.OnLayoutChangeListener oldValue, View.OnLayoutChangeListener newValue) { if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) { if (oldValue != null) { view.removeOnLayoutChangeListener(oldValue); } if (newValue != null) { view.addOnLayoutChangeListener(newValue); } } }</code></pre></pre> When a binding adapter may also take multiple attributes, it will only be called when all attributes associated with the binding adapter have binding expressions associated with them. This is useful when there are unusual interactions between attributes. For example: <p> <pre><pre><code>@BindingAdapter({"android:onClick", "android:clickable"}) public static void setOnClick(View view, View.OnClickListener clickListener, boolean clickable) { view.setOnClickListener(clickListener); view.setClickable(clickable); }</code></pre></pre> The order of the parameters must match the order of the attributes in values in the BindingAdapter. <p> A binding adapter may optionally take a class extending DataBindingComponent as the first parameter as well. If it does, it will be passed the value passed in during binding, either directly in the inflate method or indirectly, using the value from <pre><code> <a href="https://developer.android.com/reference/android/databinding/DataBindingUtil.html#getDefaultComponent()"> getDefaultComponent() </a> </code></pre> . <p> If a binding adapter is an instance method, the generated DataBindingComponent will have a getter to retrieve an instance of the BindingAdapter's class to use to call the method. </p>\n<pre><code>public abstract @interface BindingAdapter\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/databinding/BindingAdapter.html
BindingConversion	A										<section class="prog__container"><p> Annotate methods that are used to automatically convert from the expression type to the value used in the setter. The converter should take one parameter, the expression type, and the return value should be the target value type used in the setter. Converters are used whenever they can be applied and are not specific to any attribute.</p>\n<pre><code>public abstract @interface BindingConversion\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/databinding/BindingConversion.html
BindingMethod	A										<section class="prog__container"><p> Used within an <pre><code> <a href="https://developer.android.com/reference/android/databinding/BindingMethods.html"> BindingMethods </a> </code></pre> annotation to describe a renaming of an attribute to the setter used to set that attribute. By default, an attribute attr will be associated with setter setAttr.</p>\n<pre><code>public abstract @interface BindingMethod\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/databinding/BindingMethod.html
BindingMethods	A										<section class="prog__container"><p> Used to enumerate attribute-to-setter renaming. By default, an attribute is associated with setAttribute setter. If there is a simple rename, enumerate them in an array of <pre><code> <a href="https://developer.android.com/reference/android/databinding/BindingMethod.html"> BindingMethod </a> </code></pre> annotations in the value.</p>\n<pre><code>public abstract @interface BindingMethods\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/databinding/BindingMethods.html
CallbackRegistry	A										<section class="prog__container"><p> A utility for storing and notifying callbacks. This class supports reentrant modification of the callbacks during notification without adversely disrupting notifications. A common pattern for callbacks is to receive a notification and then remove themselves. This class handles this behavior with constant memory under most circumstances. <p> A subclass of <pre><code> <a href="https://developer.android.com/reference/android/databinding/CallbackRegistry.NotifierCallback.html"> CallbackRegistry.NotifierCallback </a> </code></pre> must be passed to the constructor to define how notifications should be called. That implementation does the actual notification on the listener. It is typically a static instance that can be reused for all similar CallbackRegistries. </p>\n<pre><code>public class CallbackRegistry\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/databinding/CallbackRegistry.html
CallbackRegistry.NotifierCallback	A										<section class="prog__container"><p> Class used to notify events from CallbackRegistry.</p>\n<pre><code>public static abstract class CallbackRegistry.NotifierCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/databinding/CallbackRegistry.NotifierCallback.html
DataBindingComponent	A										<section class="prog__container"><p> This interface is generated during compilation to contain getters for all used instance BindingAdapters. When a BindingAdapter is an instance method, an instance of the class implementing the method must be instantiated. This interface will be generated with a getter for each class with the name get* where * is simple class name of the declaring BindingAdapter class/interface. Name collisions will be resolved by adding a numeric suffix to the getter. <p> An instance of this class may also be passed into static or instance BindingAdapters as the first parameter. <p> If using Dagger 2, the developer should extend this interface and annotate the extended interface as a Component. </p>\n<pre><code>public interface DataBindingComponent\n</code></pre></section>	https://developer.android.com/reference/android/databinding/DataBindingComponent.html
DataBindingUtil	A										<section class="prog__container"><p> Utility class to create <pre><code> <a href="https://developer.android.com/reference/android/databinding/ViewDataBinding.html"> ViewDataBinding </a> </code></pre> from layouts.</p>\n<pre><code>public class DataBindingUtil\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/databinding/DataBindingUtil.html
InverseBindingAdapter	A										<section class="prog__container"><p> InverseBindingAdapter is associated with a method used to retrieve the value for a View when setting values gathered from the View. This is similar to <pre><code> <a href="https://developer.android.com/reference/android/databinding/BindingAdapter.html"> BindingAdapter </a> </code></pre> s: <pre> &amp;commat;InverseBindingAdapter(attribute = "android:text", event = "android:textAttrChanged") public static String captureTextValue(TextView view, CharSequence originalValue) { CharSequence newValue = view.getText(); CharSequence oldValue = value.get(); if (oldValue == null) { value.set(newValue); } else if (!contentEquals(newValue, oldValue)) { value.set(newValue); } } </pre> <p> The default value for event is the attribute name suffixed with "AttrChanged". In the above example, the default value would have been <pre><code> android:textAttrChanged </code></pre> even if it wasn't provided. <p> The event attribute is used to notify the data binding system that the value has changed. The developer will typically create a <pre><code> <a href="https://developer.android.com/reference/android/databinding/BindingAdapter.html"> BindingAdapter </a> </code></pre> to assign the event. For example: <p> <pre> &amp;commat;BindingAdapter(value = {"android:beforeTextChanged", "android:onTextChanged", "android:afterTextChanged", "android:textAttrChanged"}, requireAll = false) public static void setTextWatcher(TextView view, final BeforeTextChanged before, final OnTextChanged on, final AfterTextChanged after, final InverseBindingListener textAttrChanged) { TextWatcher newValue = new TextWatcher() { ... &amp;commat;Override public void onTextChanged(CharSequence s, int start, int before, int count) { if (on != null) { on.onTextChanged(s, start, before, count); } if (textAttrChanged != null) { textAttrChanged.onChange(); } } } TextWatcher oldValue = ListenerUtil.trackListener(view, newValue, R.id.textWatcher); if (oldValue != null) { view.removeTextChangedListener(oldValue); } view.addTextChangedListener(newValue); } </pre> <p> Like <pre><code> BindingAdapter </code></pre> s, InverseBindingAdapter methods may also take <pre><code> <a href="https://developer.android.com/reference/android/databinding/DataBindingComponent.html"> DataBindingComponent </a> </code></pre> as the first parameter and may be an instance method with the instance retrieved from the <pre><code> DataBindingComponent </code></pre> . </p>\n<pre><code>public abstract @interface InverseBindingAdapter\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/databinding/InverseBindingAdapter.html
InverseBindingListener	A										<section class="prog__container"><p> A listener implemented by all two-way bindings to be notified when a triggering change happens. For example, when there is a two-way binding for android:text, an implementation of <pre><code> InverseBindingListener </code></pre> will be generated in the layout's binding class. <pre> private static class InverseListenerTextView implements InverseBindingListener { &amp;commat;Override public void onChange() { mObj.setTextValue(mTextView.getText()); } } </pre> <p> A <pre><code> <a href="https://developer.android.com/reference/android/databinding/BindingAdapter.html"> BindingAdapter </a> </code></pre> should be used to assign the event listener. For example, <pre><code> android:onTextChanged </code></pre> will need to trigger the event listener for the <pre><code> android:text </code></pre> attribute. <pre> &amp;commat;InverseBindingAdapter(attribute = "android:text", event = "android:textAttrChanged") public static void captureTextValue(TextView view, ObservableField&lt;CharSequence&gt; value) { CharSequence newValue = view.getText(); CharSequence oldValue = value.get(); if (oldValue == null) { value.set(newValue); } else if (!contentEquals(newValue, oldValue)) { value.set(newValue); } } &amp;commat;BindingAdapter(value = {"android:beforeTextChanged", "android:onTextChanged", "android:afterTextChanged", "android:textAttrChanged"}, requireAll = false) public static void setTextWatcher(TextView view, final BeforeTextChanged before, final OnTextChanged on, final AfterTextChanged after, final InverseBindingListener textAttrChanged) { TextWatcher newValue = new TextWatcher() { ... &amp;commat;Override public void onTextChanged(CharSequence s, int start, int before, int count) { if (on != null) { on.onTextChanged(s, start, before, count); } if (textAttrChanged != null) { textAttrChanged.onChange(); } } } TextWatcher oldValue = ListenerUtil.trackListener(view, newValue, R.id.textWatcher); if (oldValue != null) { view.removeTextChangedListener(oldValue); } view.addTextChangedListener(newValue); } </pre> </p>\n<pre><code>public interface InverseBindingListener\n</code></pre></section>	https://developer.android.com/reference/android/databinding/InverseBindingListener.html
InverseBindingMethod	A										<section class="prog__container"><p> InverseBindingMethod is used to identify how to listen for changes to a View property and which getter method to call. InverseBindingMethod should be associated with any class as part of <pre><code> <a href="https://developer.android.com/reference/android/databinding/InverseBindingMethods.html"> InverseBindingMethods </a> </code></pre> . <p> <pre> &amp;commat;InverseBindingMethods({&amp;commat;InverseBindingMethod( type = android.widget.TextView.class, attribute = "android:text", event = "android:textAttrChanged", method = "getText")}) public class MyTextViewBindingAdapters { ... } </pre> <p> <pre><code> method </code></pre> is optional. If it isn't provided, the attribute name is used to find the method name, either prefixing with "is" or "get". For the attribute <pre><code> android:text </code></pre> , data binding will search for a <pre><code> public CharSequence getText() </code></pre> method on <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html"> TextView </a> </code></pre> . <p> <pre><code> event </code></pre> is optional. If it isn't provided, the event name is assigned the attribute name suffixed with <pre><code> AttrChanged </code></pre> . For the <pre><code> android:text </code></pre> attribute, the default event name would be <pre><code> android:textAttrChanged </code></pre> . The event should be set using a <pre><code> <a href="https://developer.android.com/reference/android/databinding/BindingAdapter.html"> BindingAdapter </a> </code></pre> . For example: <pre> &amp;commat;BindingAdapter(value = {"android:beforeTextChanged", "android:onTextChanged", "android:afterTextChanged", "android:textAttrChanged"}, requireAll = false) public static void setTextWatcher(TextView view, final BeforeTextChanged before, final OnTextChanged on, final AfterTextChanged after, final InverseBindingListener textAttrChanged) { TextWatcher newValue = new TextWatcher() { ... &amp;commat;Override public void onTextChanged(CharSequence s, int start, int before, int count) { if (on != null) { on.onTextChanged(s, start, before, count); } if (textAttrChanged != null) { textAttrChanged.onChange(); } } } TextWatcher oldValue = ListenerUtil.trackListener(view, newValue, R.id.textWatcher); if (oldValue != null) { view.removeTextChangedListener(oldValue); } view.addTextChangedListener(newValue); } </pre> </p>\n<pre><code>public abstract @interface InverseBindingMethod\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/databinding/InverseBindingMethod.html
InverseBindingMethods	A										<section class="prog__container"><p> Used to enumerate attribute, getter, and event association. The value is an array of <pre><code> <a href="https://developer.android.com/reference/android/databinding/InverseBindingMethod.html"> InverseBindingMethod </a> </code></pre> s.</p>\n<pre><code>public abstract @interface InverseBindingMethods\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/databinding/InverseBindingMethods.html
ListChangeRegistry	A										<section class="prog__container"><p> Utility class for managing ObservableList callbacks.</p>\n<pre><code>public class ListChangeRegistry\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ListChangeRegistry.html
MapChangeRegistry	A										<section class="prog__container"><p> Utility class for managing ObservableMap callbacks.</p>\n<pre><code>public class MapChangeRegistry\n</code></pre></section>	https://developer.android.com/reference/android/databinding/MapChangeRegistry.html
Observable	A										<section class="prog__container"><p> Observable classes provide a way in which data bound UI can be notified of changes. <pre><code> <a href="https://developer.android.com/reference/android/databinding/ObservableList.html"> ObservableList </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/databinding/ObservableMap.html"> ObservableMap </a> </code></pre> also provide the ability to notify when changes occur. ObservableField, ObservableParcelable, ObservableBoolean, ObservableByte, ObservableShort, ObservableInt, ObservableLong, ObservableFloat, and ObservableDouble provide a means by which properties may be notified without implementing Observable. <p> An Observable object should notify the <pre><code> <a href="https://developer.android.com/reference/android/databinding/Observable.OnPropertyChangedCallback.html"> Observable.OnPropertyChangedCallback </a> </code></pre> whenever an observed property of the class changes. <p> The getter for an observable property should be annotated with <pre><code> <a href="https://developer.android.com/reference/android/databinding/Bindable.html"> Bindable </a> </code></pre> . <p> Convenience class BaseObservable implements this interface and PropertyChangeRegistry can help classes that don't extend BaseObservable to implement the listener registry. </p>\n<pre><code>public interface Observable\n</code></pre></section>	https://developer.android.com/reference/android/databinding/Observable.html
Observable.OnPropertyChangedCallback	A										<section class="prog__container"><p> The callback that is called by Observable when an observable property has changed.</p>\n<pre><code>public static abstract class Observable.OnPropertyChangedCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/databinding/Observable.OnPropertyChangedCallback.html
ObservableArrayList	A										<section class="prog__container"><p> An <pre><code> <a href="https://developer.android.com/reference/android/databinding/ObservableList.html"> ObservableList </a> </code></pre> implementation using ArrayList as an implementation.</p>\n<pre><code>public class ObservableArrayList\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableArrayList.html
ObservableArrayMap	A										<section class="prog__container"><p> Adds a callback to listen for changes to the ObservableMap.</p>\n<pre><code>public class ObservableArrayMap\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableArrayMap.html
ObservableBoolean	A										<section class="prog__container"><p> An observable class that holds a primitive boolean. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableBoolean isAdult = new ObservableBoolean(); }</code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. <p> This class is parcelable and serializable but callbacks are ignored when the object is parcelled / serialized. Unless you add custom callbacks, this will not be an issue because data binding framework always re-registers callbacks when the view is bound. </p>\n<pre><code>public class ObservableBoolean\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableBoolean.html
ObservableByte	A										<section class="prog__container"><p> An observable class that holds a primitive byte. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableByte flags = new ObservableByte(); }</code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. <p> This class is parcelable and serializable but callbacks are ignored when the object is parcelled / serialized. Unless you add custom callbacks, this will not be an issue because data binding framework always re-registers callbacks when the view is bound. </p>\n<pre><code>public class ObservableByte\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableByte.html
ObservableChar	A										<section class="prog__container"><p> An observable class that holds a primitive char. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableChar firstInitial = new ObservableChar(); }</code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. <p> This class is parcelable and serializable but callbacks are ignored when the object is parcelled / serialized. Unless you add custom callbacks, this will not be an issue because data binding framework always re-registers callbacks when the view is bound. </p>\n<pre><code>public class ObservableChar\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableChar.html
ObservableDouble	A										<section class="prog__container"><p> An observable class that holds a primitive double. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableDouble temperature = new ObservableDouble(); }</code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. <p> This class is parcelable and serializable but callbacks are ignored when the object is parcelled / serialized. Unless you add custom callbacks, this will not be an issue because data binding framework always re-registers callbacks when the view is bound. </p>\n<pre><code>public class ObservableDouble\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableDouble.html
ObservableField	A										<section class="prog__container"><p> An object wrapper to make it observable. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableField&lt;String&gt; name = new ObservableField&lt;String&gt;(); public final ObservableInt age = new ObservableInt(); }</code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. </p>\n<pre><code>public class ObservableField\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableField.html
ObservableFloat	A										<section class="prog__container"><p> An observable class that holds a primitive float. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableFloat temperature = new ObservableFloat(); }</code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. <p> This class is parcelable and serializable but callbacks are ignored when the object is parcelled / serialized. Unless you add custom callbacks, this will not be an issue because data binding framework always re-registers callbacks when the view is bound. </p>\n<pre><code>public class ObservableFloat\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableFloat.html
ObservableInt	A										<section class="prog__container"><p> An observable class that holds a primitive int. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableField<string> name = new ObservableField<string>(); public final ObservableInt age = new ObservableInt(); }</string></string></code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. <p> This class is parcelable and serializable but callbacks are ignored when the object is parcelled / serialized. Unless you add custom callbacks, this will not be an issue because data binding framework always re-registers callbacks when the view is bound. </p>\n<pre><code>public class ObservableInt\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableInt.html
ObservableList	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/java/util/List.html"> List </a> </code></pre> that notifies when changes are made. An ObservableList bound to the UI will keep the it up-to-date when changes occur. <p> The ObservableList must notify its callbacks whenever a change to the list occurs, using <pre><code> <a href="https://developer.android.com/reference/android/databinding/ObservableList.OnListChangedCallback.html"> ObservableList.OnListChangedCallback </a> </code></pre> . <p> ObservableArrayList implements ObservableList with an underlying ArrayList. ListChangeRegistry can help in maintaining the callbacks of other implementations. </p>\n<pre><code>public interface ObservableList\nimplements <a href="https://developer.android.com/reference/java/util/List.html">List</a>&lt;T&gt;</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableList.html
ObservableList.OnListChangedCallback	A										<section class="prog__container"><p> The callback that is called by ObservableList when the list has changed.</p>\n<pre><code>public static abstract class ObservableList.OnListChangedCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableList.OnListChangedCallback.html
ObservableLong	A										<section class="prog__container"><p> An observable class that holds a primitive long. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableLong friendCount = new ObservableLong(); }</code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. <p> This class is parcelable and serializable but callbacks are ignored when the object is parcelled / serialized. Unless you add custom callbacks, this will not be an issue because data binding framework always re-registers callbacks when the view is bound. </p>\n<pre><code>public class ObservableLong\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableLong.html
ObservableMap	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/java/util/Map.html"> Map </a> </code></pre> that notifies when items change. This kind of Map may be data bound and have the UI update as the map changes. <p> Implementers must call <pre><code> <a href="https://developer.android.com/reference/android/databinding/ObservableMap.OnMapChangedCallback.html#onMapChanged(T, K)"> onMapChanged(ObservableMap, Object) </a> </code></pre> whenever an item is added, changed, or removed. <p> ObservableArrayMap is a convenient implementation of ObservableMap. MapChangeRegistry may help other implementations manage the callbacks. </p>\n<pre><code>public interface ObservableMap\nimplements <a href="https://developer.android.com/reference/java/util/Map.html">Map</a>&lt;K,&nbsp;V&gt;</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableMap.html
ObservableMap.OnMapChangedCallback	A										<section class="prog__container"><p> A callback receiving notifications when an ObservableMap changes.</p>\n<pre><code>public static abstract class ObservableMap.OnMapChangedCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableMap.OnMapChangedCallback.html
ObservableParcelable	A										<section class="prog__container"><p> An observable class that holds a parcelable object. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableParcelable&lt;String&gt; name = new ObservableParcelable&lt;String&gt;(); public final ObservableInt age = new ObservableInt(); }</code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. <p> This class is parcelable but you should keep in mind that listeners are ignored when the object is parcelled. Unless you add custom observers, this should not be an issue because data binding framework always re-registers observers when the view is bound. </p>\n<pre><code>public class ObservableParcelable\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableParcelable.html
ObservableShort	A										<section class="prog__container"><p> An observable class that holds a primitive short. <p> Observable field classes may be used instead of creating an Observable object: <pre><pre><code>public class MyDataObject { public final ObservableShort age = new ObservableShort(); }</code></pre></pre> Fields of this type should be declared final because bindings only detect changes in the field's value, not of the field itself. <p> This class is parcelable and serializable but callbacks are ignored when the object is parcelled / serialized. Unless you add custom callbacks, this will not be an issue because data binding framework always re-registers callbacks when the view is bound. </p>\n<pre><code>public class ObservableShort\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ObservableShort.html
OnRebindCallback	A										<section class="prog__container"><p> Listener set on <pre><code> <a href="https://developer.android.com/reference/android/databinding/ViewDataBinding.html#addOnRebindCallback(android.databinding.OnRebindCallback)"> addOnRebindCallback(OnRebindCallback) </a> </code></pre> that is called when bound values must be reevaluated in <pre><code> <a href="https://developer.android.com/reference/android/databinding/ViewDataBinding.html#executePendingBindings()"> executePendingBindings() </a> </code></pre> .</p>\n<pre><code>public abstract class OnRebindCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/databinding/OnRebindCallback.html
android.databinding	A										<section class="prog__container">Contains components used when developing applications with data binding.</section>	https://developer.android.com/reference/android/databinding/package-summary.html
PropertyChangeRegistry	A										<section class="prog__container"><p> Utility class for managing Observable callbacks.</p>\n<pre><code>public class PropertyChangeRegistry\n</code></pre></section>	https://developer.android.com/reference/android/databinding/PropertyChangeRegistry.html
ViewDataBinding	A										<section class="prog__container"><p> Base class for generated data binding classes. If possible, the generated binding should be instantiated using one of its generated static bind or inflate methods. If the specific binding is unknown, <pre><code> <a href="https://developer.android.com/reference/android/databinding/DataBindingUtil.html#bind(android.view.View)"> bind(View) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/databinding/DataBindingUtil.html#inflate(android.view.LayoutInflater, int, android.view.ViewGroup, boolean)"> inflate(LayoutInflater, int, ViewGroup, boolean) </a> </code></pre> should be used.</p>\n<pre><code>public abstract class ViewDataBinding\n</code></pre></section>	https://developer.android.com/reference/android/databinding/ViewDataBinding.html
ViewStubProxy	A										<section class="prog__container"><p> This class represents a ViewStub before and after inflation. Before inflation, the ViewStub is accessible. After inflation, the root View of the inflated layout will be available. If the inflated layout has data binding, the ViewDataBinding for the inflated View is accessible.</p>\n<pre><code>public class ViewStubProxy\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/databinding/ViewStubProxy.html
DrmConvertedStatus	A										<section class="prog__container"><p> An entity class that wraps converted data, conversion status, and the offset for appending the header and body signature to the converted data. An instance of this class may be created two ways by the drm framework: a) a call to <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmManagerClient.html#convertData(int, byte[])"> DrmManagerClient.convertData() </a> </code></pre> and b) a call to <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmManagerClient.html#closeConvertSession(int)"> DrmManagerClient.closeConvertSession() </a> </code></pre> . An valid offset value is provided only from a success call to <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmManagerClient.html#closeConvertSession(int)"> DrmManagerClient.closeConvertSession() </a> </code></pre> .</p>\n<pre><code>public class DrmConvertedStatus\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/drm/DrmConvertedStatus.html
DrmErrorEvent	A										<section class="prog__container"><p> An entity class that is passed to the <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmManagerClient.OnErrorListener.html#onError(android.drm.DrmManagerClient, android.drm.DrmErrorEvent)"> onError() </a> </code></pre> callback.</p>\n<pre><code>public class DrmErrorEvent\n</code></pre></section>	https://developer.android.com/reference/android/drm/DrmErrorEvent.html
DrmEvent	A										<section class="prog__container"><p> A base class that is used to send asynchronous event information from the DRM framework.</p>\n<pre><code>public class DrmEvent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/drm/DrmEvent.html
DrmInfo	A										<section class="prog__container"><p> An entity class that describes the information required to send transactions between a device and an online DRM server. The DRM framework achieves server registration, license acquisition, and any other server-related transactions by passing an instance of this class to <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmManagerClient.html#processDrmInfo(android.drm.DrmInfo)"> processDrmInfo(DrmInfo) </a> </code></pre> . <p> The caller can retrieve the <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmInfo.html"> DrmInfo </a> </code></pre> instance by passing a <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmInfoRequest.html"> DrmInfoRequest </a> </code></pre> instance to <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmManagerClient.html#acquireDrmInfo(android.drm.DrmInfoRequest)"> acquireDrmInfo(DrmInfoRequest) </a> </code></pre> . </p>\n<pre><code>public class DrmInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/drm/DrmInfo.html
DrmInfoEvent	A										<section class="prog__container"><p> An entity class that is passed to the <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmManagerClient.OnInfoListener.html#onInfo(android.drm.DrmManagerClient, android.drm.DrmInfoEvent)"> onInfo() </a> </code></pre> callback.</p>\n<pre><code>public class DrmInfoEvent\n</code></pre></section>	https://developer.android.com/reference/android/drm/DrmInfoEvent.html
DrmInfoRequest	A										<section class="prog__container"><p> An entity class that is used to pass information to an online DRM server. An instance of this class is passed to the <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmManagerClient.html#acquireDrmInfo(android.drm.DrmInfoRequest)"> acquireDrmInfo() </a> </code></pre> method to get an instance of a <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmInfo.html"> DrmInfo </a> </code></pre> .</p>\n<pre><code>public class DrmInfoRequest\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/drm/DrmInfoRequest.html
DrmInfoStatus	A										<section class="prog__container"><p> An entity class that wraps the result of communication between a device and an online DRM server. Specifically, when the <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmManagerClient.html#processDrmInfo(android.drm.DrmInfo)"> DrmManagerClient.processDrmInfo() </a> </code></pre> method is called, an instance of <pre><code> DrmInfoStatus </code></pre> is returned. <p> This class contains the <pre><code> <a href="https://developer.android.com/reference/android/drm/ProcessedData.html"> ProcessedData </a> </code></pre> object, which can be used to instantiate a <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmRights.html"> DrmRights </a> </code></pre> object during license acquisition. </p>\n<pre><code>public class DrmInfoStatus\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/drm/DrmInfoStatus.html
DrmManagerClient	A										<section class="prog__container"><p> The main programming interface for the DRM framework. An application must instantiate this class to access DRM agents through the DRM framework.</p>\n<pre><code>public class DrmManagerClient\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/drm/DrmManagerClient.html
DrmManagerClient.OnErrorListener	A										<section class="prog__container"><p> Interface definition for a callback that receives information about DRM framework errors.</p>\n<pre><code>public static interface DrmManagerClient.OnErrorListener\n</code></pre></section>	https://developer.android.com/reference/android/drm/DrmManagerClient.OnErrorListener.html
DrmManagerClient.OnEventListener	A										<section class="prog__container"><p> Interface definition for a callback that receives information about DRM processing events.</p>\n<pre><code>public static interface DrmManagerClient.OnEventListener\n</code></pre></section>	https://developer.android.com/reference/android/drm/DrmManagerClient.OnEventListener.html
DrmManagerClient.OnInfoListener	A										<section class="prog__container"><p> Interface definition for a callback that receives status messages and warnings during registration and rights acquisition.</p>\n<pre><code>public static interface DrmManagerClient.OnInfoListener\n</code></pre></section>	https://developer.android.com/reference/android/drm/DrmManagerClient.OnInfoListener.html
DrmRights	A										<section class="prog__container"><p> An entity class that wraps the license information retrieved from the online DRM server. <p> A caller can instantiate a <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmRights.html"> DrmRights </a> </code></pre> object by first invoking the <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmManagerClient.html#processDrmInfo(android.drm.DrmInfo)"> processDrmInfo(DrmInfo) </a> </code></pre> method and then using the resulting <pre><code> <a href="https://developer.android.com/reference/android/drm/ProcessedData.html"> ProcessedData </a> </code></pre> object to invoke the <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmRights.html#DrmRights(android.drm.ProcessedData, java.lang.String)"> DrmRights(ProcessedData, String) </a> </code></pre> constructor. <p> A caller can also instantiate a <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmRights.html"> DrmRights </a> </code></pre> object by using the <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmRights.html#DrmRights(java.lang.String, java.lang.String)"> DrmRights(String, String) </a> </code></pre> constructor, which takes a path to a file containing rights information instead of a <pre><code> ProcessedData </code></pre> . <p> Please note that the account id and subscription id is not mandatory by all DRM agents or plugins. When account id or subscription id is not required by the specific DRM agent or plugin, they can be either null, or an empty string, or any other don't-care string value. </p>\n<pre><code>public class DrmRights\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/drm/DrmRights.html
DrmStore.Action	A										<section class="prog__container"><p> Defines actions that can be performed on rights-protected content.</p>\n<pre><code>public static class DrmStore.Action\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/drm/DrmStore.Action.html
DrmStore.ConstraintsColumns	A										<section class="prog__container"><p> Interface definition for the columns that represent DRM constraints. <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmManagerClient.html#getConstraints(android.net.Uri, int)"> DrmManagerClient.getConstraints() </a> </code></pre> can be called by an application to find out the contraints on the <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmStore.Action.html"> actions </a> </code></pre> that can be performed on right-protected content. The constants defined in this interface represent three most common types of constraints: count-based, date-based, and duration-based. Two or more constraints can be used at the same time to represent more sophisticated constraints. In addition, user-defined constraint, <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmStore.ConstraintsColumns.html#EXTENDED_METADATA"> extended metadata </a> </code></pre> , can be used if these three types of constraints are not sufficient.</p>\n<pre><code>public static interface DrmStore.ConstraintsColumns\n</code></pre></section>	https://developer.android.com/reference/android/drm/DrmStore.ConstraintsColumns.html
DrmStore.DrmObjectType	A										<section class="prog__container"><p> Defines DRM object types.</p>\n<pre><code>public static class DrmStore.DrmObjectType\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/drm/DrmStore.DrmObjectType.html
DrmStore	A										<section class="prog__container"><p> Defines constants that are used by the DRM framework.</p>\n<pre><code>public class DrmStore\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/drm/DrmStore.html
DrmStore.Playback	A										<section class="prog__container"><p> Defines playback states for content.</p>\n<pre><code>public static class DrmStore.Playback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/drm/DrmStore.Playback.html
DrmStore.RightsStatus	A										<section class="prog__container"><p> Defines status notifications for digital rights.</p>\n<pre><code>public static class DrmStore.RightsStatus\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/drm/DrmStore.RightsStatus.html
DrmSupportInfo	A										<section class="prog__container"><p> An entity class that wraps the capability of each DRM plug-in (agent), such as the MIME type and file suffix the DRM plug-in can handle. <p> Plug-in developers can expose the capability of their plug-in by passing an instance of this class to an application. </p>\n<pre><code>public class DrmSupportInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/drm/DrmSupportInfo.html
DrmUtils.ExtendedMetadataParser	A										<section class="prog__container"><p> Utility that parses extended metadata embedded in DRM constraint information. <p> Usage example: <p> byte[] extendedMetadata <br> = constraints.getAsByteArray(DrmStore.ConstraintsColumns.EXTENDED_METADATA); <br> ExtendedMetadataParser parser = getExtendedMetadataParser(extendedMetadata); <br> Iterator keyIterator = parser.keyIterator(); <br> while (keyIterator.hasNext()) { <br> String extendedMetadataKey = keyIterator.next(); <br> String extendedMetadataValue = parser.get(extendedMetadataKey); <br> } </br> </br> </br> </br> </br> </br> </br> </p>\n<pre><code>public static class DrmUtils.ExtendedMetadataParser\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/drm/DrmUtils.ExtendedMetadataParser.html
DrmUtils	A										<section class="prog__container"><p> A utility class that provides operations for parsing extended metadata embedded in DRM constraint information. If a DRM scheme has specific constraints beyond the standard constraints, the constraints will show up in the <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmStore.ConstraintsColumns.html#EXTENDED_METADATA"> EXTENDED_METADATA </a> </code></pre> key. You can use <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmUtils.ExtendedMetadataParser.html"> DrmUtils.ExtendedMetadataParser </a> </code></pre> to iterate over those values.</p>\n<pre><code>public class DrmUtils\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/drm/DrmUtils.html
android.drm	A										<section class="prog__container">Provides classes for managing DRM content and determining the capabilities of DRM plugins(agents). Common uses of the DRM API include:</section>	https://developer.android.com/reference/android/drm/package-summary.html
ProcessedData	A										<section class="prog__container"><p> An entity class that wraps the result of a <pre><code> <a href="https://developer.android.com/reference/android/drm/DrmManagerClient.html#processDrmInfo(android.drm.DrmInfo)"> processDrmInfo() </a> </code></pre> transaction between a device and a DRM server. In a license acquisition scenario this class holds the rights information in binary form.</p>\n<pre><code>public class ProcessedData\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/drm/ProcessedData.html
Gesture	A										<section class="prog__container"><p> A gesture is a hand-drawn shape on a touch screen. It can have one or multiple strokes. Each stroke is a sequence of timed points. A user-defined gesture can be recognized by a GestureLibrary.</p>\n<pre><code>public class Gesture\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/gesture/Gesture.html
GestureLibraries	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public final class GestureLibraries\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/gesture/GestureLibraries.html
GestureLibrary	A										<section class="prog__container"><p></p>\n<pre><code>public abstract class GestureLibrary\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/gesture/GestureLibrary.html
GestureOverlayView	A										<section class="prog__container"><p> A transparent overlay for gesture input that can be placed on top of other widgets or contain other widgets.</p>\n<pre><code>public class GestureOverlayView\n</code></pre></section>	https://developer.android.com/reference/android/gesture/GestureOverlayView.html
GestureOverlayView.OnGestureListener	A										<section class="prog__container"><p></p>\n<pre><code>public static interface GestureOverlayView.OnGestureListener\n</code></pre></section>	https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGestureListener.html
GestureOverlayView.OnGesturePerformedListener	A										<section class="prog__container"><p></p>\n<pre><code>public static interface GestureOverlayView.OnGesturePerformedListener\n</code></pre></section>	https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGesturePerformedListener.html
GestureOverlayView.OnGesturingListener	A										<section class="prog__container"><p></p>\n<pre><code>public static interface GestureOverlayView.OnGesturingListener\n</code></pre></section>	https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGesturingListener.html
GesturePoint	A										<section class="prog__container"><p> A timed point of a gesture stroke. Multiple points form a stroke.</p>\n<pre><code>public class GesturePoint\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/gesture/GesturePoint.html
GestureStore	A										<section class="prog__container"><p> GestureLibrary maintains gesture examples and makes predictions on a new gesture</p>\n<pre><code>public class GestureStore\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/gesture/GestureStore.html
GestureStroke	A										<section class="prog__container"><p> A gesture stroke started on a touch down and ended on a touch up. A stroke consists of a sequence of timed points. One or multiple strokes form a gesture.</p>\n<pre><code>public class GestureStroke\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/gesture/GestureStroke.html
GestureUtils	A										<section class="prog__container"><p> Utility functions for gesture processing &amp; analysis, including methods for: <ul> <li> feature extraction (e.g., samplers and those for calculating bounding boxes and gesture path lengths); <li> geometric transformation (e.g., translation, rotation and scaling); <li> gesture similarity comparison (e.g., calculating Euclidean or Cosine distances between two gestures). </li> </li> </li> </ul></p>\n<pre><code>public final class GestureUtils\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/gesture/GestureUtils.html
OrientedBoundingBox	A										<section class="prog__container"><p> An oriented bounding box</p>\n<pre><code>public class OrientedBoundingBox\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/gesture/OrientedBoundingBox.html
android.gesture	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/gesture/package-summary.html
Prediction	A										<section class="prog__container"><p></p>\n<pre><code>public class Prediction\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/gesture/Prediction.html
Bitmap.CompressFormat	A										<section class="prog__container"><p> Specifies the known formats a bitmap can be compressed into</p>\n<pre><code>public static final enum Bitmap.CompressFormat\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Bitmap.CompressFormat.html
Bitmap.Config	A										<section class="prog__container"><p> Possible bitmap configurations. A bitmap configuration describes how pixels are stored. This affects the quality (color depth) as well as the ability to display transparent/translucent colors.</p>\n<pre><code>public static final enum Bitmap.Config\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Bitmap.Config.html
Bitmap	A										<section class="prog__container"><p> Specifies the known formats a bitmap can be compressed into</p>\n<pre><code>public final class Bitmap\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Bitmap.html
BitmapFactory	A										<section class="prog__container"><p> Creates Bitmap objects from various sources, including files, streams, and byte-arrays.</p>\n<pre><code>public class BitmapFactory\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/BitmapFactory.html
BitmapFactory.Options	A										<section class="prog__container"><p> If set, decode methods that take the Options object will attempt to reuse this bitmap when loading content.</p>\n<pre><code>public static class BitmapFactory.Options\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html
BitmapRegionDecoder	A										<section class="prog__container"><p> BitmapRegionDecoder can be used to decode a rectangle region from an image. BitmapRegionDecoder is particularly useful when an original image is large and you only need parts of the image. <p> To create a BitmapRegionDecoder, call newInstance(...). Given a BitmapRegionDecoder, users can call decodeRegion() repeatedly to get a decoded Bitmap of the specified region. </p>\n<pre><code>public final class BitmapRegionDecoder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/BitmapRegionDecoder.html
BitmapShader	A										<section class="prog__container"><p> Shader used to draw a bitmap as a texture. The bitmap can be repeated or mirrored by setting the tiling mode.</p>\n<pre><code>public class BitmapShader\n</code></pre></section>	https://developer.android.com/reference/android/graphics/BitmapShader.html
BlurMaskFilter.Blur	A										<section class="prog__container"><p> Blur inside the border, draw nothing outside.</p>\n<pre><code>public static final enum BlurMaskFilter.Blur\n</code></pre></section>	https://developer.android.com/reference/android/graphics/BlurMaskFilter.Blur.html
BlurMaskFilter	A										<section class="prog__container"><p> This takes a mask, and blurs its edge by the specified radius. Whether or or not to include the original mask, and whether the blur goes outside, inside, or straddles, the original mask's border, is controlled by the Blur enum.</p>\n<pre><code>public class BlurMaskFilter\n</code></pre></section>	https://developer.android.com/reference/android/graphics/BlurMaskFilter.html
Camera	A										<section class="prog__container"><p> A camera instance can be used to compute 3D transformations and generate a matrix that can be applied, for instance, on a <pre><code> <a href="https://developer.android.com/reference/android/graphics/Canvas.html"> Canvas </a> </code></pre> .</p>\n<pre><code>public class Camera\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Camera.html
Canvas.EdgeType	A										<section class="prog__container"><p> Antialiased: Treat edges by rounding-out, since they may be antialiased</p>\n<pre><code>public static final enum Canvas.EdgeType\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Canvas.EdgeType.html
Canvas	A										<section class="prog__container"><p> The Canvas class holds the "draw" calls. To draw something, you need 4 basic components: A Bitmap to hold the pixels, a Canvas to host the draw calls (writing into the bitmap), a drawing primitive (e.g. Rect, Path, text, Bitmap), and a paint (to describe the colors and styles for the drawing). </p>\n<pre><code>public class Canvas\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Canvas.html
Canvas.VertexMode	A										<section class="prog__container"><p></p>\n<pre><code>public static final enum Canvas.VertexMode\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Canvas.VertexMode.html
Color	A										<section class="prog__container"><p> The Color class defines methods for creating and converting color ints. Colors are represented as packed ints, made up of 4 bytes: alpha, red, green, blue. The values are unpremultiplied, meaning any transparency is stored solely in the alpha component, and not in the color components. The components are stored as follows (alpha &lt;&lt; 24) | (red &lt;&lt; 16) | (green &lt;&lt; 8) | blue. Each component ranges between 0..255 with 0 meaning no contribution for that component, and 255 meaning 100% contribution. Thus opaque-black would be 0xFF000000 (100% opaque but no contributions from red, green, or blue), and opaque-white would be 0xFFFFFFFF</p>\n<pre><code>public class Color\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Color.html
ColorFilter	A										<section class="prog__container"><p> A color filter can be used with a <pre><code> <a href="https://developer.android.com/reference/android/graphics/Paint.html"> Paint </a> </code></pre> to modify the color of each pixel drawn with that paint. This is an abstract class that should never be used directly.</p>\n<pre><code>public class ColorFilter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/ColorFilter.html
ColorMatrix	A										<section class="prog__container"><p> 4x5 matrix for transforming the color and alpha components of a Bitmap. The matrix can be passed as single array, and is treated as follows: <pre> [ a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t ]</pre> <p> When applied to a color <pre><code> [R, G, B, A] </code></pre> , the resulting color is computed as: </p>\n<pre><code>public class ColorMatrix\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/ColorMatrix.html
ColorMatrixColorFilter	A										<section class="prog__container"><p> A color filter that transforms colors through a 4x5 color matrix. This filter can be used to change the saturation of pixels, convert from YUV to RGB, etc.</p>\n<pre><code>public class ColorMatrixColorFilter\n</code></pre></section>	https://developer.android.com/reference/android/graphics/ColorMatrixColorFilter.html
ComposePathEffect	A										<section class="prog__container"><p> Construct a PathEffect whose effect is to apply first the inner effect and the the outer pathEffect (e.g.</p>\n<pre><code>public class ComposePathEffect\n</code></pre></section>	https://developer.android.com/reference/android/graphics/ComposePathEffect.html
ComposeShader	A										<section class="prog__container"><p> A subclass of shader that returns the composition of two other shaders, combined by an <pre><code> <a href="https://developer.android.com/reference/android/graphics/Xfermode.html"> Xfermode </a> </code></pre> subclass.</p>\n<pre><code>public class ComposeShader\n</code></pre></section>	https://developer.android.com/reference/android/graphics/ComposeShader.html
CornerPathEffect	A										<section class="prog__container"><p> Transforms geometries that are drawn (either STROKE or FILL styles) by replacing any sharp angles between line segments into rounded angles of the specified radius.</p>\n<pre><code>public class CornerPathEffect\n</code></pre></section>	https://developer.android.com/reference/android/graphics/CornerPathEffect.html
DashPathEffect	A										<section class="prog__container"><p> The intervals array must contain an even number of entries (&gt;=2), with the even indices specifying the "on" intervals, and the odd indices specifying the "off" intervals.</p>\n<pre><code>public class DashPathEffect\n</code></pre></section>	https://developer.android.com/reference/android/graphics/DashPathEffect.html
DiscretePathEffect	A										<section class="prog__container"><p> Chop the path into lines of segmentLength, randomly deviating from the original path by deviation.</p>\n<pre><code>public class DiscretePathEffect\n</code></pre></section>	https://developer.android.com/reference/android/graphics/DiscretePathEffect.html
DrawFilter	A										<section class="prog__container"><p> A DrawFilter subclass can be installed in a Canvas. When it is present, it can modify the paint that is used to draw (temporarily). With this, a filter can disable/enable antialiasing, or change the color for everything this is drawn.</p>\n<pre><code>public class DrawFilter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/DrawFilter.html
EmbossMaskFilter	A										<section class="prog__container"><p> Create an emboss maskfilter</p>\n<pre><code>public class EmbossMaskFilter\n</code></pre></section>	https://developer.android.com/reference/android/graphics/EmbossMaskFilter.html
ImageFormat	A										<section class="prog__container"><p> <p> Android dense depth image format. </p>\n<pre><code>public class ImageFormat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/ImageFormat.html
Interpolator	A										<section class="prog__container"><p></p>\n<pre><code>public class Interpolator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Interpolator.html
Interpolator.Result	A										<section class="prog__container"><p></p>\n<pre><code>public static final enum Interpolator.Result\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Interpolator.Result.html
LayerRasterizer	A										<section class="prog__container"><p> Add a new layer (above any previous layers) to the rasterizer.</p>\n<pre><code>public class LayerRasterizer\n</code></pre></section>	https://developer.android.com/reference/android/graphics/LayerRasterizer.html
LightingColorFilter	A										<section class="prog__container"><p> A color filter that can be used to simulate simple lighting effects. A <pre><code> LightingColorFilter </code></pre> is defined by two parameters, one used to multiply the source color (called <pre><code> colorMultiply </code></pre> ) and one used to add to the source color (called <pre><code> colorAdd </code></pre> ). The alpha channel is left untouched by this color filter. Given a source color RGB, the resulting R'G'B' color is computed thusly: <pre> R' = R * colorMultiply.R + colorAdd.R G' = G * colorMultiply.G + colorAdd.G B' = B * colorMultiply.B + colorAdd.B </pre> The result is pinned to the <pre><code> [0..255] </code></pre> range for each channel.</p>\n<pre><code>public class LightingColorFilter\n</code></pre></section>	https://developer.android.com/reference/android/graphics/LightingColorFilter.html
LinearGradient	A										<section class="prog__container"><p> Create a shader that draws a linear gradient along a line.</p>\n<pre><code>public class LinearGradient\n</code></pre></section>	https://developer.android.com/reference/android/graphics/LinearGradient.html
MaskFilter	A										<section class="prog__container"><p> MaskFilter is the base class for object that perform transformations on an alpha-channel mask before drawing it. A subclass of MaskFilter may be installed into a Paint. Blur and emboss are implemented as subclasses of MaskFilter.</p>\n<pre><code>public class MaskFilter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/MaskFilter.html
Matrix	A										<section class="prog__container"><p> The Matrix class holds a 3x3 matrix for transforming coordinates.</p>\n<pre><code>public class Matrix\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Matrix.html
Matrix.ScaleToFit	A										<section class="prog__container"><p> Controlls how the src rect should align into the dst rect for setRectToRect().</p>\n<pre><code>public static final enum Matrix.ScaleToFit\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Matrix.ScaleToFit.html
Movie	A										<section class="prog__container"><p> Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.</p>\n<pre><code>public class Movie\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Movie.html
NinePatch	A										<section class="prog__container"><p> The NinePatch class permits drawing a bitmap in nine or more sections. Essentially, it allows the creation of custom graphics that will scale the way that you define, when content added within the image exceeds the normal bounds of the graphic. For a thorough explanation of a NinePatch image, read the discussion in the <a href="https://developer.android.com/guide/topics/graphics/2d-graphics.html#nine-patch"> 2D Graphics </a> document. <p> The <a href="https://developer.android.com/guide/developing/tools/draw9patch.html"> Draw 9-Patch </a> tool offers an extremely handy way to create your NinePatch images, using a WYSIWYG graphics editor. </p>\n<pre><code>public class NinePatch\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/NinePatch.html
Outline	A										<section class="prog__container"><p> Defines a simple shape, used for bounding graphical regions. <p> Can be computed for a View, or computed by a Drawable, to drive the shape of shadows cast by a View, or to clip the contents of the View. </p>\n<pre><code>public final class Outline\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Outline.html
android.graphics	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/graphics/package-summary.html
Paint.Align	A										<section class="prog__container"><p> Align specifies how drawText aligns its text relative to the [x,y] coordinates. The default is LEFT.</p>\n<pre><code>public static final enum Paint.Align\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Paint.Align.html
Paint.Cap	A										<section class="prog__container"><p> The Cap specifies the treatment for the beginning and ending of stroked lines and paths. The default is BUTT.</p>\n<pre><code>public static final enum Paint.Cap\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Paint.Cap.html
Paint.FontMetrics	A										<section class="prog__container"><p> Class that describes the various metrics for a font at a given text size. Remember, Y values increase going down, so those values will be positive, and values that measure distances going up will be negative. This class is returned by getFontMetrics().</p>\n<pre><code>public static class Paint.FontMetrics\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Paint.FontMetrics.html
Paint.FontMetricsInt	A										<section class="prog__container"><p> Convenience method for callers that want to have FontMetrics values as integers.</p>\n<pre><code>public static class Paint.FontMetricsInt\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Paint.FontMetricsInt.html
Paint	A										<section class="prog__container"><p> The Paint class holds the style and color information about how to draw geometries, text and bitmaps.</p>\n<pre><code>public class Paint\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Paint.html
Paint.Join	A										<section class="prog__container"><p> The Join specifies the treatment where lines and curve segments join on a stroked path. The default is MITER.</p>\n<pre><code>public static final enum Paint.Join\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Paint.Join.html
Paint.Style	A										<section class="prog__container"><p> The Style specifies if the primitive being drawn is filled, stroked, or both (in the same color). The default is FILL.</p>\n<pre><code>public static final enum Paint.Style\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Paint.Style.html
PaintFlagsDrawFilter	A										<section class="prog__container"><p> Subclass of DrawFilter that affects every paint by first clearing the specified clearBits in the paint's flags, and then setting the specified setBits in the paint's flags.</p>\n<pre><code>public class PaintFlagsDrawFilter\n</code></pre></section>	https://developer.android.com/reference/android/graphics/PaintFlagsDrawFilter.html
Path.Direction	A										<section class="prog__container"><p> Specifies how closed shapes (e.g. rects, ovals) are oriented when they are added to a path.</p>\n<pre><code>public static final enum Path.Direction\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Path.Direction.html
Path.FillType	A										<section class="prog__container"><p> Enum for the ways a path may be filled.</p>\n<pre><code>public static final enum Path.FillType\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Path.FillType.html
Path	A										<section class="prog__container"><p> The Path class encapsulates compound (multiple contour) geometric paths consisting of straight line segments, quadratic curves, and cubic curves. It can be drawn with canvas.drawPath(path, paint), either filled or stroked (based on the paint's Style), or it can be used for clipping or to draw text on a path.</p>\n<pre><code>public class Path\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Path.html
Path.Op	A										<section class="prog__container"><p> The logical operations that can be performed when combining two paths.</p>\n<pre><code>public static final enum Path.Op\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Path.Op.html
PathDashPathEffect	A										<section class="prog__container"><p></p>\n<pre><code>public class PathDashPathEffect\n</code></pre></section>	https://developer.android.com/reference/android/graphics/PathDashPathEffect.html
PathDashPathEffect.Style	A										<section class="prog__container"><p></p>\n<pre><code>public static final enum PathDashPathEffect.Style\n</code></pre></section>	https://developer.android.com/reference/android/graphics/PathDashPathEffect.Style.html
PathEffect	A										<section class="prog__container"><p> PathEffect is the base class for objects in the Paint that affect the geometry of a drawing primitive before it is transformed by the canvas' matrix and drawn.</p>\n<pre><code>public class PathEffect\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/PathEffect.html
PathMeasure	A										<section class="prog__container"><p></p>\n<pre><code>public class PathMeasure\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/PathMeasure.html
Picture	A										<section class="prog__container"><p> A Picture records drawing calls (via the canvas returned by beginRecording) and can then play them back into Canvas (via <pre><code> <a href="https://developer.android.com/reference/android/graphics/Picture.html#draw(android.graphics.Canvas)"> draw(Canvas) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/graphics/Canvas.html#drawPicture(android.graphics.Picture)"> drawPicture(Picture) </a> </code></pre> ).For most content (e.g. text, lines, rectangles), drawing a sequence from a picture can be faster than the equivalent API calls, since the picture performs its playback without incurring any method-call overhead. <p class="note"> <strong> Note: </strong> Prior to API level 23 a picture cannot be replayed on a hardware accelerated canvas. </p>\n<pre><code>public class Picture\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Picture.html
PixelFormat	A										<section class="prog__container"><p></p>\n<pre><code>public class PixelFormat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/PixelFormat.html
Point	A										<section class="prog__container"><p> Point holds two integer coordinates</p>\n<pre><code>public class Point\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Point.html
PointF	A										<section class="prog__container"><p> PointF holds two float coordinates</p>\n<pre><code>public class PointF\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/PointF.html
PorterDuff	A										<section class="prog__container"><p></p>\n<pre><code>public class PorterDuff\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/PorterDuff.html
PorterDuff.Mode	A										<section class="prog__container"><p> Saturate(S + D)</p>\n<pre><code>public static final enum PorterDuff.Mode\n</code></pre></section>	https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html
PorterDuffColorFilter	A										<section class="prog__container"><p> A color filter that can be used to tint the source pixels using a single color and a specific <pre><code> <a href="https://developer.android.com/reference/android/graphics/PorterDuff.html"> Porter-Duff composite mode </a> </code></pre> .</p>\n<pre><code>public class PorterDuffColorFilter\n</code></pre></section>	https://developer.android.com/reference/android/graphics/PorterDuffColorFilter.html
PorterDuffXfermode	A										<section class="prog__container"><p> Create an xfermode that uses the specified porter-duff mode.</p>\n<pre><code>public class PorterDuffXfermode\n</code></pre></section>	https://developer.android.com/reference/android/graphics/PorterDuffXfermode.html
RadialGradient	A										<section class="prog__container"><p> Create a shader that draws a radial gradient given the center and radius.</p>\n<pre><code>public class RadialGradient\n</code></pre></section>	https://developer.android.com/reference/android/graphics/RadialGradient.html
Rasterizer	A										<section class="prog__container"><p> Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.</p>\n<pre><code>public class Rasterizer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Rasterizer.html
Rect	A										<section class="prog__container"><p> Rect holds four integer coordinates for a rectangle. The rectangle is represented by the coordinates of its 4 edges (left, top, right bottom). These fields can be accessed directly. Use width() and height() to retrieve the rectangle's width and height. Note: most methods do not check to see that the coordinates are sorted correctly (i.e. left &lt;= right and top &lt;= bottom). <p> Note that the right and bottom coordinates are exclusive. This means a Rect being drawn untransformed onto a <pre><code> <a href="https://developer.android.com/reference/android/graphics/Canvas.html"> Canvas </a> </code></pre> will draw into the column and row described by its left and top coordinates, but not those of its bottom and right. </p>\n<pre><code>public final class Rect\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Rect.html
RectF	A										<section class="prog__container"><p> RectF holds four float coordinates for a rectangle. The rectangle is represented by the coordinates of its 4 edges (left, top, right bottom). These fields can be accessed directly. Use width() and height() to retrieve the rectangle's width and height. Note: most methods do not check to see that the coordinates are sorted correctly (i.e. left &lt;= right and top &lt;= bottom).</p>\n<pre><code>public class RectF\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/RectF.html
Region	A										<section class="prog__container"><p></p>\n<pre><code>public class Region\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Region.html
Region.Op	A										<section class="prog__container"><p></p>\n<pre><code>public static final enum Region.Op\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Region.Op.html
RegionIterator	A										<section class="prog__container"><p> Construct an iterator for all of the rectangles in a region.</p>\n<pre><code>public class RegionIterator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/RegionIterator.html
Shader	A										<section class="prog__container"><p> Shader is the based class for objects that return horizontal spans of colors during drawing. A subclass of Shader is installed in a Paint calling paint.setShader(shader). After that any object (other than a bitmap) that is drawn with that paint will get its color(s) from the shader.</p>\n<pre><code>public class Shader\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Shader.html
Shader.TileMode	A										<section class="prog__container"><p> replicate the edge color if the shader draws outside of its original bounds</p>\n<pre><code>public static final enum Shader.TileMode\n</code></pre></section>	https://developer.android.com/reference/android/graphics/Shader.TileMode.html
SumPathEffect	A										<section class="prog__container"><p> Construct a PathEffect whose effect is to apply two effects, in sequence.</p>\n<pre><code>public class SumPathEffect\n</code></pre></section>	https://developer.android.com/reference/android/graphics/SumPathEffect.html
SurfaceTexture	A										<section class="prog__container"><p> Captures frames from an image stream as an OpenGL ES texture. <p> The image stream may come from either camera preview or video decode. A <pre><code> <a href="https://developer.android.com/reference/android/view/Surface.html"> Surface </a> </code></pre> created from a SurfaceTexture can be used as an output destination for the <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/package-summary.html"> android.hardware.camera2 </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/MediaCodec.html"> MediaCodec </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/MediaPlayer.html"> MediaPlayer </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Allocation.html"> Allocation </a> </code></pre> APIs. When <pre><code> <a href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#updateTexImage()"> updateTexImage() </a> </code></pre> is called, the contents of the texture object specified when the SurfaceTexture was created are updated to contain the most recent image from the image stream. This may cause some frames of the stream to be skipped. <p> A SurfaceTexture may also be used in place of a SurfaceHolder when specifying the output destination of the older <pre><code> <a href="https://developer.android.com/reference/android/hardware/Camera.html"> Camera </a> </code></pre> API. Doing so will cause all the frames from the image stream to be sent to the SurfaceTexture object rather than to the device's display. <p> When sampling from the texture one should first transform the texture coordinates using the matrix queried via <pre><code> <a href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#getTransformMatrix(float[])"> getTransformMatrix(float[]) </a> </code></pre> . The transform matrix may change each time <pre><code> <a href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#updateTexImage()"> updateTexImage() </a> </code></pre> is called, so it should be re-queried each time the texture image is updated. This matrix transforms traditional 2D OpenGL ES texture coordinate column vectors of the form (s, t, 0, 1) where s and t are on the inclusive interval [0, 1] to the proper sampling location in the streamed texture. This transform compensates for any properties of the image stream source that cause it to appear different from a traditional OpenGL ES texture. For example, sampling from the bottom left corner of the image can be accomplished by transforming the column vector (0, 0, 0, 1) using the queried matrix, while sampling from the top right corner of the image can be done by transforming (1, 1, 0, 1). <p> The texture object uses the GL_TEXTURE_EXTERNAL_OES texture target, which is defined by the <a href="http://www.khronos.org/registry/gles/extensions/OES/OES_EGL_image_external.txt"> GL_OES_EGL_image_external </a> OpenGL ES extension. This limits how the texture may be used. Each time the texture is bound it must be bound to the GL_TEXTURE_EXTERNAL_OES target rather than the GL_TEXTURE_2D target. Additionally, any OpenGL ES 2.0 shader that samples from the texture must declare its use of this extension using, for example, an "#extension GL_OES_EGL_image_external : require" directive. Such shaders must also access the texture using the samplerExternalOES GLSL sampler type. <p> SurfaceTexture objects may be created on any thread. <pre><code> <a href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#updateTexImage()"> updateTexImage() </a> </code></pre> may only be called on the thread with the OpenGL ES context that contains the texture object. The frame-available callback is called on an arbitrary thread, so unless special care is taken <pre><code> <a href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html#updateTexImage()"> updateTexImage() </a> </code></pre> should not be called directly from the callback. </p>\n<pre><code>public class SurfaceTexture\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/SurfaceTexture.html
SurfaceTexture.OnFrameAvailableListener	A										<section class="prog__container"><p> Callback interface for being notified that a new stream frame is available.</p>\n<pre><code>public static interface SurfaceTexture.OnFrameAvailableListener\n</code></pre></section>	https://developer.android.com/reference/android/graphics/SurfaceTexture.OnFrameAvailableListener.html
SurfaceTexture.OutOfResourcesException	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 19. </strong> <br/> No longer thrown. <pre><code> <a href="https://developer.android.com/reference/android/view/Surface.OutOfResourcesException.html"> Surface.OutOfResourcesException </a> </code></pre> is used instead. </p>\n<pre><code>public static class SurfaceTexture.OutOfResourcesException\n</code></pre></section>	https://developer.android.com/reference/android/graphics/SurfaceTexture.OutOfResourcesException.html
SweepGradient	A										<section class="prog__container"><p> A subclass of Shader that draws a sweep gradient around a center point.</p>\n<pre><code>public class SweepGradient\n</code></pre></section>	https://developer.android.com/reference/android/graphics/SweepGradient.html
Typeface	A										<section class="prog__container"><p> The Typeface class specifies the typeface and intrinsic style of a font. This is used in the paint, along with optionally Paint settings like textSize, textSkewX, textScaleX to specify how text appears when drawn (and measured).</p>\n<pre><code>public class Typeface\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Typeface.html
Xfermode	A										<section class="prog__container"><p> Xfermode is the base class for objects that are called to implement custom "transfer-modes" in the drawing pipeline. The static function Create(Modes) can be called to return an instance of any of the predefined subclasses as specified in the Modes enum. When an Xfermode is assigned to an Paint, then objects drawn with that paint have the xfermode applied.</p>\n<pre><code>public class Xfermode\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/Xfermode.html
YuvImage	A										<section class="prog__container"><p> YuvImage contains YUV data and provides a method that compresses a region of the YUV data to a Jpeg. The YUV data should be provided as a single byte array irrespective of the number of image planes in it. Currently only ImageFormat.NV21 and ImageFormat.YUY2 are supported. To compress a rectangle region in the YUV data, users have to specify the region by left, top, width and height.</p>\n<pre><code>public class YuvImage\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/YuvImage.html
Animatable	A										<section class="prog__container"><p> Interface that drawables supporting animations should implement.</p>\n<pre><code>public interface Animatable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/Animatable.html
Animatable2.AnimationCallback	A										<section class="prog__container"><p> Called when the animation ends.</p>\n<pre><code>public static abstract class Animatable2.AnimationCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/Animatable2.AnimationCallback.html
Animatable2	A										<section class="prog__container"><p> Abstract class that drawables supporting animations and callbacks should extend.</p>\n<pre><code>public interface Animatable2\nimplements <a href="https://developer.android.com/reference/android/graphics/drawable/Animatable.html">Animatable</a></code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/Animatable2.html
AnimatedStateListDrawable	A										<section class="prog__container"><p> Drawable containing a set of Drawable keyframes where the currently displayed keyframe is chosen based on the current state set. Animations between keyframes may optionally be defined using transition elements. <p> This drawable can be defined in an XML file with the <pre><code> &lt;animated-selector&gt; </code></pre> element. Each keyframe Drawable is defined in a nested <pre><code> &lt;item&gt; </code></pre> element. Transitions are defined in a nested <pre><code> &lt;transition&gt; </code></pre> element. </p>\n<pre><code>public class AnimatedStateListDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/AnimatedStateListDrawable.html
AnimatedVectorDrawable	A										<section class="prog__container"><p> This class animates properties of a <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html"> VectorDrawable </a> </code></pre> with animations defined using <pre><code> <a href="https://developer.android.com/reference/android/animation/ObjectAnimator.html"> ObjectAnimator </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/animation/AnimatorSet.html"> AnimatorSet </a> </code></pre> . <p> Starting from API 25, AnimatedVectorDrawable runs on RenderThread (as opposed to on UI thread for earlier APIs). This means animations in AnimatedVectorDrawable can remain smooth even when there is heavy workload on the UI thread. Note: If the UI thread is unresponsive, RenderThread may continue animating until the UI thread is capable of pushing another frame. Therefore, it is not possible to precisely coordinate a RenderThread-enabled AnimatedVectorDrawable with UI thread animations. Additionally, <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Animatable2.AnimationCallback.html#onAnimationEnd(android.graphics.drawable.Drawable)"> onAnimationEnd(Drawable) </a> </code></pre> will be called the frame after the AnimatedVectorDrawable finishes on the RenderThread. </p>\n<pre><code>public class AnimatedVectorDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/AnimatedVectorDrawable.html
AnimationDrawable	A										<section class="prog__container"><p> An object used to create frame-by-frame animations, defined by a series of Drawable objects, which can be used as a View object's background. <p> The simplest way to create a frame-by-frame animation is to define the animation in an XML file, placed in the res/drawable/ folder, and set it as the background to a View object. Then, call <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/AnimationDrawable.html#start()"> start() </a> </code></pre> to run the animation. <p> An AnimationDrawable defined in XML consists of a single <pre><code> &lt;animation-list&gt; </code></pre> element and a series of nested <pre><code> &lt;item&gt; </code></pre> tags. Each item defines a frame of the animation. See the example below. <p> spin_animation.xml file in res/drawable/ folder: <pre> &lt;!-- Animation frames are wheel0.png through wheel5.png files inside the res/drawable/ folder --&gt; &lt;animation-list android:id="@+id/selected" android:oneshot="false"&gt; &lt;item android:drawable="@drawable/wheel0" android:duration="50" /&gt; &lt;item android:drawable="@drawable/wheel1" android:duration="50" /&gt; &lt;item android:drawable="@drawable/wheel2" android:duration="50" /&gt; &lt;item android:drawable="@drawable/wheel3" android:duration="50" /&gt; &lt;item android:drawable="@drawable/wheel4" android:duration="50" /&gt; &lt;item android:drawable="@drawable/wheel5" android:duration="50" /&gt; &lt;/animation-list&gt;</pre> <p> Here is the code to load and play this animation. <pre> // Load the ImageView that will host the animation and // set its background to our AnimationDrawable XML resource. ImageView img = (ImageView)findViewById(R.id.spinning_wheel_image); img.setBackgroundResource(R.drawable.spin_animation); // Get the background, which has been compiled to an AnimationDrawable object. AnimationDrawable frameAnimation = (AnimationDrawable) img.getBackground(); // Start the animation (looped playback by default). frameAnimation.start(); </pre> </p>\n<pre><code>public class AnimationDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/AnimationDrawable.html
BitmapDrawable	A										<section class="prog__container"><p> A Drawable that wraps a bitmap and can be tiled, stretched, or aligned. You can create a BitmapDrawable from a file path, an input stream, through XML inflation, or from a <pre><code> <a href="https://developer.android.com/reference/android/graphics/Bitmap.html"> Bitmap </a> </code></pre> object. <p> It can be defined in an XML file with the <pre><code> &lt;bitmap&gt; </code></pre> element. For more information, see the guide to <a href="https://developer.android.com/guide/topics/resources/drawable-resource.html"> Drawable Resources </a> . </p>\n<pre><code>public class BitmapDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/BitmapDrawable.html
ClipDrawable	A										<section class="prog__container"><p> A Drawable that clips another Drawable based on this Drawable's current level value. You can control how much the child Drawable gets clipped in width and height based on the level, as well as a gravity to control where it is placed in its overall container. Most often used to implement things like progress bars, by increasing the drawable's level with <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setLevel(int)"> setLevel() </a> </code></pre> . <p class="note"> <strong> Note: </strong> The drawable is clipped completely and not visible when the level is 0 and fully revealed when the level is 10,000. </p>\n<pre><code>public class ClipDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/ClipDrawable.html
ColorDrawable	A										<section class="prog__container"><p> A specialized Drawable that fills the Canvas with a specified color. Note that a ColorDrawable ignores the ColorFilter. <p> It can be defined in an XML file with the <pre><code> &lt;color&gt; </code></pre> element. </p>\n<pre><code>public class ColorDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/ColorDrawable.html
Drawable.Callback	A										<section class="prog__container"><p> Implement this interface if you want to create an animated drawable that extends <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html"> Drawable </a> </code></pre> . Upon retrieving a drawable, use <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setCallback(android.graphics.drawable.Drawable.Callback)"> setCallback(android.graphics.drawable.Drawable.Callback) </a> </code></pre> to supply your implementation of the interface to the drawable; it uses this interface to schedule and execute animation changes.</p>\n<pre><code>public static interface Drawable.Callback\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/Drawable.Callback.html
Drawable.ConstantState	A										<section class="prog__container"><p> This abstract class is used by <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html"> Drawable </a> </code></pre> s to store shared constant state and data between Drawables. <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/BitmapDrawable.html"> BitmapDrawable </a> </code></pre> s created from the same resource will for instance share a unique bitmap stored in their ConstantState. <p> <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Drawable.ConstantState.html#newDrawable(android.content.res.Resources)"> newDrawable(Resources) </a> </code></pre> can be used as a factory to create new Drawable instances from this ConstantState. </p>\n<pre><code>public static abstract class Drawable.ConstantState\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/Drawable.ConstantState.html
Drawable	A										<section class="prog__container"><p> A Drawable is a general abstraction for "something that can be drawn." Most often you will deal with Drawable as the type of resource retrieved for drawing things to the screen; the Drawable class provides a generic API for dealing with an underlying visual resource that may take a variety of forms. Unlike a <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> , a Drawable does not have any facility to receive events or otherwise interact with the user. <p> In addition to simple drawing, Drawable provides a number of generic mechanisms for its client to interact with what is being drawn: <ul> <li> The <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setBounds(android.graphics.Rect)"> setBounds(Rect) </a> </code></pre> method <var> must </var> be called to tell the Drawable where it is drawn and how large it should be. All Drawables should respect the requested size, often simply by scaling their imagery. A client can find the preferred size for some Drawables with the <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getIntrinsicHeight()"> getIntrinsicHeight() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getIntrinsicWidth()"> getIntrinsicWidth() </a> </code></pre> methods. <li> The <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#getPadding(android.graphics.Rect)"> getPadding(Rect) </a> </code></pre> method can return from some Drawables information about how to frame content that is placed inside of them. For example, a Drawable that is intended to be the frame for a button widget would need to return padding that correctly places the label inside of itself. <li> The <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setState(int[])"> setState(int[]) </a> </code></pre> method allows the client to tell the Drawable in which state it is to be drawn, such as "focused", "selected", etc. Some drawables may modify their imagery based on the selected state. <li> The <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setLevel(int)"> setLevel(int) </a> </code></pre> method allows the client to supply a single continuous controller that can modify the Drawable is displayed, such as a battery level or progress level. Some drawables may modify their imagery based on the current level. <li> A Drawable can perform animations by calling back to its client through the <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Drawable.Callback.html"> Drawable.Callback </a> </code></pre> interface. All clients should support this interface (via <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setCallback(android.graphics.drawable.Drawable.Callback)"> setCallback(Drawable.Callback) </a> </code></pre> ) so that animations will work. A simple way to do this is through the system facilities such as <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#setBackground(android.graphics.drawable.Drawable)"> setBackground(Drawable) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/widget/ImageView.html"> ImageView </a> </code></pre> . </li> </li> </li> </li> </li> </ul> Though usually not visible to the application, Drawables may take a variety of forms: <ul> <li> <b> Bitmap </b> : the simplest Drawable, a PNG or JPEG image. <li> <b> Nine Patch </b> : an extension to the PNG format allows it to specify information about how to stretch it and place things inside of it. <li> <b> Vector </b> : a drawable defined in an XML file as a set of points, lines, and curves along with its associated color information. This type of drawable can be scaled without loss of display quality. <li> <b> Shape </b> : contains simple drawing commands instead of a raw bitmap, allowing it to resize better in some cases. <li> <b> Layers </b> : a compound drawable, which draws multiple underlying drawables on top of each other. <li> <b> States </b> : a compound drawable that selects one of a set of drawables based on its state. <li> <b> Levels </b> : a compound drawable that selects one of a set of drawables based on its level. <li> <b> Scale </b> : a compound drawable with a single child drawable, whose overall size is modified based on the current level. </li> </li> </li> </li> </li> </li> </li> </li> </ul> <a name="Custom"> </a> </p>\n<pre><code>public abstract class Drawable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/Drawable.html
DrawableContainer.DrawableContainerState	A										<section class="prog__container"><p> A ConstantState that can contain several <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html"> Drawable </a> </code></pre> s. This class was made public to enable testing, and its visibility may change in a future release.</p>\n<pre><code>public static abstract class DrawableContainer.DrawableContainerState\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.DrawableContainerState.html
DrawableContainer	A										<section class="prog__container"><p> A helper class that contains several <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html"> Drawable </a> </code></pre> s and selects which one to use. You can subclass it to create your own DrawableContainers or directly use one its child classes.</p>\n<pre><code>public class DrawableContainer\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/DrawableContainer.html
DrawableWrapper	A										<section class="prog__container"><p> Drawable container with only one child element.</p>\n<pre><code>public abstract class DrawableWrapper\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/DrawableWrapper.html
GradientDrawable	A										<section class="prog__container"><p> A Drawable with a color gradient for buttons, backgrounds, etc. <p> It can be defined in an XML file with the <pre><code> &lt;shape&gt; </code></pre> element. For more information, see the guide to <a href="https://developer.android.com/guide/topics/resources/drawable-resource.html"> Drawable Resources </a> . </p>\n<pre><code>public class GradientDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/GradientDrawable.html
GradientDrawable.Orientation	A										<section class="prog__container"><p> Controls how the gradient is oriented relative to the drawable's bounds</p>\n<pre><code>public static final enum GradientDrawable.Orientation\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/GradientDrawable.Orientation.html
Icon	A										<section class="prog__container"><p> An umbrella container for several serializable graphics representations, including Bitmaps, compressed bitmap images (e.g. JPG or PNG), and drawable resources (including vectors). <a href="https://developer.android.com/training/displaying-bitmaps/index.html"> Much ink </a> has been spilled on the best way to load images, and many clients may have different needs when it comes to threading and fetching. This class is therefore focused on encapsulation rather than behavior.</p>\n<pre><code>public final class Icon\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/Icon.html
Icon.OnDrawableLoadedListener	A										<section class="prog__container"><p> Implement this interface to receive a callback when <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Icon.html#loadDrawableAsync(android.content.Context, android.graphics.drawable.Icon.OnDrawableLoadedListener, android.os.Handler)"> loadDrawableAsync </a> </code></pre> is finished and your Drawable is ready.</p>\n<pre><code>public static interface Icon.OnDrawableLoadedListener\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/Icon.OnDrawableLoadedListener.html
InsetDrawable	A										<section class="prog__container"><p> A Drawable that insets another Drawable by a specified distance. This is used when a View needs a background that is smaller than the View's actual bounds. <p> It can be defined in an XML file with the <pre><code> &lt;inset&gt; </code></pre> element. For more information, see the guide to <a href="https://developer.android.com/guide/topics/resources/drawable-resource.html"> Drawable Resources </a> . </p>\n<pre><code>public class InsetDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/InsetDrawable.html
LayerDrawable	A										<section class="prog__container"><p> A Drawable that manages an array of other Drawables. These are drawn in array order, so the element with the largest index will be drawn on top. <p> It can be defined in an XML file with the <pre><code> &lt;layer-list&gt; </code></pre> element. Each Drawable in the layer is defined in a nested <pre><code> &lt;item&gt; </code></pre> . <p> For more information, see the guide to <a href="https://developer.android.com/guide/topics/resources/drawable-resource.html"> Drawable Resources </a> . </p>\n<pre><code>public class LayerDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/LayerDrawable.html
LevelListDrawable	A										<section class="prog__container"><p> A resource that manages a number of alternate Drawables, each assigned a maximum numerical value. Setting the level value of the object with <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setLevel(int)"> setLevel(int) </a> </code></pre> will load the image with the next greater or equal value assigned to its max attribute. A good example use of a LevelListDrawable would be a battery level indicator icon, with different images to indicate the current battery level. <p> It can be defined in an XML file with the <pre><code> &lt;level-list&gt; </code></pre> element. Each Drawable level is defined in a nested <pre><code> &lt;item&gt; </code></pre> . For example: </p>\n<pre><code>public class LevelListDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/LevelListDrawable.html
NinePatchDrawable	A										<section class="prog__container"><p> A resizeable bitmap, with stretchable areas that you define. This type of image is defined in a .png file with a special format. </p>\n<pre><code>public class NinePatchDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/NinePatchDrawable.html
android.graphics.drawable	A										<section class="prog__container">Provides classes to manage a variety of visual elements that are intended fordisplay only, such as bitmaps and gradients. These elements are often usedby widgets as background images or simply as indicators (for example, a volumelevel indicator).</section>	https://developer.android.com/reference/android/graphics/drawable/package-summary.html
PaintDrawable	A										<section class="prog__container"><p> Drawable that draws its bounds in the given paint, with optional rounded corners.</p>\n<pre><code>public class PaintDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/PaintDrawable.html
PictureDrawable	A										<section class="prog__container"><p> Drawable subclass that wraps a Picture, allowing the picture to be used wherever a Drawable is supported.</p>\n<pre><code>public class PictureDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/PictureDrawable.html
RippleDrawable	A										<section class="prog__container"><p> Drawable that shows a ripple effect in response to state changes. The anchoring position of the ripple for a given state may be specified by calling <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/RippleDrawable.html#setHotspot(float, float)"> setHotspot(float, float) </a> </code></pre> with the corresponding state attribute identifier. <p> A touch feedback drawable may contain multiple child layers, including a special mask layer that is not drawn to the screen. A single layer may be set as the mask from XML by specifying its <pre><code> android:id </code></pre> value as <pre><code> <a href="https://developer.android.com/reference/android/R.id.html#mask"> mask </a> </code></pre> . At run time, a single layer may be set as the mask using <pre><code> setId(..., android.R.id.mask) </code></pre> or an existing mask layer may be replaced using <pre><code> setDrawableByLayerId(android.R.id.mask, ...) </code></pre> . <pre> <pre><code>&lt;!-- A red ripple masked against an opaque rectangle. --/&gt; &amp;ltripple; android:color="#ffff0000"&gt; &amp;ltitem; android:id="@android:id/mask" android:drawable="@android:color/white" /&gt; &lt;/ripple&gt;</code></pre> </pre> <p> If a mask layer is set, the ripple effect will be masked against that layer before it is drawn over the composite of the remaining child layers. <p> If no mask layer is set, the ripple effect is masked against the composite of the child layers. <pre> <pre><code>&lt;!-- A green ripple drawn atop a black rectangle. --/&gt; &amp;ltripple; android:color="#ff00ff00"&gt; &amp;ltitem; android:drawable="@android:color/black" /&gt; &lt;/ripple&gt; &lt;!-- A blue ripple drawn atop a drawable resource. --/&gt; &amp;ltripple; android:color="#ff0000ff"&gt; &amp;ltitem; android:drawable="@drawable/my_drawable" /&gt; &lt;/ripple&gt;</code></pre> </pre> <p> If no child layers or mask is specified and the ripple is set as a View background, the ripple will be drawn atop the first available parent background within the View's hierarchy. In this case, the drawing region may extend outside of the Drawable bounds. <pre> <pre><code>&lt;!-- An unbounded red ripple. --/&gt; &amp;ltripple; android:color="#ffff0000" /&gt;</code></pre> </pre> </p>\n<pre><code>public class RippleDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/RippleDrawable.html
RotateDrawable	A										<section class="prog__container"><p> <p> A Drawable that can rotate another Drawable based on the current level value. The start and end angles of rotation can be controlled to map any circular arc to the level values range. <p> It can be defined in an XML file with the <pre><code> &lt;rotate&gt; </code></pre> element. For more information, see the guide to <a href="https://developer.android.com/guide/topics/resources/animation-resource.html"> Animation Resources </a> . </p>\n<pre><code>public class RotateDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/RotateDrawable.html
ScaleDrawable	A										<section class="prog__container"><p> A Drawable that changes the size of another Drawable based on its current level value. You can control how much the child Drawable changes in width and height based on the level, as well as a gravity to control where it is placed in its overall container. Most often used to implement things like progress bars. <p> The default level may be specified from XML using the <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#ScaleDrawable_level"> android:level </a> </code></pre> property. When this property is not specified, the default level is 0, which corresponds to zero height and/or width depending on the values specified for <pre><code> android.R.styleable#ScaleDrawable_scaleWidth scaleWidth </code></pre> and <pre><code> android.R.styleable#ScaleDrawable_scaleHeight scaleHeight </code></pre> . At run time, the level may be set via <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html#setLevel(int)"> setLevel(int) </a> </code></pre> . <p> A scale drawable may be defined in an XML file with the <pre><code> &lt;scale&gt; </code></pre> element. For more information, see the guide to <a href="https://developer.android.com/guide/topics/resources/drawable-resource.html"> Drawable Resources </a> . </p>\n<pre><code>public class ScaleDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/ScaleDrawable.html
ShapeDrawable	A										<section class="prog__container"><p> A Drawable object that draws primitive shapes. A ShapeDrawable takes a <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/shapes/Shape.html"> Shape </a> </code></pre> object and manages its presence on the screen. If no Shape is given, then the ShapeDrawable will default to a <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/shapes/RectShape.html"> RectShape </a> </code></pre> . <p> This object can be defined in an XML file with the <pre><code> &lt;shape&gt; </code></pre> element. </p>\n<pre><code>public class ShapeDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/ShapeDrawable.html
ShapeDrawable.ShaderFactory	A										<section class="prog__container"><p> Base class defines a factory object that is called each time the drawable is resized (has a new width or height). Its resize() method returns a corresponding shader, or null. Implement this class if you'd like your ShapeDrawable to use a special <pre><code> <a href="https://developer.android.com/reference/android/graphics/Shader.html"> Shader </a> </code></pre> , such as a <pre><code> <a href="https://developer.android.com/reference/android/graphics/LinearGradient.html"> LinearGradient </a> </code></pre> .</p>\n<pre><code>public static abstract class ShapeDrawable.ShaderFactory\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/ShapeDrawable.ShaderFactory.html
StateListDrawable	A										<section class="prog__container"><p> Lets you assign a number of graphic images to a single Drawable and swap out the visible item by a string ID value. <p> </p>\n<pre><code>public class StateListDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/StateListDrawable.html
TransitionDrawable	A										<section class="prog__container"><p> An extension of LayerDrawables that is intended to cross-fade between the first and second layer. To start the transition, call <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/TransitionDrawable.html#startTransition(int)"> startTransition(int) </a> </code></pre> . To display just the first layer, call <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/TransitionDrawable.html#resetTransition()"> resetTransition() </a> </code></pre> . <p> It can be defined in an XML file with the <pre><code> &lt;transition&gt; </code></pre> element. Each Drawable in the transition is defined in a nested <pre><code> &lt;item&gt; </code></pre> . For more information, see the guide to <a href="https://developer.android.com/guide/topics/resources/drawable-resource.html"> Drawable Resources </a> . </p>\n<pre><code>public class TransitionDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/TransitionDrawable.html
VectorDrawable	A										<section class="prog__container"><p> This lets you create a drawable based on an XML vector graphic. <p> </p>\n<pre><code>public class VectorDrawable\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html
ArcShape	A										<section class="prog__container"><p> Creates an arc shape. The arc shape starts at a specified angle and sweeps clockwise, drawing slices of pie. The arc can be drawn to a Canvas with its own draw() method, but more graphical control is available if you instead pass the ArcShape to a <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/ShapeDrawable.html"> ShapeDrawable </a> </code></pre> .</p>\n<pre><code>public class ArcShape\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/shapes/ArcShape.html
OvalShape	A										<section class="prog__container"><p> Defines an oval shape. The oval can be drawn to a Canvas with its own draw() method, but more graphical control is available if you instead pass the OvalShape to a <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/ShapeDrawable.html"> ShapeDrawable </a> </code></pre> .</p>\n<pre><code>public class OvalShape\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/shapes/OvalShape.html
android.graphics.drawable.shapes	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/graphics/drawable/shapes/package-summary.html
PathShape	A										<section class="prog__container"><p> Creates geometric paths, utilizing the <pre><code> <a href="https://developer.android.com/reference/android/graphics/Path.html"> Path </a> </code></pre> class. The path can be drawn to a Canvas with its own draw() method, but more graphical control is available if you instead pass the PathShape to a <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/ShapeDrawable.html"> ShapeDrawable </a> </code></pre> .</p>\n<pre><code>public class PathShape\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/shapes/PathShape.html
RectShape	A										<section class="prog__container"><p> Defines a rectangle shape. The rectangle can be drawn to a Canvas with its own draw() method, but more graphical control is available if you instead pass the RectShape to a <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/ShapeDrawable.html"> ShapeDrawable </a> </code></pre> .</p>\n<pre><code>public class RectShape\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/shapes/RectShape.html
RoundRectShape	A										<section class="prog__container"><p> Creates a rounded-corner rectangle. Optionally, an inset (rounded) rectangle can be included (to make a sort of "O" shape). The rounded rectangle can be drawn to a Canvas with its own draw() method, but more graphical control is available if you instead pass the RoundRectShape to a <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/ShapeDrawable.html"> ShapeDrawable </a> </code></pre> .</p>\n<pre><code>public class RoundRectShape\n</code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/shapes/RoundRectShape.html
Shape	A										<section class="prog__container"><p> Defines a generic graphical "shape." Any Shape can be drawn to a Canvas with its own draw() method, but more graphical control is available if you instead pass it to a <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/ShapeDrawable.html"> ShapeDrawable </a> </code></pre> .</p>\n<pre><code>public abstract class Shape\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/drawable/shapes/Shape.html
android.graphics.pdf	A										<section class="prog__container">This class enables generating a PDF document from native Android content. </section>	https://developer.android.com/reference/android/graphics/pdf/package-summary.html
PdfDocument	A										<section class="prog__container"><p> <p> This class enables generating a PDF document from native Android content. You create a new document and then for every page you want to add you start a page, write content to the page, and finish the page. After you are done with all pages, you write the document to an output stream and close the document. After a document is closed you should not use it anymore. Note that pages are created one by one, i.e. you can have only a single page to which you are writing at any given time. This class is not thread safe. </p>\n<pre><code>public class PdfDocument\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/pdf/PdfDocument.html
PdfDocument.Page	A										<section class="prog__container"><p> This class represents a PDF document page. It has associated a canvas on which you can draw content and is acquired by a call to <pre><code> <a href="https://developer.android.com/reference/android/graphics/pdf/PdfDocument.Page.html#getCanvas()"> getCanvas() </a> </code></pre> . It also has associated a <pre><code> <a href="https://developer.android.com/reference/android/graphics/pdf/PdfDocument.PageInfo.html"> PdfDocument.PageInfo </a> </code></pre> instance that describes its attributes. Also a page has</p>\n<pre><code>public static final class PdfDocument.Page\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/pdf/PdfDocument.Page.html
PdfDocument.PageInfo.Builder	A										<section class="prog__container"><p> Builder for creating a <pre><code> <a href="https://developer.android.com/reference/android/graphics/pdf/PdfDocument.PageInfo.html"> PdfDocument.PageInfo </a> </code></pre> .</p>\n<pre><code>public static final class PdfDocument.PageInfo.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/pdf/PdfDocument.PageInfo.Builder.html
PdfDocument.PageInfo	A										<section class="prog__container"><p> This class represents meta-data that describes a PDF <pre><code> <a href="https://developer.android.com/reference/android/graphics/pdf/PdfDocument.Page.html"> PdfDocument.Page </a> </code></pre> .</p>\n<pre><code>public static final class PdfDocument.PageInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/pdf/PdfDocument.PageInfo.html
PdfRenderer	A										<section class="prog__container"><p> <p> This class enables rendering a PDF document. This class is not thread safe. </p>\n<pre><code>public final class PdfRenderer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.html
PdfRenderer.Page	A										<section class="prog__container"><p> This class represents a PDF document page for rendering.</p>\n<pre><code>public final class PdfRenderer.Page\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page.html
Camera.Area	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/package-summary.html"> android.hardware.camera2 </a> </code></pre> API for new applications. </p>\n<pre><code>public static class Camera.Area\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.Area.html
Camera.AutoFocusCallback	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/package-summary.html"> android.hardware.camera2 </a> </code></pre> API for new applications. </p>\n<pre><code>public static interface Camera.AutoFocusCallback\n</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.AutoFocusCallback.html
Camera.AutoFocusMoveCallback	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/package-summary.html"> android.hardware.camera2 </a> </code></pre> API for new applications. </p>\n<pre><code>public static interface Camera.AutoFocusMoveCallback\n</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.AutoFocusMoveCallback.html
Camera.CameraInfo	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/package-summary.html"> android.hardware.camera2 </a> </code></pre> API for new applications. </p>\n<pre><code>public static class Camera.CameraInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.CameraInfo.html
Camera.ErrorCallback	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/package-summary.html"> android.hardware.camera2 </a> </code></pre> API for new applications. </p>\n<pre><code>public static interface Camera.ErrorCallback\n</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.ErrorCallback.html
Camera.Face	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/package-summary.html"> android.hardware.camera2 </a> </code></pre> API for new applications. </p>\n<pre><code>public static class Camera.Face\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.Face.html
Camera.FaceDetectionListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/package-summary.html"> android.hardware.camera2 </a> </code></pre> API for new applications. </p>\n<pre><code>public static interface Camera.FaceDetectionListener\n</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.FaceDetectionListener.html
Camera	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/package-summary.html"> android.hardware.camera2 </a> </code></pre> API for new applications. </p>\n<pre><code>public class Camera\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.html
Camera.OnZoomChangeListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/package-summary.html"> android.hardware.camera2 </a> </code></pre> API for new applications. </p>\n<pre><code>public static interface Camera.OnZoomChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.OnZoomChangeListener.html
Camera.Parameters	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/package-summary.html"> android.hardware.camera2 </a> </code></pre> API for new applications. </p>\n<pre><code>public class Camera.Parameters\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.Parameters.html
Camera.PictureCallback	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/package-summary.html"> android.hardware.camera2 </a> </code></pre> API for new applications. </p>\n<pre><code>public static interface Camera.PictureCallback\n</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.PictureCallback.html
Camera.PreviewCallback	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/package-summary.html"> android.hardware.camera2 </a> </code></pre> API for new applications. </p>\n<pre><code>public static interface Camera.PreviewCallback\n</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.PreviewCallback.html
Camera.ShutterCallback	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/package-summary.html"> android.hardware.camera2 </a> </code></pre> API for new applications. </p>\n<pre><code>public static interface Camera.ShutterCallback\n</code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.ShutterCallback.html
Camera.Size	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> We recommend using the new <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/package-summary.html"> android.hardware.camera2 </a> </code></pre> API for new applications. </p>\n<pre><code>public class Camera.Size\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/Camera.Size.html
ConsumerIrManager.CarrierFrequencyRange	A										<section class="prog__container"><p> Represents a range of carrier frequencies (inclusive) on which the infrared transmitter can transmit</p>\n<pre><code>public final class ConsumerIrManager.CarrierFrequencyRange\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/ConsumerIrManager.CarrierFrequencyRange.html
ConsumerIrManager	A										<section class="prog__container"><p> Class that operates consumer infrared on the device. <p> To obtain an instance of the system infrared transmitter, call <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> Context.getSystemService() </a> </code></pre> with <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#CONSUMER_IR_SERVICE"> CONSUMER_IR_SERVICE </a> </code></pre> as the argument. </p>\n<pre><code>public final class ConsumerIrManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/ConsumerIrManager.html
GeomagneticField	A										<section class="prog__container"><p> Estimates magnetic field at a given point on Earth, and in particular, to compute the magnetic declination from true north. <p> This uses the World Magnetic Model produced by the United States National Geospatial-Intelligence Agency. More details about the model can be found at <a href="http://www.ngdc.noaa.gov/geomag/WMM/DoDWMM.shtml"> http://www.ngdc.noaa.gov/geomag/WMM/DoDWMM.shtml </a> . This class currently uses WMM-2010 which is valid until 2015, but should produce acceptable results for several years after that. Future versions of Android may use a newer version of the model. </p>\n<pre><code>public class GeomagneticField\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/GeomagneticField.html
android.hardware	A										<section class="prog__container">Provides support for hardware features, such as the camera and other sensors. Be aware thatnot all Android-powered devices support all hardware features, so you should declare hardwarethat your application requires using the</section>	https://developer.android.com/reference/android/hardware/package-summary.html
Sensor	A										<section class="prog__container"><p> Class representing a sensor. Use <pre><code> <a href="https://developer.android.com/reference/android/hardware/SensorManager.html#getSensorList(int)"> getSensorList(int) </a> </code></pre> to get the list of available Sensors.</p>\n<pre><code>public final class Sensor\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/Sensor.html
SensorAdditionalInfo	A										<section class="prog__container"><p> This class represents a <pre><code> <a href="https://developer.android.com/reference/android/hardware/Sensor.html"> Sensor </a> </code></pre> additional information frame, which is reported through listener callback <pre><code> <a href="https://developer.android.com/reference/android/hardware/SensorEventCallback.html#onSensorAdditionalInfo(android.hardware.SensorAdditionalInfo)"> onSensorAdditionalInfo </a> </code></pre> .</p>\n<pre><code>public class SensorAdditionalInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/SensorAdditionalInfo.html
SensorEvent	A										<section class="prog__container"><p> This class represents a <pre><code> <a href="https://developer.android.com/reference/android/hardware/Sensor.html"> Sensor </a> </code></pre> event and holds information such as the sensor's type, the time-stamp, accuracy and of course the sensor's <pre><code> <a href="https://developer.android.com/reference/android/hardware/SensorEvent.html#values"> data </a> </code></pre> . <p> <u> Definition of the coordinate system used by the SensorEvent API. </u> </p>\n<pre><code>public class SensorEvent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/SensorEvent.html
SensorEventCallback	A										<section class="prog__container"><p> Used for receiving sensor additional information frames.</p>\n<pre><code>public abstract class SensorEventCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/SensorEventCallback.html
SensorEventListener	A										<section class="prog__container"><p> Used for receiving notifications from the SensorManager when there is new sensor data.</p>\n<pre><code>public interface SensorEventListener\n</code></pre></section>	https://developer.android.com/reference/android/hardware/SensorEventListener.html
SensorEventListener2	A										<section class="prog__container"><p> Used for receiving a notification when a flush() has been successfully completed.</p>\n<pre><code>public interface SensorEventListener2\nimplements <a href="https://developer.android.com/reference/android/hardware/SensorEventListener.html">SensorEventListener</a></code></pre></section>	https://developer.android.com/reference/android/hardware/SensorEventListener2.html
SensorListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 3. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/hardware/SensorEventListener.html"> SensorEventListener </a> </code></pre> instead. </p>\n<pre><code>public interface SensorListener\n</code></pre></section>	https://developer.android.com/reference/android/hardware/SensorListener.html
SensorManager.DynamicSensorCallback	A										<section class="prog__container"><p> Used for receiving notifications from the SensorManager when dynamic sensors are connected or disconnected.</p>\n<pre><code>public static abstract class SensorManager.DynamicSensorCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/SensorManager.DynamicSensorCallback.html
SensorManager	A										<section class="prog__container"><p> <p> SensorManager lets you access the device's <pre><code> <a href="https://developer.android.com/reference/android/hardware/Sensor.html"> sensors </a> </code></pre> . Get an instance of this class by calling <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> Context.getSystemService() </a> </code></pre> with the argument <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#SENSOR_SERVICE"> SENSOR_SERVICE </a> </code></pre> . </p>\n<pre><code>public abstract class SensorManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/SensorManager.html
TriggerEvent	A										<section class="prog__container"><p> This class represents a Trigger Event - the event associated with a Trigger Sensor. When the sensor detects a trigger event condition, such as significant motion in the case of the <pre><code> <a href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_SIGNIFICANT_MOTION"> TYPE_SIGNIFICANT_MOTION </a> </code></pre> , the <pre><code> <a href="https://developer.android.com/reference/android/hardware/TriggerEventListener.html"> TriggerEventListener </a> </code></pre> is called with the TriggerEvent. The sensor is automatically canceled after the trigger. <p> This class holds information such as the value of the sensor when the trigger happened, the timestamp along with detailed information regarding the Sensor itself. </p>\n<pre><code>public final class TriggerEvent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/TriggerEvent.html
TriggerEventListener	A										<section class="prog__container"><p> This class is the listener used to handle Trigger Sensors. Trigger Sensors are sensors that trigger an event and are automatically disabled. <pre><code> <a href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_SIGNIFICANT_MOTION"> TYPE_SIGNIFICANT_MOTION </a> </code></pre> is one such example. <p> <pre><code> <a href="https://developer.android.com/reference/android/hardware/SensorManager.html"> SensorManager </a> </code></pre> lets you access the device's <pre><code> <a href="https://developer.android.com/reference/android/hardware/Sensor.html"> sensors </a> </code></pre> . Get an instance of <pre><code> <a href="https://developer.android.com/reference/android/hardware/SensorManager.html"> SensorManager </a> </code></pre> by calling <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> Context.getSystemService() </a> </code></pre> with the argument <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#SENSOR_SERVICE"> SENSOR_SERVICE </a> </code></pre> . <p> Here's an example setup for a TriggerEventListener: <pre> class TriggerListener extends TriggerEventListener { public void onTrigger(TriggerEvent event) { // Do Work. // As it is a one shot sensor, it will be canceled automatically. // SensorManager.requestTriggerSensor(this, mSigMotion); needs to // be called again, if needed. } } public class SensorActivity extends Activity { private final SensorManager mSensorManager; private final Sensor mSigMotion; private final TriggerEventListener mListener = new TriggerEventListener(); public SensorActivity() { mSensorManager = (SensorManager)getSystemService(SENSOR_SERVICE); mSigMotion = mSensorManager.getDefaultSensor(Sensor.TYPE_SIGNIFICANT_MOTION); } protected void onResume() { super.onResume(); mSensorManager.requestTriggerSensor(mListener, mSigMotion); } protected void onPause() { super.onPause(); // Call disable to ensure that the trigger request has been canceled. mSensorManager.cancelTriggerSensor(mListener, mSigMotion); } } </pre> </p>\n<pre><code>public abstract class TriggerEventListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/TriggerEventListener.html
CameraAccessException	A										<section class="prog__container"><p> <p> <pre><code> CameraAccessException </code></pre> is thrown if a camera device could not be queried or opened by the <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraManager.html"> CameraManager </a> </code></pre> , or if the connection to an opened <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html"> CameraDevice </a> </code></pre> is no longer valid. </p>\n<pre><code>public class CameraAccessException\n</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraAccessException.html
CameraCaptureSession.CaptureCallback	A										<section class="prog__container"><p> <p> A callback object for tracking the progress of a <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CaptureRequest.html"> CaptureRequest </a> </code></pre> submitted to the camera device. </p>\n<pre><code>public static abstract class CameraCaptureSession.CaptureCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.CaptureCallback.html
CameraCaptureSession	A										<section class="prog__container"><p> A configured capture session for a <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html"> CameraDevice </a> </code></pre> , used for capturing images from the camera or reprocessing images captured from the camera in the same session previously. <p> A CameraCaptureSession is created by providing a set of target output surfaces to <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#createCaptureSession(java.util.List&lt;android.view.Surface&gt;, android.hardware.camera2.CameraCaptureSession.StateCallback, android.os.Handler)"> createCaptureSession </a> </code></pre> , or by providing an <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/params/InputConfiguration.html"> InputConfiguration </a> </code></pre> and a set of target output surfaces to <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#createReprocessableCaptureSession(android.hardware.camera2.params.InputConfiguration, java.util.List&lt;android.view.Surface&gt;, android.hardware.camera2.CameraCaptureSession.StateCallback, android.os.Handler)"> createReprocessableCaptureSession </a> </code></pre> for a reprocessable capture session. Once created, the session is active until a new session is created by the camera device, or the camera device is closed. </p>\n<pre><code>public abstract class CameraCaptureSession\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.html
CameraCaptureSession.StateCallback	A										<section class="prog__container"><p> A callback object for receiving updates about the state of a camera capture session.</p>\n<pre><code>public static abstract class CameraCaptureSession.StateCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html
CameraCharacteristics	A										<section class="prog__container"><p> <p> The properties describing a <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html"> CameraDevice </a> </code></pre> . </p>\n<pre><code>public final class CameraCharacteristics\n</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html
CameraCharacteristics.Key	A										<section class="prog__container"><p> A <pre><code> Key </code></pre> is used to do camera characteristics field lookups with <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#get(android.hardware.camera2.CameraCharacteristics.Key&lt;T&gt;)"> get(CameraCharacteristics.Key <t> ) </t> </a> </code></pre> . <p> For example, to get the stream configuration map: <pre><code> <pre> StreamConfigurationMap map = cameraCharacteristics.get( CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP); </pre> </code></pre> </p>\n<pre><code>public static final class CameraCharacteristics.Key\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.Key.html
CameraConstrainedHighSpeedCaptureSession	A										<section class="prog__container"><p> A constrained high speed capture session for a <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html"> CameraDevice </a> </code></pre> , used for capturing high speed images from the <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html"> CameraDevice </a> </code></pre> for high speed video recording use case. <p> A CameraHighSpeedCaptureSession is created by providing a set of target output surfaces to <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#createConstrainedHighSpeedCaptureSession(java.util.List&lt;android.view.Surface&gt;, android.hardware.camera2.CameraCaptureSession.StateCallback, android.os.Handler)"> createConstrainedHighSpeedCaptureSession(List <surface> , CameraCaptureSession.StateCallback, Handler) </surface> </a> </code></pre> , Once created, the session is active until a new session is created by the camera device, or the camera device is closed. </p>\n<pre><code>public abstract class CameraConstrainedHighSpeedCaptureSession\n</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraConstrainedHighSpeedCaptureSession.html
CameraDevice	A										<section class="prog__container"><p> <p> The CameraDevice class is a representation of a single camera connected to an Android device, allowing for fine-grain control of image capture and post-processing at high frame rates. </p>\n<pre><code>public abstract class CameraDevice\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html
CameraDevice.StateCallback	A										<section class="prog__container"><p> A callback objects for receiving updates about the state of a camera device. <p> A callback instance must be provided to the <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraManager.html#openCamera(java.lang.String, android.hardware.camera2.CameraDevice.StateCallback, android.os.Handler)"> openCamera(String, CameraDevice.StateCallback, Handler) </a> </code></pre> method to open a camera device. </p>\n<pre><code>public static abstract class CameraDevice.StateCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraDevice.StateCallback.html
CameraManager.AvailabilityCallback	A										<section class="prog__container"><p> A callback for camera devices becoming available or unavailable to open. <p> Cameras become available when they are no longer in use, or when a new removable camera is connected. They become unavailable when some application or service starts using a camera, or when a removable camera is disconnected. </p>\n<pre><code>public static abstract class CameraManager.AvailabilityCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraManager.AvailabilityCallback.html
CameraManager	A										<section class="prog__container"><p> <p> A system service manager for detecting, characterizing, and connecting to <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html"> CameraDevices </a> </code></pre> . </p>\n<pre><code>public final class CameraManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraManager.html
CameraManager.TorchCallback	A										<section class="prog__container"><p> A callback for camera flash torch modes becoming unavailable, disabled, or enabled. <p> The torch mode becomes unavailable when the camera device it belongs to becomes unavailable or other camera resources it needs become busy due to other higher priority camera activities. The torch mode becomes disabled when it was turned off or when the camera device it belongs to is no longer in use and other camera resources it needs are no longer busy. A camera's torch mode is turned off when an application calls <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraManager.html#setTorchMode(java.lang.String, boolean)"> setTorchMode(String, boolean) </a> </code></pre> to turn off the camera's torch mode, or when an application turns on another camera's torch mode if keeping multiple torch modes on simultaneously is not supported. The torch mode becomes enabled when it is turned on via <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraManager.html#setTorchMode(java.lang.String, boolean)"> setTorchMode(String, boolean) </a> </code></pre> . </p>\n<pre><code>public static abstract class CameraManager.TorchCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraManager.TorchCallback.html
CameraMetadata	A										<section class="prog__container"><p> The base class for camera controls and information. <p> This class defines the basic key/value map used for querying for camera characteristics or capture results, and for setting camera request parameters. </p>\n<pre><code>public abstract class CameraMetadata\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html
CaptureFailure	A										<section class="prog__container"><p> A report of failed capture for a single image capture from the image sensor. <p> CaptureFailures are produced by a <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html"> CameraDevice </a> </code></pre> if processing a <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CaptureRequest.html"> CaptureRequest </a> </code></pre> fails, either partially or fully. Use <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CaptureFailure.html#getReason()"> getReason() </a> </code></pre> to determine the specific nature of the failed capture. </p>\n<pre><code>public class CaptureFailure\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CaptureFailure.html
CaptureRequest.Builder	A										<section class="prog__container"><p> A builder for capture requests. <p> To obtain a builder instance, use the <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#createCaptureRequest(int)"> createCaptureRequest(int) </a> </code></pre> method, which initializes the request fields to one of the templates defined in <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html"> CameraDevice </a> </code></pre> . </p>\n<pre><code>public static final class CaptureRequest.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CaptureRequest.Builder.html
CaptureRequest	A										<section class="prog__container"><p> <p> An immutable package of settings and outputs needed to capture a single image from the camera device. </p>\n<pre><code>public final class CaptureRequest\n</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CaptureRequest.html
CaptureRequest.Key	A										<section class="prog__container"><p> A <pre><code> Key </code></pre> is used to do capture request field lookups with <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#get(android.hardware.camera2.CaptureResult.Key&lt;T&gt;)"> get(CaptureResult.Key <t> ) </t> </a> </code></pre> or to set fields with <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CaptureRequest.Builder.html#set(android.hardware.camera2.CaptureRequest.Key&lt;T&gt;, T)"> set(Key, Object) </a> </code></pre> . <p> For example, to set the crop rectangle for the next capture: <pre><code> <pre> Rect cropRectangle = new Rect(0, 0, 640, 480); captureRequestBuilder.set(SCALER_CROP_REGION, cropRectangle); </pre> </code></pre> </p>\n<pre><code>public static final class CaptureRequest.Key\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CaptureRequest.Key.html
CaptureResult	A										<section class="prog__container"><p> <p> The subset of the results of a single image capture from the image sensor. </p>\n<pre><code>public class CaptureResult\n</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html
CaptureResult.Key	A										<section class="prog__container"><p> A <pre><code> Key </code></pre> is used to do capture result field lookups with <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#get(android.hardware.camera2.CaptureResult.Key&lt;T&gt;)"> get(CaptureResult.Key <t> ) </t> </a> </code></pre> . <p> For example, to get the timestamp corresponding to the exposure of the first row: <pre><code> <pre> long timestamp = captureResult.get(CaptureResult.SENSOR_TIMESTAMP); </pre> </code></pre> </p>\n<pre><code>public static final class CaptureResult.Key\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/CaptureResult.Key.html
DngCreator	A										<section class="prog__container"><p> The <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/DngCreator.html"> DngCreator </a> </code></pre> class provides functions to write raw pixel data as a DNG file. <p> This class is designed to be used with the <pre><code> <a href="https://developer.android.com/reference/android/graphics/ImageFormat.html#RAW_SENSOR"> RAW_SENSOR </a> </code></pre> buffers available from <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html"> CameraDevice </a> </code></pre> , or with Bayer-type raw pixel data that is otherwise generated by an application. The DNG metadata tags will be generated from a <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html"> CaptureResult </a> </code></pre> object or set directly. </p>\n<pre><code>public final class DngCreator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/DngCreator.html
android.hardware.camera2	A										<section class="prog__container">The android.hardware.camera2 package provides an interface toindividual camera devices connected to an Android device. It replacesthe deprecated</section>	https://developer.android.com/reference/android/hardware/camera2/package-summary.html
TotalCaptureResult	A										<section class="prog__container"><p> <p> The total assembled results of a single image capture from the image sensor. </p>\n<pre><code>public final class TotalCaptureResult\n</code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/TotalCaptureResult.html
BlackLevelPattern	A										<section class="prog__container"><p> Immutable class to store a 4-element vector of integers corresponding to a 2x2 pattern of color channel offsets used for the black level offsets of each color channel.</p>\n<pre><code>public final class BlackLevelPattern\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/BlackLevelPattern.html
ColorSpaceTransform	A										<section class="prog__container"><p> Immutable class for describing a 3x3 matrix of <pre><code> <a href="https://developer.android.com/reference/android/util/Rational.html"> Rational </a> </code></pre> values in row-major order. <p> This matrix maps a transform from one color space to another. For the particular color space source and target, see the appropriate camera metadata documentation for the key that provides this value. </p>\n<pre><code>public final class ColorSpaceTransform\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/ColorSpaceTransform.html
Face	A										<section class="prog__container"><p> Describes a face detected in an image.</p>\n<pre><code>public final class Face\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/Face.html
InputConfiguration	A										<section class="prog__container"><p> Immutable class to store an input configuration that is used to create a reprocessable capture session.</p>\n<pre><code>public final class InputConfiguration\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/InputConfiguration.html
LensShadingMap	A										<section class="prog__container"><p> Immutable class for describing a <pre><code> 4 x N x M </code></pre> lens shading map of floats.</p>\n<pre><code>public final class LensShadingMap\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/LensShadingMap.html
MeteringRectangle	A										<section class="prog__container"><p> An immutable class to represent a rectangle <pre><code> (x, y, width, height) </code></pre> with an additional weight component. <p> The rectangle is defined to be inclusive of the specified coordinates. </p>\n<pre><code>public final class MeteringRectangle\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/MeteringRectangle.html
OutputConfiguration	A										<section class="prog__container"><p> A class for describing camera output, which contains a <pre><code> <a href="https://developer.android.com/reference/android/view/Surface.html"> Surface </a> </code></pre> and its specific configuration for creating capture session.</p>\n<pre><code>public final class OutputConfiguration\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/OutputConfiguration.html
android.hardware.camera2.params	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/hardware/camera2/params/package-summary.html
RggbChannelVector	A										<section class="prog__container"><p> Immutable class to store a 4-element vector of floats indexable by a bayer RAW 2x2 pixel block.</p>\n<pre><code>public final class RggbChannelVector\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/RggbChannelVector.html
StreamConfigurationMap	A										<section class="prog__container"><p> Immutable class to store the available stream <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SCALER_STREAM_CONFIGURATION_MAP"> configurations </a> </code></pre> to set up <pre><code> <a href="https://developer.android.com/reference/android/view/Surface.html"> Surfaces </a> </code></pre> for creating a <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.html"> capture session </a> </code></pre> with <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#createCaptureSession(java.util.List&lt;android.view.Surface&gt;, android.hardware.camera2.CameraCaptureSession.StateCallback, android.os.Handler)"> createCaptureSession(List <surface> , CameraCaptureSession.StateCallback, Handler) </surface> </a> </code></pre> . <!-- TODO: link to input stream configuration --> <p> This is the authoritative list for all <!-- input/ --> output formats (and sizes respectively for that format) that are supported by a camera device. </p>\n<pre><code>public final class StreamConfigurationMap\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/StreamConfigurationMap.html
TonemapCurve	A										<section class="prog__container"><p> Immutable class for describing a <pre><code> 2 x M x 3 </code></pre> tonemap curve of floats. <p> This defines red, green, and blue curves that the <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html"> CameraDevice </a> </code></pre> will use as the tonemapping/contrast/gamma curve when <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CaptureRequest.html#TONEMAP_MODE"> TONEMAP_MODE </a> </code></pre> is set to <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#TONEMAP_MODE_CONTRAST_CURVE"> TONEMAP_MODE_CONTRAST_CURVE </a> </code></pre> . </p>\n<pre><code>public final class TonemapCurve\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/camera2/params/TonemapCurve.html
DisplayManager.DisplayListener	A										<section class="prog__container"><p> Listens for changes in available display devices.</p>\n<pre><code>public static interface DisplayManager.DisplayListener\n</code></pre></section>	https://developer.android.com/reference/android/hardware/display/DisplayManager.DisplayListener.html
DisplayManager	A										<section class="prog__container"><p> Manages the properties of attached displays. <p> Get an instance of this class by calling <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> Context.getSystemService() </a> </code></pre> with the argument <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#DISPLAY_SERVICE"> DISPLAY_SERVICE </a> </code></pre> . </p>\n<pre><code>public final class DisplayManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/display/DisplayManager.html
android.hardware.display	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/hardware/display/package-summary.html
VirtualDisplay.Callback	A										<section class="prog__container"><p> Interface for receiving information about a <pre><code> <a href="https://developer.android.com/reference/android/hardware/display/VirtualDisplay.html"> VirtualDisplay </a> </code></pre> 's state changes.</p>\n<pre><code>public static abstract class VirtualDisplay.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/display/VirtualDisplay.Callback.html
VirtualDisplay	A										<section class="prog__container"><p> Represents a virtual display. The content of a virtual display is rendered to a <pre><code> <a href="https://developer.android.com/reference/android/view/Surface.html"> Surface </a> </code></pre> that you must provide to <pre><code> <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager.html#createVirtualDisplay(java.lang.String, int, int, int, android.view.Surface, int)"> createVirtualDisplay() </a> </code></pre> . <p> Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. However, you should also explicitly call <pre><code> <a href="https://developer.android.com/reference/android/hardware/display/VirtualDisplay.html#release()"> release() </a> </code></pre> when you're done with it. </p>\n<pre><code>public final class VirtualDisplay\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/display/VirtualDisplay.html
FingerprintManager.AuthenticationCallback	A										<section class="prog__container"><p> Callback structure provided to <pre><code> <a href="https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.html#authenticate(android.hardware.fingerprint.FingerprintManager.CryptoObject, android.os.CancellationSignal, int, android.hardware.fingerprint.FingerprintManager.AuthenticationCallback, android.os.Handler)"> authenticate(CryptoObject, CancellationSignal, int, AuthenticationCallback, Handler) </a> </code></pre> . Users of <pre><code> <a href="https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.html#authenticate(android.hardware.fingerprint.FingerprintManager.CryptoObject, android.os.CancellationSignal, int, android.hardware.fingerprint.FingerprintManager.AuthenticationCallback, android.os.Handler)"> authenticate(CryptoObject, CancellationSignal, int, AuthenticationCallback, Handler) </a> </code></pre> must provide an implementation of this for listening to fingerprint events.</p>\n<pre><code>public static abstract class FingerprintManager.AuthenticationCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.AuthenticationCallback.html
FingerprintManager.AuthenticationResult	A										<section class="prog__container"><p> Container for callback data from <pre><code> <a href="https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.html#authenticate(android.hardware.fingerprint.FingerprintManager.CryptoObject, android.os.CancellationSignal, int, android.hardware.fingerprint.FingerprintManager.AuthenticationCallback, android.os.Handler)"> authenticate(CryptoObject, CancellationSignal, int, AuthenticationCallback, Handler) </a> </code></pre> .</p>\n<pre><code>public static class FingerprintManager.AuthenticationResult\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.AuthenticationResult.html
FingerprintManager.CryptoObject	A										<section class="prog__container"><p> A wrapper class for the crypto objects supported by FingerprintManager. Currently the framework supports <pre><code> <a href="https://developer.android.com/reference/java/security/Signature.html"> Signature </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/javax/crypto/Cipher.html"> Cipher </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/javax/crypto/Mac.html"> Mac </a> </code></pre> objects.</p>\n<pre><code>public static final class FingerprintManager.CryptoObject\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.CryptoObject.html
FingerprintManager	A										<section class="prog__container"><p> A class that coordinates access to the fingerprint hardware. <p> Use <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> getSystemService(java.lang.String) </a> </code></pre> with argument <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#FINGERPRINT_SERVICE"> FINGERPRINT_SERVICE </a> </code></pre> to get an instance of this class. </p>\n<pre><code>public class FingerprintManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.html
android.hardware.fingerprint	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/hardware/fingerprint/package-summary.html
InputManager	A										<section class="prog__container"><p> Provides information about input devices and available key layouts. <p> Get an instance of this class by calling <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> Context.getSystemService() </a> </code></pre> with the argument <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#INPUT_SERVICE"> INPUT_SERVICE </a> </code></pre> . </p>\n<pre><code>public final class InputManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/input/InputManager.html
InputManager.InputDeviceListener	A										<section class="prog__container"><p> Listens for changes in input devices.</p>\n<pre><code>public static interface InputManager.InputDeviceListener\n</code></pre></section>	https://developer.android.com/reference/android/hardware/input/InputManager.InputDeviceListener.html
android.hardware.input	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/hardware/input/package-summary.html
android.hardware.usb	A										<section class="prog__container">Provides support to communicate with USB hardware peripherals that are connected to Android-powered devices.</section>	https://developer.android.com/reference/android/hardware/usb/package-summary.html
UsbAccessory	A										<section class="prog__container"><p> A class representing a USB accessory, which is an external hardware component that communicates with an android application over USB. The accessory is the USB host and android the device side of the USB connection. <p> When the accessory connects, it reports its manufacturer and model names, the version of the accessory, and a user visible description of the accessory to the device. The manufacturer, model and version strings are used by the USB Manager to choose an appropriate application for the accessory. The accessory may optionally provide a unique serial number and a URL to for the accessory's website to the device as well. <p> An instance of this class is sent to the application via the <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbManager.html#ACTION_USB_ACCESSORY_ATTACHED"> ACTION_USB_ACCESSORY_ATTACHED </a> </code></pre> Intent. The application can then call <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbManager.html#openAccessory(android.hardware.usb.UsbAccessory)"> openAccessory(UsbAccessory) </a> </code></pre> to open a file descriptor for reading and writing data to and from the accessory. </p>\n<pre><code>public class UsbAccessory\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/usb/UsbAccessory.html
UsbConfiguration	A										<section class="prog__container"><p> A class representing a configuration on a <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbDevice.html"> UsbDevice </a> </code></pre> . A USB configuration can have one or more interfaces, each one providing a different piece of functionality, separate from the other interfaces. An interface will have one or more <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbEndpoint.html"> UsbEndpoint </a> </code></pre> s, which are the channels by which the host transfers data with the device. </p>\n<pre><code>public class UsbConfiguration\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/usb/UsbConfiguration.html
UsbConstants	A										<section class="prog__container"><p> Contains constants for the USB protocol. These constants correspond to definitions in linux/usb/ch9.h in the linux kernel.</p>\n<pre><code>public final class UsbConstants\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/usb/UsbConstants.html
UsbDevice	A										<section class="prog__container"><p> This class represents a USB device attached to the android device with the android device acting as the USB host. Each device contains one or more <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbInterface.html"> UsbInterface </a> </code></pre> s, each of which contains a number of <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbEndpoint.html"> UsbEndpoint </a> </code></pre> s (the channels via which data is transmitted over USB). <p> This class contains information (along with <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbInterface.html"> UsbInterface </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbEndpoint.html"> UsbEndpoint </a> </code></pre> ) that describes the capabilities of the USB device. To communicate with the device, you open a <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbDeviceConnection.html"> UsbDeviceConnection </a> </code></pre> for the device and use <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbRequest.html"> UsbRequest </a> </code></pre> to send and receive data on an endpoint. <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbDeviceConnection.html#controlTransfer(int, int, int, int, byte[], int, int)"> controlTransfer(int, int, int, int, byte[], int, int) </a> </code></pre> is used for control requests on endpoint zero. </p>\n<pre><code>public class UsbDevice\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/usb/UsbDevice.html
UsbDeviceConnection	A										<section class="prog__container"><p> This class is used for sending and receiving data and control messages to a USB device. Instances of this class are created by <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbManager.html#openDevice(android.hardware.usb.UsbDevice)"> openDevice(UsbDevice) </a> </code></pre> .</p>\n<pre><code>public class UsbDeviceConnection\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/usb/UsbDeviceConnection.html
UsbEndpoint	A										<section class="prog__container"><p> A class representing an endpoint on a <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbInterface.html"> UsbInterface </a> </code></pre> . Endpoints are the channels for sending and receiving data over USB. Typically bulk endpoints are used for sending non-trivial amounts of data. Interrupt endpoints are used for sending small amounts of data, typically events, separately from the main data streams. The endpoint zero is a special endpoint for control messages sent from the host to device. Isochronous endpoints are currently unsupported.</p>\n<pre><code>public class UsbEndpoint\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/usb/UsbEndpoint.html
UsbInterface	A										<section class="prog__container"><p> A class representing an interface on a <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbDevice.html"> UsbDevice </a> </code></pre> . USB devices can have one or more interfaces, each one providing a different piece of functionality, separate from the other interfaces. An interface will have one or more <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbEndpoint.html"> UsbEndpoint </a> </code></pre> s, which are the channels by which the host transfers data with the device. </p>\n<pre><code>public class UsbInterface\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/usb/UsbInterface.html
UsbManager	A										<section class="prog__container"><p> This class allows you to access the state of USB and communicate with USB devices. Currently only host mode is supported in the public API. <p> You can obtain an instance of this class by calling <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> Context.getSystemService() </a> </code></pre> . <pre>UsbManager manager = (UsbManager) getSystemService(Context.USB_SERVICE);</pre> </p>\n<pre><code>public class UsbManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/usb/UsbManager.html
UsbRequest	A										<section class="prog__container"><p> A class representing USB request packet. This can be used for both reading and writing data to or from a <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbDeviceConnection.html"> UsbDeviceConnection </a> </code></pre> . UsbRequests can be used to transfer data on bulk and interrupt endpoints. Requests on bulk endpoints can be sent synchronously via <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbDeviceConnection.html#bulkTransfer(android.hardware.usb.UsbEndpoint, byte[], int, int)"> bulkTransfer(UsbEndpoint, byte[], int, int) </a> </code></pre> or asynchronously via <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbRequest.html#queue(java.nio.ByteBuffer, int)"> queue(ByteBuffer, int) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbDeviceConnection.html#requestWait()"> requestWait() </a> </code></pre> . Requests on interrupt endpoints are only send and received asynchronously. <p> Requests on endpoint zero are not supported by this class; use <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbDeviceConnection.html#controlTransfer(int, int, int, int, byte[], int, int)"> controlTransfer(int, int, int, int, byte[], int, int) </a> </code></pre> for endpoint zero requests instead. </p>\n<pre><code>public class UsbRequest\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/hardware/usb/UsbRequest.html
android.icu.lang	A										<section class="prog__container">Selection constants for Unicode properties. </section>	https://developer.android.com/reference/android/icu/lang/package-summary.html
UCharacter.BidiPairedBracketType	A										<section class="prog__container"><p> Bidi Paired Bracket Type constants.</p>\n<pre><code>public static interface UCharacter.BidiPairedBracketType\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.BidiPairedBracketType.html
UCharacter.DecompositionType	A										<section class="prog__container"><p> Decomposition Type constants.</p>\n<pre><code>public static interface UCharacter.DecompositionType\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.DecompositionType.html
UCharacter.EastAsianWidth	A										<section class="prog__container"><p> East Asian Width constants.</p>\n<pre><code>public static interface UCharacter.EastAsianWidth\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.EastAsianWidth.html
UCharacter.GraphemeClusterBreak	A										<section class="prog__container"><p> Grapheme Cluster Break constants.</p>\n<pre><code>public static interface UCharacter.GraphemeClusterBreak\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.GraphemeClusterBreak.html
UCharacter.HangulSyllableType	A										<section class="prog__container"><p> Hangul Syllable Type constants.</p>\n<pre><code>public static interface UCharacter.HangulSyllableType\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.HangulSyllableType.html
UCharacter	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> <a href="https://developer.android.com/reference/java/lang/Character.html"> Character </a> </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> The UCharacter class provides extensions to the <pre><code> <a href="https://developer.android.com/reference/java/lang/Character.html"> Character </a> </code></pre> class. These extensions provide support for more Unicode properties. Each ICU release supports the latest version of Unicode available at that time. <p> For some time before Java 5 added support for supplementary Unicode code points, The ICU UCharacter class and many other ICU classes already supported them. Some UCharacter methods and constants were widened slightly differently than how the Character class methods and constants were widened later. In particular, <pre><code> <a href="https://developer.android.com/reference/java/lang/Character.html#MAX_VALUE"> MAX_VALUE </a> </code></pre> is still a char with the value U+FFFF, while the <pre><code> <a href="https://developer.android.com/reference/android/icu/lang/UCharacter.html#MAX_VALUE"> MAX_VALUE </a> </code></pre> is an int with the value U+10FFFF. <p> Code points are represented in these API using ints. While it would be more convenient in Java to have a separate primitive datatype for them, ints suffice in the meantime. <p> Aside from the additions for UTF-16 support, and the updated Unicode properties, the main differences between UCharacter and Character are: <ul> <li> UCharacter is not designed to be a char wrapper and does not have APIs to which involves management of that single char. <br> These include: <ul> <li> char charValue(), <li> int compareTo(java.lang.Character, java.lang.Character), etc. </li> </li> </ul> <li> UCharacter does not include Character APIs that are deprecated, nor does it include the Java-specific character information, such as boolean isJavaIdentifierPart(char ch). <li> Character maps characters 'A' - 'Z' and 'a' - 'z' to the numeric values '10' - '35'. UCharacter also does this in digit and getNumericValue, to adhere to the java semantics of these methods. New methods unicodeDigit, and getUnicodeNumericValue do not treat the above code points as having numeric values. This is a semantic change from ICU4J 1.3.1. </li> </li> </br> </li> </ul> <p> In addition to Java compatibility functions, which calculate derived properties, this API provides low-level access to the Unicode Character Database. </p>\n<pre><code>public final class UCharacter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.html
UCharacter.JoiningGroup	A										<section class="prog__container"><p> Joining Group constants.</p>\n<pre><code>public static interface UCharacter.JoiningGroup\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.JoiningGroup.html
UCharacter.JoiningType	A										<section class="prog__container"><p> Joining Type constants.</p>\n<pre><code>public static interface UCharacter.JoiningType\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.JoiningType.html
UCharacter.LineBreak	A										<section class="prog__container"><p> Line Break constants.</p>\n<pre><code>public static interface UCharacter.LineBreak\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.LineBreak.html
UCharacter.NumericType	A										<section class="prog__container"><p> Numeric Type constants.</p>\n<pre><code>public static interface UCharacter.NumericType\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.NumericType.html
UCharacter.SentenceBreak	A										<section class="prog__container"><p> Sentence Break constants.</p>\n<pre><code>public static interface UCharacter.SentenceBreak\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.SentenceBreak.html
UCharacter.UnicodeBlock	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> <a href="https://developer.android.com/reference/java/lang/Character.UnicodeBlock.html"> Character.UnicodeBlock </a> </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. A family of character subsets representing the character blocks in the Unicode specification, generated from Unicode Data file Blocks.txt. Character blocks generally define characters used for a specific script or purpose. A character is contained by at most one Unicode block. <strong> [icu] Note: </strong> All fields named XXX_ID are specific to ICU.</p>\n<pre><code>public static final class UCharacter.UnicodeBlock\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.UnicodeBlock.html
UCharacter.WordBreak	A										<section class="prog__container"><p> Word Break constants.</p>\n<pre><code>public static interface UCharacter.WordBreak\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacter.WordBreak.html
UCharacterCategory	A										<section class="prog__container"><p> Enumerated Unicode category types from the UnicodeData.txt file. Used as return results from <a href="https://developer.android.com/reference/android/icu/lang/UCharacter.html"> UCharacter </a> Equivalent to icu's UCharCategory. Refer to <a href="http://www.unicode.org/Public/UNIDATA/UCD.html"> Unicode Consortium </a> for more information about UnicodeData.txt. <p> <em> NOTE: </em> the UCharacterCategory values are <em> not </em> compatible with those returned by java.lang.Character.getType. UCharacterCategory values match the ones used in ICU4C, while java.lang.Character type values, though similar, skip the value 17. </p>\n<pre><code>public final class UCharacterCategory\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacterCategory.html
UCharacterDirection	A										<section class="prog__container"><p> Enumerated Unicode character linguistic direction constants. Used as return results from <a href="https://developer.android.com/reference/android/icu/lang/UCharacter.html"> UCharacter </a> <p> This class is not subclassable </p>\n<pre><code>public final class UCharacterDirection\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacterDirection.html
UCharacterEnums.ECharacterCategory	A										<section class="prog__container"><p> 'Enum' for the CharacterCategory constants. These constants are compatible in name <b> but not in value </b> with those defined in <pre><code> <a href="https://developer.android.com/reference/java/lang/Character.html"> Character </a> </code></pre> .</p>\n<pre><code>public static interface UCharacterEnums.ECharacterCategory\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterCategory.html
UCharacterEnums.ECharacterDirection	A										<section class="prog__container"><p> 'Enum' for the CharacterDirection constants. Some constants are compatible in name <b> but not in value </b> with those defined in <pre><code> <a href="https://developer.android.com/reference/java/lang/Character.html"> Character </a> </code></pre> .</p>\n<pre><code>public static interface UCharacterEnums.ECharacterDirection\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacterEnums.ECharacterDirection.html
UCharacterEnums	A										<section class="prog__container"><p> A container for the different 'enumerated types' used by UCharacter.</p>\n<pre><code>public class UCharacterEnums\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/lang/UCharacterEnums.html
UProperty	A										<section class="prog__container"><p> <p> Selection constants for Unicode properties. <p> These constants are used in functions like UCharacter.hasBinaryProperty(int) to select one of the Unicode properties. <p> The properties APIs are intended to reflect Unicode properties as defined in the Unicode Character Database (UCD) and Unicode Technical Reports (UTR). <p> For details about the properties see <a href="http://www.unicode.org"> http://www.unicode.org </a> . <p> For names of Unicode properties see the UCD file PropertyAliases.txt. <p> Important: If ICU is built with UCD files from Unicode versions below 3.2, then properties marked with "new" are not or not fully available. Check UCharacter.getUnicodeVersion() to be sure. </p>\n<pre><code>public interface UProperty\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UProperty.html
UProperty.NameChoice	A										<section class="prog__container"><p> Selector constants for UCharacter.getPropertyName() and UCharacter.getPropertyValueName(). These selectors are used to choose which name is returned for a given property or value. All properties and values have a long name. Most have a short name, but some do not. Unicode allows for additional names, beyond the long and short name, which would be indicated by LONG + i, where i=1, 2,...</p>\n<pre><code>public static interface UProperty.NameChoice\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UProperty.NameChoice.html
UScript	A										<section class="prog__container"><p> Constants for ISO 15924 script codes, and related functions. <p> The current set of script code constants supports at least all scripts that are encoded in the version of Unicode which ICU currently supports. The names of the constants are usually derived from the Unicode script property value aliases. See UAX #24 Unicode Script Property (http://www.unicode.org/reports/tr24/) and http://www.unicode.org/Public/UCD/latest/ucd/PropertyValueAliases.txt . <p> Starting with ICU 3.6, constants for most ISO 15924 script codes are included, for use with language tags, CLDR data, and similar. Some of those codes are not used in the Unicode Character Database (UCD). For example, there are no characters that have a UCD script property value of Hans or Hant. All Han ideographs have the Hani script property value in Unicode. <p> Private-use codes Qaaa..Qabx are not included. <p> Starting with ICU 55, script codes are only added when their scripts have been or will certainly be encoded in Unicode, and have been assigned Unicode script property value aliases, to ensure that their script names are stable and match the names of the constants. Script codes like Latf and Aran that are not subject to separate encoding may be added at any time. </p>\n<pre><code>public final class UScript\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/lang/UScript.html
UScript.ScriptUsage	A										<section class="prog__container"><p> Script usage constants. See UAX #31 Unicode Identifier and Pattern Syntax. http://www.unicode.org/reports/tr31/#Table_Candidate_Characters_for_Exclusion_from_Identifiers</p>\n<pre><code>public static final enum UScript.ScriptUsage\n</code></pre></section>	https://developer.android.com/reference/android/icu/lang/UScript.ScriptUsage.html
BigDecimal	A										<section class="prog__container"><p> The <pre><code> BigDecimal </code></pre> class implements immutable arbitrary-precision decimal numbers. The methods of the <pre><code> BigDecimal </code></pre> class provide operations for fixed and floating point arithmetic, comparison, format conversions, and hashing. <p> As the numbers are decimal, there is an exact correspondence between an instance of a <pre><code> BigDecimal </code></pre> object and its <pre><code> String </code></pre> representation; the <pre><code> BigDecimal </code></pre> class provides direct conversions to and from <pre><code> String </code></pre> and character array ( <pre><code> char[] </code></pre> ) objects, as well as conversions to and from the Java primitive types (which may not be exact) and <pre><code> BigInteger </code></pre> . <p> In the descriptions of constructors and methods in this documentation, the value of a <pre><code> BigDecimal </code></pre> number object is shown as the result of invoking the <pre><code> toString() </code></pre> method on the object. The internal representation of a decimal number is neither defined nor exposed, and is not permitted to affect the result of any operation. <p> The floating point arithmetic provided by this class is defined by the ANSI X3.274-1996 standard, and is also documented at <pre><code> http://www2.hursley.ibm.com/decimal </code></pre> <br> <i> [This URL will change.] </i> </p>\n<pre><code>public class BigDecimal\n</code></pre></section>	https://developer.android.com/reference/android/icu/math/BigDecimal.html
MathContext	A										<section class="prog__container"><p> The <pre><code> MathContext </code></pre> immutable class encapsulates the settings understood by the operator methods of the <pre><code> <a href="https://developer.android.com/reference/android/icu/math/BigDecimal.html"> BigDecimal </a> </code></pre> class (and potentially other classes). Operator methods are those that effect an operation on a number or a pair of numbers. <p> The settings, which are not base-dependent, comprise: <ol> <li> <pre><code> digits </code></pre> : the number of digits (precision) to be used for an operation <li> <pre><code> form </code></pre> : the form of any exponent that results from the operation <li> <pre><code> lostDigits </code></pre> : whether checking for lost digits is enabled <li> <pre><code> roundingMode </code></pre> : the algorithm to be used for rounding. </li> </li> </li> </li> </ol> <p> When provided, a <pre><code> MathContext </code></pre> object supplies the settings for an operation directly. <p> When <pre><code> MathContext.DEFAULT </code></pre> is provided for a <pre><code> MathContext </code></pre> parameter then the default settings are used ( <pre><code> 9, SCIENTIFIC, false, ROUND_HALF_UP </code></pre> ). <p> In the <pre><code> BigDecimal </code></pre> class, all methods which accept a <pre><code> MathContext </code></pre> object defaults) also have a version of the method which does not accept a MathContext parameter. These versions carry out unlimited precision fixed point arithmetic (as though the settings were ( <pre><code> 0, PLAIN, false, ROUND_HALF_UP </code></pre> ). <p> The instance variables are shared with default access (so they are directly accessible to the <pre><code> BigDecimal </code></pre> class), but must never be changed. <p> The rounding mode constants have the same names and values as the constants of the same name in <pre><code> java.math.BigDecimal </code></pre> , to maintain compatibility with earlier versions of <pre><code> BigDecimal </code></pre> . </p>\n<pre><code>public final class MathContext\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/math/MathContext.html
android.icu.math	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/icu/math/package-summary.html
AlphabeticIndex.Bucket	A										<section class="prog__container"><p> An index "bucket" with a label string and type. It is referenced by <pre><code> <a href="https://developer.android.com/reference/android/icu/text/AlphabeticIndex.html#getBucketIndex(java.lang.CharSequence)"> getBucketIndex(CharSequence) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/icu/text/AlphabeticIndex.ImmutableIndex.html#getBucketIndex(java.lang.CharSequence)"> getBucketIndex(CharSequence) </a> </code></pre> , returned by <pre><code> <a href="https://developer.android.com/reference/android/icu/text/AlphabeticIndex.ImmutableIndex.html#getBucket(int)"> getBucket(int) </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/icu/text/AlphabeticIndex.html#addRecord(java.lang.CharSequence, V)"> addRecord(CharSequence, Object) </a> </code></pre> adds a record into a bucket according to the record's name.</p>\n<pre><code>public static class AlphabeticIndex.Bucket\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/AlphabeticIndex.Bucket.html
AlphabeticIndex.Bucket.LabelType	A										<section class="prog__container"><p> Type of the label</p>\n<pre><code>public static final enum AlphabeticIndex.Bucket.LabelType\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/AlphabeticIndex.Bucket.LabelType.html
AlphabeticIndex	A										<section class="prog__container"><p> AlphabeticIndex supports the creation of a UI index appropriate for a given language. It can support either direct use, or use with a client that doesn't support localized collation. The following is an example of what an index might look like in a UI: <pre> <b>... A B C D E F G H I J K L M N O P Q R S T U V W X Y Z ...</b> <b>A</b> Addison Albertson Azensky <b>B</b> Baecker ... </pre> The class can generate a list of labels for use as a UI "index", that is, a list of clickable characters (or character sequences) that allow the user to see a segment (bucket) of a larger "target" list. That is, each label corresponds to a bucket in the target list, where everything in the bucket is greater than or equal to the character (according to the locale's collation). Strings can be added to the index; they will be in sorted order in the right bucket. <p> The class also supports having buckets for strings before the first (underflow), after the last (overflow), and between scripts (inflow). For example, if the index is constructed with labels for Russian and English, Greek characters would fall into an inflow bucket between the other two scripts. <p> <em> Note: </em> If you expect to have a lot of ASCII or Latin characters as well as characters from the user's language, then it is a good idea to call addLabels(ULocale.English). </p>\n<pre><code>public final class AlphabeticIndex\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/AlphabeticIndex.html
AlphabeticIndex.ImmutableIndex	A										<section class="prog__container"><p> Immutable, thread-safe version of <pre><code> <a href="https://developer.android.com/reference/android/icu/text/AlphabeticIndex.html"> AlphabeticIndex </a> </code></pre> . This class provides thread-safe methods for bucketing, and random access to buckets and their properties, but does not offer adding records to the index.</p>\n<pre><code>public static final class AlphabeticIndex.ImmutableIndex\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/AlphabeticIndex.ImmutableIndex.html
AlphabeticIndex.Record	A										<section class="prog__container"><p> A (name, data) pair, to be sorted by name into one of the index buckets. The user data is not used by the index implementation.</p>\n<pre><code>public static class AlphabeticIndex.Record\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/AlphabeticIndex.Record.html
BreakIterator	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> <a href="https://developer.android.com/reference/java/text/BreakIterator.html"> BreakIterator </a> </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> A class that locates boundaries in text. This class defines a protocol for objects that break up a piece of natural-language text according to a set of criteria. Instances or subclasses of BreakIterator can be provided, for example, to break a piece of text into words, sentences, or logical characters according to the conventions of some language or group of languages. We provide five built-in types of BreakIterator: <ul> <li> getTitleInstance() returns a BreakIterator that locates boundaries between title breaks. <li> getSentenceInstance() returns a BreakIterator that locates boundaries between sentences. This is useful for triple-click selection, for example. <li> getWordInstance() returns a BreakIterator that locates boundaries between words. This is useful for double-click selection or "find whole words" searches. This type of BreakIterator makes sure there is a boundary position at the beginning and end of each legal word. (Numbers count as words, too.) Whitespace and punctuation are kept separate from real words. <li> getLineInstance() returns a BreakIterator that locates positions where it is legal for a text editor to wrap lines. This is similar to word breaking, but not the same: punctuation and whitespace are generally kept with words (you don't want a line to start with whitespace, for example), and some special characters can force a position to be considered a line-break position or prevent a position from being a line-break position. <li> getCharacterInstance() returns a BreakIterator that locates boundaries between logical characters. Because of the structure of the Unicode encoding, a logical character may be stored internally as more than one Unicode code point. (A with an umlaut may be stored as an a followed by a separate combining umlaut character, for example, but the user still thinks of it as one character.) This iterator allows various processes (especially text editors) to treat as characters the units of text that a user would think of as characters, rather than the units of text that the computer sees as "characters". </li> </li> </li> </li> </li> </ul> The text boundary positions are found according to the rules described in Unicode Standard Annex #29, Text Boundaries, and Unicode Standard Annex #14, Line Breaking Properties. These are available at http://www.unicode.org/reports/tr14/ and http://www.unicode.org/reports/tr29/. <p> BreakIterator's interface follows an "iterator" model (hence the name), meaning it has a concept of a "current position" and methods like first(), last(), next(), and previous() that update the current position. All BreakIterators uphold the following invariants: <ul> <li> The beginning and end of the text are always treated as boundary positions. <li> The current position of the iterator is always a boundary position (random- access methods move the iterator to the nearest boundary position before or after the specified position, not _to_ the specified position). <li> DONE is used as a flag to indicate when iteration has stopped. DONE is only returned when the current position is the end of the text and the user calls next(), or when the current position is the beginning of the text and the user calls previous(). <li> Break positions are numbered by the positions of the characters that follow them. Thus, under normal circumstances, the position before the first character is 0, the position after the first character is 1, and the position after the last character is 1 plus the length of the string. <li> The client can change the position of an iterator, or the text it analyzes, at will, but cannot change the behavior. If the user wants different behavior, he must instantiate a new iterator. </li> </li> </li> </li> </li> </ul> BreakIterator accesses the text it analyzes through a CharacterIterator, which makes it possible to use BreakIterator to analyze text in any text-storage vehicle that provides a CharacterIterator interface. <b> Note: </b> Some types of BreakIterator can take a long time to create, and instances of BreakIterator are not currently cached by the system. For optimal performance, keep instances of BreakIterator around as long as makes sense. For example, when word-wrapping a document, don't create and destroy a new BreakIterator for each line. Create one break iterator for the whole document (or whatever stretch of text you're wrapping) and use it to do the whole job of wrapping the text. <p> <strong> Examples </strong> : <p> Creating and using text boundaries <blockquote> <pre> public static void main(String args[]) { if (args.length == 1) { String stringToExamine = args[0]; //print each word in order BreakIterator boundary = BreakIterator.getWordInstance(); boundary.setText(stringToExamine); printEachForward(boundary, stringToExamine); //print each sentence in reverse order boundary = BreakIterator.getSentenceInstance(Locale.US); boundary.setText(stringToExamine); printEachBackward(boundary, stringToExamine); printFirst(boundary, stringToExamine); printLast(boundary, stringToExamine); } } </pre> </blockquote> Print each element in order <blockquote> <pre> public static void printEachForward(BreakIterator boundary, String source) { int start = boundary.first(); for (int end = boundary.next(); end != BreakIterator.DONE; start = end, end = boundary.next()) { System.out.println(source.substring(start,end)); } } </pre> </blockquote> Print each element in reverse order <blockquote> <pre> public static void printEachBackward(BreakIterator boundary, String source) { int end = boundary.last(); for (int start = boundary.previous(); start != BreakIterator.DONE; end = start, start = boundary.previous()) { System.out.println(source.substring(start,end)); } } </pre> </blockquote> Print first element <blockquote> <pre> public static void printFirst(BreakIterator boundary, String source) { int start = boundary.first(); int end = boundary.next(); System.out.println(source.substring(start,end)); } </pre> </blockquote> Print last element <blockquote> <pre> public static void printLast(BreakIterator boundary, String source) { int end = boundary.last(); int start = boundary.previous(); System.out.println(source.substring(start,end)); } </pre> </blockquote> Print the element at a specified position <blockquote> <pre> public static void printAt(BreakIterator boundary, int pos, String source) { int end = boundary.following(pos); int start = boundary.previous(); System.out.println(source.substring(start,end)); } </pre> </blockquote> Find the next word <blockquote> <pre> public static int nextWordStartAfter(int pos, String text) { BreakIterator wb = BreakIterator.getWordInstance(); wb.setText(text); int last = wb.following(pos); int current = wb.next(); while (current != BreakIterator.DONE) { for (int p = last; p &lt; current; p++) { if (Character.isLetter(text.charAt(p))) return last; } last = current; current = wb.next(); } return BreakIterator.DONE; } </pre> (The iterator returned by BreakIterator.getWordInstance() is unique in that the break positions it returns don't represent both the start and end of the thing being iterated over. That is, a sentence-break iterator returns breaks that each represent the end of one sentence and the beginning of the next. With the word-break iterator, the characters between two boundaries might be a word, or they might be the punctuation or whitespace between two words. The above code uses a simple heuristic to determine which boundary is the beginning of a word: If the characters between this boundary and the next boundary include at least one letter (this can be an alphabetical letter, a CJK ideograph, a Hangul syllable, a Kana character, etc.), then the text between this boundary and the next is a word; otherwise, it's the material between words.) </blockquote> </p>\n<pre><code>public abstract class BreakIterator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/BreakIterator.html
CollationElementIterator	A										<section class="prog__container"><p> <pre><code> CollationElementIterator </code></pre> is an iterator created by a RuleBasedCollator to walk through a string. The return result of each iteration is a 32-bit collation element (CE) that defines the ordering priority of the next character or sequence of characters in the source string. <p> For illustration, consider the following in Slovak and in traditional Spanish collation: <blockquote> <pre> "ca" -&gt; the first collation element is CE('c') and the second collation element is CE('a'). "cha" -&gt; the first collation element is CE('ch') and the second collation element is CE('a'). </pre> </blockquote> And in German phonebook collation, <blockquote> <pre> Since the character 'æ' is a composed character of 'a' and 'e', the iterator returns two collation elements for the single character 'æ' "æb" -&gt; the first collation element is collation_element('a'), the second collation element is collation_element('e'), and the third collation element is collation_element('b'). </pre> </blockquote> <p> For collation ordering comparison, the collation element results can not be compared simply by using basic arithmetic operators, e.g. &lt;, == or &gt;, further processing has to be done. Details can be found in the ICU <a href="http://userguide.icu-project.org/collation/architecture"> User Guide </a> . An example of using the CollationElementIterator for collation ordering comparison is the class <pre><code> <a href="https://developer.android.com/reference/android/icu/text/StringSearch.html"> StringSearch </a> </code></pre> . <p> To construct a CollationElementIterator object, users call the method getCollationElementIterator() on a RuleBasedCollator that defines the desired sorting order. <p> Example: <blockquote> <pre> String testString = "This is a test"; RuleBasedCollator rbc = new RuleBasedCollator("&amp;a&lt;b"); CollationElementIterator iterator = rbc.getCollationElementIterator(testString); int primaryOrder = iterator.IGNORABLE; while (primaryOrder != iterator.NULLORDER) { int order = iterator.next(); if (order != iterator.IGNORABLE &amp;&amp; order != iterator.NULLORDER) { // order is valid, not ignorable and we have not passed the end // of the iteration, we do something primaryOrder = CollationElementIterator.primaryOrder(order); System.out.println("Next primary order 0x" + Integer.toHexString(primaryOrder)); } } </pre> </blockquote> <p> The method next() returns the collation order of the next character based on the comparison level of the collator. The method previous() returns the collation order of the previous character based on the comparison level of the collator. The Collation Element Iterator moves only in one direction between calls to reset(), setOffset(), or setText(). That is, next() and previous() can not be inter-used. Whenever previous() is to be called after next() or vice versa, reset(), setOffset() or setText() has to be called first to reset the status, shifting current position to either the end or the start of the string (reset() or setText()), or the specified position (setOffset()). Hence at the next call of next() or previous(), the first or last collation order, or collation order at the specified position will be returned. If a change of direction is done without one of these calls, the result is undefined. <p> This class is not subclassable. </p>\n<pre><code>public final class CollationElementIterator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/CollationElementIterator.html
CollationKey.BoundMode	A										<section class="prog__container"><p> Options that used in the API CollationKey.getBound() for getting a CollationKey based on the bound mode requested.</p>\n<pre><code>public static final class CollationKey.BoundMode\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/CollationKey.BoundMode.html
CollationKey	A										<section class="prog__container"><p> A <pre><code> CollationKey </code></pre> represents a <pre><code> String </code></pre> under the rules of a specific <pre><code> Collator </code></pre> object. Comparing two <pre><code> CollationKey </code></pre> s returns the relative order of the <pre><code> String </code></pre> s they represent. <p> Since the rule set of <pre><code> Collator </code></pre> s can differ, the sort orders of the same string under two different <pre><code> Collator </code></pre> s might differ. Hence comparing <pre><code> CollationKey </code></pre> s generated from different <pre><code> Collator </code></pre> s can give incorrect results. <p> Both the method <pre><code> CollationKey.compareTo(CollationKey) </code></pre> and the method <pre><code> Collator.compare(String, String) </code></pre> compare two strings and returns their relative order. The performance characteristics of these two approaches can differ. Note that collation keys are often less efficient than simply doing comparison. For more details, see the ICU User Guide. <p> During the construction of a <pre><code> CollationKey </code></pre> , the entire source string is examined and processed into a series of bits terminated by a null, that are stored in the <pre><code> CollationKey </code></pre> . When <pre><code> CollationKey.compareTo(CollationKey) </code></pre> executes, it performs bitwise comparison on the bit sequences. This can incurs startup cost when creating the <pre><code> CollationKey </code></pre> , but once the key is created, binary comparisons are fast. This approach is recommended when the same strings are to be compared over and over again. <p> On the other hand, implementations of <pre><code> Collator.compare(String, String) </code></pre> can examine and process the strings only until the first characters differing in order. This approach is recommended if the strings are to be compared only once. </p>\n<pre><code>public final class CollationKey\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/CollationKey.html
Collator	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> <a href="https://developer.android.com/reference/java/text/Collator.html"> Collator </a> </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> Collator performs locale-sensitive string comparison. A concrete subclass, RuleBasedCollator, allows customization of the collation ordering by the use of rule sets. <p> A Collator is thread-safe only when frozen. See <pre><code> <a href="https://developer.android.com/reference/android/icu/text/Collator.html#isFrozen()"> isFrozen() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/icu/util/Freezable.html"> Freezable </a> </code></pre> . <p> Following the <a href="http://www.unicode.org"> Unicode Consortium </a> 's specifications for the <a href="http://www.unicode.org/unicode/reports/tr10/"> Unicode Collation Algorithm (UCA) </a> , there are 5 different levels of strength used in comparisons: <ul> <li> PRIMARY strength: Typically, this is used to denote differences between base characters (for example, "a" &lt; "b"). It is the strongest difference. For example, dictionaries are divided into different sections by base character. <li> SECONDARY strength: Accents in the characters are considered secondary differences (for example, "as" &lt; "às" &lt; "at"). Other differences between letters can also be considered secondary differences, depending on the language. A secondary difference is ignored when there is a primary difference anywhere in the strings. <li> TERTIARY strength: Upper and lower case differences in characters are distinguished at tertiary strength (for example, "ao" &lt; "Ao" &lt; "aò"). In addition, a variant of a letter differs from the base form on the tertiary strength (such as "A" and "Ⓐ"). Another example is the difference between large and small Kana. A tertiary difference is ignored when there is a primary or secondary difference anywhere in the strings. <li> QUATERNARY strength: When punctuation is ignored (see <a href="http://userguide.icu-project.org/collation/concepts#TOC-Ignoring-Punctuation"> Ignoring Punctuations in the User Guide </a> ) at PRIMARY to TERTIARY strength, an additional strength level can be used to distinguish words with and without punctuation (for example, "ab" &lt; "a-b" &lt; "aB"). This difference is ignored when there is a PRIMARY, SECONDARY or TERTIARY difference. The QUATERNARY strength should only be used if ignoring punctuation is required. <li> IDENTICAL strength: When all other strengths are equal, the IDENTICAL strength is used as a tiebreaker. The Unicode code point values of the NFD form of each string are compared, just in case there is no difference. For example, Hebrew cantellation marks are only distinguished at this strength. This strength should be used sparingly, as only code point value differences between two strings is an extremely rare occurrence. Using this strength substantially decreases the performance for both comparison and collation key generation APIs. This strength also increases the size of the collation key. </li> </li> </li> </li> </li> </ul> Unlike the JDK, ICU4J's Collator deals only with 2 decomposition modes, the canonical decomposition mode and one that does not use any decomposition. The compatibility decomposition mode, java.text.Collator.FULL_DECOMPOSITION is not supported here. If the canonical decomposition mode is set, the Collator handles un-normalized text properly, producing the same results as if the text were normalized in NFD. If canonical decomposition is turned off, it is the user's responsibility to ensure that all text is already in the appropriate form before performing a comparison or before getting a CollationKey. <p> For more information about the collation service see the <a href="http://userguide.icu-project.org/collation"> User Guide </a> . <p> Examples of use <pre> // Get the Collator for US English and set its strength to PRIMARY Collator usCollator = Collator.getInstance(Locale.US); usCollator.setStrength(Collator.PRIMARY); if (usCollator.compare("abc", "ABC") == 0) { System.out.println("Strings are equivalent"); } The following example shows how to compare two strings using the Collator for the default locale. // Compare two strings in the default locale Collator myCollator = Collator.getInstance(); myCollator.setDecomposition(NO_DECOMPOSITION); if (myCollator.compare("à\u0325", "a\u0325̀") != 0) { System.out.println("à\u0325 is not equals to a\u0325̀ without decomposition"); myCollator.setDecomposition(CANONICAL_DECOMPOSITION); if (myCollator.compare("à\u0325", "a\u0325̀") != 0) { System.out.println("Error: à\u0325 should be equals to a\u0325̀ with decomposition"); } else { System.out.println("à\u0325 is equals to a\u0325̀ with decomposition"); } } else { System.out.println("Error: à\u0325 should be not equals to a\u0325̀ without decomposition"); } </pre> </p>\n<pre><code>public abstract class Collator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/Collator.html
Collator.ReorderCodes	A										<section class="prog__container"><p> Reordering codes for non-script groups that can be reordered under collation.</p>\n<pre><code>public static interface Collator.ReorderCodes\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/Collator.ReorderCodes.html
CompactDecimalFormat.CompactStyle	A										<section class="prog__container"><p> Style parameter for CompactDecimalFormat.</p>\n<pre><code>public static final enum CompactDecimalFormat.CompactStyle\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/CompactDecimalFormat.CompactStyle.html
CompactDecimalFormat	A										<section class="prog__container"><p> The CompactDecimalFormat produces abbreviated numbers, suitable for display in environments will limited real estate. For example, 'Hits: 1.2B' instead of 'Hits: 1,200,000,000'. The format will be appropriate for the given language, such as "1,2 Mrd." for German. <p> For numbers under 1000 trillion (under 10^15, such as 123,456,789,012,345), the result will be short for supported languages. However, the result may sometimes exceed 7 characters, such as when there are combining marks or thin characters. In such cases, the visual width in fonts should still be short. <p> By default, there are 2 significant digits. After creation, if more than three significant digits are set (with setMaximumSignificantDigits), or if a fixed number of digits are set (with setMaximumIntegerDigits or setMaximumFractionDigits), then result may be wider. <p> At this time, negative numbers and parsing are not supported, and will produce an UnsupportedOperationException. Resetting the pattern prefixes or suffixes is not supported; the method calls are ignored. <p> Note that important methods, like setting the number of decimals, will be moved up from DecimalFormat to NumberFormat. </p>\n<pre><code>public class CompactDecimalFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/CompactDecimalFormat.html
CurrencyPluralInfo	A										<section class="prog__container"><p> This class represents the information needed by DecimalFormat to format currency plural, such as "3.00 US dollars" or "1.00 US dollar". DecimalFormat creates for itself an instance of CurrencyPluralInfo from its locale data. If you need to change any of these symbols, you can get the CurrencyPluralInfo object from your DecimalFormat and modify it. Following are the information needed for currency plural format and parse: locale information, plural rule of the locale, currency plural pattern of the locale.</p>\n<pre><code>public class CurrencyPluralInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/CurrencyPluralInfo.html
DateFormat.BooleanAttribute	A										<section class="prog__container"><p> boolean attributes</p>\n<pre><code>public static final enum DateFormat.BooleanAttribute\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/DateFormat.BooleanAttribute.html
DateFormat.Field	A										<section class="prog__container"><p> The instances of this inner class are used as attribute keys and values in AttributedCharacterIterator that DateFormat.formatToCharacterIterator() method returns. <p> There is no public constructor to this class, the only instances are the constants defined here. <p> </p>\n<pre><code>public static class DateFormat.Field\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/DateFormat.Field.html
DateFormat	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> <a href="https://developer.android.com/reference/java/text/DateFormat.html"> DateFormat </a> </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> DateFormat is an abstract class for date/time formatting subclasses which formats and parses dates or time in a language-independent manner. The date/time formatting subclass, such as SimpleDateFormat, allows for formatting (i.e., date -&gt; text), parsing (text -&gt; date), and normalization. The date is represented as a <pre><code> Date </code></pre> object or as the milliseconds since January 1, 1970, 00:00:00 GMT. <p> DateFormat helps you to format and parse dates for any locale. Your code can be completely independent of the locale conventions for months, days of the week, or even the calendar format: lunar vs. solar. It provides many class methods for obtaining default date/time formatters based on the default for a given locale and a number of formatting styles or arbitrary "skeletons". <ol> <li> The formatting styles include FULL, LONG, MEDIUM, and SHORT. More detail and examples of using these styles are provided in the method descriptions. <li> The formatting styles only cover a fraction of the necessary usage. You often need to have just certain combinations of fields, like Month and Year, but have it to be formatted appropriate to a given locale. This is done using the (misnamed) getPatternInstance() method, supplying a skeleton. There are a number of constants that have common pre-defined skeletons, such as <pre><code> <a href="https://developer.android.com/reference/android/icu/text/DateFormat.html#MINUTE_SECOND"> MINUTE_SECOND </a> </code></pre> for something like "13:45" or <pre><code> <a href="https://developer.android.com/reference/android/icu/text/DateFormat.html#YEAR_ABBR_MONTH"> YEAR_ABBR_MONTH </a> </code></pre> for something like "Sept 2012". </li> </li> </ol> <p> To format a date for the current Locale, use one of the static factory methods: <pre> myString = DateFormat.getDateInstance().format(myDate); myString = DateFormat.getPatternInstance(DateFormat.YEAR_ABBR_MONTH).format(myDate); </pre> <p> If you are formatting multiple numbers, it is more efficient to get the format and use it multiple times so that the system doesn't have to fetch the information about the local language and country conventions multiple times. <pre> DateFormat df = DateFormat.getDateInstance(); for (int i = 0; i &lt; a.length; ++i) { output.println(df.format(myDate[i]) + "; "); } </pre> <p> To format a date for a different Locale, specify it in the call to getDateInstance(). <pre> DateFormat df = DateFormat.getDateInstance(DateFormat.LONG, Locale.FRANCE); </pre> <p> You can use a DateFormat to parse also. <pre> myDate = df.parse(myString); </pre> <p> There are many static factory methods available. Use getDateInstance to get the normal date format for that country. Use getTimeInstance to get the time format for that country. Use getDateTimeInstance to get a date and time format. You can pass in different options to these factory methods to control the length of the result; from SHORT to MEDIUM to LONG to FULL. The exact result depends on the locale, but generally: <ul> <li> SHORT is completely numeric, such as 12.13.52 or 3:30pm <li> MEDIUM is longer, such as Jan 12, 1952 <li> LONG is longer, such as January 12, 1952 or 3:30:32pm <li> FULL is pretty completely specified, such as Tuesday, April 12, 1952 AD or 3:30:42pm PST. </li> </li> </li> </li> </ul> <p> Use getPatternInstance to format with a skeleton. Typically this is with a predefined skeleton, like <pre><code> <a href="https://developer.android.com/reference/android/icu/text/DateFormat.html#YEAR_ABBR_MONTH"> YEAR_ABBR_MONTH </a> </code></pre> for something like "Sept 2012". If you don't want to use one of the predefined skeletons, you can supply your own. The skeletons are like the patterns in SimpleDateFormat, except they: <ol> <li> only keep the field pattern letter and ignore all other parts in a pattern, such as space, punctuation, and string literals. <li> are independent of the order of fields. <li> ignore certain differences in the field's pattern letter length: <ol> <li> For those non-digit calendar fields, the pattern letter length is important, such as MMM, MMMM, and MMMMM; E and EEEE, and the field's pattern letter length is honored. <li> For the digit calendar fields, such as M or MM, d or dd, yy or yyyy, the field pattern length is ignored and the best match, which is defined in date time patterns, will be returned without honor the field pattern letter length in skeleton. </li> </li> </ol> </li> </li> </li> </ol> <p> You can also set the time zone on the format if you wish. If you want even more control over the format or parsing, (or want to give your users more control), you can try casting the DateFormat you get from the factory methods to a SimpleDateFormat. This will work for the majority of countries; just remember to put it in a try block in case you encounter an unusual one. <p> You can also use forms of the parse and format methods with ParsePosition and FieldPosition to allow you to <ul> <li> progressively parse through pieces of a string. <li> align any particular field, or find out where it is for selection on the screen. </li> </li> </ul> </p>\n<pre><code>public abstract class DateFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/DateFormat.html
DateFormatSymbols	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> <a href="https://developer.android.com/reference/java/text/DateFormatSymbols.html"> DateFormatSymbols </a> </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> <pre><code> DateFormatSymbols </code></pre> is a public class for encapsulating localizable date-time formatting data, such as the names of the months, the names of the days of the week, and the time zone data. <pre><code> DateFormat </code></pre> and <pre><code> SimpleDateFormat </code></pre> both use <pre><code> DateFormatSymbols </code></pre> to encapsulate this information. <p> Typically you shouldn't use <pre><code> DateFormatSymbols </code></pre> directly. Rather, you are encouraged to create a date-time formatter with the <pre><code> DateFormat </code></pre> class's factory methods: <pre><code> getTimeInstance </code></pre> , <pre><code> getDateInstance </code></pre> , or <pre><code> getDateTimeInstance </code></pre> . These methods automatically create a <pre><code> DateFormatSymbols </code></pre> for the formatter so that you don't have to. After the formatter is created, you may modify its format pattern using the <pre><code> setPattern </code></pre> method. For more information about creating formatters using <pre><code> DateFormat </code></pre> 's factory methods, see <pre><code> <a href="https://developer.android.com/reference/android/icu/text/DateFormat.html"> DateFormat </a> </code></pre> . <p> If you decide to create a date-time formatter with a specific format pattern for a specific locale, you can do so with: <blockquote> <pre> new SimpleDateFormat(aPattern, new DateFormatSymbols(aLocale)). </pre> </blockquote> <p> <pre><code> DateFormatSymbols </code></pre> objects are clonable. When you obtain a <pre><code> DateFormatSymbols </code></pre> object, feel free to modify the date-time formatting data. For instance, you can replace the localized date-time format pattern characters with the ones that you feel easy to remember. Or you can change the representative cities to your favorite ones. <p> New <pre><code> DateFormatSymbols </code></pre> subclasses may be added to support <pre><code> SimpleDateFormat </code></pre> for date-time formatting for additional locales. </p>\n<pre><code>public class DateFormatSymbols\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/DateFormatSymbols.html
DateIntervalFormat	A										<section class="prog__container"><p> DateIntervalFormat is a class for formatting and parsing date intervals in a language-independent manner. Only formatting is supported. Parsing is not supported. <p> Date interval means from one date to another date, for example, from "Jan 11, 2008" to "Jan 18, 2008". We introduced class DateInterval to represent it. DateInterval is a pair of UDate, which is the standard milliseconds since 24:00 GMT, Jan 1, 1970. <p> DateIntervalFormat formats a DateInterval into text as compactly as possible. For example, the date interval format from "Jan 11, 2008" to "Jan 18,. 2008" is "Jan 11-18, 2008" for English. And it parses text into DateInterval, although initially, parsing is not supported. <p> There is no structural information in date time patterns. For any punctuations and string literals inside a date time pattern, we do not know whether it is just a separator, or a prefix, or a suffix. Without such information, so, it is difficult to generate a sub-pattern (or super-pattern) by algorithm. So, formatting a DateInterval is pattern-driven. It is very similar to formatting in SimpleDateFormat. We introduce class DateIntervalInfo to save date interval patterns, similar to date time pattern in SimpleDateFormat. <p> Logically, the interval patterns are mappings from (skeleton, the_largest_different_calendar_field) to (date_interval_pattern). <p> A skeleton <ol> <li> only keeps the field pattern letter and ignores all other parts in a pattern, such as space, punctuations, and string literals. <li> hides the order of fields. <li> might hide a field's pattern letter length. For those non-digit calendar fields, the pattern letter length is important, such as MMM, MMMM, and MMMMM; EEE and EEEE, and the field's pattern letter length is honored. For the digit calendar fields, such as M or MM, d or dd, yy or yyyy, the field pattern length is ignored and the best match, which is defined in date time patterns, will be returned without honor the field pattern letter length in skeleton. </li> </li> </li> </ol> <p> The calendar fields we support for interval formatting are: year, month, date, day-of-week, am-pm, hour, hour-of-day, minute, and second (though we do not currently have specific intervalFormat data for skeletons with seconds). Those calendar fields can be defined in the following order: year &gt; month &gt; date &gt; hour (in day) &gt; minute &gt; second The largest different calendar fields between 2 calendars is the first different calendar field in above order. For example: the largest different calendar fields between "Jan 10, 2007" and "Feb 20, 2008" is year. <p> For other calendar fields, the compact interval formatting is not supported. And the interval format will be fall back to fall-back patterns, which is mostly "{date0} - {date1}". <p> There is a set of pre-defined static skeleton strings in DateFormat, There are pre-defined interval patterns for those pre-defined skeletons in locales' resource files. For example, for a skeleton YEAR_ABBR_MONTH_DAY, which is "yMMMd", in en_US, if the largest different calendar field between date1 and date2 is "year", the date interval pattern is "MMM d, yyyy - MMM d, yyyy", such as "Jan 10, 2007 - Jan 10, 2008". If the largest different calendar field between date1 and date2 is "month", the date interval pattern is "MMM d - MMM d, yyyy", such as "Jan 10 - Feb 10, 2007". If the largest different calendar field between date1 and date2 is "day", the date interval pattern is ""MMM d-d, yyyy", such as "Jan 10-20, 2007". For date skeleton, the interval patterns when year, or month, or date is different are defined in resource files. For time skeleton, the interval patterns when am/pm, or hour, or minute is different are defined in resource files. <p> If a skeleton is not found in a locale's DateIntervalInfo, which means the interval patterns for the skeleton is not defined in resource file, the interval pattern will falls back to the interval "fallback" pattern defined in resource file. If the interval "fallback" pattern is not defined, the default fall-back is "{date0} - {data1}". <p> For the combination of date and time, The rule to genearte interval patterns are: <ol> <li> when the year, month, or day differs, falls back to fall-back interval pattern, which mostly is the concatenate the two original expressions with a separator between, For example, interval pattern from "Jan 10, 2007 10:10 am" to "Jan 11, 2007 10:10am" is "Jan 10, 2007 10:10 am - Jan 11, 2007 10:10am" <li> otherwise, present the date followed by the range expression for the time. For example, interval pattern from "Jan 10, 2007 10:10 am" to "Jan 10, 2007 11:10am" is "Jan 10, 2007 10:10 am - 11:10am" </li> </li> </ol> <p> If two dates are the same, the interval pattern is the single date pattern. For example, interval pattern from "Jan 10, 2007" to "Jan 10, 2007" is "Jan 10, 2007". Or if the presenting fields between 2 dates have the exact same values, the interval pattern is the single date pattern. For example, if user only requests year and month, the interval pattern from "Jan 10, 2007" to "Jan 20, 2007" is "Jan 2007". <p> DateIntervalFormat needs the following information for correct formatting: time zone, calendar type, pattern, date format symbols, and date interval patterns. It can be instantiated in several ways: <ol> <li> create an instance using default or given locale plus given skeleton. Users are encouraged to created date interval formatter this way and to use the pre-defined skeleton macros, such as YEAR_NUM_MONTH, which consists the calendar fields and the format style. </li> <li> create an instance using default or given locale plus given skeleton plus a given DateIntervalInfo. This factory method is for powerful users who want to provide their own interval patterns. Locale provides the timezone, calendar, and format symbols information. Local plus skeleton provides full pattern information. DateIntervalInfo provides the date interval patterns. </li> </ol> <p> For the calendar field pattern letter, such as G, y, M, d, a, h, H, m, s etc. DateIntervalFormat uses the same syntax as that of DateTime format. <p> Code Sample: general usage <pre> // the date interval object which the DateIntervalFormat formats on // and parses into DateInterval dtInterval = new DateInterval(1000*3600*24L, 1000*3600*24*2L); DateIntervalFormat dtIntervalFmt = DateIntervalFormat.getInstance( YEAR_MONTH_DAY, Locale("en", "GB", "")); StringBuffer str = new StringBuffer(""); FieldPosition pos = new FieldPosition(0); // formatting dtIntervalFmt.format(dtInterval, dateIntervalString, pos); </pre> <p> Code Sample: for powerful users who wants to use their own interval pattern <pre> import android.icu.text.DateIntervalInfo; import android.icu.text.DateIntervalFormat; .................... // Get DateIntervalFormat instance using default locale DateIntervalFormat dtitvfmt = DateIntervalFormat.getInstance(YEAR_MONTH_DAY); // Create an empty DateIntervalInfo object, which does not have any interval patterns inside. dtitvinf = new DateIntervalInfo(); // a series of set interval patterns. // Only ERA, YEAR, MONTH, DATE, DAY_OF_MONTH, DAY_OF_WEEK, AM_PM, HOUR, HOUR_OF_DAY, MINUTE and SECOND are supported. dtitvinf.setIntervalPattern("yMMMd", Calendar.YEAR, "'y ~ y'"); dtitvinf.setIntervalPattern("yMMMd", Calendar.MONTH, "yyyy 'diff' MMM d - MMM d"); dtitvinf.setIntervalPattern("yMMMd", Calendar.DATE, "yyyy MMM d ~ d"); dtitvinf.setIntervalPattern("yMMMd", Calendar.HOUR_OF_DAY, "yyyy MMM d HH:mm ~ HH:mm"); // Set fallback interval pattern. Fallback pattern is used when interval pattern is not found. // If the fall-back pattern is not set, falls back to {date0} - {date1} if interval pattern is not found. dtitvinf.setFallbackIntervalPattern("{0} - {1}"); // Set above DateIntervalInfo object as the interval patterns of date interval formatter dtitvfmt.setDateIntervalInfo(dtitvinf); // Prepare to format pos = new FieldPosition(0); str = new StringBuffer(""); // The 2 calendars should be equivalent, otherwise, IllegalArgumentException will be thrown by format() Calendar fromCalendar = (Calendar) dtfmt.getCalendar().clone(); Calendar toCalendar = (Calendar) dtfmt.getCalendar().clone(); fromCalendar.setTimeInMillis(....); toCalendar.setTimeInMillis(...); //Formatting given 2 calendars dtitvfmt.format(fromCalendar, toCalendar, str, pos); </pre> </p>\n<pre><code>public class DateIntervalFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/DateIntervalFormat.html
DateIntervalInfo	A										<section class="prog__container"><p> DateIntervalInfo is a public class for encapsulating localizable date time interval patterns. It is used by DateIntervalFormat. <p> For most users, ordinary use of DateIntervalFormat does not need to create DateIntervalInfo object directly. DateIntervalFormat will take care of it when creating a date interval formatter when user pass in skeleton and locale. <p> For power users, who want to create their own date interval patterns, or want to re-set date interval patterns, they could do so by directly creating DateIntervalInfo and manipulating it. <p> Logically, the interval patterns are mappings from (skeleton, the_largest_different_calendar_field) to (date_interval_pattern). <p> A skeleton <ol> <li> only keeps the field pattern letter and ignores all other parts in a pattern, such as space, punctuations, and string literals. <li> hides the order of fields. <li> might hide a field's pattern letter length. For those non-digit calendar fields, the pattern letter length is important, such as MMM, MMMM, and MMMMM; EEE and EEEE, and the field's pattern letter length is honored. For the digit calendar fields, such as M or MM, d or dd, yy or yyyy, the field pattern length is ignored and the best match, which is defined in date time patterns, will be returned without honor the field pattern letter length in skeleton. </li> </li> </li> </ol> <p> The calendar fields we support for interval formatting are: year, month, date, day-of-week, am-pm, hour, hour-of-day, minute, and second (though we do not currently have specific intervalFormat data for skeletons with seconds). Those calendar fields can be defined in the following order: year &gt; month &gt; date &gt; am-pm &gt; hour &gt; minute &gt; second The largest different calendar fields between 2 calendars is the first different calendar field in above order. For example: the largest different calendar fields between "Jan 10, 2007" and "Feb 20, 2008" is year. <p> There is a set of pre-defined static skeleton strings. There are pre-defined interval patterns for those pre-defined skeletons in locales' resource files. For example, for a skeleton YEAR_ABBR_MONTH_DAY, which is "yMMMd", in en_US, if the largest different calendar field between date1 and date2 is "year", the date interval pattern is "MMM d, yyyy - MMM d, yyyy", such as "Jan 10, 2007 - Jan 10, 2008". If the largest different calendar field between date1 and date2 is "month", the date interval pattern is "MMM d - MMM d, yyyy", such as "Jan 10 - Feb 10, 2007". If the largest different calendar field between date1 and date2 is "day", the date interval pattern is ""MMM d-d, yyyy", such as "Jan 10-20, 2007". For date skeleton, the interval patterns when year, or month, or date is different are defined in resource files. For time skeleton, the interval patterns when am/pm, or hour, or minute is different are defined in resource files. <p> There are 2 dates in interval pattern. For most locales, the first date in an interval pattern is the earlier date. There might be a locale in which the first date in an interval pattern is the later date. We use fallback format for the default order for the locale. For example, if the fallback format is "{0} - {1}", it means the first date in the interval pattern for this locale is earlier date. If the fallback format is "{1} - {0}", it means the first date is the later date. For a particular interval pattern, the default order can be overriden by prefixing "latestFirst:" or "earliestFirst:" to the interval pattern. For example, if the fallback format is "{0}-{1}", but for skeleton "yMMMd", the interval pattern when day is different is "latestFirst:d-d MMM yy", it means by default, the first date in interval pattern is the earlier date. But for skeleton "yMMMd", when day is different, the first date in "d-d MMM yy" is the later date. <p> The recommended way to create a DateIntervalFormat object is to pass in the locale. By using a Locale parameter, the DateIntervalFormat object is initialized with the pre-defined interval patterns for a given or default locale. <p> Users can also create DateIntervalFormat object by supplying their own interval patterns. It provides flexibility for power usage. <p> After a DateIntervalInfo object is created, clients may modify the interval patterns using setIntervalPattern function as so desired. Currently, users can only set interval patterns when the following calendar fields are different: ERA, YEAR, MONTH, DATE, DAY_OF_MONTH, DAY_OF_WEEK, AM_PM, HOUR, HOUR_OF_DAY, MINUTE and SECOND. Interval patterns when other calendar fields are different is not supported. <p> DateIntervalInfo objects are cloneable. When clients obtain a DateIntervalInfo object, they can feel free to modify it as necessary. <p> DateIntervalInfo are not expected to be subclassed. Data for a calendar is loaded out of resource bundles. Through ICU 4.4, date interval patterns are only supported in the Gregoria calendar; non-Gregorian calendars are supported from ICU 4.4.1. </p>\n<pre><code>public class DateIntervalInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/DateIntervalInfo.html
DateIntervalInfo.PatternInfo	A										<section class="prog__container"><p> PatternInfo class saves the first and second part of interval pattern, and whether the interval pattern is earlier date first.</p>\n<pre><code>public static final class DateIntervalInfo.PatternInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/DateIntervalInfo.PatternInfo.html
DateTimePatternGenerator	A										<section class="prog__container"><p> This class provides flexible generation of date format patterns, like "yy-MM-dd". The user can build up the generator by adding successive patterns. Once that is done, a query can be made using a "skeleton", which is a pattern which just includes the desired fields and lengths. The generator will return the "best fit" pattern corresponding to that skeleton. <p> The main method people will use is getBestPattern(String skeleton), since normally this class is pre-built with data from a particular locale. However, generators can be built directly from other data as well. </p>\n<pre><code>public class DateTimePatternGenerator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.html
DateTimePatternGenerator.PatternInfo	A										<section class="prog__container"><p> PatternInfo supplies output parameters for addPattern(...). It is used because Java doesn't have real output parameters. It is treated like a struct (eg Point), so all fields are public.</p>\n<pre><code>public static final class DateTimePatternGenerator.PatternInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/DateTimePatternGenerator.PatternInfo.html
DecimalFormat	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> <a href="https://developer.android.com/reference/java/text/DecimalFormat.html"> DecimalFormat </a> </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <pre><code> DecimalFormat </code></pre> is a concrete subclass of <pre><code> <a href="https://developer.android.com/reference/android/icu/text/NumberFormat.html"> NumberFormat </a> </code></pre> that formats decimal numbers. It has a variety of features designed to make it possible to parse and format numbers in any locale, including support for Western, Arabic, or Indic digits. It also supports different flavors of numbers, including integers ("123"), fixed-point numbers ("123.4"), scientific notation ("1.23E4"), percentages ("12%"), and currency amounts ("$123.00", "USD123.00", "123.00 US dollars"). All of these flavors can be easily localized. <p> To obtain a <pre><code> <a href="https://developer.android.com/reference/android/icu/text/NumberFormat.html"> NumberFormat </a> </code></pre> for a specific locale (including the default locale) call one of <pre><code> NumberFormat </code></pre> 's factory methods such as <pre><code> <a href="https://developer.android.com/reference/android/icu/text/NumberFormat.html#getInstance()"> getInstance() </a> </code></pre> . Do not call the <pre><code> DecimalFormat </code></pre> constructors directly, unless you know what you are doing, since the <pre><code> <a href="https://developer.android.com/reference/android/icu/text/NumberFormat.html"> NumberFormat </a> </code></pre> factory methods may return subclasses other than <pre><code> DecimalFormat </code></pre> . If you need to customize the format object, do something like this: <blockquote> <pre> NumberFormat f = NumberFormat.getInstance(loc); if (f instanceof DecimalFormat) { ((DecimalFormat) f).setDecimalSeparatorAlwaysShown(true); }</pre> </blockquote> <p> <strong> Example Usage </strong> Print out a number using the localized number, currency, and percent format for each locale. <blockquote> <pre> Locale[] locales = NumberFormat.getAvailableLocales(); double myNumber = -1234.56; NumberFormat format; for (int j=0; j&lt;3; ++j) { System.out.println("FORMAT"); for (int i = 0; i &lt; locales.length; ++i) { if (locales[i].getCountry().length() == 0) { // Skip language-only locales continue; } System.out.print(locales[i].getDisplayName()); switch (j) { case 0: format = NumberFormat.getInstance(locales[i]); break; case 1: format = NumberFormat.getCurrencyInstance(locales[i]); break; default: format = NumberFormat.getPercentInstance(locales[i]); break; } try { // Assume format is a DecimalFormat System.out.print(": " + ((DecimalFormat) format).toPattern() + " -&gt; " + form.format(myNumber)); } catch (Exception e) {} try { System.out.println(" -&gt; " + format.parse(form.format(myNumber))); } catch (ParseException e) {} } }</pre> </blockquote> <p> Another example use getInstance(style). <br> Print out a number using the localized number, currency, percent, scientific, integer, iso currency, and plural currency format for each locale. <blockquote> <pre> ULocale locale = new ULocale("en_US"); double myNumber = 1234.56; for (int j=NumberFormat.NUMBERSTYLE; j&lt;=NumberFormat.PLURALCURRENCYSTYLE; ++j) { NumberFormat format = NumberFormat.getInstance(locale, j); try { // Assume format is a DecimalFormat System.out.print(": " + ((DecimalFormat) format).toPattern() + " -&gt; " + form.format(myNumber)); } catch (Exception e) {} try { System.out.println(" -&gt; " + format.parse(form.format(myNumber))); } catch (ParseException e) {} }</pre> </blockquote> </p>\n<pre><code>public class DecimalFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/DecimalFormat.html
DecimalFormatSymbols	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> <a href="https://developer.android.com/reference/java/text/DecimalFormatSymbols.html"> DecimalFormatSymbols </a> </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. This class represents the set of symbols (such as the decimal separator, the grouping separator, and so on) needed by <pre><code> DecimalFormat </code></pre> to format numbers. <pre><code> DecimalFormat </code></pre> creates for itself an instance of <pre><code> DecimalFormatSymbols </code></pre> from its locale data. If you need to change any of these symbols, you can get the <pre><code> DecimalFormatSymbols </code></pre> object from your <pre><code> DecimalFormat </code></pre> and modify it.</p>\n<pre><code>public class DecimalFormatSymbols\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/DecimalFormatSymbols.html
DisplayContext	A										<section class="prog__container"><p> Display context settings. Note, the specific numeric values are internal and may change.</p>\n<pre><code>public final enum DisplayContext\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/DisplayContext.html
DisplayContext.Type	A										<section class="prog__container"><p> Type values for DisplayContext</p>\n<pre><code>public static final enum DisplayContext.Type\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/DisplayContext.Type.html
IDNA.Error	A										<section class="prog__container"><p> IDNA error bit set values. When a domain name or label fails a processing step or does not meet the validity criteria, then one or more of these error bits are set.</p>\n<pre><code>public static final enum IDNA.Error\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/IDNA.Error.html
IDNA	A										<section class="prog__container"><p> Abstract base class for IDNA processing. See http://www.unicode.org/reports/tr46/ and http://www.ietf.org/rfc/rfc3490.txt <p> The IDNA class is not intended for public subclassing. <p> The non-static methods implement UTS #46 and IDNA2008. IDNA2008 is implemented according to UTS #46, see getUTS46Instance(). <p> IDNA2003 is obsolete. The static methods implement IDNA2003. They are all deprecated. <p> IDNA2003 API Overview: <p> The static IDNA API methods implement the IDNA protocol as defined in the <a href="http://www.ietf.org/rfc/rfc3490.txt"> IDNA RFC </a> . The draft defines 2 operations: ToASCII and ToUnicode. Domain labels containing non-ASCII code points are required to be processed by ToASCII operation before passing it to resolver libraries. Domain names that are obtained from resolver libraries are required to be processed by ToUnicode operation before displaying the domain name to the user. IDNA requires that implementations process input strings with <a href="http://www.ietf.org/rfc/rfc3491.txt"> Nameprep </a> , which is a profile of <a href="http://www.ietf.org/rfc/rfc3454.txt"> Stringprep </a> , and then with <a href="http://www.ietf.org/rfc/rfc3492.txt"> Punycode </a> . Implementations of IDNA MUST fully implement Nameprep and Punycode; neither Nameprep nor Punycode are optional. The input and output of ToASCII and ToUnicode operations are Unicode and are designed to be chainable, i.e., applying ToASCII or ToUnicode operations multiple times to an input string will yield the same result as applying the operation once. ToUnicode(ToUnicode(ToUnicode...(ToUnicode(string)))) == ToUnicode(string) ToASCII(ToASCII(ToASCII...(ToASCII(string))) == ToASCII(string). </p>\n<pre><code>public abstract class IDNA\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/IDNA.html
IDNA.Info	A										<section class="prog__container"><p> Output container for IDNA processing errors. The Info class is not suitable for subclassing.</p>\n<pre><code>public static final class IDNA.Info\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/IDNA.Info.html
LocaleDisplayNames.DialectHandling	A										<section class="prog__container"><p> Enum used in <pre><code> <a href="https://developer.android.com/reference/android/icu/text/LocaleDisplayNames.html#getInstance(android.icu.util.ULocale, android.icu.text.LocaleDisplayNames.DialectHandling)"> getInstance(ULocale, DialectHandling) </a> </code></pre> .</p>\n<pre><code>public static final enum LocaleDisplayNames.DialectHandling\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/LocaleDisplayNames.DialectHandling.html
LocaleDisplayNames	A										<section class="prog__container"><p> Returns display names of ULocales and components of ULocales. For more information on language, script, region, variant, key, and values, see <pre><code> <a href="https://developer.android.com/reference/android/icu/util/ULocale.html"> ULocale </a> </code></pre> .</p>\n<pre><code>public abstract class LocaleDisplayNames\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/LocaleDisplayNames.html
MeasureFormat.FormatWidth	A										<section class="prog__container"><p> Formatting width enum.</p>\n<pre><code>public static final enum MeasureFormat.FormatWidth\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/MeasureFormat.FormatWidth.html
MeasureFormat	A										<section class="prog__container"><p> A formatter for Measure objects. <p> To format a Measure object, first create a formatter object using a MeasureFormat factory method. Then use that object's format or formatMeasures methods. Here is sample code: <pre> MeasureFormat fmtFr = MeasureFormat.getInstance( ULocale.FRENCH, FormatWidth.SHORT); Measure measure = new Measure(23, MeasureUnit.CELSIUS); // Output: 23 °C System.out.println(fmtFr.format(measure)); Measure measureF = new Measure(70, MeasureUnit.FAHRENHEIT); // Output: 70 °F System.out.println(fmtFr.format(measureF)); MeasureFormat fmtFrFull = MeasureFormat.getInstance( ULocale.FRENCH, FormatWidth.WIDE); // Output: 70 pieds et 5,3 pouces System.out.println(fmtFrFull.formatMeasures( new Measure(70, MeasureUnit.FOOT), new Measure(5.3, MeasureUnit.INCH))); // Output: 1 pied et 1 pouce System.out.println(fmtFrFull.formatMeasures( new Measure(1, MeasureUnit.FOOT), new Measure(1, MeasureUnit.INCH))); MeasureFormat fmtFrNarrow = MeasureFormat.getInstance( ULocale.FRENCH, FormatWidth.NARROW); // Output: 1′ 1″ System.out.println(fmtFrNarrow.formatMeasures( new Measure(1, MeasureUnit.FOOT), new Measure(1, MeasureUnit.INCH))); MeasureFormat fmtEn = MeasureFormat.getInstance(ULocale.ENGLISH, FormatWidth.WIDE); // Output: 1 inch, 2 feet fmtEn.formatMeasures( new Measure(1, MeasureUnit.INCH), new Measure(2, MeasureUnit.FOOT)); </pre> <p> This class does not do conversions from one unit to another. It simply formats whatever units it is given <p> This class is immutable and thread-safe so long as its deprecated subclass, TimeUnitFormat, is never used. TimeUnitFormat is not thread-safe, and is mutable. Although this class has existing subclasses, this class does not support new sub-classes. </p>\n<pre><code>public class MeasureFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/MeasureFormat.html
MessageFormat.Field	A										<section class="prog__container"><p> Defines constants that are used as attribute keys in the <pre><code> AttributedCharacterIterator </code></pre> returned from <pre><code> MessageFormat.formatToCharacterIterator </code></pre> .</p>\n<pre><code>public static class MessageFormat.Field\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/MessageFormat.Field.html
MessageFormat	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> <a href="https://developer.android.com/reference/java/text/MessageFormat.html"> MessageFormat </a> </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> MessageFormat prepares strings for display to users, with optional arguments (variables/placeholders). The arguments can occur in any order, which is necessary for translation into languages with different grammars. <p> A MessageFormat is constructed from a <em> pattern </em> string with arguments in {curly braces} which will be replaced by formatted values. <p> <pre><code> MessageFormat </code></pre> differs from the other <pre><code> Format </code></pre> classes in that you create a <pre><code> MessageFormat </code></pre> object with one of its constructors (not with a <pre><code> getInstance </code></pre> style factory method). Factory methods aren't necessary because <pre><code> MessageFormat </code></pre> itself doesn't implement locale-specific behavior. Any locale-specific behavior is defined by the pattern that you provide and the subformats used for inserted arguments. <p> Arguments can be named (using identifiers) or numbered (using small ASCII-digit integers). Some of the API methods work only with argument numbers and throw an exception if the pattern has named arguments (see <pre><code> <a href="https://developer.android.com/reference/android/icu/text/MessageFormat.html#usesNamedArguments()"> usesNamedArguments() </a> </code></pre> ). <p> An argument might not specify any format type. In this case, a Number value is formatted with a default (for the locale) NumberFormat, a Date value is formatted with a default (for the locale) DateFormat, and for any other value its toString() value is used. <p> An argument might specify a "simple" type for which the specified Format object is created, cached and used. <p> An argument might have a "complex" type with nested MessageFormat sub-patterns. During formatting, one of these sub-messages is selected according to the argument value and recursively formatted. <p> After construction, a custom Format object can be set for a top-level argument, overriding the default formatting and parsing behavior for that argument. However, custom formatting can be achieved more simply by writing a typeless argument in the pattern string and supplying it with a preformatted string value. <p> When formatting, MessageFormat takes a collection of argument values and writes an output string. The argument values may be passed as an array (when the pattern contains only numbered arguments) or as a Map (which works for both named and numbered arguments). <p> Each argument is matched with one of the input values by array index or map key and formatted according to its pattern specification (or using a custom Format object if one was set). A numbered pattern argument is matched with a map key that contains that number as an ASCII-decimal-digit string (without leading zero). </p>\n<pre><code>public class MessageFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/MessageFormat.html
MessagePattern.ApostropheMode	A										<section class="prog__container"><p> Mode for when an apostrophe starts quoted literal text for MessageFormat output. The default is DOUBLE_OPTIONAL unless overridden via ICUConfig (/com/ibm/icu/ICUConfig.properties). <p> A pair of adjacent apostrophes always results in a single apostrophe in the output, even when the pair is between two single, text-quoting apostrophes. <p> The following table shows examples of desired MessageFormat.format() output with the pattern strings that yield that output. <table> <tr> <th> Desired output </th> <th> DOUBLE_OPTIONAL </th> <th> DOUBLE_REQUIRED </th> </tr> <tr> <td> I see {many} </td> <td> I see '{many}' </td> <td> (same) </td> </tr> <tr> <td> I said {'Wow!'} </td> <td> I said '{''Wow!''}' </td> <td> (same) </td> </tr> <tr> <td> I don't know </td> <td> I don't know OR <br> I don''t know </br> </td> <td> I don''t know </td> </tr> </table> </p>\n<pre><code>public static final enum MessagePattern.ApostropheMode\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/MessagePattern.ApostropheMode.html
MessagePattern.ArgType	A										<section class="prog__container"><p> Argument type constants. Returned by Part.getArgType() for ARG_START and ARG_LIMIT parts. Messages nested inside an argument are each delimited by MSG_START and MSG_LIMIT, with a nesting level one greater than the surrounding message.</p>\n<pre><code>public static final enum MessagePattern.ArgType\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/MessagePattern.ArgType.html
MessagePattern	A										<section class="prog__container"><p> Parses and represents ICU MessageFormat patterns. Also handles patterns for ChoiceFormat, PluralFormat and SelectFormat. Used in the implementations of those classes as well as in tools for message validation, translation and format conversion. <p> The parser handles all syntax relevant for identifying message arguments. This includes "complex" arguments whose style strings contain nested MessageFormat pattern substrings. For "simple" arguments (with no nested MessageFormat pattern substrings), the argument style is not parsed any further. <p> The parser handles named and numbered message arguments and allows both in one message. <p> Once a pattern has been parsed successfully, iterate through the parsed data with countParts(), getPart() and related methods. <p> The data logically represents a parse tree, but is stored and accessed as a list of "parts" for fast and simple parsing and to minimize object allocations. Arguments and nested messages are best handled via recursion. For every _START "part", <pre><code> <a href="https://developer.android.com/reference/android/icu/text/MessagePattern.html#getLimitPartIndex(int)"> getLimitPartIndex(int) </a> </code></pre> efficiently returns the index of the corresponding _LIMIT "part". <p> List of "parts": <pre> message = MSG_START (SKIP_SYNTAX | INSERT_CHAR | REPLACE_NUMBER | argument)* MSG_LIMIT argument = noneArg | simpleArg | complexArg complexArg = choiceArg | pluralArg | selectArg noneArg = ARG_START.NONE (ARG_NAME | ARG_NUMBER) ARG_LIMIT.NONE simpleArg = ARG_START.SIMPLE (ARG_NAME | ARG_NUMBER) ARG_TYPE [ARG_STYLE] ARG_LIMIT.SIMPLE choiceArg = ARG_START.CHOICE (ARG_NAME | ARG_NUMBER) choiceStyle ARG_LIMIT.CHOICE pluralArg = ARG_START.PLURAL (ARG_NAME | ARG_NUMBER) pluralStyle ARG_LIMIT.PLURAL selectArg = ARG_START.SELECT (ARG_NAME | ARG_NUMBER) selectStyle ARG_LIMIT.SELECT choiceStyle = ((ARG_INT | ARG_DOUBLE) ARG_SELECTOR message)+ pluralStyle = [ARG_INT | ARG_DOUBLE] (ARG_SELECTOR [ARG_INT | ARG_DOUBLE] message)+ selectStyle = (ARG_SELECTOR message)+ </pre> <ul> <li> Literal output text is not represented directly by "parts" but accessed between parts of a message, from one part's getLimit() to the next part's getIndex(). <li> <pre><code> ARG_START.CHOICE </code></pre> stands for an ARG_START Part with ArgType CHOICE. <li> In the choiceStyle, the ARG_SELECTOR has the '&lt;', the '#' or the less-than-or-equal-to sign (U+2264). <li> In the pluralStyle, the first, optional numeric Part has the "offset:" value. The optional numeric Part between each (ARG_SELECTOR, message) pair is the value of an explicit-number selector like "=2", otherwise the selector is a non-numeric identifier. <li> The REPLACE_NUMBER Part can occur only in an immediate sub-message of the pluralStyle. </li> </li> </li> </li> </li> </ul> <p> This class is not intended for public subclassing. </p>\n<pre><code>public final class MessagePattern\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/MessagePattern.html
MessagePattern.Part	A										<section class="prog__container"><p> A message pattern "part", representing a pattern parsing event. There is a part for the start and end of a message or argument, for quoting and escaping of and with ASCII apostrophes, and for syntax elements of "complex" arguments.</p>\n<pre><code>public static final class MessagePattern.Part\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/MessagePattern.Part.html
MessagePattern.Part.Type	A										<section class="prog__container"><p> Part type constants.</p>\n<pre><code>public static final enum MessagePattern.Part.Type\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/MessagePattern.Part.Type.html
Normalizer	A										<section class="prog__container"><p> Old Unicode normalization API. <p> This API has been replaced by the <pre><code> <a href="https://developer.android.com/reference/android/icu/text/Normalizer2.html"> Normalizer2 </a> </code></pre> class and is only available for backward compatibility. This class simply delegates to the Normalizer2 class. There are two exceptions: The new API does not provide a replacement for <pre><code> QuickCheckResult </code></pre> and <pre><code> compare() </code></pre> . <p> <pre><code> normalize </code></pre> transforms Unicode text into an equivalent composed or decomposed form, allowing for easier sorting and searching of text. <pre><code> normalize </code></pre> supports the standard normalization forms described in <a href="http://www.unicode.org/unicode/reports/tr15/" target="unicode"> Unicode Standard Annex #15 — Unicode Normalization Forms </a> . <p> Characters with accents or other adornments can be encoded in several different ways in Unicode. For example, take the character A-acute. In Unicode, this can be encoded as a single character (the "composed" form): <pre> 00C1 LATIN CAPITAL LETTER A WITH ACUTE </pre> or as two separate characters (the "decomposed" form): <pre> 0041 LATIN CAPITAL LETTER A 0301 COMBINING ACUTE ACCENT </pre> <p> To a user of your program, however, both of these sequences should be treated as the same "user-level" character "A with acute accent". When you are searching or comparing text, you must ensure that these two sequences are treated equivalently. In addition, you must handle characters with more than one accent. Sometimes the order of a character's combining accents is significant, while in other cases accent sequences in different orders are really equivalent. <p> Similarly, the string "ffi" can be encoded as three separate letters: <pre> 0066 LATIN SMALL LETTER F 0066 LATIN SMALL LETTER F 0069 LATIN SMALL LETTER I </pre> or as the single character <pre> FB03 LATIN SMALL LIGATURE FFI </pre> <p> The ffi ligature is not a distinct semantic character, and strictly speaking it shouldn't be in Unicode at all, but it was included for compatibility with existing character sets that already provided it. The Unicode standard identifies such characters by giving them "compatibility" decompositions into the corresponding semantic characters. When sorting and searching, you will often want to use these mappings. <p> <pre><code> normalize </code></pre> helps solve these problems by transforming text into the canonical composed and decomposed forms as shown in the first example above. In addition, you can have it perform compatibility decompositions so that you can treat compatibility characters the same as their equivalents. Finally, <pre><code> normalize </code></pre> rearranges accents into the proper canonical order, so that you do not have to worry about accent rearrangement on your own. <p> Form FCD, "Fast C or D", is also designed for collation. It allows to work on strings that are not necessarily normalized with an algorithm (like in collation) that works under "canonical closure", i.e., it treats precomposed characters and their decomposed equivalents the same. <p> It is not a normalization form because it does not provide for uniqueness of representation. Multiple strings may be canonically equivalent (their NFDs are identical) and may all conform to FCD without being identical themselves. <p> The form is defined such that the "raw decomposition", the recursive canonical decomposition of each character, results in a string that is canonically ordered. This means that precomposed characters are allowed for as long as their decompositions do not need canonical reordering. <p> Its advantage for a process like collation is that all NFD and most NFC texts - and many unnormalized texts - already conform to FCD and do not need to be normalized (NFD) for such a process. The FCD quick check will return YES for most strings in practice. <p> normalize(FCD) may be implemented with NFD. <p> For more details on FCD see Unicode Technical Note #5 (Canonical Equivalence in Applications): http://www.unicode.org/notes/tn5/#FCD <p> ICU collation performs either NFD or FCD normalization automatically if normalization is turned on for the collator object. Beyond collation and string search, normalized strings may be useful for string equivalence comparisons, transliteration/transcription, unique representations, etc. <p> The W3C generally recommends to exchange texts in NFC. Note also that most legacy character encodings use only precomposed forms and often do not encode any combining marks by themselves. For conversion to such character encodings the Unicode text needs to be normalized to NFC. For more usage examples, see the Unicode Standard Annex. <p> Note: The Normalizer class also provides API for iterative normalization. While the setIndex() and getIndex() refer to indices in the underlying Unicode input text, the next() and previous() methods iterate through characters in the normalized output. This means that there is not necessarily a one-to-one correspondence between characters returned by next() and previous() and the indices passed to and returned from setIndex() and getIndex(). It is for this reason that Normalizer does not implement the CharacterIterator interface. </p>\n<pre><code>public final class Normalizer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/Normalizer.html
Normalizer.QuickCheckResult	A										<section class="prog__container"><p> Result values for quickCheck(). For details see Unicode Technical Report 15.</p>\n<pre><code>public static final class Normalizer.QuickCheckResult\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/Normalizer.QuickCheckResult.html
Normalizer2	A										<section class="prog__container"><p> Unicode normalization functionality for standard Unicode normalization or for using custom mapping tables. All instances of this class are unmodifiable/immutable. The Normalizer2 class is not intended for public subclassing. <p> The primary functions are to produce a normalized string and to detect whether a string is already normalized. The most commonly used normalization forms are those defined in http://www.unicode.org/unicode/reports/tr15/ However, this API supports additional normalization forms for specialized purposes. For example, NFKC_Casefold is provided via getInstance("nfkc_cf", COMPOSE) and can be used in implementations of UTS #46. <p> Not only are the standard compose and decompose modes supplied, but additional modes are provided as documented in the Mode enum. <p> Some of the functions in this class identify normalization boundaries. At a normalization boundary, the portions of the string before it and starting from it do not interact and can be handled independently. <p> The spanQuickCheckYes() stops at a normalization boundary. When the goal is a normalized string, then the text before the boundary can be copied, and the remainder can be processed with normalizeSecondAndAppend(). <p> The hasBoundaryBefore(), hasBoundaryAfter() and isInert() functions test whether a character is guaranteed to be at a normalization boundary, regardless of context. This is used for moving from one normalization boundary to the next or preceding boundary, and for performing iterative normalization. <p> Iterative normalization is useful when only a small portion of a longer string needs to be processed. For example, in ICU, iterative normalization is used by the NormalizationTransliterator (to avoid replacing already-normalized text) and ucol_nextSortKeyPart() (to process only the substring for which sort key bytes are computed). <p> The set of normalization boundaries returned by these functions may not be complete: There may be more boundaries that could be returned. Different functions may return different boundaries. </p>\n<pre><code>public abstract class Normalizer2\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/Normalizer2.html
Normalizer2.Mode	A										<section class="prog__container"><p> Constants for normalization modes. For details about standard Unicode normalization forms and about the algorithms which are also used with custom mapping tables see http://www.unicode.org/unicode/reports/tr15/</p>\n<pre><code>public static final enum Normalizer2.Mode\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/Normalizer2.Mode.html
NumberFormat.Field	A										<section class="prog__container"><p> The instances of this inner class are used as attribute keys and values in AttributedCharacterIterator that NumberFormat.formatToCharacterIterator() method returns. <p> There is no public constructor to this class, the only instances are the constants defined here. <p> </p>\n<pre><code>public static class NumberFormat.Field\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/NumberFormat.Field.html
NumberFormat	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> <a href="https://developer.android.com/reference/java/text/NumberFormat.html"> NumberFormat </a> </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <pre><code> NumberFormat </code></pre> is the abstract base class for all number formats. This class provides the interface for formatting and parsing numbers. <pre><code> NumberFormat </code></pre> also provides methods for determining which locales have number formats, and what their names are. <pre><code> NumberFormat </code></pre> helps you to format and parse numbers for any locale. Your code can be completely independent of the locale conventions for decimal points, thousands-separators, or even the particular decimal digits used, or whether the number format is even decimal. <p> To format a number for the current Locale, use one of the factory class methods: <blockquote> <pre> myString = NumberFormat.getInstance().format(myNumber); </pre> </blockquote> If you are formatting multiple numbers, it is more efficient to get the format and use it multiple times so that the system doesn't have to fetch the information about the local language and country conventions multiple times. <blockquote> <pre> NumberFormat nf = NumberFormat.getInstance(); for (int i = 0; i &lt; a.length; ++i) { output.println(nf.format(myNumber[i]) + "; "); } </pre> </blockquote> To format a number for a different Locale, specify it in the call to <pre><code> getInstance </code></pre> . <blockquote> <pre> NumberFormat nf = NumberFormat.getInstance(Locale.FRENCH); </pre> </blockquote> You can also use a <pre><code> NumberFormat </code></pre> to parse numbers: <blockquote> <pre> myNumber = nf.parse(myString); </pre> </blockquote> Use <pre><code> getInstance </code></pre> or <pre><code> getNumberInstance </code></pre> to get the normal number format. Use <pre><code> getIntegerInstance </code></pre> to get an integer number format. Use <pre><code> getCurrencyInstance </code></pre> to get the currency number format. And use <pre><code> getPercentInstance </code></pre> to get a format for displaying percentages. Some factory methods are found within subclasses of NumberFormat. With this format, a fraction like 0.53 is displayed as 53%. <p> Starting from ICU 4.2, you can use getInstance() by passing in a 'style' as parameter to get the correct instance. For example, use getInstance(...NUMBERSTYLE) to get the normal number format, getInstance(...PERCENTSTYLE) to get a format for displaying percentage, getInstance(...SCIENTIFICSTYLE) to get a format for displaying scientific number, getInstance(...INTEGERSTYLE) to get an integer number format, getInstance(...CURRENCYSTYLE) to get the currency number format, in which the currency is represented by its symbol, for example, "$3.00". getInstance(...ISOCURRENCYSTYLE) to get the currency number format, in which the currency is represented by its ISO code, for example "USD3.00". getInstance(...PLURALCURRENCYSTYLE) to get the currency number format, in which the currency is represented by its full name in plural format, for example, "3.00 US dollars" or "1.00 US dollar". <p> You can also control the display of numbers with such methods as <pre><code> setMinimumFractionDigits </code></pre> . If you want even more control over the format or parsing, or want to give your users more control, you can try casting the <pre><code> NumberFormat </code></pre> you get from the factory methods to a <pre><code> DecimalFormat </code></pre> . This will work for the vast majority of locales; just remember to put it in a <pre><code> try </code></pre> block in case you encounter an unusual one. <p> NumberFormat is designed such that some controls work for formatting and others work for parsing. The following is the detailed description for each these control methods, <p> setParseIntegerOnly : only affects parsing, e.g. if true, "3456.78" -&gt; 3456 (and leaves the parse position just after '6') if false, "3456.78" -&gt; 3456.78 (and leaves the parse position just after '8') This is independent of formatting. If you want to not show a decimal point where there might be no digits after the decimal point, use setDecimalSeparatorAlwaysShown on DecimalFormat. <p> You can also use forms of the <pre><code> parse </code></pre> and <pre><code> format </code></pre> methods with <pre><code> ParsePosition </code></pre> and <pre><code> FieldPosition </code></pre> to allow you to: <ul> <li> progressively parse through pieces of a string <li> align the decimal point and other areas </li> </li> </ul> For example, you can align numbers in two ways: <ol> <li> If you are using a monospaced font with spacing for alignment, you can pass the <pre><code> FieldPosition </code></pre> in your format call, with <pre><code> field </code></pre> = <pre><code> INTEGER_FIELD </code></pre> . On output, <pre><code> getEndIndex </code></pre> will be set to the offset between the last character of the integer and the decimal. Add (desiredSpaceCount - getEndIndex) spaces at the front of the string. <li> If you are using proportional fonts, instead of padding with spaces, measure the width of the string in pixels from the start to <pre><code> getEndIndex </code></pre> . Then move the pen by (desiredPixelWidth - widthToAlignmentPoint) before drawing the text. It also works where there is no decimal, but possibly additional characters at the end, e.g., with parentheses in negative numbers: "(12)" for -12. </li> </li> </ol> </p>\n<pre><code>public abstract class NumberFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/NumberFormat.html
NumberingSystem	A										<section class="prog__container"><p> <pre><code> NumberingSystem </code></pre> is the base class for all number systems. This class provides the interface for setting different numbering system types, whether it be a simple alternate digit system such as Thai digits or Devanagari digits, or an algorithmic numbering system such as Hebrew numbering or Chinese numbering.</p>\n<pre><code>public class NumberingSystem\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/NumberingSystem.html
android.icu.text	A										<section class="prog__container">Defines rules for mapping non-negative numeric values onto a small set of keywords. </section>	https://developer.android.com/reference/android/icu/text/package-summary.html
PluralFormat	A										<section class="prog__container"><p> <pre><code> PluralFormat </code></pre> supports the creation of internationalized messages with plural inflection. It is based on <i> plural selection </i> , i.e. the caller specifies messages for each plural case that can appear in the user's language and the <pre><code> PluralFormat </code></pre> selects the appropriate message based on the number. </p>\n<pre><code>public class PluralFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/PluralFormat.html
PluralRules	A										<section class="prog__container"><p> <p> Defines rules for mapping non-negative numeric values onto a small set of keywords. </p>\n<pre><code>public class PluralRules\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/PluralRules.html
PluralRules.PluralType	A										<section class="prog__container"><p> Type of plurals and PluralRules.</p>\n<pre><code>public static final enum PluralRules.PluralType\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/PluralRules.PluralType.html
RelativeDateTimeFormatter.AbsoluteUnit	A										<section class="prog__container"><p> Represents an absolute unit.</p>\n<pre><code>public static final enum RelativeDateTimeFormatter.AbsoluteUnit\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.AbsoluteUnit.html
RelativeDateTimeFormatter.Direction	A										<section class="prog__container"><p> Represents a direction for an absolute unit e.g "Next Tuesday" or "Last Tuesday"</p>\n<pre><code>public static final enum RelativeDateTimeFormatter.Direction\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.Direction.html
RelativeDateTimeFormatter	A										<section class="prog__container"><p> Formats simple relative dates. There are two types of relative dates that it handles: <ul> <li> relative dates with a quantity e.g "in 5 days" </li> <li> relative dates without a quantity e.g "next Tuesday" </li> </ul> <p> This API is very basic and is intended to be a building block for more fancy APIs. The caller tells it exactly what to display in a locale independent way. While this class automatically provides the correct plural forms, the grammatical form is otherwise as neutral as possible. It is the caller's responsibility to handle cut-off logic such as deciding between displaying "in 7 days" or "in 1 week." This API supports relative dates involving one single unit. This API does not support relative dates involving compound units. e.g "in 5 days and 4 hours" nor does it support parsing. This class is both immutable and thread-safe. <p> Here are some examples of use: <blockquote> <pre> RelativeDateTimeFormatter fmt = RelativeDateTimeFormatter.getInstance(); fmt.format(1, Direction.NEXT, RelativeUnit.DAYS); // "in 1 day" fmt.format(3, Direction.NEXT, RelativeUnit.DAYS); // "in 3 days" fmt.format(3.2, Direction.LAST, RelativeUnit.YEARS); // "3.2 years ago" fmt.format(Direction.LAST, AbsoluteUnit.SUNDAY); // "last Sunday" fmt.format(Direction.THIS, AbsoluteUnit.SUNDAY); // "this Sunday" fmt.format(Direction.NEXT, AbsoluteUnit.SUNDAY); // "next Sunday" fmt.format(Direction.PLAIN, AbsoluteUnit.SUNDAY); // "Sunday" fmt.format(Direction.LAST, AbsoluteUnit.DAY); // "yesterday" fmt.format(Direction.THIS, AbsoluteUnit.DAY); // "today" fmt.format(Direction.NEXT, AbsoluteUnit.DAY); // "tomorrow" fmt.format(Direction.PLAIN, AbsoluteUnit.NOW); // "now" </pre> </blockquote> <p> In the future, we may add more forms, such as abbreviated/short forms (3 secs ago), and relative day periods ("yesterday afternoon"), etc. </p>\n<pre><code>public final class RelativeDateTimeFormatter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.html
RelativeDateTimeFormatter.RelativeUnit	A										<section class="prog__container"><p> Represents the unit for formatting a relative date. e.g "in 5 days" or "in 3 months"</p>\n<pre><code>public static final enum RelativeDateTimeFormatter.RelativeUnit\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.RelativeUnit.html
RelativeDateTimeFormatter.Style	A										<section class="prog__container"><p> The formatting style</p>\n<pre><code>public static final enum RelativeDateTimeFormatter.Style\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/RelativeDateTimeFormatter.Style.html
Replaceable	A										<section class="prog__container"><p> <pre><code> Replaceable </code></pre> is an interface representing a string of characters that supports the replacement of a range of itself with a new string of characters. It is used by APIs that change a piece of text while retaining metadata. Metadata is data other than the Unicode characters returned by char32At(). One example of metadata is style attributes; another is an edit history, marking each character with an author and revision number. <p> An implicit aspect of the <pre><code> Replaceable </code></pre> API is that during a replace operation, new characters take on the metadata of the old characters. For example, if the string "the <b> bold </b> font" has range (4, 8) replaced with "strong", then it becomes "the <b> strong </b> font". <p> <pre><code> Replaceable </code></pre> specifies ranges using a start offset and a limit offset. The range of characters thus specified includes the characters at offset start..limit-1. That is, the start offset is inclusive, and the limit offset is exclusive. <p> <pre><code> Replaceable </code></pre> also includes API to access characters in the string: <pre><code> length() </code></pre> , <pre><code> charAt() </code></pre> , <pre><code> char32At() </code></pre> , and <pre><code> extractBetween() </code></pre> . <p> For a subclass to support metadata, typical behavior of <pre><code> replace() </code></pre> is the following: <ul> <li> Set the metadata of the new text to the metadata of the first character replaced </li> <li> If no characters are replaced, use the metadata of the previous character </li> <li> If there is no previous character (i.e. start == 0), use the following character </li> <li> If there is no following character (i.e. the replaceable was empty), use default metadata <br> <li> If the code point U+FFFF is seen, it should be interpreted as a special marker having no metadata <li> </li> </li> </br> </li> </ul> If this is not the behavior, the subclass should document any differences. <p> Copyright © IBM Corporation 1999. All rights reserved. </p>\n<pre><code>public interface Replaceable\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/Replaceable.html
RuleBasedCollator	A										<section class="prog__container"><p> <p> RuleBasedCollator is a concrete subclass of Collator. It allows customization of the Collator via user-specified rule sets. RuleBasedCollator is designed to be fully compliant to the <a href="http://www.unicode.org/unicode/reports/tr10/"> Unicode Collation Algorithm (UCA) </a> and conforms to ISO 14651. <p> A Collator is thread-safe only when frozen. See { <pre><code> <a href="https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#isFrozen()"> isFrozen() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/icu/util/Freezable.html"> Freezable </a> </code></pre> . <p> Users are strongly encouraged to read the <a href="http://userguide.icu-project.org/collation"> User Guide </a> for more information about the collation service before using this class. <p> Create a RuleBasedCollator from a locale by calling the getInstance(Locale) factory method in the base class Collator. Collator.getInstance(Locale) creates a RuleBasedCollator object based on the collation rules defined by the argument locale. If a customized collation ordering or attributes is required, use the RuleBasedCollator(String) constructor with the appropriate rules. The customized RuleBasedCollator will base its ordering on the CLDR root collation, while re-adjusting the attributes and orders of the characters in the specified rule accordingly. <p> RuleBasedCollator provides correct collation orders for most locales supported in ICU. If specific data for a locale is not available, the orders eventually falls back to the <a href="http://www.unicode.org/reports/tr35/tr35-collation.html#Root_Collation"> CLDR root sort order </a> . <p> For information about the collation rule syntax and details about customization, please refer to the <a href="http://userguide.icu-project.org/collation/customization"> Collation customization </a> section of the User Guide. <p> <strong> Note </strong> that there are some differences between the Collation rule syntax used in Java and ICU4J: <ul> <li> According to the JDK documentation: <br> <i> Modifier '!' : Turns on Thai/Lao vowel-consonant swapping. If this rule is in force when a Thai vowel of the range \U0E40-\U0E44 precedes a Thai consonant of the range \U0E01-\U0E2E OR a Lao vowel of the range \U0EC0-\U0EC4 precedes a Lao consonant of the range \U0E81-\U0EAE then the vowel is placed after the consonant for collation purposes. <br> If a rule is without the modifier '!', the Thai/Lao vowel-consonant swapping is not turned on. </br> </i> <br> ICU4J's RuleBasedCollator does not support turning off the Thai/Lao vowel-consonant swapping, since the UCA clearly states that it has to be supported to ensure a correct sorting order. If a '!' is encountered, it is ignored. </br> </br> </li> <li> As mentioned in the documentation of the base class Collator, compatibility decomposition mode is not supported. </li> </ul> <p> <strong> Examples </strong> <p> Creating Customized RuleBasedCollators: <blockquote> <pre> String simple = "&amp; a &lt; b &lt; c &lt; d"; RuleBasedCollator simpleCollator = new RuleBasedCollator(simple); String norwegian = "&amp; a , A &lt; b , B &lt; c , C &lt; d , D &lt; e , E " + "&lt; f , F &lt; g , G &lt; h , H &lt; i , I &lt; j , " + "J &lt; k , K &lt; l , L &lt; m , M &lt; n , N &lt; " + "o , O &lt; p , P &lt; q , Q &lt;r , R &lt;s , S &lt; " + "t , T &lt; u , U &lt; v , V &lt; w , W &lt; x , X " + "&lt; y , Y &lt; z , Z &lt; \u00E5 = a\u030A " + ", \u00C5 = A\u030A ; aa , AA &lt; \u00E6 " + ", \u00C6 &lt; \u00F8 , \u00D8"; RuleBasedCollator norwegianCollator = new RuleBasedCollator(norwegian); </pre> </blockquote> Concatenating rules to combine <pre><code> Collator </code></pre> s: <blockquote> <pre> // Create an en_US Collator object RuleBasedCollator en_USCollator = (RuleBasedCollator) Collator.getInstance(new Locale("en", "US", "")); // Create a da_DK Collator object RuleBasedCollator da_DKCollator = (RuleBasedCollator) Collator.getInstance(new Locale("da", "DK", "")); // Combine the two // First, get the collation rules from en_USCollator String en_USRules = en_USCollator.getRules(); // Second, get the collation rules from da_DKCollator String da_DKRules = da_DKCollator.getRules(); RuleBasedCollator newCollator = new RuleBasedCollator(en_USRules + da_DKRules); // newCollator has the combined rules </pre> </blockquote> Making changes to an existing RuleBasedCollator to create a new <pre><code> Collator </code></pre> object, by appending changes to the existing rule: <blockquote> <pre> // Create a new Collator object with additional rules String addRules = "&amp; C &lt; ch, cH, Ch, CH"; RuleBasedCollator myCollator = new RuleBasedCollator(en_USCollator.getRules() + addRules); // myCollator contains the new rules </pre> </blockquote> How to change the order of non-spacing accents: <blockquote> <pre> // old rule with main accents String oldRules = "= \u0301 ; \u0300 ; \u0302 ; \u0308 " + "; \u0327 ; \u0303 ; \u0304 ; \u0305 " + "; \u0306 ; \u0307 ; \u0309 ; \u030A " + "; \u030B ; \u030C ; \u030D ; \u030E " + "; \u030F ; \u0310 ; \u0311 ; \u0312 " + "&lt; a , A ; ae, AE ; \u00e6 , \u00c6 " + "&lt; b , B &lt; c, C &lt; e, E &amp; C &lt; d , D"; // change the order of accent characters String addOn = "&amp; \u0300 ; \u0308 ; \u0302"; RuleBasedCollator myCollator = new RuleBasedCollator(oldRules + addOn); </pre> </blockquote> Putting in a new primary ordering before the default setting, e.g. sort English characters before or after Japanese characters in the Japanese <pre><code> Collator </code></pre> : <blockquote> <pre> // get en_US Collator rules RuleBasedCollator en_USCollator = (RuleBasedCollator)Collator.getInstance(Locale.US); // add a few Japanese characters to sort before English characters // suppose the last character before the first base letter 'a' in // the English collation rule is \u2212 String jaString = "&amp; \u2212 &lt;\u3041, \u3042 &lt;\u3043, " + "\u3044"; RuleBasedCollator myJapaneseCollator = new RuleBasedCollator(en_USCollator.getRules() + jaString); </pre> </blockquote> <p> This class is not subclassable </p>\n<pre><code>public final class RuleBasedCollator\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html
SearchIterator.ElementComparisonType	A										<section class="prog__container"><p> Option to control how collation elements are compared. The default value will be <pre><code> <a href="https://developer.android.com/reference/android/icu/text/SearchIterator.ElementComparisonType.html#STANDARD_ELEMENT_COMPARISON"> STANDARD_ELEMENT_COMPARISON </a> </code></pre> . <p> PATTERN_BASE_WEIGHT_IS_WILDCARD supports "asymmetric search" as described in <a href="http://www.unicode.org/reports/tr10/#Asymmetric_Search"> UTS #10 Unicode Collation Algorithm </a> , while ANY_BASE_WEIGHT_IS_WILDCARD supports a related option in which "unmarked" characters in either the pattern or the searched text are treated as wildcards that match marked or unmarked versions of the same character. </p>\n<pre><code>public static final enum SearchIterator.ElementComparisonType\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/SearchIterator.ElementComparisonType.html
SearchIterator	A										<section class="prog__container"><p> <tt> SearchIterator </tt> is an abstract base class that provides methods to search for a pattern within a text string. Instances of <tt> SearchIterator </tt> maintain a current position and scan over the target text, returning the indices the pattern is matched and the length of each match. <p> <tt> SearchIterator </tt> defines a protocol for text searching. Subclasses provide concrete implementations of various search algorithms. For example, <tt> StringSearch </tt> implements language-sensitive pattern matching based on the comparison rules defined in a <tt> RuleBasedCollator </tt> object. <p> Other options for searching include using a BreakIterator to restrict the points at which matches are detected. <p> <tt> SearchIterator </tt> provides an API that is similar to that of other text iteration classes such as <tt> BreakIterator </tt> . Using this class, it is easy to scan through text looking for all occurrences of a given pattern. The following example uses a <tt> StringSearch </tt> object to find all instances of "fox" in the target string. Any other subclass of <tt> SearchIterator </tt> can be used in an identical manner. <pre><pre><code> String target = "The quick brown fox jumped over the lazy fox"; String pattern = "fox"; SearchIterator iter = new StringSearch(pattern, target); for (int pos = iter.first(); pos != SearchIterator.DONE; pos = iter.next()) { System.out.println("Found match at " + pos + ", length is " + iter.getMatchLength()); } </code></pre></pre> </p>\n<pre><code>public abstract class SearchIterator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/SearchIterator.html
SelectFormat	A										<section class="prog__container"><p> <p> <pre><code> SelectFormat </code></pre> supports the creation of internationalized messages by selecting phrases based on keywords. The pattern specifies how to map keywords to phrases and provides a default phrase. The object provided to the format method is a string that's matched against the keywords. If there is a match, the corresponding phrase is selected; otherwise, the default phrase is used. </p>\n<pre><code>public class SelectFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/SelectFormat.html
SimpleDateFormat	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> <a href="https://developer.android.com/reference/java/text/SimpleDateFormat.html"> SimpleDateFormat </a> </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> <pre><code> SimpleDateFormat </code></pre> is a concrete class for formatting and parsing dates in a locale-sensitive manner. It allows for formatting (date -&gt; text), parsing (text -&gt; date), and normalization. <p> <pre><code> SimpleDateFormat </code></pre> allows you to start by choosing any user-defined patterns for date-time formatting. However, you are encouraged to create a date-time formatter with either <pre><code> getTimeInstance </code></pre> , <pre><code> getDateInstance </code></pre> , or <pre><code> getDateTimeInstance </code></pre> in <pre><code> DateFormat </code></pre> . Each of these class methods can return a date/time formatter initialized with a default format pattern. You may modify the format pattern using the <pre><code> applyPattern </code></pre> methods as desired. For more information on using these methods, see <pre><code> <a href="https://developer.android.com/reference/android/icu/text/DateFormat.html"> DateFormat </a> </code></pre> . <p> <strong> Date and Time Patterns: </strong> </p>\n<pre><code>public class SimpleDateFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/SimpleDateFormat.html
StringPrepParseException	A										<section class="prog__container"><p> Exception that signals an error has occurred while parsing the input to StringPrep or IDNA.</p>\n<pre><code>public class StringPrepParseException\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/StringPrepParseException.html
StringSearch	A										<section class="prog__container"><p> <tt> StringSearch </tt> is a <pre><code> <a href="https://developer.android.com/reference/android/icu/text/SearchIterator.html"> SearchIterator </a> </code></pre> that provides language-sensitive text searching based on the comparison rules defined in a <pre><code> <a href="https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html"> RuleBasedCollator </a> </code></pre> object. StringSearch ensures that language eccentricity can be handled, e.g. for the German collator, characters ß and SS will be matched if case is chosen to be ignored. See the <a href="http://source.icu-project.org/repos/icu/icuhtml/trunk/design/collation/ICU_collation_design.htm"> "ICU Collation Design Document" </a> for more information. <p> There are 2 match options for selection: <br> Let S' be the sub-string of a text string S between the offsets start and end [start, end]. <br> A pattern string P matches a text string S at the offsets [start, end] if <pre> option 1. Some canonical equivalent of P matches some canonical equivalent of S' option 2. P matches S' and if P starts or ends with a combining mark, there exists no non-ignorable combining mark before or after S? in S respectively. </pre> Option 2. is the default. <p> This search has APIs similar to that of other text iteration mechanisms such as the break iterators in <pre><code> <a href="https://developer.android.com/reference/android/icu/text/BreakIterator.html"> BreakIterator </a> </code></pre> . Using these APIs, it is easy to scan through text looking for all occurrences of a given pattern. This search iterator allows changing of direction by calling a <pre><code> <a href="https://developer.android.com/reference/android/icu/text/StringSearch.html#reset()"> reset() </a> </code></pre> followed by a <pre><code> <a href="https://developer.android.com/reference/android/icu/text/SearchIterator.html#next()"> next() </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/icu/text/SearchIterator.html#previous()"> previous() </a> </code></pre> . Though a direction change can occur without calling <pre><code> <a href="https://developer.android.com/reference/android/icu/text/StringSearch.html#reset()"> reset() </a> </code></pre> first, this operation comes with some speed penalty. Match results in the forward direction will match the result matches in the backwards direction in the reverse order <p> <pre><code> <a href="https://developer.android.com/reference/android/icu/text/SearchIterator.html"> SearchIterator </a> </code></pre> provides APIs to specify the starting position within the text string to be searched, e.g. <pre><code> <a href="https://developer.android.com/reference/android/icu/text/SearchIterator.html#setIndex(int)"> setIndex </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/icu/text/SearchIterator.html#preceding(int)"> preceding </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/icu/text/SearchIterator.html#following(int)"> following </a> </code></pre> . Since the starting position will be set as it is specified, please take note that there are some danger points at which the search may render incorrect results: <ul> <li> In the midst of a substring that requires normalization. <li> If the following match is to be found, the position should not be the second character which requires swapping with the preceding character. Vice versa, if the preceding match is to be found, the position to search from should not be the first character which requires swapping with the next character. E.g certain Thai and Lao characters require swapping. <li> If a following pattern match is to be found, any position within a contracting sequence except the first will fail. Vice versa if a preceding pattern match is to be found, an invalid starting point would be any character within a contracting sequence except the last. </li> </li> </li> </ul> <p> A <pre><code> <a href="https://developer.android.com/reference/android/icu/text/BreakIterator.html"> BreakIterator </a> </code></pre> can be used if only matches at logical breaks are desired. Using a <pre><code> <a href="https://developer.android.com/reference/android/icu/text/BreakIterator.html"> BreakIterator </a> </code></pre> will only give you results that exactly matches the boundaries given by the <pre><code> <a href="https://developer.android.com/reference/android/icu/text/BreakIterator.html"> BreakIterator </a> </code></pre> . For instance the pattern "e" will not be found in the string "é" if a character break iterator is used. <p> Options are provided to handle overlapping matches. E.g. In English, overlapping matches produces the result 0 and 2 for the pattern "abab" in the text "ababab", where mutually exclusive matches only produces the result of 0. <p> Options are also provided to implement "asymmetric search" as described in <a href="http://www.unicode.org/reports/tr10/#Asymmetric_Search"> UTS #10 Unicode Collation Algorithm </a> , specifically the ElementComparisonType values. <p> Though collator attributes will be taken into consideration while performing matches, there are no APIs here for setting and getting the attributes. These attributes can be set by getting the collator from <pre><code> <a href="https://developer.android.com/reference/android/icu/text/StringSearch.html#getCollator()"> getCollator() </a> </code></pre> and using the APIs in <pre><code> <a href="https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html"> RuleBasedCollator </a> </code></pre> . Lastly to update <tt> StringSearch </tt> to the new collator attributes, <pre><code> <a href="https://developer.android.com/reference/android/icu/text/StringSearch.html#reset()"> reset() </a> </code></pre> has to be called. <p> Restriction: <br> Currently there are no composite characters that consists of a character with combining class &gt; 0 before a character with combining class == 0. However, if such a character exists in the future, <tt> StringSearch </tt> does not guarantee the results for option 1. <p> Consult the <pre><code> <a href="https://developer.android.com/reference/android/icu/text/SearchIterator.html"> SearchIterator </a> </code></pre> documentation for information on and examples of how to use instances of this class to implement text searching. <p> Note, <tt> StringSearch </tt> is not to be subclassed. </p>\n<pre><code>public final class StringSearch\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/StringSearch.html
SymbolTable	A										<section class="prog__container"><p> An interface that defines both lookup protocol and parsing of symbolic names. <p> This interface is used by UnicodeSet to resolve $Variable style references that appear in set patterns. RBBI and Transliteration both independently implement this interface. <p> A symbol table maintains two kinds of mappings. The first is between symbolic names and their values. For example, if the variable with the name "start" is set to the value "alpha" (perhaps, though not necessarily, through an expression such as "$start=alpha"), then the call lookup("start") will return the char[] array ['a', 'l', 'p', 'h', 'a']. <p> The second kind of mapping is between character values and UnicodeMatcher objects. This is used by RuleBasedTransliterator, which uses characters in the private use area to represent objects such as UnicodeSets. If U+E015 is mapped to the UnicodeSet [a-z], then lookupMatcher(0xE015) will return the UnicodeSet [a-z]. <p> Finally, a symbol table defines parsing behavior for symbolic names. All symbolic names start with the SYMBOL_REF character. When a parser encounters this character, it calls parseReference() with the position immediately following the SYMBOL_REF. The symbol table parses the name, if there is one, and returns it. </p>\n<pre><code>public interface SymbolTable\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/SymbolTable.html
TimeZoneFormat.GMTOffsetPatternType	A										<section class="prog__container"><p> Offset pattern type enum.</p>\n<pre><code>public static final enum TimeZoneFormat.GMTOffsetPatternType\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/TimeZoneFormat.GMTOffsetPatternType.html
TimeZoneFormat	A										<section class="prog__container"><p> <pre><code> TimeZoneFormat </code></pre> supports time zone display name formatting and parsing. An instance of TimeZoneFormat works as a subformatter of <pre><code> <a href="https://developer.android.com/reference/android/icu/text/SimpleDateFormat.html"> SimpleDateFormat </a> </code></pre> , but you can also directly get a new instance of <pre><code> TimeZoneFormat </code></pre> and formatting/parsing time zone display names. <p> ICU implements the time zone display names defined by <a href="http://www.unicode.org/reports/tr35/"> UTS#35 Unicode Locale Data Markup Language (LDML) </a> . <pre><code> <a href="https://developer.android.com/reference/android/icu/text/TimeZoneNames.html"> TimeZoneNames </a> </code></pre> represents the time zone display name data model and this class implements the algorithm for actual formatting and parsing. </p>\n<pre><code>public class TimeZoneFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/TimeZoneFormat.html
TimeZoneFormat.ParseOption	A										<section class="prog__container"><p> Parse option enum, used for specifying optional parse behavior.</p>\n<pre><code>public static final enum TimeZoneFormat.ParseOption\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/TimeZoneFormat.ParseOption.html
TimeZoneFormat.Style	A										<section class="prog__container"><p> Time zone display format style enum used by format/parse APIs in <pre><code> TimeZoneFormat </code></pre> .</p>\n<pre><code>public static final enum TimeZoneFormat.Style\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/TimeZoneFormat.Style.html
TimeZoneFormat.TimeType	A										<section class="prog__container"><p> Time type enum used for receiving time type (standard time, daylight time or unknown) in <pre><code> TimeZoneFormat </code></pre> APIs.</p>\n<pre><code>public static final enum TimeZoneFormat.TimeType\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/TimeZoneFormat.TimeType.html
TimeZoneNames	A										<section class="prog__container"><p> <pre><code> TimeZoneNames </code></pre> is an abstract class representing the time zone display name data model defined by <a href="http://www.unicode.org/reports/tr35/"> UTS#35 Unicode Locale Data Markup Language (LDML) </a> . The model defines meta zone, which is used for storing a set of display names. A meta zone can be shared by multiple time zones. Also a time zone may have multiple meta zone historic mappings. <p> For example, people in the United States refer the zone used by the east part of North America as "Eastern Time". The tz database contains multiple time zones "America/New_York", "America/Detroit", "America/Montreal" and some others that belong to "Eastern Time". However, assigning different display names to these time zones does not make much sense for most of people. <p> In <a href="http://cldr.unicode.org/"> CLDR </a> (which uses LDML for representing locale data), the display name "Eastern Time" is stored as long generic display name of a meta zone identified by the ID "America_Eastern". Then, there is another table maintaining the historic mapping to meta zones for each time zone. The time zones in the above example ("America/New_York", "America/Detroit"...) are mapped to the meta zone "America_Eastern". <p> Sometimes, a time zone is mapped to a different time zone in the past. For example, "America/Indiana/Knox" had been moving "Eastern Time" and "Central Time" back and forth. Therefore, it is necessary that time zone to meta zones mapping data are stored by date range. <p> <b> Note: </b> <p> <pre><code> <a href="https://developer.android.com/reference/android/icu/text/TimeZoneFormat.html"> TimeZoneFormat </a> </code></pre> assumes an instance of <pre><code> TimeZoneNames </code></pre> is immutable. If you want to provide your own <pre><code> TimeZoneNames </code></pre> implementation and use it with <pre><code> <a href="https://developer.android.com/reference/android/icu/text/TimeZoneFormat.html"> TimeZoneFormat </a> </code></pre> , you must follow the contract. <p> The methods in this class assume that time zone IDs are already canonicalized. For example, you may not get proper result returned by a method with time zone ID "America/Indiana/Indianapolis", because it's not a canonical time zone ID (the canonical time zone ID for the time zone is "America/Indianapolis". See <pre><code> <a href="https://developer.android.com/reference/android/icu/util/TimeZone.html#getCanonicalID(java.lang.String)"> getCanonicalID(String) </a> </code></pre> about ICU canonical time zone IDs. <p> In CLDR, most of time zone display names except location names are provided through meta zones. But a time zone may have a specific name that is not shared with other time zones. For example, time zone "Europe/London" has English long name for standard time "Greenwich Mean Time", which is also shared with other time zones. However, the long name for daylight saving time is "British Summer Time", which is only used for "Europe/London". <p> <pre><code> <a href="https://developer.android.com/reference/android/icu/text/TimeZoneNames.html#getTimeZoneDisplayName(java.lang.String, android.icu.text.TimeZoneNames.NameType)"> getTimeZoneDisplayName(String, NameType) </a> </code></pre> is designed for accessing a name only used by a single time zone. But is not necessarily mean that a subclass implementation use the same model with CLDR. A subclass implementation may provide time zone names only through <pre><code> <a href="https://developer.android.com/reference/android/icu/text/TimeZoneNames.html#getTimeZoneDisplayName(java.lang.String, android.icu.text.TimeZoneNames.NameType)"> getTimeZoneDisplayName(String, NameType) </a> </code></pre> , or only through <pre><code> <a href="https://developer.android.com/reference/android/icu/text/TimeZoneNames.html#getMetaZoneDisplayName(java.lang.String, android.icu.text.TimeZoneNames.NameType)"> getMetaZoneDisplayName(String, NameType) </a> </code></pre> , or both. <p> The default <pre><code> TimeZoneNames </code></pre> implementation returned by <pre><code> <a href="https://developer.android.com/reference/android/icu/text/TimeZoneNames.html#getInstance(android.icu.util.ULocale)"> getInstance(ULocale) </a> </code></pre> uses the locale data imported from CLDR. In CLDR, set of meta zone IDs and mappings between zone IDs and meta zone IDs are shared by all locales. Therefore, the behavior of <pre><code> <a href="https://developer.android.com/reference/android/icu/text/TimeZoneNames.html#getAvailableMetaZoneIDs()"> getAvailableMetaZoneIDs() </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/icu/text/TimeZoneNames.html#getAvailableMetaZoneIDs(java.lang.String)"> getAvailableMetaZoneIDs(String) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/icu/text/TimeZoneNames.html#getMetaZoneID(java.lang.String, long)"> getMetaZoneID(String, long) </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/icu/text/TimeZoneNames.html#getReferenceZoneID(java.lang.String, java.lang.String)"> getReferenceZoneID(String, String) </a> </code></pre> won't be changed no matter what locale is used for getting an instance of <pre><code> TimeZoneNames </code></pre> . </p>\n<pre><code>public abstract class TimeZoneNames\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/TimeZoneNames.html
TimeZoneNames.NameType	A										<section class="prog__container"><p> Time zone display name types</p>\n<pre><code>public static final enum TimeZoneNames.NameType\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/TimeZoneNames.NameType.html
UCharacterIterator	A										<section class="prog__container"><p> Abstract class that defines an API for iteration on text objects.This is an interface for forward and backward iteration and random access into a text object. Forward iteration is done with post-increment and backward iteration is done with pre-decrement semantics, while the <pre><code> java.text.CharacterIterator </code></pre> interface methods provided forward iteration with "pre-increment" and backward iteration with pre-decrement semantics. This API is more efficient for forward iteration over code points. The other major difference is that this API can do both code unit and code point iteration, <pre><code> java.text.CharacterIterator </code></pre> can only iterate over code units and is limited to BMP (0 - 0xFFFF)</p>\n<pre><code>public abstract class UCharacterIterator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/UCharacterIterator.html
UFormat	A										<section class="prog__container"><p> An abstract class that extends <pre><code> <a href="https://developer.android.com/reference/java/text/Format.html"> Format </a> </code></pre> to provide additional ICU protocol, specifically, the <tt> getLocale() </tt> API. All ICU format classes are subclasses of this class.</p>\n<pre><code>public abstract class UFormat\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/UFormat.html
UnicodeFilter	A										<section class="prog__container"><p> <pre><code> UnicodeFilter </code></pre> defines a protocol for selecting a subset of the full range (U+0000 to U+FFFF) of Unicode characters.</p>\n<pre><code>public abstract class UnicodeFilter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeFilter.html
UnicodeMatcher	A										<section class="prog__container"><p> <pre><code> UnicodeMatcher </code></pre> defines a protocol for objects that can match a range of characters in a Replaceable string.</p>\n<pre><code>public interface UnicodeMatcher\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeMatcher.html
UnicodeSet.ComparisonStyle	A										<section class="prog__container"><p> Comparison style enums used by <pre><code> <a href="https://developer.android.com/reference/android/icu/text/UnicodeSet.html#compareTo(android.icu.text.UnicodeSet, android.icu.text.UnicodeSet.ComparisonStyle)"> compareTo(UnicodeSet, ComparisonStyle) </a> </code></pre> .</p>\n<pre><code>public static final enum UnicodeSet.ComparisonStyle\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeSet.ComparisonStyle.html
UnicodeSet.EntryRange	A										<section class="prog__container"><p> A struct-like class used for iteration through ranges, for faster iteration than by String. Read about the restrictions on usage in <pre><code> <a href="https://developer.android.com/reference/android/icu/text/UnicodeSet.html#ranges()"> ranges() </a> </code></pre> .</p>\n<pre><code>public static class UnicodeSet.EntryRange\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeSet.EntryRange.html
UnicodeSet	A										<section class="prog__container"><p> A mutable set of Unicode characters and multicharacter strings. Objects of this class represent <em> character classes </em> used in regular expressions. A character specifies a subset of Unicode code points. Legal code points are U+0000 to U+10FFFF, inclusive. Note: method freeze() will not only make the set immutable, but also makes important methods much higher performance: contains(c), containsNone(...), span(...), spanBack(...) etc. After the object is frozen, any subsequent call that wants to change the object will throw UnsupportedOperationException. <p> The UnicodeSet class is not designed to be subclassed. <p> <pre><code> UnicodeSet </code></pre> supports two APIs. The first is the <em> operand </em> API that allows the caller to modify the value of a <pre><code> UnicodeSet </code></pre> object. It conforms to Java 2's <pre><code> java.util.Set </code></pre> interface, although <pre><code> UnicodeSet </code></pre> does not actually implement that interface. All methods of <pre><code> Set </code></pre> are supported, with the modification that they take a character range or single character instead of an <pre><code> Object </code></pre> , and they take a <pre><code> UnicodeSet </code></pre> instead of a <pre><code> Collection </code></pre> . The operand API may be thought of in terms of boolean logic: a boolean OR is implemented by <pre><code> add </code></pre> , a boolean AND is implemented by <pre><code> retain </code></pre> , a boolean XOR is implemented by <pre><code> complement </code></pre> taking an argument, and a boolean NOT is implemented by <pre><code> complement </code></pre> with no argument. In terms of traditional set theory function names, <pre><code> add </code></pre> is a union, <pre><code> retain </code></pre> is an intersection, <pre><code> remove </code></pre> is an asymmetric difference, and <pre><code> complement </code></pre> with no argument is a set complement with respect to the superset range <pre><code> MIN_VALUE-MAX_VALUE </code></pre> <p> The second API is the <pre><code> applyPattern() </code></pre> / <pre><code> toPattern() </code></pre> API from the <pre><code> java.text.Format </code></pre> -derived classes. Unlike the methods that add characters, add categories, and control the logic of the set, the method <pre><code> applyPattern() </code></pre> sets all attributes of a <pre><code> UnicodeSet </code></pre> at once, based on a string pattern. <p> <b> Pattern syntax </b> </p>\n<pre><code>public class UnicodeSet\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeSet.html
UnicodeSet.SpanCondition	A										<section class="prog__container"><p> Argument values for whether span() and similar functions continue while the current character is contained vs. not contained in the set. <p> The functionality is straightforward for sets with only single code points, without strings (which is the common case): <ul> <li> CONTAINED and SIMPLE work the same. <li> CONTAINED and SIMPLE are inverses of NOT_CONTAINED. <li> span() and spanBack() partition any string the same way when alternating between span(NOT_CONTAINED) and span(either "contained" condition). <li> Using a complemented (inverted) set and the opposite span conditions yields the same results. </li> </li> </li> </li> </ul> When a set contains multi-code point strings, then these statements may not be true, depending on the strings in the set (for example, whether they overlap with each other) and the string that is processed. For a set with strings: <ul> <li> The complement of the set contains the opposite set of code points, but the same set of strings. Therefore, complementing both the set and the span conditions may yield different results. <li> When starting spans at different positions in a string (span(s, ...) vs. span(s+1, ...)) the ends of the spans may be different because a set string may start before the later position. <li> span(SIMPLE) may be shorter than span(CONTAINED) because it will not recursively try all possible paths. For example, with a set which contains the three strings "xy", "xya" and "ax", span("xyax", CONTAINED) will return 4 but span("xyax", SIMPLE) will return 3. span(SIMPLE) will never be longer than span(CONTAINED). <li> With either "contained" condition, span() and spanBack() may partition a string in different ways. For example, with a set which contains the two strings "ab" and "ba", and when processing the string "aba", span() will yield contained/not-contained boundaries of { 0, 2, 3 } while spanBack() will yield boundaries of { 0, 1, 3 }. </li> </li> </li> </li> </ul> Note: If it is important to get the same boundaries whether iterating forward or backward through a string, then either only span() should be used and the boundaries cached for backward operation, or an ICU BreakIterator could be used. <p> Note: Unpaired surrogates are treated like surrogate code points. Similarly, set strings match only on code point boundaries, never in the middle of a surrogate pair. </p>\n<pre><code>public static final enum UnicodeSet.SpanCondition\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeSet.SpanCondition.html
UnicodeSetIterator	A										<section class="prog__container"><p> UnicodeSetIterator iterates over the contents of a UnicodeSet. It iterates over either code points or code point ranges. After all code points or ranges have been returned, it returns the multicharacter strings of the UnicodSet, if any. <p> To iterate over code points and multicharacter strings, use a loop like this: <pre> for (UnicodeSetIterator it = new UnicodeSetIterator(set); it.next();) { processString(it.getString()); } </pre> <p> To iterate over code point ranges, use a loop like this: <pre> for (UnicodeSetIterator it = new UnicodeSetIterator(set); it.nextRange();) { if (it.codepoint != UnicodeSetIterator.IS_STRING) { processCodepointRange(it.codepoint, it.codepointEnd); } else { processString(it.getString()); } } </pre> <p> <b> Warning: </b> For speed, UnicodeSet iteration does not check for concurrent modification. Do not alter the UnicodeSet while iterating. </p>\n<pre><code>public class UnicodeSetIterator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeSetIterator.html
UnicodeSetSpanner.CountMethod	A										<section class="prog__container"><p> Options for replaceFrom and countIn to control how to treat each matched span. It is similar to whether one is replacing [abc] by x, or [abc]* by x.</p>\n<pre><code>public static final enum UnicodeSetSpanner.CountMethod\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeSetSpanner.CountMethod.html
UnicodeSetSpanner	A										<section class="prog__container"><p> A helper class used to count, replace, and trim CharSequences based on UnicodeSet matches. An instance is immutable (and thus thread-safe) iff the source UnicodeSet is frozen. <p> <b> Note: </b> The counting, deletion, and replacement depend on alternating a <pre><code> <a href="https://developer.android.com/reference/android/icu/text/UnicodeSet.SpanCondition.html"> UnicodeSet.SpanCondition </a> </code></pre> with its inverse. That is, the code spans, then spans for the inverse, then spans, and so on. For the inverse, the following mapping is used: <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/icu/text/UnicodeSet.SpanCondition.html#SIMPLE"> SIMPLE </a> </code></pre> → <pre><code> <a href="https://developer.android.com/reference/android/icu/text/UnicodeSet.SpanCondition.html#NOT_CONTAINED"> NOT_CONTAINED </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/icu/text/UnicodeSet.SpanCondition.html#CONTAINED"> CONTAINED </a> </code></pre> → <pre><code> <a href="https://developer.android.com/reference/android/icu/text/UnicodeSet.SpanCondition.html#NOT_CONTAINED"> NOT_CONTAINED </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/icu/text/UnicodeSet.SpanCondition.html#NOT_CONTAINED"> NOT_CONTAINED </a> </code></pre> → <pre><code> <a href="https://developer.android.com/reference/android/icu/text/UnicodeSet.SpanCondition.html#SIMPLE"> SIMPLE </a> </code></pre> </li> </ul> These are actually not complete inverses. However, the alternating works because there are no gaps. For example, with [a{ab}{bc}], you get the following behavior when scanning forward: <table border="1"> <tr> <th> SIMPLE </th> <td> xxx[ab]cyyy </td> </tr> <tr> <th> CONTAINED </th> <td> xxx[abc]yyy </td> </tr> <tr> <th> NOT_CONTAINED </th> <td> [xxx]ab[cyyy] </td> </tr> </table> <p> So here is what happens when you alternate: <table border="1"> <tr> <th> start </th> <td> |xxxabcyyy </td> </tr> <tr> <th> NOT_CONTAINED </th> <td> xxx|abcyyy </td> </tr> <tr> <th> CONTAINED </th> <td> xxxabc|yyy </td> </tr> <tr> <th> NOT_CONTAINED </th> <td> xxxabcyyy| </td> </tr> </table> <p> The entire string is traversed. </p>\n<pre><code>public class UnicodeSetSpanner\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeSetSpanner.html
UnicodeSetSpanner.TrimOption	A										<section class="prog__container"><p> Options for the trim() method</p>\n<pre><code>public static final enum UnicodeSetSpanner.TrimOption\n</code></pre></section>	https://developer.android.com/reference/android/icu/text/UnicodeSetSpanner.TrimOption.html
BuddhistCalendar	A										<section class="prog__container"><p> <pre><code> BuddhistCalendar </code></pre> is a subclass of <pre><code> GregorianCalendar </code></pre> that numbers years since the birth of the Buddha. This is the civil calendar in some predominantly Buddhist countries such as Thailand, and it is used for religious purposes elsewhere. <p> The Buddhist calendar is identical to the Gregorian calendar in all respects except for the year and era. Years are numbered since the birth of the Buddha in 543 BC (Gregorian), so that 1 AD (Gregorian) is equivalent to 544 BE (Buddhist Era) and 1998 AD is 2541 BE. <p> The Buddhist Calendar has only one allowable era: <pre><code> BE </code></pre> . If the calendar is not in lenient mode (see <pre><code> setLenient </code></pre> ), dates before 1/1/1 BE are rejected with an <pre><code> IllegalArgumentException </code></pre> . <p> This class should not be subclassed. </p>\n<pre><code>public class BuddhistCalendar\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/BuddhistCalendar.html
Calendar	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> <a href="https://developer.android.com/reference/java/util/Calendar.html"> Calendar </a> </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> <pre><code> Calendar </code></pre> is an abstract base class for converting between a <pre><code> Date </code></pre> object and a set of integer fields such as <pre><code> YEAR </code></pre> , <pre><code> MONTH </code></pre> , <pre><code> DAY </code></pre> , <pre><code> HOUR </code></pre> , and so on. (A <pre><code> Date </code></pre> object represents a specific instant in time with millisecond precision. See <pre><code> <a href="https://developer.android.com/reference/java/util/Date.html"> Date </a> </code></pre> for information about the <pre><code> Date </code></pre> class.) <p> Subclasses of <pre><code> Calendar </code></pre> interpret a <pre><code> Date </code></pre> according to the rules of a specific calendar system. ICU4J contains several subclasses implementing different international calendar systems. <p> Like other locale-sensitive classes, <pre><code> Calendar </code></pre> provides a class method, <pre><code> getInstance </code></pre> , for getting a generally useful object of this type. <pre><code> Calendar </code></pre> 's <pre><code> getInstance </code></pre> method returns a calendar of a type appropriate to the locale, whose time fields have been initialized with the current date and time: <blockquote> <pre>Calendar rightNow = Calendar.getInstance()</pre> </blockquote> <p> When a <pre><code> ULocale </code></pre> is used by <pre><code> getInstance </code></pre> , its ' <pre><code> calendar </code></pre> ' tag and value are retrieved if present. If a recognized value is supplied, a calendar is provided and configured as appropriate. Currently recognized tags are "buddhist", "chinese", "coptic", "ethiopic", "gregorian", "hebrew", "islamic", "islamic-civil", "japanese", and "roc". For example: <blockquote> <pre>Calendar cal = Calendar.getInstance(new ULocale("en_US@calendar=japanese"));</pre> </blockquote> will return an instance of JapaneseCalendar (using en_US conventions for minimum days in first week, start day of week, et cetera). <p> A <pre><code> Calendar </code></pre> object can produce all the time field values needed to implement the date-time formatting for a particular language and calendar style (for example, Japanese-Gregorian, Japanese-Traditional). <pre><code> Calendar </code></pre> defines the range of values returned by certain fields, as well as their meaning. For example, the first month of the year has value <pre><code> MONTH </code></pre> == <pre><code> JANUARY </code></pre> for all calendars. Other values are defined by the concrete subclass, such as <pre><code> ERA </code></pre> and <pre><code> YEAR </code></pre> . See individual field documentation and subclass documentation for details. <p> When a <pre><code> Calendar </code></pre> is <em> lenient </em> , it accepts a wider range of field values than it produces. For example, a lenient <pre><code> GregorianCalendar </code></pre> interprets <pre><code> MONTH </code></pre> == <pre><code> JANUARY </code></pre> , <pre><code> DAY_OF_MONTH </code></pre> == 32 as February 1. A non-lenient <pre><code> GregorianCalendar </code></pre> throws an exception when given out-of-range field settings. When calendars recompute field values for return by <pre><code> get() </code></pre> , they normalize them. For example, a <pre><code> GregorianCalendar </code></pre> always produces <pre><code> DAY_OF_MONTH </code></pre> values between 1 and the length of the month. <p> <pre><code> Calendar </code></pre> defines a locale-specific seven day week using two parameters: the first day of the week and the minimal days in first week (from 1 to 7). These numbers are taken from the locale resource data when a <pre><code> Calendar </code></pre> is constructed. They may also be specified explicitly through the API. <p> When setting or getting the <pre><code> WEEK_OF_MONTH </code></pre> or <pre><code> WEEK_OF_YEAR </code></pre> fields, <pre><code> Calendar </code></pre> must determine the first week of the month or year as a reference point. The first week of a month or year is defined as the earliest seven day period beginning on <pre><code> getFirstDayOfWeek() </code></pre> and containing at least <pre><code> getMinimalDaysInFirstWeek() </code></pre> days of that month or year. Weeks numbered ..., -1, 0 precede the first week; weeks numbered 2, 3,... follow it. Note that the normalized numbering returned by <pre><code> get() </code></pre> may be different. For example, a specific <pre><code> Calendar </code></pre> subclass may designate the week before week 1 of a year as week <em> n </em> of the previous year. <p> When computing a <pre><code> Date </code></pre> from time fields, some special circumstances may arise: there may be insufficient information to compute the <pre><code> Date </code></pre> (such as only year and month but no day in the month), there may be inconsistent information (such as "Tuesday, July 15, 1996" -- July 15, 1996 is actually a Monday), or the input time might be ambiguous because of time zone transition. <p> <strong> Insufficient information. </strong> The calendar will use default information to specify the missing fields. This may vary by calendar; for the Gregorian calendar, the default for a field is the same as that of the start of the epoch: i.e., YEAR = 1970, MONTH = JANUARY, DATE = 1, etc. <p> <strong> Inconsistent information. </strong> If fields conflict, the calendar will give preference to fields set more recently. For example, when determining the day, the calendar will look for one of the following combinations of fields. The most recent combination, as determined by the most recently set single field, will be used. <blockquote> <pre> MONTH + DAY_OF_MONTH MONTH + WEEK_OF_MONTH + DAY_OF_WEEK MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK DAY_OF_YEAR DAY_OF_WEEK + WEEK_OF_YEAR</pre> </blockquote> For the time of day: <blockquote> <pre> HOUR_OF_DAY AM_PM + HOUR</pre> </blockquote> <p> <strong> Ambiguous Wall Clock Time. </strong> When time offset from UTC has changed, it produces an ambiguous time slot around the transition. For example, many US locations observe daylight saving time. On the date switching to daylight saving time in US, wall clock time jumps from 12:59 AM (standard) to 2:00 AM (daylight). Therefore, wall clock time from 1:00 AM to 1:59 AM do not exist on the date. When the input wall time fall into this missing time slot, the ICU Calendar resolves the time using the UTC offset before the transition by default. In this example, 1:30 AM is interpreted as 1:30 AM standard time (non-exist), so the final result will be 2:30 AM daylight time. <p> On the date switching back to standard time, wall clock time is moved back one hour at 2:00 AM. So wall clock time from 1:00 AM to 1:59 AM occur twice. In this case, the ICU Calendar resolves the time using the UTC offset after the transition by default. For example, 1:30 AM on the date is resolved as 1:30 AM standard time. <p> Ambiguous wall clock time resolution behaviors can be customized by Calendar APIs <pre><code> <a href="https://developer.android.com/reference/android/icu/util/Calendar.html#setRepeatedWallTimeOption(int)"> setRepeatedWallTimeOption(int) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/icu/util/Calendar.html#setSkippedWallTimeOption(int)"> setSkippedWallTimeOption(int) </a> </code></pre> . These methods are available in ICU 49 or later versions. <p> <strong> Note: </strong> for some non-Gregorian calendars, different fields may be necessary for complete disambiguation. For example, a full specification of the historial Arabic astronomical calendar requires year, month, day-of-month <em> and </em> day-of-week in some cases. <p> <strong> Note: </strong> There are certain possible ambiguities in interpretation of certain singular times, which are resolved in the following ways: <ol> <li> 24:00:00 "belongs" to the following day. That is, 23:59 on Dec 31, 1969 &lt; 24:00 on Jan 1, 1970 &lt; 24:01:00 on Jan 1, 1970 <li> Although historically not precise, midnight also belongs to "am", and noon belongs to "pm", so on the same day, 12:00 am (midnight) &lt; 12:01 am, and 12:00 pm (noon) &lt; 12:01 pm </li> </li> </ol> <p> The date or time format strings are not part of the definition of a calendar, as those must be modifiable or overridable by the user at runtime. Use <pre><code> <a href="https://developer.android.com/reference/android/icu/text/DateFormat.html"> DateFormat </a> </code></pre> to format dates. <p> <strong> Field manipulation methods </strong> </p>\n<pre><code>public abstract class Calendar\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/util/Calendar.html
Calendar.WeekData	A										<section class="prog__container"><p> Simple, immutable struct-like class for access to the CLDR weekend data.</p>\n<pre><code>public static final class Calendar.WeekData\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/util/Calendar.WeekData.html
ChineseCalendar	A										<section class="prog__container"><p> <pre><code> ChineseCalendar </code></pre> is a concrete subclass of <pre><code> <a href="https://developer.android.com/reference/android/icu/util/Calendar.html"> Calendar </a> </code></pre> that implements a traditional Chinese calendar. The traditional Chinese calendar is a lunisolar calendar: Each month starts on a new moon, and the months are numbered according to solar events, specifically, to guarantee that month 11 always contains the winter solstice. In order to accomplish this, leap months are inserted in certain years. Leap months are numbered the same as the month they follow. The decision of which month is a leap month depends on the relative movements of the sun and moon. <p> All astronomical computations are performed with respect to a time zone of GMT+8:00 and a longitude of 120 degrees east. Although some calendars implement a historically more accurate convention of using Beijing's local longitude (116 degrees 25 minutes east) and time zone (GMT+7:45:40) for dates before 1929, we do not implement this here. <p> Years are counted in two different ways in the Chinese calendar. The first method is by sequential numbering from the 61st year of the reign of Huang Di, 2637 BCE, which is designated year 1 on the Chinese calendar. The second method uses 60-year cycles from the same starting point, which is designated year 1 of cycle 1. In this class, the <pre><code> EXTENDED_YEAR </code></pre> field contains the sequential year count. The <pre><code> ERA </code></pre> field contains the cycle number, and the <pre><code> YEAR </code></pre> field contains the year of the cycle, a value between 1 and 60. <p> There is some variation in what is considered the starting point of the calendar, with some sources starting in the first year of the reign of Huang Di, rather than the 61st. This gives continuous year numbers 60 years greater and cycle numbers one greater than what this class implements. <p> Because <pre><code> ChineseCalendar </code></pre> defines an additional field and redefines the way the <pre><code> ERA </code></pre> field is used, it requires a new format class, <pre><code> ChineseDateFormat </code></pre> . As always, use the methods <pre><code> DateFormat.getXxxInstance(Calendar cal,...) </code></pre> to obtain a formatter for this calendar. <p> References: <ul> <li> Dershowitz and Reingold, <i> Calendrical Calculations </i> , Cambridge University Press, 1997 </li> <li> Helmer Aslaksen's <a href="http://www.math.nus.edu.sg/aslaksen/calendar/chinese.shtml"> Chinese Calendar page </a> </li> <li> The <a href="http://www.tondering.dk/claus/calendar.html"> Calendar FAQ </a> </li> </ul> <p> This class should not be subclassed. </p>\n<pre><code>public class ChineseCalendar\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/ChineseCalendar.html
CopticCalendar	A										<section class="prog__container"><p> Implement the Coptic calendar system. <p> CopticCalendar usually should be instantiated using <pre><code> <a href="https://developer.android.com/reference/android/icu/util/Calendar.html#getInstance(android.icu.util.ULocale)"> getInstance(ULocale) </a> </code></pre> passing in a <pre><code> ULocale </code></pre> with the tag <pre><code> "@calendar=coptic" </code></pre> . </p>\n<pre><code>public final class CopticCalendar\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/CopticCalendar.html
Currency.CurrencyUsage	A										<section class="prog__container"><p> Currency Usage used for Decimal Format</p>\n<pre><code>public static final enum Currency.CurrencyUsage\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/Currency.CurrencyUsage.html
Currency	A										<section class="prog__container"><p> A class encapsulating a currency, as defined by ISO 4217. A <tt> Currency </tt> object can be created given a <tt> Locale </tt> or given an ISO 4217 code. Once created, the <tt> Currency </tt> object can return various data necessary to its proper display: <ul> <li> A display symbol, for a specific locale <li> The number of fraction digits to display <li> A rounding increment </li> </li> </li> </ul> The <tt> DecimalFormat </tt> class uses these data to display currencies. <p> Note: This class deliberately resembles <tt> java.util.Currency </tt> but it has a completely independent implementation, and adds features not present in the JDK. </p>\n<pre><code>public class Currency\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/Currency.html
CurrencyAmount	A										<section class="prog__container"><p> An amount of currency, consisting of a Number and a Currency. CurrencyAmount objects are immutable.</p>\n<pre><code>public class CurrencyAmount\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/CurrencyAmount.html
DateInterval	A										<section class="prog__container"><p> This class represents date interval. It is a pair of long representing from date 1 to date 2.</p>\n<pre><code>public final class DateInterval\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/util/DateInterval.html
Freezable	A										<section class="prog__container"><p> Provides a flexible mechanism for controlling access, without requiring that a class be immutable. Once frozen, an object can never be unfrozen, so it is thread-safe from that point onward. Once the object has been frozen, it must guarantee that no changes can be made to it. Any attempt to alter it must raise an UnsupportedOperationException exception. This means that when the object returns internal objects, or if anyone has references to those internal objects, that those internal objects must either be immutable, or must also raise exceptions if any attempt to modify them is made. Of course, the object can return clones of internal objects, since those are safe. </p>\n<pre><code>public interface Freezable\nimplements <a href="https://developer.android.com/reference/java/lang/Cloneable.html">Cloneable</a></code></pre></section>	https://developer.android.com/reference/android/icu/util/Freezable.html
GregorianCalendar	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> <a href="https://developer.android.com/reference/java/util/GregorianCalendar.html"> GregorianCalendar </a> </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> <pre><code> GregorianCalendar </code></pre> is a concrete subclass of <pre><code> <a href="https://developer.android.com/reference/android/icu/util/Calendar.html"> Calendar </a> </code></pre> and provides the standard calendar used by most of the world. <p> The standard (Gregorian) calendar has 2 eras, BC and AD. <p> This implementation handles a single discontinuity, which corresponds by default to the date the Gregorian calendar was instituted (October 15, 1582 in some countries, later in others). The cutover date may be changed by the caller by calling <pre><code> setGregorianChange() </code></pre> . <p> Historically, in those countries which adopted the Gregorian calendar first, October 4, 1582 was thus followed by October 15, 1582. This calendar models this correctly. Before the Gregorian cutover, <pre><code> GregorianCalendar </code></pre> implements the Julian calendar. The only difference between the Gregorian and the Julian calendar is the leap year rule. The Julian calendar specifies leap years every four years, whereas the Gregorian calendar omits century years which are not divisible by 400. <p> <pre><code> GregorianCalendar </code></pre> implements <em> proleptic </em> Gregorian and Julian calendars. That is, dates are computed by extrapolating the current rules indefinitely far backward and forward in time. As a result, <pre><code> GregorianCalendar </code></pre> may be used for all years to generate meaningful and consistent results. However, dates obtained using <pre><code> GregorianCalendar </code></pre> are historically accurate only from March 1, 4 AD onward, when modern Julian calendar rules were adopted. Before this date, leap year rules were applied irregularly, and before 45 BC the Julian calendar did not even exist. <p> Prior to the institution of the Gregorian calendar, New Year's Day was March 25. To avoid confusion, this calendar always uses January 1. A manual adjustment may be made if desired for dates that are prior to the Gregorian changeover and which fall between January 1 and March 24. <p> Values calculated for the <pre><code> WEEK_OF_YEAR </code></pre> field range from 1 to 53. Week 1 for a year is the earliest seven day period starting on <pre><code> getFirstDayOfWeek() </code></pre> that contains at least <pre><code> getMinimalDaysInFirstWeek() </code></pre> days from that year. It thus depends on the values of <pre><code> getMinimalDaysInFirstWeek() </code></pre> , <pre><code> getFirstDayOfWeek() </code></pre> , and the day of the week of January 1. Weeks between week 1 of one year and week 1 of the following year are numbered sequentially from 2 to 52 or 53 (as needed). <p> For example, January 1, 1998 was a Thursday. If <pre><code> getFirstDayOfWeek() </code></pre> is <pre><code> MONDAY </code></pre> and <pre><code> getMinimalDaysInFirstWeek() </code></pre> is 4 (these are the values reflecting ISO 8601 and many national standards), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. If, however, <pre><code> getFirstDayOfWeek() </code></pre> is <pre><code> SUNDAY </code></pre> , then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three days of 1998 then are part of week 53 of 1997. <p> Values calculated for the <pre><code> WEEK_OF_MONTH </code></pre> field range from 0 or 1 to 4 or 5. Week 1 of a month (the days with <pre><code> WEEK_OF_MONTH = 1 </code></pre> ) is the earliest set of at least <pre><code> getMinimalDaysInFirstWeek() </code></pre> contiguous days in that month, ending on the day before <pre><code> getFirstDayOfWeek() </code></pre> . Unlike week 1 of a year, week 1 of a month may be shorter than 7 days, need not start on <pre><code> getFirstDayOfWeek() </code></pre> , and will not include days of the previous month. Days of a month before week 1 have a <pre><code> WEEK_OF_MONTH </code></pre> of 0. <p> For example, if <pre><code> getFirstDayOfWeek() </code></pre> is <pre><code> SUNDAY </code></pre> and <pre><code> getMinimalDaysInFirstWeek() </code></pre> is 4, then the first week of January 1998 is Sunday, January 4 through Saturday, January 10. These days have a <pre><code> WEEK_OF_MONTH </code></pre> of 1. Thursday, January 1 through Saturday, January 3 have a <pre><code> WEEK_OF_MONTH </code></pre> of 0. If <pre><code> getMinimalDaysInFirstWeek() </code></pre> is changed to 3, then January 1 through January 3 have a <pre><code> WEEK_OF_MONTH </code></pre> of 1. <p> <strong> Example: </strong> <blockquote> <pre> // get the supported ids for GMT-08:00 (Pacific Standard Time) String[] ids = TimeZone.getAvailableIDs(-8 * 60 * 60 * 1000); // if no ids were returned, something is wrong. get out. if (ids.length == 0) System.exit(0); // begin output System.out.println("Current Time"); // create a Pacific Standard Time time zone SimpleTimeZone pdt = new SimpleTimeZone(-8 * 60 * 60 * 1000, ids[0]); // set up rules for daylight savings time pdt.setStartRule(Calendar.MARCH, 2, Calendar.SUNDAY, 2 * 60 * 60 * 1000); pdt.setEndRule(Calendar.NOVEMBER, 1, Calendar.SUNDAY, 2 * 60 * 60 * 1000); // create a GregorianCalendar with the Pacific Daylight time zone // and the current date and time Calendar calendar = new GregorianCalendar(pdt); Date trialTime = new Date(); calendar.setTime(trialTime); // print out a bunch of interesting things System.out.println("ERA: " + calendar.get(Calendar.ERA)); System.out.println("YEAR: " + calendar.get(Calendar.YEAR)); System.out.println("MONTH: " + calendar.get(Calendar.MONTH)); System.out.println("WEEK_OF_YEAR: " + calendar.get(Calendar.WEEK_OF_YEAR)); System.out.println("WEEK_OF_MONTH: " + calendar.get(Calendar.WEEK_OF_MONTH)); System.out.println("DATE: " + calendar.get(Calendar.DATE)); System.out.println("DAY_OF_MONTH: " + calendar.get(Calendar.DAY_OF_MONTH)); System.out.println("DAY_OF_YEAR: " + calendar.get(Calendar.DAY_OF_YEAR)); System.out.println("DAY_OF_WEEK: " + calendar.get(Calendar.DAY_OF_WEEK)); System.out.println("DAY_OF_WEEK_IN_MONTH: " + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH)); System.out.println("AM_PM: " + calendar.get(Calendar.AM_PM)); System.out.println("HOUR: " + calendar.get(Calendar.HOUR)); System.out.println("HOUR_OF_DAY: " + calendar.get(Calendar.HOUR_OF_DAY)); System.out.println("MINUTE: " + calendar.get(Calendar.MINUTE)); System.out.println("SECOND: " + calendar.get(Calendar.SECOND)); System.out.println("MILLISECOND: " + calendar.get(Calendar.MILLISECOND)); System.out.println("ZONE_OFFSET: " + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000))); System.out.println("DST_OFFSET: " + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000))); System.out.println("Current Time, with hour reset to 3"); calendar.clear(Calendar.HOUR_OF_DAY); // so doesn't override calendar.set(Calendar.HOUR, 3); System.out.println("ERA: " + calendar.get(Calendar.ERA)); System.out.println("YEAR: " + calendar.get(Calendar.YEAR)); System.out.println("MONTH: " + calendar.get(Calendar.MONTH)); System.out.println("WEEK_OF_YEAR: " + calendar.get(Calendar.WEEK_OF_YEAR)); System.out.println("WEEK_OF_MONTH: " + calendar.get(Calendar.WEEK_OF_MONTH)); System.out.println("DATE: " + calendar.get(Calendar.DATE)); System.out.println("DAY_OF_MONTH: " + calendar.get(Calendar.DAY_OF_MONTH)); System.out.println("DAY_OF_YEAR: " + calendar.get(Calendar.DAY_OF_YEAR)); System.out.println("DAY_OF_WEEK: " + calendar.get(Calendar.DAY_OF_WEEK)); System.out.println("DAY_OF_WEEK_IN_MONTH: " + calendar.get(Calendar.DAY_OF_WEEK_IN_MONTH)); System.out.println("AM_PM: " + calendar.get(Calendar.AM_PM)); System.out.println("HOUR: " + calendar.get(Calendar.HOUR)); System.out.println("HOUR_OF_DAY: " + calendar.get(Calendar.HOUR_OF_DAY)); System.out.println("MINUTE: " + calendar.get(Calendar.MINUTE)); System.out.println("SECOND: " + calendar.get(Calendar.SECOND)); System.out.println("MILLISECOND: " + calendar.get(Calendar.MILLISECOND)); System.out.println("ZONE_OFFSET: " + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000))); // in hours System.out.println("DST_OFFSET: " + (calendar.get(Calendar.DST_OFFSET)/(60*60*1000))); // in hours</pre> </blockquote> <p> GregorianCalendar usually should be instantiated using <pre><code> <a href="https://developer.android.com/reference/android/icu/util/Calendar.html#getInstance(android.icu.util.ULocale)"> getInstance(ULocale) </a> </code></pre> passing in a <pre><code> ULocale </code></pre> with the tag <pre><code> "@calendar=gregorian" </code></pre> . </p>\n<pre><code>public class GregorianCalendar\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/GregorianCalendar.html
HebrewCalendar	A										<section class="prog__container"><p> <pre><code> HebrewCalendar </code></pre> is a subclass of <pre><code> Calendar </code></pre> that that implements the traditional Hebrew calendar. This is the civil calendar in Israel and the liturgical calendar of the Jewish faith worldwide. <p> The Hebrew calendar is lunisolar and thus has a number of interesting properties that distinguish it from the Gregorian. Months start on the day of (an arithmetic approximation of) each new moon. Since the solar year (approximately 365.24 days) is not an even multiple of the lunar month (approximately 29.53 days) an extra "leap month" is inserted in 7 out of every 19 years. To make matters even more interesting, the start of a year can be delayed by up to three days in order to prevent certain holidays from falling on the Sabbath and to prevent certain illegal year lengths. Finally, the lengths of certain months can vary depending on the number of days in the year. <p> The leap month is known as "Adar 1" and is inserted between the months of Shevat and Adar in leap years. Since the leap month does not come at the end of the year, calculations involving month numbers are particularly complex. Users of this class should make sure to use the <pre><code> <a href="https://developer.android.com/reference/android/icu/util/Calendar.html#roll(int, boolean)"> roll </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/icu/util/HebrewCalendar.html#add(int, int)"> add </a> </code></pre> methods rather than attempting to perform date arithmetic by manipulating the fields directly. <p> <b> Note: </b> In the traditional Hebrew calendar, days start at sunset. However, in order to keep the time fields in this class synchronized with those of the other calendars and with local clock time, we treat days and months as beginning at midnight, roughly 6 hours after the corresponding sunset. <p> If you are interested in more information on the rules behind the Hebrew calendar, see one of the following references: <ul> <li> " <a href="http://www.amazon.com/exec/obidos/ASIN/0521564743"> Calendrical Calculations </a> ", by Nachum Dershowitz &amp; Edward Reingold, Cambridge University Press, 1997, pages 85-91. <li> Hebrew Calendar Science and Myths, <a href="http://web.archive.org/web/20090423084613/http://www.geocities.com/Athens/1584/"> http://web.archive.org/web/20090423084613/http://www.geocities.com/Athens/1584/ </a> <li> The Calendar FAQ, <a href="http://www.faqs.org/faqs/calendars/faq/"> http://www.faqs.org/faqs/calendars/faq/ </a> </li> </li> </li> </ul> <p> This class should not be subclassed. </p>\n<pre><code>public class HebrewCalendar\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/HebrewCalendar.html
ICUUncheckedIOException	A										<section class="prog__container"><p> Unchecked version of <pre><code> <a href="https://developer.android.com/reference/java/io/IOException.html"> IOException </a> </code></pre> . Some ICU APIs do not throw the standard exception but instead wrap it into this unchecked version. <p> This currently extends <pre><code> <a href="https://developer.android.com/reference/java/lang/RuntimeException.html"> RuntimeException </a> </code></pre> , but when ICU can rely on Java 8 this class should be changed to extend java.io.UncheckedIOException instead. </p>\n<pre><code>public class ICUUncheckedIOException\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/ICUUncheckedIOException.html
IndianCalendar	A										<section class="prog__container"><p> <pre><code> IndianCalendar </code></pre> is a subclass of <pre><code> GregorianCalendar </code></pre> that numbers years since the birth of the Buddha. This is the civil calendar which is accepted by government of India as Indian National Calendar. The two calendars most widely used in India today are the Vikrama calendar followed in North India and the Shalivahana or Saka calendar which is followed in South India and Maharashtra. A variant of the Shalivahana Calendar was reformed and standardized as the Indian National calendar in 1957. <p> Some details of Indian National Calendar (to be implemented) : The Months Month Length Start date (Gregorian) ================================================= 1 Chaitra 30/31 March 22* 2 Vaisakha 31 April 21 3 Jyaistha 31 May 22 4 Asadha 31 June 22 5 Sravana 31 July 23 6 Bhadra 31 August 23 7 Asvina 30 September 23 8 Kartika 30 October 23 9 Agrahayana 30 November 22 10 Pausa 30 December 22 11 Magha 30 January 21 12 Phalguna 30 February 20 In leap years, Chaitra has 31 days and starts on March 21 instead. The leap years of Gregorian calendar and Indian National Calendar are in synchornization. So When its a leap year in Gregorian calendar then Chaitra has 31 days. The Years Years are counted in the Saka Era, which starts its year 0 in 78AD (by gregorian calendar). So for eg. 9th June 2006 by Gregorian Calendar, is same as 19th of Jyaistha in 1928 of Saka era by Indian National Calendar. <p> The Indian Calendar has only one allowable era: <pre><code> Saka Era </code></pre> . If the calendar is not in lenient mode (see <pre><code> setLenient </code></pre> ), dates before 1/1/1 Saka Era are rejected with an <pre><code> IllegalArgumentException </code></pre> . <p> This class should not be subclassed. </p>\n<pre><code>public class IndianCalendar\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/IndianCalendar.html
IslamicCalendar.CalculationType	A										<section class="prog__container"><p> enumeration of available calendar calculation types</p>\n<pre><code>public static final enum IslamicCalendar.CalculationType\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/IslamicCalendar.CalculationType.html
IslamicCalendar	A										<section class="prog__container"><p> <pre><code> IslamicCalendar </code></pre> is a subclass of <pre><code> Calendar </code></pre> that that implements the Islamic civil and religious calendars. It is used as the civil calendar in most of the Arab world and the liturgical calendar of the Islamic faith worldwide. This calendar is also known as the "Hijri" calendar, since it starts at the time of Mohammed's emigration (or "hijra") to Medinah on Thursday, July 15, 622 AD (Julian). <p> The Islamic calendar is strictly lunar, and thus an Islamic year of twelve lunar months does not correspond to the solar year used by most other calendar systems, including the Gregorian. An Islamic year is, on average, about 354 days long, so each successive Islamic year starts about 11 days earlier in the corresponding Gregorian year. <p> Each month of the calendar starts when the new moon's crescent is visible at sunset. However, in order to keep the time fields in this class synchronized with those of the other calendars and with local clock time, we treat days and months as beginning at midnight, roughly 6 hours after the corresponding sunset. <p> There are three main variants of the Islamic calendar in existence. The first is the <em> civil </em> calendar, which uses a fixed cycle of alternating 29- and 30-day months, with a leap day added to the last month of 11 out of every 30 years. This calendar is easily calculated and thus predictable in advance, so it is used as the civil calendar in a number of Arab countries. This is the default behavior of a newly-created <pre><code> IslamicCalendar </code></pre> object. <p> The Islamic <em> religious </em> calendar and Saudi Arabia's <em> Umm al-Qura </em> calendar, however, are based on the <em> observation </em> of the crescent moon. It is thus affected by the position at which the observations are made, seasonal variations in the time of sunset, the eccentricities of the moon's orbit, and even the weather at the observation site. This makes it impossible to calculate in advance, and it causes the start of a month in the religious calendar to differ from the civil calendar by up to three days. <p> Using astronomical calculations for the position of the sun and moon, the moon's illumination, and other factors, it is possible to determine the start of a lunar month with a fairly high degree of certainty. However, these calculations are extremely complicated and thus slow, so most algorithms, including the one used here, are only approximations of the true astronomical calculations. At present, the approximations used in this class are fairly simplistic; they will be improved in later versions of the code. <p> Like the Islamic religious calendar, <em> Umm al-Qura </em> is also based on the sighting method of the crescent moon but is standardized by Saudi Arabia. <p> The fixed-cycle <em> civil </em> calendar is used. <p> This class should not be subclassed. </p>\n<pre><code>public class IslamicCalendar\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/IslamicCalendar.html
JapaneseCalendar	A										<section class="prog__container"><p> <pre><code> JapaneseCalendar </code></pre> is a subclass of <pre><code> GregorianCalendar </code></pre> that numbers years and eras based on the reigns of the Japanese emperors. The Japanese calendar is identical to the Gregorian calendar in all respects except for the year and era. The ascension of each emperor to the throne begins a new era, and the years of that era are numbered starting with the year of ascension as year 1. <p> Note that in the year of an imperial ascension, there are two possible sets of year and era values: that for the old era and for the new. For example, a new era began on January 7, 1989 AD. Strictly speaking, the first six days of that year were in the Showa era, e.g. "January 6, 64 Showa", while the rest of the year was in the Heisei era, e.g. "January 7, 1 Heisei". This class handles this distinction correctly when computing dates. However, in lenient mode either form of date is acceptable as input. <p> In modern times, eras have started on January 8, 1868 AD, Gregorian (Meiji), July 30, 1912 (Taisho), December 25, 1926 (Showa), and January 7, 1989 (Heisei). Constants for these eras, suitable for use in the <pre><code> ERA </code></pre> field, are provided in this class. Note that the <em> number </em> used for each era is more or less arbitrary. Currently, the era starting in 1053 AD is era #0; however this may change in the future as we add more historical data. Use the predefined constants rather than using actual, absolute numbers. <p> This class should not be subclassed. </p>\n<pre><code>public class JapaneseCalendar\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/JapaneseCalendar.html
Measure	A										<section class="prog__container"><p> An amount of a specified unit, consisting of a Number and a Unit. For example, a length measure consists of a Number and a length unit, such as feet or meters. <p> Measure objects are parsed and formatted by subclasses of MeasureFormat. <p> Measure objects are immutable. All subclasses must guarantee that. (However, subclassing is discouraged.) </p>\n<pre><code>public class Measure\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/util/Measure.html
MeasureUnit	A										<section class="prog__container"><p> A unit such as length, mass, volume, currency, etc. A unit is coupled with a numeric amount to produce a Measure. MeasureUnit objects are immutable. All subclasses must guarantee that. (However, subclassing is discouraged.)</p>\n<pre><code>public class MeasureUnit\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/util/MeasureUnit.html
Output	A										<section class="prog__container"><p> Simple struct-like class for output parameters.</p>\n<pre><code>public class Output\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/util/Output.html
android.icu.util	A										<section class="prog__container">Interface for enabling iteration over sets of <int index, int value>, where index is the sorted integer index in ascending order and value, its associated integer value. </section>	https://developer.android.com/reference/android/icu/util/package-summary.html
RangeValueIterator.Element	A										<section class="prog__container"><p> Return result wrapper for android.icu.util.RangeValueIterator. Stores the start and limit of the continous result range and the common value all integers between [start, limit - 1] has.</p>\n<pre><code>public static class RangeValueIterator.Element\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/util/RangeValueIterator.Element.html
RangeValueIterator	A										<section class="prog__container"><p> <p> Interface for enabling iteration over sets of &lt;int index, int value&gt;, where index is the sorted integer index in ascending order and value, its associated integer value. <p> The result for each iteration is the consecutive range of &lt;int index, int value&gt; with the same value. Result is represented by &lt;start, limit, value&gt; where <ul> <li> start is the starting integer of the result range <li> limit is 1 after the maximum integer that follows start, such that all integers between start and (limit - 1), inclusive, have the same associated integer value. <li> value is the integer value that all integers from start to (limit - 1) share in common. </li> </li> </li> </ul> <p> Hence value(start) = value(start + 1) = .... = value(start + n) = .... = value(limit - 1). However value(start -1) != value(start) and value(limit) != value(start). <p> Most implementations will be created by factory methods, such as the character type iterator in UCharacter.getTypeIterator. See example below. <p> Example of use: <br> <pre> RangeValueIterator iterator = UCharacter.getTypeIterator(); RangeValueIterator.Element result = new RangeValueIterator.Element(); while (iterator.next(result)) { System.out.println("Codepoint \\u" + Integer.toHexString(result.start) + " to codepoint \\u" + Integer.toHexString(result.limit - 1) + " has the character type " + result.value); } </pre> </br> </p>\n<pre><code>public interface RangeValueIterator\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/RangeValueIterator.html
TaiwanCalendar	A										<section class="prog__container"><p> <pre><code> TaiwanCalendar </code></pre> is a subclass of <pre><code> GregorianCalendar </code></pre> that numbers years since 1912. <p> The Taiwan calendar is identical to the Gregorian calendar in all respects except for the year and era. Years are numbered since 1912 AD (Gregorian). <p> The Taiwan Calendar has one era: <pre><code> MINGUO </code></pre> . <p> This class should not be subclassed. </p>\n<pre><code>public class TaiwanCalendar\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/TaiwanCalendar.html
TimeUnit	A										<section class="prog__container"><p> Measurement unit for time units.</p>\n<pre><code>public class TimeUnit\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/TimeUnit.html
TimeZone	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> <a href="https://developer.android.com/reference/java/util/TimeZone.html"> TimeZone </a> </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. <p> <pre><code> TimeZone </code></pre> represents a time zone offset, and also computes daylight savings. <p> Typically, you get a <pre><code> TimeZone </code></pre> using <pre><code> <a href="https://developer.android.com/reference/android/icu/util/TimeZone.html#getDefault()"> getDefault() </a> </code></pre> which creates a <pre><code> TimeZone </code></pre> based on the time zone where the program is running. For example, for a program running in Japan, <pre><code> getDefault </code></pre> creates a <pre><code> TimeZone </code></pre> object based on Japanese Standard Time. <p> You can also get a <pre><code> TimeZone </code></pre> using <pre><code> <a href="https://developer.android.com/reference/android/icu/util/TimeZone.html#getTimeZone(java.lang.String)"> getTimeZone(String) </a> </code></pre> along with a time zone ID. For instance, the time zone ID for the U.S. Pacific Time zone is "America/Los_Angeles". So, you can get a U.S. Pacific Time <pre><code> TimeZone </code></pre> object with: <blockquote> <pre> TimeZone tz = TimeZone.getTimeZone("America/Los_Angeles"); </pre> </blockquote> You can use the <pre><code> <a href="https://developer.android.com/reference/android/icu/util/TimeZone.html#getAvailableIDs()"> getAvailableIDs() </a> </code></pre> method to iterate through all the supported time zone IDs, or getCanonicalID method to check if a time zone ID is supported or not. You can then choose a supported ID to get a <pre><code> TimeZone </code></pre> . If the time zone you want is not represented by one of the supported IDs, then you can create a custom time zone ID with the following syntax: <blockquote> <pre> GMT[+|-]hh[[:]mm] </pre> </blockquote> For example, you might specify GMT+14:00 as a custom time zone ID. The <pre><code> TimeZone </code></pre> that is returned when you specify a custom time zone ID uses the specified offset from GMT(=UTC) and does not observe daylight saving time. For example, you might specify GMT+14:00 as a custom time zone ID to create a TimeZone representing 14 hours ahead of GMT (with no daylight saving time). In addition, <pre><code> getCanonicalID </code></pre> can also be used to normalize a custom time zone ID. <p> For compatibility with JDK 1.1.x, some other three-letter time zone IDs (such as "PST", "CTT", "AST") are also supported. However, <strong> their use is deprecated </strong> because the same abbreviation is often used for multiple time zones (for example, "CST" could be U.S. "Central Standard Time" and "China Standard Time"), and the Java platform can then only recognize one of them. </p>\n<pre><code>public abstract class TimeZone\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/util/TimeZone.html
TimeZone.SystemTimeZoneType	A										<section class="prog__container"><p> <strong> [icu] </strong> System time zone type constants used by filtering zones in <pre><code> <a href="https://developer.android.com/reference/android/icu/util/TimeZone.html#getAvailableIDs(android.icu.util.TimeZone.SystemTimeZoneType, java.lang.String, java.lang.Integer)"> getAvailableIDs(SystemTimeZoneType, String, Integer) </a> </code></pre></p>\n<pre><code>public static final enum TimeZone.SystemTimeZoneType\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/TimeZone.SystemTimeZoneType.html
ULocale.Builder	A										<section class="prog__container"><p> <pre><code> Builder </code></pre> is used to build instances of <pre><code> ULocale </code></pre> from values configured by the setters. Unlike the <pre><code> ULocale </code></pre> constructors, the <pre><code> Builder </code></pre> checks if a value configured by a setter satisfies the syntax requirements defined by the <pre><code> ULocale </code></pre> class. A <pre><code> ULocale </code></pre> object created by a <pre><code> Builder </code></pre> is well-formed and can be transformed to a well-formed IETF BCP 47 language tag without losing information. <p> <b> Note: </b> The <pre><code> ULocale </code></pre> class does not provide any syntactic restrictions on variant, while BCP 47 requires each variant subtag to be 5 to 8 alphanumerics or a single numeric followed by 3 alphanumerics. The method <pre><code> setVariant </code></pre> throws <pre><code> IllformedLocaleException </code></pre> for a variant that does not satisfy this restriction. If it is necessary to support such a variant, use a ULocale constructor. However, keep in mind that a <pre><code> ULocale </code></pre> object created this way might lose the variant information when transformed to a BCP 47 language tag. <p> The following example shows how to create a <pre><code> Locale </code></pre> object with the <pre><code> Builder </code></pre> . <blockquote> <pre> ULocale aLocale = new Builder().setLanguage("sr").setScript("Latn").setRegion("RS").build(); </pre> </blockquote> <p> Builders can be reused; <pre><code> clear() </code></pre> resets all fields to their default values. </p>\n<pre><code>public static final class ULocale.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/util/ULocale.Builder.html
ULocale.Category	A										<section class="prog__container"><p> Enum for locale categories. These locale categories are used to get/set the default locale for the specific functionality represented by the category.</p>\n<pre><code>public static final enum ULocale.Category\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/ULocale.Category.html
ULocale	A										<section class="prog__container"><p> <strong> [icu enhancement] </strong> ICU's replacement for <pre><code> <a href="https://developer.android.com/reference/java/util/Locale.html"> Locale </a> </code></pre> . Methods, fields, and other functionality specific to ICU are labeled ' <strong> [icu] </strong> '. A class analogous to <pre><code> <a href="https://developer.android.com/reference/java/util/Locale.html"> Locale </a> </code></pre> that provides additional support for ICU protocol. In ICU 3.0 this class is enhanced to support RFC 3066 language identifiers. <p> Many classes and services in ICU follow a factory idiom, in which a factory method or object responds to a client request with an object. The request includes a locale (the <i> requested </i> locale), and the returned object is constructed using data for that locale. The system may lack data for the requested locale, in which case the locale fallback mechanism will be invoked until a populated locale is found (the <i> valid </i> locale). Furthermore, even when a populated locale is found (the <i> valid </i> locale), further fallback may be required to reach a locale containing the specific data required by the service (the <i> actual </i> locale). <p> ULocale performs <b> 'normalization' </b> and <b> 'canonicalization' </b> of locale ids. Normalization 'cleans up' ICU locale ids as follows: <ul> <li> language, script, country, variant, and keywords are properly cased <br> (lower, title, upper, upper, and lower case respectively) </br> </li> <li> hyphens used as separators are converted to underscores </li> <li> three-letter language and country ids are converted to two-letter equivalents where available </li> <li> surrounding spaces are removed from keywords and values </li> <li> if there are multiple keywords, they are put in sorted order </li> </ul> Canonicalization additionally performs the following: <ul> <li> POSIX ids are converted to ICU format IDs </li> <li> 'grandfathered' 3066 ids are converted to ICU standard form </li> <li> 'PREEURO' and 'EURO' variants are converted to currency keyword form, with the currency id appropriate to the country of the locale (for PREEURO) or EUR (for EURO). </li> </ul> All ULocale constructors automatically normalize the locale id. To handle POSIX ids, <pre><code> canonicalize </code></pre> can be called to convert the id to canonical form, or the <pre><code> canonicalInstance </code></pre> factory method can be called. <p> Note: The <i> actual </i> locale is returned correctly, but the <i> valid </i> locale is not, in most cases. </p>\n<pre><code>public final class ULocale\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/util/ULocale.html
ValueIterator.Element	A										<section class="prog__container"><p> <p> The return result container of each iteration. Stores the next integer index and its associated value Object. </p>\n<pre><code>public static final class ValueIterator.Element\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/util/ValueIterator.Element.html
ValueIterator	A										<section class="prog__container"><p> <p> Interface for enabling iteration over sets of &lt;int, Object&gt;, where int is the sorted integer index in ascending order, and Object its associated value. <p> The ValueIterator allows iterations over integer indexes in the range of Integer.MIN_VALUE to Integer.MAX_VALUE inclusive. Implementations of ValueIterator should specify their own maximum subrange within the above range that is meaningful to its applications. <p> Most implementations will be created by factory methods, such as the character name iterator in UCharacter.getNameIterator. See example below. Example of use: <br> <pre> ValueIterator iterator = UCharacter.getNameIterator(); ValueIterator.Element result = new ValueIterator.Element(); iterator.setRange(UCharacter.MIN_VALUE, UCharacter.MAX_VALUE); while (iterator.next(result)) { System.out.println("Codepoint \\u" + Integer.toHexString(result.integer) + " has the character name " + (String)result.value); } </pre> </br> </p>\n<pre><code>public interface ValueIterator\n</code></pre></section>	https://developer.android.com/reference/android/icu/util/ValueIterator.html
VersionInfo	A										<section class="prog__container"><p> Class to store version numbers of the form major.minor.milli.micro.</p>\n<pre><code>public final class VersionInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/icu/util/VersionInfo.html
AbstractInputMethodService.AbstractInputMethodImpl	A										<section class="prog__container"><p> Base class for derived classes to implement their <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/InputMethod.html"> InputMethod </a> </code></pre> interface. This takes care of basic maintenance of the input method, but most behavior must be implemented in a derived class.</p>\n<pre><code>public abstract class AbstractInputMethodService.AbstractInputMethodImpl\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/AbstractInputMethodService.AbstractInputMethodImpl.html
AbstractInputMethodService.AbstractInputMethodSessionImpl	A										<section class="prog__container"><p> Base class for derived classes to implement their <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/InputMethodSession.html"> InputMethodSession </a> </code></pre> interface. This takes care of basic maintenance of the session, but most behavior must be implemented in a derived class.</p>\n<pre><code>public abstract class AbstractInputMethodService.AbstractInputMethodSessionImpl\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/AbstractInputMethodService.AbstractInputMethodSessionImpl.html
AbstractInputMethodService	A										<section class="prog__container"><p> AbstractInputMethodService provides a abstract base class for input methods. Normal input method implementations will not derive from this directly, instead building on top of <pre><code> <a href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html"> InputMethodService </a> </code></pre> or another more complete base class. Be sure to read <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/InputMethod.html"> InputMethod </a> </code></pre> for more information on the basics of writing input methods. <p> This class combines a Service (representing the input method component to the system with the InputMethod interface that input methods must implement. This base class takes care of reporting your InputMethod from the service when clients bind to it, but provides no standard implementation of the InputMethod interface itself. Derived classes must implement that interface. </p>\n<pre><code>public abstract class AbstractInputMethodService\n</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/AbstractInputMethodService.html
ExtractEditText	A										<section class="prog__container"><p> Specialization of <pre><code> <a href="https://developer.android.com/reference/android/widget/EditText.html"> EditText </a> </code></pre> for showing and interacting with the extracted text in a full-screen input method.</p>\n<pre><code>public class ExtractEditText\n</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/ExtractEditText.html
InputMethodService	A										<section class="prog__container"><p> InputMethodService provides a standard implementation of an InputMethod, which final implementations can derive from and customize. See the base class <pre><code> <a href="https://developer.android.com/reference/android/inputmethodservice/AbstractInputMethodService.html"> AbstractInputMethodService </a> </code></pre> and the <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/InputMethod.html"> InputMethod </a> </code></pre> interface for more information on the basics of writing input methods. <p> In addition to the normal Service lifecycle methods, this class introduces some new specific callbacks that most subclasses will want to make use of: </p>\n<pre><code>public class InputMethodService\n</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html
InputMethodService.InputMethodImpl	A										<section class="prog__container"><p> Concrete implementation of <pre><code> <a href="https://developer.android.com/reference/android/inputmethodservice/AbstractInputMethodService.AbstractInputMethodImpl.html"> AbstractInputMethodService.AbstractInputMethodImpl </a> </code></pre> that provides all of the standard behavior for an input method.</p>\n<pre><code>public class InputMethodService.InputMethodImpl\n</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodImpl.html
InputMethodService.InputMethodSessionImpl	A										<section class="prog__container"><p> Concrete implementation of <pre><code> <a href="https://developer.android.com/reference/android/inputmethodservice/AbstractInputMethodService.AbstractInputMethodSessionImpl.html"> AbstractInputMethodService.AbstractInputMethodSessionImpl </a> </code></pre> that provides all of the standard behavior for an input method session.</p>\n<pre><code>public class InputMethodService.InputMethodSessionImpl\n</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodSessionImpl.html
InputMethodService.Insets	A										<section class="prog__container"><p> Information about where interesting parts of the input method UI appear.</p>\n<pre><code>public static final class InputMethodService.Insets\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/InputMethodService.Insets.html
Keyboard	A										<section class="prog__container"><p> Loads an XML description of a keyboard and stores the attributes of the keys. A keyboard consists of rows of keys. <p> The layout file for a keyboard contains XML that looks like the following snippet: </p>\n<pre><code>public class Keyboard\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/Keyboard.html
Keyboard.Key	A										<section class="prog__container"><p> Class for describing the position and characteristics of a single key in the keyboard.</p>\n<pre><code>public static class Keyboard.Key\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/Keyboard.Key.html
Keyboard.Row	A										<section class="prog__container"><p> Container for keys in the keyboard. All keys in a row are at the same Y-coordinate. Some of the key size defaults can be overridden per row from what the <pre><code> <a href="https://developer.android.com/reference/android/inputmethodservice/Keyboard.html"> Keyboard </a> </code></pre> defines.</p>\n<pre><code>public static class Keyboard.Row\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/Keyboard.Row.html
KeyboardView	A										<section class="prog__container"><p> A view that renders a virtual <pre><code> <a href="https://developer.android.com/reference/android/inputmethodservice/Keyboard.html"> Keyboard </a> </code></pre> . It handles rendering of keys and detecting key presses and touch movements.</p>\n<pre><code>public class KeyboardView\n</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/KeyboardView.html
KeyboardView.OnKeyboardActionListener	A										<section class="prog__container"><p> Listener for virtual keyboard events.</p>\n<pre><code>public static interface KeyboardView.OnKeyboardActionListener\n</code></pre></section>	https://developer.android.com/reference/android/inputmethodservice/KeyboardView.OnKeyboardActionListener.html
android.inputmethodservice	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/inputmethodservice/package-summary.html
Address	A										<section class="prog__container"><p> A class representing an Address, i.e, a set of Strings describing a location. The address format is a simplified version of xAL (eXtensible Address Language) http://www.oasis-open.org/committees/ciq/ciq.html#6</p>\n<pre><code>public class Address\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/location/Address.html
Criteria	A										<section class="prog__container"><p> A class indicating the application criteria for selecting a location provider. Providers maybe ordered according to accuracy, power usage, ability to report altitude, speed, and bearing, and monetary cost.</p>\n<pre><code>public class Criteria\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/location/Criteria.html
Geocoder	A										<section class="prog__container"><p> A class for handling geocoding and reverse geocoding. Geocoding is the process of transforming a street address or other description of a location into a (latitude, longitude) coordinate. Reverse geocoding is the process of transforming a (latitude, longitude) coordinate into a (partial) address. The amount of detail in a reverse geocoded location description may vary, for example one might contain the full street address of the closest building, while another might contain only a city name and postal code. The Geocoder class requires a backend service that is not included in the core android framework. The Geocoder query methods will return an empty list if there no backend service in the platform. Use the isPresent() method to determine whether a Geocoder implementation exists.</p>\n<pre><code>public final class Geocoder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/location/Geocoder.html
GnssClock	A										<section class="prog__container"><p> A class containing a GPS clock timestamp. <p> It represents a measurement of the GPS receiver's clock. </p>\n<pre><code>public final class GnssClock\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/location/GnssClock.html
GnssMeasurement	A										<section class="prog__container"><p> A class representing a GNSS satellite measurement, containing raw and computed information.</p>\n<pre><code>public final class GnssMeasurement\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/location/GnssMeasurement.html
GnssMeasurementsEvent.Callback	A										<section class="prog__container"><p> Used for receiving GNSS satellite measurements from the GNSS engine. Each measurement contains raw and computed data identifying a satellite. You can implement this interface and call <pre><code> <a href="https://developer.android.com/reference/android/location/LocationManager.html#registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent.Callback)"> registerGnssMeasurementsCallback(GnssMeasurementsEvent.Callback) </a> </code></pre> .</p>\n<pre><code>public static abstract class GnssMeasurementsEvent.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/location/GnssMeasurementsEvent.Callback.html
GnssMeasurementsEvent	A										<section class="prog__container"><p> A class implementing a container for data associated with a measurement event. Events are delivered to registered instances of <pre><code> <a href="https://developer.android.com/reference/android/location/GnssMeasurementsEvent.Callback.html"> GnssMeasurementsEvent.Callback </a> </code></pre> .</p>\n<pre><code>public final class GnssMeasurementsEvent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/location/GnssMeasurementsEvent.html
GnssNavigationMessage.Callback	A										<section class="prog__container"><p> Used for receiving GNSS satellite Navigation Messages from the GNSS engine. <p> You can implement this interface and call <pre><code> <a href="https://developer.android.com/reference/android/location/LocationManager.html#registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage.Callback)"> registerGnssNavigationMessageCallback(GnssNavigationMessage.Callback) </a> </code></pre> . </p>\n<pre><code>public static abstract class GnssNavigationMessage.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/location/GnssNavigationMessage.Callback.html
GnssNavigationMessage	A										<section class="prog__container"><p> A class containing a GNSS satellite Navigation Message.</p>\n<pre><code>public final class GnssNavigationMessage\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/location/GnssNavigationMessage.html
GnssStatus.Callback	A										<section class="prog__container"><p> Used for receiving notifications when GNSS events happen.</p>\n<pre><code>public static abstract class GnssStatus.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/location/GnssStatus.Callback.html
GnssStatus	A										<section class="prog__container"><p> This class represents the current state of the GNSS engine. This class is used in conjunction with the <pre><code> <a href="https://developer.android.com/reference/android/location/GnssStatus.Callback.html"> GnssStatus.Callback </a> </code></pre> .</p>\n<pre><code>public final class GnssStatus\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/location/GnssStatus.html
GpsSatellite	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> use <pre><code> <a href="https://developer.android.com/reference/android/location/GnssStatus.html"> GnssStatus </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/location/GnssStatus.Callback.html"> GnssStatus.Callback </a> </code></pre> . </p>\n<pre><code>public final class GpsSatellite\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/location/GpsSatellite.html
GpsStatus	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> use <pre><code> <a href="https://developer.android.com/reference/android/location/GnssStatus.html"> GnssStatus </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/location/GnssStatus.Callback.html"> GnssStatus.Callback </a> </code></pre> . </p>\n<pre><code>public final class GpsStatus\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/location/GpsStatus.html
GpsStatus.Listener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 24. </strong> <br/> use <pre><code> <a href="https://developer.android.com/reference/android/location/GnssStatus.Callback.html"> GnssStatus.Callback </a> </code></pre> instead. </p>\n<pre><code>public static interface GpsStatus.Listener\n</code></pre></section>	https://developer.android.com/reference/android/location/GpsStatus.Listener.html
GpsStatus.NmeaListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 24. </strong> <br/> use <pre><code> <a href="https://developer.android.com/reference/android/location/OnNmeaMessageListener.html"> OnNmeaMessageListener </a> </code></pre> instead. </p>\n<pre><code>public static interface GpsStatus.NmeaListener\n</code></pre></section>	https://developer.android.com/reference/android/location/GpsStatus.NmeaListener.html
Location	A										<section class="prog__container"><p> A data class representing a geographic location. <p> A location can consist of a latitude, longitude, timestamp, and other information such as bearing, altitude and velocity. <p> All locations generated by the <pre><code> <a href="https://developer.android.com/reference/android/location/LocationManager.html"> LocationManager </a> </code></pre> are guaranteed to have a valid latitude, longitude, and timestamp (both UTC time and elapsed real-time since boot), all other parameters are optional. </p>\n<pre><code>public class Location\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/location/Location.html
LocationListener	A										<section class="prog__container"><p> Used for receiving notifications from the LocationManager when the location has changed. These methods are called if the LocationListener has been registered with the location manager service using the <pre><code> <a href="https://developer.android.com/reference/android/location/LocationManager.html#requestLocationUpdates(java.lang.String, long, float, android.location.LocationListener)"> requestLocationUpdates(String, long, float, LocationListener) </a> </code></pre> method. </p>\n<pre><code>public interface LocationListener\n</code></pre></section>	https://developer.android.com/reference/android/location/LocationListener.html
LocationManager	A										<section class="prog__container"><p> This class provides access to the system location services. These services allow applications to obtain periodic updates of the device's geographical location, or to fire an application-specified <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html"> Intent </a> </code></pre> when the device enters the proximity of a given geographical location. <p> You do not instantiate this class directly; instead, retrieve it through <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.Class&lt;T&gt;)"> Context.getSystemService(Context.LOCATION_SERVICE) </a> </code></pre> . <p class="note"> Unless noted, all Location API methods require the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_COARSE_LOCATION"> ACCESS_COARSE_LOCATION </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_FINE_LOCATION"> ACCESS_FINE_LOCATION </a> </code></pre> permissions. If your application only has the coarse permission then it will not have access to the GPS or passive location providers. Other providers will still return location results, but the update rate will be throttled and the exact location will be obfuscated to a coarse level of accuracy. </p>\n<pre><code>public class LocationManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/location/LocationManager.html
LocationProvider	A										<section class="prog__container"><p> An abstract superclass for location providers. A location provider provides periodic reports on the geographical location of the device. <p> Each provider has a set of criteria under which it may be used; for example, some providers require GPS hardware and visibility to a number of satellites; others require the use of the cellular radio, or access to a specific carrier's network, or to the internet. They may also have different battery consumption characteristics or monetary costs to the user. The <pre><code> <a href="https://developer.android.com/reference/android/location/Criteria.html"> Criteria </a> </code></pre> class allows providers to be selected based on user-specified criteria. </p>\n<pre><code>public class LocationProvider\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/location/LocationProvider.html
OnNmeaMessageListener	A										<section class="prog__container"><p> Used for receiving NMEA sentences from the GNSS. NMEA 0183 is a standard for communicating with marine electronic devices and is a common method for receiving data from a GNSS, typically over a serial port. See <a href="http://en.wikipedia.org/wiki/NMEA_0183"> NMEA 0183 </a> for more details. You can implement this interface and call <pre><code> <a href="https://developer.android.com/reference/android/location/LocationManager.html#addNmeaListener(android.location.GpsStatus.NmeaListener)"> addNmeaListener(GpsStatus.NmeaListener) </a> </code></pre> to receive NMEA data from the GNSS engine.</p>\n<pre><code>public interface OnNmeaMessageListener\n</code></pre></section>	https://developer.android.com/reference/android/location/OnNmeaMessageListener.html
android.location	A										<section class="prog__container">Contains the framework API classes that define Android location-based and related services.</section>	https://developer.android.com/reference/android/location/package-summary.html
SettingInjectorService	A										<section class="prog__container"><p> Dynamically specifies the enabled status of a preference injected into the list of app settings displayed by the system settings app <p> </p>\n<pre><code>public abstract class SettingInjectorService\n</code></pre></section>	https://developer.android.com/reference/android/location/SettingInjectorService.html
AsyncPlayer	A										<section class="prog__container"><p> Plays a series of audio URIs, but does all the hard work on another thread so that any slowness with preparing or loading doesn't block the calling thread.</p>\n<pre><code>public class AsyncPlayer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/AsyncPlayer.html
AudioAttributes.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> <a href="https://developer.android.com/reference/android/media/AudioAttributes.html"> AudioAttributes </a> </code></pre> objects. <p> Here is an example where <pre><code> Builder </code></pre> is used to define the <pre><code> <a href="https://developer.android.com/reference/android/media/AudioAttributes.html"> AudioAttributes </a> </code></pre> to be used by a new <pre><code> AudioTrack </code></pre> instance: <pre class="prettyprint"> AudioTrack myTrack = new AudioTrack( new AudioAttributes.Builder() .setUsage(AudioAttributes.USAGE_MEDIA) .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC) .build(), myFormat, myBuffSize, AudioTrack.MODE_STREAM, mySession); </pre> <p> By default all types of information (usage, content type, flags) conveyed by an <pre><code> AudioAttributes </code></pre> instance are set to "unknown". Unknown information will be interpreted as a default value that is dependent on the context of use, for instance a <pre><code> <a href="https://developer.android.com/reference/android/media/MediaPlayer.html"> MediaPlayer </a> </code></pre> will use a default usage of <pre><code> <a href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_MEDIA"> USAGE_MEDIA </a> </code></pre> . </p>\n<pre><code>public static class AudioAttributes.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/AudioAttributes.Builder.html
AudioAttributes	A										<section class="prog__container"><p> A class to encapsulate a collection of attributes describing information about an audio stream. <p> <pre><code> AudioAttributes </code></pre> supersede the notion of stream types (see for instance <pre><code> <a href="https://developer.android.com/reference/android/media/AudioManager.html#STREAM_MUSIC"> STREAM_MUSIC </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/media/AudioManager.html#STREAM_ALARM"> STREAM_ALARM </a> </code></pre> ) for defining the behavior of audio playback. Attributes allow an application to specify more information than is conveyed in a stream type by allowing the application to define: <ul> <li> usage: "why" you are playing a sound, what is this sound used for. This is achieved with the "usage" information. Examples of usage are <pre><code> <a href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_MEDIA"> USAGE_MEDIA </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_ALARM"> USAGE_ALARM </a> </code></pre> . These two examples are the closest to stream types, but more detailed use cases are available. Usage information is more expressive than a stream type, and allows certain platforms or routing policies to use this information for more refined volume or routing decisions. Usage is the most important information to supply in <pre><code> AudioAttributes </code></pre> and it is recommended to build any instance with this information supplied, see <pre><code> <a href="https://developer.android.com/reference/android/media/AudioAttributes.Builder.html"> AudioAttributes.Builder </a> </code></pre> for exceptions. </li> <li> content type: "what" you are playing. The content type expresses the general category of the content. This information is optional. But in case it is known (for instance <pre><code> <a href="https://developer.android.com/reference/android/media/AudioAttributes.html#CONTENT_TYPE_MOVIE"> CONTENT_TYPE_MOVIE </a> </code></pre> for a movie streaming service or <pre><code> <a href="https://developer.android.com/reference/android/media/AudioAttributes.html#CONTENT_TYPE_MUSIC"> CONTENT_TYPE_MUSIC </a> </code></pre> for a music playback application) this information might be used by the audio framework to selectively configure some audio post-processing blocks. </li> <li> flags: "how" is playback to be affected, see the flag definitions for the specific playback behaviors they control. </li> </ul> <p> <pre><code> AudioAttributes </code></pre> are used for example in one of the <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html"> AudioTrack </a> </code></pre> constructors (see <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html#AudioTrack(android.media.AudioAttributes, android.media.AudioFormat, int, int, int)"> AudioTrack(AudioAttributes, AudioFormat, int, int, int) </a> </code></pre> ), to configure a <pre><code> <a href="https://developer.android.com/reference/android/media/MediaPlayer.html"> MediaPlayer </a> </code></pre> (see <pre><code> <a href="https://developer.android.com/reference/android/media/MediaPlayer.html#setAudioAttributes(android.media.AudioAttributes)"> setAudioAttributes(AudioAttributes) </a> </code></pre> or a <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.html"> Notification </a> </code></pre> (see <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.html#audioAttributes"> audioAttributes </a> </code></pre> ). An <pre><code> AudioAttributes </code></pre> instance is built through its builder, <pre><code> <a href="https://developer.android.com/reference/android/media/AudioAttributes.Builder.html"> AudioAttributes.Builder </a> </code></pre> . </p>\n<pre><code>public final class AudioAttributes\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/AudioAttributes.html
AudioDeviceCallback	A										<section class="prog__container"><p> AudioDeviceCallback defines the mechanism by which applications can receive notifications of audio device connection and disconnection events.</p>\n<pre><code>public abstract class AudioDeviceCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/AudioDeviceCallback.html
AudioDeviceInfo	A										<section class="prog__container"><p> Class to provide information about the audio devices.</p>\n<pre><code>public final class AudioDeviceInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/AudioDeviceInfo.html
AudioFormat.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html"> AudioFormat </a> </code></pre> objects. Use this class to configure and create an AudioFormat instance. By setting format characteristics such as audio encoding, channel mask or sample rate, you indicate which of those are to vary from the default behavior on this device wherever this audio format is used. See <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html"> AudioFormat </a> </code></pre> for a complete description of the different parameters that can be used to configure an <pre><code> AudioFormat </code></pre> instance. <p> <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html"> AudioFormat </a> </code></pre> is for instance used in <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html#AudioTrack(android.media.AudioAttributes, android.media.AudioFormat, int, int, int)"> AudioTrack(AudioAttributes, AudioFormat, int, int, int) </a> </code></pre> . In this constructor, every format characteristic set on the <pre><code> Builder </code></pre> (e.g. with <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.Builder.html#setSampleRate(int)"> setSampleRate(int) </a> </code></pre> ) will alter the default values used by an <pre><code> AudioTrack </code></pre> . In this case for audio playback with <pre><code> AudioTrack </code></pre> , the sample rate set in the <pre><code> Builder </code></pre> would override the platform output sample rate which would otherwise be selected by default. </p>\n<pre><code>public static class AudioFormat.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/AudioFormat.Builder.html
AudioFormat	A										<section class="prog__container"><p> The <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html"> AudioFormat </a> </code></pre> class is used to access a number of audio format and channel configuration constants. They are for instance used in <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html"> AudioTrack </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecord.html"> AudioRecord </a> </code></pre> , as valid values in individual parameters of constructors like <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html#AudioTrack(int, int, int, int, int, int)"> AudioTrack(int, int, int, int, int, int) </a> </code></pre> , where the fourth parameter is one of the <pre><code> AudioFormat.ENCODING_* </code></pre> constants. The <pre><code> AudioFormat </code></pre> constants are also used in <pre><code> <a href="https://developer.android.com/reference/android/media/MediaFormat.html"> MediaFormat </a> </code></pre> to specify audio related values commonly used in media, such as for <pre><code> <a href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_CHANNEL_MASK"> KEY_CHANNEL_MASK </a> </code></pre> . <p> The <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.Builder.html"> AudioFormat.Builder </a> </code></pre> class can be used to create instances of the <pre><code> AudioFormat </code></pre> format class. Refer to <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.Builder.html"> AudioFormat.Builder </a> </code></pre> for documentation on the mechanics of the configuration and building of such instances. Here we describe the main concepts that the <pre><code> AudioFormat </code></pre> class allow you to convey in each instance, they are: <ol> <li> <a href="#sampleRate"> sample rate </a> <li> <a href="#encoding"> encoding </a> <li> <a href="#channelMask"> channel masks </a> </li> </li> </li> </ol> <p> Closely associated with the <pre><code> AudioFormat </code></pre> is the notion of an <a href="#audioFrame"> audio frame </a> , which is used throughout the documentation to represent the minimum size complete unit of audio data. <h4 id="sampleRate"> Sample rate </h4> <p> Expressed in Hz, the sample rate in an <pre><code> AudioFormat </code></pre> instance expresses the number of audio samples for each channel per second in the content you are playing or recording. It is not the sample rate at which content is rendered or produced. For instance a sound at a media sample rate of 8000Hz can be played on a device operating at a sample rate of 48000Hz; the sample rate conversion is automatically handled by the platform, it will not play at 6x speed. <p> As of API <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#M"> M </a> </code></pre> , sample rates up to 192kHz are supported for <pre><code> AudioRecord </code></pre> and <pre><code> AudioTrack </code></pre> , with sample rate conversion performed as needed. To improve efficiency and avoid lossy conversions, it is recommended to match the sample rate for <pre><code> AudioRecord </code></pre> and <pre><code> AudioTrack </code></pre> to the endpoint device sample rate, and limit the sample rate to no more than 48kHz unless there are special device capabilities that warrant a higher rate. <h4 id="encoding"> Encoding </h4> <p> Audio encoding is used to describe the bit representation of audio data, which can be either linear PCM or compressed audio, such as AC3 or DTS. <p> For linear PCM, the audio encoding describes the sample size, 8 bits, 16 bits, or 32 bits, and the sample representation, integer or float. <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_PCM_8BIT"> ENCODING_PCM_8BIT </a> </code></pre> : The audio sample is a 8 bit unsigned integer in the range [0, 255], with a 128 offset for zero. This is typically stored as a Java byte in a byte array or ByteBuffer. Since the Java byte is <em> signed </em> , be careful with math operations and conversions as the most significant bit is inverted. </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_PCM_16BIT"> ENCODING_PCM_16BIT </a> </code></pre> : The audio sample is a 16 bit signed integer typically stored as a Java short in a short array, but when the short is stored in a ByteBuffer, it is native endian (as compared to the default Java big endian). The short has full range from [-32768, 32767], and is sometimes interpreted as fixed point Q.15 data. </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_PCM_FLOAT"> ENCODING_PCM_FLOAT </a> </code></pre> : Introduced in API <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#LOLLIPOP"> LOLLIPOP </a> </code></pre> , this encoding specifies that the audio sample is a 32 bit IEEE single precision float. The sample can be manipulated as a Java float in a float array, though within a ByteBuffer it is stored in native endian byte order. The nominal range of <pre><code> ENCODING_PCM_FLOAT </code></pre> audio data is [-1.0, 1.0]. It is implementation dependent whether the positive maximum of 1.0 is included in the interval. Values outside of the nominal range are clamped before sending to the endpoint device. Beware that the handling of NaN is undefined; subnormals may be treated as zero; and infinities are generally clamped just like other values for <pre><code> AudioTrack </code></pre> – try to avoid infinities because they can easily generate a NaN. <br> To achieve higher audio bit depth than a signed 16 bit integer short, it is recommended to use <pre><code> ENCODING_PCM_FLOAT </code></pre> for audio capture, processing, and playback. Floats are efficiently manipulated by modern CPUs, have greater precision than 24 bit signed integers, and have greater dynamic range than 32 bit signed integers. <pre><code> AudioRecord </code></pre> as of API <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#M"> M </a> </code></pre> and <pre><code> AudioTrack </code></pre> as of API <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#LOLLIPOP"> LOLLIPOP </a> </code></pre> support <pre><code> ENCODING_PCM_FLOAT </code></pre> . </br> </li> </ul> <p> For compressed audio, the encoding specifies the method of compression, for example <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_AC3"> ENCODING_AC3 </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_DTS"> ENCODING_DTS </a> </code></pre> . The compressed audio data is typically stored as bytes in a byte array or ByteBuffer. When a compressed audio encoding is specified for an <pre><code> AudioTrack </code></pre> , it creates a direct (non-mixed) track for output to an endpoint (such as HDMI) capable of decoding the compressed audio. For (most) other endpoints, which are not capable of decoding such compressed audio, you will need to decode the data first, typically by creating a <pre><code> <a href="https://developer.android.com/reference/android/media/MediaCodec.html"> MediaCodec </a> </code></pre> . Alternatively, one may use <pre><code> <a href="https://developer.android.com/reference/android/media/MediaPlayer.html"> MediaPlayer </a> </code></pre> for playback of compressed audio files or streams. <p> When compressed audio is sent out through a direct <pre><code> AudioTrack </code></pre> , it need not be written in exact multiples of the audio access unit; this differs from <pre><code> MediaCodec </code></pre> input buffers. <h4 id="channelMask"> Channel mask </h4> <p> Channel masks are used in <pre><code> AudioTrack </code></pre> and <pre><code> AudioRecord </code></pre> to describe the samples and their arrangement in the audio frame. They are also used in the endpoint (e.g. a USB audio interface, a DAC connected to headphones) to specify allowable configurations of a particular device. <br> As of API <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#M"> M </a> </code></pre> , there are two types of channel masks: channel position masks and channel index masks. <h5 id="channelPositionMask"> Channel position masks </h5> Channel position masks are the original Android channel masks, and are used since API <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#BASE"> BASE </a> </code></pre> . For input and output, they imply a positional nature - the location of a speaker or a microphone for recording or playback. <br> For a channel position mask, each allowed channel position corresponds to a bit in the channel mask. If that channel position is present in the audio frame, that bit is set, otherwise it is zero. The order of the bits (from lsb to msb) corresponds to the order of that position's sample in the audio frame. <br> The canonical channel position masks by channel count are as follows: <br> <table> <tr> <td> channel count </td> <td> channel position mask </td> </tr> <tr> <td> 1 </td> <td> <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_MONO"> CHANNEL_OUT_MONO </a> </code></pre> </td> </tr> <tr> <td> 2 </td> <td> <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_STEREO"> CHANNEL_OUT_STEREO </a> </code></pre> </td> </tr> <tr> <td> 3 </td> <td> <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_STEREO"> CHANNEL_OUT_STEREO </a> </code></pre> | <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_FRONT_CENTER"> CHANNEL_OUT_FRONT_CENTER </a> </code></pre> </td> </tr> <tr> <td> 4 </td> <td> <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_QUAD"> CHANNEL_OUT_QUAD </a> </code></pre> </td> </tr> <tr> <td> 5 </td> <td> <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_QUAD"> CHANNEL_OUT_QUAD </a> </code></pre> | <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_FRONT_CENTER"> CHANNEL_OUT_FRONT_CENTER </a> </code></pre> </td> </tr> <tr> <td> 6 </td> <td> <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_5POINT1"> CHANNEL_OUT_5POINT1 </a> </code></pre> </td> </tr> <tr> <td> 7 </td> <td> <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_5POINT1"> CHANNEL_OUT_5POINT1 </a> </code></pre> | <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_BACK_CENTER"> CHANNEL_OUT_BACK_CENTER </a> </code></pre> </td> </tr> <tr> <td> 8 </td> <td> <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_7POINT1_SURROUND"> CHANNEL_OUT_7POINT1_SURROUND </a> </code></pre> </td> </tr> </table> <br> These masks are an ORed composite of individual channel masks. For example <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_STEREO"> CHANNEL_OUT_STEREO </a> </code></pre> is composed of <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_FRONT_LEFT"> CHANNEL_OUT_FRONT_LEFT </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_FRONT_RIGHT"> CHANNEL_OUT_FRONT_RIGHT </a> </code></pre> . <h5 id="channelIndexMask"> Channel index masks </h5> Channel index masks are introduced in API <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#M"> M </a> </code></pre> . They allow the selection of a particular channel from the source or sink endpoint by number, i.e. the first channel, the second channel, and so forth. This avoids problems with artificially assigning positions to channels of an endpoint, or figuring what the i <sup> th </sup> position bit is within an endpoint's channel position mask etc. <br> Here's an example where channel index masks address this confusion: dealing with a 4 channel USB device. Using a position mask, and based on the channel count, this would be a <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_QUAD"> CHANNEL_OUT_QUAD </a> </code></pre> device, but really one is only interested in channel 0 through channel 3. The USB device would then have the following individual bit channel masks: <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_FRONT_LEFT"> CHANNEL_OUT_FRONT_LEFT </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_FRONT_RIGHT"> CHANNEL_OUT_FRONT_RIGHT </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_BACK_LEFT"> CHANNEL_OUT_BACK_LEFT </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_BACK_RIGHT"> CHANNEL_OUT_BACK_RIGHT </a> </code></pre> . But which is channel 0 and which is channel 3? <br> For a channel index mask, each channel number is represented as a bit in the mask, from the lsb (channel 0) upwards to the msb, numerically this bit value is <pre><code> 1 &lt;&lt; channelNumber </code></pre> . A set bit indicates that channel is present in the audio frame, otherwise it is cleared. The order of the bits also correspond to that channel number's sample order in the audio frame. <br> For the previous 4 channel USB device example, the device would have a channel index mask <pre><code> 0xF </code></pre> . Suppose we wanted to select only the first and the third channels; this would correspond to a channel index mask <pre><code> 0x5 </code></pre> (the first and third bits set). If an <pre><code> AudioTrack </code></pre> uses this channel index mask, the audio frame would consist of two samples, the first sample of each frame routed to channel 0, and the second sample of each frame routed to channel 2. The canonical channel index masks by channel count are given by the formula <pre><code> (1 &lt;&lt; channelCount) - 1 </code></pre> . <h5> Use cases </h5> <ul> <li> <i> Channel position mask for an endpoint: </i> <pre><code> CHANNEL_OUT_FRONT_LEFT </code></pre> , <pre><code> CHANNEL_OUT_FRONT_CENTER </code></pre> , etc. for HDMI home theater purposes. <li> <i> Channel position mask for an audio stream: </i> Creating an <pre><code> AudioTrack </code></pre> to output movie content, where 5.1 multichannel output is to be written. <li> <i> Channel index mask for an endpoint: </i> USB devices for which input and output do not correspond to left or right speaker or microphone. <li> <i> Channel index mask for an audio stream: </i> An <pre><code> AudioRecord </code></pre> may only want the third and fourth audio channels of the endpoint (i.e. the second channel pair), and not care the about position it corresponds to, in which case the channel index mask is <pre><code> 0xC </code></pre> . Multichannel <pre><code> AudioRecord </code></pre> sessions should use channel index masks. </li> </li> </li> </li> </ul> <h4 id="audioFrame"> Audio Frame </h4> <p> For linear PCM, an audio frame consists of a set of samples captured at the same time, whose count and channel association are given by the <a href="#channelMask"> channel mask </a> , and whose sample contents are specified by the <a href="#encoding"> encoding </a> . For example, a stereo 16 bit PCM frame consists of two 16 bit linear PCM samples, with a frame size of 4 bytes. For compressed audio, an audio frame may alternately refer to an access unit of compressed data bytes that is logically grouped together for decoding and bitstream access (e.g. <pre><code> <a href="https://developer.android.com/reference/android/media/MediaCodec.html"> MediaCodec </a> </code></pre> ), or a single byte of compressed data (e.g. <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html#getBufferSizeInFrames()"> AudioTrack.getBufferSizeInFrames() </a> </code></pre> ), or the linear PCM frame result from decoding the compressed data (e.g. <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html#getPlaybackHeadPosition()"> AudioTrack.getPlaybackHeadPosition() </a> </code></pre> ), depending on the context where audio frame is used. </p>\n<pre><code>public final class AudioFormat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/AudioFormat.html
AudioManager.AudioRecordingCallback	A										<section class="prog__container"><p> Interface for receiving update notifications about the recording configuration. Extend this abstract class and register it with <pre><code> <a href="https://developer.android.com/reference/android/media/AudioManager.html#registerAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback, android.os.Handler)"> registerAudioRecordingCallback(AudioRecordingCallback, Handler) </a> </code></pre> to be notified. Use <pre><code> <a href="https://developer.android.com/reference/android/media/AudioManager.html#getActiveRecordingConfigurations()"> getActiveRecordingConfigurations() </a> </code></pre> to query the current configuration.</p>\n<pre><code>public static abstract class AudioManager.AudioRecordingCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/AudioManager.AudioRecordingCallback.html
AudioManager	A										<section class="prog__container"><p> AudioManager provides access to volume and ringer mode control. <p> Use <pre><code> Context.getSystemService(Context.AUDIO_SERVICE) </code></pre> to get an instance of this class. </p>\n<pre><code>public class AudioManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/AudioManager.html
AudioManager.OnAudioFocusChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the audio focus of the system is updated.</p>\n<pre><code>public static interface AudioManager.OnAudioFocusChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/media/AudioManager.OnAudioFocusChangeListener.html
AudioRecord.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecord.html"> AudioRecord </a> </code></pre> objects. Use this class to configure and create an <pre><code> AudioRecord </code></pre> instance. By setting the recording source and audio format parameters, you indicate which of those vary from the default behavior on the device. <p> Here is an example where <pre><code> Builder </code></pre> is used to specify all <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html"> AudioFormat </a> </code></pre> parameters, to be used by a new <pre><code> AudioRecord </code></pre> instance: <pre class="prettyprint"> AudioRecord recorder = new AudioRecord.Builder() .setAudioSource(MediaRecorder.AudioSource.VOICE_COMMUNICATION) .setAudioFormat(new AudioFormat.Builder() .setEncoding(AudioFormat.ENCODING_PCM_16BIT) .setSampleRate(32000) .setChannelMask(AudioFormat.CHANNEL_IN_MONO) .build()) .setBufferSize(2*minBuffSize) .build(); </pre> <p> If the audio source is not set with <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecord.Builder.html#setAudioSource(int)"> setAudioSource(int) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource.html#DEFAULT"> DEFAULT </a> </code></pre> is used. <br> If the audio format is not specified or is incomplete, its channel configuration will be <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_MONO"> CHANNEL_IN_MONO </a> </code></pre> , and the encoding will be <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_PCM_16BIT"> ENCODING_PCM_16BIT </a> </code></pre> . The sample rate will depend on the device actually selected for capture and can be queried with <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecord.html#getSampleRate()"> getSampleRate() </a> </code></pre> method. <br> If the buffer size is not specified with <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecord.Builder.html#setBufferSizeInBytes(int)"> setBufferSizeInBytes(int) </a> </code></pre> , the minimum buffer size for the source is used. </br> </br> </p>\n<pre><code>public static class AudioRecord.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/AudioRecord.Builder.html
AudioRecord	A										<section class="prog__container"><p> The AudioRecord class manages the audio resources for Java applications to record audio from the audio input hardware of the platform. This is achieved by "pulling" (reading) the data from the AudioRecord object. The application is responsible for polling the AudioRecord object in time using one of the following three methods: <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecord.html#read(byte[], int, int)"> read(byte[], int, int) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecord.html#read(short[], int, int)"> read(short[], int, int) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecord.html#read(java.nio.ByteBuffer, int)"> read(ByteBuffer, int) </a> </code></pre> . The choice of which method to use will be based on the audio data storage format that is the most convenient for the user of AudioRecord. <p> Upon creation, an AudioRecord object initializes its associated audio buffer that it will fill with the new audio data. The size of this buffer, specified during the construction, determines how long an AudioRecord can record before "over-running" data that has not been read yet. Data should be read from the audio hardware in chunks of sizes inferior to the total recording buffer size. </p>\n<pre><code>public class AudioRecord\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/AudioRecord.html
AudioRecord.OnRecordPositionUpdateListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when an AudioRecord has reached a notification marker set by <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecord.html#setNotificationMarkerPosition(int)"> setNotificationMarkerPosition(int) </a> </code></pre> or for periodic updates on the progress of the record head, as set by <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecord.html#setPositionNotificationPeriod(int)"> setPositionNotificationPeriod(int) </a> </code></pre> .</p>\n<pre><code>public static interface AudioRecord.OnRecordPositionUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/media/AudioRecord.OnRecordPositionUpdateListener.html
AudioRecord.OnRoutingChangedListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 24. </strong> <br/> users should switch to the general purpose <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRouting.OnRoutingChangedListener.html"> AudioRouting.OnRoutingChangedListener </a> </code></pre> class instead. </p>\n<pre><code>public static interface AudioRecord.OnRoutingChangedListener\nimplements <a href="https://developer.android.com/reference/android/media/AudioRouting.OnRoutingChangedListener.html">AudioRouting.OnRoutingChangedListener</a></code></pre></section>	https://developer.android.com/reference/android/media/AudioRecord.OnRoutingChangedListener.html
AudioRecordingConfiguration	A										<section class="prog__container"><p> The AudioRecordingConfiguration class collects the information describing an audio recording session. <p> Direct polling (see <pre><code> <a href="https://developer.android.com/reference/android/media/AudioManager.html#getActiveRecordingConfigurations()"> getActiveRecordingConfigurations() </a> </code></pre> ) or callback (see <pre><code> <a href="https://developer.android.com/reference/android/media/AudioManager.html#registerAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback, android.os.Handler)"> registerAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback, android.os.Handler) </a> </code></pre> methods are ways to receive information about the current recording configuration of the device. <p> An audio recording configuration contains information about the recording format as used by the application ( <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecordingConfiguration.html#getClientFormat()"> getClientFormat() </a> </code></pre> , as well as the recording format actually used by the device ( <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecordingConfiguration.html#getFormat()"> getFormat() </a> </code></pre> ). The two recording formats may, for instance, be at different sampling rates due to hardware limitations (e.g. application recording at 44.1kHz whereas the device always records at 48kHz, and the Android framework resamples for the application). <p> The configuration also contains the use case for which audio is recorded ( <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecordingConfiguration.html#getClientAudioSource()"> getClientAudioSource() </a> </code></pre> ), enabling the ability to distinguish between different activities such as ongoing voice recognition or camcorder recording. </p>\n<pre><code>public final class AudioRecordingConfiguration\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/AudioRecordingConfiguration.html
AudioRouting	A										<section class="prog__container"><p> AudioRouting defines an interface for controlling routing and routing notifications in AudioTrack and AudioRecord objects.</p>\n<pre><code>public interface AudioRouting\n</code></pre></section>	https://developer.android.com/reference/android/media/AudioRouting.html
AudioRouting.OnRoutingChangedListener	A										<section class="prog__container"><p> Defines the interface by which applications can receive notifications of routing changes for the associated <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRouting.html"> AudioRouting </a> </code></pre> .</p>\n<pre><code>public static interface AudioRouting.OnRoutingChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/media/AudioRouting.OnRoutingChangedListener.html
AudioTimestamp	A										<section class="prog__container"><p> Structure that groups a position in frame units relative to an assumed audio stream, together with the estimated time when that frame enters or leaves the audio processing pipeline on that device. This can be used to coordinate events and interactions with the external environment. <p> The time is based on the implementation's best effort, using whatever knowledge is available to the system, but cannot account for any delay unknown to the implementation. </p>\n<pre><code>public final class AudioTimestamp\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/AudioTimestamp.html
AudioTrack.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html"> AudioTrack </a> </code></pre> objects. Use this class to configure and create an <pre><code> AudioTrack </code></pre> instance. By setting audio attributes and audio format parameters, you indicate which of those vary from the default behavior on the device. <p> Here is an example where <pre><code> Builder </code></pre> is used to specify all <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html"> AudioFormat </a> </code></pre> parameters, to be used by a new <pre><code> AudioTrack </code></pre> instance: <pre class="prettyprint"> AudioTrack player = new AudioTrack.Builder() .setAudioAttributes(new AudioAttributes.Builder() .setUsage(AudioAttributes.USAGE_ALARM) .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC) .build()) .setAudioFormat(new AudioFormat.Builder() .setEncoding(AudioFormat.ENCODING_PCM_16BIT) .setSampleRate(44100) .setChannelMask(AudioFormat.CHANNEL_OUT_STEREO) .build()) .setBufferSizeInBytes(minBuffSize) .build(); </pre> <p> If the audio attributes are not set with <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.Builder.html#setAudioAttributes(android.media.AudioAttributes)"> setAudioAttributes(AudioAttributes) </a> </code></pre> , attributes comprising <pre><code> <a href="https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_MEDIA"> USAGE_MEDIA </a> </code></pre> will be used. <br> If the audio format is not specified or is incomplete, its channel configuration will be <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_STEREO"> CHANNEL_OUT_STEREO </a> </code></pre> and the encoding will be <pre><code> <a href="https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_PCM_16BIT"> ENCODING_PCM_16BIT </a> </code></pre> . The sample rate will depend on the device actually selected for playback and can be queried with <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html#getSampleRate()"> getSampleRate() </a> </code></pre> method. <br> If the buffer size is not specified with <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.Builder.html#setBufferSizeInBytes(int)"> setBufferSizeInBytes(int) </a> </code></pre> , and the mode is <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html#MODE_STREAM"> MODE_STREAM </a> </code></pre> , the minimum buffer size is used. <br> If the transfer mode is not specified with <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.Builder.html#setTransferMode(int)"> setTransferMode(int) </a> </code></pre> , <pre><code> MODE_STREAM </code></pre> will be used. <br> If the session ID is not specified with <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.Builder.html#setSessionId(int)"> setSessionId(int) </a> </code></pre> , a new one will be generated. </br> </br> </br> </br> </p>\n<pre><code>public static class AudioTrack.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/AudioTrack.Builder.html
AudioTrack	A										<section class="prog__container"><p> The AudioTrack class manages and plays a single audio resource for Java applications. It allows streaming of PCM audio buffers to the audio sink for playback. This is achieved by "pushing" the data to the AudioTrack object using one of the <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html#write(byte[], int, int)"> write(byte[], int, int) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html#write(short[], int, int)"> write(short[], int, int) </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html#write(float[], int, int, int)"> write(float[], int, int, int) </a> </code></pre> methods. <p> An AudioTrack instance can operate under two modes: static or streaming. <br> In Streaming mode, the application writes a continuous stream of data to the AudioTrack, using one of the <pre><code> write() </code></pre> methods. These are blocking and return when the data has been transferred from the Java layer to the native layer and queued for playback. The streaming mode is most useful when playing blocks of audio data that for instance are: <ul> <li> too big to fit in memory because of the duration of the sound to play, </li> <li> too big to fit in memory because of the characteristics of the audio data (high sampling rate, bits per sample ...) </li> <li> received or generated while previously queued audio is playing. </li> </ul> The static mode should be chosen when dealing with short sounds that fit in memory and that need to be played with the smallest latency possible. The static mode will therefore be preferred for UI and game sounds that are played often, and with the smallest overhead possible. <p> Upon creation, an AudioTrack object initializes its associated audio buffer. The size of this buffer, specified during the construction, determines how long an AudioTrack can play before running out of data. <br> For an AudioTrack using the static mode, this size is the maximum size of the sound that can be played from it. <br> For the streaming mode, data will be written to the audio sink in chunks of sizes less than or equal to the total buffer size. AudioTrack is not final and thus permits subclasses, but such use is not recommended. </br> </br> </p>\n<pre><code>public class AudioTrack\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/AudioTrack.html
AudioTrack.OnPlaybackPositionUpdateListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the playback head position of an AudioTrack has reached a notification marker or has increased by a certain period.</p>\n<pre><code>public static interface AudioTrack.OnPlaybackPositionUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/media/AudioTrack.OnPlaybackPositionUpdateListener.html
AudioTrack.OnRoutingChangedListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 24. </strong> <br/> users should switch to the general purpose <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRouting.OnRoutingChangedListener.html"> AudioRouting.OnRoutingChangedListener </a> </code></pre> class instead. </p>\n<pre><code>public static interface AudioTrack.OnRoutingChangedListener\nimplements <a href="https://developer.android.com/reference/android/media/AudioRouting.OnRoutingChangedListener.html">AudioRouting.OnRoutingChangedListener</a></code></pre></section>	https://developer.android.com/reference/android/media/AudioTrack.OnRoutingChangedListener.html
CamcorderProfile	A										<section class="prog__container"><p> Retrieves the predefined camcorder profile settings for camcorder applications. These settings are read-only. <p> The compressed output from a recording session with a given CamcorderProfile contains two tracks: one for audio and one for video. <p> Each profile specifies the following set of parameters: <ul> <li> The file output format <li> Video codec format <li> Video bit rate in bits per second <li> Video frame rate in frames per second <li> Video frame width and height, <li> Audio codec format <li> Audio bit rate in bits per second, <li> Audio sample rate <li> Number of audio channels for recording. </li> </li> </li> </li> </li> </li> </li> </li> </li> </ul> </p>\n<pre><code>public class CamcorderProfile\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/CamcorderProfile.html
CameraProfile	A										<section class="prog__container"><p> The CameraProfile class is used to retrieve the pre-defined still image capture (jpeg) quality levels (0-100) used for low, medium, and high quality settings in the Camera application.</p>\n<pre><code>public class CameraProfile\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/CameraProfile.html
DeniedByServerException	A										<section class="prog__container"><p> Exception thrown when the provisioning server or key server denies a certficate or license for a device.</p>\n<pre><code>public final class DeniedByServerException\n</code></pre></section>	https://developer.android.com/reference/android/media/DeniedByServerException.html
DrmInitData	A										<section class="prog__container"><p> Encapsulates initialization data required by a <pre><code> <a href="https://developer.android.com/reference/android/media/MediaDrm.html"> MediaDrm </a> </code></pre> instance.</p>\n<pre><code>public abstract class DrmInitData\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/DrmInitData.html
DrmInitData.SchemeInitData	A										<section class="prog__container"><p> Scheme initialization data.</p>\n<pre><code>public static final class DrmInitData.SchemeInitData\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/DrmInitData.SchemeInitData.html
ExifInterface	A										<section class="prog__container"><p> This is a class for reading and writing Exif tags in a JPEG file or a RAW image file. <p> Supported formats are: JPEG, DNG, CR2, NEF, NRW, ARW, RW2, ORF and RAF. <p> Attribute mutation is supported for JPEG image files. </p>\n<pre><code>public class ExifInterface\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/ExifInterface.html
FaceDetector.Face	A										<section class="prog__container"><p> A Face contains all the information identifying the location of a face in a bitmap.</p>\n<pre><code>public class FaceDetector.Face\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/FaceDetector.Face.html
FaceDetector	A										<section class="prog__container"><p> Identifies the faces of people in a <pre><code> <a href="https://developer.android.com/reference/android/graphics/Bitmap.html"> Bitmap </a> </code></pre> graphic object.</p>\n<pre><code>public class FaceDetector\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/FaceDetector.html
Image	A										<section class="prog__container"><p> <p> A single complete image buffer to use with a media source such as a <pre><code> <a href="https://developer.android.com/reference/android/media/MediaCodec.html"> MediaCodec </a> </code></pre> or a <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html"> CameraDevice </a> </code></pre> . </p>\n<pre><code>public abstract class Image\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/Image.html
Image.Plane	A										<section class="prog__container"><p> <p> A single color plane of image data. </p>\n<pre><code>public static abstract class Image.Plane\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/Image.Plane.html
ImageReader	A										<section class="prog__container"><p> <p> The ImageReader class allows direct application access to image data rendered into a <pre><code> <a href="https://developer.android.com/reference/android/view/Surface.html"> Surface </a> </code></pre> </p>\n<pre><code>public class ImageReader\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/ImageReader.html
ImageReader.OnImageAvailableListener	A										<section class="prog__container"><p> Callback interface for being notified that a new image is available. <p> The onImageAvailable is called per image basis, that is, callback fires for every new frame available from ImageReader. </p>\n<pre><code>public static interface ImageReader.OnImageAvailableListener\n</code></pre></section>	https://developer.android.com/reference/android/media/ImageReader.OnImageAvailableListener.html
ImageWriter	A										<section class="prog__container"><p> <p> The ImageWriter class allows an application to produce Image data into a <pre><code> <a href="https://developer.android.com/reference/android/view/Surface.html"> Surface </a> </code></pre> , and have it be consumed by another component like <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html"> CameraDevice </a> </code></pre> . </p>\n<pre><code>public class ImageWriter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/ImageWriter.html
ImageWriter.OnImageReleasedListener	A										<section class="prog__container"><p> ImageWriter callback interface, used to to asynchronously notify the application of various ImageWriter events.</p>\n<pre><code>public static interface ImageWriter.OnImageReleasedListener\n</code></pre></section>	https://developer.android.com/reference/android/media/ImageWriter.OnImageReleasedListener.html
JetPlayer	A										<section class="prog__container"><p> JetPlayer provides access to JET content playback and control. <p> Please refer to the JET Creator User Manual for a presentation of the JET interactive music concept and how to use the JetCreator tool to create content to be player by JetPlayer. <p> Use of the JetPlayer class is based around the playback of a number of JET segments sequentially added to a playback FIFO queue. The rendering of the MIDI content stored in each segment can be dynamically affected by two mechanisms: <ul> <li> tracks in a segment can be muted or unmuted at any moment, individually or through a mask (to change the mute state of multiple tracks at once) </li> <li> parts of tracks in a segment can be played at predefined points in the segment, in order to maintain synchronization with the other tracks in the segment. This is achieved through the notion of "clips", which can be triggered at any time, but that will play only at the right time, as authored in the corresponding JET file. </li> </ul> As a result of the rendering and playback of the JET segments, the user of the JetPlayer instance can receive notifications from the JET engine relative to: <ul> <li> the playback state, </li> <li> the number of segments left to play in the queue, </li> <li> application controller events (CC80-83) to mark points in the MIDI segments. </li> </ul> Use <pre><code> <a href="https://developer.android.com/reference/android/media/JetPlayer.html#getJetPlayer()"> getJetPlayer() </a> </code></pre> to construct a JetPlayer instance. JetPlayer is a singleton class. </p>\n<pre><code>public class JetPlayer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/JetPlayer.html
JetPlayer.OnJetEventListener	A										<section class="prog__container"><p> Handles the notification when the JET engine generates an event.</p>\n<pre><code>public static interface JetPlayer.OnJetEventListener\n</code></pre></section>	https://developer.android.com/reference/android/media/JetPlayer.OnJetEventListener.html
MediaActionSound	A										<section class="prog__container"><p> <p> A class for producing sounds that match those produced by various actions taken by the media and camera APIs. </p>\n<pre><code>public class MediaActionSound\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaActionSound.html
MediaCodec.BufferInfo	A										<section class="prog__container"><p> Per buffer metadata includes an offset and size specifying the range of valid data in the associated codec (output) buffer.</p>\n<pre><code>public static final class MediaCodec.BufferInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaCodec.BufferInfo.html
MediaCodec.Callback	A										<section class="prog__container"><p> MediaCodec callback interface. Used to notify the user asynchronously of various MediaCodec events.</p>\n<pre><code>public static abstract class MediaCodec.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaCodec.Callback.html
MediaCodec.CodecException	A										<section class="prog__container"><p> Thrown when an internal codec error occurs.</p>\n<pre><code>public static final class MediaCodec.CodecException\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaCodec.CodecException.html
MediaCodec.CryptoException	A										<section class="prog__container"><p> Thrown when a crypto error occurs while queueing a secure input buffer.</p>\n<pre><code>public static final class MediaCodec.CryptoException\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaCodec.CryptoException.html
MediaCodec.CryptoInfo	A										<section class="prog__container"><p> Metadata describing the structure of a (at least partially) encrypted input sample. A buffer's data is considered to be partitioned into "subSamples", each subSample starts with a (potentially empty) run of plain, unencrypted bytes followed by a (also potentially empty) run of encrypted bytes. If pattern encryption applies, each of the latter runs is encrypted only partly, according to a repeating pattern of "encrypt" and "skip" blocks. numBytesOfClearData can be null to indicate that all data is encrypted. This information encapsulates per-sample metadata as outlined in ISO/IEC FDIS 23001-7:2011 "Common encryption in ISO base media file format files".</p>\n<pre><code>public static final class MediaCodec.CryptoInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaCodec.CryptoInfo.html
MediaCodec.CryptoInfo.Pattern	A										<section class="prog__container"><p> Metadata describing an encryption pattern for the protected bytes in a subsample. An encryption pattern consists of a repeating sequence of crypto blocks comprised of a number of encrypted blocks followed by a number of unencrypted, or skipped, blocks.</p>\n<pre><code>public static final class MediaCodec.CryptoInfo.Pattern\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaCodec.CryptoInfo.Pattern.html
MediaCodec	A										<section class="prog__container"><p> MediaCodec class can be used to access low-level media codecs, i.e. encoder/decoder components. It is part of the Android low-level multimedia support infrastructure (normally used together with <pre><code> <a href="https://developer.android.com/reference/android/media/MediaExtractor.html"> MediaExtractor </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/MediaSync.html"> MediaSync </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/MediaMuxer.html"> MediaMuxer </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/MediaCrypto.html"> MediaCrypto </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/MediaDrm.html"> MediaDrm </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/Image.html"> Image </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/view/Surface.html"> Surface </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html"> AudioTrack </a> </code></pre> .) <p> <center> <object data="../../../images/media/mediacodec_buffers.svg" style="width: 540px; height: 205px;" type="image/svg+xml"> <img alt="MediaCodec buffer flow diagram" src="https://developer.android.com/images/media/mediacodec_buffers.png" style="width: 540px; height: 205px"/> </object> </center> <p> In broad terms, a codec processes input data to generate output data. It processes data asynchronously and uses a set of input and output buffers. At a simplistic level, you request (or receive) an empty input buffer, fill it up with data and send it to the codec for processing. The codec uses up the data and transforms it into one of its empty output buffers. Finally, you request (or receive) a filled output buffer, consume its contents and release it back to the codec. </p>\n<pre><code>public final class MediaCodec\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaCodec.html
MediaCodec.OnFrameRenderedListener	A										<section class="prog__container"><p> Listener to be called when an output frame has rendered on the output surface</p>\n<pre><code>public static interface MediaCodec.OnFrameRenderedListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaCodec.OnFrameRenderedListener.html
MediaCodecInfo.AudioCapabilities	A										<section class="prog__container"><p> A class that supports querying the audio capabilities of a codec.</p>\n<pre><code>public static final class MediaCodecInfo.AudioCapabilities\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaCodecInfo.AudioCapabilities.html
MediaCodecInfo.CodecCapabilities	A										<section class="prog__container"><p> Encapsulates the capabilities of a given codec component. For example, what profile/level combinations it supports and what colorspaces it is capable of providing the decoded data in, as well as some codec-type specific capability flags. <p> You can get an instance for a given <pre><code> <a href="https://developer.android.com/reference/android/media/MediaCodecInfo.html"> MediaCodecInfo </a> </code></pre> object with <pre><code> <a href="https://developer.android.com/reference/android/media/MediaCodecInfo.html#getCapabilitiesForType(java.lang.String)"> getCapabilitiesForType() </a> </code></pre> , passing a MIME type. </p>\n<pre><code>public static final class MediaCodecInfo.CodecCapabilities\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html
MediaCodecInfo.CodecProfileLevel	A										<section class="prog__container"><p> Encapsulates the profiles available for a codec component. <p> You can get a set of <pre><code> <a href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html"> MediaCodecInfo.CodecProfileLevel </a> </code></pre> objects for a given <pre><code> <a href="https://developer.android.com/reference/android/media/MediaCodecInfo.html"> MediaCodecInfo </a> </code></pre> object from the <pre><code> <a href="https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#profileLevels"> profileLevels </a> </code></pre> field. </p>\n<pre><code>public static final class MediaCodecInfo.CodecProfileLevel\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaCodecInfo.CodecProfileLevel.html
MediaCodecInfo.EncoderCapabilities	A										<section class="prog__container"><p> A class that supports querying the encoding capabilities of a codec.</p>\n<pre><code>public static final class MediaCodecInfo.EncoderCapabilities\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaCodecInfo.EncoderCapabilities.html
MediaCodecInfo	A										<section class="prog__container"><p> Provides information about a given media codec available on the device. You can iterate through all codecs available by querying <pre><code> <a href="https://developer.android.com/reference/android/media/MediaCodecList.html"> MediaCodecList </a> </code></pre> . For example, here's how to find an encoder that supports a given MIME type: <pre> private static MediaCodecInfo selectCodec(String mimeType) { int numCodecs = MediaCodecList.getCodecCount(); for (int i = 0; i &lt; numCodecs; i++) { MediaCodecInfo codecInfo = MediaCodecList.getCodecInfoAt(i); if (!codecInfo.isEncoder()) { continue; } String[] types = codecInfo.getSupportedTypes(); for (int j = 0; j &lt; types.length; j++) { if (types[j].equalsIgnoreCase(mimeType)) { return codecInfo; } } } return null; }</pre></p>\n<pre><code>public final class MediaCodecInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaCodecInfo.html
MediaCodecInfo.VideoCapabilities	A										<section class="prog__container"><p> A class that supports querying the video capabilities of a codec.</p>\n<pre><code>public static final class MediaCodecInfo.VideoCapabilities\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html
MediaCodecList	A										<section class="prog__container"><p> Allows you to enumerate available codecs, each specified as a <pre><code> <a href="https://developer.android.com/reference/android/media/MediaCodecInfo.html"> MediaCodecInfo </a> </code></pre> object, find a codec supporting a given format and query the capabilities of a given codec. <p> See <pre><code> <a href="https://developer.android.com/reference/android/media/MediaCodecInfo.html"> MediaCodecInfo </a> </code></pre> for sample usage. </p>\n<pre><code>public final class MediaCodecList\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaCodecList.html
MediaCrypto	A										<section class="prog__container"><p> MediaCrypto class can be used in conjunction with <pre><code> <a href="https://developer.android.com/reference/android/media/MediaCodec.html"> MediaCodec </a> </code></pre> to decode encrypted media data. Crypto schemes are assigned 16 byte UUIDs, the method <pre><code> <a href="https://developer.android.com/reference/android/media/MediaCrypto.html#isCryptoSchemeSupported(java.util.UUID)"> isCryptoSchemeSupported(UUID) </a> </code></pre> can be used to query if a given scheme is supported on the device.</p>\n<pre><code>public final class MediaCrypto\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaCrypto.html
MediaCryptoException	A										<section class="prog__container"><p> Exception thrown if MediaCrypto object could not be instantiated or if unable to perform an operation on the MediaCrypto object.</p>\n<pre><code>public final class MediaCryptoException\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaCryptoException.html
MediaDataSource	A										<section class="prog__container"><p> For supplying media data to the framework. Implement this if your app has special requirements for the way media data is obtained. <p class="note"> Methods of this interface may be called on multiple different threads. There will be a thread synchronization point between each call to ensure that modifications to the state of your MediaDataSource are visible to future calls. This means you don't need to do your own synchronization unless you're modifying the MediaDataSource from another thread while it's being used by the framework. </p>\n<pre><code>public abstract class MediaDataSource\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaDataSource.html
MediaDescription.Builder	A										<section class="prog__container"><p> Builder for <pre><code> <a href="https://developer.android.com/reference/android/media/MediaDescription.html"> MediaDescription </a> </code></pre> objects.</p>\n<pre><code>public static class MediaDescription.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaDescription.Builder.html
MediaDescription	A										<section class="prog__container"><p> A simple set of metadata for a media item suitable for display. This can be created using the Builder or retrieved from existing metadata using <pre><code> <a href="https://developer.android.com/reference/android/media/MediaMetadata.html#getDescription()"> getDescription() </a> </code></pre> .</p>\n<pre><code>public class MediaDescription\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaDescription.html
MediaDrm.CryptoSession	A										<section class="prog__container"><p> In addition to supporting decryption of DASH Common Encrypted Media, the MediaDrm APIs provide the ability to securely deliver session keys from an operator's session key server to a client device, based on the factory-installed root of trust, and then perform encrypt, decrypt, sign and verify operations with the session key on arbitrary user data. <p> The CryptoSession class implements generic encrypt/decrypt/sign/verify methods based on the established session keys. These keys are exchanged using the getKeyRequest/provideKeyResponse methods. <p> Applications of this capability could include securing various types of purchased or private content, such as applications, books and other media, photos or media delivery protocols. <p> Operators can create session key servers that are functionally similar to a license key server, except that instead of receiving license key requests and providing encrypted content keys which are used specifically to decrypt A/V media content, the session key server receives session key requests and provides encrypted session keys which can be used for general purpose crypto operations. <p> A CryptoSession is obtained using <pre><code> <a href="https://developer.android.com/reference/android/media/MediaDrm.html#getCryptoSession(byte[], java.lang.String, java.lang.String)"> getCryptoSession(byte[], String, String) </a> </code></pre> </p>\n<pre><code>public final class MediaDrm.CryptoSession\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaDrm.CryptoSession.html
MediaDrm	A										<section class="prog__container"><p> MediaDrm can be used to obtain keys for decrypting protected media streams, in conjunction with <pre><code> <a href="https://developer.android.com/reference/android/media/MediaCrypto.html"> MediaCrypto </a> </code></pre> . The MediaDrm APIs are designed to support the ISO/IEC 23001-7: Common Encryption standard, but may also be used to implement other encryption schemes. <p> Encrypted content is prepared using an encryption server and stored in a content library. The encrypted content is streamed or downloaded from the content library to client devices via content servers. Licenses to view the content are obtained from a License Server. <p> <p> <img alt="MediaDrm Overview diagram" border="0" src="https://developer.android.com/images/mediadrm_overview.png"/> </p>\n<pre><code>public final class MediaDrm\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaDrm.html
MediaDrm.KeyRequest	A										<section class="prog__container"><p> Contains the opaque data an app uses to request keys from a license server</p>\n<pre><code>public static final class MediaDrm.KeyRequest\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaDrm.KeyRequest.html
MediaDrm.KeyStatus	A										<section class="prog__container"><p> Defines the status of a key. A KeyStatus for each key in a session is provided to the <pre><code> <a href="https://developer.android.com/reference/android/media/MediaDrm.OnKeyStatusChangeListener.html#onKeyStatusChange(android.media.MediaDrm, byte[], java.util.List&lt;android.media.MediaDrm.KeyStatus&gt;, boolean)"> onKeyStatusChange(MediaDrm, byte[], List <mediadrm.keystatus> , boolean) </mediadrm.keystatus> </a> </code></pre> listener.</p>\n<pre><code>public static final class MediaDrm.KeyStatus\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaDrm.KeyStatus.html
MediaDrm.MediaDrmStateException	A										<section class="prog__container"><p> Thrown when an unrecoverable failure occurs during a MediaDrm operation. Extends java.lang.IllegalStateException with the addition of an error code that may be useful in diagnosing the failure.</p>\n<pre><code>public static final class MediaDrm.MediaDrmStateException\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaDrm.MediaDrmStateException.html
MediaDrm.OnEventListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a drm event occurs</p>\n<pre><code>public static interface MediaDrm.OnEventListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaDrm.OnEventListener.html
MediaDrm.OnExpirationUpdateListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a drm session expiration update occurs</p>\n<pre><code>public static interface MediaDrm.OnExpirationUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaDrm.OnExpirationUpdateListener.html
MediaDrm.OnKeyStatusChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the keys in a drm session change states.</p>\n<pre><code>public static interface MediaDrm.OnKeyStatusChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaDrm.OnKeyStatusChangeListener.html
MediaDrm.ProvisionRequest	A										<section class="prog__container"><p> Contains the opaque data an app uses to request a certificate from a provisioning server</p>\n<pre><code>public static final class MediaDrm.ProvisionRequest\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaDrm.ProvisionRequest.html
MediaDrmException	A										<section class="prog__container"><p> Base class for MediaDrm exceptions</p>\n<pre><code>public class MediaDrmException\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaDrmException.html
MediaDrmResetException	A										<section class="prog__container"><p> This exception is thrown when the MediaDrm instance has become unusable due to a restart of the mediaserver process. To continue, the app must release the MediaDrm object, then create and initialize a new one.</p>\n<pre><code>public class MediaDrmResetException\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaDrmResetException.html
MediaExtractor	A										<section class="prog__container"><p> MediaExtractor facilitates extraction of demuxed, typically encoded, media data from a data source. <p> It is generally used like this: <pre> MediaExtractor extractor = new MediaExtractor(); extractor.setDataSource(...); int numTracks = extractor.getTrackCount(); for (int i = 0; i &lt; numTracks; ++i) { MediaFormat format = extractor.getTrackFormat(i); String mime = format.getString(MediaFormat.KEY_MIME); if (weAreInterestedInThisTrack) { extractor.selectTrack(i); } } ByteBuffer inputBuffer = ByteBuffer.allocate(...) while (extractor.readSampleData(inputBuffer, ...) &gt;= 0) { int trackIndex = extractor.getSampleTrackIndex(); long presentationTimeUs = extractor.getSampleTime(); ... extractor.advance(); } extractor.release(); extractor = null; </pre> </p>\n<pre><code>public final class MediaExtractor\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaExtractor.html
MediaFormat	A										<section class="prog__container"><p> Encapsulates the information describing the format of media data, be it audio or video. The format of the media data is specified as string/value pairs. Keys common to all audio/video formats, <b> all keys not marked optional are mandatory </b> : <table> <tr> <th> Name </th> <th> Value Type </th> <th> Description </th> </tr> <tr> <td> <pre><code> <a href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MIME"> KEY_MIME </a> </code></pre> </td> <td> String </td> <td> The type of the format. </td> </tr> <tr> <td> <pre><code> <a href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MAX_INPUT_SIZE"> KEY_MAX_INPUT_SIZE </a> </code></pre> </td> <td> Integer </td> <td> optional, maximum size of a buffer of input data </td> </tr> <tr> <td> <pre><code> <a href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_BIT_RATE"> KEY_BIT_RATE </a> </code></pre> </td> <td> Integer </td> <td> <b> encoder-only </b> , desired bitrate in bits/second </td> </tr> </table> Video formats have the following keys: <table> <tr> <th> Name </th> <th> Value Type </th> <th> Description </th> </tr> <tr> <td> <pre><code> <a href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_WIDTH"> KEY_WIDTH </a> </code></pre> </td> <td> Integer </td> <td> </td> </tr> <tr> <td> <pre><code> <a href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_HEIGHT"> KEY_HEIGHT </a> </code></pre> </td> <td> Integer </td> <td> </td> </tr> <tr> <td> <pre><code> <a href="https://developer.android.com/reference/android/media/MediaFormat.html#KEY_COLOR_FORMAT"> KEY_COLOR_FORMAT </a> </code></pre> </td> <td> Integer </td> <td> set by the user for encoders, readable in the output format of decoders </td> </tr> </table></p>\n<pre><code>public final class MediaFormat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaFormat.html
MediaMetadata.Builder	A										<section class="prog__container"><p> Use to build MediaMetadata objects. The system defined metadata keys must use the appropriate data type.</p>\n<pre><code>public static final class MediaMetadata.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaMetadata.Builder.html
MediaMetadata	A										<section class="prog__container"><p> Contains metadata about an item, such as the title, artist, etc.</p>\n<pre><code>public final class MediaMetadata\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaMetadata.html
MediaMetadataEditor	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/media/MediaMetadata.html"> MediaMetadata </a> </code></pre> instead together with <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSession.html"> MediaSession </a> </code></pre> . </p>\n<pre><code>public abstract class MediaMetadataEditor\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaMetadataEditor.html
MediaMetadataRetriever	A										<section class="prog__container"><p> MediaMetadataRetriever class provides a unified interface for retrieving frame and meta data from an input media file.</p>\n<pre><code>public class MediaMetadataRetriever\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaMetadataRetriever.html
MediaMuxer	A										<section class="prog__container"><p> MediaMuxer facilitates muxing elementary streams. Currently supports mp4 or webm file as the output and at most one audio and/or one video elementary stream. MediaMuxer does not support muxing B-frames. <p> It is generally used like this: <pre> MediaMuxer muxer = new MediaMuxer("temp.mp4", OutputFormat.MUXER_OUTPUT_MPEG_4); // More often, the MediaFormat will be retrieved from MediaCodec.getOutputFormat() // or MediaExtractor.getTrackFormat(). MediaFormat audioFormat = new MediaFormat(...); MediaFormat videoFormat = new MediaFormat(...); int audioTrackIndex = muxer.addTrack(audioFormat); int videoTrackIndex = muxer.addTrack(videoFormat); ByteBuffer inputBuffer = ByteBuffer.allocate(bufferSize); boolean finished = false; BufferInfo bufferInfo = new BufferInfo(); muxer.start(); while(!finished) { // getInputBuffer() will fill the inputBuffer with one frame of encoded // sample from either MediaCodec or MediaExtractor, set isAudioSample to // true when the sample is audio data, set up all the fields of bufferInfo, // and return true if there are no more samples. finished = getInputBuffer(inputBuffer, isAudioSample, bufferInfo); if (!finished) { int currentTrackIndex = isAudioSample ? audioTrackIndex : videoTrackIndex; muxer.writeSampleData(currentTrackIndex, inputBuffer, bufferInfo); } }; muxer.stop(); muxer.release(); </pre> </p>\n<pre><code>public final class MediaMuxer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaMuxer.html
MediaMuxer.OutputFormat	A										<section class="prog__container"><p> Defines the output format. These constants are used with constructor.</p>\n<pre><code>public static final class MediaMuxer.OutputFormat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaMuxer.OutputFormat.html
MediaPlayer	A										<section class="prog__container"><p> MediaPlayer class can be used to control playback of audio/video files and streams. An example on how to use the methods in this class can be found in <pre><code> <a href="https://developer.android.com/reference/android/widget/VideoView.html"> VideoView </a> </code></pre> . <p> Topics covered here are: <ol> <li> <a href="#StateDiagram"> State Diagram </a> <li> <a href="#Valid_and_Invalid_States"> Valid and Invalid States </a> <li> <a href="#Permissions"> Permissions </a> <li> <a href="#Callbacks"> Register informational and error callbacks </a> </li> </li> </li> </li> </ol> </p>\n<pre><code>public class MediaPlayer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.html
MediaPlayer.OnBufferingUpdateListener	A										<section class="prog__container"><p> Interface definition of a callback to be invoked indicating buffering status of a media resource being streamed over the network.</p>\n<pre><code>public static interface MediaPlayer.OnBufferingUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.OnBufferingUpdateListener.html
MediaPlayer.OnCompletionListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when playback of a media source has completed.</p>\n<pre><code>public static interface MediaPlayer.OnCompletionListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.OnCompletionListener.html
MediaPlayer.OnErrorListener	A										<section class="prog__container"><p> Interface definition of a callback to be invoked when there has been an error during an asynchronous operation (other errors will throw exceptions at method call time).</p>\n<pre><code>public static interface MediaPlayer.OnErrorListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.OnErrorListener.html
MediaPlayer.OnInfoListener	A										<section class="prog__container"><p> Interface definition of a callback to be invoked to communicate some info and/or warning about the media or its playback.</p>\n<pre><code>public static interface MediaPlayer.OnInfoListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.OnInfoListener.html
MediaPlayer.OnPreparedListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the media source is ready for playback.</p>\n<pre><code>public static interface MediaPlayer.OnPreparedListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.OnPreparedListener.html
MediaPlayer.OnSeekCompleteListener	A										<section class="prog__container"><p> Interface definition of a callback to be invoked indicating the completion of a seek operation.</p>\n<pre><code>public static interface MediaPlayer.OnSeekCompleteListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.OnSeekCompleteListener.html
MediaPlayer.OnTimedMetaDataAvailableListener	A										<section class="prog__container"><p> Interface definition of a callback to be invoked when a track has timed metadata available.</p>\n<pre><code>public static interface MediaPlayer.OnTimedMetaDataAvailableListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.OnTimedMetaDataAvailableListener.html
MediaPlayer.OnTimedTextListener	A										<section class="prog__container"><p> Interface definition of a callback to be invoked when a timed text is available for display.</p>\n<pre><code>public static interface MediaPlayer.OnTimedTextListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.OnTimedTextListener.html
MediaPlayer.OnVideoSizeChangedListener	A										<section class="prog__container"><p> Interface definition of a callback to be invoked when the video size is first known or updated</p>\n<pre><code>public static interface MediaPlayer.OnVideoSizeChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.OnVideoSizeChangedListener.html
MediaPlayer.TrackInfo	A										<section class="prog__container"><p> Class for MediaPlayer to return each audio/video/subtitle track's metadata.</p>\n<pre><code>public static class MediaPlayer.TrackInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html
MediaRecorder.AudioEncoder	A										<section class="prog__container"><p> Defines the audio encoding. These constants are used with <pre><code> <a href="https://developer.android.com/reference/android/media/MediaRecorder.html#setAudioEncoder(int)"> setAudioEncoder(int) </a> </code></pre> .</p>\n<pre><code>public final class MediaRecorder.AudioEncoder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaRecorder.AudioEncoder.html
MediaRecorder.AudioSource	A										<section class="prog__container"><p> Defines the audio source. An audio source defines both a default physical source of audio signal, and a recording configuration. These constants are for instance used in <pre><code> <a href="https://developer.android.com/reference/android/media/MediaRecorder.html#setAudioSource(int)"> setAudioSource(int) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecord.Builder.html#setAudioSource(int)"> setAudioSource(int) </a> </code></pre> .</p>\n<pre><code>public final class MediaRecorder.AudioSource\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaRecorder.AudioSource.html
MediaRecorder	A										<section class="prog__container"><p> Used to record audio and video. The recording control is based on a simple state machine (see below). <p> <img border="0" src="https://developer.android.com/images/mediarecorder_state_diagram.gif"/> </p>\n<pre><code>public class MediaRecorder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaRecorder.html
MediaRecorder.OnErrorListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when an error occurs while recording.</p>\n<pre><code>public static interface MediaRecorder.OnErrorListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaRecorder.OnErrorListener.html
MediaRecorder.OnInfoListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when an error occurs while recording.</p>\n<pre><code>public static interface MediaRecorder.OnInfoListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaRecorder.OnInfoListener.html
MediaRecorder.OutputFormat	A										<section class="prog__container"><p> Defines the output format. These constants are used with <pre><code> <a href="https://developer.android.com/reference/android/media/MediaRecorder.html#setOutputFormat(int)"> setOutputFormat(int) </a> </code></pre> .</p>\n<pre><code>public final class MediaRecorder.OutputFormat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaRecorder.OutputFormat.html
MediaRecorder.VideoEncoder	A										<section class="prog__container"><p> Defines the video encoding. These constants are used with <pre><code> <a href="https://developer.android.com/reference/android/media/MediaRecorder.html#setVideoEncoder(int)"> setVideoEncoder(int) </a> </code></pre> .</p>\n<pre><code>public final class MediaRecorder.VideoEncoder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaRecorder.VideoEncoder.html
MediaRecorder.VideoSource	A										<section class="prog__container"><p> Defines the video source. These constants are used with <pre><code> <a href="https://developer.android.com/reference/android/media/MediaRecorder.html#setVideoSource(int)"> setVideoSource(int) </a> </code></pre> .</p>\n<pre><code>public final class MediaRecorder.VideoSource\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaRecorder.VideoSource.html
MediaRouter.Callback	A										<section class="prog__container"><p> Interface for receiving events about media routing changes. All methods of this interface will be called from the application's main thread. <p> A Callback will only receive events relevant to routes that the callback was registered for unless the <pre><code> <a href="https://developer.android.com/reference/android/media/MediaRouter.html#CALLBACK_FLAG_UNFILTERED_EVENTS"> CALLBACK_FLAG_UNFILTERED_EVENTS </a> </code></pre> flag was specified in <pre><code> <a href="https://developer.android.com/reference/android/media/MediaRouter.html#addCallback(int, android.media.MediaRouter.Callback, int)"> addCallback(int, Callback, int) </a> </code></pre> . </p>\n<pre><code>public static abstract class MediaRouter.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaRouter.Callback.html
MediaRouter	A										<section class="prog__container"><p> MediaRouter allows applications to control the routing of media channels and streams from the current device to external speakers and destination devices. <p> A MediaRouter is retrieved through <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> Context.getSystemService() </a> </code></pre> of a <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#MEDIA_ROUTER_SERVICE"> Context.MEDIA_ROUTER_SERVICE </a> </code></pre> . <p> The media router API is not thread-safe; all interactions with it must be done from the main thread of the process. </p>\n<pre><code>public class MediaRouter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaRouter.html
MediaRouter.RouteCategory	A										<section class="prog__container"><p> Definition of a category of routes. All routes belong to a category.</p>\n<pre><code>public static class MediaRouter.RouteCategory\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaRouter.RouteCategory.html
MediaRouter.RouteGroup	A										<section class="prog__container"><p> Information about a route that consists of multiple other routes in a group.</p>\n<pre><code>public static class MediaRouter.RouteGroup\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaRouter.RouteGroup.html
MediaRouter.RouteInfo	A										<section class="prog__container"><p> Information about a media route.</p>\n<pre><code>public static class MediaRouter.RouteInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html
MediaRouter.SimpleCallback	A										<section class="prog__container"><p> Stub implementation of <pre><code> <a href="https://developer.android.com/reference/android/media/MediaRouter.Callback.html"> MediaRouter.Callback </a> </code></pre> . Each abstract method is defined as a no-op. Override just the ones you need.</p>\n<pre><code>public static class MediaRouter.SimpleCallback\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaRouter.SimpleCallback.html
MediaRouter.UserRouteInfo	A										<section class="prog__container"><p> Information about a route that the application may define and modify. A user route defaults to <pre><code> <a href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#PLAYBACK_TYPE_REMOTE"> PLAYBACK_TYPE_REMOTE </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#PLAYBACK_VOLUME_FIXED"> PLAYBACK_VOLUME_FIXED </a> </code></pre> .</p>\n<pre><code>public static class MediaRouter.UserRouteInfo\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html
MediaRouter.VolumeCallback	A										<section class="prog__container"><p> Interface for receiving events about volume changes. All methods of this interface will be called from the application's main thread. <p> A VolumeCallback will only receive events relevant to routes that the callback was registered for. </p>\n<pre><code>public static abstract class MediaRouter.VolumeCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaRouter.VolumeCallback.html
MediaScannerConnection	A										<section class="prog__container"><p> MediaScannerConnection provides a way for applications to pass a newly created or downloaded media file to the media scanner service. The media scanner service will read metadata from the file and add the file to the media content provider. The MediaScannerConnectionClient provides an interface for the media scanner service to return the Uri for a newly scanned file to the client of the MediaScannerConnection class.</p>\n<pre><code>public class MediaScannerConnection\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaScannerConnection.html
MediaScannerConnection.MediaScannerConnectionClient	A										<section class="prog__container"><p> An interface for notifying clients of MediaScannerConnection when a connection to the MediaScanner service has been established and when the scanning of a file has completed.</p>\n<pre><code>public static interface MediaScannerConnection.MediaScannerConnectionClient\nimplements <a href="https://developer.android.com/reference/android/media/MediaScannerConnection.OnScanCompletedListener.html">MediaScannerConnection.OnScanCompletedListener</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaScannerConnection.MediaScannerConnectionClient.html
MediaScannerConnection.OnScanCompletedListener	A										<section class="prog__container"><p> Interface for notifying clients of the result of scanning a requested media file.</p>\n<pre><code>public static interface MediaScannerConnection.OnScanCompletedListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaScannerConnection.OnScanCompletedListener.html
MediaSync.Callback	A										<section class="prog__container"><p> MediaSync callback interface. Used to notify the user asynchronously of various MediaSync events.</p>\n<pre><code>public static abstract class MediaSync.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaSync.Callback.html
MediaSync	A										<section class="prog__container"><p> MediaSync class can be used to synchronously playback audio and video streams. It can be used to play audio-only or video-only stream, too. <p> MediaSync is generally used like this: <pre> MediaSync sync = new MediaSync(); sync.setSurface(surface); Surface inputSurface = sync.createInputSurface(); ... // MediaCodec videoDecoder = ...; videoDecoder.configure(format, inputSurface, ...); ... sync.setAudioTrack(audioTrack); sync.setCallback(new MediaSync.Callback() { @Override public void onAudioBufferConsumed(MediaSync sync, ByteBuffer audioBuffer, int bufferId) { ... } }, null); // This needs to be done since sync is paused on creation. sync.setPlaybackParams(new PlaybackParams().setSpeed(1.f)); for (;;) { ... // send video frames to surface for rendering, e.g., call // videoDecoder.releaseOutputBuffer(videoOutputBufferIx, videoPresentationTimeNs); // More details are available as below. ... sync.queueAudio(audioByteBuffer, bufferId, audioPresentationTimeUs); // non-blocking. // The audioByteBuffer and bufferId will be returned via callback. // More details are available as below. ... ... } sync.setPlaybackParams(new PlaybackParams().setSpeed(0.f)); sync.release(); sync = null; // The following code snippet illustrates how video/audio raw frames are created by // MediaCodec's, how they are fed to MediaSync and how they are returned by MediaSync. // This is the callback from MediaCodec. onOutputBufferAvailable(MediaCodec codec, int bufferId, BufferInfo info) { // ... if (codec == videoDecoder) { // surface timestamp must contain media presentation time in nanoseconds. codec.releaseOutputBuffer(bufferId, 1000 * info.presentationTime); } else { ByteBuffer audioByteBuffer = codec.getOutputBuffer(bufferId); sync.queueAudio(audioByteBuffer, bufferId, info.presentationTime); } // ... } // This is the callback from MediaSync. onAudioBufferConsumed(MediaSync sync, ByteBuffer buffer, int bufferId) { // ... audioDecoder.releaseBuffer(bufferId, false); // ... } </pre> The client needs to configure corresponding sink by setting the Surface and/or AudioTrack based on the stream type it will play. <p> For video, the client needs to call <pre><code> <a href="https://developer.android.com/reference/android/media/MediaSync.html#createInputSurface()"> createInputSurface() </a> </code></pre> to obtain a surface on which it will render video frames. <p> For audio, the client needs to set up audio track correctly, e.g., using <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html#MODE_STREAM"> MODE_STREAM </a> </code></pre> . The audio buffers are sent to MediaSync directly via <pre><code> <a href="https://developer.android.com/reference/android/media/MediaSync.html#queueAudio(java.nio.ByteBuffer, int, long)"> queueAudio(ByteBuffer, int, long) </a> </code></pre> , and are returned to the client via <pre><code> <a href="https://developer.android.com/reference/android/media/MediaSync.Callback.html#onAudioBufferConsumed(android.media.MediaSync, java.nio.ByteBuffer, int)"> onAudioBufferConsumed(MediaSync, ByteBuffer, int) </a> </code></pre> asynchronously. The client should not modify an audio buffer till it's returned. <p> The client can optionally pre-fill audio/video buffers by setting playback rate to 0.0, and then feed audio/video buffers to corresponding components. This can reduce possible initial underrun. <p> </p>\n<pre><code>public final class MediaSync\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaSync.html
MediaSync.OnErrorListener	A										<section class="prog__container"><p> Interface definition of a callback to be invoked when there has been an error during an asynchronous operation (other errors will throw exceptions at method call time).</p>\n<pre><code>public static interface MediaSync.OnErrorListener\n</code></pre></section>	https://developer.android.com/reference/android/media/MediaSync.OnErrorListener.html
MediaSyncEvent	A										<section class="prog__container"><p> The MediaSyncEvent class defines events that can be used to synchronize playback or capture actions between different players and recorders. <p> For instance, <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecord.html#startRecording(android.media.MediaSyncEvent)"> startRecording(MediaSyncEvent) </a> </code></pre> is used to start capture only when the playback on a particular audio session is complete. The audio session ID is retrieved from a player (e.g <pre><code> <a href="https://developer.android.com/reference/android/media/MediaPlayer.html"> MediaPlayer </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html"> AudioTrack </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/media/ToneGenerator.html"> ToneGenerator </a> </code></pre> ) by use of the getAudioSessionId() method. </p>\n<pre><code>public class MediaSyncEvent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaSyncEvent.html
MediaTimestamp	A										<section class="prog__container"><p> An immutable object that represents the linear correlation between the media time and the system time. It contains the media clock rate, together with the media timestamp of an anchor frame and the system time when that frame was presented or is committed to be presented. <p> The phrase "present" means that audio/video produced on device is detectable by an external observer off device. The time is based on the implementation's best effort, using whatever knowledge is available to the system, but cannot account for any delay unknown to the implementation. The anchor frame could be any frame, including a just-rendered frame, or even a theoretical or in-between frame, based on the source of the MediaTimestamp. When the anchor frame is a just-rendered one, the media time stands for current position of the playback or recording. </p>\n<pre><code>public final class MediaTimestamp\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/MediaTimestamp.html
NotProvisionedException	A										<section class="prog__container"><p> Exception thrown when an operation on a MediaDrm object is attempted and the device does not have a certificate. The app should obtain and install a certificate using the MediaDrm provisioning methods then retry the operation.</p>\n<pre><code>public final class NotProvisionedException\n</code></pre></section>	https://developer.android.com/reference/android/media/NotProvisionedException.html
android.media	A										<section class="prog__container">The Media APIs are used to play and, in some cases, record media files. This includesaudio (e.g., play MP3s or other music files, ringtones, game sound effects, or DTMF tones)and video (e.g., play a video streamed over the web or from local storage).</section>	https://developer.android.com/reference/android/media/package-summary.html
PlaybackParams	A										<section class="prog__container"><p> Structure for common playback params. Used by <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html"> AudioTrack </a> </code></pre> <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html#getPlaybackParams()"> getPlaybackParams() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html#setPlaybackParams(android.media.PlaybackParams)"> setPlaybackParams(PlaybackParams) </a> </code></pre> to control playback behavior. <p> <strong> audio fallback mode: </strong> select out-of-range parameter handling. <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/media/PlaybackParams.html#AUDIO_FALLBACK_MODE_DEFAULT"> AUDIO_FALLBACK_MODE_DEFAULT </a> </code></pre> : System will determine best handling. </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/media/PlaybackParams.html#AUDIO_FALLBACK_MODE_MUTE"> AUDIO_FALLBACK_MODE_MUTE </a> </code></pre> : Play silence for params normally out of range. </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/media/PlaybackParams.html#AUDIO_FALLBACK_MODE_FAIL"> AUDIO_FALLBACK_MODE_FAIL </a> </code></pre> : Return <pre><code> <a href="https://developer.android.com/reference/java/lang/IllegalArgumentException.html"> IllegalArgumentException </a> </code></pre> from <pre><code> AudioTrack.setPlaybackParams(PlaybackParams) </code></pre> . </li> </ul> <p> <strong> pitch: </strong> increases or decreases the tonal frequency of the audio content. It is expressed as a multiplicative factor, where normal pitch is 1.0f. <p> <strong> speed: </strong> increases or decreases the time to play back a set of audio or video frames. It is expressed as a multiplicative factor, where normal speed is 1.0f. <p> Different combinations of speed and pitch may be used for audio playback; some common ones: <ul> <li> <em> Pitch equals 1.0f. </em> Speed change will be done with pitch preserved, often called <em> timestretching </em> . </li> <li> <em> Pitch equals speed. </em> Speed change will be done by <em> resampling </em> , similar to <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html#setPlaybackRate(int)"> setPlaybackRate(int) </a> </code></pre> . </li> </ul> </p>\n<pre><code>public final class PlaybackParams\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/PlaybackParams.html
Rating	A										<section class="prog__container"><p> A class to encapsulate rating information used as content metadata. A rating is defined by its rating style (see <pre><code> <a href="https://developer.android.com/reference/android/media/Rating.html#RATING_HEART"> RATING_HEART </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/Rating.html#RATING_THUMB_UP_DOWN"> RATING_THUMB_UP_DOWN </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/Rating.html#RATING_3_STARS"> RATING_3_STARS </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/Rating.html#RATING_4_STARS"> RATING_4_STARS </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/Rating.html#RATING_5_STARS"> RATING_5_STARS </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/media/Rating.html#RATING_PERCENTAGE"> RATING_PERCENTAGE </a> </code></pre> ) and the actual rating value (which may be defined as "unrated"), both of which are defined when the rating instance is constructed through one of the factory methods.</p>\n<pre><code>public final class Rating\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/Rating.html
RemoteControlClient	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSession.html"> MediaSession </a> </code></pre> instead. </p>\n<pre><code>public class RemoteControlClient\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/RemoteControlClient.html
RemoteControlClient.MetadataEditor	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/media/MediaMetadata.html"> MediaMetadata </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSession.html"> MediaSession </a> </code></pre> instead. </p>\n<pre><code>public class RemoteControlClient.MetadataEditor\n</code></pre></section>	https://developer.android.com/reference/android/media/RemoteControlClient.MetadataEditor.html
RemoteControlClient.OnGetPlaybackPositionListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the media playback position is queried.</p>\n<pre><code>public static interface RemoteControlClient.OnGetPlaybackPositionListener\n</code></pre></section>	https://developer.android.com/reference/android/media/RemoteControlClient.OnGetPlaybackPositionListener.html
RemoteControlClient.OnMetadataUpdateListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when one of the metadata values has been updated. Implement this interface to receive metadata updates after registering your listener through <pre><code> <a href="https://developer.android.com/reference/android/media/RemoteControlClient.html#setMetadataUpdateListener(android.media.RemoteControlClient.OnMetadataUpdateListener)"> setMetadataUpdateListener(OnMetadataUpdateListener) </a> </code></pre> .</p>\n<pre><code>public static interface RemoteControlClient.OnMetadataUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/media/RemoteControlClient.OnMetadataUpdateListener.html
RemoteControlClient.OnPlaybackPositionUpdateListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the media playback position is requested to be updated.</p>\n<pre><code>public static interface RemoteControlClient.OnPlaybackPositionUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/media/RemoteControlClient.OnPlaybackPositionUpdateListener.html
RemoteController	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaController.html"> MediaController </a> </code></pre> instead. </p>\n<pre><code>public final class RemoteController\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/RemoteController.html
RemoteController.MetadataEditor	A										<section class="prog__container"><p> A class to read the metadata published by a <pre><code> <a href="https://developer.android.com/reference/android/media/RemoteControlClient.html"> RemoteControlClient </a> </code></pre> , or send a <pre><code> <a href="https://developer.android.com/reference/android/media/RemoteControlClient.html"> RemoteControlClient </a> </code></pre> new values for keys that can be edited.</p>\n<pre><code>public class RemoteController.MetadataEditor\n</code></pre></section>	https://developer.android.com/reference/android/media/RemoteController.MetadataEditor.html
RemoteController.OnClientUpdateListener	A										<section class="prog__container"><p> Interface definition for the callbacks to be invoked whenever media events, metadata and playback status are available.</p>\n<pre><code>public static interface RemoteController.OnClientUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/media/RemoteController.OnClientUpdateListener.html
ResourceBusyException	A										<section class="prog__container"><p> Exception thrown when an operation on a MediaDrm object is attempted and hardware resources are not available, due to being in use.</p>\n<pre><code>public final class ResourceBusyException\n</code></pre></section>	https://developer.android.com/reference/android/media/ResourceBusyException.html
Ringtone	A										<section class="prog__container"><p> Ringtone provides a quick method for playing a ringtone, notification, or other similar types of sounds. <p> For ways of retrieving <pre><code> <a href="https://developer.android.com/reference/android/media/Ringtone.html"> Ringtone </a> </code></pre> objects or to show a ringtone picker, see <pre><code> <a href="https://developer.android.com/reference/android/media/RingtoneManager.html"> RingtoneManager </a> </code></pre> . </p>\n<pre><code>public class Ringtone\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/Ringtone.html
RingtoneManager	A										<section class="prog__container"><p> RingtoneManager provides access to ringtones, notification, and other types of sounds. It manages querying the different media providers and combines the results into a single cursor. It also provides a <pre><code> <a href="https://developer.android.com/reference/android/media/Ringtone.html"> Ringtone </a> </code></pre> for each ringtone. We generically call these sounds ringtones, however the <pre><code> <a href="https://developer.android.com/reference/android/media/RingtoneManager.html#TYPE_RINGTONE"> TYPE_RINGTONE </a> </code></pre> refers to the type of sounds that are suitable for the phone ringer. <p> To show a ringtone picker to the user, use the <pre><code> <a href="https://developer.android.com/reference/android/media/RingtoneManager.html#ACTION_RINGTONE_PICKER"> ACTION_RINGTONE_PICKER </a> </code></pre> intent to launch the picker as a subactivity. </p>\n<pre><code>public class RingtoneManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/RingtoneManager.html
SoundPool.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> <a href="https://developer.android.com/reference/android/media/SoundPool.html"> SoundPool </a> </code></pre> objects.</p>\n<pre><code>public static class SoundPool.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/SoundPool.Builder.html
SoundPool	A										<section class="prog__container"><p> The SoundPool class manages and plays audio resources for applications. <p> A SoundPool is a collection of samples that can be loaded into memory from a resource inside the APK or from a file in the file system. The SoundPool library uses the MediaPlayer service to decode the audio into a raw 16-bit PCM mono or stereo stream. This allows applications to ship with compressed streams without having to suffer the CPU load and latency of decompressing during playback. </p>\n<pre><code>public class SoundPool\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/SoundPool.html
SoundPool.OnLoadCompleteListener	A										<section class="prog__container"><p> Called when a sound has completed loading.</p>\n<pre><code>public static interface SoundPool.OnLoadCompleteListener\n</code></pre></section>	https://developer.android.com/reference/android/media/SoundPool.OnLoadCompleteListener.html
SyncParams	A										<section class="prog__container"><p> Structure for common A/V sync params. Used by <pre><code> <a href="https://developer.android.com/reference/android/media/MediaSync.html"> MediaSync </a> </code></pre> {link MediaSync#getSyncParams()} and {link MediaSync#setSyncParams(SyncParams)} to control A/V sync behavior. <p> <strong> audio adjust mode: </strong> select handling of audio track when changing playback speed due to sync. <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/media/SyncParams.html#AUDIO_ADJUST_MODE_DEFAULT"> AUDIO_ADJUST_MODE_DEFAULT </a> </code></pre> : System will determine best handling. </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/media/SyncParams.html#AUDIO_ADJUST_MODE_STRETCH"> AUDIO_ADJUST_MODE_STRETCH </a> </code></pre> : Change the speed of audio playback without altering its pitch. </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/media/SyncParams.html#AUDIO_ADJUST_MODE_RESAMPLE"> AUDIO_ADJUST_MODE_RESAMPLE </a> </code></pre> : Change the speed of audio playback by resampling the audio. </li> </ul> <p> <strong> sync source: </strong> select clock source for sync. <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/media/SyncParams.html#SYNC_SOURCE_DEFAULT"> SYNC_SOURCE_DEFAULT </a> </code></pre> : System will determine best selection. </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/media/SyncParams.html#SYNC_SOURCE_SYSTEM_CLOCK"> SYNC_SOURCE_SYSTEM_CLOCK </a> </code></pre> : Use system clock for sync source. </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/media/SyncParams.html#SYNC_SOURCE_AUDIO"> SYNC_SOURCE_AUDIO </a> </code></pre> : Use audio track for sync source. </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/media/SyncParams.html#SYNC_SOURCE_VSYNC"> SYNC_SOURCE_VSYNC </a> </code></pre> : Syncronize media to vsync. </li> </ul> <p> <strong> tolerance: </strong> specifies the amount of allowed playback rate change to keep media in sync with the sync source. The handling of this depends on the sync source, but must not be negative, and must be less than one. <p> <strong> frameRate: </strong> initial hint for video frame rate. Used when sync source is vsync. Negative values can be used to clear a previous hint. </p>\n<pre><code>public final class SyncParams\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/SyncParams.html
ThumbnailUtils	A										<section class="prog__container"><p> Thumbnail generation routines for media provider.</p>\n<pre><code>public class ThumbnailUtils\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/ThumbnailUtils.html
TimedMetaData	A										<section class="prog__container"><p> Class that embodies one timed metadata access unit, including <ul> <li> a time stamp, and </li> <li> raw uninterpreted byte-array extracted directly from the container. </li> </ul></p>\n<pre><code>public final class TimedMetaData\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/TimedMetaData.html
TimedText	A										<section class="prog__container"><p> Class to hold the timed text's metadata, including: <ul> <li> The characters for rendering </li> <li> The rendering position for the timed text </li> </ul> <p> To render the timed text, applications need to do the following: <ul> <li> Implement the <pre><code> <a href="https://developer.android.com/reference/android/media/MediaPlayer.OnTimedTextListener.html"> MediaPlayer.OnTimedTextListener </a> </code></pre> interface </li> <li> Register the <pre><code> <a href="https://developer.android.com/reference/android/media/MediaPlayer.OnTimedTextListener.html"> MediaPlayer.OnTimedTextListener </a> </code></pre> callback on a MediaPlayer object that is used for playback </li> <li> When a onTimedText callback is received, do the following: <ul> <li> call <pre><code> <a href="https://developer.android.com/reference/android/media/TimedText.html#getText()"> getText() </a> </code></pre> to get the characters for rendering </li> <li> call <pre><code> <a href="https://developer.android.com/reference/android/media/TimedText.html#getBounds()"> getBounds() </a> </code></pre> to get the text rendering area/region </li> </ul> </li> </ul> </p>\n<pre><code>public final class TimedText\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/TimedText.html
ToneGenerator	A										<section class="prog__container"><p> This class provides methods to play DTMF tones (ITU-T Recommendation Q.23), call supervisory tones (3GPP TS 22.001, CEPT) and proprietary tones (3GPP TS 31.111). Depending on call state and routing options, tones are mixed to the downlink audio or output to the speaker phone or headset. This API is not for generating tones over the uplink audio path.</p>\n<pre><code>public class ToneGenerator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/ToneGenerator.html
UnsupportedSchemeException	A										<section class="prog__container"><p> Exception thrown when an attempt is made to construct a MediaDrm object using a crypto scheme UUID that is not supported by the device</p>\n<pre><code>public final class UnsupportedSchemeException\n</code></pre></section>	https://developer.android.com/reference/android/media/UnsupportedSchemeException.html
VolumeProvider	A										<section class="prog__container"><p> Handles requests to adjust or set the volume on a session. This is also used to push volume updates back to the session. The provider must call <pre><code> <a href="https://developer.android.com/reference/android/media/VolumeProvider.html#setCurrentVolume(int)"> setCurrentVolume(int) </a> </code></pre> each time the volume being provided changes. <p> You can set a volume provider on a session by calling <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSession.html#setPlaybackToRemote(android.media.VolumeProvider)"> setPlaybackToRemote(VolumeProvider) </a> </code></pre> . </p>\n<pre><code>public abstract class VolumeProvider\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/VolumeProvider.html
AcousticEchoCanceler	A										<section class="prog__container"><p> Acoustic Echo Canceler (AEC). <p> Acoustic Echo Canceler (AEC) is an audio pre-processing which removes the contribution of the signal received from the remote party from the captured audio signal. <p> AEC is used by voice communication applications (voice chat, video conferencing, SIP calls) where the presence of echo with significant delay in the signal received from the remote party is highly disturbing. AEC is often used in conjunction with noise suppression (NS). <p> An application creates an AcousticEchoCanceler object to instantiate and control an AEC engine in the audio capture path. <p> To attach the AcousticEchoCanceler to a particular <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecord.html"> AudioRecord </a> </code></pre> , specify the audio session ID of this AudioRecord when creating the AcousticEchoCanceler. The audio session is retrieved by calling <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecord.html#getAudioSessionId()"> getAudioSessionId() </a> </code></pre> on the AudioRecord instance. <p> On some devices, an AEC can be inserted by default in the capture path by the platform according to the <pre><code> <a href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource.html"> MediaRecorder.AudioSource </a> </code></pre> used. The application should call AcousticEchoCanceler.getEnable() after creating the AEC to check the default AEC activation state on a particular AudioRecord session. <p> See <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/AudioEffect.html"> AudioEffect </a> </code></pre> class for more details on controlling audio effects. </p>\n<pre><code>public class AcousticEchoCanceler\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/AcousticEchoCanceler.html
AudioEffect.Descriptor	A										<section class="prog__container"><p> The effect descriptor contains information on a particular effect implemented in the audio framework: <br> <ul> <li> type: UUID identifying the effect type. May be one of: <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/AudioEffect.html#EFFECT_TYPE_AEC"> EFFECT_TYPE_AEC </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/AudioEffect.html#EFFECT_TYPE_AGC"> EFFECT_TYPE_AGC </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/AudioEffect.html#EFFECT_TYPE_BASS_BOOST"> EFFECT_TYPE_BASS_BOOST </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/AudioEffect.html#EFFECT_TYPE_ENV_REVERB"> EFFECT_TYPE_ENV_REVERB </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/AudioEffect.html#EFFECT_TYPE_EQUALIZER"> EFFECT_TYPE_EQUALIZER </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/AudioEffect.html#EFFECT_TYPE_NS"> EFFECT_TYPE_NS </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/AudioEffect.html#EFFECT_TYPE_PRESET_REVERB"> EFFECT_TYPE_PRESET_REVERB </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/AudioEffect.html#EFFECT_TYPE_VIRTUALIZER"> EFFECT_TYPE_VIRTUALIZER </a> </code></pre> . </li> <li> uuid: UUID for this particular implementation </li> <li> connectMode: <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/AudioEffect.html#EFFECT_INSERT"> EFFECT_INSERT </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/AudioEffect.html#EFFECT_AUXILIARY"> EFFECT_AUXILIARY </a> </code></pre> </li> <li> name: human readable effect name </li> <li> implementor: human readable effect implementor name </li> </ul> The method <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/AudioEffect.html#queryEffects()"> queryEffects() </a> </code></pre> returns an array of Descriptors to facilitate effects enumeration. </br></p>\n<pre><code>public static class AudioEffect.Descriptor\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/audiofx/AudioEffect.Descriptor.html
AudioEffect	A										<section class="prog__container"><p> AudioEffect is the base class for controlling audio effects provided by the android audio framework. <p> Applications should not use the AudioEffect class directly but one of its derived classes to control specific effects: <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/Equalizer.html"> Equalizer </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/Virtualizer.html"> Virtualizer </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/BassBoost.html"> BassBoost </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/PresetReverb.html"> PresetReverb </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/EnvironmentalReverb.html"> EnvironmentalReverb </a> </code></pre> </li> </ul> <p> To apply the audio effect to a specific AudioTrack or MediaPlayer instance, the application must specify the audio session ID of that instance when creating the AudioEffect. (see <pre><code> <a href="https://developer.android.com/reference/android/media/MediaPlayer.html#getAudioSessionId()"> getAudioSessionId() </a> </code></pre> for details on audio sessions). <p> NOTE: attaching insert effects (equalizer, bass boost, virtualizer) to the global audio output mix by use of session 0 is deprecated. <p> Creating an AudioEffect object will create the corresponding effect engine in the audio framework if no instance of the same effect type exists in the specified audio session. If one exists, this instance will be used. <p> The application creating the AudioEffect object (or a derived class) will either receive control of the effect engine or not depending on the priority parameter. If priority is higher than the priority used by the current effect engine owner, the control will be transfered to the new object. Otherwise control will remain with the previous object. In this case, the new application will be notified of changes in effect engine state or control ownership by the appropriate listener. </p>\n<pre><code>public class AudioEffect\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/audiofx/AudioEffect.html
AudioEffect.OnControlStatusChangeListener	A										<section class="prog__container"><p> The OnControlStatusChangeListener interface defines a method called by the AudioEffect when a the control of the effect engine is gained or lost by the application</p>\n<pre><code>public static interface AudioEffect.OnControlStatusChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/AudioEffect.OnControlStatusChangeListener.html
AudioEffect.OnEnableStatusChangeListener	A										<section class="prog__container"><p> The OnEnableStatusChangeListener interface defines a method called by the AudioEffect when a the enabled state of the effect engine was changed by the controlling application.</p>\n<pre><code>public static interface AudioEffect.OnEnableStatusChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/AudioEffect.OnEnableStatusChangeListener.html
AutomaticGainControl	A										<section class="prog__container"><p> Automatic Gain Control (AGC). <p> Automatic Gain Control (AGC) is an audio pre-processing which automatically normalizes the output of the captured signal by boosting or lowering input from the microphone to match a preset level so that the output signal level is virtually constant. AGC can be used by applications where the input signal dynamic range is not important but where a constant strong capture level is desired. <p> An application creates a AutomaticGainControl object to instantiate and control an AGC engine in the audio framework. <p> To attach the AutomaticGainControl to a particular <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecord.html"> AudioRecord </a> </code></pre> , specify the audio session ID of this AudioRecord when creating the AutomaticGainControl. The audio session is retrieved by calling <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecord.html#getAudioSessionId()"> getAudioSessionId() </a> </code></pre> on the AudioRecord instance. <p> On some devices, an AGC can be inserted by default in the capture path by the platform according to the <pre><code> <a href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource.html"> MediaRecorder.AudioSource </a> </code></pre> used. The application should call AutomaticGainControl.getEnable() after creating the AGC to check the default AGC activation state on a particular AudioRecord session. <p> See <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/AudioEffect.html"> AudioEffect </a> </code></pre> class for more details on controlling audio effects. </p>\n<pre><code>public class AutomaticGainControl\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/AutomaticGainControl.html
BassBoost	A										<section class="prog__container"><p> Bass boost is an audio effect to boost or amplify low frequencies of the sound. It is comparable to a simple equalizer but limited to one band amplification in the low frequency range. <p> An application creates a BassBoost object to instantiate and control a bass boost engine in the audio framework. <p> The methods, parameter types and units exposed by the BassBoost implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLBassBoostItf interface. Please refer to this specification for more details. <p> To attach the BassBoost to a particular AudioTrack or MediaPlayer, specify the audio session ID of this AudioTrack or MediaPlayer when constructing the BassBoost. <p> NOTE: attaching a BassBoost to the global audio output mix by use of session 0 is deprecated. <p> See <pre><code> <a href="https://developer.android.com/reference/android/media/MediaPlayer.html#getAudioSessionId()"> getAudioSessionId() </a> </code></pre> for details on audio sessions. <p> See <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/AudioEffect.html"> AudioEffect </a> </code></pre> class for more details on controlling audio effects. </p>\n<pre><code>public class BassBoost\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/BassBoost.html
BassBoost.OnParameterChangeListener	A										<section class="prog__container"><p> The OnParameterChangeListener interface defines a method called by the BassBoost when a parameter value has changed.</p>\n<pre><code>public static interface BassBoost.OnParameterChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/BassBoost.OnParameterChangeListener.html
BassBoost.Settings	A										<section class="prog__container"><p> The Settings class regroups all bass boost parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call.</p>\n<pre><code>public static class BassBoost.Settings\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/audiofx/BassBoost.Settings.html
EnvironmentalReverb	A										<section class="prog__container"><p> A sound generated within a room travels in many directions. The listener first hears the direct sound from the source itself. Later, he or she hears discrete echoes caused by sound bouncing off nearby walls, the ceiling and the floor. As sound waves arrive after undergoing more and more reflections, individual reflections become indistinguishable and the listener hears continuous reverberation that decays over time. Reverb is vital for modeling a listener's environment. It can be used in music applications to simulate music being played back in various environments, or in games to immerse the listener within the game's environment. The EnvironmentalReverb class allows an application to control each reverb engine property in a global reverb environment and is more suitable for games. For basic control, more suitable for music applications, it is recommended to use the <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/PresetReverb.html"> PresetReverb </a> </code></pre> class. <p> An application creates a EnvironmentalReverb object to instantiate and control a reverb engine in the audio framework. <p> The methods, parameter types and units exposed by the EnvironmentalReverb implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLEnvironmentalReverbItf interface. Please refer to this specification for more details. <p> The EnvironmentalReverb is an output mix auxiliary effect and should be created on Audio session 0. In order for a MediaPlayer or AudioTrack to be fed into this effect, they must be explicitely attached to it and a send level must be specified. Use the effect ID returned by getId() method to designate this particular effect when attaching it to the MediaPlayer or AudioTrack. <p> Creating a reverb on the output mix (audio session 0) requires permission <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#MODIFY_AUDIO_SETTINGS"> MODIFY_AUDIO_SETTINGS </a> </code></pre> <p> See <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/AudioEffect.html"> AudioEffect </a> </code></pre> class for more details on controlling audio effects. </p>\n<pre><code>public class EnvironmentalReverb\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/EnvironmentalReverb.html
EnvironmentalReverb.OnParameterChangeListener	A										<section class="prog__container"><p> The OnParameterChangeListener interface defines a method called by the EnvironmentalReverb when a parameter value has changed.</p>\n<pre><code>public static interface EnvironmentalReverb.OnParameterChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/EnvironmentalReverb.OnParameterChangeListener.html
EnvironmentalReverb.Settings	A										<section class="prog__container"><p> The Settings class regroups all environmental reverb parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call.</p>\n<pre><code>public static class EnvironmentalReverb.Settings\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/audiofx/EnvironmentalReverb.Settings.html
Equalizer	A										<section class="prog__container"><p> An Equalizer is used to alter the frequency response of a particular music source or of the main output mix. <p> An application creates an Equalizer object to instantiate and control an Equalizer engine in the audio framework. The application can either simply use predefined presets or have a more precise control of the gain in each frequency band controlled by the equalizer. <p> The methods, parameter types and units exposed by the Equalizer implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLEqualizerItf interface. Please refer to this specification for more details. <p> To attach the Equalizer to a particular AudioTrack or MediaPlayer, specify the audio session ID of this AudioTrack or MediaPlayer when constructing the Equalizer. <p> NOTE: attaching an Equalizer to the global audio output mix by use of session 0 is deprecated. <p> See <pre><code> <a href="https://developer.android.com/reference/android/media/MediaPlayer.html#getAudioSessionId()"> getAudioSessionId() </a> </code></pre> for details on audio sessions. <p> See <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/AudioEffect.html"> AudioEffect </a> </code></pre> class for more details on controlling audio effects. </p>\n<pre><code>public class Equalizer\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/Equalizer.html
Equalizer.OnParameterChangeListener	A										<section class="prog__container"><p> The OnParameterChangeListener interface defines a method called by the Equalizer when a parameter value has changed.</p>\n<pre><code>public static interface Equalizer.OnParameterChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/Equalizer.OnParameterChangeListener.html
Equalizer.Settings	A										<section class="prog__container"><p> The Settings class regroups all equalizer parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call.</p>\n<pre><code>public static class Equalizer.Settings\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/audiofx/Equalizer.Settings.html
LoudnessEnhancer	A										<section class="prog__container"><p> LoudnessEnhancer is an audio effect for increasing audio loudness. The processing is parametrized by a target gain value, which determines the maximum amount by which an audio signal will be amplified; signals amplified outside of the sample range supported by the platform are compressed. An application creates a LoudnessEnhancer object to instantiate and control a this audio effect in the audio framework. To attach the LoudnessEnhancer to a particular AudioTrack or MediaPlayer, specify the audio session ID of this AudioTrack or MediaPlayer when constructing the effect (see <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html#getAudioSessionId()"> getAudioSessionId() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/media/MediaPlayer.html#getAudioSessionId()"> getAudioSessionId() </a> </code></pre> ).</p>\n<pre><code>public class LoudnessEnhancer\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/LoudnessEnhancer.html
NoiseSuppressor	A										<section class="prog__container"><p> Noise Suppressor (NS). <p> Noise suppression (NS) is an audio pre-processing which removes background noise from the captured signal. The component of the signal considered as noise can be either stationary (car/airplane engine, AC system) or non-stationary (other peoples conversations, car horn) for more advanced implementations. <p> NS is mostly used by voice communication applications (voice chat, video conferencing, SIP calls). <p> An application creates a NoiseSuppressor object to instantiate and control an NS engine in the audio framework. <p> To attach the NoiseSuppressor to a particular <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecord.html"> AudioRecord </a> </code></pre> , specify the audio session ID of this AudioRecord when creating the NoiseSuppressor. The audio session is retrieved by calling <pre><code> <a href="https://developer.android.com/reference/android/media/AudioRecord.html#getAudioSessionId()"> getAudioSessionId() </a> </code></pre> on the AudioRecord instance. <p> On some devices, NS can be inserted by default in the capture path by the platform according to the <pre><code> <a href="https://developer.android.com/reference/android/media/MediaRecorder.AudioSource.html"> MediaRecorder.AudioSource </a> </code></pre> used. The application should call NoiseSuppressor.getEnable() after creating the NS to check the default NS activation state on a particular AudioRecord session. <p> See <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/AudioEffect.html"> AudioEffect </a> </code></pre> class for more details on controlling audio effects. </p>\n<pre><code>public class NoiseSuppressor\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/NoiseSuppressor.html
android.media.audiofx	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/media/audiofx/package-summary.html
PresetReverb	A										<section class="prog__container"><p> A sound generated within a room travels in many directions. The listener first hears the direct sound from the source itself. Later, he or she hears discrete echoes caused by sound bouncing off nearby walls, the ceiling and the floor. As sound waves arrive after undergoing more and more reflections, individual reflections become indistinguishable and the listener hears continuous reverberation that decays over time. Reverb is vital for modeling a listener's environment. It can be used in music applications to simulate music being played back in various environments, or in games to immerse the listener within the game's environment. The PresetReverb class allows an application to configure the global reverb using a reverb preset. This is primarily used for adding some reverb in a music playback context. Applications requiring control over a more advanced environmental reverb are advised to use the <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/EnvironmentalReverb.html"> EnvironmentalReverb </a> </code></pre> class. <p> An application creates a PresetReverb object to instantiate and control a reverb engine in the audio framework. <p> The methods, parameter types and units exposed by the PresetReverb implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLPresetReverbItf interface. Please refer to this specification for more details. <p> The PresetReverb is an output mix auxiliary effect and should be created on Audio session 0. In order for a MediaPlayer or AudioTrack to be fed into this effect, they must be explicitely attached to it and a send level must be specified. Use the effect ID returned by getId() method to designate this particular effect when attaching it to the MediaPlayer or AudioTrack. <p> Creating a reverb on the output mix (audio session 0) requires permission <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#MODIFY_AUDIO_SETTINGS"> MODIFY_AUDIO_SETTINGS </a> </code></pre> <p> See <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/AudioEffect.html"> AudioEffect </a> </code></pre> class for more details on controlling audio effects. </p>\n<pre><code>public class PresetReverb\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/PresetReverb.html
PresetReverb.OnParameterChangeListener	A										<section class="prog__container"><p> The OnParameterChangeListener interface defines a method called by the PresetReverb when a parameter value has changed.</p>\n<pre><code>public static interface PresetReverb.OnParameterChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/PresetReverb.OnParameterChangeListener.html
PresetReverb.Settings	A										<section class="prog__container"><p> The Settings class regroups all preset reverb parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call.</p>\n<pre><code>public static class PresetReverb.Settings\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/audiofx/PresetReverb.Settings.html
Virtualizer	A										<section class="prog__container"><p> An audio virtualizer is a general name for an effect to spatialize audio channels. The exact behavior of this effect is dependent on the number of audio input channels and the types and number of audio output channels of the device. For example, in the case of a stereo input and stereo headphone output, a stereo widening effect is used when this effect is turned on. <p> An application creates a Virtualizer object to instantiate and control a virtualizer engine in the audio framework. <p> The methods, parameter types and units exposed by the Virtualizer implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLVirtualizerItf interface. Please refer to this specification for more details. <p> To attach the Virtualizer to a particular AudioTrack or MediaPlayer, specify the audio session ID of this AudioTrack or MediaPlayer when constructing the Virtualizer. <p> NOTE: attaching a Virtualizer to the global audio output mix by use of session 0 is deprecated. <p> See <pre><code> <a href="https://developer.android.com/reference/android/media/MediaPlayer.html#getAudioSessionId()"> getAudioSessionId() </a> </code></pre> for details on audio sessions. <p> See <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/AudioEffect.html"> AudioEffect </a> </code></pre> class for more details on controlling audio effects. </p>\n<pre><code>public class Virtualizer\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/Virtualizer.html
Virtualizer.OnParameterChangeListener	A										<section class="prog__container"><p> The OnParameterChangeListener interface defines a method called by the Virtualizer when a parameter value has changed.</p>\n<pre><code>public static interface Virtualizer.OnParameterChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/Virtualizer.OnParameterChangeListener.html
Virtualizer.Settings	A										<section class="prog__container"><p> The Settings class regroups all virtualizer parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call.</p>\n<pre><code>public static class Virtualizer.Settings\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/audiofx/Virtualizer.Settings.html
Visualizer	A										<section class="prog__container"><p> The Visualizer class enables application to retrieve part of the currently playing audio for visualization purpose. It is not an audio recording interface and only returns partial and low quality audio content. However, to protect privacy of certain audio data (e.g voice mail) the use of the visualizer requires the permission android.permission.RECORD_AUDIO. <p> The audio session ID passed to the constructor indicates which audio content should be visualized: <br> <ul> <li> If the session is 0, the audio output mix is visualized </li> <li> If the session is not 0, the audio from a particular <pre><code> <a href="https://developer.android.com/reference/android/media/MediaPlayer.html"> MediaPlayer </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/media/AudioTrack.html"> AudioTrack </a> </code></pre> using this audio session is visualized </li> </ul> <p> Two types of representation of audio content can be captured: <br> <ul> <li> Waveform data: consecutive 8-bit (unsigned) mono samples by using the <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#getWaveForm(byte[])"> getWaveForm(byte[]) </a> </code></pre> method </li> <li> Frequency data: 8-bit magnitude FFT by using the <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#getFft(byte[])"> getFft(byte[]) </a> </code></pre> method </li> </ul> <p> The length of the capture can be retrieved or specified by calling respectively <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#getCaptureSize()"> getCaptureSize() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#setCaptureSize(int)"> setCaptureSize(int) </a> </code></pre> methods. The capture size must be a power of 2 in the range returned by <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#getCaptureSizeRange()"> getCaptureSizeRange() </a> </code></pre> . <p> In addition to the polling capture mode described above with <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#getWaveForm(byte[])"> getWaveForm(byte[]) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#getFft(byte[])"> getFft(byte[]) </a> </code></pre> methods, a callback mode is also available by installing a listener by use of the <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#setDataCaptureListener(android.media.audiofx.Visualizer.OnDataCaptureListener, int, boolean, boolean)"> setDataCaptureListener(OnDataCaptureListener, int, boolean, boolean) </a> </code></pre> method. The rate at which the listener capture method is called as well as the type of data returned is specified. <p> Before capturing data, the Visualizer must be enabled by calling the <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#setEnabled(boolean)"> setEnabled(boolean) </a> </code></pre> method. When data capture is not needed any more, the Visualizer should be disabled. <p> It is good practice to call the <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#release()"> release() </a> </code></pre> method when the Visualizer is not used anymore to free up native resources associated to the Visualizer instance. <p> Creating a Visualizer on the output mix (audio session 0) requires permission <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#MODIFY_AUDIO_SETTINGS"> MODIFY_AUDIO_SETTINGS </a> </code></pre> <p> The Visualizer class can also be used to perform measurements on the audio being played back. The measurements to perform are defined by setting a mask of the requested measurement modes with <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#setMeasurementMode(int)"> setMeasurementMode(int) </a> </code></pre> . Supported values are <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#MEASUREMENT_MODE_NONE"> MEASUREMENT_MODE_NONE </a> </code></pre> to cancel any measurement, and <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#MEASUREMENT_MODE_PEAK_RMS"> MEASUREMENT_MODE_PEAK_RMS </a> </code></pre> for peak and RMS monitoring. Measurements can be retrieved through <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#getMeasurementPeakRms(android.media.audiofx.Visualizer.MeasurementPeakRms)"> getMeasurementPeakRms(MeasurementPeakRms) </a> </code></pre> . </p>\n<pre><code>public class Visualizer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/audiofx/Visualizer.html
Visualizer.MeasurementPeakRms	A										<section class="prog__container"><p> A class to store peak and RMS values. Peak and RMS are expressed in mB, as described in the <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#MEASUREMENT_MODE_PEAK_RMS"> MEASUREMENT_MODE_PEAK_RMS </a> </code></pre> measurement mode.</p>\n<pre><code>public static final class Visualizer.MeasurementPeakRms\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/audiofx/Visualizer.MeasurementPeakRms.html
Visualizer.OnDataCaptureListener	A										<section class="prog__container"><p> The OnDataCaptureListener interface defines methods called by the Visualizer to periodically update the audio visualization capture. The client application can implement this interface and register the listener with the <pre><code> <a href="https://developer.android.com/reference/android/media/audiofx/Visualizer.html#setDataCaptureListener(android.media.audiofx.Visualizer.OnDataCaptureListener, int, boolean, boolean)"> setDataCaptureListener(OnDataCaptureListener, int, boolean, boolean) </a> </code></pre> method.</p>\n<pre><code>public static interface Visualizer.OnDataCaptureListener\n</code></pre></section>	https://developer.android.com/reference/android/media/audiofx/Visualizer.OnDataCaptureListener.html
MediaBrowser.ConnectionCallback	A										<section class="prog__container"><p> Callbacks for connection related events.</p>\n<pre><code>public static class MediaBrowser.ConnectionCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/browse/MediaBrowser.ConnectionCallback.html
MediaBrowser	A										<section class="prog__container"><p> Browses media content offered by a link MediaBrowserService. <p> This object is not thread-safe. All calls should happen on the thread on which the browser was constructed. </p>\n<pre><code>public final class MediaBrowser\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/browse/MediaBrowser.html
MediaBrowser.ItemCallback	A										<section class="prog__container"><p> Callback for receiving the result of <pre><code> <a href="https://developer.android.com/reference/android/media/browse/MediaBrowser.html#getItem(java.lang.String, android.media.browse.MediaBrowser.ItemCallback)"> getItem(String, MediaBrowser.ItemCallback) </a> </code></pre> .</p>\n<pre><code>public static abstract class MediaBrowser.ItemCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/browse/MediaBrowser.ItemCallback.html
MediaBrowser.MediaItem	A										<section class="prog__container"><p> A class with information on a single media item for use in browsing media.</p>\n<pre><code>public static class MediaBrowser.MediaItem\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/browse/MediaBrowser.MediaItem.html
MediaBrowser.SubscriptionCallback	A										<section class="prog__container"><p> Callbacks for subscription related events.</p>\n<pre><code>public static abstract class MediaBrowser.SubscriptionCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/browse/MediaBrowser.SubscriptionCallback.html
android.media.browse	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/media/browse/package-summary.html
Effect	A										<section class="prog__container"><p> <p> Effects are high-performance transformations that can be applied to image frames. These are passed in the form of OpenGL ES 2.0 texture names. Typical frames could be images loaded from disk, or frames from the camera or other video streams. </p>\n<pre><code>public abstract class Effect\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/effect/Effect.html
EffectContext	A										<section class="prog__container"><p> <p> An EffectContext keeps all necessary state information to run Effects within a Open GL ES 2.0 context. </p>\n<pre><code>public class EffectContext\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/effect/EffectContext.html
EffectFactory	A										<section class="prog__container"><p> <p> The EffectFactory class defines the list of available Effects, and provides functionality to inspect and instantiate them. Some effects may not be available on all platforms, so before creating a certain effect, the application should confirm that the effect is supported on this platform by calling <pre><code> <a href="https://developer.android.com/reference/android/media/effect/EffectFactory.html#isEffectSupported(java.lang.String)"> isEffectSupported(String) </a> </code></pre> . </p>\n<pre><code>public class EffectFactory\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/effect/EffectFactory.html
EffectUpdateListener	A										<section class="prog__container"><p> Some effects may issue callbacks to inform the host of changes to the effect state. This is the listener interface for receiving those callbacks.</p>\n<pre><code>public interface EffectUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/media/effect/EffectUpdateListener.html
android.media.effect	A										<section class="prog__container">Provides classes that allow you to apply a variety of visual effects to images andvideos. For example, you can easily fix red-eye, convert an image to grayscale,adjust brightness, adjust saturation, rotate an image, apply a fisheye effect, and much more. Thesystem performs all effects processing on the GPU to obtain maximum performance.</section>	https://developer.android.com/reference/android/media/effect/package-summary.html
MidiDevice	A										<section class="prog__container"><p> This class is used for sending and receiving data to and from a MIDI device Instances of this class are created by <pre><code> <a href="https://developer.android.com/reference/android/media/midi/MidiManager.html#openDevice(android.media.midi.MidiDeviceInfo, android.media.midi.MidiManager.OnDeviceOpenedListener, android.os.Handler)"> openDevice(MidiDeviceInfo, MidiManager.OnDeviceOpenedListener, Handler) </a> </code></pre> .</p>\n<pre><code>public final class MidiDevice\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiDevice.html
MidiDevice.MidiConnection	A										<section class="prog__container"><p> This class represents a connection between the output port of one device and the input port of another. Created by <pre><code> <a href="https://developer.android.com/reference/android/media/midi/MidiDevice.html#connectPorts(android.media.midi.MidiInputPort, int)"> connectPorts(MidiInputPort, int) </a> </code></pre> . Close this object to terminate the connection.</p>\n<pre><code>public class MidiDevice.MidiConnection\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiDevice.MidiConnection.html
MidiDeviceInfo	A										<section class="prog__container"><p> This class contains information to describe a MIDI device. For now we only have information that can be retrieved easily for USB devices, but we will probably expand this in the future. This class is just an immutable object to encapsulate the MIDI device description. Use the MidiDevice class to actually communicate with devices.</p>\n<pre><code>public final class MidiDeviceInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiDeviceInfo.html
MidiDeviceInfo.PortInfo	A										<section class="prog__container"><p> Contains information about an input or output port.</p>\n<pre><code>public static final class MidiDeviceInfo.PortInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiDeviceInfo.PortInfo.html
MidiDeviceService	A										<section class="prog__container"><p> A service that implements a virtual MIDI device. Subclasses must implement the <pre><code> <a href="https://developer.android.com/reference/android/media/midi/MidiDeviceService.html#onGetInputPortReceivers()"> onGetInputPortReceivers() </a> </code></pre> method to provide a list of <pre><code> <a href="https://developer.android.com/reference/android/media/midi/MidiReceiver.html"> MidiReceiver </a> </code></pre> s to receive data sent to the device's input ports. Similarly, subclasses can call <pre><code> <a href="https://developer.android.com/reference/android/media/midi/MidiDeviceService.html#getOutputPortReceivers()"> getOutputPortReceivers() </a> </code></pre> to fetch a list of <pre><code> <a href="https://developer.android.com/reference/android/media/midi/MidiReceiver.html"> MidiReceiver </a> </code></pre> s for sending data out the output ports. <p> To extend this class, you must declare the service in your manifest file with an intent filter with the <pre><code> <a href="https://developer.android.com/reference/android/media/midi/MidiDeviceService.html#SERVICE_INTERFACE"> SERVICE_INTERFACE </a> </code></pre> action and meta-data to describe the virtual device. For example: </p>\n<pre><code>public abstract class MidiDeviceService\n</code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiDeviceService.html
MidiDeviceStatus	A										<section class="prog__container"><p> This is an immutable class that describes the current status of a MIDI device's ports.</p>\n<pre><code>public final class MidiDeviceStatus\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiDeviceStatus.html
MidiInputPort	A										<section class="prog__container"><p> This class is used for sending data to a port on a MIDI device</p>\n<pre><code>public final class MidiInputPort\n</code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiInputPort.html
MidiManager.DeviceCallback	A										<section class="prog__container"><p> Callback class used for clients to receive MIDI device added and removed notifications</p>\n<pre><code>public static class MidiManager.DeviceCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiManager.DeviceCallback.html
MidiManager	A										<section class="prog__container"><p> This class is the public application interface to the MIDI service. <p> You can obtain an instance of this class by calling <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> Context.getSystemService() </a> </code></pre> . <pre>MidiManager manager = (MidiManager) getSystemService(Context.MIDI_SERVICE);</pre> </p>\n<pre><code>public final class MidiManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiManager.html
MidiManager.OnDeviceOpenedListener	A										<section class="prog__container"><p> Listener class used for receiving the results of <pre><code> <a href="https://developer.android.com/reference/android/media/midi/MidiManager.html#openDevice(android.media.midi.MidiDeviceInfo, android.media.midi.MidiManager.OnDeviceOpenedListener, android.os.Handler)"> openDevice(MidiDeviceInfo, MidiManager.OnDeviceOpenedListener, Handler) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/media/midi/MidiManager.html#openBluetoothDevice(android.bluetooth.BluetoothDevice, android.media.midi.MidiManager.OnDeviceOpenedListener, android.os.Handler)"> openBluetoothDevice(BluetoothDevice, MidiManager.OnDeviceOpenedListener, Handler) </a> </code></pre></p>\n<pre><code>public static interface MidiManager.OnDeviceOpenedListener\n</code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiManager.OnDeviceOpenedListener.html
MidiOutputPort	A										<section class="prog__container"><p> This class is used for receiving data from a port on a MIDI device</p>\n<pre><code>public final class MidiOutputPort\n</code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiOutputPort.html
MidiReceiver	A										<section class="prog__container"><p> Interface for sending and receiving data to and from a MIDI device.</p>\n<pre><code>public abstract class MidiReceiver\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiReceiver.html
MidiSender	A										<section class="prog__container"><p> Interface provided by a device to allow attaching MidiReceivers to a MIDI device.</p>\n<pre><code>public abstract class MidiSender\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/midi/MidiSender.html
android.media.midi	A										<section class="prog__container">Provides classes for sending and receiving messages using the standard MIDIevent protocol over USB, Bluetooth LE, and virtual (inter-app) transports.</section>	https://developer.android.com/reference/android/media/midi/package-summary.html
MediaProjection.Callback	A										<section class="prog__container"><p> Callbacks for the projection session.</p>\n<pre><code>public static abstract class MediaProjection.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/projection/MediaProjection.Callback.html
MediaProjection	A										<section class="prog__container"><p> A token granting applications the ability to capture screen contents and/or record system audio. The exact capabilities granted depend on the type of MediaProjection. <p> A screen capture session can be started through <pre><code> <a href="https://developer.android.com/reference/android/media/projection/MediaProjectionManager.html#createScreenCaptureIntent()"> createScreenCaptureIntent() </a> </code></pre> . This grants the ability to capture screen contents, but not system audio. </p>\n<pre><code>public final class MediaProjection\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/projection/MediaProjection.html
MediaProjectionManager	A										<section class="prog__container"><p> Manages the retrieval of certain types of <pre><code> <a href="https://developer.android.com/reference/android/media/projection/MediaProjection.html"> MediaProjection </a> </code></pre> tokens. <p> Get an instance of this class by calling <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> Context.getSystemService() </a> </code></pre> with the argument <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#MEDIA_PROJECTION_SERVICE"> MEDIA_PROJECTION_SERVICE </a> </code></pre> . </p>\n<pre><code>public final class MediaProjectionManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/projection/MediaProjectionManager.html
android.media.projection	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/media/projection/package-summary.html
MediaController.Callback	A										<section class="prog__container"><p> Callback for receiving updates from the session. A Callback can be registered using <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaController.html#registerCallback(android.media.session.MediaController.Callback)"> registerCallback(MediaController.Callback) </a> </code></pre> .</p>\n<pre><code>public static abstract class MediaController.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/session/MediaController.Callback.html
MediaController	A										<section class="prog__container"><p> Allows an app to interact with an ongoing media session. Media buttons and other commands can be sent to the session. A callback may be registered to receive updates from the session, such as metadata and play state changes. <p> A MediaController can be created through <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSessionManager.html"> MediaSessionManager </a> </code></pre> if you hold the "android.permission.MEDIA_CONTENT_CONTROL" permission or are an enabled notification listener or by getting a <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSession.Token.html"> MediaSession.Token </a> </code></pre> directly from the session owner. <p> MediaController objects are thread-safe. </p>\n<pre><code>public final class MediaController\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/session/MediaController.html
MediaController.PlaybackInfo	A										<section class="prog__container"><p> Holds information about the current playback and how audio is handled for this session.</p>\n<pre><code>public static final class MediaController.PlaybackInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/session/MediaController.PlaybackInfo.html
MediaController.TransportControls	A										<section class="prog__container"><p> Interface for controlling media playback on a session. This allows an app to send media transport commands to the session.</p>\n<pre><code>public final class MediaController.TransportControls\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/session/MediaController.TransportControls.html
MediaSession.Callback	A										<section class="prog__container"><p> Receives media buttons, transport controls, and commands from controllers and the system. A callback may be set using <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSession.html#setCallback(android.media.session.MediaSession.Callback)"> setCallback(MediaSession.Callback) </a> </code></pre> .</p>\n<pre><code>public static abstract class MediaSession.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/session/MediaSession.Callback.html
MediaSession	A										<section class="prog__container"><p> Allows interaction with media controllers, volume keys, media buttons, and transport controls. <p> A MediaSession should be created when an app wants to publish media playback information or handle media keys. In general an app only needs one session for all playback, though multiple sessions can be created to provide finer grain controls of media. <p> Once a session is created the owner of the session may pass its <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSession.html#getSessionToken()"> session token </a> </code></pre> to other processes to allow them to create a <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaController.html"> MediaController </a> </code></pre> to interact with the session. <p> To receive commands, media keys, and other events a <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSession.Callback.html"> MediaSession.Callback </a> </code></pre> must be set with <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSession.html#setCallback(android.media.session.MediaSession.Callback)"> setCallback(Callback) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSession.html#setActive(boolean)"> setActive(true) </a> </code></pre> must be called. <p> When an app is finished performing playback it must call <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSession.html#release()"> release() </a> </code></pre> to clean up the session and notify any controllers. <p> MediaSession objects are thread safe. </p>\n<pre><code>public final class MediaSession\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/session/MediaSession.html
MediaSession.QueueItem	A										<section class="prog__container"><p> A single item that is part of the play queue. It contains a description of the item and its id in the queue.</p>\n<pre><code>public static final class MediaSession.QueueItem\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/session/MediaSession.QueueItem.html
MediaSession.Token	A										<section class="prog__container"><p> Represents an ongoing session. This may be passed to apps by the session owner to allow them to create a <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaController.html"> MediaController </a> </code></pre> to communicate with the session.</p>\n<pre><code>public static final class MediaSession.Token\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/session/MediaSession.Token.html
MediaSessionManager	A										<section class="prog__container"><p> Provides support for interacting with <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSession.html"> media sessions </a> </code></pre> that applications have published to express their ongoing media playback state. <p> Use <pre><code> Context.getSystemService(Context.MEDIA_SESSION_SERVICE) </code></pre> to get an instance of this class. </p>\n<pre><code>public final class MediaSessionManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/session/MediaSessionManager.html
MediaSessionManager.OnActiveSessionsChangedListener	A										<section class="prog__container"><p> Listens for changes to the list of active sessions. This can be added using <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSessionManager.html#addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener, android.content.ComponentName)"> addOnActiveSessionsChangedListener(MediaSessionManager.OnActiveSessionsChangedListener, ComponentName) </a> </code></pre> .</p>\n<pre><code>public static interface MediaSessionManager.OnActiveSessionsChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/media/session/MediaSessionManager.OnActiveSessionsChangedListener.html
android.media.session	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/media/session/package-summary.html
PlaybackState.Builder	A										<section class="prog__container"><p> Builder for <pre><code> <a href="https://developer.android.com/reference/android/media/session/PlaybackState.html"> PlaybackState </a> </code></pre> objects.</p>\n<pre><code>public static final class PlaybackState.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/session/PlaybackState.Builder.html
PlaybackState.CustomAction.Builder	A										<section class="prog__container"><p> Builder for <pre><code> <a href="https://developer.android.com/reference/android/media/session/PlaybackState.CustomAction.html"> PlaybackState.CustomAction </a> </code></pre> objects.</p>\n<pre><code>public static final class PlaybackState.CustomAction.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/session/PlaybackState.CustomAction.Builder.html
PlaybackState.CustomAction	A										<section class="prog__container"><p> <pre><code> <a href="https://developer.android.com/reference/android/media/session/PlaybackState.CustomAction.html"> CustomActions </a> </code></pre> can be used to extend the capabilities of the standard transport controls by exposing app specific actions to <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaController.html"> MediaControllers </a> </code></pre> .</p>\n<pre><code>public static final class PlaybackState.CustomAction\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/session/PlaybackState.CustomAction.html
PlaybackState	A										<section class="prog__container"><p> Playback state for a <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSession.html"> MediaSession </a> </code></pre> . This includes a state like <pre><code> <a href="https://developer.android.com/reference/android/media/session/PlaybackState.html#STATE_PLAYING"> STATE_PLAYING </a> </code></pre> , the current playback position, and the current control capabilities.</p>\n<pre><code>public final class PlaybackState\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/session/PlaybackState.html
android.media.tv	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/media/tv/package-summary.html
TvContentRating	A										<section class="prog__container"><p> A class representing a TV content rating. When a TV input service inserts the content rating information on a program into the database, this class can be used to generate the formatted string for <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvContract.Programs.html#COLUMN_CONTENT_RATING"> TvContract.Programs.COLUMN_CONTENT_RATING </a> </code></pre> . To create a <pre><code> TvContentRating </code></pre> object, use the <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvContentRating.html#createRating(java.lang.String, java.lang.String, java.lang.String, java.lang.String...)"> TvContentRating.createRating </a> </code></pre> method with valid rating system string constants. <p> It is possible for an application to define its own content rating system by supplying a content rating system definition XML resource (see example below) and declaring a broadcast receiver that filters <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#ACTION_QUERY_CONTENT_RATING_SYSTEMS"> ACTION_QUERY_CONTENT_RATING_SYSTEMS </a> </code></pre> in its manifest. </p>\n<pre><code>public final class TvContentRating\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvContentRating.html
TvContract.BaseTvColumns	A										<section class="prog__container"><p> Common base for the tables of TV channels/programs.</p>\n<pre><code>public static interface TvContract.BaseTvColumns\nimplements <a href="https://developer.android.com/reference/android/provider/BaseColumns.html">BaseColumns</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvContract.BaseTvColumns.html
TvContract.Channels	A										<section class="prog__container"><p> Column definitions for the TV channels table.</p>\n<pre><code>public static final class TvContract.Channels\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvContract.Channels.html
TvContract.Channels.Logo	A										<section class="prog__container"><p> A sub-directory of a single TV channel that represents its primary logo. <p> To access this directory, append <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvContract.Channels.Logo.html#CONTENT_DIRECTORY"> CONTENT_DIRECTORY </a> </code></pre> to the raw channel URI. The resulting URI represents an image file, and should be interacted using ContentResolver.openAssetFileDescriptor. <p> Note that this sub-directory also supports opening the logo as an asset file in write mode. Callers can create or replace the primary logo associated with this channel by opening the asset file and writing the full-size photo contents into it. (Make sure there is no padding around the logo image.) When the file is closed, the image will be parsed, sized down if necessary, and stored. <p> Usage example: <pre> public void writeChannelLogo(long channelId, byte[] logo) { Uri channelLogoUri = TvContract.buildChannelLogoUri(channelId); try { AssetFileDescriptor fd = getContentResolver().openAssetFileDescriptor(channelLogoUri, "rw"); OutputStream os = fd.createOutputStream(); os.write(logo); os.close(); fd.close(); } catch (IOException e) { // Handle error cases. } } </pre> </p>\n<pre><code>public static final class TvContract.Channels.Logo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvContract.Channels.Logo.html
TvContract	A										<section class="prog__container"><p> The contract between the TV provider and applications. Contains definitions for the supported URIs and columns. </p>\n<pre><code>public final class TvContract\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvContract.html
TvContract.Programs.Genres	A										<section class="prog__container"><p> Canonical genres for TV programs.</p>\n<pre><code>public static final class TvContract.Programs.Genres\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvContract.Programs.Genres.html
TvContract.Programs	A										<section class="prog__container"><p> Column definitions for the TV programs table. <p> By default, the query results will be sorted by <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvContract.Programs.html#COLUMN_START_TIME_UTC_MILLIS"> COLUMN_START_TIME_UTC_MILLIS </a> </code></pre> in ascending order. </p>\n<pre><code>public static final class TvContract.Programs\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvContract.Programs.html
TvContract.RecordedPrograms	A										<section class="prog__container"><p> Column definitions for the recorded TV programs table. <p> By default, the query results will be sorted by <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvContract.RecordedPrograms.html#COLUMN_START_TIME_UTC_MILLIS"> COLUMN_START_TIME_UTC_MILLIS </a> </code></pre> in ascending order. </p>\n<pre><code>public static final class TvContract.RecordedPrograms\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvContract.RecordedPrograms.html
TvInputInfo.Builder	A										<section class="prog__container"><p> A convenience builder for creating <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvInputInfo.html"> TvInputInfo </a> </code></pre> objects.</p>\n<pre><code>public static final class TvInputInfo.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvInputInfo.Builder.html
TvInputInfo	A										<section class="prog__container"><p> This class is used to specify meta information of a TV input.</p>\n<pre><code>public final class TvInputInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvInputInfo.html
TvInputManager	A										<section class="prog__container"><p> Central system API to the overall TV input framework (TIF) architecture, which arbitrates interaction between applications and the selected TV inputs. You can retrieve an instance of this interface with <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.Class&lt;T&gt;)"> Context.getSystemService(Context.TV_INPUT_SERVICE) </a> </code></pre> . <p> There are three primary parties involved in the TV input framework (TIF) architecture: <ul> <li> The <strong> TV input manager </strong> as expressed by this class is the central point of the system that manages interaction between all other parts. It is expressed as the client-side API here which exists in each application context and communicates with a global system service that manages the interaction across all processes. <li> A <strong> TV input </strong> implemented by <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvInputService.html"> TvInputService </a> </code></pre> represents an input source of TV, which can be a pass-through input such as HDMI, or a tuner input which provides broadcast TV programs. The system binds to the TV input per application’s request. on implementing TV inputs. <li> <strong> Applications </strong> talk to the TV input manager to list TV inputs and check their status. Once an application find the input to use, it uses <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvView.html"> TvView </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvRecordingClient.html"> TvRecordingClient </a> </code></pre> for further interaction such as watching and recording broadcast TV programs. </li> </li> </li> </ul> </p>\n<pre><code>public final class TvInputManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvInputManager.html
TvInputManager.TvInputCallback	A										<section class="prog__container"><p> Callback used to monitor status of the TV inputs.</p>\n<pre><code>public static abstract class TvInputManager.TvInputCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvInputManager.TvInputCallback.html
TvInputService.HardwareSession	A										<section class="prog__container"><p> Base class for a TV input session which represents an external device connected to a hardware TV input. <p> This class is for an input which provides channels for the external set-top box to the application. Once a TV input returns an implementation of this class on <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvInputService.html#onCreateSession(java.lang.String)"> onCreateSession(String) </a> </code></pre> , the framework will create a separate session for a hardware TV Input (e.g. HDMI 1) and forward the application's surface to the session so that the user can see the screen of the hardware TV Input when she tunes to a channel from this TV input. The implementation of this class is expected to change the channel of the external set-top box via a proprietary protocol when <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html#onTune(android.net.Uri)"> onTune(Uri) </a> </code></pre> is requested by the application. <p> Note that this class is not for inputs for internal hardware like built-in tuner and HDMI 1. </p>\n<pre><code>public static abstract class TvInputService.HardwareSession\n</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvInputService.HardwareSession.html
TvInputService	A										<section class="prog__container"><p> The TvInputService class represents a TV input or source such as HDMI or built-in tuner which provides pass-through video or broadcast TV programs. <p> Applications will not normally use this service themselves, instead relying on the standard interaction provided by <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvView.html"> TvView </a> </code></pre> . Those implementing TV input services should normally do so by deriving from this class and providing their own session implementation based on <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvInputService.Session.html"> TvInputService.Session </a> </code></pre> . All TV input services must require that clients hold the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_TV_INPUT"> BIND_TV_INPUT </a> </code></pre> in order to interact with the service; if this permission is not specified in the manifest, the system will refuse to bind to that TV input service. </p>\n<pre><code>public abstract class TvInputService\n</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvInputService.html
TvInputService.RecordingSession	A										<section class="prog__container"><p> Base class for derived classes to implement to provide a TV input recording session.</p>\n<pre><code>public static abstract class TvInputService.RecordingSession\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvInputService.RecordingSession.html
TvInputService.Session	A										<section class="prog__container"><p> Base class for derived classes to implement to provide a TV input session.</p>\n<pre><code>public static abstract class TvInputService.Session\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvInputService.Session.html
TvRecordingClient	A										<section class="prog__container"><p> The public interface object used to interact with a specific TV input service for TV program recording.</p>\n<pre><code>public class TvRecordingClient\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvRecordingClient.html
TvRecordingClient.RecordingCallback	A										<section class="prog__container"><p> Callback used to receive various status updates on the <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvInputService.RecordingSession.html"> TvInputService.RecordingSession </a> </code></pre></p>\n<pre><code>public static abstract class TvRecordingClient.RecordingCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvRecordingClient.RecordingCallback.html
TvTrackInfo.Builder	A										<section class="prog__container"><p> A builder class for creating <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvTrackInfo.html"> TvTrackInfo </a> </code></pre> objects.</p>\n<pre><code>public static final class TvTrackInfo.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvTrackInfo.Builder.html
TvTrackInfo	A										<section class="prog__container"><p> Encapsulates the format of tracks played in <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvInputService.html"> TvInputService </a> </code></pre> .</p>\n<pre><code>public final class TvTrackInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvTrackInfo.html
TvView	A										<section class="prog__container"><p> Displays TV contents. The TvView class provides a high level interface for applications to show TV programs from various TV sources that implement <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvInputService.html"> TvInputService </a> </code></pre> . (Note that the list of TV inputs available on the system can be obtained by calling <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvInputManager.html#getTvInputList()"> TvInputManager.getTvInputList() </a> </code></pre> .) <p> Once the application supplies the URI for a specific TV channel to <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvView.html#tune(java.lang.String, android.net.Uri)"> tune(String, Uri) </a> </code></pre> method, it takes care of underlying service binding (and unbinding if the current TvView is already bound to a service) and automatically allocates/deallocates resources needed. In addition to a few essential methods to control how the contents are presented, it also provides a way to dispatch input events to the connected TvInputService in order to enable custom key actions for the TV input. </p>\n<pre><code>public class TvView\n</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvView.html
TvView.OnUnhandledInputEventListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the unhandled input event is received.</p>\n<pre><code>public static interface TvView.OnUnhandledInputEventListener\n</code></pre></section>	https://developer.android.com/reference/android/media/tv/TvView.OnUnhandledInputEventListener.html
TvView.TimeShiftPositionCallback	A										<section class="prog__container"><p> Callback used to receive time shift position changes.</p>\n<pre><code>public static abstract class TvView.TimeShiftPositionCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvView.TimeShiftPositionCallback.html
TvView.TvInputCallback	A										<section class="prog__container"><p> Callback used to receive various status updates on the <pre><code> <a href="https://developer.android.com/reference/android/media/tv/TvView.html"> TvView </a> </code></pre> .</p>\n<pre><code>public static abstract class TvView.TvInputCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/media/tv/TvView.TvInputCallback.html
MtpConstants	A										<section class="prog__container"><p> A class containing constants in the MTP and PTP specifications.</p>\n<pre><code>public final class MtpConstants\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/mtp/MtpConstants.html
MtpDevice	A										<section class="prog__container"><p> This class represents an MTP or PTP device connected on the USB host bus. An application can instantiate an object of this type, by referencing an attached <pre><code> <a href="https://developer.android.com/reference/android/hardware/usb/UsbDevice.html"> UsbDevice </a> </code></pre> and then use methods in this class to get information about the device and objects stored on it, as well as open the connection and transfer data.</p>\n<pre><code>public final class MtpDevice\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/mtp/MtpDevice.html
MtpDeviceInfo	A										<section class="prog__container"><p> This class encapsulates information about an MTP device. This corresponds to the DeviceInfo Dataset described in section 5.1.1 of the MTP specification.</p>\n<pre><code>public class MtpDeviceInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/mtp/MtpDeviceInfo.html
MtpEvent	A										<section class="prog__container"><p> This class encapsulates information about a MTP event. This corresponds to the events described in appendix G of the MTP specification.</p>\n<pre><code>public class MtpEvent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/mtp/MtpEvent.html
MtpObjectInfo.Builder	A										<section class="prog__container"><p> Builds a new object info instance.</p>\n<pre><code>public static class MtpObjectInfo.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/mtp/MtpObjectInfo.Builder.html
MtpObjectInfo	A										<section class="prog__container"><p> This class encapsulates information about an object on an MTP device. This corresponds to the ObjectInfo Dataset described in section 5.3.1 of the MTP specification.</p>\n<pre><code>public final class MtpObjectInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/mtp/MtpObjectInfo.html
MtpStorageInfo	A										<section class="prog__container"><p> This class encapsulates information about a storage unit on an MTP device. This corresponds to the StorageInfo Dataset described in section 5.2.2 of the MTP specification.</p>\n<pre><code>public final class MtpStorageInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/mtp/MtpStorageInfo.html
android.mtp	A										<section class="prog__container">Provides APIs that let you interact directly with connected cameras and other devices, using thePTP (Picture Transfer Protocol) subset of the MTP (Media Transfer Protocol) specification. Yourapplication can receive notifications when devices are attached and removed, manage files andstorage on those devices, and transfer files and metadata from the devices.</section>	https://developer.android.com/reference/android/mtp/package-summary.html
CaptivePortal	A										<section class="prog__container"><p> A class allowing apps handling the <pre><code> <a href="https://developer.android.com/reference/android/net/ConnectivityManager.html#ACTION_CAPTIVE_PORTAL_SIGN_IN"> ACTION_CAPTIVE_PORTAL_SIGN_IN </a> </code></pre> activity to indicate to the system different outcomes of captive portal sign in. This class is passed as an extra named <pre><code> <a href="https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_CAPTIVE_PORTAL"> EXTRA_CAPTIVE_PORTAL </a> </code></pre> with the <pre><code> ACTION_CAPTIVE_PORTAL_SIGN_IN </code></pre> activity.</p>\n<pre><code>public class CaptivePortal\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/CaptivePortal.html
ConnectivityManager	A										<section class="prog__container"><p> Class that answers queries about the state of network connectivity. It also notifies applications when network connectivity changes. Get an instance of this class by calling <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> Context.getSystemService(Context.CONNECTIVITY_SERVICE) </a> </code></pre> . <p> The primary responsibilities of this class are to: <ol> <li> Monitor network connections (Wi-Fi, GPRS, UMTS, etc.) </li> <li> Send broadcast intents when network connectivity changes </li> <li> Attempt to "fail over" to another network when connectivity to a network is lost </li> <li> Provide an API that allows applications to query the coarse-grained or fine-grained state of the available networks </li> <li> Provide an API that allows applications to request and select networks for their data traffic </li> </ol> </p>\n<pre><code>public class ConnectivityManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/ConnectivityManager.html
ConnectivityManager.NetworkCallback	A										<section class="prog__container"><p> Base class for NetworkRequest callbacks. Used for notifications about network changes. Should be extended by applications wanting notifications.</p>\n<pre><code>public static class ConnectivityManager.NetworkCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html
ConnectivityManager.OnNetworkActiveListener	A										<section class="prog__container"><p> Callback for use with <pre><code> <a href="https://developer.android.com/reference/android/net/ConnectivityManager.html#addDefaultNetworkActiveListener(android.net.ConnectivityManager.OnNetworkActiveListener)"> addDefaultNetworkActiveListener(ConnectivityManager.OnNetworkActiveListener) </a> </code></pre> to find out when the system default network has gone in to a high power state.</p>\n<pre><code>public static interface ConnectivityManager.OnNetworkActiveListener\n</code></pre></section>	https://developer.android.com/reference/android/net/ConnectivityManager.OnNetworkActiveListener.html
Credentials	A										<section class="prog__container"><p> A class for representing UNIX credentials passed via ancillary data on UNIX domain sockets. See "man 7 unix" on a desktop linux distro.</p>\n<pre><code>public class Credentials\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/Credentials.html
DhcpInfo	A										<section class="prog__container"><p> A simple object for retrieving the results of a DHCP request.</p>\n<pre><code>public class DhcpInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/DhcpInfo.html
IpPrefix	A										<section class="prog__container"><p> This class represents an IP prefix, i.e., a contiguous block of IP addresses aligned on a power of two boundary (also known as an "IP subnet"). A prefix is specified by two pieces of information: <ul> <li> A starting IP address (IPv4 or IPv6). This is the first IP address of the prefix. <li> A prefix length. This specifies the length of the prefix by specifing the number of bits in the IP address, starting from the most significant bit in network byte order, that are constant for all addresses in the prefix. </li> </li> </ul> For example, the prefix <pre><code> 192.0.2.0/24 </code></pre> covers the 256 IPv4 addresses from <pre><code> 192.0.2.0 </code></pre> to <pre><code> 192.0.2.255 </code></pre> , inclusive, and the prefix <pre><code> 2001:db8:1:2 </code></pre> covers the 2^64 IPv6 addresses from <pre><code> 2001:db8:1:2:: </code></pre> to <pre><code> 2001:db8:1:2:ffff:ffff:ffff:ffff </code></pre> , inclusive. Objects of this class are immutable.</p>\n<pre><code>public final class IpPrefix\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/IpPrefix.html
LinkAddress	A										<section class="prog__container"><p> Identifies an IP address on a network link. A <pre><code> LinkAddress </code></pre> consists of: <ul> <li> An IP address and prefix length (e.g., <pre><code> 2001:db8::1/64 </code></pre> or <pre><code> 192.0.2.1/24 </code></pre> ). The address must be unicast, as multicast addresses cannot be assigned to interfaces. <li> Address flags: A bitmask of <pre><code> OsConstants.IFA_F_* </code></pre> values representing properties of the address (e.g., <pre><code> android.system.OsConstants.IFA_F_OPTIMISTIC </code></pre> ). <li> Address scope: One of the <pre><code> OsConstants.IFA_F_* </code></pre> values; defines the scope in which the address is unique (e.g., <pre><code> android.system.OsConstants.RT_SCOPE_LINK </code></pre> or <pre><code> android.system.OsConstants.RT_SCOPE_UNIVERSE </code></pre> ). </li> </li> </li> </ul></p>\n<pre><code>public class LinkAddress\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/LinkAddress.html
LinkProperties	A										<section class="prog__container"><p> Describes the properties of a network link. A link represents a connection to a network. It may have multiple addresses and multiple gateways, multiple dns servers but only one http proxy and one network interface. Note that this is just a holder of data. Modifying it does not affect live networks.</p>\n<pre><code>public final class LinkProperties\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/LinkProperties.html
LocalServerSocket	A										<section class="prog__container"><p> Non-standard class for creating an inbound UNIX-domain socket in the Linux abstract namespace.</p>\n<pre><code>public class LocalServerSocket\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/LocalServerSocket.html
LocalSocket	A										<section class="prog__container"><p> Creates a (non-server) socket in the UNIX-domain namespace. The interface here is not entirely unlike that of java.net.Socket. This class and the streams returned from it may be used from multiple threads.</p>\n<pre><code>public class LocalSocket\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/LocalSocket.html
LocalSocketAddress	A										<section class="prog__container"><p> A UNIX-domain (AF_LOCAL) socket address. For use with android.net.LocalSocket and android.net.LocalServerSocket. On the Android system, these names refer to names in the Linux abstract (non-filesystem) UNIX domain namespace.</p>\n<pre><code>public class LocalSocketAddress\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/LocalSocketAddress.html
LocalSocketAddress.Namespace	A										<section class="prog__container"><p> The namespace that this address exists in. See also include/cutils/sockets.h ANDROID_SOCKET_NAMESPACE_*</p>\n<pre><code>public static final enum LocalSocketAddress.Namespace\n</code></pre></section>	https://developer.android.com/reference/android/net/LocalSocketAddress.Namespace.html
MailTo	A										<section class="prog__container"><p> MailTo URL parser This class parses a mailto scheme URL and then can be queried for the parsed parameters. This implements RFC 2368.</p>\n<pre><code>public class MailTo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/MailTo.html
Network	A										<section class="prog__container"><p> Identifies a <pre><code> Network </code></pre> . This is supplied to applications via <pre><code> <a href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html"> ConnectivityManager.NetworkCallback </a> </code></pre> in response to the active <pre><code> <a href="https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork(android.net.NetworkRequest, android.app.PendingIntent)"> requestNetwork(NetworkRequest, PendingIntent) </a> </code></pre> or passive <pre><code> <a href="https://developer.android.com/reference/android/net/ConnectivityManager.html#registerNetworkCallback(android.net.NetworkRequest, android.app.PendingIntent)"> registerNetworkCallback(NetworkRequest, PendingIntent) </a> </code></pre> calls. It is used to direct traffic to the given <pre><code> Network </code></pre> , either on a <pre><code> <a href="https://developer.android.com/reference/java/net/Socket.html"> Socket </a> </code></pre> basis through a targeted <pre><code> <a href="https://developer.android.com/reference/javax/net/SocketFactory.html"> SocketFactory </a> </code></pre> or process-wide via <pre><code> <a href="https://developer.android.com/reference/android/net/ConnectivityManager.html#bindProcessToNetwork(android.net.Network)"> bindProcessToNetwork(Network) </a> </code></pre> .</p>\n<pre><code>public class Network\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/Network.html
NetworkCapabilities	A										<section class="prog__container"><p> This class represents the capabilities of a network. This is used both to specify needs to <pre><code> <a href="https://developer.android.com/reference/android/net/ConnectivityManager.html"> ConnectivityManager </a> </code></pre> and when inspecting a network. Note that this replaces the old <pre><code> <a href="https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE"> TYPE_MOBILE </a> </code></pre> method of network selection. Rather than indicate a need for Wi-Fi because an application needs high bandwidth and risk obsolescence when a new, fast network appears (like LTE), the application should specify it needs high bandwidth. Similarly if an application needs an unmetered network for a bulk transfer it can specify that rather than assuming all cellular based connections are metered and all Wi-Fi based connections are not.</p>\n<pre><code>public final class NetworkCapabilities\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/NetworkCapabilities.html
NetworkInfo.DetailedState	A										<section class="prog__container"><p> The fine-grained state of a network connection. This level of detail is probably of interest to few applications. Most should use <pre><code> <a href="https://developer.android.com/reference/android/net/NetworkInfo.State.html"> State </a> </code></pre> instead.</p>\n<pre><code>public static final enum NetworkInfo.DetailedState\n</code></pre></section>	https://developer.android.com/reference/android/net/NetworkInfo.DetailedState.html
NetworkInfo	A										<section class="prog__container"><p> Describes the status of a network interface. <p> Use <pre><code> <a href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getActiveNetworkInfo()"> getActiveNetworkInfo() </a> </code></pre> to get an instance that represents the current network connection. </p>\n<pre><code>public class NetworkInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/NetworkInfo.html
NetworkInfo.State	A										<section class="prog__container"><p> Coarse-grained network state. This is probably what most applications should use, rather than <pre><code> <a href="https://developer.android.com/reference/android/net/NetworkInfo.DetailedState.html"> DetailedState </a> </code></pre> . The mapping between the two is as follows: <br/> <br/> <table> <tr> <td> <b> Detailed state </b> </td> <td> <b> Coarse-grained state </b> </td> </tr> <tr> <td> <pre><code> IDLE </code></pre> </td> <td> <pre><code> DISCONNECTED </code></pre> </td> </tr> <tr> <td> <pre><code> SCANNING </code></pre> </td> <td> <pre><code> CONNECTING </code></pre> </td> </tr> <tr> <td> <pre><code> CONNECTING </code></pre> </td> <td> <pre><code> CONNECTING </code></pre> </td> </tr> <tr> <td> <pre><code> AUTHENTICATING </code></pre> </td> <td> <pre><code> CONNECTING </code></pre> </td> </tr> <tr> <td> <pre><code> CONNECTED </code></pre> </td> <td> <pre><code> CONNECTED </code></pre> </td> </tr> <tr> <td> <pre><code> DISCONNECTING </code></pre> </td> <td> <pre><code> DISCONNECTING </code></pre> </td> </tr> <tr> <td> <pre><code> DISCONNECTED </code></pre> </td> <td> <pre><code> DISCONNECTED </code></pre> </td> </tr> <tr> <td> <pre><code> UNAVAILABLE </code></pre> </td> <td> <pre><code> DISCONNECTED </code></pre> </td> </tr> <tr> <td> <pre><code> FAILED </code></pre> </td> <td> <pre><code> DISCONNECTED </code></pre> </td> </tr> </table></p>\n<pre><code>public static final enum NetworkInfo.State\n</code></pre></section>	https://developer.android.com/reference/android/net/NetworkInfo.State.html
NetworkRequest.Builder	A										<section class="prog__container"><p> Builder used to create <pre><code> <a href="https://developer.android.com/reference/android/net/NetworkRequest.html"> NetworkRequest </a> </code></pre> objects. Specify the Network features needed in terms of <pre><code> <a href="https://developer.android.com/reference/android/net/NetworkCapabilities.html"> NetworkCapabilities </a> </code></pre> features</p>\n<pre><code>public static class NetworkRequest.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/NetworkRequest.Builder.html
NetworkRequest	A										<section class="prog__container"><p> Defines a request for a network, made through <pre><code> <a href="https://developer.android.com/reference/android/net/NetworkRequest.Builder.html"> NetworkRequest.Builder </a> </code></pre> and used to request a network via <pre><code> <a href="https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork(android.net.NetworkRequest, android.app.PendingIntent)"> requestNetwork(NetworkRequest, PendingIntent) </a> </code></pre> or listen for changes via <pre><code> <a href="https://developer.android.com/reference/android/net/ConnectivityManager.html#registerNetworkCallback(android.net.NetworkRequest, android.app.PendingIntent)"> registerNetworkCallback(NetworkRequest, PendingIntent) </a> </code></pre> .</p>\n<pre><code>public class NetworkRequest\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/NetworkRequest.html
android.net	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/net/package-summary.html
ParseException	A										<section class="prog__container"><p> Thrown when parsing a URL fails.</p>\n<pre><code>public class ParseException\n</code></pre></section>	https://developer.android.com/reference/android/net/ParseException.html
Proxy	A										<section class="prog__container"><p> A convenience class for accessing the user and default proxy settings.</p>\n<pre><code>public final class Proxy\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/Proxy.html
ProxyInfo	A										<section class="prog__container"><p> Describes a proxy configuration. Proxy configurations are already integrated within the <pre><code> java.net </code></pre> and Apache HTTP stack. So <pre><code> <a href="https://developer.android.com/reference/java/net/URLConnection.html"> URLConnection </a> </code></pre> and Apache's <pre><code> HttpClient </code></pre> will use them automatically. Other HTTP stacks will need to obtain the proxy info from <pre><code> <a href="https://developer.android.com/reference/android/net/Proxy.html#PROXY_CHANGE_ACTION"> PROXY_CHANGE_ACTION </a> </code></pre> broadcast as the extra <pre><code> <a href="https://developer.android.com/reference/android/net/Proxy.html#EXTRA_PROXY_INFO"> EXTRA_PROXY_INFO </a> </code></pre> .</p>\n<pre><code>public class ProxyInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/ProxyInfo.html
PskKeyManager	A										<section class="prog__container"><p> Provider of key material for pre-shared key (PSK) key exchange used in TLS-PSK cipher suites. </p>\n<pre><code>public abstract class PskKeyManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/PskKeyManager.html
RouteInfo	A										<section class="prog__container"><p> Represents a network route. <p> This is used both to describe static network configuration and live network configuration information. A route contains three pieces of information: <ul> <li> a destination <pre><code> <a href="https://developer.android.com/reference/android/net/IpPrefix.html"> IpPrefix </a> </code></pre> specifying the network destinations covered by this route. If this is <pre><code> null </code></pre> it indicates a default route of the address family (IPv4 or IPv6) implied by the gateway IP address. <li> a gateway <pre><code> <a href="https://developer.android.com/reference/java/net/InetAddress.html"> InetAddress </a> </code></pre> indicating the next hop to use. If this is <pre><code> null </code></pre> it indicates a directly-connected route. <li> an interface (which may be unspecified). </li> </li> </li> </ul> Either the destination or the gateway may be <pre><code> null </code></pre> , but not both. If the destination and gateway are both specified, they must be of the same address family (IPv4 or IPv6). </p>\n<pre><code>public final class RouteInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/RouteInfo.html
SSLCertificateSocketFactory	A										<section class="prog__container"><p> SSLSocketFactory implementation with several extra features: <ul> <li> Timeout specification for SSL handshake operations <li> Hostname verification in most cases (see WARNINGs below) <li> Optional SSL session caching with <pre><code> <a href="https://developer.android.com/reference/android/net/SSLSessionCache.html"> SSLSessionCache </a> </code></pre> <li> Optionally bypass all SSL certificate checks </li> </li> </li> </li> </ul> The handshake timeout does not apply to actual TCP socket connection. If you want a connection timeout as well, use <pre><code> <a href="https://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html#createSocket()"> createSocket() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/java/net/Socket.html#connect(java.net.SocketAddress, int)"> connect(SocketAddress, int) </a> </code></pre> , after which you must verify the identity of the server you are connected to. <p class="caution"> <b> Most <pre><code> <a href="https://developer.android.com/reference/javax/net/ssl/SSLSocketFactory.html"> SSLSocketFactory </a> </code></pre> implementations do not verify the server's identity, allowing man-in-the-middle attacks. </b> This implementation does check the server's certificate hostname, but only for createSocket variants that specify a hostname. When using methods that use <pre><code> <a href="https://developer.android.com/reference/java/net/InetAddress.html"> InetAddress </a> </code></pre> or which return an unconnected socket, you MUST verify the server's identity yourself to ensure a secure connection. </p>\n<pre><code>public class SSLCertificateSocketFactory\n</code></pre></section>	https://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html
SSLSessionCache	A										<section class="prog__container"><p> File-based cache of established SSL sessions. When re-establishing a connection to the same server, using an SSL session cache can save some time, power, and bandwidth by skipping directly to an encrypted stream. This is a persistent cache which can span executions of the application.</p>\n<pre><code>public final class SSLSessionCache\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/SSLSessionCache.html
TrafficStats	A										<section class="prog__container"><p> Class that provides network traffic statistics. These statistics include bytes transmitted and received and network packets transmitted and received, over all interfaces, over the mobile interface, and on a per-UID basis. <p> These statistics may not be available on all platforms. If the statistics are not supported by this device, <pre><code> <a href="https://developer.android.com/reference/android/net/TrafficStats.html#UNSUPPORTED"> UNSUPPORTED </a> </code></pre> will be returned. <p> Note that the statistics returned by this class reset and start from zero after every reboot. To access more robust historical network statistics data, use <pre><code> <a href="https://developer.android.com/reference/android/app/usage/NetworkStatsManager.html"> NetworkStatsManager </a> </code></pre> instead. </p>\n<pre><code>public class TrafficStats\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/TrafficStats.html
Uri.Builder	A										<section class="prog__container"><p> Helper class for building or manipulating URI references. Not safe for concurrent use. <p> An absolute hierarchical URI reference follows the pattern: <pre><code> &lt;scheme&gt;://&lt;authority&gt;&lt;absolute path&gt;?&lt;query&gt;#&lt;fragment&gt; </code></pre> <p> Relative URI references (which are always hierarchical) follow one of two patterns: <pre><code> &lt;relative or absolute path&gt;?&lt;query&gt;#&lt;fragment&gt; </code></pre> or <pre><code> //&lt;authority&gt;&lt;absolute path&gt;?&lt;query&gt;#&lt;fragment&gt; </code></pre> <p> An opaque URI follows this pattern: <pre><code> &lt;scheme&gt;:&lt;opaque part&gt;#&lt;fragment&gt; </code></pre> <p> Use <pre><code> <a href="https://developer.android.com/reference/android/net/Uri.html#buildUpon()"> buildUpon() </a> </code></pre> to obtain a builder representing an existing URI. </p>\n<pre><code>public static final class Uri.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/Uri.Builder.html
Uri	A										<section class="prog__container"><p> Immutable URI reference. A URI reference includes a URI and a fragment, the component of the URI following a '#'. Builds and parses URI references which conform to <a href="http://www.faqs.org/rfcs/rfc2396.html"> RFC 2396 </a> . <p> In the interest of performance, this class performs little to no validation. Behavior is undefined for invalid input. This class is very forgiving--in the face of invalid input, it will return garbage rather than throw an exception unless otherwise specified. </p>\n<pre><code>public abstract class Uri\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/Uri.html
UrlQuerySanitizer	A										<section class="prog__container"><p> Sanitizes the Query portion of a URL. Simple example: <pre><code> UrlQuerySanitizer sanitizer = new UrlQuerySanitizer(); sanitizer.setAllowUnregisteredParamaters(true); sanitizer.parseUrl("http://example.com/?name=Joe+User"); String name = sanitizer.getValue("name")); // name now contains "Joe_User" </code></pre> Register ValueSanitizers to customize the way individual parameters are sanitized: <pre><code> UrlQuerySanitizer sanitizer = new UrlQuerySanitizer(); sanitizer.registerParamater("name", UrlQuerySanitizer.createSpaceLegal()); sanitizer.parseUrl("http://example.com/?name=Joe+User"); String name = sanitizer.getValue("name")); // name now contains "Joe User". (The string is first decoded, which // converts the '+' to a ' '. Then the string is sanitized, which // converts the ' ' to an '_'. (The ' ' is converted because the default unregistered parameter sanitizer does not allow any special characters, and ' ' is a special character.) </code></pre> There are several ways to create ValueSanitizers. In order of increasing sophistication: <ol> <li> Call one of the UrlQuerySanitizer.createXXX() methods. <li> Construct your own instance of UrlQuerySanitizer.IllegalCharacterValueSanitizer. <li> Subclass UrlQuerySanitizer.ValueSanitizer to define your own value sanitizer. </li> </li> </li> </ol></p>\n<pre><code>public class UrlQuerySanitizer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/UrlQuerySanitizer.html
UrlQuerySanitizer.IllegalCharacterValueSanitizer	A										<section class="prog__container"><p> Sanitize values based on which characters they contain. Illegal characters are replaced with either space or '_', depending upon whether space is a legal character or not.</p>\n<pre><code>public static class UrlQuerySanitizer.IllegalCharacterValueSanitizer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html
UrlQuerySanitizer.ParameterValuePair	A										<section class="prog__container"><p> A simple tuple that holds parameter-value pairs.</p>\n<pre><code>public class UrlQuerySanitizer.ParameterValuePair\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/UrlQuerySanitizer.ParameterValuePair.html
UrlQuerySanitizer.ValueSanitizer	A										<section class="prog__container"><p> A functor used to sanitize a single query value.</p>\n<pre><code>public static interface UrlQuerySanitizer.ValueSanitizer\n</code></pre></section>	https://developer.android.com/reference/android/net/UrlQuerySanitizer.ValueSanitizer.html
VpnService.Builder	A										<section class="prog__container"><p> Helper class to create a VPN interface. This class should be always used within the scope of the outer <pre><code> <a href="https://developer.android.com/reference/android/net/VpnService.html"> VpnService </a> </code></pre> .</p>\n<pre><code>public class VpnService.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/VpnService.Builder.html
VpnService	A										<section class="prog__container"><p> VpnService is a base class for applications to extend and build their own VPN solutions. In general, it creates a virtual network interface, configures addresses and routing rules, and returns a file descriptor to the application. Each read from the descriptor retrieves an outgoing packet which was routed to the interface. Each write to the descriptor injects an incoming packet just like it was received from the interface. The interface is running on Internet Protocol (IP), so packets are always started with IP headers. The application then completes a VPN connection by processing and exchanging packets with the remote server over a tunnel. <p> Letting applications intercept packets raises huge security concerns. A VPN application can easily break the network. Besides, two of them may conflict with each other. The system takes several actions to address these issues. Here are some key points: <ul> <li> User action is required the first time an application creates a VPN connection. </li> <li> There can be only one VPN connection running at the same time. The existing interface is deactivated when a new one is created. </li> <li> A system-managed notification is shown during the lifetime of a VPN connection. </li> <li> A system-managed dialog gives the information of the current VPN connection. It also provides a button to disconnect. </li> <li> The network is restored automatically when the file descriptor is closed. It also covers the cases when a VPN application is crashed or killed by the system. </li> </ul> <p> There are two primary methods in this class: <pre><code> <a href="https://developer.android.com/reference/android/net/VpnService.html#prepare(android.content.Context)"> prepare(Context) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/net/VpnService.Builder.html#establish()"> establish() </a> </code></pre> . The former deals with user action and stops the VPN connection created by another application. The latter creates a VPN interface using the parameters supplied to the <pre><code> <a href="https://developer.android.com/reference/android/net/VpnService.Builder.html"> VpnService.Builder </a> </code></pre> . An application must call <pre><code> <a href="https://developer.android.com/reference/android/net/VpnService.html#prepare(android.content.Context)"> prepare(Context) </a> </code></pre> to grant the right to use other methods in this class, and the right can be revoked at any time. Here are the general steps to create a VPN connection: <ol> <li> When the user presses the button to connect, call <pre><code> <a href="https://developer.android.com/reference/android/net/VpnService.html#prepare(android.content.Context)"> prepare(Context) </a> </code></pre> and launch the returned intent, if non-null. </li> <li> When the application becomes prepared, start the service. </li> <li> Create a tunnel to the remote server and negotiate the network parameters for the VPN connection. </li> <li> Supply those parameters to a <pre><code> <a href="https://developer.android.com/reference/android/net/VpnService.Builder.html"> VpnService.Builder </a> </code></pre> and create a VPN interface by calling <pre><code> <a href="https://developer.android.com/reference/android/net/VpnService.Builder.html#establish()"> establish() </a> </code></pre> . </li> <li> Process and exchange packets between the tunnel and the returned file descriptor. </li> <li> When <pre><code> <a href="https://developer.android.com/reference/android/net/VpnService.html#onRevoke()"> onRevoke() </a> </code></pre> is invoked, close the file descriptor and shut down the tunnel gracefully. </li> </ol> <p> Services extended this class need to be declared with appropriate permission and intent filter. Their access must be secured by <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_VPN_SERVICE"> BIND_VPN_SERVICE </a> </code></pre> permission, and their intent filter must match <pre><code> <a href="https://developer.android.com/reference/android/net/VpnService.html#SERVICE_INTERFACE"> SERVICE_INTERFACE </a> </code></pre> action. Here is an example of declaring a VPN service in <pre><code> AndroidManifest.xml </code></pre> : <pre> &lt;service android:name=".ExampleVpnService" android:permission="android.permission.BIND_VPN_SERVICE"&gt; &lt;intent-filter&gt; &lt;action android:name="android.net.VpnService"/&gt; &lt;/intent-filter&gt; &lt;/service&gt;</pre> </p>\n<pre><code>public class VpnService\n</code></pre></section>	https://developer.android.com/reference/android/net/VpnService.html
HttpResponseCache	A										<section class="prog__container"><p> Caches HTTP and HTTPS responses to the filesystem so they may be reused, saving time and bandwidth. This class supports <pre><code> <a href="https://developer.android.com/reference/java/net/HttpURLConnection.html"> HttpURLConnection </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html"> HttpsURLConnection </a> </code></pre> ; there is no platform-provided cache for <pre><code> DefaultHttpClient </code></pre> or <pre><code> AndroidHttpClient </code></pre> . Installation and instances are thread safe. </p>\n<pre><code>public final class HttpResponseCache\n</code></pre></section>	https://developer.android.com/reference/android/net/http/HttpResponseCache.html
android.net.http	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/net/http/package-summary.html
SslCertificate.DName	A										<section class="prog__container"><p> A distinguished name helper class: a 3-tuple of: <ul> <li> the most specific common name (CN) </li> <li> the most specific organization (O) </li> <li> the most specific organizational unit (OU) </li> <ul> </ul> </ul></p>\n<pre><code>public class SslCertificate.DName\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/http/SslCertificate.DName.html
SslCertificate	A										<section class="prog__container"><p> SSL certificate info (certificate details) class</p>\n<pre><code>public class SslCertificate\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/http/SslCertificate.html
SslError	A										<section class="prog__container"><p> This class represents a set of one or more SSL errors and the associated SSL certificate.</p>\n<pre><code>public class SslError\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/http/SslError.html
X509TrustManagerExtensions	A										<section class="prog__container"><p> X509TrustManager wrapper exposing Android-added features. <p> The checkServerTrusted method allows callers to perform additional verification of certificate chains after they have been successfully verified by the platform. </p>\n<pre><code>public class X509TrustManagerExtensions\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/http/X509TrustManagerExtensions.html
NsdManager.DiscoveryListener	A										<section class="prog__container"><p> Interface for callback invocation for service discovery</p>\n<pre><code>public static interface NsdManager.DiscoveryListener\n</code></pre></section>	https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html
NsdManager	A										<section class="prog__container"><p> The Network Service Discovery Manager class provides the API to discover services on a network. As an example, if device A and device B are connected over a Wi-Fi network, a game registered on device A can be discovered by a game on device B. Another example use case is an application discovering printers on the network. <p> The API currently supports DNS based service discovery and discovery is currently limited to a local network over Multicast DNS. DNS service discovery is described at http://files.dns-sd.org/draft-cheshire-dnsext-dns-sd.txt <p> The API is asynchronous and responses to requests from an application are on listener callbacks on a seperate thread. <p> There are three main operations the API supports - registration, discovery and resolution. <pre> Application start | | | onServiceRegistered() Register any local services / to be advertised with \ registerService() onRegistrationFailed() | | discoverServices() | Maintain a list to track discovered services | |---------&gt; | | | onServiceFound() | | | add service to list | | |&lt;---------- | |---------&gt; | | | onServiceLost() | | | remove service from list | | |&lt;---------- | | | Connect to a service | from list ? | resolveService() | onServiceResolved() | Establish connection to service with the host and port information </pre> An application that needs to advertise itself over a network for other applications to discover it can do so with a call to <pre><code> <a href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#registerService(android.net.nsd.NsdServiceInfo, int, android.net.nsd.NsdManager.RegistrationListener)"> registerService(NsdServiceInfo, int, NsdManager.RegistrationListener) </a> </code></pre> . If Example is a http based application that can provide HTML data to peer services, it can register a name "Example" with service type "_http._tcp". A successful registration is notified with a callback to <pre><code> <a href="https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html#onServiceRegistered(android.net.nsd.NsdServiceInfo)"> onServiceRegistered(NsdServiceInfo) </a> </code></pre> and a failure to register is notified over <pre><code> <a href="https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html#onRegistrationFailed(android.net.nsd.NsdServiceInfo, int)"> onRegistrationFailed(NsdServiceInfo, int) </a> </code></pre> <p> A peer application looking for http services can initiate a discovery for "_http._tcp" with a call to <pre><code> <a href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#discoverServices(java.lang.String, int, android.net.nsd.NsdManager.DiscoveryListener)"> discoverServices(String, int, NsdManager.DiscoveryListener) </a> </code></pre> . A service found is notified with a callback to <pre><code> <a href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onServiceFound(android.net.nsd.NsdServiceInfo)"> onServiceFound(NsdServiceInfo) </a> </code></pre> and a service lost is notified on <pre><code> <a href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onServiceLost(android.net.nsd.NsdServiceInfo)"> onServiceLost(NsdServiceInfo) </a> </code></pre> . <p> Once the peer application discovers the "Example" http srevice, and needs to receive data from the "Example" application, it can initiate a resolve with <pre><code> <a href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#resolveService(android.net.nsd.NsdServiceInfo, android.net.nsd.NsdManager.ResolveListener)"> resolveService(NsdServiceInfo, NsdManager.ResolveListener) </a> </code></pre> to resolve the host and port details for the purpose of establishing a connection. A successful resolve is notified on <pre><code> <a href="https://developer.android.com/reference/android/net/nsd/NsdManager.ResolveListener.html#onServiceResolved(android.net.nsd.NsdServiceInfo)"> onServiceResolved(NsdServiceInfo) </a> </code></pre> and a failure is notified on <pre><code> <a href="https://developer.android.com/reference/android/net/nsd/NsdManager.ResolveListener.html#onResolveFailed(android.net.nsd.NsdServiceInfo, int)"> onResolveFailed(NsdServiceInfo, int) </a> </code></pre> . Applications can reserve for a service type at http://www.iana.org/form/ports-service. Existing services can be found at http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xml Get an instance of this class by calling <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> Context.getSystemService(Context.NSD_SERVICE) </a> </code></pre> . </p>\n<pre><code>public final class NsdManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/nsd/NsdManager.html
NsdManager.RegistrationListener	A										<section class="prog__container"><p> Interface for callback invocation for service registration</p>\n<pre><code>public static interface NsdManager.RegistrationListener\n</code></pre></section>	https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html
NsdManager.ResolveListener	A										<section class="prog__container"><p> Interface for callback invocation for service resolution</p>\n<pre><code>public static interface NsdManager.ResolveListener\n</code></pre></section>	https://developer.android.com/reference/android/net/nsd/NsdManager.ResolveListener.html
NsdServiceInfo	A										<section class="prog__container"><p> A class representing service information for network service discovery</p>\n<pre><code>public final class NsdServiceInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/nsd/NsdServiceInfo.html
android.net.nsd	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/net/nsd/package-summary.html
AudioCodec	A										<section class="prog__container"><p> This class defines a collection of audio codecs to be used with <pre><code> <a href="https://developer.android.com/reference/android/net/rtp/AudioStream.html"> AudioStream </a> </code></pre> s. Their parameters are designed to be exchanged using Session Description Protocol (SDP). Most of the values listed here can be found in RFC 3551, while others are described in separated standards. <p> Few simple configurations are defined as public static instances for the convenience of direct uses. More complicated ones could be obtained using <pre><code> <a href="https://developer.android.com/reference/android/net/rtp/AudioCodec.html#getCodec(int, java.lang.String, java.lang.String)"> getCodec(int, String, String) </a> </code></pre> . For example, one can use the following snippet to create a mode-1-only AMR codec. </p>\n<pre><code>public class AudioCodec\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/rtp/AudioCodec.html
AudioGroup	A										<section class="prog__container"><p> An AudioGroup is an audio hub for the speaker, the microphone, and <pre><code> <a href="https://developer.android.com/reference/android/net/rtp/AudioStream.html"> AudioStream </a> </code></pre> s. Each of these components can be logically turned on or off by calling <pre><code> <a href="https://developer.android.com/reference/android/net/rtp/AudioGroup.html#setMode(int)"> setMode(int) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/net/rtp/RtpStream.html#setMode(int)"> setMode(int) </a> </code></pre> . The AudioGroup will go through these components and process them one by one within its execution loop. The loop consists of four steps. First, for each AudioStream not in <pre><code> <a href="https://developer.android.com/reference/android/net/rtp/RtpStream.html#MODE_SEND_ONLY"> MODE_SEND_ONLY </a> </code></pre> , decodes its incoming packets and stores in its buffer. Then, if the microphone is enabled, processes the recorded audio and stores in its buffer. Third, if the speaker is enabled, mixes all AudioStream buffers and plays back. Finally, for each AudioStream not in <pre><code> <a href="https://developer.android.com/reference/android/net/rtp/RtpStream.html#MODE_RECEIVE_ONLY"> MODE_RECEIVE_ONLY </a> </code></pre> , mixes all other buffers and sends back the encoded packets. An AudioGroup does nothing if there is no AudioStream in it. <p> Few things must be noticed before using these classes. The performance is highly related to the system load and the network bandwidth. Usually a simpler <pre><code> <a href="https://developer.android.com/reference/android/net/rtp/AudioCodec.html"> AudioCodec </a> </code></pre> costs fewer CPU cycles but requires more network bandwidth, and vise versa. Using two AudioStreams at the same time doubles not only the load but also the bandwidth. The condition varies from one device to another, and developers should choose the right combination in order to get the best result. </p>\n<pre><code>public class AudioGroup\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/rtp/AudioGroup.html
AudioStream	A										<section class="prog__container"><p> An AudioStream is a <pre><code> <a href="https://developer.android.com/reference/android/net/rtp/RtpStream.html"> RtpStream </a> </code></pre> which carrys audio payloads over Real-time Transport Protocol (RTP). Two different classes are developed in order to support various usages such as audio conferencing. An AudioStream represents a remote endpoint which consists of a network mapping and a configured <pre><code> <a href="https://developer.android.com/reference/android/net/rtp/AudioCodec.html"> AudioCodec </a> </code></pre> . On the other side, An <pre><code> <a href="https://developer.android.com/reference/android/net/rtp/AudioGroup.html"> AudioGroup </a> </code></pre> represents a local endpoint which mixes all the AudioStreams and optionally interacts with the speaker and the microphone at the same time. The simplest usage includes one for each endpoints. For other combinations, developers should be aware of the limitations described in <pre><code> <a href="https://developer.android.com/reference/android/net/rtp/AudioGroup.html"> AudioGroup </a> </code></pre> . <p> An AudioStream becomes busy when it joins an AudioGroup. In this case most of the setter methods are disabled. This is designed to ease the task of managing native resources. One can always make an AudioStream leave its AudioGroup by calling <pre><code> <a href="https://developer.android.com/reference/android/net/rtp/AudioStream.html#join(android.net.rtp.AudioGroup)"> join(AudioGroup) </a> </code></pre> with <pre><code> null </code></pre> and put it back after the modification is done. </p>\n<pre><code>public class AudioStream\n</code></pre></section>	https://developer.android.com/reference/android/net/rtp/AudioStream.html
android.net.rtp	A										<section class="prog__container">Provides APIs for RTP (Real-time Transport Protocol), allowing applications to manage on-demandor interactive data streaming. In particular, apps that provide VOIP, push-to-talk, conferencing,and audio streaming can use these APIs to initiate sessions and transmit or receive data streamsover any available network.</section>	https://developer.android.com/reference/android/net/rtp/package-summary.html
RtpStream	A										<section class="prog__container"><p> RtpStream represents the base class of streams which send and receive network packets with media payloads over Real-time Transport Protocol (RTP). <p class="note"> Using this class requires <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#INTERNET"> INTERNET </a> </code></pre> permission. </p>\n<pre><code>public class RtpStream\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/rtp/RtpStream.html
android.net.sip	A										<section class="prog__container">Provides access to Session Initiation Protocol (SIP) functionality, such asmaking and answering VOIP calls using SIP.</section>	https://developer.android.com/reference/android/net/sip/package-summary.html
SipAudioCall	A										<section class="prog__container"><p> Handles an Internet audio call over SIP. You can instantiate this class with <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipManager.html"> SipManager </a> </code></pre> , using <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipManager.html#makeAudioCall(android.net.sip.SipProfile, android.net.sip.SipProfile, android.net.sip.SipAudioCall.Listener, int)"> makeAudioCall() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipManager.html#takeAudioCall(android.content.Intent, android.net.sip.SipAudioCall.Listener)"> takeAudioCall() </a> </code></pre> . <p class="note"> <strong> Note: </strong> Using this class require the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#INTERNET"> INTERNET </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#USE_SIP"> USE_SIP </a> </code></pre> permissions. In addition, <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#startAudio()"> startAudio() </a> </code></pre> requires the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#RECORD_AUDIO"> RECORD_AUDIO </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_WIFI_STATE"> ACCESS_WIFI_STATE </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#WAKE_LOCK"> WAKE_LOCK </a> </code></pre> permissions; and <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#setSpeakerMode(boolean)"> setSpeakerMode() </a> </code></pre> requires the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#MODIFY_AUDIO_SETTINGS"> MODIFY_AUDIO_SETTINGS </a> </code></pre> permission. </p>\n<pre><code>public class SipAudioCall\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/sip/SipAudioCall.html
SipAudioCall.Listener	A										<section class="prog__container"><p> Listener for events relating to a SIP call, such as when a call is being recieved ("on ringing") or a call is outgoing ("on calling"). <p> Many of these events are also received by <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipSession.Listener.html"> SipSession.Listener </a> </code></pre> . </p>\n<pre><code>public static class SipAudioCall.Listener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html
SipErrorCode	A										<section class="prog__container"><p> Defines error codes returned during SIP actions. For example, during <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipRegistrationListener.html#onRegistrationFailed(java.lang.String, int, java.lang.String)"> onRegistrationFailed() </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipSession.Listener.html#onError(android.net.sip.SipSession, int, java.lang.String)"> onError() </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipSession.Listener.html#onCallChangeFailed(android.net.sip.SipSession, int, java.lang.String)"> onCallChangeFailed() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipSession.Listener.html#onRegistrationFailed(android.net.sip.SipSession, int, java.lang.String)"> onRegistrationFailed() </a> </code></pre> .</p>\n<pre><code>public class SipErrorCode\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/sip/SipErrorCode.html
SipException	A										<section class="prog__container"><p> Indicates a general SIP-related exception.</p>\n<pre><code>public class SipException\n</code></pre></section>	https://developer.android.com/reference/android/net/sip/SipException.html
SipManager	A										<section class="prog__container"><p> Provides APIs for SIP tasks, such as initiating SIP connections, and provides access to related SIP services. This class is the starting point for any SIP actions. You can acquire an instance of it with <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipManager.html#newInstance(android.content.Context)"> newInstance() </a> </code></pre> .</p>\n<pre><code>public class SipManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/sip/SipManager.html
SipProfile.Builder	A										<section class="prog__container"><p> Helper class for creating a <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipProfile.html"> SipProfile </a> </code></pre> .</p>\n<pre><code>public static class SipProfile.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/sip/SipProfile.Builder.html
SipProfile	A										<section class="prog__container"><p> Defines a SIP profile, including a SIP account, domain and server information. <p> You can create a <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipProfile.html"> SipProfile </a> </code></pre> using <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipProfile.Builder.html"> SipProfile.Builder </a> </code></pre> . You can also retrieve one from a <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipSession.html"> SipSession </a> </code></pre> , using <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipSession.html#getLocalProfile()"> getLocalProfile() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipSession.html#getPeerProfile()"> getPeerProfile() </a> </code></pre> . </p>\n<pre><code>public class SipProfile\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/sip/SipProfile.html
SipRegistrationListener	A										<section class="prog__container"><p> Listener for SIP registration events.</p>\n<pre><code>public interface SipRegistrationListener\n</code></pre></section>	https://developer.android.com/reference/android/net/sip/SipRegistrationListener.html
SipSession	A										<section class="prog__container"><p> Represents a SIP session that is associated with a SIP dialog or a standalone transaction not within a dialog. <p> You can get a <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipSession.html"> SipSession </a> </code></pre> from <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipManager.html"> SipManager </a> </code></pre> with <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipManager.html#createSipSession(android.net.sip.SipProfile, android.net.sip.SipSession.Listener)"> createSipSession() </a> </code></pre> (when initiating calls) or <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipManager.html#getSessionFor(android.content.Intent)"> getSessionFor() </a> </code></pre> (when receiving calls). </p>\n<pre><code>public final class SipSession\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/sip/SipSession.html
SipSession.Listener	A										<section class="prog__container"><p> Listener for events relating to a SIP session, such as when a session is being registered ("on registering") or a call is outgoing ("on calling"). <p> Many of these events are also received by <pre><code> <a href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html"> SipAudioCall.Listener </a> </code></pre> . </p>\n<pre><code>public static class SipSession.Listener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/sip/SipSession.Listener.html
SipSession.State	A										<section class="prog__container"><p> Defines SIP session states, such as "registering", "outgoing call", and "in call".</p>\n<pre><code>public static class SipSession.State\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/sip/SipSession.State.html
android.net.wifi	A										<section class="prog__container">Provides classes to manage Wi-Fi functionality on the device.</section>	https://developer.android.com/reference/android/net/wifi/package-summary.html
ScanResult	A										<section class="prog__container"><p> Describes information about a detected access point. In addition to the attributes described here, the supplicant keeps track of <pre><code> quality </code></pre> , <pre><code> noise </code></pre> , and <pre><code> maxbitrate </code></pre> attributes, but does not currently report them to external clients.</p>\n<pre><code>public class ScanResult\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/ScanResult.html
SupplicantState	A										<section class="prog__container"><p> From <pre><code> defs.h </code></pre> in <pre><code> wpa_supplicant </code></pre> . <p> </p>\n<pre><code>public final enum SupplicantState\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/SupplicantState.html
WifiConfiguration.AuthAlgorithm	A										<section class="prog__container"><p> Recognized IEEE 802.11 authentication algorithms.</p>\n<pre><code>public static class WifiConfiguration.AuthAlgorithm\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiConfiguration.AuthAlgorithm.html
WifiConfiguration.GroupCipher	A										<section class="prog__container"><p> Recognized group ciphers. <pre> CCMP = AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0] TKIP = Temporal Key Integrity Protocol [IEEE 802.11i/D7.0] WEP104 = WEP (Wired Equivalent Privacy) with 104-bit key WEP40 = WEP (Wired Equivalent Privacy) with 40-bit key (original 802.11) </pre></p>\n<pre><code>public static class WifiConfiguration.GroupCipher\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiConfiguration.GroupCipher.html
WifiConfiguration	A										<section class="prog__container"><p> A class representing a configured Wi-Fi network, including the security configuration.</p>\n<pre><code>public class WifiConfiguration\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html
WifiConfiguration.KeyMgmt	A										<section class="prog__container"><p> Recognized key management schemes.</p>\n<pre><code>public static class WifiConfiguration.KeyMgmt\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html
WifiConfiguration.PairwiseCipher	A										<section class="prog__container"><p> Recognized pairwise ciphers for WPA.</p>\n<pre><code>public static class WifiConfiguration.PairwiseCipher\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiConfiguration.PairwiseCipher.html
WifiConfiguration.Protocol	A										<section class="prog__container"><p> Recognized security protocols.</p>\n<pre><code>public static class WifiConfiguration.Protocol\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiConfiguration.Protocol.html
WifiConfiguration.Status	A										<section class="prog__container"><p> Possible status of a network configuration.</p>\n<pre><code>public static class WifiConfiguration.Status\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiConfiguration.Status.html
WifiEnterpriseConfig.Eap	A										<section class="prog__container"><p> The Extensible Authentication Protocol method used</p>\n<pre><code>public static final class WifiEnterpriseConfig.Eap\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Eap.html
WifiEnterpriseConfig	A										<section class="prog__container"><p> Enterprise configuration details for Wi-Fi. Stores details about the EAP method and any associated credentials.</p>\n<pre><code>public class WifiEnterpriseConfig\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html
WifiEnterpriseConfig.Phase2	A										<section class="prog__container"><p> The inner authentication method used</p>\n<pre><code>public static final class WifiEnterpriseConfig.Phase2\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Phase2.html
WifiInfo	A										<section class="prog__container"><p> Describes the state of any Wifi connection that is active or is in the process of being set up.</p>\n<pre><code>public class WifiInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiInfo.html
WifiManager	A										<section class="prog__container"><p> This class provides the primary API for managing all aspects of Wi-Fi connectivity. Get an instance of this class by calling <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> Context.getSystemService(Context.WIFI_SERVICE) </a> </code></pre> . On releases before NYC, it should only be obtained from an application context, and not from any other derived context to avoid memory leaks within the calling process. It deals with several categories of items: <ul> <li> The list of configured networks. The list can be viewed and updated, and attributes of individual entries can be modified. </li> <li> The currently active Wi-Fi network, if any. Connectivity can be established or torn down, and dynamic information about the state of the network can be queried. </li> <li> Results of access point scans, containing enough information to make decisions about what access point to connect to. </li> <li> It defines the names of various Intent actions that are broadcast upon any sort of change in Wi-Fi state. </li> </ul> This is the API to use when performing Wi-Fi specific operations. To perform operations that pertain to network connectivity at an abstract level, use <pre><code> <a href="https://developer.android.com/reference/android/net/ConnectivityManager.html"> ConnectivityManager </a> </code></pre> .</p>\n<pre><code>public class WifiManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiManager.html
WifiManager.MulticastLock	A										<section class="prog__container"><p> Allows an application to receive Wifi Multicast packets. Normally the Wifi stack filters out packets not explicitly addressed to this device. Acquring a MulticastLock will cause the stack to receive packets addressed to multicast addresses. Processing these extra packets can cause a noticable battery drain and should be disabled when not needed.</p>\n<pre><code>public class WifiManager.MulticastLock\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiManager.MulticastLock.html
WifiManager.WifiLock	A										<section class="prog__container"><p> Allows an application to keep the Wi-Fi radio awake. Normally the Wi-Fi radio may turn off when the user has not used the device in a while. Acquiring a WifiLock will keep the radio on until the lock is released. Multiple applications may hold WifiLocks, and the radio will only be allowed to turn off when no WifiLocks are held in any application. <p> Before using a WifiLock, consider carefully if your application requires Wi-Fi access, or could function over a mobile network, if available. A program that needs to download large files should hold a WifiLock to ensure that the download will complete, but a program whose network usage is occasional or low-bandwidth should not hold a WifiLock to avoid adversely affecting battery life. <p> Note that WifiLocks cannot override the user-level "Wi-Fi Enabled" setting, nor Airplane Mode. They simply keep the radio from turning off when Wi-Fi is already on but the device is idle. <p> Any application using a WifiLock must request the <pre><code> android.permission.WAKE_LOCK </code></pre> permission in an <pre><code> &lt;uses-permission&gt; </code></pre> element of the application's manifest. </p>\n<pre><code>public class WifiManager.WifiLock\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiManager.WifiLock.html
WifiManager.WpsCallback	A										<section class="prog__container"><p> Interface for callback invocation on a start WPS action</p>\n<pre><code>public static abstract class WifiManager.WpsCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/WifiManager.WpsCallback.html
WpsInfo	A										<section class="prog__container"><p> A class representing Wi-Fi Protected Setup</p>\n<pre><code>public class WpsInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/WpsInfo.html
android.net.wifi.p2p	A										<section class="prog__container">Provides classes to create peer-to-peer (P2P) connections with Wi-Fi Direct.</section>	https://developer.android.com/reference/android/net/wifi/p2p/package-summary.html
WifiP2pConfig	A										<section class="prog__container"><p> A class representing a Wi-Fi P2p configuration for setting up a connection</p>\n<pre><code>public class WifiP2pConfig\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html
WifiP2pDevice	A										<section class="prog__container"><p> A class representing a Wi-Fi p2p device Note that the operations are not thread safe</p>\n<pre><code>public class WifiP2pDevice\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pDevice.html
WifiP2pDeviceList	A										<section class="prog__container"><p> A class representing a Wi-Fi P2p device list. Note that the operations are not thread safe.</p>\n<pre><code>public class WifiP2pDeviceList\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pDeviceList.html
WifiP2pGroup	A										<section class="prog__container"><p> A class representing a Wi-Fi P2p group. A p2p group consists of a single group owner and one or more clients. In the case of a group with only two devices, one will be the group owner and the other will be a group client.</p>\n<pre><code>public class WifiP2pGroup\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html
WifiP2pInfo	A										<section class="prog__container"><p> A class representing connection information about a Wi-Fi p2p group</p>\n<pre><code>public class WifiP2pInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pInfo.html
WifiP2pManager.ActionListener	A										<section class="prog__container"><p> Interface for callback invocation on an application action</p>\n<pre><code>public static interface WifiP2pManager.ActionListener\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ActionListener.html
WifiP2pManager.Channel	A										<section class="prog__container"><p> A channel that connects the application to the Wifi p2p framework. Most p2p operations require a Channel as an argument. An instance of Channel is obtained by doing a call on <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#initialize(android.content.Context, android.os.Looper, android.net.wifi.p2p.WifiP2pManager.ChannelListener)"> initialize(Context, Looper, WifiP2pManager.ChannelListener) </a> </code></pre></p>\n<pre><code>public static class WifiP2pManager.Channel\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.Channel.html
WifiP2pManager.ChannelListener	A										<section class="prog__container"><p> Interface for callback invocation when framework channel is lost</p>\n<pre><code>public static interface WifiP2pManager.ChannelListener\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ChannelListener.html
WifiP2pManager.ConnectionInfoListener	A										<section class="prog__container"><p> Interface for callback invocation when connection info is available</p>\n<pre><code>public static interface WifiP2pManager.ConnectionInfoListener\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ConnectionInfoListener.html
WifiP2pManager.DnsSdServiceResponseListener	A										<section class="prog__container"><p> Interface for callback invocation when Bonjour service discovery response is received</p>\n<pre><code>public static interface WifiP2pManager.DnsSdServiceResponseListener\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DnsSdServiceResponseListener.html
WifiP2pManager.DnsSdTxtRecordListener	A										<section class="prog__container"><p> Interface for callback invocation when Bonjour TXT record is available for a service</p>\n<pre><code>public static interface WifiP2pManager.DnsSdTxtRecordListener\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DnsSdTxtRecordListener.html
WifiP2pManager.GroupInfoListener	A										<section class="prog__container"><p> Interface for callback invocation when group info is available</p>\n<pre><code>public static interface WifiP2pManager.GroupInfoListener\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.GroupInfoListener.html
WifiP2pManager	A										<section class="prog__container"><p> This class provides the API for managing Wi-Fi peer-to-peer connectivity. This lets an application discover available peers, setup connection to peers and query for the list of peers. When a p2p connection is formed over wifi, the device continues to maintain the uplink connection over mobile or any other available network for internet connectivity on the device. <p> The API is asynchronous and responses to requests from an application are on listener callbacks provided by the application. The application needs to do an initialization with <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#initialize(android.content.Context, android.os.Looper, android.net.wifi.p2p.WifiP2pManager.ChannelListener)"> initialize(Context, Looper, WifiP2pManager.ChannelListener) </a> </code></pre> before doing any p2p operation. <p> Most application calls need a <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ActionListener.html"> WifiP2pManager.ActionListener </a> </code></pre> instance for receiving callbacks <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ActionListener.html#onSuccess()"> onSuccess() </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ActionListener.html#onFailure(int)"> onFailure(int) </a> </code></pre> . Action callbacks indicate whether the initiation of the action was a success or a failure. Upon failure, the reason of failure can be one of <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#ERROR"> ERROR </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#P2P_UNSUPPORTED"> P2P_UNSUPPORTED </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#BUSY"> BUSY </a> </code></pre> . <p> An application can initiate discovery of peers with <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#discoverPeers(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> discoverPeers(WifiP2pManager.Channel, WifiP2pManager.ActionListener) </a> </code></pre> . An initiated discovery request from an application stays active until the device starts connecting to a peer ,forms a p2p group or there is an explicit <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> stopPeerDiscovery(WifiP2pManager.Channel, WifiP2pManager.ActionListener) </a> </code></pre> . Applications can listen to <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_DISCOVERY_CHANGED_ACTION"> WIFI_P2P_DISCOVERY_CHANGED_ACTION </a> </code></pre> to know if a peer-to-peer discovery is running or stopped. Additionally, <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_PEERS_CHANGED_ACTION"> WIFI_P2P_PEERS_CHANGED_ACTION </a> </code></pre> indicates if the peer list has changed. <p> When an application needs to fetch the current list of peers, it can request the list of peers with <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestPeers(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pManager.PeerListListener)"> requestPeers(WifiP2pManager.Channel, WifiP2pManager.PeerListListener) </a> </code></pre> . When the peer list is available <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.PeerListListener.html#onPeersAvailable(android.net.wifi.p2p.WifiP2pDeviceList)"> onPeersAvailable(WifiP2pDeviceList) </a> </code></pre> is called with the device list. <p> An application can initiate a connection request to a peer through <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#connect(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pConfig, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> connect(WifiP2pManager.Channel, WifiP2pConfig, WifiP2pManager.ActionListener) </a> </code></pre> . See <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html"> WifiP2pConfig </a> </code></pre> for details on setting up the configuration. For communication with legacy Wi-Fi devices that do not support p2p, an app can create a group using <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#createGroup(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> createGroup(WifiP2pManager.Channel, WifiP2pManager.ActionListener) </a> </code></pre> which creates an access point whose details can be fetched with <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestGroupInfo(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pManager.GroupInfoListener)"> requestGroupInfo(WifiP2pManager.Channel, WifiP2pManager.GroupInfoListener) </a> </code></pre> . <p> After a successful group formation through <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#createGroup(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> createGroup(WifiP2pManager.Channel, WifiP2pManager.ActionListener) </a> </code></pre> or through <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#connect(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pConfig, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> connect(WifiP2pManager.Channel, WifiP2pConfig, WifiP2pManager.ActionListener) </a> </code></pre> , use <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pManager.ConnectionInfoListener)"> requestConnectionInfo(WifiP2pManager.Channel, WifiP2pManager.ConnectionInfoListener) </a> </code></pre> to fetch the connection details. The connection info <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pInfo.html"> WifiP2pInfo </a> </code></pre> contains the address of the group owner <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pInfo.html#groupOwnerAddress"> groupOwnerAddress </a> </code></pre> and a flag <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pInfo.html#isGroupOwner"> isGroupOwner </a> </code></pre> to indicate if the current device is a p2p group owner. A p2p client can thus communicate with the p2p group owner through a socket connection. <p> With peer discovery using <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#discoverPeers(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> discoverPeers(WifiP2pManager.Channel, WifiP2pManager.ActionListener) </a> </code></pre> , an application discovers the neighboring peers, but has no good way to figure out which peer to establish a connection with. For example, if a game application is interested in finding all the neighboring peers that are also running the same game, it has no way to find out until after the connection is setup. Pre-association service discovery is meant to address this issue of filtering the peers based on the running services. <p> With pre-association service discovery, an application can advertise a service for a application on a peer device prior to a connection setup between the devices. Currently, DNS based service discovery (Bonjour) and Upnp are the higher layer protocols supported. Get Bonjour resources at dns-sd.org and Upnp resources at upnp.org As an example, a video application can discover a Upnp capable media renderer prior to setting up a Wi-fi p2p connection with the device. <p> An application can advertise a Upnp or a Bonjour service with a call to <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#addLocalService(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.nsd.WifiP2pServiceInfo, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> addLocalService(WifiP2pManager.Channel, WifiP2pServiceInfo, WifiP2pManager.ActionListener) </a> </code></pre> . After a local service is added, the framework automatically responds to a peer application discovering the service prior to establishing a p2p connection. A call to <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#removeLocalService(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.nsd.WifiP2pServiceInfo, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> removeLocalService(WifiP2pManager.Channel, WifiP2pServiceInfo, WifiP2pManager.ActionListener) </a> </code></pre> removes a local service and <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#clearLocalServices(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> clearLocalServices(WifiP2pManager.Channel, WifiP2pManager.ActionListener) </a> </code></pre> can be used to clear all local services. <p> An application that is looking for peer devices that support certain services can do so with a call to <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#discoverServices(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> discoverServices(WifiP2pManager.Channel, WifiP2pManager.ActionListener) </a> </code></pre> . Prior to initiating the discovery, application can add service discovery request with a call to <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#addServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.nsd.WifiP2pServiceRequest, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> addServiceRequest(WifiP2pManager.Channel, WifiP2pServiceRequest, WifiP2pManager.ActionListener) </a> </code></pre> , remove a service discovery request with a call to <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#removeServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.nsd.WifiP2pServiceRequest, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> removeServiceRequest(WifiP2pManager.Channel, WifiP2pServiceRequest, WifiP2pManager.ActionListener) </a> </code></pre> or clear all requests with a call to <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#clearServiceRequests(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> clearServiceRequests(WifiP2pManager.Channel, WifiP2pManager.ActionListener) </a> </code></pre> . When no service requests remain, a previously running service discovery will stop. The application is notified of a result of service discovery request through listener callbacks set through <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#setDnsSdResponseListeners(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pManager.DnsSdServiceResponseListener, android.net.wifi.p2p.WifiP2pManager.DnsSdTxtRecordListener)"> setDnsSdResponseListeners(WifiP2pManager.Channel, WifiP2pManager.DnsSdServiceResponseListener, WifiP2pManager.DnsSdTxtRecordListener) </a> </code></pre> for Bonjour or <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#setUpnpServiceResponseListener(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pManager.UpnpServiceResponseListener)"> setUpnpServiceResponseListener(WifiP2pManager.Channel, WifiP2pManager.UpnpServiceResponseListener) </a> </code></pre> for Upnp. <p class="note"> <strong> Note: </strong> Registering an application handler with <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#initialize(android.content.Context, android.os.Looper, android.net.wifi.p2p.WifiP2pManager.ChannelListener)"> initialize(Context, Looper, WifiP2pManager.ChannelListener) </a> </code></pre> requires the permissions <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_WIFI_STATE"> ACCESS_WIFI_STATE </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#CHANGE_WIFI_STATE"> CHANGE_WIFI_STATE </a> </code></pre> to perform any further peer-to-peer operations. Get an instance of this class by calling <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> Context.getSystemService(Context.WIFI_P2P_SERVICE) </a> </code></pre> . </p>\n<pre><code>public class WifiP2pManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html
WifiP2pManager.PeerListListener	A										<section class="prog__container"><p> Interface for callback invocation when peer list is available</p>\n<pre><code>public static interface WifiP2pManager.PeerListListener\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.PeerListListener.html
WifiP2pManager.ServiceResponseListener	A										<section class="prog__container"><p> Interface for callback invocation when service discovery response other than Upnp or Bonjour is received</p>\n<pre><code>public static interface WifiP2pManager.ServiceResponseListener\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ServiceResponseListener.html
WifiP2pManager.UpnpServiceResponseListener	A										<section class="prog__container"><p> Interface for callback invocation when upnp service discovery response is received</p>\n<pre><code>public static interface WifiP2pManager.UpnpServiceResponseListener\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.UpnpServiceResponseListener.html
android.net.wifi.p2p.nsd	A										<section class="prog__container">This class is used to create service discovery request for custom vendor specific service discovery protocol</section>	https://developer.android.com/reference/android/net/wifi/p2p/nsd/package-summary.html
WifiP2pDnsSdServiceInfo	A										<section class="prog__container"><p> A class for storing Bonjour service information that is advertised over a Wi-Fi peer-to-peer setup.</p>\n<pre><code>public class WifiP2pDnsSdServiceInfo\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pDnsSdServiceInfo.html
WifiP2pDnsSdServiceRequest	A										<section class="prog__container"><p> A class for creating a Bonjour service discovery request for use with <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#addServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.nsd.WifiP2pServiceRequest, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> addServiceRequest(WifiP2pManager.Channel, WifiP2pServiceRequest, WifiP2pManager.ActionListener) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#removeServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.nsd.WifiP2pServiceRequest, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> removeServiceRequest(WifiP2pManager.Channel, WifiP2pServiceRequest, WifiP2pManager.ActionListener) </a> </code></pre></p>\n<pre><code>public class WifiP2pDnsSdServiceRequest\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pDnsSdServiceRequest.html
WifiP2pServiceInfo	A										<section class="prog__container"><p> A class for storing service information that is advertised over a Wi-Fi peer-to-peer setup</p>\n<pre><code>public class WifiP2pServiceInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pServiceInfo.html
WifiP2pServiceRequest	A										<section class="prog__container"><p> A class for creating a service discovery request for use with <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#addServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.nsd.WifiP2pServiceRequest, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> addServiceRequest(WifiP2pManager.Channel, WifiP2pServiceRequest, WifiP2pManager.ActionListener) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#removeServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.nsd.WifiP2pServiceRequest, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> removeServiceRequest(WifiP2pManager.Channel, WifiP2pServiceRequest, WifiP2pManager.ActionListener) </a> </code></pre> <p> This class is used to create service discovery request for custom vendor specific service discovery protocol <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pServiceInfo.html#SERVICE_TYPE_VENDOR_SPECIFIC"> SERVICE_TYPE_VENDOR_SPECIFIC </a> </code></pre> or to search all service protocols <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pServiceInfo.html#SERVICE_TYPE_ALL"> SERVICE_TYPE_ALL </a> </code></pre> . <p> For the purpose of creating a UPnP or Bonjour service request, use <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUpnpServiceRequest.html"> WifiP2pUpnpServiceRequest </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pDnsSdServiceRequest.html"> WifiP2pDnsSdServiceRequest </a> </code></pre> respectively. </p>\n<pre><code>public class WifiP2pServiceRequest\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pServiceRequest.html
WifiP2pUpnpServiceInfo	A										<section class="prog__container"><p> A class for storing Upnp service information that is advertised over a Wi-Fi peer-to-peer setup.</p>\n<pre><code>public class WifiP2pUpnpServiceInfo\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUpnpServiceInfo.html
WifiP2pUpnpServiceRequest	A										<section class="prog__container"><p> A class for creating a Upnp service discovery request for use with <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#addServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.nsd.WifiP2pServiceRequest, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> addServiceRequest(WifiP2pManager.Channel, WifiP2pServiceRequest, WifiP2pManager.ActionListener) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#removeServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.nsd.WifiP2pServiceRequest, android.net.wifi.p2p.WifiP2pManager.ActionListener)"> removeServiceRequest(WifiP2pManager.Channel, WifiP2pServiceRequest, WifiP2pManager.ActionListener) </a> </code></pre></p>\n<pre><code>public class WifiP2pUpnpServiceRequest\n</code></pre></section>	https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUpnpServiceRequest.html
FormatException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p>\n<pre><code>public class FormatException\n</code></pre></section>	https://developer.android.com/reference/android/nfc/FormatException.html
NdefMessage	A										<section class="prog__container"><p> Represents an immutable NDEF Message. <p> NDEF (NFC Data Exchange Format) is a light-weight binary format, used to encapsulate typed data. It is specified by the NFC Forum, for transmission and storage with NFC, however it is transport agnostic. <p> NDEF defines messages and records. An NDEF Record contains typed data, such as MIME-type media, a URI, or a custom application payload. An NDEF Message is a container for one or more NDEF Records. <p> When an Android device receives an NDEF Message (for example by reading an NFC tag) it processes it through a dispatch mechanism to determine an activity to launch. The type of the <em> first </em> record in the message has special importance for message dispatch, so design this record carefully. <p> Use <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefMessage.html#NdefMessage(byte[])"> NdefMessage(byte[]) </a> </code></pre> to construct an NDEF Message from binary data, or <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefMessage.html#NdefMessage(android.nfc.NdefRecord[])"> NdefMessage(NdefRecord[]) </a> </code></pre> to construct from one or more <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefRecord.html"> NdefRecord </a> </code></pre> s. <p class="note"> <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefMessage.html"> NdefMessage </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefRecord.html"> NdefRecord </a> </code></pre> implementations are always available, even on Android devices that do not have NFC hardware. <p class="note"> <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefRecord.html"> NdefRecord </a> </code></pre> s are intended to be immutable (and thread-safe), however they may contain mutable fields. So take care not to modify mutable fields passed into constructors, or modify mutable fields obtained by getter methods, unless such modification is explicitly marked as safe. </p>\n<pre><code>public final class NdefMessage\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/nfc/NdefMessage.html
NdefRecord	A										<section class="prog__container"><p> Represents an immutable NDEF Record. <p> NDEF (NFC Data Exchange Format) is a light-weight binary format, used to encapsulate typed data. It is specified by the NFC Forum, for transmission and storage with NFC, however it is transport agnostic. <p> NDEF defines messages and records. An NDEF Record contains typed data, such as MIME-type media, a URI, or a custom application payload. An NDEF Message is a container for one or more NDEF Records. <p> This class represents logical (complete) NDEF Records, and can not be used to represent chunked (partial) NDEF Records. However <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefMessage.html#NdefMessage(byte[])"> NdefMessage(byte[]) </a> </code></pre> can be used to parse a message containing chunked records, and will return a message with unchunked (complete) records. <p> A logical NDEF Record always contains a 3-bit TNF (Type Name Field) that provides high level typing for the rest of the record. The remaining fields are variable length and not always present: <ul> <li> <em> type </em> : detailed typing for the payload </li> <li> <em> id </em> : identifier meta-data, not commonly used </li> <li> <em> payload </em> : the actual payload </li> </ul> <p> Helpers such as <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefRecord.html#createUri(android.net.Uri)"> createUri(Uri) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefRecord.html#createMime(java.lang.String, byte[])"> createMime(String, byte[]) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefRecord.html#createExternal(java.lang.String, java.lang.String, byte[])"> createExternal(String, String, byte[]) </a> </code></pre> are included to create well-formatted NDEF Records with correctly set tnf, type, id and payload fields, please use these helpers whenever possible. <p> Use the constructor <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefRecord.html#NdefRecord(short, byte[], byte[], byte[])"> NdefRecord(short, byte[], byte[], byte[]) </a> </code></pre> if you know what you are doing and what to set the fields individually. Only basic validation is performed with this constructor, so it is possible to create records that do not confirm to the strict NFC Forum specifications. <p> The binary representation of an NDEF Record includes additional flags to indicate location with an NDEF message, provide support for chunking of NDEF records, and to pack optional fields. This class does not expose those details. To write an NDEF Record as binary you must first put it into an <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefMessage.html"> NdefMessage </a> </code></pre> , then call <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefMessage.html#toByteArray()"> toByteArray() </a> </code></pre> . <p class="note"> <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefMessage.html"> NdefMessage </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefRecord.html"> NdefRecord </a> </code></pre> implementations are always available, even on Android devices that do not have NFC hardware. <p class="note"> <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefRecord.html"> NdefRecord </a> </code></pre> s are intended to be immutable (and thread-safe), however they may contain mutable fields. So take care not to modify mutable fields passed into constructors, or modify mutable fields obtained by getter methods, unless such modification is explicitly marked as safe. </p>\n<pre><code>public final class NdefRecord\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/nfc/NdefRecord.html
NfcAdapter.CreateBeamUrisCallback	A										<section class="prog__container"><p></p>\n<pre><code>public static interface NfcAdapter.CreateBeamUrisCallback\n</code></pre></section>	https://developer.android.com/reference/android/nfc/NfcAdapter.CreateBeamUrisCallback.html
NfcAdapter.CreateNdefMessageCallback	A										<section class="prog__container"><p> A callback to be invoked when another NFC device capable of NDEF push (Android Beam) is within range. <p> Implement this interface and pass it to <pre><code> <a href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#setNdefPushMessageCallback(android.nfc.NfcAdapter.CreateNdefMessageCallback, android.app.Activity, android.app.Activity...)"> setNdefPushMessageCallback() </a> </code></pre> in order to create an <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefMessage.html"> NdefMessage </a> </code></pre> at the moment that another device is within range for NFC. Using this callback allows you to create a message with data that might vary based on the content currently visible to the user. Alternatively, you can call <pre><code> <a href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#setNdefPushMessage(android.nfc.NdefMessage, android.app.Activity, android.app.Activity...)"> setNdefPushMessage() </a> </code></pre> if the <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefMessage.html"> NdefMessage </a> </code></pre> always contains the same data. </p>\n<pre><code>public static interface NfcAdapter.CreateNdefMessageCallback\n</code></pre></section>	https://developer.android.com/reference/android/nfc/NfcAdapter.CreateNdefMessageCallback.html
NfcAdapter	A										<section class="prog__container"><p> Represents the local NFC adapter. <p> Use the helper <pre><code> <a href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#getDefaultAdapter(android.content.Context)"> getDefaultAdapter(Context) </a> </code></pre> to get the default NFC adapter for this Android device. </p>\n<pre><code>public final class NfcAdapter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/nfc/NfcAdapter.html
NfcAdapter.OnNdefPushCompleteCallback	A										<section class="prog__container"><p> A callback to be invoked when the system successfully delivers your <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefMessage.html"> NdefMessage </a> </code></pre> to another device.</p>\n<pre><code>public static interface NfcAdapter.OnNdefPushCompleteCallback\n</code></pre></section>	https://developer.android.com/reference/android/nfc/NfcAdapter.OnNdefPushCompleteCallback.html
NfcAdapter.OnTagRemovedListener	A										<section class="prog__container"><p> A callback that is invoked when a tag is removed from the field.</p>\n<pre><code>public static interface NfcAdapter.OnTagRemovedListener\n</code></pre></section>	https://developer.android.com/reference/android/nfc/NfcAdapter.OnTagRemovedListener.html
NfcAdapter.ReaderCallback	A										<section class="prog__container"><p> A callback to be invoked when the system finds a tag while the foreground activity is operating in reader mode. <p> Register your <pre><code> ReaderCallback </code></pre> implementation with <pre><code> <a href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#enableReaderMode(android.app.Activity, android.nfc.NfcAdapter.ReaderCallback, int, android.os.Bundle)"> enableReaderMode(Activity, NfcAdapter.ReaderCallback, int, Bundle) </a> </code></pre> and disable it with <pre><code> <a href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#disableReaderMode(android.app.Activity)"> disableReaderMode(Activity) </a> </code></pre> . </p>\n<pre><code>public static interface NfcAdapter.ReaderCallback\n</code></pre></section>	https://developer.android.com/reference/android/nfc/NfcAdapter.ReaderCallback.html
NfcEvent	A										<section class="prog__container"><p> Wraps information associated with any NFC event. <p> Immutable object, with direct access to the (final) fields. <p> An <pre><code> <a href="https://developer.android.com/reference/android/nfc/NfcEvent.html"> NfcEvent </a> </code></pre> object is usually included in callbacks from <pre><code> <a href="https://developer.android.com/reference/android/nfc/NfcAdapter.html"> NfcAdapter </a> </code></pre> . Check the documentation of the callback to see which fields may be set. <p> This wrapper object is used (instead of parameters in the callback) because it allows new fields to be added without breaking API compatibility. </p>\n<pre><code>public final class NfcEvent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/nfc/NfcEvent.html
NfcManager	A										<section class="prog__container"><p> High level manager used to obtain an instance of an <pre><code> <a href="https://developer.android.com/reference/android/nfc/NfcAdapter.html"> NfcAdapter </a> </code></pre> . <p> Use <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> getSystemService(java.lang.String) </a> </code></pre> with <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#NFC_SERVICE"> NFC_SERVICE </a> </code></pre> to create an <pre><code> <a href="https://developer.android.com/reference/android/nfc/NfcManager.html"> NfcManager </a> </code></pre> , then call <pre><code> <a href="https://developer.android.com/reference/android/nfc/NfcManager.html#getDefaultAdapter()"> getDefaultAdapter() </a> </code></pre> to obtain the <pre><code> <a href="https://developer.android.com/reference/android/nfc/NfcAdapter.html"> NfcAdapter </a> </code></pre> . <p> Alternately, you can just call the static helper <pre><code> <a href="https://developer.android.com/reference/android/nfc/NfcAdapter.html#getDefaultAdapter(android.content.Context)"> getDefaultAdapter(android.content.Context) </a> </code></pre> . </p>\n<pre><code>public final class NfcManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/nfc/NfcManager.html
android.nfc	A										<section class="prog__container">Provides access to Near Field Communication (NFC) functionality, allowing applications to readNDEF message in NFC tags. A "tag" may actually be another device that appears as a tag.</section>	https://developer.android.com/reference/android/nfc/package-summary.html
Tag	A										<section class="prog__container"><p> Represents an NFC tag that has been discovered. <p> <pre><code> <a href="https://developer.android.com/reference/android/nfc/Tag.html"> Tag </a> </code></pre> is an immutable object that represents the state of a NFC tag at the time of discovery. It can be used as a handle to <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/TagTechnology.html"> TagTechnology </a> </code></pre> classes to perform advanced operations, or directly queried for its ID via <pre><code> <a href="https://developer.android.com/reference/android/nfc/Tag.html#getId()"> getId() </a> </code></pre> and the set of technologies it contains via <pre><code> <a href="https://developer.android.com/reference/android/nfc/Tag.html#getTechList()"> getTechList() </a> </code></pre> . Arrays passed to and returned by this class are <em> not </em> cloned, so be careful not to modify them. <p> A new tag object is created every time a tag is discovered (comes into range), even if it is the same physical tag. If a tag is removed and then returned into range, then only the most recent tag object can be successfully used to create a <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/TagTechnology.html"> TagTechnology </a> </code></pre> . </p>\n<pre><code>public final class Tag\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/nfc/Tag.html
TagLostException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p>\n<pre><code>public class TagLostException\n</code></pre></section>	https://developer.android.com/reference/android/nfc/TagLostException.html
CardEmulation	A										<section class="prog__container"><p> This class can be used to query the state of NFC card emulation services. For a general introduction into NFC card emulation, please read the <a href="https://developer.android.com/guide/topics/connectivity/nfc/hce.html"> NFC card emulation developer guide </a> .</p>\n<pre><code>public final class CardEmulation\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html
HostApduService	A										<section class="prog__container"><p> <p> HostApduService is a convenience <pre><code> <a href="https://developer.android.com/reference/android/app/Service.html"> Service </a> </code></pre> class that can be extended to emulate an NFC card inside an Android service component. </p>\n<pre><code>public abstract class HostApduService\n</code></pre></section>	https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html
HostNfcFService	A										<section class="prog__container"><p> <p> HostNfcFService is a convenience <pre><code> <a href="https://developer.android.com/reference/android/app/Service.html"> Service </a> </code></pre> class that can be extended to emulate an NFC-F card inside an Android service component. </p>\n<pre><code>public abstract class HostNfcFService\n</code></pre></section>	https://developer.android.com/reference/android/nfc/cardemulation/HostNfcFService.html
NfcFCardEmulation	A										<section class="prog__container"><p> This class can be used to query the state of NFC-F card emulation services. For a general introduction into NFC card emulation, please read the <a href="https://developer.android.com/guide/topics/connectivity/nfc/hce.html"> NFC card emulation developer guide </a> .</p>\n<pre><code>public final class NfcFCardEmulation\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/nfc/cardemulation/NfcFCardEmulation.html
OffHostApduService	A										<section class="prog__container"><p> <p> OffHostApduService is a convenience <pre><code> <a href="https://developer.android.com/reference/android/app/Service.html"> Service </a> </code></pre> class that can be extended to describe one or more NFC applications that are residing off-host, for example on an embedded secure element or a UICC. </p>\n<pre><code>public abstract class OffHostApduService\n</code></pre></section>	https://developer.android.com/reference/android/nfc/cardemulation/OffHostApduService.html
android.nfc.cardemulation	A										<section class="prog__container">HostApduService is a convenience</section>	https://developer.android.com/reference/android/nfc/cardemulation/package-summary.html
IsoDep	A										<section class="prog__container"><p> Provides access to ISO-DEP (ISO 14443-4) properties and I/O operations on a <pre><code> <a href="https://developer.android.com/reference/android/nfc/Tag.html"> Tag </a> </code></pre> . <p> Acquire an <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/IsoDep.html"> IsoDep </a> </code></pre> object using <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/IsoDep.html#get(android.nfc.Tag)"> get(Tag) </a> </code></pre> . <p> The primary ISO-DEP I/O operation is <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/IsoDep.html#transceive(byte[])"> transceive(byte[]) </a> </code></pre> . Applications must implement their own protocol stack on top of <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/IsoDep.html#transceive(byte[])"> transceive(byte[]) </a> </code></pre> . <p> Tags that enumerate the <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/IsoDep.html"> IsoDep </a> </code></pre> technology in <pre><code> <a href="https://developer.android.com/reference/android/nfc/Tag.html#getTechList()"> getTechList() </a> </code></pre> will also enumerate <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcA.html"> NfcA </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcB.html"> NfcB </a> </code></pre> (since IsoDep builds on top of either of these). <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#NFC"> NFC </a> </code></pre> permission. </p>\n<pre><code>public final class IsoDep\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/nfc/tech/IsoDep.html
MifareClassic	A										<section class="prog__container"><p> Provides access to MIFARE Classic properties and I/O operations on a <pre><code> <a href="https://developer.android.com/reference/android/nfc/Tag.html"> Tag </a> </code></pre> . <p> Acquire a <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareClassic.html"> MifareClassic </a> </code></pre> object using <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#get(android.nfc.Tag)"> get(Tag) </a> </code></pre> . <p> MIFARE Classic is also known as MIFARE Standard. <p> MIFARE Classic tags are divided into sectors, and each sector is sub-divided into blocks. Block size is always 16 bytes ( <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#BLOCK_SIZE"> BLOCK_SIZE </a> </code></pre> . Sector size varies. <ul> <li> MIFARE Classic Mini are 320 bytes ( <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#SIZE_MINI"> SIZE_MINI </a> </code></pre> ), with 5 sectors each of 4 blocks. <li> MIFARE Classic 1k are 1024 bytes ( <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#SIZE_1K"> SIZE_1K </a> </code></pre> ), with 16 sectors each of 4 blocks. <li> MIFARE Classic 2k are 2048 bytes ( <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#SIZE_2K"> SIZE_2K </a> </code></pre> ), with 32 sectors each of 4 blocks. <li> MIFARE Classic 4k} are 4096 bytes ( <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#SIZE_4K"> SIZE_4K </a> </code></pre> ). The first 32 sectors contain 4 blocks and the last 8 sectors contain 16 blocks. </li> </li> </li> </li> </ul> <p> MIFARE Classic tags require authentication on a per-sector basis before any other I/O operations on that sector can be performed. There are two keys per sector, and ACL bits determine what I/O operations are allowed on that sector after authenticating with a key. and . <p> Three well-known authentication keys are defined in this class: <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#KEY_DEFAULT"> KEY_DEFAULT </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#KEY_MIFARE_APPLICATION_DIRECTORY"> KEY_MIFARE_APPLICATION_DIRECTORY </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#KEY_NFC_FORUM"> KEY_NFC_FORUM </a> </code></pre> . <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#KEY_DEFAULT"> KEY_DEFAULT </a> </code></pre> is the default factory key for MIFARE Classic. <li> <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#KEY_MIFARE_APPLICATION_DIRECTORY"> KEY_MIFARE_APPLICATION_DIRECTORY </a> </code></pre> is the well-known key for MIFARE Classic cards that have been formatted according to the MIFARE Application Directory (MAD) specification. <li> <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareClassic.html#KEY_NFC_FORUM"> KEY_NFC_FORUM </a> </code></pre> is the well-known key for MIFARE Classic cards that have been formatted according to the NXP specification for NDEF on MIFARE Classic. <p> Implementation of this class on a Android NFC device is optional. If it is not implemented, then <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareClassic.html"> MifareClassic </a> </code></pre> will never be enumerated in <pre><code> <a href="https://developer.android.com/reference/android/nfc/Tag.html#getTechList()"> getTechList() </a> </code></pre> . If it is enumerated, then all <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareClassic.html"> MifareClassic </a> </code></pre> I/O operations will be supported, and <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/Ndef.html#MIFARE_CLASSIC"> MIFARE_CLASSIC </a> </code></pre> NDEF tags will also be supported. In either case, <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcA.html"> NfcA </a> </code></pre> will also be enumerated on the tag, because all MIFARE Classic tags are also <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcA.html"> NfcA </a> </code></pre> . <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#NFC"> NFC </a> </code></pre> permission. </p>\n<pre><code>public final class MifareClassic\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/nfc/tech/MifareClassic.html
MifareUltralight	A										<section class="prog__container"><p> Provides access to MIFARE Ultralight properties and I/O operations on a <pre><code> <a href="https://developer.android.com/reference/android/nfc/Tag.html"> Tag </a> </code></pre> . <p> Acquire a <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html"> MifareUltralight </a> </code></pre> object using <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#get(android.nfc.Tag)"> get(Tag) </a> </code></pre> . <p> MIFARE Ultralight compatible tags have 4 byte pages <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#PAGE_SIZE"> PAGE_SIZE </a> </code></pre> . The primary operations on an Ultralight tag are <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#readPages(int)"> readPages(int) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html#writePage(int, byte[])"> writePage(int, byte[]) </a> </code></pre> . <p> The original MIFARE Ultralight consists of a 64 byte EEPROM. The first 4 pages are for the OTP area, manufacturer data, and locking bits. They are readable and some bits are writable. The final 12 pages are the user read/write area. For more information see the NXP data sheet MF0ICU1. <p> The MIFARE Ultralight C consists of a 192 byte EEPROM. The first 4 pages are for OTP, manufacturer data, and locking bits. The next 36 pages are the user read/write area. The next 4 pages are additional locking bits, counters and authentication configuration and are readable. The final 4 pages are for the authentication key and are not readable. For more information see the NXP data sheet MF0ICU2. <p> Implementation of this class on a Android NFC device is optional. If it is not implemented, then <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html"> MifareUltralight </a> </code></pre> will never be enumerated in <pre><code> <a href="https://developer.android.com/reference/android/nfc/Tag.html#getTechList()"> getTechList() </a> </code></pre> . If it is enumerated, then all <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html"> MifareUltralight </a> </code></pre> I/O operations will be supported. In either case, <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcA.html"> NfcA </a> </code></pre> will also be enumerated on the tag, because all MIFARE Ultralight tags are also <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcA.html"> NfcA </a> </code></pre> tags. <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#NFC"> NFC </a> </code></pre> permission. </p>\n<pre><code>public final class MifareUltralight\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html
Ndef	A										<section class="prog__container"><p> Provides access to NDEF content and operations on a <pre><code> <a href="https://developer.android.com/reference/android/nfc/Tag.html"> Tag </a> </code></pre> . <p> Acquire a <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/Ndef.html"> Ndef </a> </code></pre> object using <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/Ndef.html#get(android.nfc.Tag)"> get(Tag) </a> </code></pre> . <p> NDEF is an NFC Forum data format. The data formats are implemented in <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefMessage.html"> NdefMessage </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefRecord.html"> NdefRecord </a> </code></pre> . This class provides methods to retrieve and modify the <pre><code> <a href="https://developer.android.com/reference/android/nfc/NdefMessage.html"> NdefMessage </a> </code></pre> on a tag. <p> There are currently four NFC Forum standardized tag types that can be formatted to contain NDEF data. <ul> <li> NFC Forum Type 1 Tag ( <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/Ndef.html#NFC_FORUM_TYPE_1"> NFC_FORUM_TYPE_1 </a> </code></pre> ), such as the Innovision Topaz <li> NFC Forum Type 2 Tag ( <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/Ndef.html#NFC_FORUM_TYPE_2"> NFC_FORUM_TYPE_2 </a> </code></pre> ), such as the NXP MIFARE Ultralight <li> NFC Forum Type 3 Tag ( <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/Ndef.html#NFC_FORUM_TYPE_3"> NFC_FORUM_TYPE_3 </a> </code></pre> ), such as Sony Felica <li> NFC Forum Type 4 Tag ( <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/Ndef.html#NFC_FORUM_TYPE_4"> NFC_FORUM_TYPE_4 </a> </code></pre> ), such as NXP MIFARE Desfire </li> </li> </li> </li> </ul> It is mandatory for all Android devices with NFC to correctly enumerate <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/Ndef.html"> Ndef </a> </code></pre> on NFC Forum Tag Types 1-4, and implement all NDEF operations as defined in this class. <p> Some vendors have their own well defined specifications for storing NDEF data on tags that do not fall into the above categories. Android devices with NFC should enumerate and implement <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/Ndef.html"> Ndef </a> </code></pre> under these vendor specifications where possible, but it is not mandatory. <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/Ndef.html#getType()"> getType() </a> </code></pre> returns a String describing this specification, for example <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/Ndef.html#MIFARE_CLASSIC"> MIFARE_CLASSIC </a> </code></pre> is <pre><code> com.nxp.ndef.mifareclassic </code></pre> . <p> Android devices that support MIFARE Classic must also correctly implement <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/Ndef.html"> Ndef </a> </code></pre> on MIFARE Classic tags formatted to NDEF. <p> For guaranteed compatibility across all Android devices with NFC, it is recommended to use NFC Forum Types 1-4 in new deployments of NFC tags with NDEF payload. Vendor NDEF formats will not work on all Android devices. <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#NFC"> NFC </a> </code></pre> permission. </p>\n<pre><code>public final class Ndef\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/nfc/tech/Ndef.html
NdefFormatable	A										<section class="prog__container"><p> Provide access to NDEF format operations on a <pre><code> <a href="https://developer.android.com/reference/android/nfc/Tag.html"> Tag </a> </code></pre> . <p> Acquire a <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NdefFormatable.html"> NdefFormatable </a> </code></pre> object using <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NdefFormatable.html#get(android.nfc.Tag)"> get(Tag) </a> </code></pre> . <p> Android devices with NFC must only enumerate and implement this class for tags for which it can format to NDEF. <p> Unfortunately the procedures to convert unformated tags to NDEF formatted tags are not specified by NFC Forum, and are not generally well-known. So there is no mandatory set of tags for which all Android devices with NFC must support <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NdefFormatable.html"> NdefFormatable </a> </code></pre> . <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#NFC"> NFC </a> </code></pre> permission. </p>\n<pre><code>public final class NdefFormatable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/nfc/tech/NdefFormatable.html
NfcA	A										<section class="prog__container"><p> Provides access to NFC-A (ISO 14443-3A) properties and I/O operations on a <pre><code> <a href="https://developer.android.com/reference/android/nfc/Tag.html"> Tag </a> </code></pre> . <p> Acquire a <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcA.html"> NfcA </a> </code></pre> object using <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcA.html#get(android.nfc.Tag)"> get(Tag) </a> </code></pre> . <p> The primary NFC-A I/O operation is <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcA.html#transceive(byte[])"> transceive(byte[]) </a> </code></pre> . Applications must implement their own protocol stack on top of <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcA.html#transceive(byte[])"> transceive(byte[]) </a> </code></pre> . <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#NFC"> NFC </a> </code></pre> permission. </p>\n<pre><code>public final class NfcA\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/nfc/tech/NfcA.html
NfcB	A										<section class="prog__container"><p> Provides access to NFC-B (ISO 14443-3B) properties and I/O operations on a <pre><code> <a href="https://developer.android.com/reference/android/nfc/Tag.html"> Tag </a> </code></pre> . <p> Acquire a <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcB.html"> NfcB </a> </code></pre> object using <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcB.html#get(android.nfc.Tag)"> get(Tag) </a> </code></pre> . <p> The primary NFC-B I/O operation is <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcB.html#transceive(byte[])"> transceive(byte[]) </a> </code></pre> . Applications must implement their own protocol stack on top of <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcB.html#transceive(byte[])"> transceive(byte[]) </a> </code></pre> . <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#NFC"> NFC </a> </code></pre> permission. </p>\n<pre><code>public final class NfcB\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/nfc/tech/NfcB.html
NfcBarcode	A										<section class="prog__container"><p> Provides access to tags containing just a barcode. <p> Acquire an <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcBarcode.html"> NfcBarcode </a> </code></pre> object using <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcBarcode.html#get(android.nfc.Tag)"> get(Tag) </a> </code></pre> . </p>\n<pre><code>public final class NfcBarcode\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/nfc/tech/NfcBarcode.html
NfcF	A										<section class="prog__container"><p> Provides access to NFC-F (JIS 6319-4) properties and I/O operations on a <pre><code> <a href="https://developer.android.com/reference/android/nfc/Tag.html"> Tag </a> </code></pre> . <p> Acquire a <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcF.html"> NfcF </a> </code></pre> object using <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcF.html#get(android.nfc.Tag)"> get(Tag) </a> </code></pre> . <p> The primary NFC-F I/O operation is <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcF.html#transceive(byte[])"> transceive(byte[]) </a> </code></pre> . Applications must implement their own protocol stack on top of <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcF.html#transceive(byte[])"> transceive(byte[]) </a> </code></pre> . <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#NFC"> NFC </a> </code></pre> permission. </p>\n<pre><code>public final class NfcF\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/nfc/tech/NfcF.html
NfcV	A										<section class="prog__container"><p> Provides access to NFC-V (ISO 15693) properties and I/O operations on a <pre><code> <a href="https://developer.android.com/reference/android/nfc/Tag.html"> Tag </a> </code></pre> . <p> Acquire a <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcV.html"> NfcV </a> </code></pre> object using <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcV.html#get(android.nfc.Tag)"> get(Tag) </a> </code></pre> . <p> The primary NFC-V I/O operation is <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcV.html#transceive(byte[])"> transceive(byte[]) </a> </code></pre> . Applications must implement their own protocol stack on top of <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcV.html#transceive(byte[])"> transceive(byte[]) </a> </code></pre> . <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#NFC"> NFC </a> </code></pre> permission. </p>\n<pre><code>public final class NfcV\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/nfc/tech/NfcV.html
android.nfc.tech	A										<section class="prog__container">These classes provide access to a tag technology's features, which vary by the typeof tag that is scanned. A scanned tag can support multiple technologies, and you can findout what they are by calling</section>	https://developer.android.com/reference/android/nfc/tech/package-summary.html
TagTechnology	A										<section class="prog__container"><p> <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/TagTechnology.html"> TagTechnology </a> </code></pre> is an interface to a technology in a <pre><code> <a href="https://developer.android.com/reference/android/nfc/Tag.html"> Tag </a> </code></pre> . <p> Obtain a <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/TagTechnology.html"> TagTechnology </a> </code></pre> implementation by calling the static method <pre><code> get() </code></pre> on the implementation class. <p> NFC tags are based on a number of independently developed technologies and offer a wide range of capabilities. The <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/TagTechnology.html"> TagTechnology </a> </code></pre> implementations provide access to these different technologies and capabilities. Some sub-classes map to technology specification (for example <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcA.html"> NfcA </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/IsoDep.html"> IsoDep </a> </code></pre> , others map to pseudo-technologies or capabilities (for example <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/Ndef.html"> Ndef </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NdefFormatable.html"> NdefFormatable </a> </code></pre> ). <p> It is mandatory for all Android NFC devices to provide the following <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/TagTechnology.html"> TagTechnology </a> </code></pre> implementations. <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcA.html"> NfcA </a> </code></pre> (also known as ISO 14443-3A) <li> <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcB.html"> NfcB </a> </code></pre> (also known as ISO 14443-3B) <li> <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcF.html"> NfcF </a> </code></pre> (also known as JIS 6319-4) <li> <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcV.html"> NfcV </a> </code></pre> (also known as ISO 15693) <li> <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/IsoDep.html"> IsoDep </a> </code></pre> <li> <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/Ndef.html"> Ndef </a> </code></pre> on NFC Forum Type 1, Type 2, Type 3 or Type 4 compliant tags </li> </li> </li> </li> </li> </li> </ul> It is optional for Android NFC devices to provide the following <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/TagTechnology.html"> TagTechnology </a> </code></pre> implementations. If it is not provided, the Android device will never enumerate that class via <pre><code> <a href="https://developer.android.com/reference/android/nfc/Tag.html#getTechList()"> getTechList() </a> </code></pre> . <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareClassic.html"> MifareClassic </a> </code></pre> <li> <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/MifareUltralight.html"> MifareUltralight </a> </code></pre> <li> <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NfcBarcode.html"> NfcBarcode </a> </code></pre> <li> <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/NdefFormatable.html"> NdefFormatable </a> </code></pre> must only be enumerated on tags for which this Android device is capable of formatting. Proprietary knowledge is often required to format a tag to make it NDEF compatible. </li> </li> </li> </li> </ul> <p> <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/TagTechnology.html"> TagTechnology </a> </code></pre> implementations provide methods that fall into two classes: <em> cached getters </em> and <em> I/O operations </em> . <h4> Cached getters </h4> These methods (usually prefixed by <pre><code> get </code></pre> or <pre><code> is </code></pre> ) return properties of the tag, as determined at discovery time. These methods will never block or cause RF activity, and do not require <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/TagTechnology.html#connect()"> connect() </a> </code></pre> to have been called. They also never update, for example if a property is changed by an I/O operation with a tag then the cached getter will still return the result from tag discovery time. <h4> I/O operations </h4> I/O operations may require RF activity, and may block. They have the following semantics. <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/TagTechnology.html#connect()"> connect() </a> </code></pre> must be called before using any other I/O operation. <li> <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/TagTechnology.html#close()"> close() </a> </code></pre> must be called after completing I/O operations with a <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/TagTechnology.html"> TagTechnology </a> </code></pre> , and it will cancel all other blocked I/O operations on other threads (including <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/TagTechnology.html#connect()"> connect() </a> </code></pre> with <pre><code> <a href="https://developer.android.com/reference/java/io/IOException.html"> IOException </a> </code></pre> . <li> Only one <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/TagTechnology.html"> TagTechnology </a> </code></pre> can be connected at a time. Other calls to <pre><code> <a href="https://developer.android.com/reference/android/nfc/tech/TagTechnology.html#connect()"> connect() </a> </code></pre> will return <pre><code> <a href="https://developer.android.com/reference/java/io/IOException.html"> IOException </a> </code></pre> . <li> I/O operations may block, and should never be called on the main application thread. </li> </li> </li> </li> </ul> <p class="note"> <strong> Note: </strong> Methods that perform I/O operations require the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#NFC"> NFC </a> </code></pre> permission. </p>\n<pre><code>public interface TagTechnology\nimplements <a href="https://developer.android.com/reference/java/io/Closeable.html">Closeable</a></code></pre></section>	https://developer.android.com/reference/android/nfc/tech/TagTechnology.html
EGL14	A										<section class="prog__container"><p> EGL 1.4</p>\n<pre><code>public class EGL14\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/opengl/EGL14.html
EGLConfig	A										<section class="prog__container"><p> Wrapper class for native EGLConfig objects.</p>\n<pre><code>public class EGLConfig\n</code></pre></section>	https://developer.android.com/reference/android/opengl/EGLConfig.html
EGLContext	A										<section class="prog__container"><p> Wrapper class for native EGLContext objects.</p>\n<pre><code>public class EGLContext\n</code></pre></section>	https://developer.android.com/reference/android/opengl/EGLContext.html
EGLDisplay	A										<section class="prog__container"><p> Wrapper class for native EGLDisplay objects.</p>\n<pre><code>public class EGLDisplay\n</code></pre></section>	https://developer.android.com/reference/android/opengl/EGLDisplay.html
EGLExt	A										<section class="prog__container"><p> EGL Extensions</p>\n<pre><code>public class EGLExt\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/opengl/EGLExt.html
EGLObjectHandle	A										<section class="prog__container"><p> Base class for wrapped EGL objects.</p>\n<pre><code>public abstract class EGLObjectHandle\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/opengl/EGLObjectHandle.html
EGLSurface	A										<section class="prog__container"><p> Wrapper class for native EGLSurface objects.</p>\n<pre><code>public class EGLSurface\n</code></pre></section>	https://developer.android.com/reference/android/opengl/EGLSurface.html
ETC1	A										<section class="prog__container"><p> Methods for encoding and decoding ETC1 textures. <p> The standard for the ETC1 texture format can be found at http://www.khronos.org/registry/gles/extensions/OES/OES_compressed_ETC1_RGB8_texture.txt <p> The PKM file format is of a 16-byte header that describes the image bounds followed by the encoded ETC1 texture data. <p> </p>\n<pre><code>public class ETC1\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/opengl/ETC1.html
ETC1Util.ETC1Texture	A										<section class="prog__container"><p> A utility class encapsulating a compressed ETC1 texture.</p>\n<pre><code>public static class ETC1Util.ETC1Texture\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/opengl/ETC1Util.ETC1Texture.html
ETC1Util	A										<section class="prog__container"><p> Utility methods for using ETC1 compressed textures.</p>\n<pre><code>public class ETC1Util\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/opengl/ETC1Util.html
GLDebugHelper	A										<section class="prog__container"><p> A helper class for debugging OpenGL ES applications. Wraps the supplied GL interface with a new GL interface that adds support for error checking and logging.</p>\n<pre><code>public class GLDebugHelper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/opengl/GLDebugHelper.html
GLES10	A										<section class="prog__container"><p></p>\n<pre><code>public class GLES10\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/opengl/GLES10.html
GLES10Ext	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public class GLES10Ext\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/opengl/GLES10Ext.html
GLES11	A										<section class="prog__container"><p></p>\n<pre><code>public class GLES11\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLES11.html
GLES11Ext	A										<section class="prog__container"><p></p>\n<pre><code>public class GLES11Ext\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/opengl/GLES11Ext.html
GLES20	A										<section class="prog__container"><p> OpenGL ES 2.0</p>\n<pre><code>public class GLES20\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/opengl/GLES20.html
GLES30	A										<section class="prog__container"><p> OpenGL ES 3.0</p>\n<pre><code>public class GLES30\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLES30.html
GLES31	A										<section class="prog__container"><p> OpenGL ES 3.1</p>\n<pre><code>public class GLES31\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLES31.html
GLES31Ext.DebugProcKHR	A										<section class="prog__container"><p></p>\n<pre><code>public static interface GLES31Ext.DebugProcKHR\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLES31Ext.DebugProcKHR.html
GLES31Ext	A										<section class="prog__container"><p></p>\n<pre><code>public class GLES31Ext\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/opengl/GLES31Ext.html
GLES32.DebugProc	A										<section class="prog__container"><p></p>\n<pre><code>public static interface GLES32.DebugProc\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLES32.DebugProc.html
GLES32	A										<section class="prog__container"><p> OpenGL ES 3.2</p>\n<pre><code>public class GLES32\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLES32.html
GLException	A										<section class="prog__container"><p> An exception class for OpenGL errors.</p>\n<pre><code>public class GLException\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLException.html
GLSurfaceView.EGLConfigChooser	A										<section class="prog__container"><p> An interface for choosing an EGLConfig configuration from a list of potential configurations. <p> This interface must be implemented by clients wishing to call <pre><code> <a href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLConfigChooser(android.opengl.GLSurfaceView.EGLConfigChooser)"> setEGLConfigChooser(EGLConfigChooser) </a> </code></pre> </p>\n<pre><code>public static interface GLSurfaceView.EGLConfigChooser\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLSurfaceView.EGLConfigChooser.html
GLSurfaceView.EGLContextFactory	A										<section class="prog__container"><p> An interface for customizing the eglCreateContext and eglDestroyContext calls. <p> This interface must be implemented by clients wishing to call <pre><code> <a href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLContextFactory(android.opengl.GLSurfaceView.EGLContextFactory)"> setEGLContextFactory(EGLContextFactory) </a> </code></pre> </p>\n<pre><code>public static interface GLSurfaceView.EGLContextFactory\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLSurfaceView.EGLContextFactory.html
GLSurfaceView.EGLWindowSurfaceFactory	A										<section class="prog__container"><p> An interface for customizing the eglCreateWindowSurface and eglDestroySurface calls. <p> This interface must be implemented by clients wishing to call <pre><code> <a href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView.EGLWindowSurfaceFactory)"> setEGLWindowSurfaceFactory(EGLWindowSurfaceFactory) </a> </code></pre> </p>\n<pre><code>public static interface GLSurfaceView.EGLWindowSurfaceFactory\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLSurfaceView.EGLWindowSurfaceFactory.html
GLSurfaceView.GLWrapper	A										<section class="prog__container"><p> An interface used to wrap a GL interface. <p> Typically used for implementing debugging and tracing on top of the default GL interface. You would typically use this by creating your own class that implemented all the GL methods by delegating to another GL instance. Then you could add your own behavior before or after calling the delegate. All the GLWrapper would do was instantiate and return the wrapper GL instance: <pre class="prettyprint"> class MyGLWrapper implements GLWrapper { GL wrap(GL gl) { return new MyGLImplementation(gl); } static class MyGLImplementation implements GL,GL10,GL11,... { ... } } </pre> </p>\n<pre><code>public static interface GLSurfaceView.GLWrapper\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLSurfaceView.GLWrapper.html
GLSurfaceView	A										<section class="prog__container"><p> An implementation of SurfaceView that uses the dedicated surface for displaying OpenGL rendering. <p> A GLSurfaceView provides the following features: <p> <ul> <li> Manages a surface, which is a special piece of memory that can be composited into the Android view system. <li> Manages an EGL display, which enables OpenGL to render into a surface. <li> Accepts a user-provided Renderer object that does the actual rendering. <li> Renders on a dedicated thread to decouple rendering performance from the UI thread. <li> Supports both on-demand and continuous rendering. <li> Optionally wraps, traces, and/or error-checks the renderer's OpenGL calls. </li> </li> </li> </li> </li> </li> </ul> </p>\n<pre><code>public class GLSurfaceView\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLSurfaceView.html
GLSurfaceView.Renderer	A										<section class="prog__container"><p> A generic renderer interface. <p> The renderer is responsible for making OpenGL calls to render a frame. <p> GLSurfaceView clients typically create their own classes that implement this interface, and then call <pre><code> <a href="https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setRenderer(android.opengl.GLSurfaceView.Renderer)"> setRenderer(GLSurfaceView.Renderer) </a> </code></pre> to register the renderer with the GLSurfaceView. <p> </p>\n<pre><code>public static interface GLSurfaceView.Renderer\n</code></pre></section>	https://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html
GLU	A										<section class="prog__container"><p> A set of GL utilities inspired by the OpenGL Utility Toolkit.</p>\n<pre><code>public class GLU\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/opengl/GLU.html
GLUtils	A										<section class="prog__container"><p> Utility class to help bridging OpenGL ES and Android APIs.</p>\n<pre><code>public final class GLUtils\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/opengl/GLUtils.html
Matrix	A										<section class="prog__container"><p> Matrix math utilities. These methods operate on OpenGL ES format matrices and vectors stored in float arrays. <p> Matrices are 4 x 4 column-vector matrices stored in column-major order: <pre> m[offset + 0] m[offset + 4] m[offset + 8] m[offset + 12] m[offset + 1] m[offset + 5] m[offset + 9] m[offset + 13] m[offset + 2] m[offset + 6] m[offset + 10] m[offset + 14] m[offset + 3] m[offset + 7] m[offset + 11] m[offset + 15]</pre> Vectors are 4 x 1 column vectors stored in order: <pre> v[offset + 0] v[offset + 1] v[offset + 2] v[offset + 3]</pre> </p>\n<pre><code>public class Matrix\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/opengl/Matrix.html
android.opengl	A										<section class="prog__container">Provides an OpenGL ES static interface and utilities.</section>	https://developer.android.com/reference/android/opengl/package-summary.html
Visibility	A										<section class="prog__container"><p> A collection of utility methods for computing the visibility of triangle meshes.</p>\n<pre><code>public class Visibility\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/opengl/Visibility.html
AsyncTask	A										<section class="prog__container"><p> <p> AsyncTask enables proper and easy use of the UI thread. This class allows you to perform background operations and publish results on the UI thread without having to manipulate threads and/or handlers. </p>\n<pre><code>public abstract class AsyncTask\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/AsyncTask.html
AsyncTask.Status	A										<section class="prog__container"><p> Indicates the current status of the task. Each status will be set only once during the lifetime of a task.</p>\n<pre><code>public static final enum AsyncTask.Status\n</code></pre></section>	https://developer.android.com/reference/android/os/AsyncTask.Status.html
BadParcelableException	A										<section class="prog__container"><p> Exception thrown when a <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html"> Parcelable </a> </code></pre> is malformed or otherwise invalid. <p> This is typically encountered when a custom <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html"> Parcelable </a> </code></pre> object is passed to another process that doesn't have the same <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html"> Parcelable </a> </code></pre> class in its <pre><code> <a href="https://developer.android.com/reference/java/lang/ClassLoader.html"> ClassLoader </a> </code></pre> . </p>\n<pre><code>public class BadParcelableException\n</code></pre></section>	https://developer.android.com/reference/android/os/BadParcelableException.html
BaseBundle	A										<section class="prog__container"><p> A mapping from String keys to values of various types. In most cases, you should work directly with either the <pre><code> <a href="https://developer.android.com/reference/android/os/Bundle.html"> Bundle </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/os/PersistableBundle.html"> PersistableBundle </a> </code></pre> subclass.</p>\n<pre><code>public class BaseBundle\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/BaseBundle.html
BatteryManager	A										<section class="prog__container"><p> The BatteryManager class contains strings and constants used for values in the <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_BATTERY_CHANGED"> ACTION_BATTERY_CHANGED </a> </code></pre> Intent, and provides a method for querying battery and charging properties.</p>\n<pre><code>public class BatteryManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/BatteryManager.html
Binder	A										<section class="prog__container"><p> Base class for a remotable object, the core part of a lightweight remote procedure call mechanism defined by <pre><code> <a href="https://developer.android.com/reference/android/os/IBinder.html"> IBinder </a> </code></pre> . This class is an implementation of IBinder that provides standard local implementation of such an object. <p> Most developers will not implement this class directly, instead using the <a href="https://developer.android.com/guide/components/aidl.html"> aidl </a> tool to describe the desired interface, having it generate the appropriate Binder subclass. You can, however, derive directly from Binder to implement your own custom RPC protocol or simply instantiate a raw Binder object directly to use as a token that can be shared across processes. <p> This class is just a basic IPC primitive; it has no impact on an application's lifecycle, and is valid only as long as the process that created it continues to run. To use this correctly, you must be doing so within the context of a top-level application component (a <pre><code> <a href="https://developer.android.com/reference/android/app/Service.html"> Service </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> , or <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProvider.html"> ContentProvider </a> </code></pre> ) that lets the system know your process should remain running. </p>\n<pre><code>public class Binder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/Binder.html
Build	A										<section class="prog__container"><p> Information about the current build, extracted from system properties.</p>\n<pre><code>public class Build\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/Build.html
Build.VERSION	A										<section class="prog__container"><p> Various version strings.</p>\n<pre><code>public static class Build.VERSION\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/Build.VERSION.html
Build.VERSION_CODES	A										<section class="prog__container"><p> Enumeration of the currently known SDK version codes. These are the values that can be found in <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION.html#SDK"> SDK </a> </code></pre> . Version numbers increment monotonically with each official platform release.</p>\n<pre><code>public static class Build.VERSION_CODES\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/Build.VERSION_CODES.html
Bundle	A										<section class="prog__container"><p> A mapping from String keys to various <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html"> Parcelable </a> </code></pre> values.</p>\n<pre><code>public final class Bundle\n</code></pre></section>	https://developer.android.com/reference/android/os/Bundle.html
CancellationSignal	A										<section class="prog__container"><p> Provides the ability to cancel an operation in progress.</p>\n<pre><code>public final class CancellationSignal\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/CancellationSignal.html
CancellationSignal.OnCancelListener	A										<section class="prog__container"><p> Listens for cancellation.</p>\n<pre><code>public static interface CancellationSignal.OnCancelListener\n</code></pre></section>	https://developer.android.com/reference/android/os/CancellationSignal.OnCancelListener.html
ConditionVariable	A										<section class="prog__container"><p> Class that implements the condition variable locking paradigm. <p> This differs from the built-in java.lang.Object wait() and notify() in that this class contains the condition to wait on itself. That means open(), close() and block() are sticky. If open() is called before block(), block() will not block, and instead return immediately. <p> This class uses itself as the object to wait on, so if you wait() or notify() on a ConditionVariable, the results are undefined. </p>\n<pre><code>public class ConditionVariable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/ConditionVariable.html
CountDownTimer	A										<section class="prog__container"><p> Schedule a countdown until a time in the future, with regular notifications on intervals along the way. Example of showing a 30 second countdown in a text field: <pre class="prettyprint"> new CountDownTimer(30000, 1000) { public void onTick(long millisUntilFinished) { mTextField.setText("seconds remaining: " + millisUntilFinished / 1000); } public void onFinish() { mTextField.setText("done!"); } }.start(); </pre> The calls to <pre><code> <a href="https://developer.android.com/reference/android/os/CountDownTimer.html#onTick(long)"> onTick(long) </a> </code></pre> are synchronized to this object so that one call to <pre><code> <a href="https://developer.android.com/reference/android/os/CountDownTimer.html#onTick(long)"> onTick(long) </a> </code></pre> won't ever occur before the previous callback is complete. This is only relevant when the implementation of <pre><code> <a href="https://developer.android.com/reference/android/os/CountDownTimer.html#onTick(long)"> onTick(long) </a> </code></pre> takes an amount of time to execute that is significant compared to the countdown interval.</p>\n<pre><code>public abstract class CountDownTimer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/CountDownTimer.html
CpuUsageInfo	A										<section class="prog__container"><p> CPU usage information per core.</p>\n<pre><code>public final class CpuUsageInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/CpuUsageInfo.html
DeadObjectException	A										<section class="prog__container"><p> The object you are calling has died, because its hosting process no longer exists.</p>\n<pre><code>public class DeadObjectException\n</code></pre></section>	https://developer.android.com/reference/android/os/DeadObjectException.html
DeadSystemException	A										<section class="prog__container"><p> The core Android system has died and is going through a runtime restart. All running apps will be promptly killed.</p>\n<pre><code>public class DeadSystemException\n</code></pre></section>	https://developer.android.com/reference/android/os/DeadSystemException.html
Debug	A										<section class="prog__container"><p> Provides various debugging methods for Android applications, including tracing and allocation counts. <p> <strong> Logging Trace Files </strong> </p>\n<pre><code>public final class Debug\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/Debug.html
Debug.InstructionCount	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 23. </strong> <br/> Instruction counting is no longer supported. </p>\n<pre><code>public static class Debug.InstructionCount\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/Debug.InstructionCount.html
Debug.MemoryInfo	A										<section class="prog__container"><p> This class is used to retrieved various statistics about the memory mappings for this process. The returned info is broken down by dalvik, native, and other. All results are in kB.</p>\n<pre><code>public static class Debug.MemoryInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/Debug.MemoryInfo.html
DropBoxManager.Entry	A										<section class="prog__container"><p> A single entry retrieved from the drop box. This may include a reference to a stream, so you must call <pre><code> <a href="https://developer.android.com/reference/android/os/DropBoxManager.Entry.html#close()"> close() </a> </code></pre> when you are done using it.</p>\n<pre><code>public static class DropBoxManager.Entry\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/DropBoxManager.Entry.html
DropBoxManager	A										<section class="prog__container"><p> Enqueues chunks of data (from various sources -- application crashes, kernel log records, etc.). The queue is size bounded and will drop old data if the enqueued data exceeds the maximum size. You can think of this as a persistent, system-wide, blob-oriented "logcat". <p> You can obtain an instance of this class by calling <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.Class&lt;T&gt;)"> getSystemService(Class <t> ) </t> </a> </code></pre> with <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#DROPBOX_SERVICE"> DROPBOX_SERVICE </a> </code></pre> . <p> DropBoxManager entries are not sent anywhere directly, but other system services and debugging tools may scan and upload entries for processing. </p>\n<pre><code>public class DropBoxManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/DropBoxManager.html
Environment	A										<section class="prog__container"><p> Provides access to environment variables.</p>\n<pre><code>public class Environment\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/Environment.html
FileObserver	A										<section class="prog__container"><p> Monitors files (using <a href="http://en.wikipedia.org/wiki/Inotify"> inotify </a> ) to fire an event after files are accessed or changed by by any process on the device (including this one). FileObserver is an abstract class; subclasses must implement the event handler <pre><code> <a href="https://developer.android.com/reference/android/os/FileObserver.html#onEvent(int, java.lang.String)"> onEvent(int, String) </a> </code></pre> . <p> Each FileObserver instance monitors a single file or directory. If a directory is monitored, events will be triggered for all files and subdirectories inside the monitored directory. </p>\n<pre><code>public abstract class FileObserver\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/FileObserver.html
FileUriExposedException	A										<section class="prog__container"><p> The exception that is thrown when an application exposes a <pre><code> file:// </code></pre> <pre><code> <a href="https://developer.android.com/reference/android/net/Uri.html"> Uri </a> </code></pre> to another app. <p> This exposure is discouraged since the receiving app may not have access to the shared path. For example, the receiving app may not have requested the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE"> READ_EXTERNAL_STORAGE </a> </code></pre> runtime permission, or the platform may be sharing the <pre><code> <a href="https://developer.android.com/reference/android/net/Uri.html"> Uri </a> </code></pre> across user profile boundaries. <p> Instead, apps should use <pre><code> content:// </code></pre> Uris so the platform can extend temporary permission for the receiving app to access the resource. <p> This is only thrown for applications targeting <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#N"> N </a> </code></pre> or higher. Applications targeting earlier SDK versions are allowed to share <pre><code> file:// </code></pre> <pre><code> <a href="https://developer.android.com/reference/android/net/Uri.html"> Uri </a> </code></pre> , but it's strongly discouraged. </p>\n<pre><code>public class FileUriExposedException\n</code></pre></section>	https://developer.android.com/reference/android/os/FileUriExposedException.html
Handler.Callback	A										<section class="prog__container"><p> Callback interface you can use when instantiating a Handler to avoid having to implement your own subclass of Handler.</p>\n<pre><code>public static interface Handler.Callback\n</code></pre></section>	https://developer.android.com/reference/android/os/Handler.Callback.html
Handler	A										<section class="prog__container"><p> A Handler allows you to send and process <pre><code> <a href="https://developer.android.com/reference/android/os/Message.html"> Message </a> </code></pre> and Runnable objects associated with a thread's <pre><code> <a href="https://developer.android.com/reference/android/os/MessageQueue.html"> MessageQueue </a> </code></pre> . Each Handler instance is associated with a single thread and that thread's message queue. When you create a new Handler, it is bound to the thread / message queue of the thread that is creating it -- from that point on, it will deliver messages and runnables to that message queue and execute them as they come out of the message queue. <p> There are two main uses for a Handler: (1) to schedule messages and runnables to be executed as some point in the future; and (2) to enqueue an action to be performed on a different thread than your own. <p> Scheduling messages is accomplished with the <pre><code> <a href="https://developer.android.com/reference/android/os/Handler.html#post(java.lang.Runnable)"> post(Runnable) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/os/Handler.html#postAtTime(java.lang.Runnable, long)"> postAtTime(Runnable, long) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/os/Handler.html#postDelayed(java.lang.Runnable, long)"> postDelayed(Runnable, long) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/os/Handler.html#sendEmptyMessage(int)"> sendEmptyMessage(int) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/os/Handler.html#sendMessage(android.os.Message)"> sendMessage(Message) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/os/Handler.html#sendMessageAtTime(android.os.Message, long)"> sendMessageAtTime(Message, long) </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/os/Handler.html#sendMessageDelayed(android.os.Message, long)"> sendMessageDelayed(Message, long) </a> </code></pre> methods. The <em> post </em> versions allow you to enqueue Runnable objects to be called by the message queue when they are received; the <em> sendMessage </em> versions allow you to enqueue a <pre><code> <a href="https://developer.android.com/reference/android/os/Message.html"> Message </a> </code></pre> object containing a bundle of data that will be processed by the Handler's <pre><code> <a href="https://developer.android.com/reference/android/os/Handler.html#handleMessage(android.os.Message)"> handleMessage(Message) </a> </code></pre> method (requiring that you implement a subclass of Handler). <p> When posting or sending to a Handler, you can either allow the item to be processed as soon as the message queue is ready to do so, or specify a delay before it gets processed or absolute time for it to be processed. The latter two allow you to implement timeouts, ticks, and other timing-based behavior. <p> When a process is created for your application, its main thread is dedicated to running a message queue that takes care of managing the top-level application objects (activities, broadcast receivers, etc) and any windows they create. You can create your own threads, and communicate back with the main application thread through a Handler. This is done by calling the same <em> post </em> or <em> sendMessage </em> methods as before, but from your new thread. The given Runnable or Message will then be scheduled in the Handler's message queue and processed when appropriate. </p>\n<pre><code>public class Handler\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/Handler.html
HandlerThread	A										<section class="prog__container"><p> Handy class for starting a new thread that has a looper. The looper can then be used to create handler classes. Note that start() must still be called.</p>\n<pre><code>public class HandlerThread\n</code></pre></section>	https://developer.android.com/reference/android/os/HandlerThread.html
HardwarePropertiesManager	A										<section class="prog__container"><p> The HardwarePropertiesManager class provides a mechanism of accessing hardware state of a device: CPU, GPU and battery temperatures, CPU usage per core, fan speed, etc.</p>\n<pre><code>public class HardwarePropertiesManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/HardwarePropertiesManager.html
IBinder.DeathRecipient	A										<section class="prog__container"><p> Interface for receiving a callback when the process hosting an IBinder has gone away.</p>\n<pre><code>public static interface IBinder.DeathRecipient\n</code></pre></section>	https://developer.android.com/reference/android/os/IBinder.DeathRecipient.html
IBinder	A										<section class="prog__container"><p> Base interface for a remotable object, the core part of a lightweight remote procedure call mechanism designed for high performance when performing in-process and cross-process calls. This interface describes the abstract protocol for interacting with a remotable object. Do not implement this interface directly, instead extend from <pre><code> <a href="https://developer.android.com/reference/android/os/Binder.html"> Binder </a> </code></pre> . <p> The key IBinder API is <pre><code> <a href="https://developer.android.com/reference/android/os/IBinder.html#transact(int, android.os.Parcel, android.os.Parcel, int)"> transact() </a> </code></pre> matched by <pre><code> <a href="https://developer.android.com/reference/android/os/Binder.html#onTransact(int, android.os.Parcel, android.os.Parcel, int)"> Binder.onTransact() </a> </code></pre> . These methods allow you to send a call to an IBinder object and receive a call coming in to a Binder object, respectively. This transaction API is synchronous, such that a call to <pre><code> <a href="https://developer.android.com/reference/android/os/IBinder.html#transact(int, android.os.Parcel, android.os.Parcel, int)"> transact() </a> </code></pre> does not return until the target has returned from <pre><code> <a href="https://developer.android.com/reference/android/os/Binder.html#onTransact(int, android.os.Parcel, android.os.Parcel, int)"> Binder.onTransact() </a> </code></pre> ; this is the expected behavior when calling an object that exists in the local process, and the underlying inter-process communication (IPC) mechanism ensures that these same semantics apply when going across processes. <p> The data sent through transact() is a <pre><code> <a href="https://developer.android.com/reference/android/os/Parcel.html"> Parcel </a> </code></pre> , a generic buffer of data that also maintains some meta-data about its contents. The meta data is used to manage IBinder object references in the buffer, so that those references can be maintained as the buffer moves across processes. This mechanism ensures that when an IBinder is written into a Parcel and sent to another process, if that other process sends a reference to that same IBinder back to the original process, then the original process will receive the same IBinder object back. These semantics allow IBinder/Binder objects to be used as a unique identity (to serve as a token or for other purposes) that can be managed across processes. <p> The system maintains a pool of transaction threads in each process that it runs in. These threads are used to dispatch all IPCs coming in from other processes. For example, when an IPC is made from process A to process B, the calling thread in A blocks in transact() as it sends the transaction to process B. The next available pool thread in B receives the incoming transaction, calls Binder.onTransact() on the target object, and replies with the result Parcel. Upon receiving its result, the thread in process A returns to allow its execution to continue. In effect, other processes appear to use as additional threads that you did not create executing in your own process. <p> The Binder system also supports recursion across processes. For example if process A performs a transaction to process B, and process B while handling that transaction calls transact() on an IBinder that is implemented in A, then the thread in A that is currently waiting for the original transaction to finish will take care of calling Binder.onTransact() on the object being called by B. This ensures that the recursion semantics when calling remote binder object are the same as when calling local objects. <p> When working with remote objects, you often want to find out when they are no longer valid. There are three ways this can be determined: <ul> <li> The <pre><code> <a href="https://developer.android.com/reference/android/os/IBinder.html#transact(int, android.os.Parcel, android.os.Parcel, int)"> transact() </a> </code></pre> method will throw a <pre><code> <a href="https://developer.android.com/reference/android/os/RemoteException.html"> RemoteException </a> </code></pre> exception if you try to call it on an IBinder whose process no longer exists. <li> The <pre><code> <a href="https://developer.android.com/reference/android/os/IBinder.html#pingBinder()"> pingBinder() </a> </code></pre> method can be called, and will return false if the remote process no longer exists. <li> The <pre><code> <a href="https://developer.android.com/reference/android/os/IBinder.html#linkToDeath(android.os.IBinder.DeathRecipient, int)"> linkToDeath() </a> </code></pre> method can be used to register a <pre><code> <a href="https://developer.android.com/reference/android/os/IBinder.DeathRecipient.html"> IBinder.DeathRecipient </a> </code></pre> with the IBinder, which will be called when its containing process goes away. </li> </li> </li> </ul> </p>\n<pre><code>public interface IBinder\n</code></pre></section>	https://developer.android.com/reference/android/os/IBinder.html
IInterface	A										<section class="prog__container"><p> Base class for Binder interfaces. When defining a new interface, you must derive it from IInterface.</p>\n<pre><code>public interface IInterface\n</code></pre></section>	https://developer.android.com/reference/android/os/IInterface.html
LocaleList	A										<section class="prog__container"><p> LocaleList is an immutable list of Locales, typically used to keep an ordered list of user preferences for locales.</p>\n<pre><code>public final class LocaleList\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/LocaleList.html
Looper	A										<section class="prog__container"><p> Class used to run a message loop for a thread. Threads by default do not have a message loop associated with them; to create one, call <pre><code> <a href="https://developer.android.com/reference/android/os/Looper.html#prepare()"> prepare() </a> </code></pre> in the thread that is to run the loop, and then <pre><code> <a href="https://developer.android.com/reference/android/os/Looper.html#loop()"> loop() </a> </code></pre> to have it process messages until the loop is stopped. <p> Most interaction with a message loop is through the <pre><code> <a href="https://developer.android.com/reference/android/os/Handler.html"> Handler </a> </code></pre> class. <p> This is a typical example of the implementation of a Looper thread, using the separation of <pre><code> <a href="https://developer.android.com/reference/android/os/Looper.html#prepare()"> prepare() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/os/Looper.html#loop()"> loop() </a> </code></pre> to create an initial Handler to communicate with the Looper. <pre> class LooperThread extends Thread { public Handler mHandler; public void run() { Looper.prepare(); mHandler = new Handler() { public void handleMessage(Message msg) { // process incoming messages here } }; Looper.loop(); } }</pre> </p>\n<pre><code>public final class Looper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/Looper.html
MemoryFile	A										<section class="prog__container"><p> MemoryFile is a wrapper for the Linux ashmem driver. MemoryFiles are backed by shared memory, which can be optionally set to be purgeable. Purgeable files may have their contents reclaimed by the kernel in low memory conditions (only if allowPurging is set to true). After a file is purged, attempts to read or write the file will cause an IOException to be thrown.</p>\n<pre><code>public class MemoryFile\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/MemoryFile.html
Message	A										<section class="prog__container"><p> Defines a message containing a description and arbitrary data object that can be sent to a <pre><code> <a href="https://developer.android.com/reference/android/os/Handler.html"> Handler </a> </code></pre> . This object contains two extra int fields and an extra object field that allow you to not do allocations in many cases. <p class="note"> While the constructor of Message is public, the best way to get one of these is to call <pre><code> <a href="https://developer.android.com/reference/android/os/Message.html#obtain()"> Message.obtain() </a> </code></pre> or one of the <pre><code> <a href="https://developer.android.com/reference/android/os/Handler.html#obtainMessage()"> Handler.obtainMessage() </a> </code></pre> methods, which will pull them from a pool of recycled objects. </p>\n<pre><code>public final class Message\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/Message.html
MessageQueue	A										<section class="prog__container"><p> Low-level class holding the list of messages to be dispatched by a <pre><code> <a href="https://developer.android.com/reference/android/os/Looper.html"> Looper </a> </code></pre> . Messages are not added directly to a MessageQueue, but rather through <pre><code> <a href="https://developer.android.com/reference/android/os/Handler.html"> Handler </a> </code></pre> objects associated with the Looper. <p> You can retrieve the MessageQueue for the current thread with <pre><code> <a href="https://developer.android.com/reference/android/os/Looper.html#myQueue()"> Looper.myQueue() </a> </code></pre> . </p>\n<pre><code>public final class MessageQueue\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/MessageQueue.html
MessageQueue.IdleHandler	A										<section class="prog__container"><p> Callback interface for discovering when a thread is going to block waiting for more messages.</p>\n<pre><code>public static interface MessageQueue.IdleHandler\n</code></pre></section>	https://developer.android.com/reference/android/os/MessageQueue.IdleHandler.html
MessageQueue.OnFileDescriptorEventListener	A										<section class="prog__container"><p> A listener which is invoked when file descriptor related events occur.</p>\n<pre><code>public static interface MessageQueue.OnFileDescriptorEventListener\n</code></pre></section>	https://developer.android.com/reference/android/os/MessageQueue.OnFileDescriptorEventListener.html
Messenger	A										<section class="prog__container"><p> Reference to a Handler, which others can use to send messages to it. This allows for the implementation of message-based communication across processes, by creating a Messenger pointing to a Handler in one process, and handing that Messenger to another process. <p> Note: the implementation underneath is just a simple wrapper around a <pre><code> <a href="https://developer.android.com/reference/android/os/Binder.html"> Binder </a> </code></pre> that is used to perform the communication. This means semantically you should treat it as such: this class does not impact process lifecycle management (you must be using some higher-level component to tell the system that your process needs to continue running), the connection will break if your process goes away for any reason, etc. </p>\n<pre><code>public final class Messenger\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/Messenger.html
NetworkOnMainThreadException	A										<section class="prog__container"><p> The exception that is thrown when an application attempts to perform a networking operation on its main thread. <p> This is only thrown for applications targeting the Honeycomb SDK or higher. Applications targeting earlier SDK versions are allowed to do networking on their main event loop threads, but it's heavily discouraged. See the document <a href="https://developer.android.com/guide/practices/design/responsiveness.html"> Designing for Responsiveness </a> . <p> Also see <pre><code> <a href="https://developer.android.com/reference/android/os/StrictMode.html"> StrictMode </a> </code></pre> . </p>\n<pre><code>public class NetworkOnMainThreadException\n</code></pre></section>	https://developer.android.com/reference/android/os/NetworkOnMainThreadException.html
OperationCanceledException	A										<section class="prog__container"><p> An exception type that is thrown when an operation in progress is canceled.</p>\n<pre><code>public class OperationCanceledException\n</code></pre></section>	https://developer.android.com/reference/android/os/OperationCanceledException.html
android.os	A										<section class="prog__container">AsyncTask enables proper and easy use of the UI thread. </section>	https://developer.android.com/reference/android/os/package-summary.html
Parcel	A										<section class="prog__container"><p> Container for a message (data and object references) that can be sent through an IBinder. A Parcel can contain both flattened data that will be unflattened on the other side of the IPC (using the various methods here for writing specific types, or the general <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html"> Parcelable </a> </code></pre> interface), and references to live <pre><code> <a href="https://developer.android.com/reference/android/os/IBinder.html"> IBinder </a> </code></pre> objects that will result in the other side receiving a proxy IBinder connected with the original IBinder in the Parcel. <p class="note"> Parcel is <strong> not </strong> a general-purpose serialization mechanism. This class (and the corresponding <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html"> Parcelable </a> </code></pre> API for placing arbitrary objects into a Parcel) is designed as a high-performance IPC transport. As such, it is not appropriate to place any Parcel data in to persistent storage: changes in the underlying implementation of any of the data in the Parcel can render older data unreadable. </p>\n<pre><code>public final class Parcel\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/Parcel.html
Parcelable.ClassLoaderCreator	A										<section class="prog__container"><p> Specialization of <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.Creator.html"> Parcelable.Creator </a> </code></pre> that allows you to receive the ClassLoader the object is being created in.</p>\n<pre><code>public static interface Parcelable.ClassLoaderCreator\nimplements <a href="https://developer.android.com/reference/android/os/Parcelable.Creator.html">Creator</a>&lt;T&gt;</code></pre></section>	https://developer.android.com/reference/android/os/Parcelable.ClassLoaderCreator.html
Parcelable.Creator	A										<section class="prog__container"><p> Interface that must be implemented and provided as a public CREATOR field that generates instances of your Parcelable class from a Parcel.</p>\n<pre><code>public static interface Parcelable.Creator\n</code></pre></section>	https://developer.android.com/reference/android/os/Parcelable.Creator.html
Parcelable	A										<section class="prog__container"><p> Interface for classes whose instances can be written to and restored from a <pre><code> <a href="https://developer.android.com/reference/android/os/Parcel.html"> Parcel </a> </code></pre> . Classes implementing the Parcelable interface must also have a non-null static field called <pre><code> CREATOR </code></pre> of a type that implements the <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.Creator.html"> Parcelable.Creator </a> </code></pre> interface. <p> A typical implementation of Parcelable is: </p>\n<pre><code>public interface Parcelable\n</code></pre></section>	https://developer.android.com/reference/android/os/Parcelable.html
ParcelFileDescriptor.AutoCloseInputStream	A										<section class="prog__container"><p> An InputStream you can create on a ParcelFileDescriptor, which will take care of calling <pre><code> <a href="https://developer.android.com/reference/android/os/ParcelFileDescriptor.html#close()"> ParcelFileDescriptor.close() </a> </code></pre> for you when the stream is closed.</p>\n<pre><code>public static class ParcelFileDescriptor.AutoCloseInputStream\n</code></pre></section>	https://developer.android.com/reference/android/os/ParcelFileDescriptor.AutoCloseInputStream.html
ParcelFileDescriptor.AutoCloseOutputStream	A										<section class="prog__container"><p> An OutputStream you can create on a ParcelFileDescriptor, which will take care of calling <pre><code> <a href="https://developer.android.com/reference/android/os/ParcelFileDescriptor.html#close()"> ParcelFileDescriptor.close() </a> </code></pre> for you when the stream is closed.</p>\n<pre><code>public static class ParcelFileDescriptor.AutoCloseOutputStream\n</code></pre></section>	https://developer.android.com/reference/android/os/ParcelFileDescriptor.AutoCloseOutputStream.html
ParcelFileDescriptor.FileDescriptorDetachedException	A										<section class="prog__container"><p> Exception that indicates that the file descriptor was detached.</p>\n<pre><code>public static class ParcelFileDescriptor.FileDescriptorDetachedException\n</code></pre></section>	https://developer.android.com/reference/android/os/ParcelFileDescriptor.FileDescriptorDetachedException.html
ParcelFileDescriptor	A										<section class="prog__container"><p> The FileDescriptor returned by <pre><code> <a href="https://developer.android.com/reference/android/os/Parcel.html#readFileDescriptor()"> readFileDescriptor() </a> </code></pre> , allowing you to close it when done with it.</p>\n<pre><code>public class ParcelFileDescriptor\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/ParcelFileDescriptor.html
ParcelFileDescriptor.OnCloseListener	A										<section class="prog__container"><p> Callback indicating that a ParcelFileDescriptor has been closed.</p>\n<pre><code>public static interface ParcelFileDescriptor.OnCloseListener\n</code></pre></section>	https://developer.android.com/reference/android/os/ParcelFileDescriptor.OnCloseListener.html
ParcelFormatException	A										<section class="prog__container"><p> The contents of a Parcel (usually during unmarshalling) does not contain the expected data.</p>\n<pre><code>public class ParcelFormatException\n</code></pre></section>	https://developer.android.com/reference/android/os/ParcelFormatException.html
ParcelUuid	A										<section class="prog__container"><p> This class is a Parcelable wrapper around <pre><code> <a href="https://developer.android.com/reference/java/util/UUID.html"> UUID </a> </code></pre> which is an immutable representation of a 128-bit universally unique identifier.</p>\n<pre><code>public final class ParcelUuid\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/ParcelUuid.html
PatternMatcher	A										<section class="prog__container"><p> A simple pattern matcher, which is safe to use on untrusted data: it does not provide full reg-exp support, only simple globbing that can not be used maliciously.</p>\n<pre><code>public class PatternMatcher\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/PatternMatcher.html
PersistableBundle	A										<section class="prog__container"><p> A mapping from String keys to values of various types. The set of types supported by this class is purposefully restricted to simple objects that can safely be persisted to and restored from disk.</p>\n<pre><code>public final class PersistableBundle\n</code></pre></section>	https://developer.android.com/reference/android/os/PersistableBundle.html
PowerManager	A										<section class="prog__container"><p> This class gives you control of the power state of the device. <p> <b> Device battery life will be significantly affected by the use of this API. </b> Do not acquire <pre><code> <a href="https://developer.android.com/reference/android/os/PowerManager.WakeLock.html"> PowerManager.WakeLock </a> </code></pre> s unless you really need them, use the minimum levels possible, and be sure to release them as soon as possible. </p>\n<pre><code>public final class PowerManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/PowerManager.html
PowerManager.WakeLock	A										<section class="prog__container"><p> A wake lock is a mechanism to indicate that your application needs to have the device stay on. <p> Any application using a WakeLock must request the <pre><code> android.permission.WAKE_LOCK </code></pre> permission in an <pre><code> &lt;uses-permission&gt; </code></pre> element of the application's manifest. Obtain a wake lock by calling <pre><code> <a href="https://developer.android.com/reference/android/os/PowerManager.html#newWakeLock(int, java.lang.String)"> newWakeLock(int, String) </a> </code></pre> . </p>\n<pre><code>public final class PowerManager.WakeLock\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/PowerManager.WakeLock.html
Process	A										<section class="prog__container"><p> Tools for managing OS processes.</p>\n<pre><code>public class Process\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/Process.html
RecoverySystem	A										<section class="prog__container"><p> RecoverySystem contains methods for interacting with the Android recovery system (the separate partition that can be used to install system updates, wipe user data, etc.)</p>\n<pre><code>public class RecoverySystem\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/RecoverySystem.html
RecoverySystem.ProgressListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked regularly as verification proceeds.</p>\n<pre><code>public static interface RecoverySystem.ProgressListener\n</code></pre></section>	https://developer.android.com/reference/android/os/RecoverySystem.ProgressListener.html
RemoteCallbackList	A										<section class="prog__container"><p> Takes care of the grunt work of maintaining a list of remote interfaces, typically for the use of performing callbacks from a <pre><code> <a href="https://developer.android.com/reference/android/app/Service.html"> Service </a> </code></pre> to its clients. In particular, this: <ul> <li> Keeps track of a set of registered <pre><code> <a href="https://developer.android.com/reference/android/os/IInterface.html"> IInterface </a> </code></pre> callbacks, taking care to identify them through their underlying unique <pre><code> <a href="https://developer.android.com/reference/android/os/IBinder.html"> IBinder </a> </code></pre> (by calling <pre><code> <a href="https://developer.android.com/reference/android/os/IInterface.html#asBinder()"> IInterface.asBinder() </a> </code></pre> . <li> Attaches a <pre><code> <a href="https://developer.android.com/reference/android/os/IBinder.DeathRecipient.html"> IBinder.DeathRecipient </a> </code></pre> to each registered interface, so that it can be cleaned out of the list if its process goes away. <li> Performs locking of the underlying list of interfaces to deal with multithreaded incoming calls, and a thread-safe way to iterate over a snapshot of the list without holding its lock. </li> </li> </li> </ul> <p> To use this class, simply create a single instance along with your service, and call its <pre><code> <a href="https://developer.android.com/reference/android/os/RemoteCallbackList.html#register(E)"> register(E) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/os/RemoteCallbackList.html#unregister(E)"> unregister(E) </a> </code></pre> methods as client register and unregister with your service. To call back on to the registered clients, use <pre><code> <a href="https://developer.android.com/reference/android/os/RemoteCallbackList.html#beginBroadcast()"> beginBroadcast() </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/os/RemoteCallbackList.html#getBroadcastItem(int)"> getBroadcastItem(int) </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/os/RemoteCallbackList.html#finishBroadcast()"> finishBroadcast() </a> </code></pre> . <p> If a registered callback's process goes away, this class will take care of automatically removing it from the list. If you want to do additional work in this situation, you can create a subclass that implements the <pre><code> <a href="https://developer.android.com/reference/android/os/RemoteCallbackList.html#onCallbackDied(E)"> onCallbackDied(E) </a> </code></pre> method. </p>\n<pre><code>public class RemoteCallbackList\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/RemoteCallbackList.html
RemoteException	A										<section class="prog__container"><p> Parent exception for all Binder remote-invocation errors</p>\n<pre><code>public class RemoteException\n</code></pre></section>	https://developer.android.com/reference/android/os/RemoteException.html
ResultReceiver	A										<section class="prog__container"><p> Generic interface for receiving a callback result from someone. Use this by creating a subclass and implement <pre><code> <a href="https://developer.android.com/reference/android/os/ResultReceiver.html#onReceiveResult(int, android.os.Bundle)"> onReceiveResult(int, Bundle) </a> </code></pre> , which you can then pass to others and send through IPC, and receive results they supply with <pre><code> <a href="https://developer.android.com/reference/android/os/ResultReceiver.html#send(int, android.os.Bundle)"> send(int, Bundle) </a> </code></pre> . <p> Note: the implementation underneath is just a simple wrapper around a <pre><code> <a href="https://developer.android.com/reference/android/os/Binder.html"> Binder </a> </code></pre> that is used to perform the communication. This means semantically you should treat it as such: this class does not impact process lifecycle management (you must be using some higher-level component to tell the system that your process needs to continue running), the connection will break if your process goes away for any reason, etc. </p>\n<pre><code>public class ResultReceiver\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/ResultReceiver.html
StatFs	A										<section class="prog__container"><p> Retrieve overall information about the space on a filesystem. This is a wrapper for Unix statvfs().</p>\n<pre><code>public class StatFs\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/StatFs.html
StrictMode	A										<section class="prog__container"><p> <p> StrictMode is a developer tool which detects things you might be doing by accident and brings them to your attention so you can fix them. <p> StrictMode is most commonly used to catch accidental disk or network access on the application's main thread, where UI operations are received and animations take place. Keeping disk and network operations off the main thread makes for much smoother, more responsive applications. By keeping your application's main thread responsive, you also prevent <a href="https://developer.android.com/guide/practices/design/responsiveness.html"> ANR dialogs </a> from being shown to users. <p class="note"> Note that even though an Android device's disk is often on flash memory, many devices run a filesystem on top of that memory with very limited concurrency. It's often the case that almost all disk accesses are fast, but may in individual cases be dramatically slower when certain I/O is happening in the background from other processes. If possible, it's best to assume that such things are not fast. </p>\n<pre><code>public final class StrictMode\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/StrictMode.html
StrictMode.ThreadPolicy.Builder	A										<section class="prog__container"><p> Creates <pre><code> <a href="https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.html"> StrictMode.ThreadPolicy </a> </code></pre> instances. Methods whose names start with <pre><code> detect </code></pre> specify what problems we should look for. Methods whose names start with <pre><code> penalty </code></pre> specify what we should do when we detect a problem. <p> You can call as many <pre><code> detect </code></pre> and <pre><code> penalty </code></pre> methods as you like. Currently order is insignificant: all penalties apply to all detected problems. <p> For example, detect everything and log anything that's found: <pre> StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder() .detectAll() .penaltyLog() .build(); StrictMode.setThreadPolicy(policy); </pre> </p>\n<pre><code>public static final class StrictMode.ThreadPolicy.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html
StrictMode.ThreadPolicy	A										<section class="prog__container"><p> <pre><code> <a href="https://developer.android.com/reference/android/os/StrictMode.html"> StrictMode </a> </code></pre> policy applied to a certain thread. <p> The policy is enabled by <pre><code> <a href="https://developer.android.com/reference/android/os/StrictMode.html#setThreadPolicy(android.os.StrictMode.ThreadPolicy)"> setThreadPolicy(StrictMode.ThreadPolicy) </a> </code></pre> . The current policy can be retrieved with <pre><code> <a href="https://developer.android.com/reference/android/os/StrictMode.html#getThreadPolicy()"> getThreadPolicy() </a> </code></pre> . <p> Note that multiple penalties may be provided and they're run in order from least to most severe (logging before process death, for example). There's currently no mechanism to choose different penalties for different detected actions. </p>\n<pre><code>public static final class StrictMode.ThreadPolicy\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.html
StrictMode.VmPolicy.Builder	A										<section class="prog__container"><p> Creates <pre><code> <a href="https://developer.android.com/reference/android/os/StrictMode.VmPolicy.html"> StrictMode.VmPolicy </a> </code></pre> instances. Methods whose names start with <pre><code> detect </code></pre> specify what problems we should look for. Methods whose names start with <pre><code> penalty </code></pre> specify what we should do when we detect a problem. <p> You can call as many <pre><code> detect </code></pre> and <pre><code> penalty </code></pre> methods as you like. Currently order is insignificant: all penalties apply to all detected problems. <p> For example, detect everything and log anything that's found: <pre> StrictMode.VmPolicy policy = new StrictMode.VmPolicy.Builder() .detectAll() .penaltyLog() .build(); StrictMode.setVmPolicy(policy); </pre> </p>\n<pre><code>public static final class StrictMode.VmPolicy.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html
StrictMode.VmPolicy	A										<section class="prog__container"><p> <pre><code> <a href="https://developer.android.com/reference/android/os/StrictMode.html"> StrictMode </a> </code></pre> policy applied to all threads in the virtual machine's process. <p> The policy is enabled by <pre><code> <a href="https://developer.android.com/reference/android/os/StrictMode.html#setVmPolicy(android.os.StrictMode.VmPolicy)"> setVmPolicy(StrictMode.VmPolicy) </a> </code></pre> . </p>\n<pre><code>public static final class StrictMode.VmPolicy\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/StrictMode.VmPolicy.html
SystemClock	A										<section class="prog__container"><p> Core timekeeping facilities. <p> Three different clocks are available, and they should not be confused: <ul> <li> <p> <pre><code> <a href="https://developer.android.com/reference/java/lang/System.html#currentTimeMillis()"> System.currentTimeMillis() </a> </code></pre> is the standard "wall" clock (time and date) expressing milliseconds since the epoch. The wall clock can be set by the user or the phone network (see <pre><code> <a href="https://developer.android.com/reference/android/os/SystemClock.html#setCurrentTimeMillis(long)"> setCurrentTimeMillis(long) </a> </code></pre> ), so the time may jump backwards or forwards unpredictably. This clock should only be used when correspondence with real-world dates and times is important, such as in a calendar or alarm clock application. Interval or elapsed time measurements should use a different clock. If you are using System.currentTimeMillis(), consider listening to the <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_TIME_TICK"> ACTION_TIME_TICK </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_TIME_CHANGED"> ACTION_TIME_CHANGED </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_TIMEZONE_CHANGED"> ACTION_TIMEZONE_CHANGED </a> </code></pre> <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html"> Intent </a> </code></pre> broadcasts to find out when the time changes. <li> <p> <pre><code> <a href="https://developer.android.com/reference/android/os/SystemClock.html#uptimeMillis()"> uptimeMillis() </a> </code></pre> is counted in milliseconds since the system was booted. This clock stops when the system enters deep sleep (CPU off, display dark, device waiting for external input), but is not affected by clock scaling, idle, or other power saving mechanisms. This is the basis for most interval timing such as <pre><code> <a href="https://developer.android.com/reference/java/lang/Thread.html#sleep(long)"> Thread.sleep(millls) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/java/lang/Object.html#wait(long)"> Object.wait(millis) </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/java/lang/System.html#nanoTime()"> System.nanoTime() </a> </code></pre> . This clock is guaranteed to be monotonic, and is suitable for interval timing when the interval does not span device sleep. Most methods that accept a timestamp value currently expect the <pre><code> <a href="https://developer.android.com/reference/android/os/SystemClock.html#uptimeMillis()"> uptimeMillis() </a> </code></pre> clock. <li> <p> <pre><code> <a href="https://developer.android.com/reference/android/os/SystemClock.html#elapsedRealtime()"> elapsedRealtime() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/os/SystemClock.html#elapsedRealtimeNanos()"> elapsedRealtimeNanos() </a> </code></pre> return the time since the system was booted, and include deep sleep. This clock is guaranteed to be monotonic, and continues to tick even when the CPU is in power saving modes, so is the recommend basis for general purpose interval timing. </p>\n<pre><code>public final class SystemClock\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/SystemClock.html
TokenWatcher	A										<section class="prog__container"><p> Helper class that helps you use IBinder objects as reference counted tokens. IBinders make good tokens because we find out when they are removed</p>\n<pre><code>public abstract class TokenWatcher\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/TokenWatcher.html
Trace	A										<section class="prog__container"><p> Writes trace events to the system trace buffer. These trace events can be collected and visualized using the Systrace tool. <p> This tracing mechanism is independent of the method tracing mechanism offered by <pre><code> <a href="https://developer.android.com/reference/android/os/Debug.html#startMethodTracing()"> startMethodTracing() </a> </code></pre> . In particular, it enables tracing of events that occur across multiple processes. <p> For information about using the Systrace tool, read <a href="https://developer.android.com/tools/debugging/systrace.html"> Analyzing Display and Performance with Systrace </a> . </p>\n<pre><code>public final class Trace\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/Trace.html
TransactionTooLargeException	A										<section class="prog__container"><p> The Binder transaction failed because it was too large. <p> During a remote procedure call, the arguments and the return value of the call are transferred as <pre><code> <a href="https://developer.android.com/reference/android/os/Parcel.html"> Parcel </a> </code></pre> objects stored in the Binder transaction buffer. If the arguments or the return value are too large to fit in the transaction buffer, then the call will fail and <pre><code> <a href="https://developer.android.com/reference/android/os/TransactionTooLargeException.html"> TransactionTooLargeException </a> </code></pre> will be thrown. </p>\n<pre><code>public class TransactionTooLargeException\n</code></pre></section>	https://developer.android.com/reference/android/os/TransactionTooLargeException.html
UserHandle	A										<section class="prog__container"><p> Representation of a user on the device.</p>\n<pre><code>public final class UserHandle\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/UserHandle.html
UserManager	A										<section class="prog__container"><p> Manages users and user details on a multi-user system. There are two major categories of users: fully customizable users with their own login, and managed profiles that share a workspace with a related user. <p> Users are different from accounts, which are managed by <pre><code> <a href="https://developer.android.com/reference/android/accounts/AccountManager.html"> AccountManager </a> </code></pre> . Each user can have their own set of accounts. <p> See <pre><code> <a href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_PROVISION_MANAGED_PROFILE"> ACTION_PROVISION_MANAGED_PROFILE </a> </code></pre> for more on managed profiles. </p>\n<pre><code>public class UserManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/UserManager.html
Vibrator	A										<section class="prog__container"><p> Class that operates the vibrator on the device. <p> If your process exits, any vibration you started will stop. </p>\n<pre><code>public abstract class Vibrator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/Vibrator.html
WorkSource	A										<section class="prog__container"><p> Describes the source of some work that may be done by someone else. Currently the public representation of what a work source is is not defined; this is an opaque container.</p>\n<pre><code>public class WorkSource\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/WorkSource.html
HealthStats	A										<section class="prog__container"><p> A HealthStats object contains system health data about an application. <p> <b> Data Types </b> <br> Each of the keys references data in one of five data types: <p> A <b> measurement </b> metric contains a sinlge <pre><code> long </code></pre> value. That value may be a count, a time, or some other type of value. The unit for a measurement (COUNT, MS, etc) will always be in the name of the constant for the key to retrieve it. For example, the <pre><code> <a href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_WIFI_TX_MS"> UidHealthStats.MEASUREMENT_WIFI_TX_MS </a> </code></pre> value is the number of milliseconds (ms) that were spent transmitting on wifi by an application. The <pre><code> <a href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_MOBILE_RX_PACKETS"> UidHealthStats.MEASUREMENT_MOBILE_RX_PACKETS </a> </code></pre> measurement is the number of packets received on behalf of an application. The <pre><code> <a href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_TOUCH_USER_ACTIVITY_COUNT"> UidHealthStats.MEASUREMENT_TOUCH_USER_ACTIVITY_COUNT </a> </code></pre> measurement is the number of times the user touched the screen, causing the screen to stay awake. <p> A <b> timer </b> metric contains an <pre><code> int </code></pre> count and a <pre><code> long </code></pre> time, measured in milliseconds. Timers track how many times a resource was used, and the total duration for that usage. For example, the <pre><code> <a href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMER_FLASHLIGHT"> TIMER_FLASHLIGHT </a> </code></pre> timer tracks how many times the application turned on the flashlight, and for how many milliseconds total it kept it on. <p> A <b> measurement map </b> metric is a mapping of <pre><code> <a href="https://developer.android.com/reference/java/lang/String.html"> String </a> </code></pre> names to <pre><code> <a href="https://developer.android.com/reference/java/lang/Long.html"> Long </a> </code></pre> values. The names typically are application provided names. For example, the <pre><code> <a href="https://developer.android.com/reference/android/os/health/PackageHealthStats.html#MEASUREMENTS_WAKEUP_ALARMS_COUNT"> PackageHealthStats.MEASUREMENTS_WAKEUP_ALARMS_COUNT </a> </code></pre> measurement map is a mapping of the tag provided to the <pre><code> <a href="https://developer.android.com/reference/android/app/AlarmManager.html"> AlarmManager </a> </code></pre> when the alarm is scheduled. <p> A <b> timer map </b> metric is a mapping of <pre><code> <a href="https://developer.android.com/reference/java/lang/String.html"> String </a> </code></pre> names to <pre><code> <a href="https://developer.android.com/reference/android/os/health/TimerStat.html"> TimerStat </a> </code></pre> objects. The names are typically application provided names. For example, the <pre><code> <a href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMERS_WAKELOCKS_PARTIAL"> UidHealthStats.TIMERS_WAKELOCKS_PARTIAL </a> </code></pre> is a mapping of tag provided to the <pre><code> <a href="https://developer.android.com/reference/android/os/PowerManager.html"> PowerManager </a> </code></pre> when the wakelock is created to the number of times and for how long each wakelock was active. <p> Lastly, a <b> health stats </b> metric is a mapping of <pre><code> <a href="https://developer.android.com/reference/java/lang/String.html"> String </a> </code></pre> names to a recursive <pre><code> <a href="https://developer.android.com/reference/android/os/health/HealthStats.html"> HealthStats </a> </code></pre> object containing more detailed information. For example, the <pre><code> <a href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#STATS_PACKAGES"> UidHealthStats.STATS_PACKAGES </a> </code></pre> metric is a mapping of the package names for each of the APKs sharing a uid to the information recorded for that apk. The returned HealthStats objects will each be associated with a different set of constants. For the HealthStats returned for UidHealthStats.STATS_PACKAGES, the keys come from the <pre><code> <a href="https://developer.android.com/reference/android/os/health/PackageHealthStats.html"> PackageHealthStats </a> </code></pre> class. <p> The keys that are available are subject to change, depending on what a particular device or software version is capable of recording. Applications must handle the absence of data without crashing. </p>\n<pre><code>public class HealthStats\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/health/HealthStats.html
android.os.health	A										<section class="prog__container">Applications running in the background are responsible for a significant amount of battery usage on a typical android device. There are several things that applications can do in order to reduce their impact. For example, by using</section>	https://developer.android.com/reference/android/os/health/package-summary.html
PackageHealthStats	A										<section class="prog__container"><p> Keys for <pre><code> <a href="https://developer.android.com/reference/android/os/health/HealthStats.html"> HealthStats </a> </code></pre> returned from <pre><code> <a href="https://developer.android.com/reference/android/os/health/HealthStats.html#getStats(int)"> HealthStats.getStats(int) </a> </code></pre> with the <pre><code> <a href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#STATS_PACKAGES"> UidHealthStats.STATS_PACKAGES </a> </code></pre> key.</p>\n<pre><code>public final class PackageHealthStats\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/health/PackageHealthStats.html
PidHealthStats	A										<section class="prog__container"><p> Keys for <pre><code> <a href="https://developer.android.com/reference/android/os/health/HealthStats.html"> HealthStats </a> </code></pre> returned from <pre><code> <a href="https://developer.android.com/reference/android/os/health/HealthStats.html#getStats(int)"> HealthStats.getStats(int) </a> </code></pre> with the <pre><code> <a href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#STATS_PIDS"> UidHealthStats.STATS_PIDS </a> </code></pre> key. <p> The values coming from PidHealthStats are a little bit different from the other HealthStats values. These values are not aggregate or historical values, but instead live values from when the snapshot is taken. These tend to be more useful in debugging rogue processes than in gathering aggregate metrics across the fleet of devices. </p>\n<pre><code>public final class PidHealthStats\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/health/PidHealthStats.html
ProcessHealthStats	A										<section class="prog__container"><p> Keys for <pre><code> <a href="https://developer.android.com/reference/android/os/health/HealthStats.html"> HealthStats </a> </code></pre> returned from <pre><code> <a href="https://developer.android.com/reference/android/os/health/HealthStats.html#getStats(int)"> HealthStats.getStats(int) </a> </code></pre> with the <pre><code> <a href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#STATS_PROCESSES"> UidHealthStats.STATS_PROCESSES </a> </code></pre> key.</p>\n<pre><code>public final class ProcessHealthStats\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/health/ProcessHealthStats.html
ServiceHealthStats	A										<section class="prog__container"><p> Keys for <pre><code> <a href="https://developer.android.com/reference/android/os/health/HealthStats.html"> HealthStats </a> </code></pre> returned from <pre><code> <a href="https://developer.android.com/reference/android/os/health/HealthStats.html#getStats(int)"> HealthStats.getStats(int) </a> </code></pre> with the <pre><code> <a href="https://developer.android.com/reference/android/os/health/PackageHealthStats.html#STATS_SERVICES"> PackageHealthStats.STATS_SERVICES </a> </code></pre> key.</p>\n<pre><code>public final class ServiceHealthStats\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/health/ServiceHealthStats.html
SystemHealthManager	A										<section class="prog__container"><p> Provides access to data about how various system resources are used by applications.</p>\n<pre><code>public class SystemHealthManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/health/SystemHealthManager.html
TimerStat	A										<section class="prog__container"><p> A TimerStat object stores a count and a time.</p>\n<pre><code>public final class TimerStat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/health/TimerStat.html
UidHealthStats	A										<section class="prog__container"><p> Keys for <pre><code> <a href="https://developer.android.com/reference/android/os/health/HealthStats.html"> HealthStats </a> </code></pre> returned from <pre><code> <a href="https://developer.android.com/reference/android/os/health/SystemHealthManager.html#takeUidSnapshot(int)"> SystemHealthManager.takeUidSnapshot(int) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/os/health/SystemHealthManager.html#takeMyUidSnapshot()"> SystemHealthManager.takeMyUidSnapshot() </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/os/health/SystemHealthManager.html#takeUidSnapshots(int[])"> SystemHealthManager.takeUidSnapshots(int[]) </a> </code></pre> .</p>\n<pre><code>public final class UidHealthStats\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/health/UidHealthStats.html
OnObbStateChangeListener	A										<section class="prog__container"><p> Used for receiving notifications from <pre><code> <a href="https://developer.android.com/reference/android/os/storage/StorageManager.html"> StorageManager </a> </code></pre> about OBB file states.</p>\n<pre><code>public abstract class OnObbStateChangeListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/storage/OnObbStateChangeListener.html
android.os.storage	A										<section class="prog__container">Contains classes for the system storage service, which manages binary asset filesystemsknown as Opaque Binary Blobs (OBBs).</section>	https://developer.android.com/reference/android/os/storage/package-summary.html
StorageManager	A										<section class="prog__container"><p> StorageManager is the interface to the systems storage service. The storage manager handles storage-related items such as Opaque Binary Blobs (OBBs). <p> OBBs contain a filesystem that maybe be encrypted on disk and mounted on-demand from an application. OBBs are a good way of providing large amounts of binary assets without packaging them into APKs as they may be multiple gigabytes in size. However, due to their size, they're most likely stored in a shared storage pool accessible from all programs. The system does not guarantee the security of the OBB file itself: if any program modifies the OBB, there is no guarantee that a read from that OBB will produce the expected output. <p> Get an instance of this class by calling <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> getSystemService(java.lang.String) </a> </code></pre> with an argument of <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#STORAGE_SERVICE"> STORAGE_SERVICE </a> </code></pre> . </p>\n<pre><code>public class StorageManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/storage/StorageManager.html
StorageVolume	A										<section class="prog__container"><p> Information about a shared/external storage volume for a specific user. <p> A device always has one (and one only) primary storage volume, but it could have extra volumes, like SD cards and USB drives. This object represents the logical view of a storage volume for a specific user: different users might have different views for the same physical volume (for example, if the volume is a built-in emulated storage). <p> The storage volume is not necessarily mounted, applications should use <pre><code> <a href="https://developer.android.com/reference/android/os/storage/StorageVolume.html#getState()"> getState() </a> </code></pre> to verify its state. <p> Applications willing to read or write to this storage volume needs to get a permission from the user first, which can be achieved in the following ways: <ul> <li> To get access to standard directories (like the <pre><code> <a href="https://developer.android.com/reference/android/os/Environment.html#DIRECTORY_PICTURES"> DIRECTORY_PICTURES </a> </code></pre> ), they can use the <pre><code> <a href="https://developer.android.com/reference/android/os/storage/StorageVolume.html#createAccessIntent(java.lang.String)"> createAccessIntent(String) </a> </code></pre> . This is the recommend way, since it provides a simpler API and narrows the access to the given directory (and its descendants). <li> To get access to any directory (and its descendants), they can use the Storage Acess Framework APIs (such as <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT"> ACTION_OPEN_DOCUMENT </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT_TREE"> ACTION_OPEN_DOCUMENT_TREE </a> </code></pre> , although these APIs do not guarantee the user will select this specific volume. <li> To get read and write access to the primary storage volume, applications can declare the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE"> READ_EXTERNAL_STORAGE </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE"> WRITE_EXTERNAL_STORAGE </a> </code></pre> permissions respectively, with the latter including the former. This approach is discouraged, since users may be hesitant to grant broad access to all files contained on a storage device. </li> </li> </li> </ul> <p> It can be obtained through <pre><code> <a href="https://developer.android.com/reference/android/os/storage/StorageManager.html#getStorageVolumes()"> getStorageVolumes() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/os/storage/StorageManager.html#getPrimaryStorageVolume()"> getPrimaryStorageVolume() </a> </code></pre> and also as an extra in some broadcasts (see <pre><code> <a href="https://developer.android.com/reference/android/os/storage/StorageVolume.html#EXTRA_STORAGE_VOLUME"> EXTRA_STORAGE_VOLUME </a> </code></pre> ). <p> See <pre><code> <a href="https://developer.android.com/reference/android/os/Environment.html#getExternalStorageDirectory()"> getExternalStorageDirectory() </a> </code></pre> for more info about shared/external storage semantics. </p>\n<pre><code>public final class StorageVolume\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/os/storage/StorageVolume.html
CheckBoxPreference	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/preference/Preference.html"> Preference </a> </code></pre> that provides checkbox widget functionality. <p> This preference will store a boolean into the SharedPreferences. </p>\n<pre><code>public class CheckBoxPreference\n</code></pre></section>	https://developer.android.com/reference/android/preference/CheckBoxPreference.html
DialogPreference	A										<section class="prog__container"><p> A base class for <pre><code> <a href="https://developer.android.com/reference/android/preference/Preference.html"> Preference </a> </code></pre> objects that are dialog-based. These preferences will, when clicked, open a dialog showing the actual preference controls.</p>\n<pre><code>public abstract class DialogPreference\n</code></pre></section>	https://developer.android.com/reference/android/preference/DialogPreference.html
EditTextPreference	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/preference/Preference.html"> Preference </a> </code></pre> that allows for string input. <p> It is a subclass of <pre><code> <a href="https://developer.android.com/reference/android/preference/DialogPreference.html"> DialogPreference </a> </code></pre> and shows the <pre><code> <a href="https://developer.android.com/reference/android/widget/EditText.html"> EditText </a> </code></pre> in a dialog. This <pre><code> <a href="https://developer.android.com/reference/android/widget/EditText.html"> EditText </a> </code></pre> can be modified either programmatically via <pre><code> <a href="https://developer.android.com/reference/android/preference/EditTextPreference.html#getEditText()"> getEditText() </a> </code></pre> , or through XML by setting any EditText attributes on the EditTextPreference. <p> This preference will store a string into the SharedPreferences. <p> See <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#EditText"> EditText Attributes </a> </code></pre> . </p>\n<pre><code>public class EditTextPreference\n</code></pre></section>	https://developer.android.com/reference/android/preference/EditTextPreference.html
ListPreference	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/preference/Preference.html"> Preference </a> </code></pre> that displays a list of entries as a dialog. <p> This preference will store a string into the SharedPreferences. This string will be the value from the <pre><code> <a href="https://developer.android.com/reference/android/preference/ListPreference.html#setEntryValues(java.lang.CharSequence[])"> setEntryValues(CharSequence[]) </a> </code></pre> array. </p>\n<pre><code>public class ListPreference\n</code></pre></section>	https://developer.android.com/reference/android/preference/ListPreference.html
MultiSelectListPreference	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/preference/Preference.html"> Preference </a> </code></pre> that displays a list of entries as a dialog. <p> This preference will store a set of strings into the SharedPreferences. This set will contain one or more values from the <pre><code> <a href="https://developer.android.com/reference/android/preference/MultiSelectListPreference.html#setEntryValues(java.lang.CharSequence[])"> setEntryValues(CharSequence[]) </a> </code></pre> array. </p>\n<pre><code>public class MultiSelectListPreference\n</code></pre></section>	https://developer.android.com/reference/android/preference/MultiSelectListPreference.html
android.preference	A										<section class="prog__container">The preferences portion of an application should be ran as a separate</section>	https://developer.android.com/reference/android/preference/package-summary.html
Preference.BaseSavedState	A										<section class="prog__container"><p> A base class for managing the instance state of a <pre><code> <a href="https://developer.android.com/reference/android/preference/Preference.html"> Preference </a> </code></pre> .</p>\n<pre><code>public static class Preference.BaseSavedState\n</code></pre></section>	https://developer.android.com/reference/android/preference/Preference.BaseSavedState.html
Preference	A										<section class="prog__container"><p> Represents the basic Preference UI building block displayed by a <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceActivity.html"> PreferenceActivity </a> </code></pre> in the form of a <pre><code> <a href="https://developer.android.com/reference/android/widget/ListView.html"> ListView </a> </code></pre> . This class provides the <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> to be displayed in the activity and associates with a <pre><code> <a href="https://developer.android.com/reference/android/content/SharedPreferences.html"> SharedPreferences </a> </code></pre> to store/retrieve the preference data. <p> When specifying a preference hierarchy in XML, each element can point to a subclass of <pre><code> <a href="https://developer.android.com/reference/android/preference/Preference.html"> Preference </a> </code></pre> , similar to the view hierarchy and layouts. <p> This class contains a <pre><code> key </code></pre> that will be used as the key into the <pre><code> <a href="https://developer.android.com/reference/android/content/SharedPreferences.html"> SharedPreferences </a> </code></pre> . It is up to the subclass to decide how to store the value. </p>\n<pre><code>public class Preference\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/preference/Preference.html
Preference.OnPreferenceChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the value of this <pre><code> <a href="https://developer.android.com/reference/android/preference/Preference.html"> Preference </a> </code></pre> has been changed by the user and is about to be set and/or persisted. This gives the client a chance to prevent setting and/or persisting the value.</p>\n<pre><code>public static interface Preference.OnPreferenceChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/preference/Preference.OnPreferenceChangeListener.html
Preference.OnPreferenceClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a <pre><code> <a href="https://developer.android.com/reference/android/preference/Preference.html"> Preference </a> </code></pre> is clicked.</p>\n<pre><code>public static interface Preference.OnPreferenceClickListener\n</code></pre></section>	https://developer.android.com/reference/android/preference/Preference.OnPreferenceClickListener.html
PreferenceActivity.Header	A										<section class="prog__container"><p> Description of a single Header item that the user can select.</p>\n<pre><code>public static final class PreferenceActivity.Header\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceActivity.Header.html
PreferenceActivity	A										<section class="prog__container"><p> This is the base class for an activity to show a hierarchy of preferences to the user. Prior to <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#HONEYCOMB"> HONEYCOMB </a> </code></pre> this class only allowed the display of a single set of preference; this functionality should now be found in the new <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceFragment.html"> PreferenceFragment </a> </code></pre> class. If you are using PreferenceActivity in its old mode, the documentation there applies to the deprecated APIs here. <p> This activity shows one or more headers of preferences, each of which is associated with a <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceFragment.html"> PreferenceFragment </a> </code></pre> to display the preferences of that header. The actual layout and display of these associations can however vary; currently there are two major approaches it may take: <ul> <li> On a small screen it may display only the headers as a single list when first launched. Selecting one of the header items will re-launch the activity with it only showing the PreferenceFragment of that header. <li> On a large screen in may display both the headers and current PreferenceFragment together as panes. Selecting a header item switches to showing the correct PreferenceFragment for that item. </li> </li> </ul> <p> Subclasses of PreferenceActivity should implement <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceActivity.html#onBuildHeaders(java.util.List&lt;android.preference.PreferenceActivity.Header&gt;)"> onBuildHeaders(List <preferenceactivity.header> ) </preferenceactivity.header> </a> </code></pre> to populate the header list with the desired items. Doing this implicitly switches the class into its new "headers + fragments" mode rather than the old style of just showing a single preferences list. </p>\n<pre><code>public abstract class PreferenceActivity\n</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceActivity.html
PreferenceCategory	A										<section class="prog__container"><p> Used to group <pre><code> <a href="https://developer.android.com/reference/android/preference/Preference.html"> Preference </a> </code></pre> objects and provide a disabled title above the group. </p>\n<pre><code>public class PreferenceCategory\n</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceCategory.html
PreferenceFragment	A										<section class="prog__container"><p> Shows a hierarchy of <pre><code> <a href="https://developer.android.com/reference/android/preference/Preference.html"> Preference </a> </code></pre> objects as lists. These preferences will automatically save to <pre><code> <a href="https://developer.android.com/reference/android/content/SharedPreferences.html"> SharedPreferences </a> </code></pre> as the user interacts with them. To retrieve an instance of <pre><code> <a href="https://developer.android.com/reference/android/content/SharedPreferences.html"> SharedPreferences </a> </code></pre> that the preference hierarchy in this fragment will use, call <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceManager.html#getDefaultSharedPreferences(android.content.Context)"> getDefaultSharedPreferences(android.content.Context) </a> </code></pre> with a context in the same package as this fragment. <p> Furthermore, the preferences shown will follow the visual style of system preferences. It is easy to create a hierarchy of preferences (that can be shown on multiple screens) via XML. For these reasons, it is recommended to use this fragment (as a superclass) to deal with preferences in applications. <p> A <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> object should be at the top of the preference hierarchy. Furthermore, subsequent <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> in the hierarchy denote a screen break--that is the preferences contained within subsequent <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> should be shown on another screen. The preference framework handles showing these other screens from the preference hierarchy. <p> The preference hierarchy can be formed in multiple ways: <li> From an XML file specifying the hierarchy <li> From different <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activities </a> </code></pre> that each specify its own preferences in an XML file via <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> meta-data <li> From an object hierarchy rooted with <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> <p> To inflate from XML, use the <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceFragment.html#addPreferencesFromResource(int)"> addPreferencesFromResource(int) </a> </code></pre> . The root element should be a <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> . Subsequent elements can point to actual <pre><code> <a href="https://developer.android.com/reference/android/preference/Preference.html"> Preference </a> </code></pre> subclasses. As mentioned above, subsequent <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> in the hierarchy will result in the screen break. <p> To specify an <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html"> Intent </a> </code></pre> to query <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activities </a> </code></pre> that each have preferences, use <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceFragment.html#addPreferencesFromIntent(android.content.Intent)"> addPreferencesFromIntent(Intent) </a> </code></pre> . Each <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> can specify meta-data in the manifest (via the key <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceManager.html#METADATA_KEY_PREFERENCES"> METADATA_KEY_PREFERENCES </a> </code></pre> ) that points to an XML resource. These XML resources will be inflated into a single preference hierarchy and shown by this fragment. <p> To specify an object hierarchy rooted with <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> , use <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceFragment.html#setPreferenceScreen(android.preference.PreferenceScreen)"> setPreferenceScreen(PreferenceScreen) </a> </code></pre> . <p> As a convenience, this fragment implements a click listener for any preference in the current hierarchy, see <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceFragment.html#onPreferenceTreeClick(android.preference.PreferenceScreen, android.preference.Preference)"> onPreferenceTreeClick(PreferenceScreen, Preference) </a> </code></pre> . </p>\n<pre><code>public abstract class PreferenceFragment\n</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceFragment.html
PreferenceFragment.OnPreferenceStartFragmentCallback	A										<section class="prog__container"><p> Interface that PreferenceFragment's containing activity should implement to be able to process preference items that wish to switch to a new fragment.</p>\n<pre><code>public static interface PreferenceFragment.OnPreferenceStartFragmentCallback\n</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceFragment.OnPreferenceStartFragmentCallback.html
PreferenceGroup	A										<section class="prog__container"><p> A container for multiple <pre><code> <a href="https://developer.android.com/reference/android/preference/Preference.html"> Preference </a> </code></pre> objects. It is a base class for Preference objects that are parents, such as <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceCategory.html"> PreferenceCategory </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> . </p>\n<pre><code>public abstract class PreferenceGroup\n</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceGroup.html
PreferenceManager	A										<section class="prog__container"><p> Used to help create <pre><code> <a href="https://developer.android.com/reference/android/preference/Preference.html"> Preference </a> </code></pre> hierarchies from activities or XML. <p> In most cases, clients should use <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceActivity.html#addPreferencesFromIntent(android.content.Intent)"> addPreferencesFromIntent(Intent) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceActivity.html#addPreferencesFromResource(int)"> addPreferencesFromResource(int) </a> </code></pre> . </p>\n<pre><code>public class PreferenceManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceManager.html
PreferenceManager.OnActivityDestroyListener	A										<section class="prog__container"><p> Interface definition for a class that will be called when the container's activity is destroyed.</p>\n<pre><code>public static interface PreferenceManager.OnActivityDestroyListener\n</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceManager.OnActivityDestroyListener.html
PreferenceManager.OnActivityResultListener	A										<section class="prog__container"><p> Interface definition for a class that will be called when the container's activity receives an activity result.</p>\n<pre><code>public static interface PreferenceManager.OnActivityResultListener\n</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceManager.OnActivityResultListener.html
PreferenceManager.OnActivityStopListener	A										<section class="prog__container"><p> Interface definition for a class that will be called when the container's activity is stopped.</p>\n<pre><code>public static interface PreferenceManager.OnActivityStopListener\n</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceManager.OnActivityStopListener.html
PreferenceScreen	A										<section class="prog__container"><p> Represents a top-level <pre><code> <a href="https://developer.android.com/reference/android/preference/Preference.html"> Preference </a> </code></pre> that is the root of a Preference hierarchy. A <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceActivity.html"> PreferenceActivity </a> </code></pre> points to an instance of this class to show the preferences. To instantiate this class, use <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceManager.html#createPreferenceScreen(android.content.Context)"> createPreferenceScreen(Context) </a> </code></pre> . <ul> This class can appear in two places: <li> When a <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceActivity.html"> PreferenceActivity </a> </code></pre> points to this, it is used as the root and is not shown (only the contained preferences are shown). <li> When it appears inside another preference hierarchy, it is shown and serves as the gateway to another screen of preferences (either by showing another screen of preferences as a <pre><code> <a href="https://developer.android.com/reference/android/app/Dialog.html"> Dialog </a> </code></pre> or via a <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#startActivity(android.content.Intent)"> startActivity(android.content.Intent) </a> </code></pre> from the <pre><code> <a href="https://developer.android.com/reference/android/preference/Preference.html#getIntent()"> getIntent() </a> </code></pre> ). The children of this <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> are NOT shown in the screen that this <pre><code> <a href="https://developer.android.com/reference/android/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> is shown in. Instead, a separate screen will be shown when this preference is clicked. </li> </li> </ul> <p> Here's an example XML layout of a PreferenceScreen: </p>\n<pre><code>public final class PreferenceScreen\n</code></pre></section>	https://developer.android.com/reference/android/preference/PreferenceScreen.html
RingtonePreference	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/preference/Preference.html"> Preference </a> </code></pre> that allows the user to choose a ringtone from those on the device. The chosen ringtone's URI will be persisted as a string. <p> If the user chooses the "Default" item, the saved string will be one of <pre><code> <a href="https://developer.android.com/reference/android/provider/Settings.System.html#DEFAULT_RINGTONE_URI"> DEFAULT_RINGTONE_URI </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/provider/Settings.System.html#DEFAULT_NOTIFICATION_URI"> DEFAULT_NOTIFICATION_URI </a> </code></pre> , or <pre><code> <a href="https://developer.android.com/reference/android/provider/Settings.System.html#DEFAULT_ALARM_ALERT_URI"> DEFAULT_ALARM_ALERT_URI </a> </code></pre> . If the user chooses the "Silent" item, the saved string will be an empty string. </p>\n<pre><code>public class RingtonePreference\n</code></pre></section>	https://developer.android.com/reference/android/preference/RingtonePreference.html
SwitchPreference	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/preference/Preference.html"> Preference </a> </code></pre> that provides a two-state toggleable option. <p> This preference will store a boolean into the SharedPreferences. </p>\n<pre><code>public class SwitchPreference\n</code></pre></section>	https://developer.android.com/reference/android/preference/SwitchPreference.html
TwoStatePreference	A										<section class="prog__container"><p> Common base class for preferences that have two selectable states, persist a boolean value in SharedPreferences, and may have dependent preferences that are enabled/disabled based on the current state.</p>\n<pre><code>public abstract class TwoStatePreference\n</code></pre></section>	https://developer.android.com/reference/android/preference/TwoStatePreference.html
android.print	A										<section class="prog__container">Provides classes for implementing print support in applications and also contains allbase classes and abstractions involved in printing. These base classes are also usedby other more specialized printing related packages.</section>	https://developer.android.com/reference/android/print/package-summary.html
PageRange	A										<section class="prog__container"><p> Represents a range of pages. The start and end page indices of the range are zero based and inclusive.</p>\n<pre><code>public final class PageRange\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PageRange.html
PrintAttributes.Builder	A										<section class="prog__container"><p> Builder for creating <pre><code> <a href="https://developer.android.com/reference/android/print/PrintAttributes.html"> PrintAttributes </a> </code></pre> .</p>\n<pre><code>public static final class PrintAttributes.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrintAttributes.Builder.html
PrintAttributes	A										<section class="prog__container"><p> This class represents the attributes of a print job. These attributes describe how the printed content should be laid out. For example, the print attributes may state that the content should be laid out on a letter size with 300 DPI (dots per inch) resolution, have a margin of 10 mills (thousand of an inch) on all sides, and be black and white.</p>\n<pre><code>public final class PrintAttributes\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrintAttributes.html
PrintAttributes.Margins	A										<section class="prog__container"><p> This class specifies content margins. Margins define the white space around the content where the left margin defines the amount of white space on the left of the content and so on.</p>\n<pre><code>public static final class PrintAttributes.Margins\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrintAttributes.Margins.html
PrintAttributes.MediaSize	A										<section class="prog__container"><p> This class specifies a supported media size. Media size is the dimension of the media on which the content is printed. For example, the <pre><code> <a href="https://developer.android.com/reference/android/print/PrintAttributes.MediaSize.html#NA_LETTER"> NA_LETTER </a> </code></pre> media size designates a page with size 8.5" x 11".</p>\n<pre><code>public static final class PrintAttributes.MediaSize\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrintAttributes.MediaSize.html
PrintAttributes.Resolution	A										<section class="prog__container"><p> This class specifies a supported resolution in DPI (dots per inch). Resolution defines how many points with different color can be placed on one inch in horizontal or vertical direction of the target media. For example, a printer with 600 DPI can produce higher quality images the one with 300 DPI resolution.</p>\n<pre><code>public static final class PrintAttributes.Resolution\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrintAttributes.Resolution.html
PrintDocumentAdapter	A										<section class="prog__container"><p> Base class that provides the content of a document to be printed. </p>\n<pre><code>public abstract class PrintDocumentAdapter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrintDocumentAdapter.html
PrintDocumentAdapter.LayoutResultCallback	A										<section class="prog__container"><p> Base class for implementing a callback for the result of <pre><code> <a href="https://developer.android.com/reference/android/print/PrintDocumentAdapter.html#onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)"> onLayout(PrintAttributes, PrintAttributes, CancellationSignal, LayoutResultCallback, Bundle) </a> </code></pre> .</p>\n<pre><code>public static abstract class PrintDocumentAdapter.LayoutResultCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrintDocumentAdapter.LayoutResultCallback.html
PrintDocumentAdapter.WriteResultCallback	A										<section class="prog__container"><p> Base class for implementing a callback for the result of <pre><code> <a href="https://developer.android.com/reference/android/print/PrintDocumentAdapter.html#onWrite(android.print.PageRange[], android.os.ParcelFileDescriptor, android.os.CancellationSignal, android.print.PrintDocumentAdapter.WriteResultCallback)"> onWrite(PageRange[], ParcelFileDescriptor, CancellationSignal, WriteResultCallback) </a> </code></pre> .</p>\n<pre><code>public static abstract class PrintDocumentAdapter.WriteResultCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrintDocumentAdapter.WriteResultCallback.html
PrintDocumentInfo.Builder	A										<section class="prog__container"><p> Builder for creating a <pre><code> <a href="https://developer.android.com/reference/android/print/PrintDocumentInfo.html"> PrintDocumentInfo </a> </code></pre> .</p>\n<pre><code>public static final class PrintDocumentInfo.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrintDocumentInfo.Builder.html
PrintDocumentInfo	A										<section class="prog__container"><p> This class encapsulates information about a document for printing purposes. This meta-data is used by the platform and print services, components that interact with printers. For example, this class contains the number of pages contained in the document it describes and this number of pages is shown to the user allowing him/her to select the range to print. Also a print service may optimize the printing process based on the content type, such as document or photo. <p> Instances of this class are created by the printing application and passed to the <pre><code> <a href="https://developer.android.com/reference/android/print/PrintDocumentAdapter.LayoutResultCallback.html#onLayoutFinished(android.print.PrintDocumentInfo, boolean)"> PrintDocumentAdapter.LayoutResultCallback.onLayoutFinished( PrintDocumentInfo, boolean) </a> </code></pre> callback after successfully laying out the content which is performed in <pre><code> <a href="https://developer.android.com/reference/android/print/PrintDocumentAdapter.html#onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle)"> PrintDocumentAdapter.onLayout(PrintAttributes, PrintAttributes, android.os.CancellationSignal, PrintDocumentAdapter.LayoutResultCallback, android.os.Bundle) </a> </code></pre> . </p>\n<pre><code>public final class PrintDocumentInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrintDocumentInfo.html
PrinterCapabilitiesInfo.Builder	A										<section class="prog__container"><p> Builder for creating of a <pre><code> <a href="https://developer.android.com/reference/android/print/PrinterCapabilitiesInfo.html"> PrinterCapabilitiesInfo </a> </code></pre> . This class is responsible to enforce that all required attributes have at least one default value. In other words, this class creates only well-formed <pre><code> <a href="https://developer.android.com/reference/android/print/PrinterCapabilitiesInfo.html"> PrinterCapabilitiesInfo </a> </code></pre> s. <p> Look at the individual methods for a reference whether a property is required or if it is optional. </p>\n<pre><code>public static final class PrinterCapabilitiesInfo.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrinterCapabilitiesInfo.Builder.html
PrinterCapabilitiesInfo	A										<section class="prog__container"><p> This class represents the capabilities of a printer. Instances of this class are created by a print service to report the capabilities of a printer it manages. The capabilities of a printer specify how it can print content. For example, what are the media sizes supported by the printer, what are the minimal margins of the printer based on its technical design, etc.</p>\n<pre><code>public final class PrinterCapabilitiesInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrinterCapabilitiesInfo.html
PrinterId	A										<section class="prog__container"><p> This class represents the unique id of a printer.</p>\n<pre><code>public final class PrinterId\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrinterId.html
PrinterInfo.Builder	A										<section class="prog__container"><p> Builder for creating of a <pre><code> <a href="https://developer.android.com/reference/android/print/PrinterInfo.html"> PrinterInfo </a> </code></pre> .</p>\n<pre><code>public static final class PrinterInfo.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrinterInfo.Builder.html
PrinterInfo	A										<section class="prog__container"><p> This class represents the description of a printer. Instances of this class are created by print services to report to the system the printers they manage. The information of this class has two major components, printer properties such as name, id, status, description and printer capabilities which describe the various print modes a printer supports such as media sizes, margins, etc. <p> Once <pre><code> <a href="https://developer.android.com/reference/android/print/PrinterInfo.Builder.html#build()"> built </a> </code></pre> the objects are immutable. </p>\n<pre><code>public final class PrinterInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrinterInfo.html
PrintJob	A										<section class="prog__container"><p> This class represents a print job from the perspective of an application. It contains behavior methods for performing operations on it as well as methods for querying its state. A snapshot of the print job state is represented by the <pre><code> <a href="https://developer.android.com/reference/android/print/PrintJobInfo.html"> PrintJobInfo </a> </code></pre> class. The state of a print job may change over time. An application receives instances of this class when creating a print job or querying for its print jobs.</p>\n<pre><code>public final class PrintJob\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrintJob.html
PrintJobId	A										<section class="prog__container"><p> This class represents the id of a print job.</p>\n<pre><code>public final class PrintJobId\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrintJobId.html
PrintJobInfo.Builder	A										<section class="prog__container"><p> Builder for creating a <pre><code> <a href="https://developer.android.com/reference/android/print/PrintJobInfo.html"> PrintJobInfo </a> </code></pre> .</p>\n<pre><code>public static final class PrintJobInfo.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrintJobInfo.Builder.html
PrintJobInfo	A										<section class="prog__container"><p> This class represents the description of a print job. The print job state includes properties such as its id, print attributes used for generating the content, and so on. Note that the print jobs state may change over time and this class represents a snapshot of this state.</p>\n<pre><code>public final class PrintJobInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrintJobInfo.html
PrintManager	A										<section class="prog__container"><p> System level service for accessing the printing capabilities of the platform. <p> To obtain a handle to the print manager do the following: </p>\n<pre><code>public final class PrintManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/print/PrintManager.html
android.print.pdf	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/print/pdf/package-summary.html
PrintedPdfDocument	A										<section class="prog__container"><p> This class is a helper for creating a PDF file for given print attributes. It is useful for implementing printing via the native Android graphics APIs. <p> This class computes the page width, page height, and content rectangle from the provided print attributes and these precomputed values can be accessed via <pre><code> <a href="https://developer.android.com/reference/android/print/pdf/PrintedPdfDocument.html#getPageWidth()"> getPageWidth() </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/print/pdf/PrintedPdfDocument.html#getPageHeight()"> getPageHeight() </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/print/pdf/PrintedPdfDocument.html#getPageContentRect()"> getPageContentRect() </a> </code></pre> , respectively. The <pre><code> <a href="https://developer.android.com/reference/android/print/pdf/PrintedPdfDocument.html#startPage(int)"> startPage(int) </a> </code></pre> methods creates pages whose <pre><code> <a href="https://developer.android.com/reference/android/graphics/pdf/PdfDocument.PageInfo.html"> PageInfo </a> </code></pre> is initialized with the precomputed values for width, height, and content rectangle. <p> A typical use of the APIs looks like this: </p>\n<pre><code>public class PrintedPdfDocument\n</code></pre></section>	https://developer.android.com/reference/android/print/pdf/PrintedPdfDocument.html
CustomPrinterIconCallback	A										<section class="prog__container"><p> Callback for <pre><code> <a href="https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html#onRequestCustomPrinterIcon(android.print.PrinterId, android.os.CancellationSignal, android.printservice.CustomPrinterIconCallback)"> onRequestCustomPrinterIcon(PrinterId, CancellationSignal, CustomPrinterIconCallback) </a> </code></pre> .</p>\n<pre><code>public final class CustomPrinterIconCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/printservice/CustomPrinterIconCallback.html
android.printservice	A										<section class="prog__container">Provides classes for implementing print services. Print services are plug-in componentsthat know how to talk to printers via some standard protocols. These services serve as abridge between the system and the printers. Hence, the printer and print protocol specificimplementation is factored out of the system and can be independently developed and updated.</section>	https://developer.android.com/reference/android/printservice/package-summary.html
PrintDocument	A										<section class="prog__container"><p> This class represents a printed document from the perspective of a print service. It exposes APIs to query the document and obtain its data. <p> <strong> Note: </strong> All methods of this class must be executed on the main application thread. </p>\n<pre><code>public final class PrintDocument\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/printservice/PrintDocument.html
PrinterDiscoverySession	A										<section class="prog__container"><p> This class encapsulates the interaction between a print service and the system during printer discovery. During printer discovery you are responsible for adding discovered printers, removing previously added printers that disappeared, and updating already added printers. <p> During the lifetime of this session you may be asked to start and stop performing printer discovery multiple times. You will receive a call to <pre><code> <a href="https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html#onStartPrinterDiscovery(java.util.List&lt;android.print.PrinterId&gt;)"> onStartPrinterDiscovery(List) </a> </code></pre> to start printer discovery and a call to <pre><code> <a href="https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html#onStopPrinterDiscovery()"> onStopPrinterDiscovery() </a> </code></pre> to stop printer discovery. When the system is no longer interested in printers discovered by this session you will receive a call to <pre><code> <a href="https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html#onDestroy()"> onDestroy() </a> </code></pre> at which point the system will no longer call into the session and all the session methods will do nothing. </p>\n<pre><code>public abstract class PrinterDiscoverySession\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/printservice/PrinterDiscoverySession.html
PrintJob	A										<section class="prog__container"><p> This class represents a print job from the perspective of a print service. It provides APIs for observing the print job state and performing operations on the print job. <p> <strong> Note: </strong> All methods of this class must be invoked on the main application thread. </p>\n<pre><code>public final class PrintJob\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/printservice/PrintJob.html
PrintService	A										<section class="prog__container"><p> <p> This is the base class for implementing print services. A print service knows how to discover and interact one or more printers via one or more protocols. </p>\n<pre><code>public abstract class PrintService\n</code></pre></section>	https://developer.android.com/reference/android/printservice/PrintService.html
AlarmClock	A										<section class="prog__container"><p> The AlarmClock provider contains an Intent action and extras that can be used to start an Activity to set a new alarm or timer in an alarm clock application. Applications that wish to receive the ACTION_SET_ALARM and ACTION_SET_TIMER Intents should create an activity to handle the Intent that requires the permission com.android.alarm.permission.SET_ALARM. Applications that wish to create a new alarm or timer should use <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#startActivity(android.content.Intent)"> Context.startActivity() </a> </code></pre> so that the user has the option of choosing which alarm clock application to use.</p>\n<pre><code>public final class AlarmClock\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/AlarmClock.html
BaseColumns	A										<section class="prog__container"><p> The count of rows in a directory.</p>\n<pre><code>public interface BaseColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/BaseColumns.html
BlockedNumberContract.BlockedNumbers	A										<section class="prog__container"><p> Constants to interact with the blocked numbers list.</p>\n<pre><code>public static class BlockedNumberContract.BlockedNumbers\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/BlockedNumberContract.BlockedNumbers.html
BlockedNumberContract	A										<section class="prog__container"><p> <p> The contract between the blockednumber provider and applications. Contains definitions for the supported URIs and columns. </p>\n<pre><code>public class BlockedNumberContract\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/BlockedNumberContract.html
Browser	A										<section class="prog__container"><p> The name of the extra data when starting the Browser from another application.</p>\n<pre><code>public class Browser\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Browser.html
CalendarContract.Attendees	A										<section class="prog__container"><p> Fields and helpers for interacting with Attendees. Each row of this table represents a single attendee or guest of an event. Calling <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.Attendees.html#query(android.content.ContentResolver, long, java.lang.String[])"> query(ContentResolver, long, String[]) </a> </code></pre> will return a list of attendees for the event with the given eventId. Both apps and sync adapters may write to this table. There are six writable fields and all of them except <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.AttendeesColumns.html#ATTENDEE_NAME"> ATTENDEE_NAME </a> </code></pre> must be included when inserting a new attendee. They are: <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.AttendeesColumns.html#EVENT_ID"> EVENT_ID </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.AttendeesColumns.html#ATTENDEE_NAME"> ATTENDEE_NAME </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.AttendeesColumns.html#ATTENDEE_EMAIL"> ATTENDEE_EMAIL </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.AttendeesColumns.html#ATTENDEE_RELATIONSHIP"> ATTENDEE_RELATIONSHIP </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.AttendeesColumns.html#ATTENDEE_TYPE"> ATTENDEE_TYPE </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.AttendeesColumns.html#ATTENDEE_STATUS"> ATTENDEE_STATUS </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.AttendeesColumns.html#ATTENDEE_IDENTITY"> ATTENDEE_IDENTITY </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.AttendeesColumns.html#ATTENDEE_ID_NAMESPACE"> ATTENDEE_ID_NAMESPACE </a> </code></pre> </li> </ul></p>\n<pre><code>public static final class CalendarContract.Attendees\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.Attendees.html
CalendarContract.AttendeesColumns	A										<section class="prog__container"><p> Columns from the Attendees table that other tables join into themselves.</p>\n<pre><code>protected static interface CalendarContract.AttendeesColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.AttendeesColumns.html
CalendarContract.CalendarAlerts	A										<section class="prog__container"><p> Fields and helpers for accessing calendar alerts information. These fields are for tracking which alerts have been fired. Scheduled alarms will generate an intent using <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.html#ACTION_EVENT_REMINDER"> ACTION_EVENT_REMINDER </a> </code></pre> . Apps that receive this action may update the <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.CalendarAlertsColumns.html#STATE"> STATE </a> </code></pre> for the reminder when they have finished handling it. Apps that have their notifications disabled should not modify the table to ensure that they do not conflict with another app that is generating a notification. In general, apps should not need to write to this table directly except to update the state of a reminder.</p>\n<pre><code>public static final class CalendarContract.CalendarAlerts\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.CalendarAlerts.html
CalendarContract.CalendarAlertsColumns	A										<section class="prog__container"><p> The alarm time of the event, in UTC.</p>\n<pre><code>protected static interface CalendarContract.CalendarAlertsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.CalendarAlertsColumns.html
CalendarContract.CalendarCache	A										<section class="prog__container"><p> CalendarCache stores some settings for calendar including the current time zone for the instances. These settings are stored using a key/value scheme. A <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.CalendarCacheColumns.html#KEY"> KEY </a> </code></pre> must be specified when updating these values.</p>\n<pre><code>public static final class CalendarContract.CalendarCache\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.CalendarCache.html
CalendarContract.CalendarCacheColumns	A										<section class="prog__container"><p> The key for the setting.</p>\n<pre><code>protected static interface CalendarContract.CalendarCacheColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.CalendarCacheColumns.html
CalendarContract.CalendarColumns	A										<section class="prog__container"><p> Columns specific to the Calendars Uri that other Uris can query.</p>\n<pre><code>protected static interface CalendarContract.CalendarColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.CalendarColumns.html
CalendarContract.CalendarEntity	A										<section class="prog__container"><p> Class that represents a Calendar Entity. There is one entry per calendar. This is a helper class to make batch operations easier.</p>\n<pre><code>public static final class CalendarContract.CalendarEntity\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.CalendarEntity.html
CalendarContract.Calendars	A										<section class="prog__container"><p> Constants and helpers for the Calendars table, which contains details for individual calendars. </p>\n<pre><code>public static final class CalendarContract.Calendars\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.Calendars.html
CalendarContract.CalendarSyncColumns	A										<section class="prog__container"><p> Generic columns for use by sync adapters. The specific functions of these columns are private to the sync adapter. Other clients of the API should not attempt to either read or write this column. These columns are editable as part of the Calendars Uri, but can only be read if accessed through any other Uri.</p>\n<pre><code>protected static interface CalendarContract.CalendarSyncColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.CalendarSyncColumns.html
CalendarContract.Colors	A										<section class="prog__container"><p> Fields for accessing colors available for a given account. Colors are referenced by <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.ColorsColumns.html#COLOR_KEY"> COLOR_KEY </a> </code></pre> which must be unique for a given account name/type. These values can only be updated by the sync adapter. Only <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.ColorsColumns.html#COLOR"> COLOR </a> </code></pre> may be updated after the initial insert. In addition, a row can only be deleted once all references to that color have been removed from the <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.Calendars.html"> CalendarContract.Calendars </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.Events.html"> CalendarContract.Events </a> </code></pre> tables.</p>\n<pre><code>public static final class CalendarContract.Colors\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.Colors.html
CalendarContract.ColorsColumns	A										<section class="prog__container"><p> The color as an 8-bit ARGB integer value.</p>\n<pre><code>protected static interface CalendarContract.ColorsColumns\nimplements <a href="https://developer.android.com/reference/android/provider/SyncStateContract.Columns.html">SyncStateContract.Columns</a></code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.ColorsColumns.html
CalendarContract.EventDays	A										<section class="prog__container"><p> Fields and helpers for querying for a list of days that contain events.</p>\n<pre><code>public static final class CalendarContract.EventDays\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.EventDays.html
CalendarContract.EventDaysColumns	A										<section class="prog__container"><p> The Julian ending day number.</p>\n<pre><code>protected static interface CalendarContract.EventDaysColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.EventDaysColumns.html
CalendarContract.Events	A										<section class="prog__container"><p> Constants and helpers for the Events table, which contains details for individual events. </p>\n<pre><code>public static final class CalendarContract.Events\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.Events.html
CalendarContract.EventsColumns	A										<section class="prog__container"><p> Columns from the Events table that other tables join into themselves.</p>\n<pre><code>protected static interface CalendarContract.EventsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.EventsColumns.html
CalendarContract.EventsEntity	A										<section class="prog__container"><p> Class that represents an Event Entity. There is one entry per event. Recurring events show up as a single entry. This is a helper class to make batch operations easier. A <pre><code> <a href="https://developer.android.com/reference/android/content/ContentResolver.html"> ContentResolver </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProviderClient.html"> ContentProviderClient </a> </code></pre> is required as the helper does additional queries to add reminders and attendees to each entry.</p>\n<pre><code>public static final class CalendarContract.EventsEntity\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.EventsEntity.html
CalendarContract.ExtendedProperties	A										<section class="prog__container"><p> Fields for accessing the Extended Properties. This is a generic set of name/value pairs for use by sync adapters to add extra information to events. There are three writable columns and all three must be present when inserting a new value. They are: <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.ExtendedPropertiesColumns.html#EVENT_ID"> EVENT_ID </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.ExtendedPropertiesColumns.html#NAME"> NAME </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.ExtendedPropertiesColumns.html#VALUE"> VALUE </a> </code></pre> </li> </ul></p>\n<pre><code>public static final class CalendarContract.ExtendedProperties\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.ExtendedProperties.html
CalendarContract.ExtendedPropertiesColumns	A										<section class="prog__container"><p> The event the extended property belongs to.</p>\n<pre><code>protected static interface CalendarContract.ExtendedPropertiesColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.ExtendedPropertiesColumns.html
CalendarContract	A										<section class="prog__container"><p> <p> The contract between the calendar provider and applications. Contains definitions for the supported URIs and data columns. </p>\n<pre><code>public final class CalendarContract\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.html
CalendarContract.Instances	A										<section class="prog__container"><p> Fields and helpers for interacting with Instances. An instance is a single occurrence of an event including time zone specific start and end days and minutes. The instances table is not writable and only provides a way to query event occurrences.</p>\n<pre><code>public static final class CalendarContract.Instances\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.Instances.html
CalendarContract.Reminders	A										<section class="prog__container"><p> Fields and helpers for accessing reminders for an event. Each row of this table represents a single reminder for an event. Calling <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.Reminders.html#query(android.content.ContentResolver, long, java.lang.String[])"> query(ContentResolver, long, String[]) </a> </code></pre> will return a list of reminders for the event with the given eventId. Both apps and sync adapters may write to this table. There are three writable fields and all of them must be included when inserting a new reminder. They are: <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.RemindersColumns.html#EVENT_ID"> EVENT_ID </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.RemindersColumns.html#MINUTES"> MINUTES </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/provider/CalendarContract.RemindersColumns.html#METHOD"> METHOD </a> </code></pre> </li> </ul></p>\n<pre><code>public static final class CalendarContract.Reminders\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.Reminders.html
CalendarContract.RemindersColumns	A										<section class="prog__container"><p> The event the reminder belongs to.</p>\n<pre><code>protected static interface CalendarContract.RemindersColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.RemindersColumns.html
CalendarContract.SyncColumns	A										<section class="prog__container"><p> Columns for Sync information used by Calendars and Events tables. These have specific uses which are expected to be consistent by the app and sync adapter.</p>\n<pre><code>protected static interface CalendarContract.SyncColumns\nimplements <a href="https://developer.android.com/reference/android/provider/CalendarContract.CalendarSyncColumns.html">CalendarContract.CalendarSyncColumns</a></code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.SyncColumns.html
CalendarContract.SyncState	A										<section class="prog__container"><p> A table provided for sync adapters to use for storing private sync state data.</p>\n<pre><code>public static final class CalendarContract.SyncState\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/CalendarContract.SyncState.html
CallLog.Calls	A										<section class="prog__container"><p> Contains the recent calls.</p>\n<pre><code>public static class CallLog.Calls\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/CallLog.Calls.html
CallLog	A										<section class="prog__container"><p> The CallLog provider contains information about placed and received calls.</p>\n<pre><code>public class CallLog\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/CallLog.html
Contacts.ContactMethods	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static final class Contacts.ContactMethods\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.ContactMethods.html
Contacts.ContactMethodsColumns	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static interface Contacts.ContactMethodsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.ContactMethodsColumns.html
Contacts.Extensions	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static final class Contacts.Extensions\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.Extensions.html
Contacts.ExtensionsColumns	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static interface Contacts.ExtensionsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.ExtensionsColumns.html
Contacts.GroupMembership	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static final class Contacts.GroupMembership\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.GroupMembership.html
Contacts.Groups	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static final class Contacts.Groups\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.Groups.html
Contacts.GroupsColumns	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static interface Contacts.GroupsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.GroupsColumns.html
Contacts	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> The APIs have been superseded by <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> . The newer APIs allow access multiple accounts and support aggregation of similar contacts. These APIs continue to work but will only return data for the first Google account created, which matches the original behavior. </p>\n<pre><code>public class Contacts\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.html
Contacts.Intents	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static final class Contacts.Intents\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.Intents.html
Contacts.Intents.Insert	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static final class Contacts.Intents.Insert\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.Intents.Insert.html
Contacts.Intents.UI	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> Do not use. This is not supported. </p>\n<pre><code>public static final class Contacts.Intents.UI\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.Intents.UI.html
Contacts.OrganizationColumns	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static interface Contacts.OrganizationColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.OrganizationColumns.html
Contacts.Organizations	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static final class Contacts.Organizations\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.Organizations.html
Contacts.People.ContactMethods	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static final class Contacts.People.ContactMethods\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.People.ContactMethods.html
Contacts.People.Extensions	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static class Contacts.People.Extensions\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.People.Extensions.html
Contacts.People	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static final class Contacts.People\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.People.html
Contacts.People.Phones	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static final class Contacts.People.Phones\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.People.Phones.html
Contacts.PeopleColumns	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static interface Contacts.PeopleColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.PeopleColumns.html
Contacts.Phones	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static final class Contacts.Phones\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.Phones.html
Contacts.PhonesColumns	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static interface Contacts.PhonesColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.PhonesColumns.html
Contacts.Photos	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static final class Contacts.Photos\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.Photos.html
Contacts.PhotosColumns	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static interface Contacts.PhotosColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.PhotosColumns.html
Contacts.PresenceColumns	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static interface Contacts.PresenceColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.PresenceColumns.html
Contacts.Settings	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static final class Contacts.Settings\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.Settings.html
Contacts.SettingsColumns	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 5. </strong> <br/> see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.html"> ContactsContract </a> </code></pre> </p>\n<pre><code>public static interface Contacts.SettingsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Contacts.SettingsColumns.html
ContactsContract.AggregationExceptions	A										<section class="prog__container"><p> <p> Constants for the contact aggregation exceptions table, which contains aggregation rules overriding those used by automatic aggregation. This type only supports query and update. Neither insert nor delete are supported. </p>\n<pre><code>public static final class ContactsContract.AggregationExceptions\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.AggregationExceptions.html
ContactsContract.BaseSyncColumns	A										<section class="prog__container"><p> Generic columns for use by sync adapters. The specific functions of these columns are private to the sync adapter. Other clients of the API should not attempt to either read or write this column.</p>\n<pre><code>protected static interface ContactsContract.BaseSyncColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.BaseSyncColumns.html
ContactsContract.CommonDataKinds.BaseTypes	A										<section class="prog__container"><p> The base types that all "Typed" data kinds support.</p>\n<pre><code>public static interface ContactsContract.CommonDataKinds.BaseTypes\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.BaseTypes.html
ContactsContract.CommonDataKinds.Callable	A										<section class="prog__container"><p> <p> Convenient functionalities for "callable" data. Note that, this is NOT a separate data kind. </p>\n<pre><code>public static final class ContactsContract.CommonDataKinds.Callable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Callable.html
ContactsContract.CommonDataKinds.CommonColumns	A										<section class="prog__container"><p> Columns common across the specific types.</p>\n<pre><code>protected static interface ContactsContract.CommonDataKinds.CommonColumns\nimplements <a href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.BaseTypes.html">ContactsContract.CommonDataKinds.BaseTypes</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.CommonColumns.html
ContactsContract.CommonDataKinds.Contactables	A										<section class="prog__container"><p> A special class of data items, used to refer to types of data that can be used to attempt to start communicating with a person ( <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html"> ContactsContract.CommonDataKinds.Phone </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html"> ContactsContract.CommonDataKinds.Email </a> </code></pre> ). Note that this is NOT a separate data kind. This URI allows the ContactsProvider to return a unified result for data items that users can use to initiate communications with another contact. <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html"> ContactsContract.CommonDataKinds.Phone </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html"> ContactsContract.CommonDataKinds.Email </a> </code></pre> are the current data types in this category.</p>\n<pre><code>public static final class ContactsContract.CommonDataKinds.Contactables\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Contactables.html
ContactsContract.CommonDataKinds.Email	A										<section class="prog__container"><p> <p> A data kind representing an email address. </p>\n<pre><code>public static final class ContactsContract.CommonDataKinds.Email\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html
ContactsContract.CommonDataKinds.Event	A										<section class="prog__container"><p> <p> A data kind representing an event. </p>\n<pre><code>public static final class ContactsContract.CommonDataKinds.Event\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Event.html
ContactsContract.CommonDataKinds.GroupMembership	A										<section class="prog__container"><p> <p> Group Membership. </p>\n<pre><code>public static final class ContactsContract.CommonDataKinds.GroupMembership\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.GroupMembership.html
ContactsContract.CommonDataKinds	A										<section class="prog__container"><p> Container for definitions of common data types stored in the <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.Data.html"> ContactsContract.Data </a> </code></pre> table.</p>\n<pre><code>public static final class ContactsContract.CommonDataKinds\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.html
ContactsContract.CommonDataKinds.Identity	A										<section class="prog__container"><p> A data kind representing an Identity related to the contact. <p> This can be used as a signal by the aggregator to combine raw contacts into contacts, e.g. if two contacts have Identity rows with the same NAMESPACE and IDENTITY values the aggregator can know that they refer to the same person. </p>\n<pre><code>public static final class ContactsContract.CommonDataKinds.Identity\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Identity.html
ContactsContract.CommonDataKinds.Im	A										<section class="prog__container"><p> <p> A data kind representing an IM address </p>\n<pre><code>public static final class ContactsContract.CommonDataKinds.Im\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html
ContactsContract.CommonDataKinds.Nickname	A										<section class="prog__container"><p> <p> A data kind representing the contact's nickname. For example, for Bob Parr ("Mr. Incredible"): <pre> ArrayList&lt;ContentProviderOperation&gt; ops = new ArrayList&lt;ContentProviderOperation&gt;(); ops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI) .withValue(Data.RAW_CONTACT_ID, rawContactId) .withValue(Data.MIMETYPE, StructuredName.CONTENT_ITEM_TYPE) .withValue(StructuredName.DISPLAY_NAME, "Bob Parr") .build()); ops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI) .withValue(Data.RAW_CONTACT_ID, rawContactId) .withValue(Data.MIMETYPE, Nickname.CONTENT_ITEM_TYPE) .withValue(Nickname.NAME, "Mr. Incredible") .withValue(Nickname.TYPE, Nickname.TYPE_CUSTOM) .withValue(Nickname.LABEL, "Superhero") .build()); getContentResolver().applyBatch(ContactsContract.AUTHORITY, ops); </pre> </p>\n<pre><code>public static final class ContactsContract.CommonDataKinds.Nickname\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Nickname.html
ContactsContract.CommonDataKinds.Note	A										<section class="prog__container"><p> <p> Notes about the contact. </p>\n<pre><code>public static final class ContactsContract.CommonDataKinds.Note\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Note.html
ContactsContract.CommonDataKinds.Organization	A										<section class="prog__container"><p> <p> A data kind representing an organization. </p>\n<pre><code>public static final class ContactsContract.CommonDataKinds.Organization\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html
ContactsContract.CommonDataKinds.Phone	A										<section class="prog__container"><p> <p> A data kind representing a telephone number. </p>\n<pre><code>public static final class ContactsContract.CommonDataKinds.Phone\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html
ContactsContract.CommonDataKinds.Photo	A										<section class="prog__container"><p> <p> A data kind representing a photo for the contact. </p>\n<pre><code>public static final class ContactsContract.CommonDataKinds.Photo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Photo.html
ContactsContract.CommonDataKinds.Relation	A										<section class="prog__container"><p> <p> A data kind representing a relation. </p>\n<pre><code>public static final class ContactsContract.CommonDataKinds.Relation\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html
ContactsContract.CommonDataKinds.SipAddress	A										<section class="prog__container"><p> <p> A data kind representing a SIP address for the contact. </p>\n<pre><code>public static final class ContactsContract.CommonDataKinds.SipAddress\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.SipAddress.html
ContactsContract.CommonDataKinds.StructuredName	A										<section class="prog__container"><p> A data kind representing the contact's proper name. You can use all columns defined for <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.Data.html"> ContactsContract.Data </a> </code></pre> as well as the following aliases. </p>\n<pre><code>public static final class ContactsContract.CommonDataKinds.StructuredName\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html
ContactsContract.CommonDataKinds.StructuredPostal	A										<section class="prog__container"><p> <p> A data kind representing a postal addresses. </p>\n<pre><code>public static final class ContactsContract.CommonDataKinds.StructuredPostal\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html
ContactsContract.CommonDataKinds.Website	A										<section class="prog__container"><p> <p> A data kind representing a website related to the contact. </p>\n<pre><code>public static final class ContactsContract.CommonDataKinds.Website\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Website.html
ContactsContract.ContactNameColumns	A										<section class="prog__container"><p> Contact name and contact name metadata columns in the RawContacts table.</p>\n<pre><code>protected static interface ContactsContract.ContactNameColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.ContactNameColumns.html
ContactsContract.ContactOptionsColumns	A										<section class="prog__container"><p> Columns of <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html"> ContactsContract.Contacts </a> </code></pre> that track the user's preferences for, or interactions with, the contact.</p>\n<pre><code>protected static interface ContactsContract.ContactOptionsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.ContactOptionsColumns.html
ContactsContract.Contacts.AggregationSuggestions.Builder	A										<section class="prog__container"><p> A convenience builder for aggregation suggestion content URIs.</p>\n<pre><code>public static final class ContactsContract.Contacts.AggregationSuggestions.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Contacts.AggregationSuggestions.Builder.html
ContactsContract.Contacts.AggregationSuggestions	A										<section class="prog__container"><p> <p> A <i> read-only </i> sub-directory of a single contact aggregate that contains all aggregation suggestions (other contacts). The aggregation suggestions are computed based on approximate data matches with this contact. </p>\n<pre><code>public static final class ContactsContract.Contacts.AggregationSuggestions\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Contacts.AggregationSuggestions.html
ContactsContract.Contacts.Data	A										<section class="prog__container"><p> A sub-directory of a single contact that contains all of the constituent raw contact <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.Data.html"> ContactsContract.Data </a> </code></pre> rows. This directory can be used either with a <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#CONTENT_URI"> CONTENT_URI </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#CONTENT_LOOKUP_URI"> CONTENT_LOOKUP_URI </a> </code></pre> .</p>\n<pre><code>public static final class ContactsContract.Contacts.Data\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Data.html
ContactsContract.Contacts.Entity	A										<section class="prog__container"><p> <p> A sub-directory of a contact that contains all of its <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.html"> ContactsContract.RawContacts </a> </code></pre> as well as <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.Data.html"> ContactsContract.Data </a> </code></pre> rows. To access this directory append <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Entity.html#CONTENT_DIRECTORY"> CONTENT_DIRECTORY </a> </code></pre> to the contact URI. </p>\n<pre><code>public static final class ContactsContract.Contacts.Entity\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Entity.html
ContactsContract.Contacts	A										<section class="prog__container"><p> Constants for the contacts table, which contains a record per aggregate of raw contacts representing the same person. </p>\n<pre><code>public static class ContactsContract.Contacts\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html
ContactsContract.Contacts.Photo	A										<section class="prog__container"><p> A <i> read-only </i> sub-directory of a single contact that contains the contact's primary photo. The photo may be stored in up to two ways - the default "photo" is a thumbnail-sized image stored directly in the data row, while the "display photo", if present, is a larger version stored as a file. <p> Usage example: <dl> <dt> Retrieving the thumbnail-sized photo </dt> <dd> <pre> public InputStream openPhoto(long contactId) { Uri contactUri = ContentUris.withAppendedId(Contacts.CONTENT_URI, contactId); Uri photoUri = Uri.withAppendedPath(contactUri, Contacts.Photo.CONTENT_DIRECTORY); Cursor cursor = getContentResolver().query(photoUri, new String[] {Contacts.Photo.PHOTO}, null, null, null); if (cursor == null) { return null; } try { if (cursor.moveToFirst()) { byte[] data = cursor.getBlob(0); if (data != null) { return new ByteArrayInputStream(data); } } } finally { cursor.close(); } return null; } </pre> </dd> <dt> Retrieving the larger photo version </dt> <dd> <pre> public InputStream openDisplayPhoto(long contactId) { Uri contactUri = ContentUris.withAppendedId(Contacts.CONTENT_URI, contactId); Uri displayPhotoUri = Uri.withAppendedPath(contactUri, Contacts.Photo.DISPLAY_PHOTO); try { AssetFileDescriptor fd = getContentResolver().openAssetFileDescriptor(displayPhotoUri, "r"); return fd.createInputStream(); } catch (IOException e) { return null; } } </pre> </dd> </dl> </p>\n<pre><code>public static final class ContactsContract.Contacts.Photo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Photo.html
ContactsContract.ContactsColumns	A										<section class="prog__container"><p> Columns of <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html"> ContactsContract.Contacts </a> </code></pre> that refer to intrinsic properties of the contact, as opposed to the user-specified options found in <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.ContactOptionsColumns.html"> ContactsContract.ContactOptionsColumns </a> </code></pre> .</p>\n<pre><code>protected static interface ContactsContract.ContactsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.ContactsColumns.html
ContactsContract.ContactStatusColumns	A										<section class="prog__container"><p> <b> See also: </b></p>\n<pre><code>protected static interface ContactsContract.ContactStatusColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.ContactStatusColumns.html
ContactsContract.Data	A										<section class="prog__container"><p> <p> Constants for the data table, which contains data points tied to a raw contact. Each row of the data table is typically used to store a single piece of contact information (such as a phone number) and its associated metadata (such as whether it is a work or home number). </p>\n<pre><code>public static final class ContactsContract.Data\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Data.html
ContactsContract.DataColumns	A										<section class="prog__container"><p> Columns in the Data table.</p>\n<pre><code>protected static interface ContactsContract.DataColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.DataColumns.html
ContactsContract.DataColumnsWithJoins	A										<section class="prog__container"><p> Combines all columns returned by <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.Data.html"> ContactsContract.Data </a> </code></pre> table queries.</p>\n<pre><code>protected static interface ContactsContract.DataColumnsWithJoins\nimplements <a href="https://developer.android.com/reference/android/provider/BaseColumns.html">BaseColumns</a>, <a href="https://developer.android.com/reference/android/provider/ContactsContract.DataColumns.html">ContactsContract.DataColumns</a>, <a href="https://developer.android.com/reference/android/provider/ContactsContract.StatusColumns.html">ContactsContract.StatusColumns</a>, <a href="https://developer.android.com/reference/android/provider/ContactsContract.RawContactsColumns.html">ContactsContract.RawContactsColumns</a>, <a href="https://developer.android.com/reference/android/provider/ContactsContract.ContactsColumns.html">ContactsContract.ContactsColumns</a>, <a href="https://developer.android.com/reference/android/provider/ContactsContract.ContactNameColumns.html">ContactsContract.ContactNameColumns</a>, <a href="https://developer.android.com/reference/android/provider/ContactsContract.ContactOptionsColumns.html">ContactsContract.ContactOptionsColumns</a>, <a href="https://developer.android.com/reference/android/provider/ContactsContract.ContactStatusColumns.html">ContactsContract.ContactStatusColumns</a>, <a href="https://developer.android.com/reference/android/provider/ContactsContract.DataUsageStatColumns.html">ContactsContract.DataUsageStatColumns</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.DataColumnsWithJoins.html
ContactsContract.DataUsageFeedback	A										<section class="prog__container"><p> <p> API allowing applications to send usage information for each <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Data.html"> ContactsContract.Contacts.Data </a> </code></pre> row to the Contacts Provider. Applications can also clear all usage information. </p>\n<pre><code>public static final class ContactsContract.DataUsageFeedback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.DataUsageFeedback.html
ContactsContract.DataUsageStatColumns	A										<section class="prog__container"><p> Columns in the Data_Usage_Stat table</p>\n<pre><code>protected static interface ContactsContract.DataUsageStatColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.DataUsageStatColumns.html
ContactsContract.DeletedContacts	A										<section class="prog__container"><p> Constants for the deleted contact table. This table holds a log of deleted contacts. <p> Log older than <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.DeletedContacts.html#DAYS_KEPT_MILLISECONDS"> DAYS_KEPT_MILLISECONDS </a> </code></pre> may be deleted. </p>\n<pre><code>public static final class ContactsContract.DeletedContacts\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.DeletedContacts.html
ContactsContract.DeletedContactsColumns	A										<section class="prog__container"><p> Time (milliseconds since epoch) that the contact was deleted.</p>\n<pre><code>protected static interface ContactsContract.DeletedContactsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.DeletedContactsColumns.html
ContactsContract.Directory	A										<section class="prog__container"><p> A Directory represents a contacts corpus, e.g. Local contacts, Google Apps Global Address List or Corporate Global Address List. <p> A Directory is implemented as a content provider with its unique authority and the same API as the main Contacts Provider. However, there is no expectation that every directory provider will implement this Contract in its entirety. If a directory provider does not have an implementation for a specific request, it should throw an UnsupportedOperationException. </p>\n<pre><code>public static final class ContactsContract.Directory\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Directory.html
ContactsContract.DisplayNameSources	A										<section class="prog__container"><p> Types of data used to produce the display name for a contact. In the order of increasing priority: <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.DisplayNameSources.html#EMAIL"> EMAIL </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.DisplayNameSources.html#PHONE"> PHONE </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.DisplayNameSources.html#ORGANIZATION"> ORGANIZATION </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.DisplayNameSources.html#NICKNAME"> NICKNAME </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.DisplayNameSources.html#STRUCTURED_PHONETIC_NAME"> STRUCTURED_PHONETIC_NAME </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.DisplayNameSources.html#STRUCTURED_NAME"> STRUCTURED_NAME </a> </code></pre> .</p>\n<pre><code>public static interface ContactsContract.DisplayNameSources\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.DisplayNameSources.html
ContactsContract.DisplayPhoto	A										<section class="prog__container"><p> Helper class for accessing full-size photos by photo file ID. <p> Usage example: <dl> <dt> Retrieving a full-size photo by photo file ID (see <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.ContactsColumns.html#PHOTO_FILE_ID"> PHOTO_FILE_ID </a> </code></pre> ) </dt> <dd> <pre> public InputStream openDisplayPhoto(long photoFileId) { Uri displayPhotoUri = ContentUris.withAppendedId(DisplayPhoto.CONTENT_URI, photoKey); try { AssetFileDescriptor fd = getContentResolver().openAssetFileDescriptor( displayPhotoUri, "r"); return fd.createInputStream(); } catch (IOException e) { return null; } } </pre> </dd> </dl> </p>\n<pre><code>public static final class ContactsContract.DisplayPhoto\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.DisplayPhoto.html
ContactsContract.FullNameStyle	A										<section class="prog__container"><p> Constants for various styles of combining given name, family name etc into a full name. For example, the western tradition follows the pattern 'given name' 'middle name' 'family name' with the alternative pattern being 'family name', 'given name' 'middle name'. The CJK tradition is 'family name' 'middle name' 'given name', with Japanese favoring a space between the names and Chinese omitting the space.</p>\n<pre><code>public static interface ContactsContract.FullNameStyle\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.FullNameStyle.html
ContactsContract.Groups	A										<section class="prog__container"><p> Constants for the groups table. Only per-account groups are supported. </p>\n<pre><code>public static final class ContactsContract.Groups\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Groups.html
ContactsContract.GroupsColumns	A										<section class="prog__container"><p> <b> See also: </b></p>\n<pre><code>protected static interface ContactsContract.GroupsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.GroupsColumns.html
ContactsContract	A										<section class="prog__container"><p> <p> The contract between the contacts provider and applications. Contains definitions for the supported URIs and columns. These APIs supersede <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html"> ContactsContract.Contacts </a> </code></pre> . </p>\n<pre><code>public final class ContactsContract\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.html
ContactsContract.Intents	A										<section class="prog__container"><p> Contains helper classes used to create or manage <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html"> Intents </a> </code></pre> that involve contacts.</p>\n<pre><code>public static final class ContactsContract.Intents\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Intents.html
ContactsContract.Intents.Insert	A										<section class="prog__container"><p> Convenience class that contains string constants used to create contact <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html"> Intents </a> </code></pre> .</p>\n<pre><code>public static final class ContactsContract.Intents.Insert\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html
ContactsContract.PhoneLookup	A										<section class="prog__container"><p> A table that represents the result of looking up a phone number, for example for caller ID. To perform a lookup you must append the number you want to find to <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.PhoneLookup.html#CONTENT_FILTER_URI"> CONTENT_FILTER_URI </a> </code></pre> . This query is highly optimized. <pre> Uri uri = Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI, Uri.encode(phoneNumber)); resolver.query(uri, new String[]{PhoneLookup.DISPLAY_NAME,... </pre> </p>\n<pre><code>public static final class ContactsContract.PhoneLookup\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.PhoneLookup.html
ContactsContract.PhoneLookupColumns	A										<section class="prog__container"><p> <b> See also: </b></p>\n<pre><code>protected static interface ContactsContract.PhoneLookupColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.PhoneLookupColumns.html
ContactsContract.PhoneticNameStyle	A										<section class="prog__container"><p> Constants for various styles of capturing the pronunciation of a person's name.</p>\n<pre><code>public static interface ContactsContract.PhoneticNameStyle\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.PhoneticNameStyle.html
ContactsContract.PinnedPositions	A										<section class="prog__container"><p> <p> Contact-specific information about whether or not a contact has been pinned by the user at a particular position within the system contact application's user interface. </p>\n<pre><code>public static final class ContactsContract.PinnedPositions\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.PinnedPositions.html
ContactsContract.Presence	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 5. </strong> <br/> This old name was never meant to be made public. Do not use. </p>\n<pre><code>public static final class ContactsContract.Presence\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Presence.html
ContactsContract.PresenceColumns	A										<section class="prog__container"><p> Additional data mixed in with <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.StatusColumns.html"> ContactsContract.StatusColumns </a> </code></pre> to link back to specific <pre><code> <a href="https://developer.android.com/reference/android/provider/BaseColumns.html#_ID"> _ID </a> </code></pre> entries.</p>\n<pre><code>protected static interface ContactsContract.PresenceColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.PresenceColumns.html
ContactsContract.Profile	A										<section class="prog__container"><p> <p> Constants for the user's profile data, which is represented as a single contact on the device that represents the user. The profile contact is not aggregated together automatically in the same way that normal contacts are; instead, each account (including data set, if applicable) on the device may contribute a single raw contact representing the user's personal profile data from that source. </p>\n<pre><code>public static final class ContactsContract.Profile\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Profile.html
ContactsContract.ProfileSyncState	A										<section class="prog__container"><p> A table provided for sync adapters to use for storing private sync state data for the user's personal profile.</p>\n<pre><code>public static final class ContactsContract.ProfileSyncState\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.ProfileSyncState.html
ContactsContract.ProviderStatus	A										<section class="prog__container"><p> API for inquiring about the general status of the provider.</p>\n<pre><code>public static final class ContactsContract.ProviderStatus\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.ProviderStatus.html
ContactsContract.QuickContact	A										<section class="prog__container"><p> Helper methods to display QuickContact dialogs that display all the information belonging to a specific <pre><code> <a href="https://developer.android.com/reference/android/provider/Contacts.html"> Contacts </a> </code></pre> entry.</p>\n<pre><code>public static final class ContactsContract.QuickContact\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.QuickContact.html
ContactsContract.RawContacts.Data	A										<section class="prog__container"><p> A sub-directory of a single raw contact that contains all of its <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.Data.html"> ContactsContract.Data </a> </code></pre> rows. To access this directory append <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Data.html#CONTENT_DIRECTORY"> CONTENT_DIRECTORY </a> </code></pre> to the raw contact URI.</p>\n<pre><code>public static final class ContactsContract.RawContacts.Data\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.Data.html
ContactsContract.RawContacts.DisplayPhoto	A										<section class="prog__container"><p> <p> A sub-directory of a single raw contact that represents its primary display photo. To access this directory append <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.DisplayPhoto.html#CONTENT_DIRECTORY"> CONTENT_DIRECTORY </a> </code></pre> to the raw contact URI. The resulting URI represents an image file, and should be interacted with using ContentResolver.openAssetFileDescriptor. <p> <p> Note that this sub-directory also supports opening the photo as an asset file in write mode. Callers can create or replace the primary photo associated with this raw contact by opening the asset file and writing the full-size photo contents into it. When the file is closed, the image will be parsed, sized down if necessary for the full-size display photo and thumbnail dimensions, and stored. </p>\n<pre><code>public static final class ContactsContract.RawContacts.DisplayPhoto\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.DisplayPhoto.html
ContactsContract.RawContacts.Entity	A										<section class="prog__container"><p> <p> A sub-directory of a single raw contact that contains all of its <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.Data.html"> ContactsContract.Data </a> </code></pre> rows. To access this directory append <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.Entity.html#CONTENT_DIRECTORY"> CONTENT_DIRECTORY </a> </code></pre> to the raw contact URI. See <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.RawContactsEntity.html"> ContactsContract.RawContactsEntity </a> </code></pre> for a stand-alone table containing the same data. </p>\n<pre><code>public static final class ContactsContract.RawContacts.Entity\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.Entity.html
ContactsContract.RawContacts	A										<section class="prog__container"><p> Constants for the raw contacts table, which contains one row of contact information for each person in each synced account. Sync adapters and contact management apps are the primary consumers of this API. </p>\n<pre><code>public static final class ContactsContract.RawContacts\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.html
ContactsContract.RawContactsColumns	A										<section class="prog__container"><p> A concatenation of the account type and data set (delimited by a forward slash) - if the data set is empty, this will be the same as the account type.</p>\n<pre><code>protected static interface ContactsContract.RawContactsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.RawContactsColumns.html
ContactsContract.RawContactsEntity	A										<section class="prog__container"><p> <p> Constants for the raw contacts entities table, which can be thought of as an outer join of the raw_contacts table with the data table. It is a strictly read-only table. </p>\n<pre><code>public static final class ContactsContract.RawContactsEntity\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.RawContactsEntity.html
ContactsContract.SearchSnippets	A										<section class="prog__container"><p> Additional column returned by <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#CONTENT_FILTER_URI"> Contacts.CONTENT_FILTER_URI </a> </code></pre> explaining why the filter matched the contact. This column will contain extracts from the contact's constituent <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Data.html"> Data </a> </code></pre> items, formatted in a way that indicates the section of the snippet that matched the filter. <p> The following example searches for all contacts that match the query "presi" and requests the snippet column as well. <pre> Builder builder = Contacts.CONTENT_FILTER_URI.buildUpon(); builder.appendPath("presi"); // Defer snippeting to the client side if possible, for performance reasons. builder.appendQueryParameter(SearchSnippets.DEFERRED_SNIPPETING_KEY,"1"); Cursor cursor = getContentResolver().query(builder.build()); Bundle extras = cursor.getExtras(); if (extras.getBoolean(ContactsContract.DEFERRED_SNIPPETING)) { // Do our own snippet formatting. // For a contact with the email address (president@organization.com), the snippet // column will contain the string "president@organization.com". } else { // The snippet has already been pre-formatted, we can display it as is. // For a contact with the email address (president@organization.com), the snippet // column will contain the string "[presi]dent@organization.com". } </pre> </p>\n<pre><code>public static class ContactsContract.SearchSnippets\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.SearchSnippets.html
ContactsContract.Settings	A										<section class="prog__container"><p> <p> Contacts-specific settings for various <pre><code> <a href="https://developer.android.com/reference/android/accounts/Account.html"> Account </a> </code></pre> 's. </p>\n<pre><code>public static final class ContactsContract.Settings\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.Settings.html
ContactsContract.SettingsColumns	A										<section class="prog__container"><p> <b> See also: </b></p>\n<pre><code>protected static interface ContactsContract.SettingsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.SettingsColumns.html
ContactsContract.StatusColumns	A										<section class="prog__container"><p> Social status update columns.</p>\n<pre><code>protected static interface ContactsContract.StatusColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.StatusColumns.html
ContactsContract.StatusUpdates	A										<section class="prog__container"><p> <p> A status update is linked to a <pre><code> <a href="https://developer.android.com/reference/android/provider/ContactsContract.Data.html"> ContactsContract.Data </a> </code></pre> row and captures the user's latest status update via the corresponding source, e.g. "Having lunch" via "Google Talk". </p>\n<pre><code>public static class ContactsContract.StatusUpdates\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.StatusUpdates.html
ContactsContract.SyncColumns	A										<section class="prog__container"><p> Columns that appear when each row of a table belongs to a specific account, including sync information that an account may need.</p>\n<pre><code>protected static interface ContactsContract.SyncColumns\nimplements <a href="https://developer.android.com/reference/android/provider/ContactsContract.BaseSyncColumns.html">ContactsContract.BaseSyncColumns</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.SyncColumns.html
ContactsContract.SyncState	A										<section class="prog__container"><p> A table provided for sync adapters to use for storing private sync state data for contacts.</p>\n<pre><code>public static final class ContactsContract.SyncState\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/ContactsContract.SyncState.html
DocumentsContract.Document	A										<section class="prog__container"><p> Constants related to a document, including <pre><code> <a href="https://developer.android.com/reference/android/database/Cursor.html"> Cursor </a> </code></pre> column names and flags. <p> A document can be either an openable stream (with a specific MIME type), or a directory containing additional documents (with the <pre><code> <a href="https://developer.android.com/reference/android/provider/DocumentsContract.Document.html#MIME_TYPE_DIR"> MIME_TYPE_DIR </a> </code></pre> MIME type). A directory represents the top of a subtree containing zero or more documents, which can recursively contain even more documents and directories. <p> All columns are <em> read-only </em> to client applications. </p>\n<pre><code>public static final class DocumentsContract.Document\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/DocumentsContract.Document.html
DocumentsContract	A										<section class="prog__container"><p> Defines the contract between a documents provider and the platform. <p> To create a document provider, extend <pre><code> <a href="https://developer.android.com/reference/android/provider/DocumentsProvider.html"> DocumentsProvider </a> </code></pre> , which provides a foundational implementation of this contract. <p> All client apps must hold a valid URI permission grant to access documents, typically issued when a user makes a selection through <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT"> ACTION_OPEN_DOCUMENT </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_CREATE_DOCUMENT"> ACTION_CREATE_DOCUMENT </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT_TREE"> ACTION_OPEN_DOCUMENT_TREE </a> </code></pre> , or <pre><code> <a href="https://developer.android.com/reference/android/os/storage/StorageVolume.html#createAccessIntent(java.lang.String)"> StorageVolume.createAccessIntent </a> </code></pre> . </p>\n<pre><code>public final class DocumentsContract\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/DocumentsContract.html
DocumentsContract.Root	A										<section class="prog__container"><p> Constants related to a root of documents, including <pre><code> <a href="https://developer.android.com/reference/android/database/Cursor.html"> Cursor </a> </code></pre> column names and flags. A root is the start of a tree of documents, such as a physical storage device, or an account. Each root starts at the directory referenced by <pre><code> <a href="https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#COLUMN_DOCUMENT_ID"> COLUMN_DOCUMENT_ID </a> </code></pre> , which can recursively contain both documents and directories. <p> All columns are <em> read-only </em> to client applications. </p>\n<pre><code>public static final class DocumentsContract.Root\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/DocumentsContract.Root.html
DocumentsProvider	A										<section class="prog__container"><p> Base class for a document provider. A document provider offers read and write access to durable files, such as files stored on a local disk, or files in a cloud storage service. To create a document provider, extend this class, implement the abstract methods, and add it to your manifest like this: <pre class="prettyprint">&lt;manifest&gt; ... &lt;application&gt; ... &lt;provider android:name="com.example.MyCloudProvider" android:authorities="com.example.mycloudprovider" android:exported="true" android:grantUriPermissions="true" android:permission="android.permission.MANAGE_DOCUMENTS" android:enabled="@bool/isAtLeastKitKat"&gt; &lt;intent-filter&gt; &lt;action android:name="android.content.action.DOCUMENTS_PROVIDER" /&gt; &lt;/intent-filter&gt; &lt;/provider&gt; ... &lt;/application&gt;&lt;/manifest&gt;</pre> <p> When defining your provider, you must protect it with <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#MANAGE_DOCUMENTS"> MANAGE_DOCUMENTS </a> </code></pre> , which is a permission only the system can obtain. Applications cannot use a documents provider directly; they must go through <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT"> ACTION_OPEN_DOCUMENT </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_CREATE_DOCUMENT"> ACTION_CREATE_DOCUMENT </a> </code></pre> which requires a user to actively navigate and select documents. When a user selects documents through that UI, the system issues narrow URI permission grants to the requesting application. </p>\n<pre><code>public abstract class DocumentsProvider\n</code></pre></section>	https://developer.android.com/reference/android/provider/DocumentsProvider.html
LiveFolders	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 14. </strong> <br/> Live folders are no longer supported by Android. These have been replaced by the new <a href="https://developer.android.com/guide/topics/appwidgets/index.html#collections"> AppWidget Collection </a> APIs introduced in <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#HONEYCOMB"> HONEYCOMB </a> </code></pre> . These provide all of the features of live folders plus many more. The use of live folders is greatly discouraged because of security issues they introduce -- publishing a live folder requires making all data show for the live folder available to all applications with no permissions protecting it. </p>\n<pre><code>public final class LiveFolders\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/LiveFolders.html
MediaStore.Audio.AlbumColumns	A										<section class="prog__container"><p> Columns representing an album</p>\n<pre><code>public static interface MediaStore.Audio.AlbumColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.AlbumColumns.html
MediaStore.Audio.Albums	A										<section class="prog__container"><p> Contains artists for audio files</p>\n<pre><code>public static final class MediaStore.Audio.Albums\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.Albums.html
MediaStore.Audio.ArtistColumns	A										<section class="prog__container"><p> Columns representing an artist</p>\n<pre><code>public static interface MediaStore.Audio.ArtistColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.ArtistColumns.html
MediaStore.Audio.Artists.Albums	A										<section class="prog__container"><p> Sub-directory of each artist containing all albums on which a song by the artist appears.</p>\n<pre><code>public static final class MediaStore.Audio.Artists.Albums\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.Artists.Albums.html
MediaStore.Audio.Artists	A										<section class="prog__container"><p> Contains artists for audio files</p>\n<pre><code>public static final class MediaStore.Audio.Artists\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.Artists.html
MediaStore.Audio.AudioColumns	A										<section class="prog__container"><p> Columns for audio file that show up in multiple tables.</p>\n<pre><code>public static interface MediaStore.Audio.AudioColumns\nimplements <a href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html">MediaStore.MediaColumns</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.AudioColumns.html
MediaStore.Audio.Genres	A										<section class="prog__container"><p> Contains all genres for audio files</p>\n<pre><code>public static final class MediaStore.Audio.Genres\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.Genres.html
MediaStore.Audio.Genres.Members	A										<section class="prog__container"><p> Sub-directory of each genre containing all members.</p>\n<pre><code>public static final class MediaStore.Audio.Genres.Members\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.Genres.Members.html
MediaStore.Audio.GenresColumns	A										<section class="prog__container"><p> Columns representing an audio genre</p>\n<pre><code>public static interface MediaStore.Audio.GenresColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.GenresColumns.html
MediaStore.Audio	A										<section class="prog__container"><p> Container for all audio content.</p>\n<pre><code>public static final class MediaStore.Audio\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.html
MediaStore.Audio.Media	A										<section class="prog__container"><p> The MIME type for this table.</p>\n<pre><code>public static final class MediaStore.Audio.Media\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.Media.html
MediaStore.Audio.Playlists	A										<section class="prog__container"><p> Contains playlists for audio files</p>\n<pre><code>public static final class MediaStore.Audio.Playlists\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.Playlists.html
MediaStore.Audio.Playlists.Members	A										<section class="prog__container"><p> Sub-directory of each playlist containing all members.</p>\n<pre><code>public static final class MediaStore.Audio.Playlists.Members\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.Playlists.Members.html
MediaStore.Audio.PlaylistsColumns	A										<section class="prog__container"><p> Columns representing a playlist</p>\n<pre><code>public static interface MediaStore.Audio.PlaylistsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.PlaylistsColumns.html
MediaStore.Audio.Radio	A										<section class="prog__container"><p> The MIME type for entries in this table.</p>\n<pre><code>public static final class MediaStore.Audio.Radio\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Audio.Radio.html
MediaStore.Files.FileColumns	A										<section class="prog__container"><p> Fields for master table for all media files. Table also contains MediaColumns._ID, DATA, SIZE and DATE_MODIFIED.</p>\n<pre><code>public static interface MediaStore.Files.FileColumns\nimplements <a href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html">MediaStore.MediaColumns</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Files.FileColumns.html
MediaStore.Files	A										<section class="prog__container"><p> Media provider table containing an index of all files in the media storage, including non-media files. This should be used by applications that work with non-media file types (text, HTML, PDF, etc) as well as applications that need to work with multiple media file types in a single query.</p>\n<pre><code>public static final class MediaStore.Files\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Files.html
MediaStore	A										<section class="prog__container"><p> The Media provider contains meta data for all available media on both internal and external storage devices.</p>\n<pre><code>public final class MediaStore\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.html
MediaStore.Images	A										<section class="prog__container"><p> Contains meta data for all available images.</p>\n<pre><code>public static final class MediaStore.Images\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Images.html
MediaStore.Images.ImageColumns	A										<section class="prog__container"><p> The bucket display name of the image.</p>\n<pre><code>public static interface MediaStore.Images.ImageColumns\nimplements <a href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html">MediaStore.MediaColumns</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Images.ImageColumns.html
MediaStore.Images.Media	A										<section class="prog__container"><p> The MIME type of of this directory of images.</p>\n<pre><code>public static final class MediaStore.Images.Media\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Images.Media.html
MediaStore.Images.Thumbnails	A										<section class="prog__container"><p> This class allows developers to query and get two kinds of thumbnails: MINI_KIND: 512 x 384 thumbnail MICRO_KIND: 96 x 96 thumbnail</p>\n<pre><code>public static class MediaStore.Images.Thumbnails\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Images.Thumbnails.html
MediaStore.MediaColumns	A										<section class="prog__container"><p> Common fields for most MediaProvider tables</p>\n<pre><code>public static interface MediaStore.MediaColumns\nimplements <a href="https://developer.android.com/reference/android/provider/BaseColumns.html">BaseColumns</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html
MediaStore.Video	A										<section class="prog__container"><p></p>\n<pre><code>public static final class MediaStore.Video\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Video.html
MediaStore.Video.Media	A										<section class="prog__container"><p> The MIME type for this table.</p>\n<pre><code>public static final class MediaStore.Video.Media\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Video.Media.html
MediaStore.Video.Thumbnails	A										<section class="prog__container"><p> This class allows developers to query and get two kinds of thumbnails: MINI_KIND: 512 x 384 thumbnail MICRO_KIND: 96 x 96 thumbnail</p>\n<pre><code>public static class MediaStore.Video.Thumbnails\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Video.Thumbnails.html
MediaStore.Video.VideoColumns	A										<section class="prog__container"><p> The album the video file is from, if any <p> Type: TEXT </p>\n<pre><code>public static interface MediaStore.Video.VideoColumns\nimplements <a href="https://developer.android.com/reference/android/provider/MediaStore.MediaColumns.html">MediaStore.MediaColumns</a></code></pre></section>	https://developer.android.com/reference/android/provider/MediaStore.Video.VideoColumns.html
OpenableColumns	A										<section class="prog__container"><p> These are standard columns for openable URIs. Providers that serve openable URIs <em> must </em> support at least these columns when queried. <p> To find the content type of a URI, use <pre><code> <a href="https://developer.android.com/reference/android/content/ContentResolver.html#getType(android.net.Uri)"> getType(android.net.Uri) </a> </code></pre> . </p>\n<pre><code>public interface OpenableColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/OpenableColumns.html
android.provider	A										<section class="prog__container">Provides convenience classes to access the content providers supplied byAndroid.</section>	https://developer.android.com/reference/android/provider/package-summary.html
SearchRecentSuggestions	A										<section class="prog__container"><p> This is a utility class providing access to <pre><code> <a href="https://developer.android.com/reference/android/content/SearchRecentSuggestionsProvider.html"> SearchRecentSuggestionsProvider </a> </code></pre> . <p> Unlike some utility classes, this one must be instantiated and properly initialized, so that it can be configured to operate with the search suggestions provider that you have created. <p> Typically, you will do this in your searchable activity, each time you receive an incoming <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_SEARCH"> ACTION_SEARCH </a> </code></pre> Intent. The code to record each incoming query is as follows: <pre class="prettyprint"> SearchSuggestions suggestions = new SearchSuggestions(this, MySuggestionsProvider.AUTHORITY, MySuggestionsProvider.MODE); suggestions.saveRecentQuery(queryString, null); </pre> <p> For a working example, see SearchSuggestionSampleProvider and SearchQueryResults in samples/ApiDemos/app. </p>\n<pre><code>public class SearchRecentSuggestions\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/SearchRecentSuggestions.html
Settings.Global	A										<section class="prog__container"><p> Global system settings, containing preferences that always apply identically to all defined users. Applications can read these but are not allowed to write; like the "Secure" settings, these are for preferences that the user must explicitly modify through the system UI or specialized APIs for those values.</p>\n<pre><code>public static final class Settings.Global\n</code></pre></section>	https://developer.android.com/reference/android/provider/Settings.Global.html
Settings	A										<section class="prog__container"><p> The Settings provider contains global system-level device preferences.</p>\n<pre><code>public final class Settings\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Settings.html
Settings.NameValueTable	A										<section class="prog__container"><p> Common base for tables of name/value settings.</p>\n<pre><code>public static class Settings.NameValueTable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Settings.NameValueTable.html
Settings.Secure	A										<section class="prog__container"><p> Secure system settings, containing system preferences that applications can read but are not allowed to write. These are for preferences that the user must explicitly modify through the system UI or specialized APIs for those values, not modified directly by applications.</p>\n<pre><code>public static final class Settings.Secure\n</code></pre></section>	https://developer.android.com/reference/android/provider/Settings.Secure.html
Settings.SettingNotFoundException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p>\n<pre><code>public static class Settings.SettingNotFoundException\n</code></pre></section>	https://developer.android.com/reference/android/provider/Settings.SettingNotFoundException.html
Settings.System	A										<section class="prog__container"><p> System settings, containing miscellaneous system preferences. This table holds simple name/value pairs. There are convenience functions for accessing individual settings entries.</p>\n<pre><code>public static final class Settings.System\n</code></pre></section>	https://developer.android.com/reference/android/provider/Settings.System.html
SyncStateContract.Columns	A										<section class="prog__container"><p> A reference to the name of the account to which this data belongs <p> Type: STRING </p>\n<pre><code>public static interface SyncStateContract.Columns\nimplements <a href="https://developer.android.com/reference/android/provider/BaseColumns.html">BaseColumns</a></code></pre></section>	https://developer.android.com/reference/android/provider/SyncStateContract.Columns.html
SyncStateContract.Constants	A										<section class="prog__container"><p></p>\n<pre><code>public static class SyncStateContract.Constants\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/SyncStateContract.Constants.html
SyncStateContract.Helpers	A										<section class="prog__container"><p> Get the sync state that is associated with the account or null.</p>\n<pre><code>public static final class SyncStateContract.Helpers\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/SyncStateContract.Helpers.html
SyncStateContract	A										<section class="prog__container"><p> The ContentProvider contract for associating data with ana data array account. This may be used by providers that want to store this data in a standard way.</p>\n<pre><code>public class SyncStateContract\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/SyncStateContract.html
Telephony.BaseMmsColumns	A										<section class="prog__container"><p> Base columns for tables that contain MMSs.</p>\n<pre><code>public static interface Telephony.BaseMmsColumns\nimplements <a href="https://developer.android.com/reference/android/provider/BaseColumns.html">BaseColumns</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.BaseMmsColumns.html
Telephony.CanonicalAddressesColumns	A										<section class="prog__container"><p> Columns for the "canonical_addresses" table used by MMS and SMS.</p>\n<pre><code>public static interface Telephony.CanonicalAddressesColumns\nimplements <a href="https://developer.android.com/reference/android/provider/BaseColumns.html">BaseColumns</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.CanonicalAddressesColumns.html
Telephony.Carriers	A										<section class="prog__container"><p> Carriers class contains information about APNs, including MMSC information.</p>\n<pre><code>public static final class Telephony.Carriers\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Carriers.html
Telephony	A										<section class="prog__container"><p> The Telephony provider contains data related to phone operation, specifically SMS and MMS messages and access to the APN list, including the MMSC to use. <p class="note"> <strong> Note: </strong> These APIs are not available on all Android-powered devices. If your app depends on telephony features such as for managing SMS messages, include a <a href="https://developer.android.com/guide/topics/manifest/uses-feature-element.html"> <pre><code> &lt;uses-feature&gt; </code></pre> </a> element in your manifest that declares the <pre><code> "android.hardware.telephony" </code></pre> hardware feature. Alternatively, you can check for telephony availability at runtime using either <pre><code> <a href="https://developer.android.com/reference/android/content/pm/PackageManager.html#hasSystemFeature(java.lang.String)"> hasSystemFeature(PackageManager.FEATURE_TELEPHONY) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getPhoneType()"> getPhoneType() </a> </code></pre> . </p>\n<pre><code>public final class Telephony\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.html
Telephony.Mms.Addr	A										<section class="prog__container"><p> Contains address information for an MMS message.</p>\n<pre><code>public static final class Telephony.Mms.Addr\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Mms.Addr.html
Telephony.Mms.Draft	A										<section class="prog__container"><p> Contains all MMS messages in the MMS app drafts folder.</p>\n<pre><code>public static final class Telephony.Mms.Draft\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Mms.Draft.html
Telephony.Mms	A										<section class="prog__container"><p> Contains all MMS messages.</p>\n<pre><code>public static final class Telephony.Mms\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Mms.html
Telephony.Mms.Inbox	A										<section class="prog__container"><p> Contains all MMS messages in the MMS app inbox.</p>\n<pre><code>public static final class Telephony.Mms.Inbox\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Mms.Inbox.html
Telephony.Mms.Intents	A										<section class="prog__container"><p> Intents class.</p>\n<pre><code>public static final class Telephony.Mms.Intents\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Mms.Intents.html
Telephony.Mms.Outbox	A										<section class="prog__container"><p> Contains all MMS messages in the MMS app outbox.</p>\n<pre><code>public static final class Telephony.Mms.Outbox\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Mms.Outbox.html
Telephony.Mms.Part	A										<section class="prog__container"><p> Contains message parts.</p>\n<pre><code>public static final class Telephony.Mms.Part\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Mms.Part.html
Telephony.Mms.Rate	A										<section class="prog__container"><p> Message send rate table.</p>\n<pre><code>public static final class Telephony.Mms.Rate\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Mms.Rate.html
Telephony.Mms.Sent	A										<section class="prog__container"><p> Contains all MMS messages in the MMS app sent folder.</p>\n<pre><code>public static final class Telephony.Mms.Sent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Mms.Sent.html
Telephony.MmsSms	A										<section class="prog__container"><p> Contains all MMS and SMS messages.</p>\n<pre><code>public static final class Telephony.MmsSms\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.MmsSms.html
Telephony.MmsSms.PendingMessages	A										<section class="prog__container"><p> Contains pending messages info.</p>\n<pre><code>public static final class Telephony.MmsSms.PendingMessages\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.MmsSms.PendingMessages.html
Telephony.Sms.Conversations	A										<section class="prog__container"><p> Contains all sent text-based SMS messages in the SMS app.</p>\n<pre><code>public static final class Telephony.Sms.Conversations\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Sms.Conversations.html
Telephony.Sms.Draft	A										<section class="prog__container"><p> Contains all sent text-based SMS messages in the SMS app.</p>\n<pre><code>public static final class Telephony.Sms.Draft\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Sms.Draft.html
Telephony.Sms	A										<section class="prog__container"><p> Contains all text-based SMS messages.</p>\n<pre><code>public static final class Telephony.Sms\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Sms.html
Telephony.Sms.Inbox	A										<section class="prog__container"><p> Contains all text-based SMS messages in the SMS app inbox.</p>\n<pre><code>public static final class Telephony.Sms.Inbox\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Sms.Inbox.html
Telephony.Sms.Intents	A										<section class="prog__container"><p> Contains constants for SMS related Intents that are broadcast.</p>\n<pre><code>public static final class Telephony.Sms.Intents\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Sms.Intents.html
Telephony.Sms.Outbox	A										<section class="prog__container"><p> Contains all pending outgoing text-based SMS messages.</p>\n<pre><code>public static final class Telephony.Sms.Outbox\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Sms.Outbox.html
Telephony.Sms.Sent	A										<section class="prog__container"><p> Contains all sent text-based SMS messages in the SMS app.</p>\n<pre><code>public static final class Telephony.Sms.Sent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Sms.Sent.html
Telephony.TextBasedSmsColumns	A										<section class="prog__container"><p> Base columns for tables that contain text-based SMSs.</p>\n<pre><code>public static interface Telephony.TextBasedSmsColumns\n</code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.TextBasedSmsColumns.html
Telephony.Threads	A										<section class="prog__container"><p> Helper functions for the "threads" table used by MMS and SMS.</p>\n<pre><code>public static final class Telephony.Threads\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.Threads.html
Telephony.ThreadsColumns	A										<section class="prog__container"><p> Columns for the "threads" table used by MMS and SMS.</p>\n<pre><code>public static interface Telephony.ThreadsColumns\nimplements <a href="https://developer.android.com/reference/android/provider/BaseColumns.html">BaseColumns</a></code></pre></section>	https://developer.android.com/reference/android/provider/Telephony.ThreadsColumns.html
UserDictionary	A										<section class="prog__container"><p> A provider of user defined words for input methods to use for predictive text input. Applications and input methods may add words into the dictionary. Words can have associated frequency information and locale information. <p> <strong> NOTE: </strong> Starting on API 23, the user dictionary is only accessible through IME and spellchecker. </p>\n<pre><code>public class UserDictionary\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/UserDictionary.html
UserDictionary.Words	A										<section class="prog__container"><p> Contains the user defined words.</p>\n<pre><code>public static class UserDictionary.Words\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/UserDictionary.Words.html
VoicemailContract	A										<section class="prog__container"><p> The contract between the voicemail provider and applications. Contains definitions for the supported URIs and columns. <p> The content providers exposes two tables through this interface: <ul> <li> Voicemails table: This stores the actual voicemail records. The columns and URIs for accessing this table are defined by the <pre><code> <a href="https://developer.android.com/reference/android/provider/VoicemailContract.Voicemails.html"> VoicemailContract.Voicemails </a> </code></pre> class. </li> <li> Status table: This provides a way for the voicemail source application to convey its current state to the system. The columns and URIS for accessing this table are defined by the <pre><code> <a href="https://developer.android.com/reference/android/provider/VoicemailContract.Status.html"> VoicemailContract.Status </a> </code></pre> class. </li> </ul> <p> The minimum permission needed to access this content provider is <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#ADD_VOICEMAIL"> ADD_VOICEMAIL </a> </code></pre> <p> Voicemails are inserted by what is called as a "voicemail source" application, which is responsible for syncing voicemail data between a remote server and the local voicemail content provider. "voicemail source" application should always set the <pre><code> <a href="https://developer.android.com/reference/android/provider/VoicemailContract.html#PARAM_KEY_SOURCE_PACKAGE"> PARAM_KEY_SOURCE_PACKAGE </a> </code></pre> in the URI to identify its package. <p> In addition to the <pre><code> <a href="https://developer.android.com/reference/android/database/ContentObserver.html"> ContentObserver </a> </code></pre> notifications the voicemail provider also generates broadcast intents to notify change for applications that are not active and therefore cannot listen to ContentObserver notifications. Broadcast intents with following actions are generated: <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/provider/VoicemailContract.html#ACTION_NEW_VOICEMAIL"> ACTION_NEW_VOICEMAIL </a> </code></pre> is generated for each new voicemail inserted. </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_PROVIDER_CHANGED"> ACTION_PROVIDER_CHANGED </a> </code></pre> is generated for any change made into the database, including new voicemail. </li> </ul> </p>\n<pre><code>public class VoicemailContract\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/VoicemailContract.html
VoicemailContract.Status	A										<section class="prog__container"><p> Defines fields exposed through the /status path of this content provider.</p>\n<pre><code>public static final class VoicemailContract.Status\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/VoicemailContract.Status.html
VoicemailContract.Voicemails	A										<section class="prog__container"><p> Defines fields exposed through the /voicemail path of this content provider.</p>\n<pre><code>public static final class VoicemailContract.Voicemails\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/provider/VoicemailContract.Voicemails.html
Allocation	A										<section class="prog__container"><p> <p> This class provides the primary method through which data is passed to and from RenderScript kernels. An Allocation provides the backing store for a given <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Type.html"> Type </a> </code></pre> . </p>\n<pre><code>public class Allocation\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Allocation.html
Allocation.MipmapControl	A										<section class="prog__container"><p> Controls mipmap behavior when using the bitmap creation and update functions.</p>\n<pre><code>public static final enum Allocation.MipmapControl\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Allocation.MipmapControl.html
Allocation.OnBufferAvailableListener	A										<section class="prog__container"><p> Interface to handle notification when new buffers are available via <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Allocation.html#USAGE_IO_INPUT"> USAGE_IO_INPUT </a> </code></pre> . An application will receive one notification when a buffer is available. Additional buffers will not trigger new notifications until a buffer is processed.</p>\n<pre><code>public static interface Allocation.OnBufferAvailableListener\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Allocation.OnBufferAvailableListener.html
AllocationAdapter	A										<section class="prog__container"><p> Only intended for use by generated reflected code.</p>\n<pre><code>public class AllocationAdapter\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/AllocationAdapter.html
BaseObj	A										<section class="prog__container"><p> BaseObj is the base class for all RenderScript objects owned by a RS context. It is responsible for lifetime management and resource tracking. This class should not be used by a user application.</p>\n<pre><code>public class BaseObj\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/BaseObj.html
Byte2	A										<section class="prog__container"><p> Class for exposing the native RenderScript byte2 type back to the Android system.</p>\n<pre><code>public class Byte2\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Byte2.html
Byte3	A										<section class="prog__container"><p> Class for exposing the native RenderScript byte3 type back to the Android system.</p>\n<pre><code>public class Byte3\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Byte3.html
Byte4	A										<section class="prog__container"><p> Class for exposing the native RenderScript byte4 type back to the Android system.</p>\n<pre><code>public class Byte4\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Byte4.html
Double2	A										<section class="prog__container"><p> Vector version of the basic double type. Provides two double fields packed.</p>\n<pre><code>public class Double2\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Double2.html
Double3	A										<section class="prog__container"><p> Vector version of the basic double type. Provides three double fields packed.</p>\n<pre><code>public class Double3\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Double3.html
Double4	A										<section class="prog__container"><p> Vector version of the basic double type. Provides four double fields packed.</p>\n<pre><code>public class Double4\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Double4.html
Element.Builder	A										<section class="prog__container"><p> Builder class for producing complex elements with matching field and name pairs. The builder starts empty. The order in which elements are added is retained for the layout in memory.</p>\n<pre><code>public static class Element.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Element.Builder.html
Element.DataKind	A										<section class="prog__container"><p> The special interpretation of the data if required. This is primarly useful for graphical data. USER indicates no special interpretation is expected. PIXEL is used in conjunction with the standard data types for representing texture formats.</p>\n<pre><code>public static final enum Element.DataKind\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Element.DataKind.html
Element.DataType	A										<section class="prog__container"><p> DataType represents the basic type information for a basic element. The naming convention follows. For numeric types it is FLOAT, SIGNED, or UNSIGNED followed by the _BITS where BITS is the size of the data. BOOLEAN is a true / false (1,0) represented in an 8 bit container. The UNSIGNED variants with multiple bit definitions are for packed graphical data formats and represent vectors with per vector member sizes which are treated as a single unit for packing and alignment purposes. MATRIX the three matrix types contain FLOAT_32 elements and are treated as 32 bits for alignment purposes. RS_* objects: opaque handles with implementation dependent sizes.</p>\n<pre><code>public static final enum Element.DataType\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Element.DataType.html
Element	A										<section class="prog__container"><p> <p> An Element represents one item within an <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Allocation.html"> Allocation </a> </code></pre> . An Element is roughly equivalent to a C type in a RenderScript kernel. Elements may be basic or complex. Some basic elements are </p>\n<pre><code>public class Element\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Element.html
FieldPacker	A										<section class="prog__container"><p> Utility class for packing arguments and structures from Android system objects to RenderScript objects. This class is only intended to be used to support the reflected code generated by the RS tool chain. It should not be called directly.</p>\n<pre><code>public class FieldPacker\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/FieldPacker.html
Float2	A										<section class="prog__container"><p> Vector version of the basic float type. Provides two float fields packed.</p>\n<pre><code>public class Float2\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Float2.html
Float3	A										<section class="prog__container"><p> Vector version of the basic float type. Provides three float fields packed.</p>\n<pre><code>public class Float3\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Float3.html
Float4	A										<section class="prog__container"><p> Vector version of the basic float type. Provides four float fields packed.</p>\n<pre><code>public class Float4\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Float4.html
Int2	A										<section class="prog__container"><p> Vector version of the basic int type. Provides two int fields packed.</p>\n<pre><code>public class Int2\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Int2.html
Int3	A										<section class="prog__container"><p> Vector version of the basic int type. Provides three int fields packed.</p>\n<pre><code>public class Int3\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Int3.html
Int4	A										<section class="prog__container"><p> Vector version of the basic int type. Provides four int fields packed.</p>\n<pre><code>public class Int4\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Int4.html
Long2	A										<section class="prog__container"><p> Vector version of the basic long type. Provides two long fields packed.</p>\n<pre><code>public class Long2\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Long2.html
Long3	A										<section class="prog__container"><p> Vector version of the basic long type. Provides three long fields packed.</p>\n<pre><code>public class Long3\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Long3.html
Long4	A										<section class="prog__container"><p> Vector version of the basic long type. Provides four long fields packed.</p>\n<pre><code>public class Long4\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Long4.html
Matrix2f	A										<section class="prog__container"><p> Class for exposing the native RenderScript rs_matrix2x2 type back to the Android system.</p>\n<pre><code>public class Matrix2f\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Matrix2f.html
Matrix3f	A										<section class="prog__container"><p> Class for exposing the native RenderScript rs_matrix3x3 type back to the Android system.</p>\n<pre><code>public class Matrix3f\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Matrix3f.html
Matrix4f	A										<section class="prog__container"><p> Class for exposing the native RenderScript rs_matrix4x4 type back to the Android system.</p>\n<pre><code>public class Matrix4f\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Matrix4f.html
android.renderscript	A										<section class="prog__container">RenderScript provides support for high-performance computation across heterogeneous processors.</section>	https://developer.android.com/reference/android/renderscript/package-summary.html
RenderScript.ContextType	A										<section class="prog__container"><p> ContextType specifies the specific type of context to be created.</p>\n<pre><code>public static final enum RenderScript.ContextType\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/RenderScript.ContextType.html
RenderScript	A										<section class="prog__container"><p> This class provides access to a RenderScript context, which controls RenderScript initialization, resource management, and teardown. An instance of the RenderScript class must be created before any other RS objects can be created. </p>\n<pre><code>public class RenderScript\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/RenderScript.html
RenderScript.Priority	A										<section class="prog__container"><p> RenderScript worker thread priority enumeration. The default value is NORMAL. Applications wishing to do background processing should set their priority to LOW to avoid starving forground processes.</p>\n<pre><code>public static final enum RenderScript.Priority\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/RenderScript.Priority.html
RenderScript.RSErrorHandler	A										<section class="prog__container"><p> The runtime error handler base class. An application should derive from this class if it wishes to install an error handler. When errors occur at runtime, the fields in this class will be filled, and the run method will be called.</p>\n<pre><code>public static class RenderScript.RSErrorHandler\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/RenderScript.RSErrorHandler.html
RenderScript.RSMessageHandler	A										<section class="prog__container"><p> The base class from which an application should derive in order to receive RS messages from scripts. When a script calls <pre><code> rsSendToClient </code></pre> , the data fields will be filled, and the run method will be called on a separate thread. This will occur some time after <pre><code> rsSendToClient </code></pre> completes in the script, as <pre><code> rsSendToClient </code></pre> is asynchronous. Message handlers are not guaranteed to have completed when <pre><code> <a href="https://developer.android.com/reference/android/renderscript/RenderScript.html#finish()"> finish() </a> </code></pre> returns.</p>\n<pre><code>public static class RenderScript.RSMessageHandler\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/RenderScript.RSMessageHandler.html
RSDriverException	A										<section class="prog__container"><p> Base class for all exceptions thrown by the Android RenderScript</p>\n<pre><code>public class RSDriverException\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/RSDriverException.html
RSIllegalArgumentException	A										<section class="prog__container"><p> Base class for all exceptions thrown by the Android RenderScript</p>\n<pre><code>public class RSIllegalArgumentException\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/RSIllegalArgumentException.html
RSInvalidStateException	A										<section class="prog__container"><p> Base class for all exceptions thrown by the Android RenderScript</p>\n<pre><code>public class RSInvalidStateException\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/RSInvalidStateException.html
RSRuntimeException	A										<section class="prog__container"><p> Base class for all exceptions thrown by the Android RenderScript</p>\n<pre><code>public class RSRuntimeException\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/RSRuntimeException.html
Sampler.Builder	A										<section class="prog__container"><p> Builder for creating non-standard samplers. This is only necessary if a Sampler with different min and mag modes is desired.</p>\n<pre><code>public static class Sampler.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Sampler.Builder.html
Sampler	A										<section class="prog__container"><p> Sampler object that defines how Allocations can be read as textures within a kernel. Samplers are used in conjunction with the <pre><code> rsSample </code></pre> runtime function to return values from normalized coordinates. Any Allocation used with a Sampler must have been created with <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Allocation.html#USAGE_GRAPHICS_TEXTURE"> USAGE_GRAPHICS_TEXTURE </a> </code></pre> ; using a Sampler on an <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Allocation.html"> Allocation </a> </code></pre> that was not created with <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Allocation.html#USAGE_GRAPHICS_TEXTURE"> USAGE_GRAPHICS_TEXTURE </a> </code></pre> is undefined.</p>\n<pre><code>public class Sampler\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Sampler.html
Sampler.Value	A										<section class="prog__container"><p></p>\n<pre><code>public static final enum Sampler.Value\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Sampler.Value.html
Script.Builder	A										<section class="prog__container"><p> Only intended for use by generated reflected code.</p>\n<pre><code>public static class Script.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Script.Builder.html
Script.FieldBase	A										<section class="prog__container"><p> Only intended for use by generated reflected code.</p>\n<pre><code>public static class Script.FieldBase\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Script.FieldBase.html
Script.FieldID	A										<section class="prog__container"><p> FieldID is an identifier for a Script + exported field pair. It is used as an identifier for ScriptGroup creation. This class should not be directly created. Instead use the method in the reflected or intrinsic code "getFieldID_funcname()".</p>\n<pre><code>public static final class Script.FieldID\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Script.FieldID.html
Script	A										<section class="prog__container"><p> The parent class for all executable scripts. This should not be used by applications.</p>\n<pre><code>public class Script\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Script.html
Script.InvokeID	A										<section class="prog__container"><p> InvokeID is an identifier for an invoke function. It is used as an identifier for ScriptGroup creation. This class should not be directly created. Instead use the method in the reflected or intrinsic code "getInvokeID_funcname()".</p>\n<pre><code>public static final class Script.InvokeID\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Script.InvokeID.html
Script.KernelID	A										<section class="prog__container"><p> KernelID is an identifier for a Script + root function pair. It is used as an identifier for ScriptGroup creation. This class should not be directly created. Instead use the method in the reflected or intrinsic code "getKernelID_funcname()".</p>\n<pre><code>public static final class Script.KernelID\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Script.KernelID.html
Script.LaunchOptions	A										<section class="prog__container"><p> Class for specifying the specifics about how a kernel will be launched. This class can specify a potential range of cells on which to run a kernel. If no set is called for a dimension then this class will have no impact on that dimension when the kernel is executed. The forEach kernel launch will operate over the intersection of the dimensions. Example: LaunchOptions with setX(5, 15) Allocation with dimension X=10, Y=10 The resulting forEach run would execute over: x = 5 to 9 (inclusive) and y = 0 to 9 (inclusive).</p>\n<pre><code>public static final class Script.LaunchOptions\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Script.LaunchOptions.html
ScriptC	A										<section class="prog__container"><p> The superclass for all user-defined scripts. This is only intended to be used by the generated derived classes.</p>\n<pre><code>public class ScriptC\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptC.html
ScriptGroup.Binding	A										<section class="prog__container"><p> Represents a binding of a value to a global variable in a kernel or invocable function. Used in closure creation.</p>\n<pre><code>public static final class ScriptGroup.Binding\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptGroup.Binding.html
ScriptGroup.Builder	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 23. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/renderscript/ScriptGroup.Builder2.html"> ScriptGroup.Builder2 </a> </code></pre> instead. </p>\n<pre><code>public static final class ScriptGroup.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptGroup.Builder.html
ScriptGroup.Builder2	A										<section class="prog__container"><p> The builder class for creating script groups <p> A script group is created using closures (see class <pre><code> <a href="https://developer.android.com/reference/android/renderscript/ScriptGroup.Closure.html"> ScriptGroup.Closure </a> </code></pre> ). A closure is a function call to a kernel or invocable function. Each function argument or global variable accessed inside the function is bound to 1) a known value, 2) a script group input (see class <pre><code> <a href="https://developer.android.com/reference/android/renderscript/ScriptGroup.Input.html"> ScriptGroup.Input </a> </code></pre> ), or 3) a future (see class <pre><code> <a href="https://developer.android.com/reference/android/renderscript/ScriptGroup.Future.html"> ScriptGroup.Future </a> </code></pre> ). A future is the output of a closure, either the return value of the function or a global variable written by that function. <p> Closures are created using the <pre><code> <a href="https://developer.android.com/reference/android/renderscript/ScriptGroup.Builder2.html#addKernel(android.renderscript.Script.KernelID, android.renderscript.Type, java.lang.Object...)"> addKernel(Script.KernelID, Type, Object...) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/renderscript/ScriptGroup.Builder2.html#addInvoke(android.renderscript.Script.InvokeID, java.lang.Object...)"> addInvoke(Script.InvokeID, Object...) </a> </code></pre> methods. When a closure is created, futures from previously created closures can be used as its inputs. External script group inputs can be used as inputs to individual closures as well. An external script group input is created using the <pre><code> <a href="https://developer.android.com/reference/android/renderscript/ScriptGroup.Builder2.html#addInput()"> addInput() </a> </code></pre> method. A script group is created by a call to the <pre><code> <a href="https://developer.android.com/reference/android/renderscript/ScriptGroup.Builder2.html#create(java.lang.String, android.renderscript.ScriptGroup.Future...)"> create(String, ScriptGroup.Future...) </a> </code></pre> method, which accepts an array of futures as the outputs for the script group. <p> Closures in a script group can be evaluated in any order as long as the following conditions are met: 1) a closure must be evaluated before any other closures that take its futures as inputs; 2) all closures added before an invoke closure must be evaluated before it; and 3) all closures added after an invoke closure must be evaluated after it. As a special case, the order that the closures are added is a legal evaluation order. However, other evaluation orders are possible, including concurrently evaluating independent closures. </p>\n<pre><code>public static final class ScriptGroup.Builder2\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptGroup.Builder2.html
ScriptGroup.Closure	A										<section class="prog__container"><p> An opaque class for closures <p> A closure represents a function call to a kernel or invocable function, combined with arguments and values for global variables. A closure is created using the <pre><code> <a href="https://developer.android.com/reference/android/renderscript/ScriptGroup.Builder2.html#addKernel(android.renderscript.Script.KernelID, android.renderscript.Type, java.lang.Object...)"> addKernel(Script.KernelID, Type, Object...) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/renderscript/ScriptGroup.Builder2.html#addInvoke(android.renderscript.Script.InvokeID, java.lang.Object...)"> addInvoke(Script.InvokeID, Object...) </a> </code></pre> method. </p>\n<pre><code>public static final class ScriptGroup.Closure\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptGroup.Closure.html
ScriptGroup.Future	A										<section class="prog__container"><p> An opaque class for futures <p> A future represents an output of a closure, either the return value of the function, or the value of a global variable written by the function. A future is created by calling the <pre><code> <a href="https://developer.android.com/reference/android/renderscript/ScriptGroup.Closure.html#getReturn()"> getReturn() </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/renderscript/ScriptGroup.Closure.html#getGlobal(android.renderscript.Script.FieldID)"> getGlobal(Script.FieldID) </a> </code></pre> method. </p>\n<pre><code>public static final class ScriptGroup.Future\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptGroup.Future.html
ScriptGroup	A										<section class="prog__container"><p> A group of kernels that are executed together with one execution call as if they were a single kernel <p> In addition to kernels, a script group may contain invocable functions as well. A script group may take inputs and generate outputs, which are consumed and produced by its member kernels. Inside a script group, outputs from one kernel can be passed to another kernel as inputs. The API disallows cyclic dependencies among kernels in a script group, effectively making it a directed acyclic graph (DAG) of kernels. <p> Grouping kernels together allows for more efficient execution. For example, runtime and compiler optimization can be applied to reduce computation and communication overhead, and to make better use of the CPU and the GPU. </p>\n<pre><code>public final class ScriptGroup\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptGroup.html
ScriptGroup.Input	A										<section class="prog__container"><p> An opaque class for script group inputs <p> Created by calling the <pre><code> <a href="https://developer.android.com/reference/android/renderscript/ScriptGroup.Builder2.html#addInput()"> addInput() </a> </code></pre> method. The value is assigned in <pre><code> <a href="https://developer.android.com/reference/android/renderscript/ScriptGroup.html#execute(java.lang.Object...)"> execute(Object) </a> </code></pre> method as one of its arguments. Arguments to the execute method should be in the same order as intputs are added using the addInput method. </p>\n<pre><code>public static final class ScriptGroup.Input\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptGroup.Input.html
ScriptIntrinsic	A										<section class="prog__container"><p> Base class for all Intrinsic scripts. An intrinsic a script which implements a pre-defined function. Intrinsics are provided to provide effecient implemtations of common operations. Not intended for direct use.</p>\n<pre><code>public abstract class ScriptIntrinsic\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsic.html
ScriptIntrinsic3DLUT	A										<section class="prog__container"><p> Intrinsic for converting RGB to RGBA by using a 3D lookup table. The incoming r,g,b values are use as normalized x,y,z coordinates into a 3D allocation. The 8 nearest values are sampled and linearly interpolated. The result is placed in the output.</p>\n<pre><code>public final class ScriptIntrinsic3DLUT\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsic3DLUT.html
ScriptIntrinsicBLAS	A										<section class="prog__container"><p> ScriptIntrinsicBLAS class provides high performance RenderScript APIs to BLAS. The BLAS (Basic Linear Algebra Subprograms) are routines that provide standard building blocks for performing basic vector and matrix operations. For detailed description of BLAS, please refer to http://www.netlib.org/blas/</p>\n<pre><code>public final class ScriptIntrinsicBLAS\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html
ScriptIntrinsicBlend	A										<section class="prog__container"><p> Intrinsic kernels for blending two <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Allocation.html"> Allocation </a> </code></pre> objects.</p>\n<pre><code>public class ScriptIntrinsicBlend\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBlend.html
ScriptIntrinsicBlur	A										<section class="prog__container"><p> Intrinsic Gausian blur filter. Applies a gaussian blur of the specified radius to all elements of an allocation.</p>\n<pre><code>public final class ScriptIntrinsicBlur\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBlur.html
ScriptIntrinsicColorMatrix	A										<section class="prog__container"><p> Intrinsic for applying a color matrix to allocations. If the element type is <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Element.DataType.html#UNSIGNED_8"> UNSIGNED_8 </a> </code></pre> , it is converted to <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Element.DataType.html#FLOAT_32"> FLOAT_32 </a> </code></pre> and normalized from (0-255) to (0-1). If the incoming vector size is less than four, a <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Element.html#F32_4(android.renderscript.RenderScript)"> F32_4(RenderScript) </a> </code></pre> is created by filling the missing vector channels with zero. This value is then multiplied by the 4x4 color matrix as performed by rsMatrixMultiply(), adding a <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Element.html#F32_4(android.renderscript.RenderScript)"> F32_4(RenderScript) </a> </code></pre> , and then writing it to the output <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Allocation.html"> Allocation </a> </code></pre> . If the ouptut type is unsigned, the value is normalized from (0-1) to (0-255) and converted. If the output vector size is less than four, the unused channels are discarded. Supported elements types are <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Element.html#U8(android.renderscript.RenderScript)"> U8(RenderScript) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Element.html#U8_2(android.renderscript.RenderScript)"> U8_2(RenderScript) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Element.html#U8_3(android.renderscript.RenderScript)"> U8_3(RenderScript) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Element.html#U8_4(android.renderscript.RenderScript)"> U8_4(RenderScript) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Element.html#F32(android.renderscript.RenderScript)"> F32(RenderScript) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Element.html#F32_2(android.renderscript.RenderScript)"> F32_2(RenderScript) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Element.html#F32_3(android.renderscript.RenderScript)"> F32_3(RenderScript) </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Element.html#F32_4(android.renderscript.RenderScript)"> F32_4(RenderScript) </a> </code></pre> .</p>\n<pre><code>public final class ScriptIntrinsicColorMatrix\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicColorMatrix.html
ScriptIntrinsicConvolve3x3	A										<section class="prog__container"><p> Intrinsic for applying a 3x3 convolve to an allocation.</p>\n<pre><code>public final class ScriptIntrinsicConvolve3x3\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicConvolve3x3.html
ScriptIntrinsicConvolve5x5	A										<section class="prog__container"><p> Intrinsic for applying a 5x5 convolve to an allocation.</p>\n<pre><code>public final class ScriptIntrinsicConvolve5x5\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicConvolve5x5.html
ScriptIntrinsicHistogram	A										<section class="prog__container"><p> Intrinsic Histogram filter.</p>\n<pre><code>public final class ScriptIntrinsicHistogram\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicHistogram.html
ScriptIntrinsicLUT	A										<section class="prog__container"><p> Intrinsic for applying a per-channel lookup table. Each channel of the input has an independant lookup table. The tables are 256 entries in size and can cover the full value range of <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Element.html#U8_4(android.renderscript.RenderScript)"> U8_4(RenderScript) </a> </code></pre> .</p>\n<pre><code>public final class ScriptIntrinsicLUT\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicLUT.html
ScriptIntrinsicResize	A										<section class="prog__container"><p> Intrinsic for performing a resize of a 2D allocation.</p>\n<pre><code>public final class ScriptIntrinsicResize\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicResize.html
ScriptIntrinsicYuvToRGB	A										<section class="prog__container"><p> Intrinsic for converting an Android YUV buffer to RGB. The input allocation should be supplied in a supported YUV format as a YUV element Allocation. The output is RGBA; the alpha channel will be set to 255.</p>\n<pre><code>public final class ScriptIntrinsicYuvToRGB\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/ScriptIntrinsicYuvToRGB.html
Short2	A										<section class="prog__container"><p> Class for exposing the native RenderScript Short2 type back to the Android system. Vector version of the basic short type. Provides two short fields packed.</p>\n<pre><code>public class Short2\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Short2.html
Short3	A										<section class="prog__container"><p> Vector version of the basic short type. Provides three short fields packed.</p>\n<pre><code>public class Short3\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Short3.html
Short4	A										<section class="prog__container"><p> Vector version of the basic short type. Provides four short fields packed.</p>\n<pre><code>public class Short4\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Short4.html
Type.Builder	A										<section class="prog__container"><p> Builder class for Type.</p>\n<pre><code>public static class Type.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/renderscript/Type.Builder.html
Type.CubemapFace	A										<section class="prog__container"><p></p>\n<pre><code>public static final enum Type.CubemapFace\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Type.CubemapFace.html
Type	A										<section class="prog__container"><p> <p> A Type describes the <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Element.html"> Element </a> </code></pre> and dimensions used for an <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Allocation.html"> Allocation </a> </code></pre> or a parallel operation. Types are created through <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Type.Builder.html"> Type.Builder </a> </code></pre> . </p>\n<pre><code>public class Type\n</code></pre></section>	https://developer.android.com/reference/android/renderscript/Type.html
Element	A										<section class="prog__container"><p> An XML element. Provides access to child elements and hooks to listen for events related to this element.</p>\n<pre><code>public class Element\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/sax/Element.html
ElementListener	A										<section class="prog__container"><p> Listens for the beginning and ending of elements.</p>\n<pre><code>public interface ElementListener\nimplements <a href="https://developer.android.com/reference/android/sax/StartElementListener.html">StartElementListener</a>, <a href="https://developer.android.com/reference/android/sax/EndElementListener.html">EndElementListener</a></code></pre></section>	https://developer.android.com/reference/android/sax/ElementListener.html
EndElementListener	A										<section class="prog__container"><p> Listens for the end of elements.</p>\n<pre><code>public interface EndElementListener\n</code></pre></section>	https://developer.android.com/reference/android/sax/EndElementListener.html
EndTextElementListener	A										<section class="prog__container"><p> Listens for the end of text elements.</p>\n<pre><code>public interface EndTextElementListener\n</code></pre></section>	https://developer.android.com/reference/android/sax/EndTextElementListener.html
android.sax	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/sax/package-summary.html
RootElement	A										<section class="prog__container"><p> The root XML element. The entry point for this API. Not safe for concurrent use. <p> For example, passing this XML: <pre> &lt;feed xmlns='http://www.w3.org/2005/Atom'&gt; &lt;entry&gt; &lt;id&gt;bob&lt;/id&gt; &lt;/entry&gt; &lt;/feed&gt; </pre> to this code: <pre> static final String ATOM_NAMESPACE = "http://www.w3.org/2005/Atom"; ... RootElement root = new RootElement(ATOM_NAMESPACE, "feed"); Element entry = root.getChild(ATOM_NAMESPACE, "entry"); entry.getChild(ATOM_NAMESPACE, "id").setEndTextElementListener( new EndTextElementListener() { public void end(String body) { System.out.println("Entry ID: " + body); } }); XMLReader reader = ...; reader.setContentHandler(root.getContentHandler()); reader.parse(...); </pre> would output: <pre> Entry ID: bob </pre> </p>\n<pre><code>public class RootElement\n</code></pre></section>	https://developer.android.com/reference/android/sax/RootElement.html
StartElementListener	A										<section class="prog__container"><p> Listens for the beginning of elements.</p>\n<pre><code>public interface StartElementListener\n</code></pre></section>	https://developer.android.com/reference/android/sax/StartElementListener.html
TextElementListener	A										<section class="prog__container"><p> Listens for the beginning and ending of text elements.</p>\n<pre><code>public interface TextElementListener\nimplements <a href="https://developer.android.com/reference/android/sax/StartElementListener.html">StartElementListener</a>, <a href="https://developer.android.com/reference/android/sax/EndTextElementListener.html">EndTextElementListener</a></code></pre></section>	https://developer.android.com/reference/android/sax/TextElementListener.html
KeyChain	A										<section class="prog__container"><p> The <pre><code> KeyChain </code></pre> class provides access to private keys and their corresponding certificate chains in credential storage. <p> Applications accessing the <pre><code> KeyChain </code></pre> normally go through these steps: <ol> <li> Receive a callback from an <pre><code> <a href="https://developer.android.com/reference/javax/net/ssl/X509KeyManager.html"> X509KeyManager </a> </code></pre> that a private key is requested. <li> Call <pre><code> <a href="https://developer.android.com/reference/android/security/KeyChain.html#choosePrivateKeyAlias(android.app.Activity, android.security.KeyChainAliasCallback, java.lang.String[], java.security.Principal[], android.net.Uri, java.lang.String)"> choosePrivateKeyAlias </a> </code></pre> to allow the user to select from a list of currently available private keys and corresponding certificate chains. The chosen alias will be returned by the callback <pre><code> <a href="https://developer.android.com/reference/android/security/KeyChainAliasCallback.html#alias(java.lang.String)"> alias(String) </a> </code></pre> , or null if no private key is available or the user cancels the request. <li> Call <pre><code> <a href="https://developer.android.com/reference/android/security/KeyChain.html#getPrivateKey(android.content.Context, java.lang.String)"> getPrivateKey(Context, String) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/security/KeyChain.html#getCertificateChain(android.content.Context, java.lang.String)"> getCertificateChain(Context, String) </a> </code></pre> to retrieve the credentials to return to the corresponding <pre><code> <a href="https://developer.android.com/reference/javax/net/ssl/X509KeyManager.html"> X509KeyManager </a> </code></pre> callbacks. </li> </li> </li> </ol> <p> An application may remember the value of a selected alias to avoid prompting the user with <pre><code> <a href="https://developer.android.com/reference/android/security/KeyChain.html#choosePrivateKeyAlias(android.app.Activity, android.security.KeyChainAliasCallback, java.lang.String[], java.security.Principal[], android.net.Uri, java.lang.String)"> choosePrivateKeyAlias </a> </code></pre> on subsequent connections. If the alias is no longer valid, null will be returned on lookups using that value <p> An application can request the installation of private keys and certificates via the <pre><code> Intent </code></pre> provided by <pre><code> <a href="https://developer.android.com/reference/android/security/KeyChain.html#createInstallIntent()"> createInstallIntent() </a> </code></pre> . Private keys installed via this <pre><code> Intent </code></pre> will be accessible via <pre><code> <a href="https://developer.android.com/reference/android/security/KeyChain.html#choosePrivateKeyAlias(android.app.Activity, android.security.KeyChainAliasCallback, java.lang.String[], java.security.Principal[], android.net.Uri, java.lang.String)"> choosePrivateKeyAlias(Activity, KeyChainAliasCallback, String[], Principal[], Uri, String) </a> </code></pre> while Certificate Authority (CA) certificates will be trusted by all applications through the default <pre><code> X509TrustManager </code></pre> . </p>\n<pre><code>public final class KeyChain\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/security/KeyChain.html
KeyChainAliasCallback	A										<section class="prog__container"><p> The KeyChainAliasCallback is the callback for <pre><code> <a href="https://developer.android.com/reference/android/security/KeyChain.html#choosePrivateKeyAlias(android.app.Activity, android.security.KeyChainAliasCallback, java.lang.String[], java.security.Principal[], android.net.Uri, java.lang.String)"> choosePrivateKeyAlias(Activity, KeyChainAliasCallback, String[], Principal[], Uri, String) </a> </code></pre> .</p>\n<pre><code>public interface KeyChainAliasCallback\n</code></pre></section>	https://developer.android.com/reference/android/security/KeyChainAliasCallback.html
KeyChainException	A										<section class="prog__container"><p> Thrown on problems accessing the <pre><code> <a href="https://developer.android.com/reference/android/security/KeyChain.html"> KeyChain </a> </code></pre> .</p>\n<pre><code>public class KeyChainException\n</code></pre></section>	https://developer.android.com/reference/android/security/KeyChainException.html
KeyPairGeneratorSpec.Builder	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 23. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.Builder.html"> KeyGenParameterSpec.Builder </a> </code></pre> instead. </p>\n<pre><code>public static final class KeyPairGeneratorSpec.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/security/KeyPairGeneratorSpec.Builder.html
KeyPairGeneratorSpec	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 23. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.html"> KeyGenParameterSpec </a> </code></pre> instead. </p>\n<pre><code>public final class KeyPairGeneratorSpec\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/security/KeyPairGeneratorSpec.html
KeyStoreParameter.Builder	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 23. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/security/keystore/KeyProtection.Builder.html"> KeyProtection.Builder </a> </code></pre> instead. </p>\n<pre><code>public static final class KeyStoreParameter.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/security/KeyStoreParameter.Builder.html
KeyStoreParameter	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 23. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/security/keystore/KeyProtection.html"> KeyProtection </a> </code></pre> instead. </p>\n<pre><code>public final class KeyStoreParameter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/security/KeyStoreParameter.html
NetworkSecurityPolicy	A										<section class="prog__container"><p> Network security policy. <p> Network stacks/components should honor this policy to make it possible to centrally control the relevant aspects of network security behavior. <p> The policy currently consists of a single flag: whether cleartext network traffic is permitted. See <pre><code> <a href="https://developer.android.com/reference/android/security/NetworkSecurityPolicy.html#isCleartextTrafficPermitted()"> isCleartextTrafficPermitted() </a> </code></pre> . </p>\n<pre><code>public class NetworkSecurityPolicy\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/security/NetworkSecurityPolicy.html
android.security	A										<section class="prog__container">Provides access to a few facilities of the Android security subsystems.</section>	https://developer.android.com/reference/android/security/package-summary.html
KeyExpiredException	A										<section class="prog__container"><p> Indicates that a cryptographic operation failed because the employed key's validity end date is in the past.</p>\n<pre><code>public class KeyExpiredException\n</code></pre></section>	https://developer.android.com/reference/android/security/keystore/KeyExpiredException.html
KeyGenParameterSpec.Builder	A										<section class="prog__container"><p> Builder of <pre><code> <a href="https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.html"> KeyGenParameterSpec </a> </code></pre> instances.</p>\n<pre><code>public static final class KeyGenParameterSpec.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.Builder.html
KeyGenParameterSpec	A										<section class="prog__container"><p> <pre><code> <a href="https://developer.android.com/reference/java/security/spec/AlgorithmParameterSpec.html"> AlgorithmParameterSpec </a> </code></pre> for initializing a <pre><code> <a href="https://developer.android.com/reference/java/security/KeyPairGenerator.html"> KeyPairGenerator </a> </code></pre> or a <pre><code> <a href="https://developer.android.com/reference/javax/crypto/KeyGenerator.html"> KeyGenerator </a> </code></pre> of the <a href="https://developer.android.com/training/articles/keystore.html"> Android Keystore system </a> . The spec determines authorized uses of the key, such as whether user authentication is required for using the key, what operations are authorized (e.g., signing, but not decryption), with what parameters (e.g., only with a particular padding scheme or digest), and the key's validity start and end dates. Key use authorizations expressed in the spec apply only to secret keys and private keys -- public keys can be used for any supported operations. <p> To generate an asymmetric key pair or a symmetric key, create an instance of this class using the <pre><code> <a href="https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.Builder.html"> KeyGenParameterSpec.Builder </a> </code></pre> , initialize a <pre><code> KeyPairGenerator </code></pre> or a <pre><code> KeyGenerator </code></pre> of the desired key type (e.g., <pre><code> EC </code></pre> or <pre><code> AES </code></pre> -- see <pre><code> <a href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html"> KeyProperties </a> </code></pre> . <pre><code> KEY_ALGORITHM </code></pre> constants) from the <pre><code> AndroidKeyStore </code></pre> provider with the <pre><code> KeyGenParameterSpec </code></pre> instance, and then generate a key or key pair using <pre><code> <a href="https://developer.android.com/reference/javax/crypto/KeyGenerator.html#generateKey()"> generateKey() </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/java/security/KeyPairGenerator.html#generateKeyPair()"> generateKeyPair() </a> </code></pre> . <p> The generated key pair or key will be returned by the generator and also stored in the Android Keystore under the alias specified in this spec. To obtain the secret or private key from the Android Keystore use <pre><code> <a href="https://developer.android.com/reference/java/security/KeyStore.html#getKey(java.lang.String, char[])"> KeyStore.getKey(String, null) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/java/security/KeyStore.html#getEntry(java.lang.String, java.security.KeyStore.ProtectionParameter)"> KeyStore.getEntry(String, null) </a> </code></pre> . To obtain the public key from the Android Keystore use <pre><code> <a href="https://developer.android.com/reference/java/security/KeyStore.html#getCertificate(java.lang.String)"> getCertificate(String) </a> </code></pre> and then <pre><code> <a href="https://developer.android.com/reference/java/security/cert/Certificate.html#getPublicKey()"> getPublicKey() </a> </code></pre> . <p> To help obtain algorithm-specific public parameters of key pairs stored in the Android Keystore, generated private keys implement <pre><code> <a href="https://developer.android.com/reference/java/security/interfaces/ECKey.html"> ECKey </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/java/security/interfaces/RSAKey.html"> RSAKey </a> </code></pre> interfaces whereas public keys implement <pre><code> <a href="https://developer.android.com/reference/java/security/interfaces/ECPublicKey.html"> ECPublicKey </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/java/security/interfaces/RSAPublicKey.html"> RSAPublicKey </a> </code></pre> interfaces. <p> For asymmetric key pairs, a self-signed X.509 certificate will be also generated and stored in the Android Keystore. This is because the <pre><code> <a href="https://developer.android.com/reference/java/security/KeyStore.html"> KeyStore </a> </code></pre> abstraction does not support storing key pairs without a certificate. The subject, serial number, and validity dates of the certificate can be customized in this spec. The self-signed certificate may be replaced at a later time by a certificate signed by a Certificate Authority (CA). <p> NOTE: If a private key is not authorized to sign the self-signed certificate, then the certificate will be created with an invalid signature which will not verify. Such a certificate is still useful because it provides access to the public key. To generate a valid signature for the certificate the key needs to be authorized for all of the following: <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#PURPOSE_SIGN"> PURPOSE_SIGN </a> </code></pre> , </li> <li> operation without requiring the user to be authenticated (see <pre><code> <a href="https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.Builder.html#setUserAuthenticationRequired(boolean)"> setUserAuthenticationRequired(boolean) </a> </code></pre> ), </li> <li> signing/origination at this moment in time (see <pre><code> <a href="https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.Builder.html#setKeyValidityStart(java.util.Date)"> setKeyValidityStart(Date) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.Builder.html#setKeyValidityForOriginationEnd(java.util.Date)"> setKeyValidityForOriginationEnd(Date) </a> </code></pre> ), </li> <li> suitable digest, </li> <li> (RSA keys only) padding scheme <pre><code> <a href="https://developer.android.com/reference/android/security/keystore/KeyProperties.html#SIGNATURE_PADDING_RSA_PKCS1"> SIGNATURE_PADDING_RSA_PKCS1 </a> </code></pre> . </li> </ul> <p> NOTE: The key material of the generated symmetric and private keys is not accessible. The key material of the public keys is accessible. <p> Instances of this class are immutable. <p> </p>\n<pre><code>public final class KeyGenParameterSpec\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.html
KeyInfo	A										<section class="prog__container"><p> Information about a key from the <a href="https://developer.android.com/training/articles/keystore.html"> Android Keystore system </a> . This class describes whether the key material is available in plaintext outside of secure hardware, whether user authentication is required for using the key and whether this requirement is enforced by secure hardware, the key's origin, what uses the key is authorized for (e.g., only in <pre><code> GCM </code></pre> mode, or signing only), whether the key should be encrypted at rest, the key's and validity start and end dates. <p> Instances of this class are immutable. <p> </p>\n<pre><code>public class KeyInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/security/keystore/KeyInfo.html
KeyNotYetValidException	A										<section class="prog__container"><p> Indicates that a cryptographic operation failed because the employed key's validity start date is in the future.</p>\n<pre><code>public class KeyNotYetValidException\n</code></pre></section>	https://developer.android.com/reference/android/security/keystore/KeyNotYetValidException.html
KeyPermanentlyInvalidatedException	A										<section class="prog__container"><p> Indicates that the key can no longer be used because it has been permanently invalidated. <p> This only occurs for keys which are authorized to be used only if the user has been authenticated. Such keys are permanently and irreversibly invalidated once the secure lock screen is disabled (i.e., reconfigured to None, Swipe or other mode which does not authenticate the user) or when the secure lock screen is forcibly reset (e.g., by Device Admin). Additionally, keys configured to require user authentication to take place for every of the keys, are also permanently invalidated once a new fingerprint is enrolled or once no more fingerprints are enrolled. </p>\n<pre><code>public class KeyPermanentlyInvalidatedException\n</code></pre></section>	https://developer.android.com/reference/android/security/keystore/KeyPermanentlyInvalidatedException.html
KeyProperties	A										<section class="prog__container"><p> Properties of <a href="https://developer.android.com/training/articles/keystore.html"> Android Keystore </a> keys.</p>\n<pre><code>public abstract class KeyProperties\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/security/keystore/KeyProperties.html
KeyProtection.Builder	A										<section class="prog__container"><p> Builder of <pre><code> <a href="https://developer.android.com/reference/android/security/keystore/KeyProtection.html"> KeyProtection </a> </code></pre> instances.</p>\n<pre><code>public static final class KeyProtection.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/security/keystore/KeyProtection.Builder.html
KeyProtection	A										<section class="prog__container"><p> Specification of how a key or key pair is secured when imported into the <a href="https://developer.android.com/training/articles/keystore.html"> Android Keystore system </a> . This class specifies authorized uses of the imported key, such as whether user authentication is required for using the key, what operations the key is authorized for (e.g., decryption, but not signing) with what parameters (e.g., only with a particular padding scheme or digest), and the key's validity start and end dates. Key use authorizations expressed in this class apply only to secret keys and private keys -- public keys can be used for any supported operations. <p> To import a key or key pair into the Android Keystore, create an instance of this class using the <pre><code> <a href="https://developer.android.com/reference/android/security/keystore/KeyProtection.Builder.html"> KeyProtection.Builder </a> </code></pre> and pass the instance into <pre><code> <a href="https://developer.android.com/reference/java/security/KeyStore.html#setEntry(java.lang.String, java.security.KeyStore.Entry, java.security.KeyStore.ProtectionParameter)"> KeyStore.setEntry </a> </code></pre> with the key or key pair being imported. <p> To obtain the secret/symmetric or private key from the Android Keystore use <pre><code> <a href="https://developer.android.com/reference/java/security/KeyStore.html#getKey(java.lang.String, char[])"> KeyStore.getKey(String, null) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/java/security/KeyStore.html#getEntry(java.lang.String, java.security.KeyStore.ProtectionParameter)"> KeyStore.getEntry(String, null) </a> </code></pre> . To obtain the public key from the Android Keystore use <pre><code> <a href="https://developer.android.com/reference/java/security/KeyStore.html#getCertificate(java.lang.String)"> getCertificate(String) </a> </code></pre> and then <pre><code> <a href="https://developer.android.com/reference/java/security/cert/Certificate.html#getPublicKey()"> getPublicKey() </a> </code></pre> . <p> To help obtain algorithm-specific public parameters of key pairs stored in the Android Keystore, its private keys implement <pre><code> <a href="https://developer.android.com/reference/java/security/interfaces/ECKey.html"> ECKey </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/java/security/interfaces/RSAKey.html"> RSAKey </a> </code></pre> interfaces whereas its public keys implement <pre><code> <a href="https://developer.android.com/reference/java/security/interfaces/ECPublicKey.html"> ECPublicKey </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/java/security/interfaces/RSAPublicKey.html"> RSAPublicKey </a> </code></pre> interfaces. <p> NOTE: The key material of keys stored in the Android Keystore is not accessible. <p> Instances of this class are immutable. <p> </p>\n<pre><code>public final class KeyProtection\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/security/keystore/KeyProtection.html
android.security.keystore	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/security/keystore/package-summary.html
UserNotAuthenticatedException	A										<section class="prog__container"><p> Indicates that a cryptographic operation could not be performed because the user has not been authenticated recently enough. Authenticating the user will resolve this issue.</p>\n<pre><code>public class UserNotAuthenticatedException\n</code></pre></section>	https://developer.android.com/reference/android/security/keystore/UserNotAuthenticatedException.html
CarrierIdentifier	A										<section class="prog__container"><p> Used to pass info to CarrierConfigService implementations so they can decide what values to return.</p>\n<pre><code>public class CarrierIdentifier\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/carrier/CarrierIdentifier.html
CarrierMessagingService	A										<section class="prog__container"><p> A service that receives calls from the system when new SMS and MMS are sent or received. <p> To extend this class, you must declare the service in your manifest file with the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_CARRIER_SERVICES"> BIND_CARRIER_SERVICES </a> </code></pre> permission and include an intent filter with the <pre><code> <a href="https://developer.android.com/reference/android/service/carrier/CarrierMessagingService.html#SERVICE_INTERFACE"> SERVICE_INTERFACE </a> </code></pre> action. For example: </p>\n<pre><code>public abstract class CarrierMessagingService\n</code></pre></section>	https://developer.android.com/reference/android/service/carrier/CarrierMessagingService.html
CarrierMessagingService.ResultCallback	A										<section class="prog__container"><p> A callback interface used to provide results asynchronously.</p>\n<pre><code>public static interface CarrierMessagingService.ResultCallback\n</code></pre></section>	https://developer.android.com/reference/android/service/carrier/CarrierMessagingService.ResultCallback.html
CarrierMessagingService.SendMmsResult	A										<section class="prog__container"><p> The result of sending an MMS.</p>\n<pre><code>public static final class CarrierMessagingService.SendMmsResult\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/carrier/CarrierMessagingService.SendMmsResult.html
CarrierMessagingService.SendMultipartSmsResult	A										<section class="prog__container"><p> The result of sending a multipart SMS.</p>\n<pre><code>public static final class CarrierMessagingService.SendMultipartSmsResult\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/carrier/CarrierMessagingService.SendMultipartSmsResult.html
CarrierMessagingService.SendSmsResult	A										<section class="prog__container"><p> The result of sending an SMS.</p>\n<pre><code>public static final class CarrierMessagingService.SendSmsResult\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/carrier/CarrierMessagingService.SendSmsResult.html
CarrierService	A										<section class="prog__container"><p> A service that exposes carrier-specific functionality to the system. <p> To extend this class, you must declare the service in your manifest file to require the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_CARRIER_SERVICES"> BIND_CARRIER_SERVICES </a> </code></pre> permission and include an intent filter with the <pre><code> <a href="https://developer.android.com/reference/android/service/carrier/CarrierService.html#CARRIER_SERVICE_INTERFACE"> CARRIER_SERVICE_INTERFACE </a> </code></pre> . If the service should have a long-lived binding, set android.service.carrier.LONG_LIVED_BINDING to true in the service's metadata. For example: </p>\n<pre><code>public abstract class CarrierService\n</code></pre></section>	https://developer.android.com/reference/android/service/carrier/CarrierService.html
MessagePdu	A										<section class="prog__container"><p> A parcelable list of PDUs representing contents of a possibly multi-part SMS.</p>\n<pre><code>public final class MessagePdu\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/carrier/MessagePdu.html
android.service.carrier	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/carrier/package-summary.html
ChooserTarget	A										<section class="prog__container"><p> A ChooserTarget represents a deep-link into an application as returned by a <pre><code> <a href="https://developer.android.com/reference/android/service/chooser/ChooserTargetService.html"> ChooserTargetService </a> </code></pre> . <p> A chooser target represents a specific deep link target into an application exposed for selection by the user. This might be a frequently emailed contact, a recently active group messaging conversation, a folder in a cloud storage app, a collection of related items published on a social media service or any other contextually relevant grouping of target app + relevant metadata. </p>\n<pre><code>public final class ChooserTarget\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/chooser/ChooserTarget.html
ChooserTargetService	A										<section class="prog__container"><p> A service that receives calls from the system when the user is asked to choose a target for an intent explicitly by another app. The calling app must have invoked <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_CHOOSER"> ACTION_CHOOSER </a> </code></pre> as handled by the system; applications do not have the ability to query a ChooserTargetService directly. <p> Which ChooserTargetServices are queried depends on a system-level policy decision made at the moment the chooser is invoked, including but not limited to user time spent with the app package or associated components in the foreground, recency of usage or frequency of usage. These will generally correlate with the order that app targets are shown in the list of intent handlers shown in the system chooser or resolver. </p>\n<pre><code>public abstract class ChooserTargetService\n</code></pre></section>	https://developer.android.com/reference/android/service/chooser/ChooserTargetService.html
android.service.chooser	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/chooser/package-summary.html
DreamService	A										<section class="prog__container"><p> Extend this class to implement a custom dream (available to the user as a "Daydream"). <p> Dreams are interactive screensavers launched when a charging device is idle, or docked in a desk dock. Dreams provide another modality for apps to express themselves, tailored for an exhibition/lean-back experience. </p>\n<pre><code>public class DreamService\n</code></pre></section>	https://developer.android.com/reference/android/service/dreams/DreamService.html
android.service.dreams	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/dreams/package-summary.html
CameraPrewarmService	A										<section class="prog__container"><p> Extend this class to implement a camera prewarm service. See <pre><code> <a href="https://developer.android.com/reference/android/provider/MediaStore.html#META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE"> META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE </a> </code></pre> .</p>\n<pre><code>public abstract class CameraPrewarmService\n</code></pre></section>	https://developer.android.com/reference/android/service/media/CameraPrewarmService.html
MediaBrowserService.BrowserRoot	A										<section class="prog__container"><p> Contains information that the browser service needs to send to the client when first connected.</p>\n<pre><code>public static final class MediaBrowserService.BrowserRoot\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/media/MediaBrowserService.BrowserRoot.html
MediaBrowserService	A										<section class="prog__container"><p> Base class for media browse services. <p> Media browse services enable applications to browse media content provided by an application and ask the application to start playing it. They may also be used to control content that is already playing by way of a <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSession.html"> MediaSession </a> </code></pre> . </p>\n<pre><code>public abstract class MediaBrowserService\n</code></pre></section>	https://developer.android.com/reference/android/service/media/MediaBrowserService.html
MediaBrowserService.Result	A										<section class="prog__container"><p> Completion handler for asynchronous callback methods in <pre><code> <a href="https://developer.android.com/reference/android/service/media/MediaBrowserService.html"> MediaBrowserService </a> </code></pre> . <p> Each of the methods that takes one of these to send the result must call <pre><code> <a href="https://developer.android.com/reference/android/service/media/MediaBrowserService.Result.html#sendResult(T)"> sendResult(T) </a> </code></pre> to respond to the caller with the given results. If those functions return without calling <pre><code> <a href="https://developer.android.com/reference/android/service/media/MediaBrowserService.Result.html#sendResult(T)"> sendResult(T) </a> </code></pre> , they must instead call <pre><code> <a href="https://developer.android.com/reference/android/service/media/MediaBrowserService.Result.html#detach()"> detach() </a> </code></pre> before returning, and then may call <pre><code> <a href="https://developer.android.com/reference/android/service/media/MediaBrowserService.Result.html#sendResult(T)"> sendResult(T) </a> </code></pre> when they are done. If more than one of those methods is called, an exception will be thrown. </p>\n<pre><code>public class MediaBrowserService.Result\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/media/MediaBrowserService.Result.html
android.service.media	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/media/package-summary.html
Condition	A										<section class="prog__container"><p> The current condition of an <pre><code> <a href="https://developer.android.com/reference/android/app/AutomaticZenRule.html"> AutomaticZenRule </a> </code></pre> , provided by the <pre><code> <a href="https://developer.android.com/reference/android/service/notification/ConditionProviderService.html"> ConditionProviderService </a> </code></pre> that owns the rule. Used to tell the system to enter Do Not Disturb mode and request that the system exit Do Not Disturb mode.</p>\n<pre><code>public final class Condition\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/notification/Condition.html
ConditionProviderService	A										<section class="prog__container"><p> A service that provides conditions about boolean state. <p> To extend this class, you must declare the service in your manifest file with the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_CONDITION_PROVIDER_SERVICE"> BIND_CONDITION_PROVIDER_SERVICE </a> </code></pre> permission and include an intent filter with the <pre><code> <a href="https://developer.android.com/reference/android/service/notification/ConditionProviderService.html#SERVICE_INTERFACE"> SERVICE_INTERFACE </a> </code></pre> action. If you want users to be able to create and update conditions for this service to monitor, include the <pre><code> <a href="https://developer.android.com/reference/android/service/notification/ConditionProviderService.html#META_DATA_RULE_TYPE"> META_DATA_RULE_TYPE </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/service/notification/ConditionProviderService.html#META_DATA_CONFIGURATION_ACTIVITY"> META_DATA_CONFIGURATION_ACTIVITY </a> </code></pre> tags and request the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_NOTIFICATION_POLICY"> ACCESS_NOTIFICATION_POLICY </a> </code></pre> permission. For example: </p>\n<pre><code>public abstract class ConditionProviderService\n</code></pre></section>	https://developer.android.com/reference/android/service/notification/ConditionProviderService.html
NotificationListenerService	A										<section class="prog__container"><p> A service that receives calls from the system when new notifications are posted or removed, or their ranking changed. <p> To extend this class, you must declare the service in your manifest file with the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_NOTIFICATION_LISTENER_SERVICE"> BIND_NOTIFICATION_LISTENER_SERVICE </a> </code></pre> permission and include an intent filter with the <pre><code> <a href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#SERVICE_INTERFACE"> SERVICE_INTERFACE </a> </code></pre> action. For example: </p>\n<pre><code>public abstract class NotificationListenerService\n</code></pre></section>	https://developer.android.com/reference/android/service/notification/NotificationListenerService.html
NotificationListenerService.Ranking	A										<section class="prog__container"><p> Stores ranking related information on a currently active notification. <p> Ranking objects aren't automatically updated as notification events occur. Instead, ranking information has to be retrieved again via the current <pre><code> <a href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.RankingMap.html"> NotificationListenerService.RankingMap </a> </code></pre> . </p>\n<pre><code>public static class NotificationListenerService.Ranking\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html
NotificationListenerService.RankingMap	A										<section class="prog__container"><p> Provides access to ranking information on currently active notifications. <p> Note that this object represents a ranking snapshot that only applies to notifications active at the time of retrieval. </p>\n<pre><code>public static class NotificationListenerService.RankingMap\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/notification/NotificationListenerService.RankingMap.html
android.service.notification	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/notification/package-summary.html
StatusBarNotification	A										<section class="prog__container"><p> Class encapsulating a Notification. Sent by the NotificationManagerService to clients including the status bar and any <pre><code> <a href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html"> NotificationListenerService </a> </code></pre> s.</p>\n<pre><code>public class StatusBarNotification\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/notification/StatusBarNotification.html
android.service.quicksettings	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/quicksettings/package-summary.html
Tile	A										<section class="prog__container"><p> A Tile holds the state of a tile that will be displayed in Quick Settings. A tile in Quick Settings exists as an icon with an accompanied label. It also may have content description for accessibility usability. The style and layout of the tile may change to match a given device.</p>\n<pre><code>public final class Tile\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/quicksettings/Tile.html
TileService	A										<section class="prog__container"><p> A TileService provides the user a tile that can be added to Quick Settings. Quick Settings is a space provided that allows the user to change settings and take quick actions without leaving the context of their current app. <p> The lifecycle of a TileService is different from some other services in that it may be unbound during parts of its lifecycle. Any of the following lifecycle events can happen indepently in a separate binding/creation of the service. </p>\n<pre><code>public class TileService\n</code></pre></section>	https://developer.android.com/reference/android/service/quicksettings/TileService.html
android.service.restrictions	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/restrictions/package-summary.html
RestrictionsReceiver	A										<section class="prog__container"><p> Abstract implementation of a Restrictions Provider BroadcastReceiver. To implement a Restrictions Provider, extend from this class and implement the abstract methods. Export this receiver in the manifest. A profile owner device admin can then register this component as a Restrictions Provider using <pre><code> <a href="https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setRestrictionsProvider(android.content.ComponentName, android.content.ComponentName)"> setRestrictionsProvider(ComponentName, ComponentName) </a> </code></pre> . <p> The function of a Restrictions Provider is to transport permission requests from apps on this device to an administrator (most likely on a remote device or computer) and deliver back responses. The response should be sent back to the app via <pre><code> <a href="https://developer.android.com/reference/android/content/RestrictionsManager.html#notifyPermissionResponse(java.lang.String, android.os.PersistableBundle)"> notifyPermissionResponse(String, PersistableBundle) </a> </code></pre> . </p>\n<pre><code>public abstract class RestrictionsReceiver\n</code></pre></section>	https://developer.android.com/reference/android/service/restrictions/RestrictionsReceiver.html
android.service.textservice	A										<section class="prog__container">Provides classes that allow you to create spell checkers in a manner similar to theinput method framework (for IMEs).</section>	https://developer.android.com/reference/android/service/textservice/package-summary.html
SpellCheckerService	A										<section class="prog__container"><p> SpellCheckerService provides an abstract base class for a spell checker. This class combines a service to the system with the spell checker service interface that spell checker must implement. <p> In addition to the normal Service lifecycle methods, this class introduces a new specific callback that subclasses should override <pre><code> <a href="https://developer.android.com/reference/android/service/textservice/SpellCheckerService.html#createSession()"> createSession() </a> </code></pre> to provide a spell checker session that is corresponding to requested language and so on. The spell checker session returned by this method should extend <pre><code> <a href="https://developer.android.com/reference/android/service/textservice/SpellCheckerService.Session.html"> SpellCheckerService.Session </a> </code></pre> . </p>\n<pre><code>public abstract class SpellCheckerService\n</code></pre></section>	https://developer.android.com/reference/android/service/textservice/SpellCheckerService.html
SpellCheckerService.Session	A										<section class="prog__container"><p> This abstract class should be overridden by a concrete implementation of a spell checker.</p>\n<pre><code>public static abstract class SpellCheckerService.Session\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/textservice/SpellCheckerService.Session.html
AlwaysOnHotwordDetector.Callback	A										<section class="prog__container"><p> Callbacks for always-on hotword detection.</p>\n<pre><code>public static abstract class AlwaysOnHotwordDetector.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/voice/AlwaysOnHotwordDetector.Callback.html
AlwaysOnHotwordDetector.EventPayload	A										<section class="prog__container"><p> Additional payload for <pre><code> <a href="https://developer.android.com/reference/android/service/voice/AlwaysOnHotwordDetector.Callback.html#onDetected(android.service.voice.AlwaysOnHotwordDetector.EventPayload)"> onDetected(AlwaysOnHotwordDetector.EventPayload) </a> </code></pre> .</p>\n<pre><code>public static class AlwaysOnHotwordDetector.EventPayload\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/voice/AlwaysOnHotwordDetector.EventPayload.html
AlwaysOnHotwordDetector	A										<section class="prog__container"><p> A class that lets a VoiceInteractionService implementation interact with always-on keyphrase detection APIs.</p>\n<pre><code>public class AlwaysOnHotwordDetector\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/voice/AlwaysOnHotwordDetector.html
android.service.voice	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/voice/package-summary.html
VoiceInteractionService	A										<section class="prog__container"><p> Top-level service of the current global voice interactor, which is providing support for hotwording, the back-end of a <pre><code> <a href="https://developer.android.com/reference/android/app/VoiceInteractor.html"> VoiceInteractor </a> </code></pre> , etc. The current VoiceInteractionService that has been selected by the user is kept always running by the system, to allow it to do things like listen for hotwords in the background to instigate voice interactions. <p> Because this service is always running, it should be kept as lightweight as possible. Heavy-weight operations (including showing UI) should be implemented in the associated <pre><code> <a href="https://developer.android.com/reference/android/service/voice/VoiceInteractionSessionService.html"> VoiceInteractionSessionService </a> </code></pre> when an actual voice interaction is taking place, and that service should run in a separate process from this one. </p>\n<pre><code>public class VoiceInteractionService\n</code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionService.html
VoiceInteractionSession.AbortVoiceRequest	A										<section class="prog__container"><p> A request to report that the current user interaction can not be completed with voice, as per <pre><code> <a href="https://developer.android.com/reference/android/app/VoiceInteractor.AbortVoiceRequest.html"> VoiceInteractor.AbortVoiceRequest </a> </code></pre> .</p>\n<pre><code>public static final class VoiceInteractionSession.AbortVoiceRequest\n</code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.AbortVoiceRequest.html
VoiceInteractionSession.CommandRequest	A										<section class="prog__container"><p> A generic vendor-specific request, as per <pre><code> <a href="https://developer.android.com/reference/android/app/VoiceInteractor.CommandRequest.html"> VoiceInteractor.CommandRequest </a> </code></pre> .</p>\n<pre><code>public static final class VoiceInteractionSession.CommandRequest\n</code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.CommandRequest.html
VoiceInteractionSession.CompleteVoiceRequest	A										<section class="prog__container"><p> A request to simply inform the user that the voice operation has completed, as per <pre><code> <a href="https://developer.android.com/reference/android/app/VoiceInteractor.CompleteVoiceRequest.html"> VoiceInteractor.CompleteVoiceRequest </a> </code></pre> .</p>\n<pre><code>public static final class VoiceInteractionSession.CompleteVoiceRequest\n</code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.CompleteVoiceRequest.html
VoiceInteractionSession.ConfirmationRequest	A										<section class="prog__container"><p> A request for confirmation from the user of an operation, as per <pre><code> <a href="https://developer.android.com/reference/android/app/VoiceInteractor.ConfirmationRequest.html"> VoiceInteractor.ConfirmationRequest </a> </code></pre> .</p>\n<pre><code>public static final class VoiceInteractionSession.ConfirmationRequest\n</code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.ConfirmationRequest.html
VoiceInteractionSession	A										<section class="prog__container"><p> An active voice interaction session, providing a facility for the implementation to interact with the user in the voice interaction layer. The user interface is initially shown by default, and can be created be overriding <pre><code> <a href="https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onCreateContentView()"> onCreateContentView() </a> </code></pre> in which the UI can be built. <p> A voice interaction session can be self-contained, ultimately calling <pre><code> <a href="https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#finish()"> finish() </a> </code></pre> when done. It can also initiate voice interactions with applications by calling <pre><code> <a href="https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#startVoiceActivity(android.content.Intent)"> startVoiceActivity(Intent) </a> </code></pre> </p>\n<pre><code>public class VoiceInteractionSession\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html
VoiceInteractionSession.Insets	A										<section class="prog__container"><p> Information about where interesting parts of the input method UI appear.</p>\n<pre><code>public static final class VoiceInteractionSession.Insets\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.Insets.html
VoiceInteractionSession.PickOptionRequest	A										<section class="prog__container"><p> A request for the user to pick from a set of option, as per <pre><code> <a href="https://developer.android.com/reference/android/app/VoiceInteractor.PickOptionRequest.html"> VoiceInteractor.PickOptionRequest </a> </code></pre> .</p>\n<pre><code>public static final class VoiceInteractionSession.PickOptionRequest\n</code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.PickOptionRequest.html
VoiceInteractionSession.Request	A										<section class="prog__container"><p> Base class representing a request from a voice-driver app to perform a particular voice operation with the user. See related subclasses for the types of requests that are possible.</p>\n<pre><code>public static class VoiceInteractionSession.Request\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.Request.html
VoiceInteractionSessionService	A										<section class="prog__container"><p> An active voice interaction session, initiated by a <pre><code> <a href="https://developer.android.com/reference/android/service/voice/VoiceInteractionService.html"> VoiceInteractionService </a> </code></pre> .</p>\n<pre><code>public abstract class VoiceInteractionSessionService\n</code></pre></section>	https://developer.android.com/reference/android/service/voice/VoiceInteractionSessionService.html
android.service.vr	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/vr/package-summary.html
VrListenerService	A										<section class="prog__container"><p> A service that is bound from the system while running in virtual reality (VR) mode. <p> To extend this class, you must declare the service in your manifest file with the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_VR_LISTENER_SERVICE"> BIND_VR_LISTENER_SERVICE </a> </code></pre> permission and include an intent filter with the <pre><code> <a href="https://developer.android.com/reference/android/service/vr/VrListenerService.html#SERVICE_INTERFACE"> SERVICE_INTERFACE </a> </code></pre> action. For example: </p>\n<pre><code>public abstract class VrListenerService\n</code></pre></section>	https://developer.android.com/reference/android/service/vr/VrListenerService.html
android.service.wallpaper	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/service/wallpaper/package-summary.html
WallpaperService.Engine	A										<section class="prog__container"><p> The actual implementation of a wallpaper. A wallpaper service may have multiple instances running (for example as a real wallpaper and as a preview), each of which is represented by its own Engine instance. You must implement <pre><code> <a href="https://developer.android.com/reference/android/service/wallpaper/WallpaperService.html#onCreateEngine()"> onCreateEngine() </a> </code></pre> to return your concrete Engine implementation.</p>\n<pre><code>public class WallpaperService.Engine\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/service/wallpaper/WallpaperService.Engine.html
WallpaperService	A										<section class="prog__container"><p> A wallpaper service is responsible for showing a live wallpaper behind applications that would like to sit on top of it. This service object itself does very little -- its only purpose is to generate instances of <pre><code> <a href="https://developer.android.com/reference/android/service/wallpaper/WallpaperService.Engine.html"> WallpaperService.Engine </a> </code></pre> as needed. Implementing a wallpaper thus involves subclassing from this, subclassing an Engine implementation, and implementing <pre><code> <a href="https://developer.android.com/reference/android/service/wallpaper/WallpaperService.html#onCreateEngine()"> onCreateEngine() </a> </code></pre> to return a new instance of your engine.</p>\n<pre><code>public abstract class WallpaperService\n</code></pre></section>	https://developer.android.com/reference/android/service/wallpaper/WallpaperService.html
android.speech	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/speech/package-summary.html
RecognitionListener	A										<section class="prog__container"><p> Used for receiving notifications from the SpeechRecognizer when the recognition related events occur. All the callbacks are executed on the Application main thread.</p>\n<pre><code>public interface RecognitionListener\n</code></pre></section>	https://developer.android.com/reference/android/speech/RecognitionListener.html
RecognitionService.Callback	A										<section class="prog__container"><p> This class receives callbacks from the speech recognition service and forwards them to the user. An instance of this class is passed to the <pre><code> <a href="https://developer.android.com/reference/android/speech/RecognitionService.html#onStartListening(android.content.Intent, android.speech.RecognitionService.Callback)"> onStartListening(Intent, Callback) </a> </code></pre> method. Recognizers may call these methods on any thread.</p>\n<pre><code>public class RecognitionService.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/speech/RecognitionService.Callback.html
RecognitionService	A										<section class="prog__container"><p> This class provides a base class for recognition service implementations. This class should be extended only in case you wish to implement a new speech recognizer. Please note that the implementation of this service is stateless.</p>\n<pre><code>public abstract class RecognitionService\n</code></pre></section>	https://developer.android.com/reference/android/speech/RecognitionService.html
RecognizerIntent	A										<section class="prog__container"><p> Constants for supporting speech recognition through starting an <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html"> Intent </a> </code></pre></p>\n<pre><code>public class RecognizerIntent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/speech/RecognizerIntent.html
RecognizerResultsIntent	A										<section class="prog__container"><p> Constants for intents related to showing speech recognition results. These constants should not be needed for normal utilization of speech recognition. They would only be called if you wanted to trigger a view of voice search results in your application, or implemented if you wanted to offer a different view for voice search results with your application. The standard behavior here for someone receiving an <pre><code> <a href="https://developer.android.com/reference/android/speech/RecognizerResultsIntent.html#ACTION_VOICE_SEARCH_RESULTS"> ACTION_VOICE_SEARCH_RESULTS </a> </code></pre> is to first retrieve the list of <pre><code> <a href="https://developer.android.com/reference/android/speech/RecognizerResultsIntent.html#EXTRA_VOICE_SEARCH_RESULT_STRINGS"> EXTRA_VOICE_SEARCH_RESULT_STRINGS </a> </code></pre> , and use any provided HTML for that result in <pre><code> <a href="https://developer.android.com/reference/android/speech/RecognizerResultsIntent.html#EXTRA_VOICE_SEARCH_RESULT_HTML"> EXTRA_VOICE_SEARCH_RESULT_HTML </a> </code></pre> , if available, to display the search results. If that is not available, then the corresponding url for that result in <pre><code> <a href="https://developer.android.com/reference/android/speech/RecognizerResultsIntent.html#EXTRA_VOICE_SEARCH_RESULT_URLS"> EXTRA_VOICE_SEARCH_RESULT_URLS </a> </code></pre> should be used. And if even that is not available, then a search url should be constructed from the actual recognition result string.</p>\n<pre><code>public class RecognizerResultsIntent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/speech/RecognizerResultsIntent.html
SpeechRecognizer	A										<section class="prog__container"><p> This class provides access to the speech recognition service. This service allows access to the speech recognizer. Do not instantiate this class directly, instead, call <pre><code> <a href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html#createSpeechRecognizer(android.content.Context)"> createSpeechRecognizer(Context) </a> </code></pre> . This class's methods must be invoked only from the main application thread. <p> The implementation of this API is likely to stream audio to remote servers to perform speech recognition. As such this API is not intended to be used for continuous recognition, which would consume a significant amount of battery and bandwidth. <p> Please note that the application must have <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#RECORD_AUDIO"> RECORD_AUDIO </a> </code></pre> permission to use this class. </p>\n<pre><code>public class SpeechRecognizer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/speech/SpeechRecognizer.html
android.speech.tts	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/speech/tts/package-summary.html
SynthesisCallback	A										<section class="prog__container"><p> A callback to return speech data synthesized by a text to speech engine. The engine can provide streaming audio by calling <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#start(int, int, int)"> start(int, int, int) </a> </code></pre> , then <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#audioAvailable(byte[], int, int)"> audioAvailable(byte[], int, int) </a> </code></pre> until all audio has been provided, then finally <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#done()"> done() </a> </code></pre> . <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#error()"> error() </a> </code></pre> can be called at any stage in the synthesis process to indicate that an error has occurred, but if the call is made after a call to <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#done()"> done() </a> </code></pre> , it might be discarded. <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html#done()"> done() </a> </code></pre> must be called at the end of synthesis, regardless of errors. All methods can be only called on the synthesis thread.</p>\n<pre><code>public interface SynthesisCallback\n</code></pre></section>	https://developer.android.com/reference/android/speech/tts/SynthesisCallback.html
SynthesisRequest	A										<section class="prog__container"><p> Contains data required by engines to synthesize speech. This data is: <ul> <li> The text to synthesize </li> <li> The synthesis locale, represented as a language, country and a variant. The language is an ISO 639-3 letter language code, and the country is an ISO 3166 alpha 3 code. The variant is not specified. </li> <li> The name of the voice requested for this synthesis. May be empty if the client uses <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setLanguage(java.util.Locale)"> setLanguage(Locale) </a> </code></pre> instead of <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setVoice(android.speech.tts.Voice)"> setVoice(Voice) </a> </code></pre> </li> <li> The synthesis speech rate, with 100 being the normal, and higher values representing higher speech rates. </li> <li> The voice pitch, with 100 being the default pitch. </li> </ul> Any additional parameters sent to the text to speech service are passed in uninterpreted, see the <pre><code> params </code></pre> argument in <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#speak(java.lang.CharSequence, int, android.os.Bundle, java.lang.String)"> speak(CharSequence, int, Bundle, String) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#synthesizeToFile(java.lang.CharSequence, android.os.Bundle, java.io.File, java.lang.String)"> synthesizeToFile(CharSequence, Bundle, File, String) </a> </code></pre> .</p>\n<pre><code>public final class SynthesisRequest\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/speech/tts/SynthesisRequest.html
TextToSpeech.Engine	A										<section class="prog__container"><p> Constants and parameter names for controlling text-to-speech. These include: <ul> <li> Intents to ask engine to install data or check its data and extras for a TTS engine's check data activity. </li> <li> Keys for the parameters passed with speak commands, e.g. <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#KEY_PARAM_UTTERANCE_ID"> KEY_PARAM_UTTERANCE_ID </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#KEY_PARAM_STREAM"> KEY_PARAM_STREAM </a> </code></pre> . </li> <li> A list of feature strings that engines might support, e.g <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#KEY_FEATURE_NETWORK_SYNTHESIS"> KEY_FEATURE_NETWORK_SYNTHESIS </a> </code></pre> . These values may be passed in to <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#speak(java.lang.CharSequence, int, android.os.Bundle, java.lang.String)"> speak(CharSequence, int, Bundle, String) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#synthesizeToFile(java.lang.CharSequence, android.os.Bundle, java.io.File, java.lang.String)"> synthesizeToFile(CharSequence, Bundle, File, String) </a> </code></pre> to modify engine behaviour. The engine can be queried for the set of features it supports through <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getFeatures(java.util.Locale)"> getFeatures(java.util.Locale) </a> </code></pre> . </li> </ul></p>\n<pre><code>public class TextToSpeech.Engine\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html
TextToSpeech.EngineInfo	A										<section class="prog__container"><p> Information about an installed text-to-speech engine.</p>\n<pre><code>public static class TextToSpeech.EngineInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/speech/tts/TextToSpeech.EngineInfo.html
TextToSpeech	A										<section class="prog__container"><p> Synthesizes speech from text for immediate playback or to create a sound file. <p> A TextToSpeech instance can only be used to synthesize text once it has completed its initialization. Implement the <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.OnInitListener.html"> TextToSpeech.OnInitListener </a> </code></pre> to be notified of the completion of the initialization. <br> When you are done using the TextToSpeech instance, call the <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#shutdown()"> shutdown() </a> </code></pre> method to release the native resources used by the TextToSpeech engine. </br> </p>\n<pre><code>public class TextToSpeech\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/speech/tts/TextToSpeech.html
TextToSpeech.OnInitListener	A										<section class="prog__container"><p> Interface definition of a callback to be invoked indicating the completion of the TextToSpeech engine initialization.</p>\n<pre><code>public static interface TextToSpeech.OnInitListener\n</code></pre></section>	https://developer.android.com/reference/android/speech/tts/TextToSpeech.OnInitListener.html
TextToSpeech.OnUtteranceCompletedListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 18. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/UtteranceProgressListener.html"> UtteranceProgressListener </a> </code></pre> instead. </p>\n<pre><code>public static interface TextToSpeech.OnUtteranceCompletedListener\n</code></pre></section>	https://developer.android.com/reference/android/speech/tts/TextToSpeech.OnUtteranceCompletedListener.html
TextToSpeechService	A										<section class="prog__container"><p> Abstract base class for TTS engine implementations. The following methods need to be implemented: <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeechService.html#onIsLanguageAvailable(java.lang.String, java.lang.String, java.lang.String)"> onIsLanguageAvailable(String, String, String) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeechService.html#onLoadLanguage(java.lang.String, java.lang.String, java.lang.String)"> onLoadLanguage(String, String, String) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeechService.html#onGetLanguage()"> onGetLanguage() </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeechService.html#onSynthesizeText(android.speech.tts.SynthesisRequest, android.speech.tts.SynthesisCallback)"> onSynthesizeText(SynthesisRequest, SynthesisCallback) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeechService.html#onStop()"> onStop() </a> </code></pre> </li> </ul> The first three deal primarily with language management, and are used to query the engine for it's support for a given language and indicate to it that requests in a given language are imminent. <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeechService.html#onSynthesizeText(android.speech.tts.SynthesisRequest, android.speech.tts.SynthesisCallback)"> onSynthesizeText(SynthesisRequest, SynthesisCallback) </a> </code></pre> is central to the engine implementation. The implementation should synthesize text as per the request parameters and return synthesized data via the supplied callback. This class and its helpers will then consume that data, which might mean queuing it for playback or writing it to a file or similar. All calls to this method will be on a single thread, which will be different from the main thread of the service. Synthesis must be synchronous which means the engine must NOT hold on to the callback or call any methods on it after the method returns. <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeechService.html#onStop()"> onStop() </a> </code></pre> tells the engine that it should stop all ongoing synthesis, if any. Any pending data from the current synthesis will be discarded. <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeechService.html#onGetLanguage()"> onGetLanguage() </a> </code></pre> is not required as of JELLYBEAN_MR2 (API 18) and later, it is only called on earlier versions of Android. API Level 20 adds support for Voice objects. Voices are an abstraction that allow the TTS service to expose multiple backends for a single locale. Each one of them can have a different features set. In order to fully take advantage of voices, an engine should implement the following methods: <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeechService.html#onGetVoices()"> onGetVoices() </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeechService.html#onIsValidVoiceName(java.lang.String)"> onIsValidVoiceName(String) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeechService.html#onLoadVoice(java.lang.String)"> onLoadVoice(String) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeechService.html#onGetDefaultVoiceNameFor(java.lang.String, java.lang.String, java.lang.String)"> onGetDefaultVoiceNameFor(String, String, String) </a> </code></pre> </li> </ul> The first three methods are siblings of the <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeechService.html#onGetLanguage()"> onGetLanguage() </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeechService.html#onIsLanguageAvailable(java.lang.String, java.lang.String, java.lang.String)"> onIsLanguageAvailable(String, String, String) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeechService.html#onLoadLanguage(java.lang.String, java.lang.String, java.lang.String)"> onLoadLanguage(String, String, String) </a> </code></pre> methods. The last one, <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeechService.html#onGetDefaultVoiceNameFor(java.lang.String, java.lang.String, java.lang.String)"> onGetDefaultVoiceNameFor(String, String, String) </a> </code></pre> is a link between locale and voice based methods. Since API level 21 <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setLanguage(java.util.Locale)"> setLanguage(Locale) </a> </code></pre> is implemented by calling <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setVoice(android.speech.tts.Voice)"> setVoice(Voice) </a> </code></pre> with the voice returned by <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeechService.html#onGetDefaultVoiceNameFor(java.lang.String, java.lang.String, java.lang.String)"> onGetDefaultVoiceNameFor(String, String, String) </a> </code></pre> . If the client uses a voice instead of a locale, <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/SynthesisRequest.html"> SynthesisRequest </a> </code></pre> will contain the requested voice name. The default implementations of Voice-related methods implement them using the pre-existing locale-based implementation.</p>\n<pre><code>public abstract class TextToSpeechService\n</code></pre></section>	https://developer.android.com/reference/android/speech/tts/TextToSpeechService.html
UtteranceProgressListener	A										<section class="prog__container"><p> Listener for events relating to the progress of an utterance through the synthesis queue. Each utterance is associated with a call to <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#speak(java.lang.CharSequence, int, android.os.Bundle, java.lang.String)"> speak(CharSequence, int, Bundle, String) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#synthesizeToFile(java.lang.CharSequence, android.os.Bundle, java.io.File, java.lang.String)"> synthesizeToFile(CharSequence, Bundle, File, String) </a> </code></pre> with an associated utterance identifier, as per <pre><code> <a href="https://developer.android.com/reference/android/speech/tts/TextToSpeech.Engine.html#KEY_PARAM_UTTERANCE_ID"> KEY_PARAM_UTTERANCE_ID </a> </code></pre> . The callbacks specified in this method can be called from multiple threads.</p>\n<pre><code>public abstract class UtteranceProgressListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/speech/tts/UtteranceProgressListener.html
Voice	A										<section class="prog__container"><p> Characteristics and features of a Text-To-Speech Voice. Each TTS Engine can expose multiple voices for each locale, with different set of features.</p>\n<pre><code>public class Voice\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/speech/tts/Voice.html
AnimatorRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be an animator resource reference (e.g. <pre><code> android.R.animator.fade_in </code></pre> ).</p>\n<pre><code>public abstract @interface AnimatorRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/AnimatorRes.html
AnimRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be an anim resource reference (e.g. <pre><code> android.R.anim.fade_in </code></pre> ).</p>\n<pre><code>public abstract @interface AnimRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/AnimRes.html
AnyRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a resource reference of any type. If the specific type is known, use one of the more specific annotations instead, such as <pre><code> <a href="https://developer.android.com/reference/android/support/annotation/StringRes.html"> StringRes </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/support/annotation/DrawableRes.html"> DrawableRes </a> </code></pre> .</p>\n<pre><code>public abstract @interface AnyRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/AnyRes.html
AnyThread	A										<section class="prog__container"><p> Denotes that the annotated method can be called from any thread (e.g. it is "thread safe".) If the annotated element is a class, then all methods in the class can be called from any thread. <p> The main purpose of this method is to indicate that you believe a method can be called from any thread; static tools can then check that nothing you call from within this method or class have more strict threading requirements. <p> Example: <pre><pre><code> @AnyThread public void deliverResult(D data) { ... } </code></pre></pre> </p>\n<pre><code>public abstract @interface AnyThread\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/AnyThread.html
ArrayRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be an array resource reference (e.g. <pre><code> android.R.array.phoneTypes </code></pre> ).</p>\n<pre><code>public abstract @interface ArrayRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/ArrayRes.html
AttrRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be an attribute reference (e.g. <pre><code> android.R.attr.action </code></pre> ).</p>\n<pre><code>public abstract @interface AttrRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/AttrRes.html
BinderThread	A										<section class="prog__container"><p> Denotes that the annotated method should only be called on the binder thread. If the annotated element is a class, then all methods in the class should be called on the binder thread. <p> Example: <pre><pre><code> @BinderThread public BeamShareData createBeamShareData() { ... } </code></pre></pre> </p>\n<pre><code>public abstract @interface BinderThread\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/BinderThread.html
BoolRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a boolean resource reference.</p>\n<pre><code>public abstract @interface BoolRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/BoolRes.html
CallSuper	A										<section class="prog__container"><p> Denotes that any overriding methods should invoke this method as well. <p> Example: <pre><pre><code> @CallSuper public abstract void onFocusLost(); </code></pre></pre> </p>\n<pre><code>public abstract @interface CallSuper\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/CallSuper.html
CheckResult	A										<section class="prog__container"><p> Denotes that the annotated method returns a result that it typically is an error to ignore. This is usually used for methods that have no side effect, so calling it without actually looking at the result usually means the developer has misunderstood what the method does. <p> Example: <pre><pre><code>public @CheckResult String trim(String s) { return s.trim(); } ... s.trim(); // this is probably an error s = s.trim(); // ok </code></pre></pre> </p>\n<pre><code>public abstract @interface CheckResult\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/CheckResult.html
ColorInt	A										<section class="prog__container"><p> Denotes that the annotated element represents a packed color int, <pre><code> AARRGGBB </code></pre> . If applied to an int array, every element in the array represents a color integer. <p> Example: <pre><pre><code>public abstract void setTextColor(@ColorInt int color); </code></pre></pre> </p>\n<pre><code>public abstract @interface ColorInt\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/ColorInt.html
ColorRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a color resource reference (e.g. <pre><code> android.R.color.black </code></pre> ).</p>\n<pre><code>public abstract @interface ColorRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/ColorRes.html
DimenRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a dimension resource reference (e.g. <pre><code> android.R.dimen.app_icon_size </code></pre> ).</p>\n<pre><code>public abstract @interface DimenRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/DimenRes.html
Dimension	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to represent a dimension.</p>\n<pre><code>public abstract @interface Dimension\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/Dimension.html
DrawableRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a drawable resource reference (e.g. <pre><code> android.R.attr.alertDialogIcon </code></pre> ).</p>\n<pre><code>public abstract @interface DrawableRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/DrawableRes.html
FloatRange	A										<section class="prog__container"><p> Denotes that the annotated element should be a float or double in the given range <p> Example: <pre><pre><code> @FloatRange(from=0.0,to=1.0) public float getAlpha() { ... } </code></pre></pre> </p>\n<pre><code>public abstract @interface FloatRange\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/FloatRange.html
FractionRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a fraction resource reference.</p>\n<pre><code>public abstract @interface FractionRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/FractionRes.html
IdRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be an id resource reference (e.g. <pre><code> android.R.id.copy </code></pre> ).</p>\n<pre><code>public abstract @interface IdRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/IdRes.html
IntDef	A										<section class="prog__container"><p> Denotes that the annotated element of integer type, represents a logical type and that its value should be one of the explicitly named constants. If the IntDef#flag() attribute is set to true, multiple constants can be combined. <p> Example: <pre><pre><code> @Retention(SOURCE) @IntDef({NAVIGATION_MODE_STANDARD, NAVIGATION_MODE_LIST, NAVIGATION_MODE_TABS}) public @interface NavigationMode {} public static final int NAVIGATION_MODE_STANDARD = 0; public static final int NAVIGATION_MODE_LIST = 1; public static final int NAVIGATION_MODE_TABS = 2; ... public abstract void setNavigationMode(@NavigationMode int mode); @NavigationMode public abstract int getNavigationMode(); </code></pre></pre> For a flag, set the flag attribute: <pre><pre><code> @IntDef( flag = true value = {NAVIGATION_MODE_STANDARD, NAVIGATION_MODE_LIST, NAVIGATION_MODE_TABS}) </code></pre></pre> </p>\n<pre><code>public abstract @interface IntDef\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/IntDef.html
IntegerRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be an integer resource reference (e.g. <pre><code> android.R.integer.config_shortAnimTime </code></pre> ).</p>\n<pre><code>public abstract @interface IntegerRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/IntegerRes.html
InterpolatorRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be an interpolator resource reference (e.g. <pre><code> android.R.interpolator.cycle </code></pre> ).</p>\n<pre><code>public abstract @interface InterpolatorRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/InterpolatorRes.html
IntRange	A										<section class="prog__container"><p> Denotes that the annotated element should be an int or long in the given range <p> Example: <pre><pre><code> @IntRange(from=0,to=255) public int getAlpha() { ... } </code></pre></pre> </p>\n<pre><code>public abstract @interface IntRange\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/IntRange.html
Keep	A										<section class="prog__container"><p> Denotes that the annotated element should not be removed when the code is minified at build time. This is typically used on methods and classes that are accessed only via reflection so a compiler may think that the code is unused. <p> Example: <pre><pre><code> @Keep public void foo() { ... } </code></pre></pre> </p>\n<pre><code>public abstract @interface Keep\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/Keep.html
LayoutRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a layout resource reference (e.g. <pre><code> android.R.layout.list_content </code></pre> ).</p>\n<pre><code>public abstract @interface LayoutRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/LayoutRes.html
MainThread	A										<section class="prog__container"><p> Denotes that the annotated method should only be called on the main thread. If the annotated element is a class, then all methods in the class should be called on the main thread. <p> Example: <pre><pre><code> @MainThread public void deliverResult(D data) { ... } </code></pre></pre> </p>\n<pre><code>public abstract @interface MainThread\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/MainThread.html
MenuRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a menu resource reference.</p>\n<pre><code>public abstract @interface MenuRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/MenuRes.html
NonNull	A										<section class="prog__container"><p> Denotes that a parameter, field or method return value can never be null. <p> This is a marker annotation and it has no specific attributes. </p>\n<pre><code>public abstract @interface NonNull\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/NonNull.html
Nullable	A										<section class="prog__container"><p> Denotes that a parameter, field or method return value can be null. <p> When decorating a method call parameter, this denotes that the parameter can legitimately be null and the method will gracefully deal with it. Typically used on optional parameters. <p> When decorating a method, this denotes the method might legitimately return null. <p> This is a marker annotation and it has no specific attributes. </p>\n<pre><code>public abstract @interface Nullable\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/Nullable.html
android.support.annotation	A										<section class="prog__container">Example:</section>	https://developer.android.com/reference/android/support/annotation/package-summary.html
PluralsRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a plurals resource reference.</p>\n<pre><code>public abstract @interface PluralsRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/PluralsRes.html
Px	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to represent a pixel dimension.</p>\n<pre><code>public abstract @interface Px\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/Px.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/R.html
RawRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a raw resource reference.</p>\n<pre><code>public abstract @interface RawRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/RawRes.html
RequiresApi	A										<section class="prog__container"><p> Denotes that the annotated element should only be called on the given API level or higher. <p> This is similar in purpose to the older <pre><code> @TargetApi </code></pre> annotation, but more clearly expresses that this is a requirement on the caller, rather than being used to "suppress" warnings within the method that exceed the <pre><code> minSdkVersion </code></pre> . </p>\n<pre><code>public abstract @interface RequiresApi\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/RequiresApi.html
RequiresPermission	A										<section class="prog__container"><p> Denotes that the annotated element requires (or may require) one or more permissions. <p> Example of requiring a single permission: <pre><pre><code> @RequiresPermission(Manifest.permission.SET_WALLPAPER) public abstract void setWallpaper(Bitmap bitmap) throws IOException; @RequiresPermission(ACCESS_COARSE_LOCATION) public abstract Location getLastKnownLocation(String provider); </code></pre></pre> Example of requiring at least one permission from a set: <pre><pre><code> @RequiresPermission(anyOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}) public abstract Location getLastKnownLocation(String provider); </code></pre></pre> Example of requiring multiple permissions: <pre><pre><code> @RequiresPermission(allOf = {ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION}) public abstract Location getLastKnownLocation(String provider); </code></pre></pre> Example of requiring separate read and write permissions for a content provider: <pre><pre><code> @RequiresPermission.Read(@RequiresPermission(READ_HISTORY_BOOKMARKS)) @RequiresPermission.Write(@RequiresPermission(WRITE_HISTORY_BOOKMARKS)) public static final Uri BOOKMARKS_URI = Uri.parse("content://browser/bookmarks"); </code></pre></pre> <p> When specified on a parameter, the annotation indicates that the method requires a permission which depends on the value of the parameter. For example, consider <pre><code> android.app.Activity.startActivity(android.content.Intent) </code></pre> : <pre><pre><code>public void startActivity(@RequiresPermission Intent intent) { ... } </code></pre></pre> Notice how there are no actual permission names listed in the annotation. The actual permissions required will depend on the particular intent passed in. For example, the code may look like this: <pre><pre><code>Intent intent = new Intent(Intent.ACTION_CALL); startActivity(intent); </code></pre></pre> and the actual permission requirement for this particular intent is described on the Intent name itself: <pre><pre><code> @RequiresPermission(Manifest.permission.CALL_PHONE) public static final String ACTION_CALL = "android.intent.action.CALL"; </code></pre></pre> </p>\n<pre><code>public abstract @interface RequiresPermission\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/RequiresPermission.html
RequiresPermission.Read	A										<section class="prog__container"><p> Specifies that the given permission is required for read operations. <p> When specified on a parameter, the annotation indicates that the method requires a permission which depends on the value of the parameter (and typically the corresponding field passed in will be one of a set of constants which have been annotated with a <pre><code> @RequiresPermission </code></pre> annotation.) </p>\n<pre><code>public static abstract @interface RequiresPermission.Read\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/RequiresPermission.Read.html
RequiresPermission.Write	A										<section class="prog__container"><p> Specifies that the given permission is required for write operations. <p> When specified on a parameter, the annotation indicates that the method requires a permission which depends on the value of the parameter (and typically the corresponding field passed in will be one of a set of constants which have been annotated with a <pre><code> @RequiresPermission </code></pre> annotation.) </p>\n<pre><code>public static abstract @interface RequiresPermission.Write\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/RequiresPermission.Write.html
RestrictTo	A										<section class="prog__container"><p> Denotes that the annotated element should only be accessed from within a specific scope (as defined by <pre><code> <a href="https://developer.android.com/reference/android/support/annotation/RestrictTo.Scope.html"> RestrictTo.Scope </a> </code></pre> ). <p> Example of restricting usage within a library (based on gradle group ID): <pre><pre><code> @RestrictTo(GROUP_ID) public void resetPaddingToInitialValues() { ... </code></pre></pre> Example of restricting usage to tests: <pre><pre><code> @RestrictScope(TESTS) public abstract int getUserId(); </code></pre></pre> Example of restricting usage to subclasses: <pre><pre><code> @RestrictScope(SUBCLASSES) public void onDrawForeground(Canvas canvas) { ... </code></pre></pre> </p>\n<pre><code>public abstract @interface RestrictTo\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/RestrictTo.html
RestrictTo.Scope	A										<section class="prog__container"><p> <em> This field is deprecated. Use <pre><code> <a href="https://developer.android.com/reference/android/support/annotation/RestrictTo.Scope.html#LIBRARY_GROUP"> LIBRARY_GROUP </a> </code></pre> instead </em></p>\n<pre><code>public static final enum RestrictTo.Scope\n</code></pre></section>	https://developer.android.com/reference/android/support/annotation/RestrictTo.Scope.html
Size	A										<section class="prog__container"><p> Denotes that the annotated element should have a given size or length. Note that "-1" means "unset". Typically used with a parameter or return value of type array or collection. <p> Example: <pre><pre><code>public void getLocationInWindow(@Size(2) int[] location) { ... } </code></pre></pre> </p>\n<pre><code>public abstract @interface Size\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/Size.html
StringDef	A										<section class="prog__container"><p> Denotes that the annotated String element, represents a logical type and that its value should be one of the explicitly named constants. <p> Example: <pre><pre><code> @Retention(SOURCE) @StringDef({ POWER_SERVICE, WINDOW_SERVICE, LAYOUT_INFLATER_SERVICE }) public @interface ServiceName {} public static final String POWER_SERVICE = "power"; public static final String WINDOW_SERVICE = "window"; public static final String LAYOUT_INFLATER_SERVICE = "layout_inflater"; ... public abstract Object getSystemService(@ServiceName String name); </code></pre></pre> </p>\n<pre><code>public abstract @interface StringDef\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/StringDef.html
StringRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a String resource reference (e.g. <pre><code> android.R.string.ok </code></pre> ).</p>\n<pre><code>public abstract @interface StringRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/StringRes.html
StyleableRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a styleable resource reference (e.g. <pre><code> android.R.styleable.TextView_text </code></pre> ).</p>\n<pre><code>public abstract @interface StyleableRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/StyleableRes.html
StyleRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a style resource reference (e.g. <pre><code> android.R.style.TextAppearance </code></pre> ).</p>\n<pre><code>public abstract @interface StyleRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/StyleRes.html
TransitionRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be a transition resource reference.</p>\n<pre><code>public abstract @interface TransitionRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/TransitionRes.html
UiThread	A										<section class="prog__container"><p> Denotes that the annotated method or constructor should only be called on the UI thread. If the annotated element is a class, then all methods in the class should be called on the UI thread. <p> Example: <pre><pre><code> @UiThread public abstract void setText(@NonNull String text) { ... } </code></pre></pre> </p>\n<pre><code>public abstract @interface UiThread\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/UiThread.html
VisibleForTesting	A										<section class="prog__container"><p> Denotes that the class, method or field has its visibility relaxed, so that it is more widely visible than otherwise necessary to make code testable. <p> You can optionally specify what the visibility <b> should </b> have been if not for testing; this allows tools to catch unintended access from within production code. <p> Example: <pre><pre><code> @VisibleForTesting(otherwise = VisibleForTesting.PROTECTED) public String printDiagnostics() { ... } </code></pre></pre> If not specified, the intended visibility is assumed to be private. </p>\n<pre><code>public abstract @interface VisibleForTesting\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/VisibleForTesting.html
WorkerThread	A										<section class="prog__container"><p> Denotes that the annotated method should only be called on a worker thread. If the annotated element is a class, then all methods in the class should be called on a worker thread. <p> Example: <pre><pre><code> @WorkerThread protected abstract FilterResults performFiltering(CharSequence constraint); </code></pre></pre> </p>\n<pre><code>public abstract @interface WorkerThread\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/WorkerThread.html
XmlRes	A										<section class="prog__container"><p> Denotes that an integer parameter, field or method return value is expected to be an XML resource reference.</p>\n<pre><code>public abstract @interface XmlRes\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/annotation/XmlRes.html
android.support.annotations	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/annotations/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/annotations/R.html
ContentRecommendation.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> <a href="https://developer.android.com/reference/android/support/app/recommendation/ContentRecommendation.html"> ContentRecommendation </a> </code></pre> objects. Provides a convenient way to set the various fields of a <pre><code> <a href="https://developer.android.com/reference/android/support/app/recommendation/ContentRecommendation.html"> ContentRecommendation </a> </code></pre> . <p> Example: <pre class="prettyprint"> ContentRecommendation rec = new ContentRecommendation.Builder() .setIdInfo(id, "MyTagId") .setTitle("My Content Recommendation") .setText("An example of content recommendation") .setContentImage(myBitmap) .setBadgeIcon(R.drawable.app_icon) .setGroup("Trending") .build(); </pre> </p>\n<pre><code>public static final class ContentRecommendation.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/app/recommendation/ContentRecommendation.Builder.html
ContentRecommendation.ContentMaturity	A										<section class="prog__container"><p> Returns the annotation type of this annotation.</p>\n<pre><code>public static abstract @interface ContentRecommendation.ContentMaturity\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/app/recommendation/ContentRecommendation.ContentMaturity.html
ContentRecommendation.ContentPricing	A										<section class="prog__container"><p> Returns the annotation type of this annotation.</p>\n<pre><code>public static abstract @interface ContentRecommendation.ContentPricing\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/app/recommendation/ContentRecommendation.ContentPricing.html
ContentRecommendation.ContentStatus	A										<section class="prog__container"><p> Returns the annotation type of this annotation.</p>\n<pre><code>public static abstract @interface ContentRecommendation.ContentStatus\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/app/recommendation/ContentRecommendation.ContentStatus.html
ContentRecommendation.ContentType	A										<section class="prog__container"><p> Returns the annotation type of this annotation.</p>\n<pre><code>public static abstract @interface ContentRecommendation.ContentType\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/app/recommendation/ContentRecommendation.ContentType.html
ContentRecommendation	A										<section class="prog__container"><p> The ContentRecommendation object encapsulates all application provided data for a single content recommendation item.</p>\n<pre><code>public final class ContentRecommendation\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/app/recommendation/ContentRecommendation.html
ContentRecommendation.IntentData	A										<section class="prog__container"><p> Object used to encapsulate the data to be used to build the <pre><code> <a href="https://developer.android.com/reference/android/app/PendingIntent.html"> PendingIntent </a> </code></pre> object associated with a given content recommendation, at the time this recommendation gets posted to the home Screen. <p> The members of this object correspond to the fields passed into the <pre><code> <a href="https://developer.android.com/reference/android/app/PendingIntent.html"> PendingIntent </a> </code></pre> factory methods, when creating a new PendingIntent. </p>\n<pre><code>public static class ContentRecommendation.IntentData\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/app/recommendation/ContentRecommendation.IntentData.html
ContentRecommendation.IntentType	A										<section class="prog__container"><p> Returns the annotation type of this annotation.</p>\n<pre><code>public static abstract @interface ContentRecommendation.IntentType\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/app/recommendation/ContentRecommendation.IntentType.html
android.support.app.recommendation	A										<section class="prog__container">Helper class to add content info extensions to notifications. </section>	https://developer.android.com/reference/android/support/app/recommendation/package-summary.html
RecommendationExtender	A										<section class="prog__container"><p> <p> Helper class to add content info extensions to notifications. To create a notification with content info extensions: <ol> <li> Create an <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Action.Builder.html"> Notification.Action.Builder </a> </code></pre> , setting any desired properties. <li> Create a <pre><code> <a href="https://developer.android.com/reference/android/support/app/recommendation/RecommendationExtender.html"> RecommendationExtender </a> </code></pre> . <li> Set content info specific properties using the <pre><code> add </code></pre> and <pre><code> set </code></pre> methods of <pre><code> <a href="https://developer.android.com/reference/android/support/app/recommendation/RecommendationExtender.html"> RecommendationExtender </a> </code></pre> . <li> Call <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#extend(android.app.Notification.Extender)"> Notification.Builder.extend(Notification.Extender) </a> </code></pre> to apply the extensions to a notification. </li> </li> </li> </li> </ol> <pre class="prettyprint">Notification notification = new Notification.Builder(context) * ... * .extend(new RecommendationExtender() * .set*(...)) * .build(); * </pre> <p> Content info extensions can be accessed on an existing notification by using the <pre><code> RecommendationExtender(Notification) </code></pre> constructor, and then using the <pre><code> get </code></pre> methods to access values. </p>\n<pre><code>public final class RecommendationExtender\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/app/recommendation/RecommendationExtender.html
android.support.compat	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/compat/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/compat/R.html
android.support.coreui	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/coreui/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/coreui/R.html
android.support.coreutils	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/coreutils/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/coreutils/R.html
CustomTabsCallback	A										<section class="prog__container"><p> A callback class for custom tabs client to get messages regarding events in their custom tabs.</p>\n<pre><code>public class CustomTabsCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/customtabs/CustomTabsCallback.html
CustomTabsClient	A										<section class="prog__container"><p> Class to communicate with a <pre><code> <a href="https://developer.android.com/reference/android/support/customtabs/CustomTabsService.html"> CustomTabsService </a> </code></pre> and create <pre><code> <a href="https://developer.android.com/reference/android/support/customtabs/CustomTabsSession.html"> CustomTabsSession </a> </code></pre> from it.</p>\n<pre><code>public class CustomTabsClient\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html
CustomTabsIntent.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> <a href="https://developer.android.com/reference/android/support/customtabs/CustomTabsIntent.html"> CustomTabsIntent </a> </code></pre> objects.</p>\n<pre><code>public static final class CustomTabsIntent.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/customtabs/CustomTabsIntent.Builder.html
CustomTabsIntent	A										<section class="prog__container"><p> Class holding the <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html"> Intent </a> </code></pre> and start bundle for a Custom Tabs Activity. <p> <strong> Note: </strong> The constants below are public for the browser implementation's benefit. You are strongly encouraged to use <pre><code> <a href="https://developer.android.com/reference/android/support/customtabs/CustomTabsIntent.Builder.html"> CustomTabsIntent.Builder </a> </code></pre> . </p>\n<pre><code>public final class CustomTabsIntent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/customtabs/CustomTabsIntent.html
CustomTabsService	A										<section class="prog__container"><p> Abstract service class for implementing Custom Tabs related functionality. The service should be responding to the action ACTION_CUSTOM_TABS_CONNECTION. This class should be used by implementers that want to provide Custom Tabs functionality, not by clients that want to launch Custom Tabs.</p>\n<pre><code>public abstract class CustomTabsService\n</code></pre></section>	https://developer.android.com/reference/android/support/customtabs/CustomTabsService.html
CustomTabsServiceConnection	A										<section class="prog__container"><p> Abstract <pre><code> <a href="https://developer.android.com/reference/android/content/ServiceConnection.html"> ServiceConnection </a> </code></pre> to use while binding to a <pre><code> <a href="https://developer.android.com/reference/android/support/customtabs/CustomTabsService.html"> CustomTabsService </a> </code></pre> . Any client implementing this is responsible for handling changes related with the lifetime of the connection like rebinding on disconnect.</p>\n<pre><code>public abstract class CustomTabsServiceConnection\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/customtabs/CustomTabsServiceConnection.html
CustomTabsSession	A										<section class="prog__container"><p> A class to be used for Custom Tabs related communication. Clients that want to launch Custom Tabs can use this class exclusively to handle all related communication.</p>\n<pre><code>public final class CustomTabsSession\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/customtabs/CustomTabsSession.html
CustomTabsSessionToken	A										<section class="prog__container"><p> Wrapper class that can be used as a unique identifier for a session. Also contains an accessor for the <pre><code> <a href="https://developer.android.com/reference/android/support/customtabs/CustomTabsCallback.html"> CustomTabsCallback </a> </code></pre> for the session if there was any.</p>\n<pre><code>public class CustomTabsSessionToken\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/customtabs/CustomTabsSessionToken.html
android.support.customtabs	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/customtabs/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/customtabs/R.html
android.support.design	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/design/package-summary.html
R.anim	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.anim\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/R.anim.html
R.animator	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.animator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/R.animator.html
R.attr	A										<section class="prog__container"><p> Background for the FloatingActionButton <p> May be a reference to another resource, in the form " <pre><code> @[+][ <i> package </i> :] <i> type </i> / <i> name </i> </code></pre> " or a theme attribute in the form " <pre><code> ?[ <i> package </i> :] <i> type </i> / <i> name </i> </code></pre> ". </p>\n<pre><code>public static final class R.attr\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/R.attr.html
R.color	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.color\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/R.color.html
R.dimen	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.dimen\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/R.dimen.html
R.drawable	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.drawable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/R.drawable.html
R	A										<section class="prog__container"><p></p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/R.html
R.id	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.id\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/R.id.html
R.integer	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.integer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/R.integer.html
R.layout	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.layout\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/R.layout.html
R.string	A										<section class="prog__container"><p> The class name to the ScrollingChildBehavior required for AppBarLayout</p>\n<pre><code>public static final class R.string\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/R.string.html
R.style	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.style\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/R.style.html
R.styleable	A										<section class="prog__container"><p> Attributes that can be used with a AppBarLayout.</p>\n<pre><code>public static final class R.styleable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/R.styleable.html
AppBarLayout.Behavior.DragCallback	A										<section class="prog__container"><p> Callback to allow control over any <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/AppBarLayout.html"> AppBarLayout </a> </code></pre> dragging.</p>\n<pre><code>public static abstract class AppBarLayout.Behavior.DragCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/widget/AppBarLayout.Behavior.DragCallback.html
AppBarLayout.Behavior	A										<section class="prog__container"><p> The default <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/AppBarLayout.Behavior.html"> AppBarLayout.Behavior </a> </code></pre> for <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/AppBarLayout.html"> AppBarLayout </a> </code></pre> . Implements the necessary nested scroll handling with offsetting.</p>\n<pre><code>public static class AppBarLayout.Behavior\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/AppBarLayout.Behavior.html
AppBarLayout.Behavior.SavedState	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html#describeContents()"> describeContents() </a> </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p>\n<pre><code>protected static class AppBarLayout.Behavior.SavedState\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/AppBarLayout.Behavior.SavedState.html
AppBarLayout	A										<section class="prog__container"><p> AppBarLayout is a vertical <pre><code> <a href="https://developer.android.com/reference/android/widget/LinearLayout.html"> LinearLayout </a> </code></pre> which implements many of the features of material designs app bar concept, namely scrolling gestures. <p> Children should provide their desired scrolling behavior through <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/AppBarLayout.LayoutParams.html#setScrollFlags(int)"> setScrollFlags(int) </a> </code></pre> and the associated layout xml attribute: <pre><code> app:layout_scrollFlags </code></pre> . <p> This view depends heavily on being used as a direct child within a <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html"> CoordinatorLayout </a> </code></pre> . If you use AppBarLayout within a different <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.html"> ViewGroup </a> </code></pre> , most of it's functionality will not work. <p> AppBarLayout also requires a separate scrolling sibling in order to know when to scroll. The binding is done through the <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/AppBarLayout.ScrollingViewBehavior.html"> AppBarLayout.ScrollingViewBehavior </a> </code></pre> behavior class, meaning that you should set your scrolling view's behavior to be an instance of <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/AppBarLayout.ScrollingViewBehavior.html"> AppBarLayout.ScrollingViewBehavior </a> </code></pre> . A string resource containing the full class name is available. <pre> &lt;android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;android.support.v4.widget.NestedScrollView android:layout_width="match_parent" android:layout_height="match_parent" app:layout_behavior="@string/appbar_scrolling_view_behavior"&gt; &lt;!-- Your scrolling content --&gt; &lt;/android.support.v4.widget.NestedScrollView&gt; &lt;android.support.design.widget.AppBarLayout android:layout_height="wrap_content" android:layout_width="match_parent"&gt; &lt;android.support.v7.widget.Toolbar ... app:layout_scrollFlags="scroll|enterAlways"/&gt; &lt;android.support.design.widget.TabLayout ... app:layout_scrollFlags="scroll|enterAlways"/&gt; &lt;/android.support.design.widget.AppBarLayout&gt; &lt;/android.support.design.widget.CoordinatorLayout&gt; </pre> </p>\n<pre><code>public class AppBarLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/AppBarLayout.html
AppBarLayout.LayoutParams	A										<section class="prog__container"><p> When entering (scrolling on screen) the view will scroll on any downwards scroll event, regardless of whether the scrolling view is also scrolling.</p>\n<pre><code>public static class AppBarLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/AppBarLayout.LayoutParams.html
AppBarLayout.OnOffsetChangedListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when an <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/AppBarLayout.html"> AppBarLayout </a> </code></pre> 's vertical offset changes.</p>\n<pre><code>public static interface AppBarLayout.OnOffsetChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/AppBarLayout.OnOffsetChangedListener.html
AppBarLayout.ScrollingViewBehavior	A										<section class="prog__container"><p> Behavior which should be used by <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> s which can scroll vertically and support nested scrolling to automatically scroll any <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/AppBarLayout.html"> AppBarLayout </a> </code></pre> siblings.</p>\n<pre><code>public static class AppBarLayout.ScrollingViewBehavior\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/AppBarLayout.ScrollingViewBehavior.html
BaseTransientBottomBar.BaseCallback	A										<section class="prog__container"><p> Base class for <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/BaseTransientBottomBar.html"> BaseTransientBottomBar </a> </code></pre> callbacks.</p>\n<pre><code>public static abstract class BaseTransientBottomBar.BaseCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BaseTransientBottomBar.BaseCallback.html
BaseTransientBottomBar.ContentViewCallback	A										<section class="prog__container"><p> Interface that defines the behavior of the main content of a transient bottom bar.</p>\n<pre><code>public static interface BaseTransientBottomBar.ContentViewCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BaseTransientBottomBar.ContentViewCallback.html
BaseTransientBottomBar	A										<section class="prog__container"><p> Base class for lightweight transient bars that are displayed along the bottom edge of the application window.</p>\n<pre><code>public abstract class BaseTransientBottomBar\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BaseTransientBottomBar.html
BottomNavigationView	A										<section class="prog__container"><p> <p> Represents a standard bottom navigation bar for application. It is an implementation of <a href="https://material.google.com/components/bottom-navigation.html"> material design bottom navigation </a> . </p>\n<pre><code>public class BottomNavigationView\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BottomNavigationView.html
BottomNavigationView.OnNavigationItemSelectedListener	A										<section class="prog__container"><p> Listener for handling events on bottom navigation items.</p>\n<pre><code>public static interface BottomNavigationView.OnNavigationItemSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BottomNavigationView.OnNavigationItemSelectedListener.html
BottomSheetBehavior.BottomSheetCallback	A										<section class="prog__container"><p> Callback for monitoring events about bottom sheets.</p>\n<pre><code>public static abstract class BottomSheetBehavior.BottomSheetCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BottomSheetBehavior.BottomSheetCallback.html
BottomSheetBehavior	A										<section class="prog__container"><p> An interaction behavior plugin for a child view of <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html"> CoordinatorLayout </a> </code></pre> to make it work as a bottom sheet.</p>\n<pre><code>public class BottomSheetBehavior\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BottomSheetBehavior.html
BottomSheetBehavior.SavedState	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html#describeContents()"> describeContents() </a> </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p>\n<pre><code>protected static class BottomSheetBehavior.SavedState\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BottomSheetBehavior.SavedState.html
BottomSheetDialog	A										<section class="prog__container"><p> Base class for <pre><code> <a href="https://developer.android.com/reference/android/app/Dialog.html"> Dialog </a> </code></pre> s styled as a bottom sheet.</p>\n<pre><code>public class BottomSheetDialog\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BottomSheetDialog.html
BottomSheetDialogFragment	A										<section class="prog__container"><p> Modal bottom sheet. This is a version of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/DialogFragment.html"> DialogFragment </a> </code></pre> that shows a bottom sheet using <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/BottomSheetDialog.html"> BottomSheetDialog </a> </code></pre> instead of a floating dialog.</p>\n<pre><code>public class BottomSheetDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/BottomSheetDialogFragment.html
CollapsingToolbarLayout	A										<section class="prog__container"><p> CollapsingToolbarLayout is a wrapper for <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/Toolbar.html"> Toolbar </a> </code></pre> which implements a collapsing app bar. It is designed to be used as a direct child of a <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/AppBarLayout.html"> AppBarLayout </a> </code></pre> . CollapsingToolbarLayout contains the following features: <h4> Collapsing title </h4> A title which is larger when the layout is fully visible but collapses and becomes smaller as the layout is scrolled off screen. You can set the title to display via <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html#setTitle(java.lang.CharSequence)"> setTitle(CharSequence) </a> </code></pre> . The title appearance can be tweaked via the <pre><code> collapsedTextAppearance </code></pre> and <pre><code> expandedTextAppearance </code></pre> attributes. <h4> Content scrim </h4> A full-bleed scrim which is show or hidden when the scroll position has hit a certain threshold. You can change this via <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html#setContentScrim(android.graphics.drawable.Drawable)"> setContentScrim(Drawable) </a> </code></pre> . <h4> Status bar scrim </h4> A scrim which is show or hidden behind the status bar when the scroll position has hit a certain threshold. You can change this via <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html#setStatusBarScrim(android.graphics.drawable.Drawable)"> setStatusBarScrim(Drawable) </a> </code></pre> . This only works on <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#LOLLIPOP"> LOLLIPOP </a> </code></pre> devices when we set to fit system windows. <h4> Parallax scrolling children </h4> Child views can opt to be scrolled within this layout in a parallax fashion. See <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.LayoutParams.html#COLLAPSE_MODE_PARALLAX"> COLLAPSE_MODE_PARALLAX </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.LayoutParams.html#setParallaxMultiplier(float)"> setParallaxMultiplier(float) </a> </code></pre> . <h4> Pinned position children </h4> Child views can opt to be pinned in space globally. This is useful when implementing a collapsing as it allows the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/Toolbar.html"> Toolbar </a> </code></pre> to be fixed in place even though this layout is moving. See <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.LayoutParams.html#COLLAPSE_MODE_PIN"> COLLAPSE_MODE_PIN </a> </code></pre> . <p> <strong> Do not manually add views to the Toolbar at run time </strong> . We will add a 'dummy view' to the Toolbar which allows us to work out the available space for the title. This can interfere with any views which you add. </p>\n<pre><code>public class CollapsingToolbarLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html
CollapsingToolbarLayout.LayoutParams	A										<section class="prog__container"><p> The view will act as normal with no collapsing behavior.</p>\n<pre><code>public static class CollapsingToolbarLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.LayoutParams.html
CoordinatorLayout.Behavior	A										<section class="prog__container"><p> Interaction behavior plugin for child views of <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html"> CoordinatorLayout </a> </code></pre> . <p> A Behavior implements one or more interactions that a user can take on a child view. These interactions may include drags, swipes, flings, or any other gestures. </p>\n<pre><code>public static abstract class CoordinatorLayout.Behavior\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html
CoordinatorLayout.DefaultBehavior	A										<section class="prog__container"><p> Defines the default <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html"> CoordinatorLayout.Behavior </a> </code></pre> of a <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> class. <p> When writing a custom view, use this annotation to define the default behavior when used as a direct child of an <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html"> CoordinatorLayout </a> </code></pre> . The default behavior can be overridden using <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.LayoutParams.html#setBehavior(android.support.design.widget.CoordinatorLayout.Behavior)"> setBehavior(CoordinatorLayout.Behavior) </a> </code></pre> . </p>\n<pre><code>public static abstract @interface CoordinatorLayout.DefaultBehavior\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.DefaultBehavior.html
CoordinatorLayout	A										<section class="prog__container"><p> CoordinatorLayout is a super-powered <pre><code> <a href="https://developer.android.com/reference/android/widget/FrameLayout.html"> FrameLayout </a> </code></pre> . <p> CoordinatorLayout is intended for two primary use cases: </p>\n<pre><code>public class CoordinatorLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html
CoordinatorLayout.LayoutParams	A										<section class="prog__container"><p> Parameters describing the desired layout for a child of a <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html"> CoordinatorLayout </a> </code></pre> .</p>\n<pre><code>public static class CoordinatorLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.LayoutParams.html
CoordinatorLayout.SavedState	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html#describeContents()"> describeContents() </a> </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p>\n<pre><code>protected static class CoordinatorLayout.SavedState\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.SavedState.html
FloatingActionButton.Behavior	A										<section class="prog__container"><p> Behavior designed for use with <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/FloatingActionButton.html"> FloatingActionButton </a> </code></pre> instances. Its main function is to move <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/FloatingActionButton.html"> FloatingActionButton </a> </code></pre> views so that any displayed <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/Snackbar.html"> Snackbar </a> </code></pre> s do not cover them.</p>\n<pre><code>public static class FloatingActionButton.Behavior\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/FloatingActionButton.Behavior.html
FloatingActionButton	A										<section class="prog__container"><p> Floating action buttons are used for a special type of promoted action. They are distinguished by a circled icon floating above the UI and have special motion behaviors related to morphing, launching, and the transferring anchor point. <p> Floating action buttons come in two sizes: the default and the mini. The size can be controlled with the <pre><code> fabSize </code></pre> attribute. </p>\n<pre><code>public class FloatingActionButton\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/FloatingActionButton.html
FloatingActionButton.OnVisibilityChangedListener	A										<section class="prog__container"><p> Callback to be invoked when the visibility of a FloatingActionButton changes.</p>\n<pre><code>public static abstract class FloatingActionButton.OnVisibilityChangedListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/widget/FloatingActionButton.OnVisibilityChangedListener.html
NavigationView	A										<section class="prog__container"><p> Represents a standard navigation menu for application. The menu contents can be populated by a menu resource file. <p> NavigationView is typically placed inside a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/DrawerLayout.html"> DrawerLayout </a> </code></pre> . </p>\n<pre><code>public class NavigationView\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/NavigationView.html
NavigationView.OnNavigationItemSelectedListener	A										<section class="prog__container"><p> Listener for handling events on navigation items.</p>\n<pre><code>public static interface NavigationView.OnNavigationItemSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/NavigationView.OnNavigationItemSelectedListener.html
NavigationView.SavedState	A										<section class="prog__container"><p> User interface state that is stored by NavigationView for implementing onSaveInstanceState().</p>\n<pre><code>public static class NavigationView.SavedState\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/NavigationView.SavedState.html
android.support.design.widget	A										<section class="prog__container">Represents a standard bottom navigation bar for application. </section>	https://developer.android.com/reference/android/support/design/widget/package-summary.html
Snackbar.Callback	A										<section class="prog__container"><p> Callback class for <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/Snackbar.html"> Snackbar </a> </code></pre> instances. Note: this class is here to provide backwards-compatible way for apps written before the existence of the base <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/BaseTransientBottomBar.html"> BaseTransientBottomBar </a> </code></pre> class.</p>\n<pre><code>public static class Snackbar.Callback\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/Snackbar.Callback.html
Snackbar	A										<section class="prog__container"><p> Snackbars provide lightweight feedback about an operation. They show a brief message at the bottom of the screen on mobile and lower left on larger devices. Snackbars appear above all other elements on screen and only one can be displayed at a time. <p> They automatically disappear after a timeout or after user interaction elsewhere on the screen, particularly after interactions that summon a new surface or activity. Snackbars can be swiped off screen. <p> Snackbars can contain an action which is set via <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/Snackbar.html#setAction(java.lang.CharSequence, android.view.View.OnClickListener)"> setAction(CharSequence, android.view.View.OnClickListener) </a> </code></pre> . <p> To be notified when a snackbar has been shown or dismissed, you can provide a <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/Snackbar.Callback.html"> Snackbar.Callback </a> </code></pre> via <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/BaseTransientBottomBar.html#addCallback(android.support.design.widget.BaseTransientBottomBar.BaseCallback&lt;B&gt;)"> addCallback(BaseCallback) </a> </code></pre> . </p>\n<pre><code>public final class Snackbar\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/Snackbar.html
SwipeDismissBehavior	A										<section class="prog__container"><p> An interaction behavior plugin for child views of <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html"> CoordinatorLayout </a> </code></pre> to provide support for the 'swipe-to-dismiss' gesture.</p>\n<pre><code>public class SwipeDismissBehavior\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/SwipeDismissBehavior.html
SwipeDismissBehavior.OnDismissListener	A										<section class="prog__container"><p> Callback interface used to notify the application that the view has been dismissed.</p>\n<pre><code>public static interface SwipeDismissBehavior.OnDismissListener\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/SwipeDismissBehavior.OnDismissListener.html
TabItem	A										<section class="prog__container"><p> TabItem is a special 'view' which allows you to declare tab items for a <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/TabLayout.html"> TabLayout </a> </code></pre> within a layout. This view is not actually added to TabLayout, it is just a dummy which allows setting of a tab items's text, icon and custom layout. See TabLayout for more information on how to use it.</p>\n<pre><code>public final class TabItem\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/TabItem.html
TabLayout	A										<section class="prog__container"><p> TabLayout provides a horizontal layout to display tabs. <p> Population of the tabs to display is done through <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/TabLayout.Tab.html"> TabLayout.Tab </a> </code></pre> instances. You create tabs via <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/TabLayout.html#newTab()"> newTab() </a> </code></pre> . From there you can change the tab's label or icon via <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/TabLayout.Tab.html#setText(int)"> setText(int) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/TabLayout.Tab.html#setIcon(int)"> setIcon(int) </a> </code></pre> respectively. To display the tab, you need to add it to the layout via one of the <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/TabLayout.html#addTab(android.support.design.widget.TabLayout.Tab)"> addTab(Tab) </a> </code></pre> methods. For example: <pre> TabLayout tabLayout = ...; tabLayout.addTab(tabLayout.newTab().setText("Tab 1")); tabLayout.addTab(tabLayout.newTab().setText("Tab 2")); tabLayout.addTab(tabLayout.newTab().setText("Tab 3")); </pre> You should set a listener via <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/TabLayout.html#setOnTabSelectedListener(android.support.design.widget.TabLayout.OnTabSelectedListener)"> setOnTabSelectedListener(OnTabSelectedListener) </a> </code></pre> to be notified when any tab's selection state has been changed. <p> You can also add items to TabLayout in your layout through the use of <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/TabItem.html"> TabItem </a> </code></pre> . An example usage is like so: </p>\n<pre><code>public class TabLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/TabLayout.html
TabLayout.OnTabSelectedListener	A										<section class="prog__container"><p> Callback interface invoked when a tab's selection state changes.</p>\n<pre><code>public static interface TabLayout.OnTabSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/TabLayout.OnTabSelectedListener.html
TabLayout.Tab	A										<section class="prog__container"><p> A tab in this layout. Instances can be created via <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/TabLayout.html#newTab()"> newTab() </a> </code></pre> .</p>\n<pre><code>public static final class TabLayout.Tab\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/widget/TabLayout.Tab.html
TabLayout.TabLayoutOnPageChangeListener	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewPager.OnPageChangeListener.html"> ViewPager.OnPageChangeListener </a> </code></pre> class which contains the necessary calls back to the provided <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/TabLayout.html"> TabLayout </a> </code></pre> so that the tab position is kept in sync. <p> This class stores the provided TabLayout weakly, meaning that you can use <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewPager.html#addOnPageChangeListener(android.support.v4.view.ViewPager.OnPageChangeListener)"> addOnPageChangeListener(OnPageChangeListener) </a> </code></pre> without removing the listener and not cause a leak. </p>\n<pre><code>public static class TabLayout.TabLayoutOnPageChangeListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/widget/TabLayout.TabLayoutOnPageChangeListener.html
TabLayout.ViewPagerOnTabSelectedListener	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/TabLayout.OnTabSelectedListener.html"> TabLayout.OnTabSelectedListener </a> </code></pre> class which contains the necessary calls back to the provided <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewPager.html"> ViewPager </a> </code></pre> so that the tab position is kept in sync.</p>\n<pre><code>public static class TabLayout.ViewPagerOnTabSelectedListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/design/widget/TabLayout.ViewPagerOnTabSelectedListener.html
TextInputEditText	A										<section class="prog__container"><p> A special sub-class of <pre><code> <a href="https://developer.android.com/reference/android/widget/EditText.html"> EditText </a> </code></pre> designed for use as a child of <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/TextInputLayout.html"> TextInputLayout </a> </code></pre> . <p> Using this class allows us to display a hint in the IME when in 'extract' mode. </p>\n<pre><code>public class TextInputEditText\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/TextInputEditText.html
TextInputLayout	A										<section class="prog__container"><p> Layout which wraps an <pre><code> <a href="https://developer.android.com/reference/android/widget/EditText.html"> EditText </a> </code></pre> (or descendant) to show a floating label when the hint is hidden due to the user inputting text. <p> Also supports showing an error via <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/TextInputLayout.html#setErrorEnabled(boolean)"> setErrorEnabled(boolean) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/TextInputLayout.html#setError(java.lang.CharSequence)"> setError(CharSequence) </a> </code></pre> , and a character counter via <pre><code> <a href="https://developer.android.com/reference/android/support/design/widget/TextInputLayout.html#setCounterEnabled(boolean)"> setCounterEnabled(boolean) </a> </code></pre> . </p>\n<pre><code>public class TextInputLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/design/widget/TextInputLayout.html
android.support.fragment	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/fragment/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/fragment/R.html
AnimatedVectorDrawableCompat	A										<section class="prog__container"><p> For API 24 and above, this class is delegating to the framework's <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/AnimatedVectorDrawable.html"> AnimatedVectorDrawable </a> </code></pre> . For older API version, this class uses <pre><code> <a href="https://developer.android.com/reference/android/animation/ObjectAnimator.html"> ObjectAnimator </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/animation/AnimatorSet.html"> AnimatorSet </a> </code></pre> to animate the properties of a <pre><code> <a href="https://developer.android.com/reference/android/support/graphics/drawable/VectorDrawableCompat.html"> VectorDrawableCompat </a> </code></pre> to create an animated drawable. <p> AnimatedVectorDrawableCompat are defined in the same XML format as <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/AnimatedVectorDrawable.html"> AnimatedVectorDrawable </a> </code></pre> . </p>\n<pre><code>public class AnimatedVectorDrawableCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/graphics/drawable/AnimatedVectorDrawableCompat.html
android.support.graphics.drawable	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/graphics/drawable/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/graphics/drawable/R.html
VectorDrawableCompat	A										<section class="prog__container"><p> For API 24 and above, this class is delegating to the framework's <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html"> VectorDrawable </a> </code></pre> . For older API version, this class lets you create a drawable based on an XML vector graphic. <p> </p>\n<pre><code>public class VectorDrawableCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/graphics/drawable/VectorDrawableCompat.html
android.support.mediacompat	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/mediacompat/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/mediacompat/R.html
MultiDex	A										<section class="prog__container"><p> MultiDex patches <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getClassLoader()"> the application context class loader </a> </code></pre> in order to load classes from more than one dex file. The primary <pre><code> classes.dex </code></pre> must contain the classes necessary for calling this class methods. Secondary dex files named classes2.dex, classes3.dex... found in the application apk will be added to the classloader after first call to <pre><code> <a href="https://developer.android.com/reference/android/support/multidex/MultiDex.html#install(android.content.Context)"> install(Context) </a> </code></pre> . <p> </p>\n<pre><code>public final class MultiDex\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/multidex/MultiDex.html
MultiDexApplication	A										<section class="prog__container"><p> Minimal MultiDex capable application. To use the legacy multidex library there is 3 possibility: <ul> <li> Declare this class as the application in your AndroidManifest.xml. </li> <li> Have your <pre><code> <a href="https://developer.android.com/reference/android/app/Application.html"> Application </a> </code></pre> extends this class. </li> <li> Have your <pre><code> <a href="https://developer.android.com/reference/android/app/Application.html"> Application </a> </code></pre> override attachBaseContext starting with <br> <pre><code> protected void attachBaseContext(Context base) { <br> super.attachBaseContext(base); <br> MultiDex.install(this); </br> </br> </code></pre> </br> </li> <ul> </ul> </ul></p>\n<pre><code>public class MultiDexApplication\n</code></pre></section>	https://developer.android.com/reference/android/support/multidex/MultiDexApplication.html
android.support.multidex	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/multidex/package-summary.html
android.support.percent	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/percent/package-summary.html
PercentFrameLayout	A										<section class="prog__container"><p> Subclass of <pre><code> <a href="https://developer.android.com/reference/android/widget/FrameLayout.html"> FrameLayout </a> </code></pre> that supports percentage based dimensions and margins. You can specify dimension or a margin of child by using attributes with "Percent" suffix. Follow this example: <pre class="prettyprint"> &lt;android.support.percent.PercentFrameLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;ImageView app:layout_widthPercent="50%" app:layout_heightPercent="50%" app:layout_marginTopPercent="25%" app:layout_marginLeftPercent="25%"/&gt; &lt;/android.support.percent.PercentFrameLayout&gt; </pre> The attributes that you can use are: <ul> <li> <pre><code> layout_widthPercent </code></pre> <li> <pre><code> layout_heightPercent </code></pre> <li> <pre><code> layout_marginPercent </code></pre> <li> <pre><code> layout_marginLeftPercent </code></pre> <li> <pre><code> layout_marginTopPercent </code></pre> <li> <pre><code> layout_marginRightPercent </code></pre> <li> <pre><code> layout_marginBottomPercent </code></pre> <li> <pre><code> layout_marginStartPercent </code></pre> <li> <pre><code> layout_marginEndPercent </code></pre> <li> <pre><code> layout_aspectRatio </code></pre> </li> </li> </li> </li> </li> </li> </li> </li> </li> </li> </ul> It is not necessary to specify <pre><code> layout_width/height </code></pre> if you specify <pre><code> layout_widthPercent. </code></pre> However, if you want the view to be able to take up more space than what percentage value permits, you can add <pre><code> layout_width/height="wrap_content" </code></pre> . In that case if the percentage size is too small for the View's content, it will be resized using <pre><code> wrap_content </code></pre> rule. <p> You can also make one dimension be a fraction of the other by setting only width or height and using <pre><code> layout_aspectRatio </code></pre> for the second one to be calculated automatically. For example, if you would like to achieve 16:9 aspect ratio, you can write: <pre class="prettyprint"> android:layout_width="300dp" app:layout_aspectRatio="178%" </pre> This will make the aspect ratio 16:9 (1.78:1) with the width fixed at 300dp and height adjusted accordingly. </p>\n<pre><code>public class PercentFrameLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/percent/PercentFrameLayout.html
PercentFrameLayout.LayoutParams	A										<section class="prog__container"><p> Value for <pre><code> <a href="https://developer.android.com/reference/android/widget/FrameLayout.LayoutParams.html#gravity"> gravity </a> </code></pre> indicating that a gravity has not been explicitly specified.</p>\n<pre><code>public static class PercentFrameLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/percent/PercentFrameLayout.LayoutParams.html
PercentLayoutHelper	A										<section class="prog__container"><p> Helper for layouts that want to support percentage based dimensions. <p> This class collects utility methods that are involved in extracting percentage based dimension attributes and applying them to ViewGroup's children. If you would like to implement a layout that supports percentage based dimensions, you need to take several steps: <ol> <li> You need a <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html"> ViewGroup.LayoutParams </a> </code></pre> subclass in your ViewGroup that implements <pre><code> <a href="https://developer.android.com/reference/android/support/percent/PercentLayoutHelper.PercentLayoutParams.html"> PercentLayoutHelper.PercentLayoutParams </a> </code></pre> . <li> In your <pre><code> LayoutParams(Context c, AttributeSet attrs) </code></pre> constructor create an instance of <pre><code> <a href="https://developer.android.com/reference/android/support/percent/PercentLayoutHelper.PercentLayoutInfo.html"> PercentLayoutHelper.PercentLayoutInfo </a> </code></pre> by calling <pre><code> <a href="https://developer.android.com/reference/android/support/percent/PercentLayoutHelper.html#getPercentLayoutInfo(android.content.Context, android.util.AttributeSet)"> getPercentLayoutInfo(Context, AttributeSet) </a> </code></pre> . Return this object from <pre><code> public PercentLayoutHelper.PercentLayoutInfo getPercentLayoutInfo() </code></pre> method that you implemented for <pre><code> <a href="https://developer.android.com/reference/android/support/percent/PercentLayoutHelper.PercentLayoutParams.html"> PercentLayoutHelper.PercentLayoutParams </a> </code></pre> interface. <li> Override <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#setBaseAttributes(android.content.res.TypedArray, int, int)"> setBaseAttributes(TypedArray, int, int) </a> </code></pre> with a single line implementation <pre><code> PercentLayoutHelper.fetchWidthAndHeight(this, a, widthAttr, heightAttr); </code></pre> <li> In your ViewGroup override <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.html#generateLayoutParams(android.util.AttributeSet)"> generateLayoutParams(AttributeSet) </a> </code></pre> to return your LayoutParams. <li> In your <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#onMeasure(int, int)"> onMeasure(int, int) </a> </code></pre> override, you need to implement following pattern: <pre class="prettyprint"> protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { mHelper.adjustChildren(widthMeasureSpec, heightMeasureSpec); super.onMeasure(widthMeasureSpec, heightMeasureSpec); if (mHelper.handleMeasuredStateTooSmall()) { super.onMeasure(widthMeasureSpec, heightMeasureSpec); } } </pre> <li> In your <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.html#onLayout(boolean, int, int, int, int)"> onLayout(boolean, int, int, int, int) </a> </code></pre> override, you need to implement following pattern: <pre class="prettyprint"> protected void onLayout(boolean changed, int left, int top, int right, int bottom) { super.onLayout(changed, left, top, right, bottom); mHelper.restoreOriginalParams(); } </pre> </li> </li> </li> </li> </li> </li> </ol> </p>\n<pre><code>public class PercentLayoutHelper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/percent/PercentLayoutHelper.html
PercentLayoutHelper.PercentLayoutInfo	A										<section class="prog__container"><p> Container for information about percentage dimensions and margins. It acts as an extension for <pre><code> LayoutParams </code></pre> .</p>\n<pre><code>public static class PercentLayoutHelper.PercentLayoutInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/percent/PercentLayoutHelper.PercentLayoutInfo.html
PercentLayoutHelper.PercentLayoutParams	A										<section class="prog__container"><p> If a layout wants to support percentage based dimensions and use this helper class, its <pre><code> LayoutParams </code></pre> subclass must implement this interface. Your <pre><code> LayoutParams </code></pre> subclass should contain an instance of <pre><code> PercentLayoutInfo </code></pre> and the implementation of this interface should be a simple accessor.</p>\n<pre><code>public static interface PercentLayoutHelper.PercentLayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/percent/PercentLayoutHelper.PercentLayoutParams.html
PercentRelativeLayout	A										<section class="prog__container"><p> Subclass of <pre><code> <a href="https://developer.android.com/reference/android/widget/RelativeLayout.html"> RelativeLayout </a> </code></pre> that supports percentage based dimensions and margins. You can specify dimension or a margin of child by using attributes with "Percent" suffix. Follow this example: <pre class="prettyprint"> &lt;android.support.percent.PercentRelativeLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;ImageView app:layout_widthPercent="50%" app:layout_heightPercent="50%" app:layout_marginTopPercent="25%" app:layout_marginLeftPercent="25%"/&gt; &lt;/android.support.percent.PercentRelativeLayout&gt; </pre> The attributes that you can use are: <ul> <li> <pre><code> layout_widthPercent </code></pre> <li> <pre><code> layout_heightPercent </code></pre> <li> <pre><code> layout_marginPercent </code></pre> <li> <pre><code> layout_marginLeftPercent </code></pre> <li> <pre><code> layout_marginTopPercent </code></pre> <li> <pre><code> layout_marginRightPercent </code></pre> <li> <pre><code> layout_marginBottomPercent </code></pre> <li> <pre><code> layout_marginStartPercent </code></pre> <li> <pre><code> layout_marginEndPercent </code></pre> <li> <pre><code> layout_aspectRatio </code></pre> </li> </li> </li> </li> </li> </li> </li> </li> </li> </li> </ul> It is not necessary to specify <pre><code> layout_width/height </code></pre> if you specify <pre><code> layout_widthPercent. </code></pre> However, if you want the view to be able to take up more space than what percentage value permits, you can add <pre><code> layout_width/height="wrap_content" </code></pre> . In that case if the percentage size is too small for the View's content, it will be resized using <pre><code> wrap_content </code></pre> rule. <p> You can also make one dimension be a fraction of the other by setting only width or height and using <pre><code> layout_aspectRatio </code></pre> for the second one to be calculated automatically. For example, if you would like to achieve 16:9 aspect ratio, you can write: <pre class="prettyprint"> android:layout_width="300dp" app:layout_aspectRatio="178%" </pre> This will make the aspect ratio 16:9 (1.78:1) with the width fixed at 300dp and height adjusted accordingly. </p>\n<pre><code>public class PercentRelativeLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/percent/PercentRelativeLayout.html
PercentRelativeLayout.LayoutParams	A										<section class="prog__container"><p> Special value for the height or width requested by a View.</p>\n<pre><code>public static class PercentRelativeLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/percent/PercentRelativeLayout.LayoutParams.html
R.attr	A										<section class="prog__container"><p> <p> May be a fractional value, which is a floating point number appended with either % or %p, such as " <pre><code> 14.5% </code></pre> ". </p>\n<pre><code>public static final class R.attr\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/percent/R.attr.html
R	A										<section class="prog__container"><p></p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/percent/R.html
R.styleable	A										<section class="prog__container"><p> Attributes that can be used with a PercentLayout_Layout.</p>\n<pre><code>public static final class R.styleable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/percent/R.styleable.html
android.support.provider	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/provider/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/provider/R.html
AutoTransition	A										<section class="prog__container"><p> Utility class for creating a default transition that automatically fades, moves, and resizes views during a scene change. <p> Unlike the platform version, this does not support use in XML resources. </p>\n<pre><code>public class AutoTransition\n</code></pre></section>	https://developer.android.com/reference/android/support/transition/AutoTransition.html
ChangeBounds	A										<section class="prog__container"><p> This transition captures the layout bounds of target views before and after the scene change and animates those changes during the transition. <p> Unlike the platform version, this does not support use in XML resources. </p>\n<pre><code>public class ChangeBounds\n</code></pre></section>	https://developer.android.com/reference/android/support/transition/ChangeBounds.html
Fade	A										<section class="prog__container"><p> This transition tracks changes to the visibility of target views in the start and end scenes and fades views in or out when they become visible or non-visible. Visibility is determined by both the <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#setVisibility(int)"> setVisibility(int) </a> </code></pre> state of the view as well as whether it is parented in the current view hierarchy. <p> The ability of this transition to fade out a particular view, and the way that that fading operation takes place, is based on the situation of the view in the view hierarchy. For example, if a view was simply removed from its parent, then the view will be added into a <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroupOverlay.html"> ViewGroupOverlay </a> </code></pre> while fading. If a visible view is changed to be <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#GONE"> GONE </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#INVISIBLE"> INVISIBLE </a> </code></pre> , then the visibility will be changed to <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#VISIBLE"> VISIBLE </a> </code></pre> for the duration of the animation. However, if a view is in a hierarchy which is also altering its visibility, the situation can be more complicated. In general, if a view that is no longer in the hierarchy in the end scene still has a parent (so its parent hierarchy was removed, but it was not removed from its parent), then it will be left alone to avoid side-effects from improperly removing it from its parent. The only exception to this is if the previous <pre><code> <a href="https://developer.android.com/reference/android/support/transition/Scene.html"> Scene </a> </code></pre> was <pre><code> <a href="https://developer.android.com/reference/android/support/transition/Scene.html#getSceneForLayout(android.view.ViewGroup, int, android.content.Context)"> created from a layout resource file </a> </code></pre> , then it is considered safe to un-parent the starting scene view in order to fade it out. </p>\n<pre><code>public class Fade\n</code></pre></section>	https://developer.android.com/reference/android/support/transition/Fade.html
android.support.transition	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/transition/package-summary.html
R	A										<section class="prog__container"><p></p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/transition/R.html
R.id	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.id\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/transition/R.id.html
Scene	A										<section class="prog__container"><p> A scene represents the collection of values that various properties in the View hierarchy will have when the scene is applied. A Scene can be configured to automatically run a Transition when it is applied, which will animate the various property changes that take place during the scene change.</p>\n<pre><code>public class Scene\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/transition/Scene.html
Transition	A										<section class="prog__container"><p> A Transition holds information about animations that will be run on its targets during a scene change. Subclasses of this abstract class may choreograph several child transitions ( <pre><code> <a href="https://developer.android.com/reference/android/support/transition/TransitionSet.html"> TransitionSet </a> </code></pre> or they may perform custom animations themselves. Any Transition has two main jobs: (1) capture property values, and (2) play animations based on changes to captured property values. A custom transition knows what property values on View objects are of interest to it, and also knows how to animate changes to those values. For example, the <pre><code> <a href="https://developer.android.com/reference/android/support/transition/Fade.html"> Fade </a> </code></pre> transition tracks changes to visibility-related properties and is able to construct and run animations that fade items in or out based on changes to those properties. <p> Note: Transitions may not work correctly with either <pre><code> <a href="https://developer.android.com/reference/android/view/SurfaceView.html"> SurfaceView </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/view/TextureView.html"> TextureView </a> </code></pre> , due to the way that these views are displayed on the screen. For SurfaceView, the problem is that the view is updated from a non-UI thread, so changes to the view due to transitions (such as moving and resizing the view) may be out of sync with the display inside those bounds. TextureView is more compatible with transitions in general, but some specific transitions (such as <pre><code> <a href="https://developer.android.com/reference/android/support/transition/Fade.html"> Fade </a> </code></pre> ) may not be compatible with TextureView because they rely on <pre><code> <a href="https://developer.android.com/reference/android/view/ViewOverlay.html"> ViewOverlay </a> </code></pre> functionality, which does not currently work with TextureView. </p>\n<pre><code>public abstract class Transition\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/transition/Transition.html
Transition.TransitionListener	A										<section class="prog__container"><p> A transition listener receives notifications from a transition. Notifications indicate transition lifecycle events.</p>\n<pre><code>public static interface Transition.TransitionListener\n</code></pre></section>	https://developer.android.com/reference/android/support/transition/Transition.TransitionListener.html
TransitionManager	A										<section class="prog__container"><p> This class manages the set of transitions that fire when there is a change of <pre><code> <a href="https://developer.android.com/reference/android/support/transition/Scene.html"> Scene </a> </code></pre> . To use the manager, add scenes along with transition objects with calls to <pre><code> <a href="https://developer.android.com/reference/android/support/transition/TransitionManager.html#setTransition(android.support.transition.Scene, android.support.transition.Transition)"> setTransition(Scene, Transition) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/support/transition/TransitionManager.html#setTransition(android.support.transition.Scene, android.support.transition.Scene, android.support.transition.Transition)"> setTransition(Scene, Scene, Transition) </a> </code></pre> . Setting specific transitions for scene changes is not required; by default, a Scene change will use <pre><code> <a href="https://developer.android.com/reference/android/support/transition/AutoTransition.html"> AutoTransition </a> </code></pre> to do something reasonable for most situations. Specifying other transitions for particular scene changes is only necessary if the application wants different transition behavior in these situations. <p> Unlike the platform version, this does not support declaration by XML resources. </p>\n<pre><code>public class TransitionManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/transition/TransitionManager.html
TransitionSet	A										<section class="prog__container"><p> A TransitionSet is a parent of child transitions (including other TransitionSets). Using TransitionSets enables more complex choreography of transitions, where some sets play <pre><code> <a href="https://developer.android.com/reference/android/support/transition/TransitionSet.html#ORDERING_TOGETHER"> ORDERING_TOGETHER </a> </code></pre> and others play <pre><code> <a href="https://developer.android.com/reference/android/support/transition/TransitionSet.html#ORDERING_SEQUENTIAL"> ORDERING_SEQUENTIAL </a> </code></pre> . For example, <pre><code> <a href="https://developer.android.com/reference/android/support/transition/AutoTransition.html"> AutoTransition </a> </code></pre> uses a TransitionSet to sequentially play a Fade(Fade.OUT), followed by a <pre><code> <a href="https://developer.android.com/reference/android/support/transition/ChangeBounds.html"> ChangeBounds </a> </code></pre> , followed by a Fade(Fade.OUT) transition. <p> Unlike the platform version, this does not support declaration by XML resources. </p>\n<pre><code>public class TransitionSet\n</code></pre></section>	https://developer.android.com/reference/android/support/transition/TransitionSet.html
TransitionValues	A										<section class="prog__container"><p> Data structure which holds cached values for the transition. The view field is the target which all of the values pertain to. The values field is a map which holds information for fields according to names selected by the transitions. These names should be unique to avoid clobbering values stored by other transitions, such as the convention project:transition_name:property_name. For example, the platform might store a property "alpha" in a transition "Fader" as "android:fader:alpha". <p> These values are cached during the <pre><code> <a href="https://developer.android.com/reference/android/support/transition/Transition.html#captureStartValues(android.support.transition.TransitionValues)"> captureStartValues(TransitionValues) </a> </code></pre> capture} phases of a scene change, once when the start values are captured and again when the end values are captured. These start/end values are then passed into the transitions via the for <pre><code> <a href="https://developer.android.com/reference/android/support/transition/Transition.html#createAnimator(android.view.ViewGroup, android.support.transition.TransitionValues, android.support.transition.TransitionValues)"> createAnimator(android.view.ViewGroup, TransitionValues, TransitionValues) </a> </code></pre> method. </p>\n<pre><code>public class TransitionValues\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/transition/TransitionValues.html
Visibility	A										<section class="prog__container"><p> This transition tracks changes to the visibility of target views in the start and end scenes. Visibility is determined not just by the <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#setVisibility(int)"> setVisibility(int) </a> </code></pre> state of views, but also whether views exist in the current view hierarchy. The class is intended to be a utility for subclasses such as <pre><code> <a href="https://developer.android.com/reference/android/support/transition/Fade.html"> Fade </a> </code></pre> , which use this visibility information to determine the specific animations to run when visibility changes occur. Subclasses should implement one or both of the methods <pre><code> <a href="https://developer.android.com/reference/android/support/transition/Visibility.html#onAppear(android.view.ViewGroup, android.support.transition.TransitionValues, int, android.support.transition.TransitionValues, int)"> onAppear(ViewGroup, TransitionValues, int, TransitionValues, int) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/transition/Visibility.html#onDisappear(android.view.ViewGroup, android.support.transition.TransitionValues, int, android.support.transition.TransitionValues, int)"> onDisappear(ViewGroup, TransitionValues, int, TransitionValues, int) </a> </code></pre> ,</p>\n<pre><code>public abstract class Visibility\n</code></pre></section>	https://developer.android.com/reference/android/support/transition/Visibility.html
android.support.v13	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v13/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v13/R.html
ActivityCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> introduced after API level 13 in a backwards compatible fashion.</p>\n<pre><code>public class ActivityCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v13/app/ActivityCompat.html
FragmentCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/app/Fragment.html"> Fragment </a> </code></pre> introduced after API level 13 in a backwards compatible fashion.</p>\n<pre><code>public class FragmentCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v13/app/FragmentCompat.html
FragmentCompat.OnRequestPermissionsResultCallback	A										<section class="prog__container"><p> This interface is the contract for receiving the results for permission requests.</p>\n<pre><code>public static interface FragmentCompat.OnRequestPermissionsResultCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v13/app/FragmentCompat.OnRequestPermissionsResultCallback.html
FragmentPagerAdapter	A										<section class="prog__container"><p> Implementation of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/PagerAdapter.html"> PagerAdapter </a> </code></pre> that represents each page as a <pre><code> <a href="https://developer.android.com/reference/android/app/Fragment.html"> Fragment </a> </code></pre> that is persistently kept in the fragment manager as long as the user can return to the page. <p> This version of the pager is best for use when there are a handful of typically more static fragments to be paged through, such as a set of tabs. The fragment of each page the user visits will be kept in memory, though its view hierarchy may be destroyed when not visible. This can result in using a significant amount of memory since fragment instances can hold on to an arbitrary amount of state. For larger sets of pages, consider <pre><code> <a href="https://developer.android.com/reference/android/support/v13/app/FragmentStatePagerAdapter.html"> FragmentStatePagerAdapter </a> </code></pre> . <p> When using FragmentPagerAdapter the host ViewPager must have a valid ID set. </p>\n<pre><code>public abstract class FragmentPagerAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v13/app/FragmentPagerAdapter.html
FragmentStatePagerAdapter	A										<section class="prog__container"><p> Implementation of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/PagerAdapter.html"> PagerAdapter </a> </code></pre> that uses a <pre><code> <a href="https://developer.android.com/reference/android/app/Fragment.html"> Fragment </a> </code></pre> to manage each page. This class also handles saving and restoring of fragment's state. <p> This version of the pager is more useful when there are a large number of pages, working more like a list view. When pages are not visible to the user, their entire fragment may be destroyed, only keeping the saved state of that fragment. This allows the pager to hold on to much less memory associated with each visited page as compared to <pre><code> <a href="https://developer.android.com/reference/android/support/v13/app/FragmentPagerAdapter.html"> FragmentPagerAdapter </a> </code></pre> at the cost of potentially more overhead when switching between pages. <p> When using FragmentPagerAdapter the host ViewPager must have a valid ID set. </p>\n<pre><code>public abstract class FragmentStatePagerAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v13/app/FragmentStatePagerAdapter.html
FragmentTabHost	A										<section class="prog__container"><p> Version of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentTabHost.html"> FragmentTabHost </a> </code></pre> that can be used with the platform <pre><code> <a href="https://developer.android.com/reference/android/app/Fragment.html"> Fragment </a> </code></pre> APIs. You will not normally use this, instead using action bar tabs.</p>\n<pre><code>public class FragmentTabHost\n</code></pre></section>	https://developer.android.com/reference/android/support/v13/app/FragmentTabHost.html
android.support.v13.app	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v13/app/package-summary.html
DragAndDropPermissionsCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/view/DragAndDropPermissions.html"> DragAndDropPermissions </a> </code></pre> introduced after API level 13 in a backwards compatible fashion.</p>\n<pre><code>public final class DragAndDropPermissionsCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v13/view/DragAndDropPermissionsCompat.html
DragStartHelper	A										<section class="prog__container"><p> DragStartHelper is a utility class for implementing drag and drop support. <p> It detects gestures commonly used to start drag (long click for any input source, click and drag for mouse). <p> It also keeps track of the screen location where the drag started, and helps determining the hot spot position for a drag shadow. <p> Implement <pre><code> <a href="https://developer.android.com/reference/android/support/v13/view/DragStartHelper.OnDragStartListener.html"> DragStartHelper.OnDragStartListener </a> </code></pre> to start the drag operation: <pre> DragStartHelper.OnDragStartListener listener = new DragStartHelper.OnDragStartListener { protected void onDragStart(View view, DragStartHelper helper) { View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(view) { public void onProvideShadowMetrics(Point shadowSize, Point shadowTouchPoint) { super.onProvideShadowMetrics(shadowSize, shadowTouchPoint); helper.getTouchPosition(shadowTouchPoint); } }; view.startDrag(mClipData, shadowBuilder, mLocalState, mDragFlags); } }; mDragStartHelper = new DragStartHelper(mDraggableView, listener); </pre> Once created, DragStartHelper can be attached to a view (this will replace existing long click and touch listeners): <pre> mDragStartHelper.attach(); </pre> It may also be used in combination with existing listeners: <pre> public boolean onTouch(View view, MotionEvent event) { if (mDragStartHelper.onTouch(view, event)) { return true; } return handleTouchEvent(view, event); } public boolean onLongClick(View view) { if (mDragStartHelper.onLongClick(view)) { return true; } return handleLongClickEvent(view); } </pre> </p>\n<pre><code>public class DragStartHelper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v13/view/DragStartHelper.html
DragStartHelper.OnDragStartListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a drag start gesture is detected.</p>\n<pre><code>public static interface DragStartHelper.OnDragStartListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v13/view/DragStartHelper.OnDragStartListener.html
android.support.v13.view	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v13/view/package-summary.html
ViewCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> introduced after API level 13 in a backwards compatible fashion.</p>\n<pre><code>public class ViewCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v13/view/ViewCompat.html
EditorInfoCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/EditorInfo.html"> EditorInfo </a> </code></pre> introduced after API level 13 in a backwards compatible fashion.</p>\n<pre><code>public final class EditorInfoCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v13/view/inputmethod/EditorInfoCompat.html
InputConnectionCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html"> InputConnection </a> </code></pre> introduced after API level 13 in a backwards compatible fashion.</p>\n<pre><code>public final class InputConnectionCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v13/view/inputmethod/InputConnectionCompat.html
InputConnectionCompat.OnCommitContentListener	A										<section class="prog__container"><p> Listener for commitContent method call, in a backwards compatible fashion.</p>\n<pre><code>public static interface InputConnectionCompat.OnCommitContentListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v13/view/inputmethod/InputConnectionCompat.OnCommitContentListener.html
InputContentInfoCompat	A										<section class="prog__container"><p> Helper for accessing features in InputContentInfo introduced after API level 13 in a backwards compatible fashion.</p>\n<pre><code>public final class InputContentInfoCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v13/view/inputmethod/InputContentInfoCompat.html
android.support.v13.view.inputmethod	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v13/view/inputmethod/package-summary.html
EditTextPreferenceDialogFragment	A										<section class="prog__container"><p></p>\n<pre><code>public class EditTextPreferenceDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/EditTextPreferenceDialogFragment.html
ListPreferenceDialogFragment	A										<section class="prog__container"><p></p>\n<pre><code>public class ListPreferenceDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/ListPreferenceDialogFragment.html
MultiSelectListPreference	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> that displays a list of entries as a dialog. <p> This preference will store a set of strings into the SharedPreferences. This set will contain one or more values from the <pre><code> <a href="https://developer.android.com/reference/android/support/v14/preference/MultiSelectListPreference.html#setEntryValues(java.lang.CharSequence[])"> setEntryValues(CharSequence[]) </a> </code></pre> array. </p>\n<pre><code>public class MultiSelectListPreference\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/MultiSelectListPreference.html
MultiSelectListPreferenceDialogFragment	A										<section class="prog__container"><p></p>\n<pre><code>public class MultiSelectListPreferenceDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/MultiSelectListPreferenceDialogFragment.html
android.support.v14.preference	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v14/preference/package-summary.html
PreferenceDialogFragment	A										<section class="prog__container"><p> Abstract base class which presents a dialog associated with a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/DialogPreference.html"> DialogPreference </a> </code></pre> . Since the preference object may not be available during fragment re-creation, the necessary information for displaying the dialog is read once during the initial call to <pre><code> <a href="https://developer.android.com/reference/android/support/v14/preference/PreferenceDialogFragment.html#onCreate(android.os.Bundle)"> onCreate(Bundle) </a> </code></pre> and saved/restored in the saved instance state. Custom subclasses should also follow this pattern.</p>\n<pre><code>public abstract class PreferenceDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/PreferenceDialogFragment.html
PreferenceFragment	A										<section class="prog__container"><p> Shows a hierarchy of <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> objects as lists. These preferences will automatically save to <pre><code> <a href="https://developer.android.com/reference/android/content/SharedPreferences.html"> SharedPreferences </a> </code></pre> as the user interacts with them. To retrieve an instance of <pre><code> <a href="https://developer.android.com/reference/android/content/SharedPreferences.html"> SharedPreferences </a> </code></pre> that the preference hierarchy in this fragment will use, call <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceManager.html#getDefaultSharedPreferences(android.content.Context)"> getDefaultSharedPreferences(android.content.Context) </a> </code></pre> with a context in the same package as this fragment. <p> Furthermore, the preferences shown will follow the visual style of system preferences. It is easy to create a hierarchy of preferences (that can be shown on multiple screens) via XML. For these reasons, it is recommended to use this fragment (as a superclass) to deal with preferences in applications. <p> A <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> object should be at the top of the preference hierarchy. Furthermore, subsequent <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> in the hierarchy denote a screen break--that is the preferences contained within subsequent <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> should be shown on another screen. The preference framework handles this by calling <pre><code> <a href="https://developer.android.com/reference/android/support/v14/preference/PreferenceFragment.html#onNavigateToScreen(android.support.v7.preference.PreferenceScreen)"> onNavigateToScreen(PreferenceScreen) </a> </code></pre> . <p> The preference hierarchy can be formed in multiple ways: <li> From an XML file specifying the hierarchy <li> From different <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activities </a> </code></pre> that each specify its own preferences in an XML file via <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> meta-data <li> From an object hierarchy rooted with <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> <p> To inflate from XML, use the <pre><code> <a href="https://developer.android.com/reference/android/support/v14/preference/PreferenceFragment.html#addPreferencesFromResource(int)"> addPreferencesFromResource(int) </a> </code></pre> . The root element should be a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> . Subsequent elements can point to actual <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> subclasses. As mentioned above, subsequent <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> in the hierarchy will result in the screen break. <p> To specify an object hierarchy rooted with <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> , use <pre><code> <a href="https://developer.android.com/reference/android/support/v14/preference/PreferenceFragment.html#setPreferenceScreen(android.support.v7.preference.PreferenceScreen)"> setPreferenceScreen(PreferenceScreen) </a> </code></pre> . <p> As a convenience, this fragment implements a click listener for any preference in the current hierarchy, see <pre><code> <a href="https://developer.android.com/reference/android/support/v14/preference/PreferenceFragment.html#onPreferenceTreeClick(android.support.v7.preference.Preference)"> onPreferenceTreeClick(Preference) </a> </code></pre> . </p>\n<pre><code>public abstract class PreferenceFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/PreferenceFragment.html
PreferenceFragment.OnPreferenceDisplayDialogCallback	A										<section class="prog__container"><p></p>\n<pre><code>public static interface PreferenceFragment.OnPreferenceDisplayDialogCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/PreferenceFragment.OnPreferenceDisplayDialogCallback.html
PreferenceFragment.OnPreferenceStartFragmentCallback	A										<section class="prog__container"><p> Interface that PreferenceFragment's containing activity should implement to be able to process preference items that wish to switch to a specified fragment.</p>\n<pre><code>public static interface PreferenceFragment.OnPreferenceStartFragmentCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/PreferenceFragment.OnPreferenceStartFragmentCallback.html
PreferenceFragment.OnPreferenceStartScreenCallback	A										<section class="prog__container"><p> Interface that PreferenceFragment's containing activity should implement to be able to process preference items that wish to switch to a new screen of preferences.</p>\n<pre><code>public static interface PreferenceFragment.OnPreferenceStartScreenCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/PreferenceFragment.OnPreferenceStartScreenCallback.html
R.attr	A										<section class="prog__container"><p> The state (true for on, or false for off) that causes dependents to be disabled.</p>\n<pre><code>public static final class R.attr\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/R.attr.html
R.color	A										<section class="prog__container"><p> Fallback color for versions of the system where ?android:attr/colorAccent is not available</p>\n<pre><code>public static final class R.color\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/R.color.html
R.drawable	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.drawable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/R.drawable.html
R	A										<section class="prog__container"><p></p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/R.html
R.id	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.id\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/R.id.html
R.layout	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.layout\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/R.layout.html
R.style	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.style\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/R.style.html
R.styleable	A										<section class="prog__container"><p> Base attributes available to PreferenceFragment.</p>\n<pre><code>public static final class R.styleable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/R.styleable.html
SwitchPreference	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> that provides a two-state toggleable option. <p> This preference will store a boolean into the SharedPreferences. </p>\n<pre><code>public class SwitchPreference\n</code></pre></section>	https://developer.android.com/reference/android/support/v14/preference/SwitchPreference.html
android.support.v17.leanback	A										<section class="prog__container">Support classes for building Leanback user experiences.</section>	https://developer.android.com/reference/android/support/v17/leanback/package-summary.html
R.animator	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.animator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.animator.html
R.attr	A										<section class="prog__container"><p> Defines the duration in milliseconds of the activated animation for a card layout.</p>\n<pre><code>public static final class R.attr\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.attr.html
R.color	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.color\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.color.html
R.dimen	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.dimen\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.dimen.html
R.drawable	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.drawable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.drawable.html
R.fraction	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.fraction\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.fraction.html
R	A										<section class="prog__container"><p></p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.html
R.id	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.id\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.id.html
R.integer	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.integer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.integer.html
R.layout	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.layout\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.layout.html
R.raw	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.raw\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.raw.html
R.string	A										<section class="prog__container"><p> Onscreen label for the control button to fast forward media playback at a given speed multiplier</p>\n<pre><code>public static final class R.string\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.string.html
R.style	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.style\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.style.html
R.styleable	A										<section class="prog__container"><p> <p> Theme attribute for the style of the breadcrumb in a GuidanceStylist. </p>\n<pre><code>public static final class R.styleable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.styleable.html
R.transition	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.transition\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/R.transition.html
BackgroundManager	A										<section class="prog__container"><p> Supports background image continuity between multiple Activities. <p> An Activity should instantiate a BackgroundManager and <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BackgroundManager.html#attach(android.view.Window)"> attach(Window) </a> </code></pre> to the Activity's window. When the Activity is started, the background is initialized to the current background values stored in a continuity service. The background continuity service is updated as the background is updated. <p> At some point, for example when it is stopped, the Activity may release its background state. <p> When an Activity is resumed, if the BackgroundManager has not been released, the continuity service is updated from the BackgroundManager state. If the BackgroundManager was released, the BackgroundManager inherits the current state from the continuity service. <p> When the last Activity is destroyed, the background state is reset. <p> Backgrounds consist of several layers, from back to front: <ul> <li> the background Drawable of the theme </li> <li> a solid color (set via <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BackgroundManager.html#setColor(int)"> setColor(int) </a> </code></pre> ) </li> <li> two Drawables, previous and current (set via <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BackgroundManager.html#setBitmap(android.graphics.Bitmap)"> setBitmap(Bitmap) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BackgroundManager.html#setDrawable(android.graphics.drawable.Drawable)"> setDrawable(Drawable) </a> </code></pre> ), which may be in transition </li> </ul> <p> BackgroundManager holds references to potentially large bitmap Drawables. Call <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BackgroundManager.html#release()"> release() </a> </code></pre> to release these references when the Activity is not visible. </p>\n<pre><code>public final class BackgroundManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BackgroundManager.html
BrandedFragment	A										<section class="prog__container"><p> Fragment class for managing search and branding using a view that implements <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/TitleViewAdapter.Provider.html"> TitleViewAdapter.Provider </a> </code></pre> .</p>\n<pre><code>public class BrandedFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrandedFragment.html
BrandedSupportFragment	A										<section class="prog__container"><p> Fragment class for managing search and branding using a view that implements <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/TitleViewAdapter.Provider.html"> TitleViewAdapter.Provider </a> </code></pre> .</p>\n<pre><code>public class BrandedSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrandedSupportFragment.html
BrowseFragment.BrowseTransitionListener	A										<section class="prog__container"><p> Listener for transitions between browse headers and rows.</p>\n<pre><code>public static class BrowseFragment.BrowseTransitionListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.BrowseTransitionListener.html
BrowseFragment.FragmentFactory	A										<section class="prog__container"><p> Factory class responsible for creating fragment given the current item. <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ListRow.html"> ListRow </a> </code></pre> should returns <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/RowsFragment.html"> RowsFragment </a> </code></pre> or it's subclass whereas <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PageRow.html"> PageRow </a> </code></pre> can return any fragment class.</p>\n<pre><code>public static abstract class BrowseFragment.FragmentFactory\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.FragmentFactory.html
BrowseFragment.FragmentHost	A										<section class="prog__container"><p> Possible set of actions that <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.html"> BrowseFragment </a> </code></pre> exposes to clients. Custom fragments can interact with <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.html"> BrowseFragment </a> </code></pre> using this interface.</p>\n<pre><code>public static interface BrowseFragment.FragmentHost\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.FragmentHost.html
BrowseFragment	A										<section class="prog__container"><p> A fragment for creating Leanback browse screens. It is composed of a RowsFragment and a HeadersFragment. <p> A BrowseFragment renders the elements of its <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html"> ObjectAdapter </a> </code></pre> as a set of rows in a vertical list. The elements in this adapter must be subclasses of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Row.html"> Row </a> </code></pre> . <p> The HeadersFragment can be set to be either shown or hidden by default, or may be disabled entirely. See <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.html#setHeadersState(int)"> setHeadersState(int) </a> </code></pre> for details. <p> By default the BrowseFragment includes support for returning to the headers when the user presses Back. For Activities that customize <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#onBackPressed()"> onBackPressed() </a> </code></pre> , you must disable this default Back key support by calling <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.html#setHeadersTransitionOnBackEnabled(boolean)"> setHeadersTransitionOnBackEnabled(boolean) </a> </code></pre> with false and use <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.BrowseTransitionListener.html"> BrowseFragment.BrowseTransitionListener </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.html#startHeadersTransition(boolean)"> startHeadersTransition(boolean) </a> </code></pre> . <p> The recommended theme to use with a BrowseFragment is <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/R.style.html#Theme_Leanback_Browse"> Theme_Leanback_Browse </a> </code></pre> . </p>\n<pre><code>public class BrowseFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.html
BrowseFragment.ListRowFragmentFactory	A										<section class="prog__container"><p> FragmentFactory implementation for <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ListRow.html"> ListRow </a> </code></pre> .</p>\n<pre><code>public static class BrowseFragment.ListRowFragmentFactory\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.ListRowFragmentFactory.html
BrowseFragment.MainFragmentAdapter	A										<section class="prog__container"><p> Interface that defines the interaction between <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.html"> BrowseFragment </a> </code></pre> and it's main content fragment. The key method is <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.MainFragmentAdapter.html#getFragment()"> getFragment() </a> </code></pre> , it will be used to get the fragment to be shown in the content section. Clients can provide any implementation of fragment and customize it's interaction with <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.html"> BrowseFragment </a> </code></pre> by overriding the necessary methods. <p> Clients are expected to provide an instance of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.MainFragmentAdapterRegistry.html"> BrowseFragment.MainFragmentAdapterRegistry </a> </code></pre> which will be responsible for providing implementations of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.MainFragmentAdapter.html"> BrowseFragment.MainFragmentAdapter </a> </code></pre> for given content types. Currently we support different types of content - <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ListRow.html"> ListRow </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PageRow.html"> PageRow </a> </code></pre> or any subtype of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Row.html"> Row </a> </code></pre> . We provide an out of the box adapter implementation for any rows other than <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PageRow.html"> PageRow </a> </code></pre> - <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/RowsFragment.MainFragmentAdapter.html"> RowsFragment.MainFragmentAdapter </a> </code></pre> . <p> <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PageRow.html"> PageRow </a> </code></pre> is intended to give full flexibility to developers in terms of Fragment design. Users will have to provide an implementation of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.MainFragmentAdapter.html"> BrowseFragment.MainFragmentAdapter </a> </code></pre> and provide that through <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.MainFragmentAdapterRegistry.html"> BrowseFragment.MainFragmentAdapterRegistry </a> </code></pre> . <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.MainFragmentAdapter.html"> BrowseFragment.MainFragmentAdapter </a> </code></pre> implementation can supply any fragment and override just those interactions that makes sense. </p>\n<pre><code>public static class BrowseFragment.MainFragmentAdapter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.MainFragmentAdapter.html
BrowseFragment.MainFragmentAdapterProvider	A										<section class="prog__container"><p> Interface to be implemented by all fragments for providing an instance of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.MainFragmentAdapter.html"> BrowseFragment.MainFragmentAdapter </a> </code></pre> . Both <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/RowsFragment.html"> RowsFragment </a> </code></pre> and custom fragment provided against <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PageRow.html"> PageRow </a> </code></pre> will need to implement this interface.</p>\n<pre><code>public static interface BrowseFragment.MainFragmentAdapterProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.MainFragmentAdapterProvider.html
BrowseFragment.MainFragmentAdapterRegistry	A										<section class="prog__container"><p> Registry class maintaining the mapping of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Row.html"> Row </a> </code></pre> subclasses to <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.FragmentFactory.html"> BrowseFragment.FragmentFactory </a> </code></pre> . BrowseRowFragment automatically registers <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.ListRowFragmentFactory.html"> BrowseFragment.ListRowFragmentFactory </a> </code></pre> for handling <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ListRow.html"> ListRow </a> </code></pre> . Developers can override that and also if they want to use custom fragment, they can register a custom <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.FragmentFactory.html"> BrowseFragment.FragmentFactory </a> </code></pre> against <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PageRow.html"> PageRow </a> </code></pre> .</p>\n<pre><code>public static final class BrowseFragment.MainFragmentAdapterRegistry\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.MainFragmentAdapterRegistry.html
BrowseFragment.MainFragmentRowsAdapter	A										<section class="prog__container"><p> This is used to pass information to <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/RowsFragment.html"> RowsFragment </a> </code></pre> or its subclasses. <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.html"> BrowseFragment </a> </code></pre> uses this interface to pass row based interaction events to the target fragment.</p>\n<pre><code>public static class BrowseFragment.MainFragmentRowsAdapter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.MainFragmentRowsAdapter.html
BrowseFragment.MainFragmentRowsAdapterProvider	A										<section class="prog__container"><p> Interface to be implemented by <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/RowsFragment.html"> RowsFragment </a> </code></pre> and it's subclasses for providing an instance of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.MainFragmentRowsAdapter.html"> BrowseFragment.MainFragmentRowsAdapter </a> </code></pre> .</p>\n<pre><code>public static interface BrowseFragment.MainFragmentRowsAdapterProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.MainFragmentRowsAdapterProvider.html
BrowseSupportFragment.BrowseTransitionListener	A										<section class="prog__container"><p> Listener for transitions between browse headers and rows.</p>\n<pre><code>public static class BrowseSupportFragment.BrowseTransitionListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.BrowseTransitionListener.html
BrowseSupportFragment.FragmentFactory	A										<section class="prog__container"><p> Factory class responsible for creating fragment given the current item. <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ListRow.html"> ListRow </a> </code></pre> should returns <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/RowsSupportFragment.html"> RowsSupportFragment </a> </code></pre> or it's subclass whereas <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PageRow.html"> PageRow </a> </code></pre> can return any fragment class.</p>\n<pre><code>public static abstract class BrowseSupportFragment.FragmentFactory\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.FragmentFactory.html
BrowseSupportFragment.FragmentHost	A										<section class="prog__container"><p> Possible set of actions that <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.html"> BrowseSupportFragment </a> </code></pre> exposes to clients. Custom fragments can interact with <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.html"> BrowseSupportFragment </a> </code></pre> using this interface.</p>\n<pre><code>public static interface BrowseSupportFragment.FragmentHost\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.FragmentHost.html
BrowseSupportFragment	A										<section class="prog__container"><p> A fragment for creating Leanback browse screens. It is composed of a RowsSupportFragment and a HeadersSupportFragment. <p> A BrowseSupportFragment renders the elements of its <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html"> ObjectAdapter </a> </code></pre> as a set of rows in a vertical list. The elements in this adapter must be subclasses of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Row.html"> Row </a> </code></pre> . <p> The HeadersSupportFragment can be set to be either shown or hidden by default, or may be disabled entirely. See <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.html#setHeadersState(int)"> setHeadersState(int) </a> </code></pre> for details. <p> By default the BrowseSupportFragment includes support for returning to the headers when the user presses Back. For Activities that customize <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentActivity.html#onBackPressed()"> onBackPressed() </a> </code></pre> , you must disable this default Back key support by calling <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.html#setHeadersTransitionOnBackEnabled(boolean)"> setHeadersTransitionOnBackEnabled(boolean) </a> </code></pre> with false and use <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.BrowseTransitionListener.html"> BrowseSupportFragment.BrowseTransitionListener </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.html#startHeadersTransition(boolean)"> startHeadersTransition(boolean) </a> </code></pre> . <p> The recommended theme to use with a BrowseSupportFragment is <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/R.style.html#Theme_Leanback_Browse"> Theme_Leanback_Browse </a> </code></pre> . </p>\n<pre><code>public class BrowseSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.html
BrowseSupportFragment.ListRowFragmentFactory	A										<section class="prog__container"><p> FragmentFactory implementation for <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ListRow.html"> ListRow </a> </code></pre> .</p>\n<pre><code>public static class BrowseSupportFragment.ListRowFragmentFactory\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.ListRowFragmentFactory.html
BrowseSupportFragment.MainFragmentAdapter	A										<section class="prog__container"><p> Interface that defines the interaction between <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.html"> BrowseSupportFragment </a> </code></pre> and it's main content fragment. The key method is <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.MainFragmentAdapter.html#getFragment()"> getFragment() </a> </code></pre> , it will be used to get the fragment to be shown in the content section. Clients can provide any implementation of fragment and customize it's interaction with <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.html"> BrowseSupportFragment </a> </code></pre> by overriding the necessary methods. <p> Clients are expected to provide an instance of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.MainFragmentAdapterRegistry.html"> BrowseSupportFragment.MainFragmentAdapterRegistry </a> </code></pre> which will be responsible for providing implementations of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.MainFragmentAdapter.html"> BrowseSupportFragment.MainFragmentAdapter </a> </code></pre> for given content types. Currently we support different types of content - <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ListRow.html"> ListRow </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PageRow.html"> PageRow </a> </code></pre> or any subtype of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Row.html"> Row </a> </code></pre> . We provide an out of the box adapter implementation for any rows other than <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PageRow.html"> PageRow </a> </code></pre> - <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/RowsSupportFragment.MainFragmentAdapter.html"> RowsSupportFragment.MainFragmentAdapter </a> </code></pre> . <p> <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PageRow.html"> PageRow </a> </code></pre> is intended to give full flexibility to developers in terms of Fragment design. Users will have to provide an implementation of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.MainFragmentAdapter.html"> BrowseSupportFragment.MainFragmentAdapter </a> </code></pre> and provide that through <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.MainFragmentAdapterRegistry.html"> BrowseSupportFragment.MainFragmentAdapterRegistry </a> </code></pre> . <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.MainFragmentAdapter.html"> BrowseSupportFragment.MainFragmentAdapter </a> </code></pre> implementation can supply any fragment and override just those interactions that makes sense. </p>\n<pre><code>public static class BrowseSupportFragment.MainFragmentAdapter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.MainFragmentAdapter.html
BrowseSupportFragment.MainFragmentAdapterProvider	A										<section class="prog__container"><p> Interface to be implemented by all fragments for providing an instance of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.MainFragmentAdapter.html"> BrowseSupportFragment.MainFragmentAdapter </a> </code></pre> . Both <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/RowsSupportFragment.html"> RowsSupportFragment </a> </code></pre> and custom fragment provided against <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PageRow.html"> PageRow </a> </code></pre> will need to implement this interface.</p>\n<pre><code>public static interface BrowseSupportFragment.MainFragmentAdapterProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.MainFragmentAdapterProvider.html
BrowseSupportFragment.MainFragmentAdapterRegistry	A										<section class="prog__container"><p> Registry class maintaining the mapping of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Row.html"> Row </a> </code></pre> subclasses to <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.FragmentFactory.html"> BrowseSupportFragment.FragmentFactory </a> </code></pre> . BrowseRowFragment automatically registers <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.ListRowFragmentFactory.html"> BrowseSupportFragment.ListRowFragmentFactory </a> </code></pre> for handling <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ListRow.html"> ListRow </a> </code></pre> . Developers can override that and also if they want to use custom fragment, they can register a custom <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.FragmentFactory.html"> BrowseSupportFragment.FragmentFactory </a> </code></pre> against <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PageRow.html"> PageRow </a> </code></pre> .</p>\n<pre><code>public static final class BrowseSupportFragment.MainFragmentAdapterRegistry\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.MainFragmentAdapterRegistry.html
BrowseSupportFragment.MainFragmentRowsAdapter	A										<section class="prog__container"><p> This is used to pass information to <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/RowsSupportFragment.html"> RowsSupportFragment </a> </code></pre> or its subclasses. <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.html"> BrowseSupportFragment </a> </code></pre> uses this interface to pass row based interaction events to the target fragment.</p>\n<pre><code>public static class BrowseSupportFragment.MainFragmentRowsAdapter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.MainFragmentRowsAdapter.html
BrowseSupportFragment.MainFragmentRowsAdapterProvider	A										<section class="prog__container"><p> Interface to be implemented by <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/RowsSupportFragment.html"> RowsSupportFragment </a> </code></pre> and it's subclasses for providing an instance of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.MainFragmentRowsAdapter.html"> BrowseSupportFragment.MainFragmentRowsAdapter </a> </code></pre> .</p>\n<pre><code>public static interface BrowseSupportFragment.MainFragmentRowsAdapterProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.MainFragmentRowsAdapterProvider.html
DetailsFragment	A										<section class="prog__container"><p> A fragment for creating Leanback details screens. <p> A DetailsFragment renders the elements of its <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html"> ObjectAdapter </a> </code></pre> as a set of rows in a vertical list.The Adapter's <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PresenterSelector.html"> PresenterSelector </a> </code></pre> must maintain subclasses of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/RowPresenter.html"> RowPresenter </a> </code></pre> . </p>\n<pre><code>public class DetailsFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/DetailsFragment.html
DetailsSupportFragment	A										<section class="prog__container"><p> A fragment for creating Leanback details screens. <p> A DetailsSupportFragment renders the elements of its <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html"> ObjectAdapter </a> </code></pre> as a set of rows in a vertical list.The Adapter's <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PresenterSelector.html"> PresenterSelector </a> </code></pre> must maintain subclasses of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/RowPresenter.html"> RowPresenter </a> </code></pre> . </p>\n<pre><code>public class DetailsSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/DetailsSupportFragment.html
ErrorFragment	A										<section class="prog__container"><p> A fragment for displaying an error indication.</p>\n<pre><code>public class ErrorFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/ErrorFragment.html
ErrorSupportFragment	A										<section class="prog__container"><p> A fragment for displaying an error indication.</p>\n<pre><code>public class ErrorSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/ErrorSupportFragment.html
GuidedStepFragment	A										<section class="prog__container"><p> A GuidedStepFragment is used to guide the user through a decision or series of decisions. It is composed of a guidance view on the left and a view on the right containing a list of possible actions. <p> </p>\n<pre><code>public class GuidedStepFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/GuidedStepFragment.html
GuidedStepSupportFragment	A										<section class="prog__container"><p> A GuidedStepSupportFragment is used to guide the user through a decision or series of decisions. It is composed of a guidance view on the left and a view on the right containing a list of possible actions. <p> </p>\n<pre><code>public class GuidedStepSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/GuidedStepSupportFragment.html
HeadersFragment	A										<section class="prog__container"><p> An internal fragment containing a list of row headers.</p>\n<pre><code>public class HeadersFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/HeadersFragment.html
HeadersFragment.OnHeaderClickedListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a header item is clicked.</p>\n<pre><code>public static interface HeadersFragment.OnHeaderClickedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/HeadersFragment.OnHeaderClickedListener.html
HeadersFragment.OnHeaderViewSelectedListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a header item is selected.</p>\n<pre><code>public static interface HeadersFragment.OnHeaderViewSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/HeadersFragment.OnHeaderViewSelectedListener.html
HeadersSupportFragment	A										<section class="prog__container"><p> An internal fragment containing a list of row headers.</p>\n<pre><code>public class HeadersSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/HeadersSupportFragment.html
HeadersSupportFragment.OnHeaderClickedListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a header item is clicked.</p>\n<pre><code>public static interface HeadersSupportFragment.OnHeaderClickedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/HeadersSupportFragment.OnHeaderClickedListener.html
HeadersSupportFragment.OnHeaderViewSelectedListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a header item is selected.</p>\n<pre><code>public static interface HeadersSupportFragment.OnHeaderViewSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/HeadersSupportFragment.OnHeaderViewSelectedListener.html
MediaControllerGlue	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/media/MediaControllerGlue.html"> MediaControllerGlue </a> </code></pre> . </p>\n<pre><code>public abstract class MediaControllerGlue\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/MediaControllerGlue.html
OnboardingFragment	A										<section class="prog__container"><p> An OnboardingFragment provides a common and simple way to build onboarding screen for applications. <p> </p>\n<pre><code>public abstract class OnboardingFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/OnboardingFragment.html
OnboardingSupportFragment	A										<section class="prog__container"><p> An OnboardingSupportFragment provides a common and simple way to build onboarding screen for applications. <p> </p>\n<pre><code>public abstract class OnboardingSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/OnboardingSupportFragment.html
android.support.v17.leanback.app	A										<section class="prog__container">Support classes providing high level Leanback user interface building blocks: fragments and helpers.</section>	https://developer.android.com/reference/android/support/v17/leanback/app/package-summary.html
PlaybackControlGlue	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/media/PlaybackControlGlue.html"> PlaybackControlGlue </a> </code></pre> </p>\n<pre><code>public abstract class PlaybackControlGlue\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackControlGlue.html
PlaybackControlGlue.InputEventHandler	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface is deprecated. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/media/PlaybackGlueHost.html#setOnKeyInterceptListener(android.view.View.OnKeyListener)"> setOnKeyInterceptListener(View.OnKeyListener) </a> </code></pre> . </p>\n<pre><code>public static interface PlaybackControlGlue.InputEventHandler\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackControlGlue.InputEventHandler.html
PlaybackControlSupportGlue	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/media/PlaybackControlGlue.html"> PlaybackControlGlue </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackSupportFragmentGlueHost.html"> PlaybackSupportFragmentGlueHost </a> </code></pre> for <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackSupportFragment.html"> PlaybackSupportFragment </a> </code></pre> . </p>\n<pre><code>public abstract class PlaybackControlSupportGlue\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackControlSupportGlue.html
PlaybackFragment	A										<section class="prog__container"><p> A fragment for displaying playback controls and related content. <p> A PlaybackFragment renders the elements of its <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html"> ObjectAdapter </a> </code></pre> as a set of rows in a vertical list. The Adapter's <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PresenterSelector.html"> PresenterSelector </a> </code></pre> must maintain subclasses of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/RowPresenter.html"> RowPresenter </a> </code></pre> . </p>\n<pre><code>public class PlaybackFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackFragment.html
PlaybackFragmentGlueHost	A										<section class="prog__container"><p> <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/media/PlaybackGlueHost.html"> PlaybackGlueHost </a> </code></pre> implementation the interaction between this class and <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackFragment.html"> PlaybackFragment </a> </code></pre> .</p>\n<pre><code>public class PlaybackFragmentGlueHost\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackFragmentGlueHost.html
PlaybackOverlayFragment	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackFragment.html"> PlaybackFragment </a> </code></pre> . </p>\n<pre><code>public class PlaybackOverlayFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackOverlayFragment.html
PlaybackOverlayFragment.InputEventHandler	A										<section class="prog__container"><p> Called when an <pre><code> <a href="https://developer.android.com/reference/android/view/InputEvent.html"> InputEvent </a> </code></pre> is received.</p>\n<pre><code>public static interface PlaybackOverlayFragment.InputEventHandler\nimplements <a href="https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackControlGlue.InputEventHandler.html">PlaybackControlGlue.InputEventHandler</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackOverlayFragment.InputEventHandler.html
PlaybackOverlayFragment.OnFadeCompleteListener	A										<section class="prog__container"><p> Listener allowing the application to receive notification of fade in and/or fade out completion events.</p>\n<pre><code>public static class PlaybackOverlayFragment.OnFadeCompleteListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackOverlayFragment.OnFadeCompleteListener.html
PlaybackOverlaySupportFragment	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackSupportFragment.html"> PlaybackSupportFragment </a> </code></pre> . </p>\n<pre><code>public class PlaybackOverlaySupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackOverlaySupportFragment.html
PlaybackOverlaySupportFragment.InputEventHandler	A										<section class="prog__container"><p> Called when an <pre><code> <a href="https://developer.android.com/reference/android/view/InputEvent.html"> InputEvent </a> </code></pre> is received.</p>\n<pre><code>public static interface PlaybackOverlaySupportFragment.InputEventHandler\nimplements <a href="https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackControlGlue.InputEventHandler.html">PlaybackControlGlue.InputEventHandler</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackOverlaySupportFragment.InputEventHandler.html
PlaybackOverlaySupportFragment.OnFadeCompleteListener	A										<section class="prog__container"><p> Listener allowing the application to receive notification of fade in and/or fade out completion events.</p>\n<pre><code>public static class PlaybackOverlaySupportFragment.OnFadeCompleteListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackOverlaySupportFragment.OnFadeCompleteListener.html
PlaybackSupportFragment	A										<section class="prog__container"><p> A fragment for displaying playback controls and related content. <p> A PlaybackSupportFragment renders the elements of its <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html"> ObjectAdapter </a> </code></pre> as a set of rows in a vertical list. The Adapter's <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PresenterSelector.html"> PresenterSelector </a> </code></pre> must maintain subclasses of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/RowPresenter.html"> RowPresenter </a> </code></pre> . </p>\n<pre><code>public class PlaybackSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackSupportFragment.html
PlaybackSupportFragmentGlueHost	A										<section class="prog__container"><p> <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/media/PlaybackGlueHost.html"> PlaybackGlueHost </a> </code></pre> implementation the interaction between this class and <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackSupportFragment.html"> PlaybackSupportFragment </a> </code></pre> .</p>\n<pre><code>public class PlaybackSupportFragmentGlueHost\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackSupportFragmentGlueHost.html
ProgressBarManager	A										<section class="prog__container"><p> Manager for showing/hiding progress bar widget. This class lets user specify an initial delay after which the progress bar will be shown. This is currently being used in <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.html"> BrowseFragment </a> </code></pre> &amp; <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/VerticalGridFragment.html"> VerticalGridFragment </a> </code></pre> to show <pre><code> <a href="https://developer.android.com/reference/android/widget/ProgressBar.html"> ProgressBar </a> </code></pre> while the data is being loaded.</p>\n<pre><code>public final class ProgressBarManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/ProgressBarManager.html
RowsFragment	A										<section class="prog__container"><p> An ordered set of rows of leanback widgets. <p> A RowsFragment renders the elements of its <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html"> ObjectAdapter </a> </code></pre> as a set of rows in a vertical list. The Adapter's <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PresenterSelector.html"> PresenterSelector </a> </code></pre> must maintain subclasses of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/RowPresenter.html"> RowPresenter </a> </code></pre> . </p>\n<pre><code>public class RowsFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/RowsFragment.html
RowsFragment.MainFragmentAdapter	A										<section class="prog__container"><p> Returns whether its scrolling.</p>\n<pre><code>public static class RowsFragment.MainFragmentAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/RowsFragment.MainFragmentAdapter.html
RowsFragment.MainFragmentRowsAdapter	A										<section class="prog__container"><p> Set the visibility titles/hover of browse rows.</p>\n<pre><code>public static class RowsFragment.MainFragmentRowsAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/RowsFragment.MainFragmentRowsAdapter.html
RowsSupportFragment	A										<section class="prog__container"><p> An ordered set of rows of leanback widgets. <p> A RowsSupportFragment renders the elements of its <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html"> ObjectAdapter </a> </code></pre> as a set of rows in a vertical list. The Adapter's <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PresenterSelector.html"> PresenterSelector </a> </code></pre> must maintain subclasses of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/RowPresenter.html"> RowPresenter </a> </code></pre> . </p>\n<pre><code>public class RowsSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/RowsSupportFragment.html
RowsSupportFragment.MainFragmentAdapter	A										<section class="prog__container"><p> Returns whether its scrolling.</p>\n<pre><code>public static class RowsSupportFragment.MainFragmentAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/RowsSupportFragment.MainFragmentAdapter.html
RowsSupportFragment.MainFragmentRowsAdapter	A										<section class="prog__container"><p> Set the visibility titles/hover of browse rows.</p>\n<pre><code>public static class RowsSupportFragment.MainFragmentRowsAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/RowsSupportFragment.MainFragmentRowsAdapter.html
SearchFragment	A										<section class="prog__container"><p> A fragment to handle searches. An application will supply an implementation of the <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/SearchFragment.SearchResultProvider.html"> SearchFragment.SearchResultProvider </a> </code></pre> interface to handle the search and return an <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html"> ObjectAdapter </a> </code></pre> containing the results. The results are rendered into a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/RowsFragment.html"> RowsFragment </a> </code></pre> , in the same way that they are in a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseFragment.html"> BrowseFragment </a> </code></pre> . <p> If you do not supply a callback via <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/SearchFragment.html#setSpeechRecognitionCallback(android.support.v17.leanback.widget.SpeechRecognitionCallback)"> setSpeechRecognitionCallback(SpeechRecognitionCallback) </a> </code></pre> , an internal speech recognizer will be used for which your application will need to declare android.permission.RECORD_AUDIO in AndroidManifest file. If app's target version is &gt;= 23 and the device version is &gt;= 23, a permission dialog will show first time using speech recognition. 0 will be used as requestCode in requestPermissions() call. </p>\n<pre><code>public class SearchFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/SearchFragment.html
SearchFragment.SearchResultProvider	A										<section class="prog__container"><p> Search API to be provided by the application.</p>\n<pre><code>public static interface SearchFragment.SearchResultProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/SearchFragment.SearchResultProvider.html
SearchSupportFragment	A										<section class="prog__container"><p> A fragment to handle searches. An application will supply an implementation of the <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/SearchSupportFragment.SearchResultProvider.html"> SearchSupportFragment.SearchResultProvider </a> </code></pre> interface to handle the search and return an <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html"> ObjectAdapter </a> </code></pre> containing the results. The results are rendered into a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/RowsSupportFragment.html"> RowsSupportFragment </a> </code></pre> , in the same way that they are in a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/BrowseSupportFragment.html"> BrowseSupportFragment </a> </code></pre> . <p> If you do not supply a callback via <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/SearchSupportFragment.html#setSpeechRecognitionCallback(android.support.v17.leanback.widget.SpeechRecognitionCallback)"> setSpeechRecognitionCallback(SpeechRecognitionCallback) </a> </code></pre> , an internal speech recognizer will be used for which your application will need to declare android.permission.RECORD_AUDIO in AndroidManifest file. If app's target version is &gt;= 23 and the device version is &gt;= 23, a permission dialog will show first time using speech recognition. 0 will be used as requestCode in requestPermissions() call. </p>\n<pre><code>public class SearchSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/SearchSupportFragment.html
SearchSupportFragment.SearchResultProvider	A										<section class="prog__container"><p> Search API to be provided by the application.</p>\n<pre><code>public static interface SearchSupportFragment.SearchResultProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/SearchSupportFragment.SearchResultProvider.html
VerticalGridFragment	A										<section class="prog__container"><p> A fragment for creating leanback vertical grids. <p> Renders a vertical grid of objects given a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/VerticalGridPresenter.html"> VerticalGridPresenter </a> </code></pre> and an <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html"> ObjectAdapter </a> </code></pre> . </p>\n<pre><code>public class VerticalGridFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/VerticalGridFragment.html
VerticalGridSupportFragment	A										<section class="prog__container"><p> A fragment for creating leanback vertical grids. <p> Renders a vertical grid of objects given a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/VerticalGridPresenter.html"> VerticalGridPresenter </a> </code></pre> and an <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html"> ObjectAdapter </a> </code></pre> . </p>\n<pre><code>public class VerticalGridSupportFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/app/VerticalGridSupportFragment.html
CursorMapper	A										<section class="prog__container"><p> Abstract class used to convert the current <pre><code> <a href="https://developer.android.com/reference/android/database/Cursor.html"> Cursor </a> </code></pre> row to a single object.</p>\n<pre><code>public abstract class CursorMapper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/database/CursorMapper.html
android.support.v17.leanback.database	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v17/leanback/database/package-summary.html
ColorFilterCache	A										<section class="prog__container"><p> Cache of <pre><code> <a href="https://developer.android.com/reference/android/graphics/ColorFilter.html"> ColorFilter </a> </code></pre> s for a given color at different alpha levels.</p>\n<pre><code>public final class ColorFilterCache\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/graphics/ColorFilterCache.html
ColorFilterDimmer	A										<section class="prog__container"><p> Helper class for applying a dim level to a View. The ColorFilterDimmer uses a ColorFilter in a Paint object to dim the view according to the currently active level.</p>\n<pre><code>public final class ColorFilterDimmer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/graphics/ColorFilterDimmer.html
ColorOverlayDimmer	A										<section class="prog__container"><p> Helper class for assigning a dim color to Paint. It holds the alpha value for the current active level.</p>\n<pre><code>public final class ColorOverlayDimmer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/graphics/ColorOverlayDimmer.html
android.support.v17.leanback.graphics	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v17/leanback/graphics/package-summary.html
android.support.v17.leanback.system	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v17/leanback/system/package-summary.html
Settings	A										<section class="prog__container"><p> Provides various preferences affecting Leanback runtime behavior. <p> Note this class is not thread safe and its methods should only be invoked from the UI thread </p>\n<pre><code>public class Settings\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/system/Settings.html
AbstractDetailsDescriptionPresenter	A										<section class="prog__container"><p> An abstract <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.html"> Presenter </a> </code></pre> for rendering a detailed description of an item. Typically this Presenter will be used in a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewRowPresenter.html"> DetailsOverviewRowPresenter </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRowPresenter.html"> PlaybackControlsRowPresenter </a> </code></pre> . <p> Subclasses must override <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractDetailsDescriptionPresenter.html#onBindDescription(android.support.v17.leanback.widget.AbstractDetailsDescriptionPresenter.ViewHolder, java.lang.Object)"> onBindDescription(AbstractDetailsDescriptionPresenter.ViewHolder, Object) </a> </code></pre> to implement the data binding for this Presenter. </p>\n<pre><code>public abstract class AbstractDetailsDescriptionPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractDetailsDescriptionPresenter.html
AbstractDetailsDescriptionPresenter.ViewHolder	A										<section class="prog__container"><p> The ViewHolder for the <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractDetailsDescriptionPresenter.html"> AbstractDetailsDescriptionPresenter </a> </code></pre> .</p>\n<pre><code>public static class AbstractDetailsDescriptionPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractDetailsDescriptionPresenter.ViewHolder.html
AbstractMediaItemPresenter	A										<section class="prog__container"><p> Abstract <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.html"> Presenter </a> </code></pre> class for rendering media items in a playlist format. Media item data provided for this presenter can implement the interface <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/MultiActionsProvider.html"> MultiActionsProvider </a> </code></pre> , if the media rows wish to contain custom actions. Media items in the playlist are arranged as a vertical list with each row holding each media item's details provided by the user of this class and a set of optional custom actions. Each media item's details and actions are separately focusable. The appearance of each one of the media row components can be controlled through setting theme's attributes. Each media item row provides a view flipper for switching between different views depending on the playback state. A default layout is provided by this presenter for rendering different playback states, or a custom layout can be provided by the user by overriding the playbackMediaItemNumberViewFlipperLayout attribute in the currently specified theme. Subclasses should also override <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractMediaItemPresenter.html#getMediaPlayState(java.lang.Object)"> getMediaPlayState(Object) </a> </code></pre> to provide the current play state of their media item model in case they wish to use different views depending on the playback state. The presenter can optionally provide line separators between media rows by setting <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractMediaItemPresenter.html#setHasMediaRowSeparator(boolean)"> setHasMediaRowSeparator(boolean) </a> </code></pre> to true. <p> Subclasses must override <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractMediaItemPresenter.html#onBindMediaDetails(android.support.v17.leanback.widget.AbstractMediaItemPresenter.ViewHolder, java.lang.Object)"> onBindMediaDetails(AbstractMediaItemPresenter.ViewHolder, Object) </a> </code></pre> to implement their media item model data binding to each row view. </p>\n<pre><code>public abstract class AbstractMediaItemPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractMediaItemPresenter.html
AbstractMediaItemPresenter.ViewHolder	A										<section class="prog__container"><p> The ViewHolder for the <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractMediaItemPresenter.html"> AbstractMediaItemPresenter </a> </code></pre> . It references different views that place different meta-data corresponding to a media item details, actions, selector, listeners, and presenters,</p>\n<pre><code>public static class AbstractMediaItemPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractMediaItemPresenter.ViewHolder.html
AbstractMediaListHeaderPresenter	A										<section class="prog__container"><p> Abstract presenter class for rendering the header for a list of media items in a playlist. The presenter creates a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractMediaListHeaderPresenter.ViewHolder.html"> AbstractMediaListHeaderPresenter.ViewHolder </a> </code></pre> for the TextView holding the header text. <p> Subclasses of this class must override <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractMediaListHeaderPresenter.html#onBindMediaListHeaderViewHolder(android.support.v17.leanback.widget.AbstractMediaListHeaderPresenter.ViewHolder, java.lang.Object)"> onBindMediaListHeaderViewHolder(ViewHolder, Object) </a> </code></pre> in order to bind their header text to the media list header view. </p>\n<pre><code>public abstract class AbstractMediaListHeaderPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractMediaListHeaderPresenter.html
AbstractMediaListHeaderPresenter.ViewHolder	A										<section class="prog__container"><p> The ViewHolder for the <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractMediaListHeaderPresenter.html"> AbstractMediaListHeaderPresenter </a> </code></pre> . It references the TextView that places the header text provided by the data binder.</p>\n<pre><code>public static class AbstractMediaListHeaderPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractMediaListHeaderPresenter.ViewHolder.html
Action	A										<section class="prog__container"><p> An action contains one or two lines of text, an optional image and an optional id. It may also be invoked by one or more keycodes.</p>\n<pre><code>public class Action\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/Action.html
ArrayObjectAdapter	A										<section class="prog__container"><p> An <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html"> ObjectAdapter </a> </code></pre> implemented with an <pre><code> <a href="https://developer.android.com/reference/java/util/ArrayList.html"> ArrayList </a> </code></pre> .</p>\n<pre><code>public class ArrayObjectAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ArrayObjectAdapter.html
BaseCardView	A										<section class="prog__container"><p> A card style layout that responds to certain state changes. It arranges its children in a vertical column, with different regions becoming visible at different times. <p> A BaseCardView will draw its children based on its type, the region visibilities of the child types, and the state of the widget. A child may be marked as belonging to one of three regions: main, info, or extra. The main region is always visible, while the info and extra regions can be set to display based on the activated or selected state of the View. The card states are set by calling <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/BaseCardView.html#setActivated(boolean)"> setActivated </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/BaseCardView.html#setSelected(boolean)"> setSelected </a> </code></pre> . <p> See <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/BaseCardView.LayoutParams.html"> BaseCardView.LayoutParams </a> </code></pre> for layout attributes. </p>\n<pre><code>public class BaseCardView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/BaseCardView.html
BaseCardView.LayoutParams	A										<section class="prog__container"><p> Per-child layout information associated with BaseCardView.</p>\n<pre><code>public static class BaseCardView.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/BaseCardView.LayoutParams.html
BaseOnItemViewClickedListener	A										<section class="prog__container"><p> Interface for receiving notification when an item view holder is clicked.</p>\n<pre><code>public interface BaseOnItemViewClickedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/BaseOnItemViewClickedListener.html
BaseOnItemViewSelectedListener	A										<section class="prog__container"><p> Interface for receiving notification when a row or item becomes selected. The concept of current selection is different than focus. A row or item can be selected without having focus; for example, when a row header view gains focus then the corresponding row view becomes selected.</p>\n<pre><code>public interface BaseOnItemViewSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/BaseOnItemViewSelectedListener.html
BrowseFrameLayout	A										<section class="prog__container"><p> A ViewGroup for managing focus behavior between overlapping views.</p>\n<pre><code>public class BrowseFrameLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/BrowseFrameLayout.html
BrowseFrameLayout.OnChildFocusListener	A										<section class="prog__container"><p> Interface for managing child focus in a BrowseFrameLayout.</p>\n<pre><code>public static interface BrowseFrameLayout.OnChildFocusListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/BrowseFrameLayout.OnChildFocusListener.html
BrowseFrameLayout.OnFocusSearchListener	A										<section class="prog__container"><p> Interface for selecting a focused view in a BrowseFrameLayout when the system focus finder couldn't find a view to focus.</p>\n<pre><code>public static interface BrowseFrameLayout.OnFocusSearchListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/BrowseFrameLayout.OnFocusSearchListener.html
ClassPresenterSelector	A										<section class="prog__container"><p> A ClassPresenterSelector selects a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.html"> Presenter </a> </code></pre> based on the item's Java class.</p>\n<pre><code>public final class ClassPresenterSelector\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ClassPresenterSelector.html
ControlButtonPresenterSelector	A										<section class="prog__container"><p> Displays primary and secondary controls for a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.html"> PlaybackControlsRow </a> </code></pre> . Binds to items of type <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Action.html"> Action </a> </code></pre> .</p>\n<pre><code>public class ControlButtonPresenterSelector\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ControlButtonPresenterSelector.html
CursorObjectAdapter	A										<section class="prog__container"><p> An <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html"> ObjectAdapter </a> </code></pre> implemented with a <pre><code> <a href="https://developer.android.com/reference/android/database/Cursor.html"> Cursor </a> </code></pre> .</p>\n<pre><code>public class CursorObjectAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/CursorObjectAdapter.html
DetailsOverviewLogoPresenter	A										<section class="prog__container"><p> Presenter that responsible to create a ImageView and bind to DetailsOverviewRow. The default implementation uses <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewRow.html#getImageDrawable()"> getImageDrawable() </a> </code></pre> and binds to <pre><code> <a href="https://developer.android.com/reference/android/widget/ImageView.html"> ImageView </a> </code></pre> . <p> Default implementation assumes no scaleType on ImageView and uses intrinsic width and height of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewRow.html#getImageDrawable()"> getImageDrawable() </a> </code></pre> to initialize ImageView's layout params. To specify a fixed size and/or specify a scapeType, subclass should change ImageView's layout params and scaleType in <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewLogoPresenter.html#onCreateView(android.view.ViewGroup)"> onCreateView(ViewGroup) </a> </code></pre> . <p> Subclass may override and has its own image view. Subclass may also download image from URL instead of using <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewRow.html#getImageDrawable()"> getImageDrawable() </a> </code></pre> . It's subclass's responsibility to call <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/FullWidthDetailsOverviewRowPresenter.html#notifyOnBindLogo(android.support.v17.leanback.widget.FullWidthDetailsOverviewRowPresenter.ViewHolder)"> notifyOnBindLogo(FullWidthDetailsOverviewRowPresenter.ViewHolder) </a> </code></pre> whenever <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewLogoPresenter.html#isBoundToImage(android.support.v17.leanback.widget.DetailsOverviewLogoPresenter.ViewHolder, android.support.v17.leanback.widget.DetailsOverviewRow)"> isBoundToImage(ViewHolder, DetailsOverviewRow) </a> </code></pre> turned to true so that activity transition can be started. </p>\n<pre><code>public class DetailsOverviewLogoPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewLogoPresenter.html
DetailsOverviewLogoPresenter.ViewHolder	A										<section class="prog__container"><p> ViewHolder for Logo view of DetailsOverviewRow.</p>\n<pre><code>public static class DetailsOverviewLogoPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewLogoPresenter.ViewHolder.html
DetailsOverviewRow	A										<section class="prog__container"><p> An overview <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Row.html"> Row </a> </code></pre> for a details fragment. This row consists of an image, a description view, and optionally a series of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Action.html"> Action </a> </code></pre> s that can be taken for the item. </p>\n<pre><code>public class DetailsOverviewRow\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewRow.html
DetailsOverviewRow.Listener	A										<section class="prog__container"><p> Listener for changes of DetailsOverviewRow.</p>\n<pre><code>public static class DetailsOverviewRow.Listener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewRow.Listener.html
DetailsOverviewRowPresenter	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/FullWidthDetailsOverviewRowPresenter.html"> FullWidthDetailsOverviewRowPresenter </a> </code></pre> </p>\n<pre><code>public class DetailsOverviewRowPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewRowPresenter.html
DetailsOverviewRowPresenter.ViewHolder	A										<section class="prog__container"><p> A ViewHolder for the DetailsOverviewRow.</p>\n<pre><code>public final class DetailsOverviewRowPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewRowPresenter.ViewHolder.html
DividerPresenter	A										<section class="prog__container"><p> DividerPresenter provides a default presentation for <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/DividerRow.html"> DividerRow </a> </code></pre> in HeadersFragment.</p>\n<pre><code>public class DividerPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/DividerPresenter.html
DividerRow	A										<section class="prog__container"><p> Used to represent divider in HeadersFragment.</p>\n<pre><code>public class DividerRow\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/DividerRow.html
FacetProvider	A										<section class="prog__container"><p> This is the query interface to supply optional features(aka facets) on an object without the need of letting the object to subclass or implement java interfaces.</p>\n<pre><code>public interface FacetProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FacetProvider.html
FacetProviderAdapter	A										<section class="prog__container"><p> Optional interface that implemented by <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html"> RecyclerView.Adapter </a> </code></pre> to query <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/FacetProvider.html"> FacetProvider </a> </code></pre> for a given type within Adapter. Note that <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html"> RecyclerView.ViewHolder </a> </code></pre> may also implement <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/FacetProvider.html"> FacetProvider </a> </code></pre> which has a higher priority than the one returned from the FacetProviderAdapter.</p>\n<pre><code>public interface FacetProviderAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FacetProviderAdapter.html
FocusHighlight	A										<section class="prog__container"><p> Interface for highlighting the item that has focus.</p>\n<pre><code>public interface FocusHighlight\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FocusHighlight.html
FocusHighlightHelper	A										<section class="prog__container"><p> Sets up the highlighting behavior when an item gains focus.</p>\n<pre><code>public class FocusHighlightHelper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FocusHighlightHelper.html
FragmentAnimationProvider	A										<section class="prog__container"><p> FragmentAnimationProvider supplies animations for use during a fragment's onCreateAnimator callback. Animators added here will be added to an animation set and played together. This allows presenters used by a fragment to control their own fragment lifecycle animations.</p>\n<pre><code>public interface FragmentAnimationProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FragmentAnimationProvider.html
FullWidthDetailsOverviewRowPresenter	A										<section class="prog__container"><p> Renders a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/DetailsOverviewRow.html"> DetailsOverviewRow </a> </code></pre> to display an overview of an item. Typically this row will be the first row in a fragment such as the <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/DetailsFragment.html"> DetailsFragment </a> </code></pre> . The View created by the FullWidthDetailsOverviewRowPresenter is made in three parts: logo view on the left, action list view on the top and a customizable detailed description view on the right. <p> The detailed description is rendered using a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.html"> Presenter </a> </code></pre> passed in <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/FullWidthDetailsOverviewRowPresenter.html#FullWidthDetailsOverviewRowPresenter(android.support.v17.leanback.widget.Presenter)"> FullWidthDetailsOverviewRowPresenter(Presenter) </a> </code></pre> . Typically this will be an instance of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractDetailsDescriptionPresenter.html"> AbstractDetailsDescriptionPresenter </a> </code></pre> . The application can access the detailed description ViewHolder from <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/FullWidthDetailsOverviewRowPresenter.ViewHolder.html#getDetailsDescriptionViewHolder()"> getDetailsDescriptionViewHolder() </a> </code></pre> . </p>\n<pre><code>public class FullWidthDetailsOverviewRowPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FullWidthDetailsOverviewRowPresenter.html
FullWidthDetailsOverviewRowPresenter.Listener	A										<section class="prog__container"><p> Listeners for events on ViewHolder.</p>\n<pre><code>public static abstract class FullWidthDetailsOverviewRowPresenter.Listener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FullWidthDetailsOverviewRowPresenter.Listener.html
FullWidthDetailsOverviewRowPresenter.ViewHolder.DetailsOverviewRowListener	A										<section class="prog__container"><p> Called when DetailsOverviewRow has changed actions adapter.</p>\n<pre><code>public class FullWidthDetailsOverviewRowPresenter.ViewHolder.DetailsOverviewRowListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FullWidthDetailsOverviewRowPresenter.ViewHolder.DetailsOverviewRowListener.html
FullWidthDetailsOverviewRowPresenter.ViewHolder	A										<section class="prog__container"><p> A ViewHolder for the DetailsOverviewRow.</p>\n<pre><code>public class FullWidthDetailsOverviewRowPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FullWidthDetailsOverviewRowPresenter.ViewHolder.html
FullWidthDetailsOverviewSharedElementHelper	A										<section class="prog__container"><p> Helper class to assist delayed shared element activity transition for view created by <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/FullWidthDetailsOverviewRowPresenter.html"> FullWidthDetailsOverviewRowPresenter </a> </code></pre> . User must call <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/FullWidthDetailsOverviewSharedElementHelper.html#setSharedElementEnterTransition(android.app.Activity, java.lang.String, long)"> setSharedElementEnterTransition(Activity, String, long) </a> </code></pre> during activity onCreate() and call <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/FullWidthDetailsOverviewRowPresenter.html#setListener(android.support.v17.leanback.widget.FullWidthDetailsOverviewRowPresenter.Listener)"> setListener(FullWidthDetailsOverviewRowPresenter.Listener) </a> </code></pre> . The helper implements <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/FullWidthDetailsOverviewRowPresenter.Listener.html"> FullWidthDetailsOverviewRowPresenter.Listener </a> </code></pre> and starts delayed activity transition once <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/FullWidthDetailsOverviewRowPresenter.Listener.html#onBindLogo(android.support.v17.leanback.widget.FullWidthDetailsOverviewRowPresenter.ViewHolder)"> onBindLogo(ViewHolder) </a> </code></pre> is called.</p>\n<pre><code>public class FullWidthDetailsOverviewSharedElementHelper\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/FullWidthDetailsOverviewSharedElementHelper.html
GuidanceStylist.Guidance	A										<section class="prog__container"><p> A data class representing contextual information for a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/GuidedStepFragment.html"> GuidedStepFragment </a> </code></pre> . Guidance consists of a short title, a longer description, a breadcrumb to help with global navigation (often indicating where the back button will lead), and an optional icon. All this information is intended to provide users with the appropriate context to make the decision(s) required by the current step. <p> Clients may provide a subclass of this if they wish to remember auxiliary data for use in a customized GuidanceStylist. </p>\n<pre><code>public static class GuidanceStylist.Guidance\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidanceStylist.Guidance.html
GuidanceStylist	A										<section class="prog__container"><p> GuidanceStylist is used within a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/GuidedStepFragment.html"> GuidedStepFragment </a> </code></pre> to display contextual information for the decision(s) required at that step. <p> Many aspects of the base GuidanceStylist can be customized through theming; see the theme attributes below. Note that these attributes are not set on individual elements in layout XML, but instead would be set in a custom theme. See <a href="http://developer.android.com/guide/topics/ui/themes.html"> Styles and Themes </a> for more information. <p> If these hooks are insufficient, this class may also be subclassed. Subclasses may wish to override the <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidanceStylist.html#onProvideLayoutId()"> onProvideLayoutId() </a> </code></pre> method to change the layout file used to display the guidance; more complex layouts may be supported by also providing a subclass of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidanceStylist.Guidance.html"> GuidanceStylist.Guidance </a> </code></pre> with extra fields. <p> Note: If an alternate layout is provided, the following view IDs should be used to refer to base elements: <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/R.id.html#guidance_title"> guidance_title </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/R.id.html#guidance_description"> guidance_description </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/R.id.html#guidance_breadcrumb"> guidance_breadcrumb </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/R.id.html#guidance_icon"> guidance_icon </a> </code></pre> </li> </ul> <p> View IDs are allowed to be missing, in which case the corresponding views will be null. </p>\n<pre><code>public class GuidanceStylist\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidanceStylist.html
GuidedAction.Builder	A										<section class="prog__container"><p> Builds a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedAction.html"> GuidedAction </a> </code></pre> object.</p>\n<pre><code>public static class GuidedAction.Builder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedAction.Builder.html
GuidedAction.BuilderBase	A										<section class="prog__container"><p> Base builder class to build a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedAction.html"> GuidedAction </a> </code></pre> object. When subclass GuidedAction, you can override this BuilderBase class, implements your build() method which should call <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedAction.BuilderBase.html#applyValues(android.support.v17.leanback.widget.GuidedAction)"> applyValues(GuidedAction) </a> </code></pre> . When using GuidedAction directly, use <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedAction.Builder.html"> GuidedAction.Builder </a> </code></pre> .</p>\n<pre><code>public static abstract class GuidedAction.BuilderBase\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedAction.BuilderBase.html
GuidedAction	A										<section class="prog__container"><p> A data class which represents an action within a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/GuidedStepFragment.html"> GuidedStepFragment </a> </code></pre> . GuidedActions contain at minimum a title and a description, and typically also an icon. <p> A GuidedAction typically represents a single action a user may take, but may also represent a possible choice out of a group of mutually exclusive choices (similar to radio buttons), or an information-only label (in which case the item cannot be clicked). <p> GuidedActions may optionally be checked. They may also indicate that they will request further user input on selection, in which case they will be displayed with a chevron indicator. <p> GuidedAction recommends to use <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedAction.Builder.html"> GuidedAction.Builder </a> </code></pre> . When application subclass GuidedAction, it can subclass <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedAction.BuilderBase.html"> GuidedAction.BuilderBase </a> </code></pre> , implement its own builder() method where it should call <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedAction.BuilderBase.html#applyValues(android.support.v17.leanback.widget.GuidedAction)"> applyValues(GuidedAction) </a> </code></pre> . </p>\n<pre><code>public class GuidedAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedAction.html
GuidedActionEditText	A										<section class="prog__container"><p> A custom EditText that satisfies the IME key monitoring requirements of GuidedStepFragment.</p>\n<pre><code>public class GuidedActionEditText\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedActionEditText.html
GuidedActionsStylist	A										<section class="prog__container"><p> GuidedActionsStylist is used within a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/GuidedStepFragment.html"> GuidedStepFragment </a> </code></pre> to supply the right-side panel where users can take actions. It consists of a container for the list of actions, and a stationary selector view that indicates visually the location of focus. GuidedActionsStylist has two different layouts: default is for normal actions including text, radio, checkbox, DatePicker, etc, the other when <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedActionsStylist.html#setAsButtonActions()"> setAsButtonActions() </a> </code></pre> is called is recommended for button actions such as "yes", "no". <p> Many aspects of the base GuidedActionsStylist can be customized through theming; see the theme attributes below. Note that these attributes are not set on individual elements in layout XML, but instead would be set in a custom theme. See <a href="http://developer.android.com/guide/topics/ui/themes.html"> Styles and Themes </a> for more information. <p> If these hooks are insufficient, this class may also be subclassed. Subclasses may wish to override the <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedActionsStylist.html#onProvideLayoutId()"> onProvideLayoutId() </a> </code></pre> method to change the layout used to display the list container and selector; override <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedActionsStylist.html#onProvideItemLayoutId(int)"> onProvideItemLayoutId(int) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedActionsStylist.html#getItemViewType(android.support.v17.leanback.widget.GuidedAction)"> getItemViewType(GuidedAction) </a> </code></pre> method to change the layout used to display each action. <p> To support a "click to activate" view similar to DatePicker, app needs: <li> Override <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedActionsStylist.html#onProvideItemLayoutId(int)"> onProvideItemLayoutId(int) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedActionsStylist.html#getItemViewType(android.support.v17.leanback.widget.GuidedAction)"> getItemViewType(GuidedAction) </a> </code></pre> , provides a layout id for the action. <li> The layout must include a widget with id "guidedactions_activator_item", the widget is toggled edit mode by <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#setActivated(boolean)"> setActivated(boolean) </a> </code></pre> . <li> Override <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedActionsStylist.html#onBindActivatorView(android.support.v17.leanback.widget.GuidedActionsStylist.ViewHolder, android.support.v17.leanback.widget.GuidedAction)"> onBindActivatorView(ViewHolder, GuidedAction) </a> </code></pre> to populate values into View. <li> Override <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedActionsStylist.html#onUpdateActivatorView(android.support.v17.leanback.widget.GuidedActionsStylist.ViewHolder, android.support.v17.leanback.widget.GuidedAction)"> onUpdateActivatorView(ViewHolder, GuidedAction) </a> </code></pre> to update action. <p> Note: If an alternate list layout is provided, the following view IDs must be supplied: <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/R.id.html#guidedactions_list"> guidedactions_list </a> </code></pre> </li> </ul> <p> These view IDs must be present in order for the stylist to function. The list ID must correspond to a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/VerticalGridView.html"> VerticalGridView </a> </code></pre> or subclass. <p> If an alternate item layout is provided, the following view IDs should be used to refer to base elements: <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/R.id.html#guidedactions_item_content"> guidedactions_item_content </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/R.id.html#guidedactions_item_title"> guidedactions_item_title </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/R.id.html#guidedactions_item_description"> guidedactions_item_description </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/R.id.html#guidedactions_item_icon"> guidedactions_item_icon </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/R.id.html#guidedactions_item_checkmark"> guidedactions_item_checkmark </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/R.id.html#guidedactions_item_chevron"> guidedactions_item_chevron </a> </code></pre> </li> </ul> <p> These view IDs are allowed to be missing, in which case the corresponding views in <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedActionsStylist.ViewHolder.html"> GuidedActionsStylist.ViewHolder </a> </code></pre> will be null. <p> In order to support editable actions, the view associated with guidedactions_item_title should be a subclass of <pre><code> <a href="https://developer.android.com/reference/android/widget/EditText.html"> EditText </a> </code></pre> , and should satisfy the <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ImeKeyMonitor.html"> ImeKeyMonitor </a> </code></pre> interface. </p>\n<pre><code>public class GuidedActionsStylist\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedActionsStylist.html
GuidedActionsStylist.ViewHolder	A										<section class="prog__container"><p> ViewHolder caches information about the action item layouts' subviews. Subclasses of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedActionsStylist.html"> GuidedActionsStylist </a> </code></pre> may also wish to subclass this in order to add fields.</p>\n<pre><code>public static class GuidedActionsStylist.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedActionsStylist.ViewHolder.html
GuidedDatePickerAction.Builder	A										<section class="prog__container"><p> Builder class to build a GuidedDatePickerAction.</p>\n<pre><code>public static final class GuidedDatePickerAction.Builder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedDatePickerAction.Builder.html
GuidedDatePickerAction.BuilderBase	A										<section class="prog__container"><p> Base Builder class to build GuidedDatePickerAction. Subclass this BuilderBase when app needs to subclass GuidedDatePickerAction, implement your build() which should call <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedDatePickerAction.BuilderBase.html#applyDatePickerValues(android.support.v17.leanback.widget.GuidedDatePickerAction)"> applyDatePickerValues(GuidedDatePickerAction) </a> </code></pre> . When using GuidedDatePickerAction directly, use <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedDatePickerAction.Builder.html"> GuidedDatePickerAction.Builder </a> </code></pre> .</p>\n<pre><code>public static abstract class GuidedDatePickerAction.BuilderBase\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedDatePickerAction.BuilderBase.html
GuidedDatePickerAction	A										<section class="prog__container"><p> Subclass of GuidedAction that can choose a date. The Action is editable by default; to make it read only, call hasEditableActivatorView(false) on the Builder.</p>\n<pre><code>public class GuidedDatePickerAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedDatePickerAction.html
HeaderItem	A										<section class="prog__container"><p> A header item describes the metadata of a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Row.html"> Row </a> </code></pre> , such as a category of media items. May be subclassed to add more information.</p>\n<pre><code>public class HeaderItem\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/HeaderItem.html
HorizontalGridView	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.html"> ViewGroup </a> </code></pre> that shows items in a horizontal scrolling list. The items come from the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html"> RecyclerView.Adapter </a> </code></pre> associated with this view. <p> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html"> RecyclerView.Adapter </a> </code></pre> can optionally implement <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/FacetProviderAdapter.html"> FacetProviderAdapter </a> </code></pre> which provides <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/FacetProvider.html"> FacetProvider </a> </code></pre> for a given view type; <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html"> RecyclerView.ViewHolder </a> </code></pre> can also implement <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/FacetProvider.html"> FacetProvider </a> </code></pre> . Facet from ViewHolder has a higher priority than the one from FacetProviderAdapter associated with viewType. Supported optional facets are: <ol> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ItemAlignmentFacet.html"> ItemAlignmentFacet </a> </code></pre> When this facet is provided by ViewHolder or FacetProviderAdapter, it will override the item alignment settings set on HorizontalGridView. This facet also allows multiple alignment positions within one ViewHolder. </li> </ol> </p>\n<pre><code>public class HorizontalGridView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/HorizontalGridView.html
HorizontalHoverCardSwitcher	A										<section class="prog__container"><p> A helper class for showing a hover card view below a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/HorizontalGridView.html"> HorizontalGridView </a> </code></pre> . The hover card is aligned to the starting edge of the selected child view. If there is no space when scrolling to the end, the ending edge of the hover card will be aligned to the ending edge of the parent view, excluding padding.</p>\n<pre><code>public final class HorizontalHoverCardSwitcher\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/HorizontalHoverCardSwitcher.html
ImageCardView	A										<section class="prog__container"><p> A subclass of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/BaseCardView.html"> BaseCardView </a> </code></pre> with an <pre><code> <a href="https://developer.android.com/reference/android/widget/ImageView.html"> ImageView </a> </code></pre> as its main region. The <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ImageCardView.html"> ImageCardView </a> </code></pre> is highly customizable and can be used for various use-cases by adjusting the ImageViewCard's type to any combination of Title, Content, Badge or ImageOnly. <p> </p>\n<pre><code>public class ImageCardView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ImageCardView.html
ImeKeyMonitor	A										<section class="prog__container"><p> Interface for an EditText subclass that can delegate calls to onKeyPreIme up to a registered listener. <p> Used in editable actions within <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/GuidedStepFragment.html"> GuidedStepFragment </a> </code></pre> to allow for custom back key handling. Specifically, this is used to implement the behavior that dismissing the IME also clears edit text focus. Clients who need to supply custom layouts for <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/GuidedActionsStylist.html"> GuidedActionsStylist </a> </code></pre> with their own EditText classes should satisfy this interface in order to inherit this behavior. </p>\n<pre><code>public interface ImeKeyMonitor\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ImeKeyMonitor.html
ImeKeyMonitor.ImeKeyListener	A										<section class="prog__container"><p> Listener interface for key events intercepted pre-IME by edit text objects.</p>\n<pre><code>public static interface ImeKeyMonitor.ImeKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ImeKeyMonitor.ImeKeyListener.html
ItemAlignmentFacet	A										<section class="prog__container"><p> Optional facet provided by <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html"> RecyclerView.Adapter </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html"> RecyclerView.ViewHolder </a> </code></pre> for use in <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/HorizontalGridView.html"> HorizontalGridView </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/VerticalGridView.html"> VerticalGridView </a> </code></pre> . Apps using <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.html"> Presenter </a> </code></pre> may set facet using <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.html#setFacet(java.lang.Class&lt;?&gt;, java.lang.Object)"> setFacet(Class, Object) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.ViewHolder.html#setFacet(java.lang.Class&lt;?&gt;, java.lang.Object)"> setFacet(Class, Object) </a> </code></pre> . Facet on ViewHolder has a higher priority than Presenter or Adapter. <p> ItemAlignmentFacet contains single or multiple <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ItemAlignmentFacet.ItemAlignmentDef.html"> ItemAlignmentFacet.ItemAlignmentDef </a> </code></pre> s. First <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ItemAlignmentFacet.ItemAlignmentDef.html"> ItemAlignmentFacet.ItemAlignmentDef </a> </code></pre> describes the default alignment position for ViewHolder, it also overrides the default item alignment settings on <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/VerticalGridView.html"> VerticalGridView </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/HorizontalGridView.html"> HorizontalGridView </a> </code></pre> . When there are multiple <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ItemAlignmentFacet.ItemAlignmentDef.html"> ItemAlignmentFacet.ItemAlignmentDef </a> </code></pre> s, the extra <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ItemAlignmentFacet.ItemAlignmentDef.html"> ItemAlignmentFacet.ItemAlignmentDef </a> </code></pre> s are used to calculate deltas from first alignment position. When a descendant view is focused within the ViewHolder, grid view will visit focused view and its ancestors till the root of ViewHolder to match extra <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ItemAlignmentFacet.ItemAlignmentDef.html"> ItemAlignmentFacet.ItemAlignmentDef </a> </code></pre> s' <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ItemAlignmentFacet.ItemAlignmentDef.html#getItemAlignmentViewId()"> getItemAlignmentViewId() </a> </code></pre> . Once a match found, the <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ItemAlignmentFacet.ItemAlignmentDef.html"> ItemAlignmentFacet.ItemAlignmentDef </a> </code></pre> is used to adjust a scroll delta from default alignment position. </p>\n<pre><code>public final class ItemAlignmentFacet\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ItemAlignmentFacet.html
ItemAlignmentFacet.ItemAlignmentDef	A										<section class="prog__container"><p> Definition of an alignment position under a view.</p>\n<pre><code>public static class ItemAlignmentFacet.ItemAlignmentDef\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ItemAlignmentFacet.ItemAlignmentDef.html
ItemBridgeAdapter.AdapterListener	A										<section class="prog__container"><p> Interface for listening to ViewHolder operations.</p>\n<pre><code>public static class ItemBridgeAdapter.AdapterListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ItemBridgeAdapter.AdapterListener.html
ItemBridgeAdapter	A										<section class="prog__container"><p> Bridge from <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.html"> Presenter </a> </code></pre> to <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html"> RecyclerView.Adapter </a> </code></pre> . Public to allow use by third party Presenters.</p>\n<pre><code>public class ItemBridgeAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ItemBridgeAdapter.html
ItemBridgeAdapter.ViewHolder	A										<section class="prog__container"><p> ViewHolder for the ItemBridgeAdapter.</p>\n<pre><code>public class ItemBridgeAdapter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ItemBridgeAdapter.ViewHolder.html
ItemBridgeAdapter.Wrapper	A										<section class="prog__container"><p> Interface for wrapping a view created by a Presenter into another view. The wrapper must be the immediate parent of the wrapped view.</p>\n<pre><code>public static abstract class ItemBridgeAdapter.Wrapper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ItemBridgeAdapter.Wrapper.html
ItemBridgeAdapterShadowOverlayWrapper	A										<section class="prog__container"><p> A wrapper class working with <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ItemBridgeAdapter.html"> ItemBridgeAdapter </a> </code></pre> to wrap item view in a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ShadowOverlayContainer.html"> ShadowOverlayContainer </a> </code></pre> . The ShadowOverlayContainer is created from conditions of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ShadowOverlayHelper.html"> ShadowOverlayHelper </a> </code></pre> .</p>\n<pre><code>public class ItemBridgeAdapterShadowOverlayWrapper\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ItemBridgeAdapterShadowOverlayWrapper.html
ListRow	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Row.html"> Row </a> </code></pre> composed of a optional <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/HeaderItem.html"> HeaderItem </a> </code></pre> , and an <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html"> ObjectAdapter </a> </code></pre> describing the items in the list.</p>\n<pre><code>public class ListRow\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ListRow.html
ListRowHoverCardView	A										<section class="prog__container"><p> ListRowHoverCardView contains a title and description.</p>\n<pre><code>public final class ListRowHoverCardView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ListRowHoverCardView.html
ListRowPresenter	A										<section class="prog__container"><p> ListRowPresenter renders <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ListRow.html"> ListRow </a> </code></pre> using a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/HorizontalGridView.html"> HorizontalGridView </a> </code></pre> hosted in a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ListRowView.html"> ListRowView </a> </code></pre> . </p>\n<pre><code>public class ListRowPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ListRowPresenter.html
ListRowPresenter.SelectItemViewHolderTask	A										<section class="prog__container"><p> A task on the ListRowPresenter.ViewHolder that can select an item by position in the HorizontalGridView and perform an optional item task on it.</p>\n<pre><code>public static class ListRowPresenter.SelectItemViewHolderTask\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ListRowPresenter.SelectItemViewHolderTask.html
ListRowPresenter.ViewHolder	A										<section class="prog__container"><p> ViewHolder for the ListRowPresenter.</p>\n<pre><code>public static class ListRowPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ListRowPresenter.ViewHolder.html
ListRowView	A										<section class="prog__container"><p> ListRowView is a <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.html"> ViewGroup </a> </code></pre> which always contains a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/HorizontalGridView.html"> HorizontalGridView </a> </code></pre> , and may optionally include a hover card.</p>\n<pre><code>public final class ListRowView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ListRowView.html
MultiActionsProvider	A										<section class="prog__container"><p> An interface implemented by the user if they wish to provide actions for a media item row to be displayed by an <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractMediaItemPresenter.html"> AbstractMediaItemPresenter </a> </code></pre> . A media row consists of media item details together with a number of custom actions, following the media item details. Classes implementing <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/MultiActionsProvider.html"> MultiActionsProvider </a> </code></pre> can define their own media data model within their derived classes. <p> The actions are provided by overriding <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/MultiActionsProvider.html#getActions()"> getActions() </a> </code></pre> Provided actions should be instances of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/MultiActionsProvider.MultiAction.html"> MultiActionsProvider.MultiAction </a> </code></pre> . </p>\n<pre><code>public interface MultiActionsProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/MultiActionsProvider.html
MultiActionsProvider.MultiAction	A										<section class="prog__container"><p> MultiAction represents an action that can have multiple states. <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/MultiActionsProvider.MultiAction.html#getIndex()"> getIndex() </a> </code></pre> returns the current index within the drawables. Both list of drawables and index can be updated dynamically in the program, and the UI could be updated by notifying the listeners provided in <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractMediaItemPresenter.ViewHolder.html"> AbstractMediaItemPresenter.ViewHolder </a> </code></pre> .</p>\n<pre><code>public static class MultiActionsProvider.MultiAction\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/MultiActionsProvider.MultiAction.html
ObjectAdapter.DataObserver	A										<section class="prog__container"><p> A DataObserver can be notified when an ObjectAdapter's underlying data changes. Separate methods provide notifications about different types of changes.</p>\n<pre><code>public static abstract class ObjectAdapter.DataObserver\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.DataObserver.html
ObjectAdapter	A										<section class="prog__container"><p> Base class adapter to be used in leanback activities. Provides access to a data model and is decoupled from the presentation of the items via <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PresenterSelector.html"> PresenterSelector </a> </code></pre> .</p>\n<pre><code>public abstract class ObjectAdapter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html
OnActionClickedListener	A										<section class="prog__container"><p> Interface for receiving notification when an <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Action.html"> Action </a> </code></pre> is clicked.</p>\n<pre><code>public interface OnActionClickedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/OnActionClickedListener.html
OnChildLaidOutListener	A										<section class="prog__container"><p> Interface for receiving notification when a child of this ViewGroup has been laid out.</p>\n<pre><code>public interface OnChildLaidOutListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/OnChildLaidOutListener.html
OnChildSelectedListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface is deprecated. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/OnChildViewHolderSelectedListener.html"> OnChildViewHolderSelectedListener </a> </code></pre> </p>\n<pre><code>public interface OnChildSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/OnChildSelectedListener.html
OnChildViewHolderSelectedListener	A										<section class="prog__container"><p> Interface for receiving notification when a child of this ViewGroup has been selected. There are two methods: <li> {link <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/OnChildViewHolderSelectedListener.html#onChildViewHolderSelected(android.support.v7.widget.RecyclerView, android.support.v7.widget.RecyclerView.ViewHolder, int, int)"> onChildViewHolderSelected(RecyclerView, RecyclerView.ViewHolder, int, int) </a> </code></pre> } is called when the view holder is about to be selected. The listener could change size of the view holder in this callback. </li> <li> {link <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/OnChildViewHolderSelectedListener.html#onChildViewHolderSelectedAndPositioned(android.support.v7.widget.RecyclerView, android.support.v7.widget.RecyclerView.ViewHolder, int, int)"> onChildViewHolderSelectedAndPositioned(RecyclerView, RecyclerView.ViewHolder, int, int) </a> </code></pre> is called when view holder has been selected and laid out in RecyclerView. </li></p>\n<pre><code>public abstract class OnChildViewHolderSelectedListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/OnChildViewHolderSelectedListener.html
OnItemViewClickedListener	A										<section class="prog__container"><p> Interface for receiving notification when a item view holder is clicked. This interface expects row object to be sub class of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Row.html"> Row </a> </code></pre> .</p>\n<pre><code>public interface OnItemViewClickedListener\nimplements <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/BaseOnItemViewClickedListener.html">BaseOnItemViewClickedListener</a>&lt;<a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Row.html">Row</a>&gt;</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/OnItemViewClickedListener.html
OnItemViewSelectedListener	A										<section class="prog__container"><p> Interface for receiving notification when a row or item becomes selected. The concept of current selection is different than focus. A row or item can be selected without having focus; for example, when a row header view gains focus then the corresponding row view becomes selected. This interface expects row object to be sub class of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Row.html"> Row </a> </code></pre> .</p>\n<pre><code>public interface OnItemViewSelectedListener\nimplements <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/BaseOnItemViewSelectedListener.html">BaseOnItemViewSelectedListener</a>&lt;<a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Row.html">Row</a>&gt;</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/OnItemViewSelectedListener.html
android.support.v17.leanback.widget	A										<section class="prog__container">Support classes providing low level Leanback user interface building blocks: widgets and helpers.</section>	https://developer.android.com/reference/android/support/v17/leanback/widget/package-summary.html
PageRow	A										<section class="prog__container"><p> Used to represent content spanning full page.</p>\n<pre><code>public class PageRow\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PageRow.html
PlaybackControlsRow.ClosedCaptioningAction	A										<section class="prog__container"><p> An action for displaying a CC (Closed Captioning) icon.</p>\n<pre><code>public static class PlaybackControlsRow.ClosedCaptioningAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.ClosedCaptioningAction.html
PlaybackControlsRow.FastForwardAction	A										<section class="prog__container"><p> An action displaying an icon for fast forward.</p>\n<pre><code>public static class PlaybackControlsRow.FastForwardAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.FastForwardAction.html
PlaybackControlsRow.HighQualityAction	A										<section class="prog__container"><p> An action for displaying a HQ (High Quality) icon.</p>\n<pre><code>public static class PlaybackControlsRow.HighQualityAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.HighQualityAction.html
PlaybackControlsRow	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Row.html"> Row </a> </code></pre> of playback controls to be displayed by a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRowPresenter.html"> PlaybackControlsRowPresenter </a> </code></pre> . This row consists of some optional item detail, a series of primary actions, and an optional series of secondary actions. <p> Controls are specified via an <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html"> ObjectAdapter </a> </code></pre> containing one or more <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Action.html"> Action </a> </code></pre> s. </p>\n<pre><code>public class PlaybackControlsRow\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.html
PlaybackControlsRow.MoreActions	A										<section class="prog__container"><p> An action displaying an icon for "more actions".</p>\n<pre><code>public static class PlaybackControlsRow.MoreActions\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.MoreActions.html
PlaybackControlsRow.MultiAction	A										<section class="prog__container"><p> Base class for an action comprised of a series of icons.</p>\n<pre><code>public static abstract class PlaybackControlsRow.MultiAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.MultiAction.html
PlaybackControlsRow.PictureInPictureAction	A										<section class="prog__container"><p> An action displaying an icon for picture-in-picture.</p>\n<pre><code>public static class PlaybackControlsRow.PictureInPictureAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.PictureInPictureAction.html
PlaybackControlsRow.PlayPauseAction	A										<section class="prog__container"><p> An action displaying icons for play and pause.</p>\n<pre><code>public static class PlaybackControlsRow.PlayPauseAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.PlayPauseAction.html
PlaybackControlsRow.RepeatAction	A										<section class="prog__container"><p> An action for displaying three repeat states: none, one, or all.</p>\n<pre><code>public static class PlaybackControlsRow.RepeatAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.RepeatAction.html
PlaybackControlsRow.RewindAction	A										<section class="prog__container"><p> An action displaying an icon for rewind.</p>\n<pre><code>public static class PlaybackControlsRow.RewindAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.RewindAction.html
PlaybackControlsRow.ShuffleAction	A										<section class="prog__container"><p> An action for displaying a shuffle icon.</p>\n<pre><code>public static class PlaybackControlsRow.ShuffleAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.ShuffleAction.html
PlaybackControlsRow.SkipNextAction	A										<section class="prog__container"><p> An action displaying an icon for skip next.</p>\n<pre><code>public static class PlaybackControlsRow.SkipNextAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.SkipNextAction.html
PlaybackControlsRow.SkipPreviousAction	A										<section class="prog__container"><p> An action displaying an icon for skip previous.</p>\n<pre><code>public static class PlaybackControlsRow.SkipPreviousAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.SkipPreviousAction.html
PlaybackControlsRow.ThumbsAction	A										<section class="prog__container"><p> A base class for displaying a thumbs action.</p>\n<pre><code>public static abstract class PlaybackControlsRow.ThumbsAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.ThumbsAction.html
PlaybackControlsRow.ThumbsDownAction	A										<section class="prog__container"><p> An action displaying an icon for thumbs down.</p>\n<pre><code>public static class PlaybackControlsRow.ThumbsDownAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.ThumbsDownAction.html
PlaybackControlsRow.ThumbsUpAction	A										<section class="prog__container"><p> An action displaying an icon for thumbs up.</p>\n<pre><code>public static class PlaybackControlsRow.ThumbsUpAction\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.ThumbsUpAction.html
PlaybackControlsRowPresenter	A										<section class="prog__container"><p> A PlaybackControlsRowPresenter renders a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRow.html"> PlaybackControlsRow </a> </code></pre> to display a series of playback control buttons. Typically this row will be the first row in a fragment such as the <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/app/PlaybackOverlayFragment.html"> PlaybackOverlayFragment </a> </code></pre> . <p> The detailed description is rendered using a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.html"> Presenter </a> </code></pre> passed in <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRowPresenter.html#PlaybackControlsRowPresenter(android.support.v17.leanback.widget.Presenter)"> PlaybackControlsRowPresenter(Presenter) </a> </code></pre> . Typically this will be an instance of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/AbstractDetailsDescriptionPresenter.html"> AbstractDetailsDescriptionPresenter </a> </code></pre> . The application can access the detailed description ViewHolder from <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRowPresenter.ViewHolder.html#mDescriptionViewHolder"> mDescriptionViewHolder </a> </code></pre> . </p>\n<pre><code>public class PlaybackControlsRowPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRowPresenter.html
PlaybackControlsRowPresenter.ViewHolder	A										<section class="prog__container"><p> A ViewHolder for the PlaybackControlsRow.</p>\n<pre><code>public class PlaybackControlsRowPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRowPresenter.ViewHolder.html
PlaybackRowPresenter	A										<section class="prog__container"><p> Subclass of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/RowPresenter.html"> RowPresenter </a> </code></pre> that can define the desired behavior when the view reappears. This is presently used by <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackControlsRowPresenter.html"> PlaybackControlsRowPresenter </a> </code></pre> to update the UI after we show/hide the controls view.</p>\n<pre><code>public abstract class PlaybackRowPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackRowPresenter.html
PlaybackRowPresenter.ViewHolder	A										<section class="prog__container"><p> This container is used for trapping click events and passing them to the playback controls.</p>\n<pre><code>public static class PlaybackRowPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PlaybackRowPresenter.ViewHolder.html
Presenter	A										<section class="prog__container"><p> A Presenter is used to generate <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> s and bind Objects to them on demand. It is closely related to the concept of an <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html"> RecyclerView.Adapter </a> </code></pre> , but is not position-based. The leanback framework implements the adapter concept using <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html"> ObjectAdapter </a> </code></pre> which refers to a Presenter (or <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PresenterSelector.html"> PresenterSelector </a> </code></pre> ) instance. <p> Presenters should be stateless. Presenters typically extend <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.ViewHolder.html"> Presenter.ViewHolder </a> </code></pre> to store all necessary view state information, such as references to child views to be used when binding to avoid expensive calls to <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#findViewById(int)"> findViewById(int) </a> </code></pre> . </p>\n<pre><code>public abstract class Presenter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.html
Presenter.ViewHolder	A										<section class="prog__container"><p> ViewHolder can be subclassed and used to cache any view accessors needed to improve binding performance (for example, results of findViewById) without needing to subclass a View.</p>\n<pre><code>public static class Presenter.ViewHolder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.ViewHolder.html
Presenter.ViewHolderTask	A										<section class="prog__container"><p> Base class to perform a task on Presenter.ViewHolder.</p>\n<pre><code>public static abstract class Presenter.ViewHolderTask\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.ViewHolderTask.html
PresenterSelector	A										<section class="prog__container"><p> A PresenterSelector is used to obtain a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.html"> Presenter </a> </code></pre> for a given Object. Similar to <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.html"> Presenter </a> </code></pre> , PresenterSelector is stateless.</p>\n<pre><code>public abstract class PresenterSelector\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PresenterSelector.html
PresenterSwitcher	A										<section class="prog__container"><p> An abstract helper class that switches a view in its parent view using a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PresenterSelector.html"> PresenterSelector </a> </code></pre> . A subclass should implement <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PresenterSwitcher.html#insertView(android.view.View)"> insertView(View) </a> </code></pre> to define how to add the view in parent, and may optionally override <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PresenterSwitcher.html#onViewSelected(android.view.View)"> onViewSelected(View) </a> </code></pre> .</p>\n<pre><code>public abstract class PresenterSwitcher\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/PresenterSwitcher.html
Row	A										<section class="prog__container"><p> The base class for all rows. A commonly used subclass is the <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ListRow.html"> ListRow </a> </code></pre> . Custom subclasses may define other types of rows.</p>\n<pre><code>public class Row\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/Row.html
RowHeaderPresenter	A										<section class="prog__container"><p> RowHeaderPresenter provides a default presentation for <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/HeaderItem.html"> HeaderItem </a> </code></pre> using a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/RowHeaderView.html"> RowHeaderView </a> </code></pre> . If a subclass creates its own view, the subclass must also override <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/RowHeaderPresenter.html#onSelectLevelChanged(android.support.v17.leanback.widget.RowHeaderPresenter.ViewHolder)"> onSelectLevelChanged(ViewHolder) </a> </code></pre> .</p>\n<pre><code>public class RowHeaderPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/RowHeaderPresenter.html
RowHeaderPresenter.ViewHolder	A										<section class="prog__container"><p> A ViewHolder for the RowHeaderPresenter.</p>\n<pre><code>public static class RowHeaderPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/RowHeaderPresenter.ViewHolder.html
RowHeaderView	A										<section class="prog__container"><p> RowHeaderView is a header text view.</p>\n<pre><code>public final class RowHeaderView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/RowHeaderView.html
RowPresenter	A										<section class="prog__container"><p> An abstract <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.html"> Presenter </a> </code></pre> that renders an Object in RowsFragment, the object can be subclass <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Row.html"> Row </a> </code></pre> or a generic one. When the object is not <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Row.html"> Row </a> </code></pre> class, <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/RowPresenter.ViewHolder.html#getRow()"> getRow() </a> </code></pre> returns null. </p>\n<pre><code>public abstract class RowPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/RowPresenter.html
RowPresenter.ViewHolder	A										<section class="prog__container"><p> A ViewHolder for a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Row.html"> Row </a> </code></pre> .</p>\n<pre><code>public static class RowPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/RowPresenter.ViewHolder.html
SearchBar	A										<section class="prog__container"><p> A search widget containing a search orb and a text entry view. <p> Note: When <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/SpeechRecognitionCallback.html"> SpeechRecognitionCallback </a> </code></pre> is not used, i.e. using <pre><code> <a href="https://developer.android.com/reference/android/speech/SpeechRecognizer.html"> SpeechRecognizer </a> </code></pre> , your application will need to declare android.permission.RECORD_AUDIO in manifest file. If your application target &gt;= 23 and the device is running &gt;= 23, it needs implement <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/SearchBar.SearchBarPermissionListener.html"> SearchBar.SearchBarPermissionListener </a> </code></pre> where requests runtime permission. </p>\n<pre><code>public class SearchBar\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SearchBar.html
SearchBar.SearchBarListener	A										<section class="prog__container"><p> Interface for receiving notification of search query changes.</p>\n<pre><code>public static interface SearchBar.SearchBarListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SearchBar.SearchBarListener.html
SearchBar.SearchBarPermissionListener	A										<section class="prog__container"><p> Interface that handles runtime permissions requests. App sets listener on SearchBar via <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/SearchBar.html#setPermissionListener(android.support.v17.leanback.widget.SearchBar.SearchBarPermissionListener)"> setPermissionListener(SearchBarPermissionListener) </a> </code></pre> .</p>\n<pre><code>public static interface SearchBar.SearchBarPermissionListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SearchBar.SearchBarPermissionListener.html
SearchEditText	A										<section class="prog__container"><p> EditText widget that monitors keyboard changes.</p>\n<pre><code>public class SearchEditText\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SearchEditText.html
SearchEditText.OnKeyboardDismissListener	A										<section class="prog__container"><p> Interface for receiving notification when the keyboard is dismissed.</p>\n<pre><code>public static interface SearchEditText.OnKeyboardDismissListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SearchEditText.OnKeyboardDismissListener.html
SearchOrbView.Colors	A										<section class="prog__container"><p> A set of colors used to display the search orb.</p>\n<pre><code>public static class SearchOrbView.Colors\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SearchOrbView.Colors.html
SearchOrbView	A										<section class="prog__container"><p> <p> A widget that draws a search affordance, represented by a round background and an icon. </p>\n<pre><code>public class SearchOrbView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SearchOrbView.html
SectionRow	A										<section class="prog__container"><p> Used to represent section item in HeadersFragment. Unlike a normal Row, it's not focusable.</p>\n<pre><code>public class SectionRow\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SectionRow.html
ShadowOverlayContainer	A										<section class="prog__container"><p> Provides an SDK version-independent wrapper to support shadows, color overlays, and rounded corners. It's not always preferred to create a ShadowOverlayContainer, use <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ShadowOverlayHelper.html"> ShadowOverlayHelper </a> </code></pre> instead. <p> <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ShadowOverlayContainer.html#prepareParentForShadow(android.view.ViewGroup)"> prepareParentForShadow(ViewGroup) </a> </code></pre> must be called on parent of container before using shadow. Depending on sdk version, optical bounds might be applied to parent. </p>\n<pre><code>public class ShadowOverlayContainer\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ShadowOverlayContainer.html
ShadowOverlayHelper.Builder	A										<section class="prog__container"><p> Builder for creating ShadowOverlayHelper.</p>\n<pre><code>public static final class ShadowOverlayHelper.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ShadowOverlayHelper.Builder.html
ShadowOverlayHelper	A										<section class="prog__container"><p> ShadowOverlayHelper is a helper class for shadow, overlay color and rounded corner. There are many choices to implement Shadow, overlay color. Initialize it with ShadowOverlayHelper.Builder and it decides the best strategy based on options user choose and current platform version. <li> For shadow: it may use 9-patch with opticalBounds or Z-value based shadow for API &gt;= 21. When 9-patch is used, it requires a ShadowOverlayContainer to include 9-patch views. <li> For overlay: it may use ShadowOverlayContainer which overrides draw() or it may use setForeground(new ColorDrawable()) for API&gt;=23. The foreground support might be disabled if rounded corner is applied due to performance reason. <li> For rounded-corner: it uses a ViewOutlineProvider for API&gt;=21. There are two different strategies: use Wrapper with a ShadowOverlayContainer; or apply rounded corner, overlay and rounded-corner to the view itself. Below is an example of how helper is used. <pre><code> ShadowOverlayHelper mHelper = new ShadowOverlayHelper.Builder(). .needsOverlay(true).needsRoundedCorner(true).needsShadow(true) .build(); mHelper.prepareParentForShadow(parentView); // apply optical-bounds for 9-patch shadow. mHelper.setOverlayColor(view, Color.argb(0x80, 0x80, 0x80, 0x80)); mHelper.setShadowFocusLevel(view, 1.0f); ... View initializeView(View view) { if (mHelper.needsWrapper()) { ShadowOverlayContainer wrapper = mHelper.createShadowOverlayContainer(context); wrapper.wrap(view); return wrapper; } else { mHelper.onViewCreated(view); return view; } } ... </code></pre> </li> </li> </li></p>\n<pre><code>public final class ShadowOverlayHelper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ShadowOverlayHelper.html
ShadowOverlayHelper.Options	A										<section class="prog__container"><p> Option values for ShadowOverlayContainer.</p>\n<pre><code>public static final class ShadowOverlayHelper.Options\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ShadowOverlayHelper.Options.html
SinglePresenterSelector	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/PresenterSelector.html"> PresenterSelector </a> </code></pre> that always returns the same <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/Presenter.html"> Presenter </a> </code></pre> . Useful for rows of items of the same type that are all rendered the same way.</p>\n<pre><code>public final class SinglePresenterSelector\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SinglePresenterSelector.html
SparseArrayObjectAdapter	A										<section class="prog__container"><p> An <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ObjectAdapter.html"> ObjectAdapter </a> </code></pre> implemented with a <pre><code> <a href="https://developer.android.com/reference/android/util/SparseArray.html"> SparseArray </a> </code></pre> . This class maintains an array of objects where each object is associated with an integer key which determines its order relative to other objects.</p>\n<pre><code>public class SparseArrayObjectAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SparseArrayObjectAdapter.html
SpeechOrbView	A										<section class="prog__container"><p> A subclass of <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/SearchOrbView.html"> SearchOrbView </a> </code></pre> that visualizes the state of an ongoing speech recognition.</p>\n<pre><code>public class SpeechOrbView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SpeechOrbView.html
SpeechRecognitionCallback	A										<section class="prog__container"><p> Interface for receiving notification that speech recognition should be initiated.</p>\n<pre><code>public interface SpeechRecognitionCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/SpeechRecognitionCallback.html
TitleHelper	A										<section class="prog__container"><p> Helper for managing <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/TitleView.html"> TitleView </a> </code></pre> , including transitions and focus movement. Assumes the TitleView is overlayed on the topmost portion of the scene root view.</p>\n<pre><code>public class TitleHelper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/TitleHelper.html
TitleView	A										<section class="prog__container"><p> Title view for a leanback fragment.</p>\n<pre><code>public class TitleView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/TitleView.html
TitleViewAdapter	A										<section class="prog__container"><p> This class allows a customized widget class to implement <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/TitleViewAdapter.Provider.html"> TitleViewAdapter.Provider </a> </code></pre> and expose <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/TitleViewAdapter.html"> TitleViewAdapter </a> </code></pre> methods to containing fragment (e.g. BrowseFragment or DetailsFragment). The title view must have a search orb view ( <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/TitleViewAdapter.html#getSearchAffordanceView()"> getSearchAffordanceView() </a> </code></pre> aligned to start and can typically have a branding Drawable and or title text aligned to end. The branding part is fully open to customization: not necessary to be a drawable or text.</p>\n<pre><code>public abstract class TitleViewAdapter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/TitleViewAdapter.html
TitleViewAdapter.Provider	A										<section class="prog__container"><p> Interface to be implemented by a customized widget class to implement <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/TitleViewAdapter.html"> TitleViewAdapter </a> </code></pre> .</p>\n<pre><code>public static interface TitleViewAdapter.Provider\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/TitleViewAdapter.Provider.html
VerticalGridPresenter	A										<section class="prog__container"><p> A presenter that renders objects in a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/VerticalGridView.html"> VerticalGridView </a> </code></pre> .</p>\n<pre><code>public class VerticalGridPresenter\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/VerticalGridPresenter.html
VerticalGridPresenter.ViewHolder	A										<section class="prog__container"><p> ViewHolder for the VerticalGridPresenter.</p>\n<pre><code>public static class VerticalGridPresenter.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/VerticalGridPresenter.ViewHolder.html
VerticalGridView	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.html"> ViewGroup </a> </code></pre> that shows items in a vertically scrolling list. The items come from the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html"> RecyclerView.Adapter </a> </code></pre> associated with this view. <p> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html"> RecyclerView.Adapter </a> </code></pre> can optionally implement <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/FacetProviderAdapter.html"> FacetProviderAdapter </a> </code></pre> which provides <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/FacetProvider.html"> FacetProvider </a> </code></pre> for a given view type; <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html"> RecyclerView.ViewHolder </a> </code></pre> can also implement <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/FacetProvider.html"> FacetProvider </a> </code></pre> . Facet from ViewHolder has a higher priority than the one from FacetProviderAdapter associated with viewType. Supported optional facets are: <ol> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/ItemAlignmentFacet.html"> ItemAlignmentFacet </a> </code></pre> When this facet is provided by ViewHolder or FacetProviderAdapter, it will override the item alignment settings set on VerticalGridView. This facet also allows multiple alignment positions within one ViewHolder. </li> </ol> </p>\n<pre><code>public class VerticalGridView\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/VerticalGridView.html
ViewHolderTask	A										<section class="prog__container"><p> Interface for schedule task on a ViewHolder.</p>\n<pre><code>public interface ViewHolderTask\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/ViewHolderTask.html
android.support.v17.leanback.widget.picker	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v17/leanback/widget/picker/package-summary.html
Picker	A										<section class="prog__container"><p> Picker is a widget showing multiple customized <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/picker/PickerColumn.html"> PickerColumn </a> </code></pre> s. The PickerColumns are initialized in <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/picker/Picker.html#setColumns(java.util.List&lt;android.support.v17.leanback.widget.picker.PickerColumn&gt;)"> setColumns(List) </a> </code></pre> . Call <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/picker/Picker.html#setColumnAt(int, android.support.v17.leanback.widget.picker.PickerColumn)"> setColumnAt(int, PickerColumn) </a> </code></pre> if the column value range or labels change. Call <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/picker/Picker.html#setColumnValue(int, int, boolean)"> setColumnValue(int, int, boolean) </a> </code></pre> to update the current value of PickerColumn. <p> Picker has two states and will change height: <li> <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#isActivated()"> isActivated() </a> </code></pre> is true: Picker shows typically three items vertically (see <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/picker/Picker.html#getActivatedVisibleItemCount()"> getActivatedVisibleItemCount() </a> </code></pre> }. Columns other than <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/picker/Picker.html#getSelectedColumn()"> getSelectedColumn() </a> </code></pre> still shows one item if the Picker is focused. On a touch screen device, the Picker will not get focus so it always show three items on all columns. On a non-touch device (a TV), the Picker will show three items only on currently activated column. If the Picker has focus, it will intercept DPAD directions and select activated column. <li> <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#isActivated()"> isActivated() </a> </code></pre> is false: Picker shows one item vertically (see <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/picker/Picker.html#getVisibleItemCount()"> getVisibleItemCount() </a> </code></pre> ) on all columns. The size of Picker shrinks. </li> </li> </p>\n<pre><code>public class Picker\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/picker/Picker.html
Picker.PickerValueListener	A										<section class="prog__container"><p></p>\n<pre><code>public static interface Picker.PickerValueListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/picker/Picker.PickerValueListener.html
PickerColumn	A										<section class="prog__container"><p> Picker column class used by <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/picker/Picker.html"> Picker </a> </code></pre> , defines a contiguous value ranges and associated labels. A PickerColumn has a minValue and maxValue to choose between. The Picker column has a current value. The labels can be dynamically generated from value by <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/picker/PickerColumn.html#setLabelFormat(java.lang.String)"> setLabelFormat(String) </a> </code></pre> or a list of static labels set by <pre><code> <a href="https://developer.android.com/reference/android/support/v17/leanback/widget/picker/PickerColumn.html#setStaticLabels(java.lang.CharSequence[])"> setStaticLabels(CharSequence[]) </a> </code></pre> .</p>\n<pre><code>public class PickerColumn\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/leanback/widget/picker/PickerColumn.html
BaseLeanbackPreferenceFragment	A										<section class="prog__container"><p> This fragment provides a preference fragment with leanback-style behavior, suitable for embedding into broader UI elements.</p>\n<pre><code>public abstract class BaseLeanbackPreferenceFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/BaseLeanbackPreferenceFragment.html
LeanbackListPreferenceDialogFragment.AdapterMulti	A										<section class="prog__container"><p> Returns the total number of items in the data set held by the adapter.</p>\n<pre><code>public class LeanbackListPreferenceDialogFragment.AdapterMulti\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/LeanbackListPreferenceDialogFragment.AdapterMulti.html
LeanbackListPreferenceDialogFragment.AdapterSingle	A										<section class="prog__container"><p> Returns the total number of items in the data set held by the adapter.</p>\n<pre><code>public class LeanbackListPreferenceDialogFragment.AdapterSingle\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/LeanbackListPreferenceDialogFragment.AdapterSingle.html
LeanbackListPreferenceDialogFragment	A										<section class="prog__container"><p></p>\n<pre><code>public class LeanbackListPreferenceDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/LeanbackListPreferenceDialogFragment.html
LeanbackListPreferenceDialogFragment.ViewHolder	A										<section class="prog__container"><p></p>\n<pre><code>public static class LeanbackListPreferenceDialogFragment.ViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/LeanbackListPreferenceDialogFragment.ViewHolder.html
LeanbackListPreferenceDialogFragment.ViewHolder.OnItemClickListener	A										<section class="prog__container"><p></p>\n<pre><code>public static interface LeanbackListPreferenceDialogFragment.ViewHolder.OnItemClickListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/LeanbackListPreferenceDialogFragment.ViewHolder.OnItemClickListener.html
LeanbackPreferenceDialogFragment	A										<section class="prog__container"><p></p>\n<pre><code>public class LeanbackPreferenceDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/LeanbackPreferenceDialogFragment.html
LeanbackPreferenceFragment	A										<section class="prog__container"><p> This fragment provides a fully decorated leanback-style preference fragment, including a list background and header. <p> The following sample code shows a simple leanback preference fragment that is populated from a resource. The resource it loads is: </p>\n<pre><code>public abstract class LeanbackPreferenceFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/LeanbackPreferenceFragment.html
LeanbackSettingsFragment	A										<section class="prog__container"><p> This fragment provides a container for displaying a <pre><code> <a href="https://developer.android.com/reference/android/support/v17/preference/LeanbackPreferenceFragment.html"> LeanbackPreferenceFragment </a> </code></pre> <p> The following sample code shows a simple leanback preference fragment that is populated from a resource. The resource it loads is: </p>\n<pre><code>public abstract class LeanbackSettingsFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/LeanbackSettingsFragment.html
android.support.v17.preference	A										<section class="prog__container">The following sample code shows a simple leanback preference fragment that is populated from a resource. </section>	https://developer.android.com/reference/android/support/v17/preference/package-summary.html
R.color	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.color\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/R.color.html
R.dimen	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.dimen\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/R.dimen.html
R	A										<section class="prog__container"><p></p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/R.html
R.id	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.id\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/R.id.html
R.layout	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.layout\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/R.layout.html
R.style	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.style\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v17/preference/R.style.html
android.support.v4	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/R.html
AccessibilityServiceInfoCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html"> AccessibilityService </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class AccessibilityServiceInfoCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/accessibilityservice/AccessibilityServiceInfoCompat.html
android.support.v4.accessibilityservice	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/accessibilityservice/package-summary.html
ActionBarDrawerToggle.Delegate	A										<section class="prog__container"><p> Set the Action Bar's up indicator content description.</p>\n<pre><code>public static interface ActionBarDrawerToggle.Delegate\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ActionBarDrawerToggle.Delegate.html
ActionBarDrawerToggle.DelegateProvider	A										<section class="prog__container"><p> Allows an implementing Activity to return an <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/ActionBarDrawerToggle.Delegate.html"> ActionBarDrawerToggle.Delegate </a> </code></pre> to use with ActionBarDrawerToggle.</p>\n<pre><code>public static interface ActionBarDrawerToggle.DelegateProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ActionBarDrawerToggle.DelegateProvider.html
ActionBarDrawerToggle	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Please use ActionBarDrawerToggle in support-v7-appcompat. <p> This class provides a handy way to tie together the functionality of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/DrawerLayout.html"> DrawerLayout </a> </code></pre> and the framework <pre><code> ActionBar </code></pre> to implement the recommended design for navigation drawers. <p> To use <pre><code> ActionBarDrawerToggle </code></pre> , create one in your Activity and call through to the following methods corresponding to your Activity callbacks: </p>\n<pre><code>public class ActionBarDrawerToggle\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ActionBarDrawerToggle.html
ActivityCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public class ActivityCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ActivityCompat.html
ActivityCompat.OnRequestPermissionsResultCallback	A										<section class="prog__container"><p> This interface is the contract for receiving the results for permission requests.</p>\n<pre><code>public static interface ActivityCompat.OnRequestPermissionsResultCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ActivityCompat.OnRequestPermissionsResultCallback.html
ActivityManagerCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/app/ActivityManager.html"> ActivityManager </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class ActivityManagerCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ActivityManagerCompat.html
ActivityOptionsCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/app/ActivityOptions.html"> ActivityOptions </a> </code></pre> introduced in API level 16 in a backwards compatible fashion.</p>\n<pre><code>public class ActivityOptionsCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ActivityOptionsCompat.html
AppLaunchChecker	A										<section class="prog__container"><p> This class provides APIs for determining how an app has been launched. This can be useful if you want to confirm that a user has launched your app through its front door activity from their launcher/home screen, rather than just if the app has been opened in the past in order to view a link, open a document or perform some other service for other apps on the device.</p>\n<pre><code>public class AppLaunchChecker\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/AppLaunchChecker.html
AppOpsManagerCompat	A										<section class="prog__container"><p> Helper for accessing features in android.app.AppOpsManager introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class AppOpsManagerCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/AppOpsManagerCompat.html
BundleCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/os/Bundle.html"> Bundle </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class BundleCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/BundleCompat.html
DialogFragment	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> <a href="https://developer.android.com/reference/android/app/DialogFragment.html"> DialogFragment </a> </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p>\n<pre><code>public class DialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/DialogFragment.html
Fragment	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> <a href="https://developer.android.com/reference/android/app/Fragment.html"> Fragment </a> </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework <pre><code> <a href="https://developer.android.com/reference/android/app/Fragment.html"> Fragment </a> </code></pre> documentation for a class overview. <p> The main differences when using this support version instead of the framework version are: <ul> <li> Your activity must extend <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentActivity.html"> FragmentActivity </a> </code></pre> <li> You must call <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentActivity.html#getSupportFragmentManager()"> getSupportFragmentManager() </a> </code></pre> to get the <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentManager.html"> FragmentManager </a> </code></pre> </li> </li> </ul> </p>\n<pre><code>public class Fragment\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/Fragment.html
Fragment.InstantiationException	A										<section class="prog__container"><p> Thrown by <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/Fragment.html#instantiate(android.content.Context, java.lang.String, android.os.Bundle)"> instantiate(Context, String, Bundle) </a> </code></pre> when there is an instantiation failure.</p>\n<pre><code>public static class Fragment.InstantiationException\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/Fragment.InstantiationException.html
Fragment.SavedState	A										<section class="prog__container"><p> State information that has been retrieved from a fragment instance through <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentManager.html#saveFragmentInstanceState(android.support.v4.app.Fragment)"> FragmentManager.saveFragmentInstanceState </a> </code></pre> .</p>\n<pre><code>public static class Fragment.SavedState\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/Fragment.SavedState.html
FragmentActivity	A										<section class="prog__container"><p> Base class for activities that want to use the support-based <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/Fragment.html"> Fragment </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v4/content/Loader.html"> Loader </a> </code></pre> APIs. <p> When using this class as opposed to new platform's built-in fragment and loader support, you must use the <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentActivity.html#getSupportFragmentManager()"> getSupportFragmentManager() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentActivity.html#getSupportLoaderManager()"> getSupportLoaderManager() </a> </code></pre> methods respectively to access those features. <p> Known limitations: </p>\n<pre><code>public class FragmentActivity\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentActivity.html
FragmentContainer	A										<section class="prog__container"><p> Callbacks to a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/Fragment.html"> Fragment </a> </code></pre> 's container.</p>\n<pre><code>public abstract class FragmentContainer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentContainer.html
FragmentController	A										<section class="prog__container"><p> Provides integration points with a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentManager.html"> FragmentManager </a> </code></pre> for a fragment host. <p> It is the responsibility of the host to take care of the Fragment's lifecycle. The methods provided by <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentController.html"> FragmentController </a> </code></pre> are for that purpose. </p>\n<pre><code>public class FragmentController\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentController.html
FragmentHostCallback	A										<section class="prog__container"><p> Integration points with the Fragment host. <p> Fragments may be hosted by any object; such as an <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> . In order to host fragments, implement <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentHostCallback.html"> FragmentHostCallback </a> </code></pre> , overriding the methods applicable to the host. </p>\n<pre><code>public abstract class FragmentHostCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentHostCallback.html
FragmentManager.BackStackEntry	A										<section class="prog__container"><p> Representation of an entry on the fragment back stack, as created with <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentTransaction.html#addToBackStack(java.lang.String)"> FragmentTransaction.addToBackStack() </a> </code></pre> . Entries can later be retrieved with <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentManager.html#getBackStackEntryAt(int)"> FragmentManager.getBackStackEntryAt() </a> </code></pre> . <p> Note that you should never hold on to a BackStackEntry object; the identifier as returned by <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentManager.BackStackEntry.html#getId()"> getId() </a> </code></pre> is the only thing that will be persisted across activity instances. </p>\n<pre><code>public static interface FragmentManager.BackStackEntry\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentManager.BackStackEntry.html
FragmentManager.FragmentLifecycleCallbacks	A										<section class="prog__container"><p> Callback interface for listening to fragment state changes that happen within a given FragmentManager.</p>\n<pre><code>public abstract class FragmentManager.FragmentLifecycleCallbacks\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentManager.FragmentLifecycleCallbacks.html
FragmentManager	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> <a href="https://developer.android.com/reference/android/app/FragmentManager.html"> FragmentManager </a> </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentManager.html"> FragmentManager </a> </code></pre> documentation for a class overview. <p> Your activity must derive from <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentActivity.html"> FragmentActivity </a> </code></pre> to use this. From such an activity, you can acquire the <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentManager.html"> FragmentManager </a> </code></pre> by calling <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentActivity.html#getSupportFragmentManager()"> getSupportFragmentManager() </a> </code></pre> . </p>\n<pre><code>public abstract class FragmentManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentManager.html
FragmentManager.OnBackStackChangedListener	A										<section class="prog__container"><p> Interface to watch for changes to the back stack.</p>\n<pre><code>public static interface FragmentManager.OnBackStackChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentManager.OnBackStackChangedListener.html
FragmentManagerNonConfig	A										<section class="prog__container"><p> FragmentManagerNonConfig stores the retained instance fragments across activity recreation events. <p> Apps should treat objects of this type as opaque, returned by and passed to the state save and restore process for fragments in <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentController.html#retainNonConfig()"> retainNonConfig() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentController.html#restoreAllState(android.os.Parcelable, android.support.v4.app.FragmentManagerNonConfig)"> restoreAllState(Parcelable, FragmentManagerNonConfig) </a> </code></pre> . </p>\n<pre><code>public class FragmentManagerNonConfig\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentManagerNonConfig.html
FragmentPagerAdapter	A										<section class="prog__container"><p> Implementation of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/PagerAdapter.html"> PagerAdapter </a> </code></pre> that represents each page as a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/Fragment.html"> Fragment </a> </code></pre> that is persistently kept in the fragment manager as long as the user can return to the page. <p> This version of the pager is best for use when there are a handful of typically more static fragments to be paged through, such as a set of tabs. The fragment of each page the user visits will be kept in memory, though its view hierarchy may be destroyed when not visible. This can result in using a significant amount of memory since fragment instances can hold on to an arbitrary amount of state. For larger sets of pages, consider <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentStatePagerAdapter.html"> FragmentStatePagerAdapter </a> </code></pre> . <p> When using FragmentPagerAdapter the host ViewPager must have a valid ID set. </p>\n<pre><code>public abstract class FragmentPagerAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentPagerAdapter.html
FragmentStatePagerAdapter	A										<section class="prog__container"><p> Implementation of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/PagerAdapter.html"> PagerAdapter </a> </code></pre> that uses a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/Fragment.html"> Fragment </a> </code></pre> to manage each page. This class also handles saving and restoring of fragment's state. <p> This version of the pager is more useful when there are a large number of pages, working more like a list view. When pages are not visible to the user, their entire fragment may be destroyed, only keeping the saved state of that fragment. This allows the pager to hold on to much less memory associated with each visited page as compared to <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentPagerAdapter.html"> FragmentPagerAdapter </a> </code></pre> at the cost of potentially more overhead when switching between pages. <p> When using FragmentPagerAdapter the host ViewPager must have a valid ID set. </p>\n<pre><code>public abstract class FragmentStatePagerAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentStatePagerAdapter.html
FragmentTabHost	A										<section class="prog__container"><p> Special TabHost that allows the use of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/Fragment.html"> Fragment </a> </code></pre> objects for its tab content. When placing this in a view hierarchy, after inflating the hierarchy you must call <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentTabHost.html#setup(android.content.Context, android.support.v4.app.FragmentManager, int)"> setup(Context, FragmentManager, int) </a> </code></pre> to complete the initialization of the tab host. <p> Here is a simple example of using a FragmentTabHost in an Activity: <pre>import com.example.android.supportv4.R;import android.os.Bundle;import android.support.v4.app.FragmentActivity;import android.support.v4.app.FragmentTabHost;/** * This demonstrates how you can implement switching between the tabs of a * TabHost through fragments, using FragmentTabHost. */public class FragmentTabs extends FragmentActivity { private FragmentTabHost mTabHost; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.fragment_tabs); mTabHost = (FragmentTabHost)findViewById(android.R.id.tabhost); mTabHost.setup(this, getSupportFragmentManager(), R.id.realtabcontent); mTabHost.addTab(mTabHost.newTabSpec("simple").setIndicator("Simple"), FragmentStackSupport.CountingFragment.class, null); mTabHost.addTab(mTabHost.newTabSpec("contacts").setIndicator("Contacts"), LoaderCursorSupport.CursorLoaderListFragment.class, null); mTabHost.addTab(mTabHost.newTabSpec("custom").setIndicator("Custom"), LoaderCustomSupport.AppListFragment.class, null); mTabHost.addTab(mTabHost.newTabSpec("throttle").setIndicator("Throttle"), LoaderThrottleSupport.ThrottledLoaderListFragment.class, null); }}</pre> <p> This can also be used inside of a fragment through fragment nesting: <pre>import com.example.android.supportv4.R;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentTabHost;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;public class FragmentTabsFragmentSupport extends Fragment { private FragmentTabHost mTabHost; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { mTabHost = new FragmentTabHost(getActivity()); mTabHost.setup(getActivity(), getChildFragmentManager(), R.id.fragment1); mTabHost.addTab(mTabHost.newTabSpec("simple").setIndicator("Simple"), FragmentStackSupport.CountingFragment.class, null); mTabHost.addTab(mTabHost.newTabSpec("contacts").setIndicator("Contacts"), LoaderCursorSupport.CursorLoaderListFragment.class, null); mTabHost.addTab(mTabHost.newTabSpec("custom").setIndicator("Custom"), LoaderCustomSupport.AppListFragment.class, null); mTabHost.addTab(mTabHost.newTabSpec("throttle").setIndicator("Throttle"), LoaderThrottleSupport.ThrottledLoaderListFragment.class, null); return mTabHost; } @Override public void onDestroyView() { super.onDestroyView(); mTabHost = null; }}</pre> </p>\n<pre><code>public class FragmentTabHost\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentTabHost.html
FragmentTransaction	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> <a href="https://developer.android.com/reference/android/app/FragmentTransaction.html"> FragmentTransaction </a> </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p>\n<pre><code>public abstract class FragmentTransaction\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/FragmentTransaction.html
ListFragment	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> <a href="https://developer.android.com/reference/android/app/ListFragment.html"> ListFragment </a> </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p>\n<pre><code>public class ListFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ListFragment.html
LoaderManager	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> <a href="https://developer.android.com/reference/android/app/LoaderManager.html"> LoaderManager </a> </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview. <p> Your activity must derive from <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentActivity.html"> FragmentActivity </a> </code></pre> to use this. </p>\n<pre><code>public abstract class LoaderManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/LoaderManager.html
LoaderManager.LoaderCallbacks	A										<section class="prog__container"><p> Callback interface for a client to interact with the manager.</p>\n<pre><code>public static interface LoaderManager.LoaderCallbacks\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/LoaderManager.LoaderCallbacks.html
NavUtils	A										<section class="prog__container"><p> NavUtils provides helper functionality for applications implementing recommended Android UI navigation patterns. For information about recommended navigation patterns see <a href="https://developer.android.com/guide/topics/fundamentals/tasks-and-back-stack.html"> Tasks and Back Stack </a> from the developer guide and <a href="https://developer.android.com/design/patterns/navigation.html"> Navigation </a> from the design guide.</p>\n<pre><code>public final class NavUtils\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NavUtils.html
NotificationCompat.Action.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Action.html"> NotificationCompat.Action </a> </code></pre> objects.</p>\n<pre><code>public static final class NotificationCompat.Action.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Action.Builder.html
NotificationCompat.Action.Extender	A										<section class="prog__container"><p> Extender interface for use with <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#extend(android.support.v4.app.NotificationCompat.Extender)"> extend(NotificationCompat.Extender) </a> </code></pre> . Extenders may be used to add metadata or change options on an action builder.</p>\n<pre><code>public static interface NotificationCompat.Action.Extender\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Action.Extender.html
NotificationCompat.Action	A										<section class="prog__container"><p> Structure to encapsulate a named action that can be shown as part of this notification. It must include an icon, a label, and a <pre><code> <a href="https://developer.android.com/reference/android/app/PendingIntent.html"> PendingIntent </a> </code></pre> to be fired when the action is selected by the user. Action buttons won't appear on platforms prior to Android 4.1. <p> Apps should use <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#addAction(int, java.lang.CharSequence, android.app.PendingIntent)"> addAction(int, CharSequence, PendingIntent) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#addAction(android.support.v4.app.NotificationCompat.Action)"> addAction(NotificationCompat.Action) </a> </code></pre> to attach actions. </p>\n<pre><code>public static class NotificationCompat.Action\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Action.html
NotificationCompat.Action.WearableExtender	A										<section class="prog__container"><p> Wearable extender for notification actions. To add extensions to an action, create a new <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Action.WearableExtender.html"> NotificationCompat.Action.WearableExtender </a> </code></pre> object using the <pre><code> WearableExtender() </code></pre> constructor and apply it to a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Action.Builder.html"> NotificationCompat.Action.Builder </a> </code></pre> using <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Action.Builder.html#extend(android.support.v4.app.NotificationCompat.Action.Extender)"> extend(NotificationCompat.Action.Extender) </a> </code></pre> . <pre class="prettyprint"> NotificationCompat.Action action = new NotificationCompat.Action.Builder( R.drawable.archive_all, "Archive all", actionIntent) .extend(new NotificationCompat.Action.WearableExtender() .setAvailableOffline(false)) .build();</pre></p>\n<pre><code>public static final class NotificationCompat.Action.WearableExtender\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Action.WearableExtender.html
NotificationCompat.BigPictureStyle	A										<section class="prog__container"><p> Helper class for generating large-format notifications that include a large image attachment. <br> If the platform does not provide large-format notifications, this method has no effect. The user will always see the normal notification view. <br> This class is a "rebuilder": It attaches to a Builder object and modifies its behavior, like so: <pre class="prettyprint"> Notification notif = new Notification.Builder(mContext) .setContentTitle("New photo from " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_post) .setLargeIcon(aBitmap) .setStyle(new Notification.BigPictureStyle() .bigPicture(aBigBitmap)) .build(); </pre> </br> </br></p>\n<pre><code>public static class NotificationCompat.BigPictureStyle\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.BigPictureStyle.html
NotificationCompat.BigTextStyle	A										<section class="prog__container"><p> Helper class for generating large-format notifications that include a lot of text. <br> If the platform does not provide large-format notifications, this method has no effect. The user will always see the normal notification view. <br> This class is a "rebuilder": It attaches to a Builder object and modifies its behavior, like so: <pre class="prettyprint"> Notification notif = new Notification.Builder(mContext) .setContentTitle("New mail from " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_mail) .setLargeIcon(aBitmap) .setStyle(new Notification.BigTextStyle() .bigText(aVeryLongString)) .build(); </pre> </br> </br></p>\n<pre><code>public static class NotificationCompat.BigTextStyle\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.BigTextStyle.html
NotificationCompat.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html"> NotificationCompat </a> </code></pre> objects. Allows easier control over all the flags, as well as help constructing the typical notification layouts. <p> On platform versions that don't offer expanded notifications, methods that depend on expanded notifications have no effect. </p>\n<pre><code>public static class NotificationCompat.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html
NotificationCompat.CarExtender	A										<section class="prog__container"><p> <p> Helper class to add Android Auto extensions to notifications. To create a notification with car extensions: <ol> <li> Create an <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html"> NotificationCompat.Builder </a> </code></pre> , setting any desired properties. <li> Create a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.CarExtender.html"> NotificationCompat.CarExtender </a> </code></pre> . <li> Set car-specific properties using the <pre><code> add </code></pre> and <pre><code> set </code></pre> methods of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.CarExtender.html"> NotificationCompat.CarExtender </a> </code></pre> . <li> Call <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#extend(android.support.v4.app.NotificationCompat.Extender)"> extend(NotificationCompat.Extender) </a> </code></pre> to apply the extensions to a notification. <li> Post the notification to the notification system with the <pre><code> NotificationManagerCompat.notify(...) </code></pre> methods and not the <pre><code> NotificationManager.notify(...) </code></pre> methods. </li> </li> </li> </li> </li> </ol> <pre class="prettyprint"> Notification notification = new NotificationCompat.Builder(context) ... .extend(new CarExtender() .set*(...)) .build(); </pre> <p> Car extensions can be accessed on an existing notification by using the <pre><code> CarExtender(Notification) </code></pre> constructor, and then using the <pre><code> get </code></pre> methods to access values. </p>\n<pre><code>public static final class NotificationCompat.CarExtender\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.CarExtender.html
NotificationCompat.CarExtender.UnreadConversation.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.CarExtender.UnreadConversation.html"> NotificationCompat.CarExtender.UnreadConversation </a> </code></pre> objects.</p>\n<pre><code>public static class NotificationCompat.CarExtender.UnreadConversation.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.CarExtender.UnreadConversation.Builder.html
NotificationCompat.CarExtender.UnreadConversation	A										<section class="prog__container"><p> A class which holds the unread messages from a conversation.</p>\n<pre><code>public static class NotificationCompat.CarExtender.UnreadConversation\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.CarExtender.UnreadConversation.html
NotificationCompat.Extender	A										<section class="prog__container"><p> Extender interface for use with <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#extend(android.support.v4.app.NotificationCompat.Extender)"> extend(NotificationCompat.Extender) </a> </code></pre> . Extenders may be used to add metadata or change options on a notification builder.</p>\n<pre><code>public static interface NotificationCompat.Extender\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Extender.html
NotificationCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.html"> Notification </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public class NotificationCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html
NotificationCompat.InboxStyle	A										<section class="prog__container"><p> Helper class for generating large-format notifications that include a list of (up to 5) strings. <br> If the platform does not provide large-format notifications, this method has no effect. The user will always see the normal notification view. <br> This class is a "rebuilder": It attaches to a Builder object and modifies its behavior, like so: <pre class="prettyprint"> Notification noti = new Notification.Builder() .setContentTitle("5 New mails from " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_mail) .setLargeIcon(aBitmap) .setStyle(new Notification.InboxStyle() .addLine(str1) .addLine(str2) .setContentTitle("") .setSummaryText("+3 more")) .build(); </pre> </br> </br></p>\n<pre><code>public static class NotificationCompat.InboxStyle\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.InboxStyle.html
NotificationCompat.MessagingStyle	A										<section class="prog__container"><p> Helper class for generating large-format notifications that include multiple back-and-forth messages of varying types between any number of people. <br> In order to get a backwards compatible behavior, the app needs to use the v7 version of the notification builder together with this style, otherwise the user will see the normal notification view. <br> Use <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.MessagingStyle.html#setConversationTitle(java.lang.CharSequence)"> setConversationTitle(CharSequence) </a> </code></pre> to set a conversation title for group chats with more than two people. This could be the user-created name of the group or, if it doesn't have a specific name, a list of the participants in the conversation. Do not set a conversation title for one-on-one chats, since platforms use the existence of this field as a hint that the conversation is a group. <br> This class is a "rebuilder": It attaches to a Builder object and modifies its behavior, like so: <pre class="prettyprint"> Notification noti = new Notification.Builder() .setContentTitle("2 new messages wtih " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_message) .setLargeIcon(aBitmap) .setStyle(new Notification.MessagingStyle(resources.getString(R.string.reply_name)) .addMessage(messages[0].getText(), messages[0].getTime(), messages[0].getSender()) .addMessage(messages[1].getText(), messages[1].getTime(), messages[1].getSender())) .build(); </pre> </br> </br> </br></p>\n<pre><code>public static class NotificationCompat.MessagingStyle\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.MessagingStyle.html
NotificationCompat.MessagingStyle.Message	A										<section class="prog__container"><p> Constructor</p>\n<pre><code>public static final class NotificationCompat.MessagingStyle.Message\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.MessagingStyle.Message.html
NotificationCompat.Style	A										<section class="prog__container"><p> An object that can apply a rich notification style to a <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Action.Builder.html"> Notification.Action.Builder </a> </code></pre> object. <br> If the platform does not provide rich notification styles, methods in this class have no effect. </br></p>\n<pre><code>public static abstract class NotificationCompat.Style\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Style.html
NotificationCompat.WearableExtender	A										<section class="prog__container"><p> Helper class to add wearable extensions to notifications. <p class="note"> See <a href="https://developer.android.com/wear/notifications/creating.html"> Creating Notifications for Android Wear </a> for more information on how to use this class. <p> To create a notification with wearable extensions: <ol> <li> Create a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html"> NotificationCompat.Builder </a> </code></pre> , setting any desired properties. <li> Create a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.WearableExtender.html"> NotificationCompat.WearableExtender </a> </code></pre> . <li> Set wearable-specific properties using the <pre><code> add </code></pre> and <pre><code> set </code></pre> methods of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.WearableExtender.html"> NotificationCompat.WearableExtender </a> </code></pre> . <li> Call <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#extend(android.support.v4.app.NotificationCompat.Extender)"> extend(NotificationCompat.Extender) </a> </code></pre> to apply the extensions to a notification. <li> Post the notification to the notification system with the <pre><code> NotificationManagerCompat.notify(...) </code></pre> methods and not the <pre><code> NotificationManager.notify(...) </code></pre> methods. </li> </li> </li> </li> </li> </ol> <pre class="prettyprint"> Notification notif = new NotificationCompat.Builder(mContext) .setContentTitle("New mail from " + sender.toString()) .setContentText(subject) .setSmallIcon(R.drawable.new_mail) .extend(new NotificationCompat.WearableExtender() .setContentIcon(R.drawable.new_mail)) .build(); NotificationManagerCompat.from(mContext).notify(0, notif);</pre> <p> Wearable extensions can be accessed on an existing notification by using the <pre><code> WearableExtender(Notification) </code></pre> constructor, and then using the <pre><code> get </code></pre> methods to access values. <pre class="prettyprint"> NotificationCompat.WearableExtender wearableExtender = new NotificationCompat.WearableExtender(notification); List&lt;Notification&gt; pages = wearableExtender.getPages();</pre> </p>\n<pre><code>public static final class NotificationCompat.WearableExtender\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompat.WearableExtender.html
NotificationCompatExtras	A										<section class="prog__container"><p> Well-known extras used by <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html"> NotificationCompat </a> </code></pre> for backwards compatibility.</p>\n<pre><code>public final class NotificationCompatExtras\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompatExtras.html
NotificationCompatSideChannelService	A										<section class="prog__container"><p> Abstract service to receive side channel notifications sent from <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationManagerCompat.html"> NotificationManagerCompat </a> </code></pre> . <p> To receive side channel notifications, extend this service and register it in your android manifest with an intent filter for the BIND_NOTIFICATION_SIDE_CHANNEL action. Note: you must also have an enabled <pre><code> <a href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html"> NotificationListenerService </a> </code></pre> within your package. <p> Example AndroidManifest.xml addition: <pre> &lt;service android:name="com.example.NotificationSideChannelService"&gt; &lt;intent-filter&gt; &lt;action android:name="android.support.BIND_NOTIFICATION_SIDE_CHANNEL" /&gt; &lt;/intent-filter&gt; &lt;/service&gt;</pre> </p>\n<pre><code>public abstract class NotificationCompatSideChannelService\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationCompatSideChannelService.html
NotificationManagerCompat	A										<section class="prog__container"><p> Compatibility library for NotificationManager with fallbacks for older platforms. <p> To use this class, call the static function <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationManagerCompat.html#from(android.content.Context)"> from(Context) </a> </code></pre> to get a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationManagerCompat.html"> NotificationManagerCompat </a> </code></pre> object, and then call one of its methods to post or cancel notifications. </p>\n<pre><code>public final class NotificationManagerCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/NotificationManagerCompat.html
android.support.v4.app	A										<section class="prog__container">This class provides a handy way to tie together the functionality of</section>	https://developer.android.com/reference/android/support/v4/app/package-summary.html
RemoteInput.Builder	A										<section class="prog__container"><p> Builder class for <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/RemoteInput.html"> RemoteInput </a> </code></pre> objects.</p>\n<pre><code>public static final class RemoteInput.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/RemoteInput.Builder.html
RemoteInput	A										<section class="prog__container"><p> Helper for using the <pre><code> <a href="https://developer.android.com/reference/android/app/RemoteInput.html"> RemoteInput </a> </code></pre> API introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class RemoteInput\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/RemoteInput.html
ServiceCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/app/Service.html"> Service </a> </code></pre> introduced after API level 9 in a backwards compatible fashion.</p>\n<pre><code>public final class ServiceCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ServiceCompat.html
ShareCompat	A										<section class="prog__container"><p> Extra helper functionality for sharing data between activities. ShareCompat provides functionality to extend the <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_SEND"> ACTION_SEND </a> </code></pre> / <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_SEND_MULTIPLE"> ACTION_SEND_MULTIPLE </a> </code></pre> protocol and support retrieving more info about the activity that invoked a social sharing action. <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/ShareCompat.IntentBuilder.html"> ShareCompat.IntentBuilder </a> </code></pre> provides helper functions for constructing a sharing intent that always includes data about the calling activity and app. This lets the called activity provide attribution for the app that shared content. Constructing an intent this way can be done in a method-chaining style. To obtain an IntentBuilder with info about your calling activity, use the static method <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/ShareCompat.IntentBuilder.html#from(android.app.Activity)"> from(Activity) </a> </code></pre> . <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/ShareCompat.IntentReader.html"> ShareCompat.IntentReader </a> </code></pre> provides helper functions for parsing the defined extras within an <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_SEND"> ACTION_SEND </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_SEND_MULTIPLE"> ACTION_SEND_MULTIPLE </a> </code></pre> intent used to launch an activity. You can also obtain a Drawable for the caller's application icon and the application's localized label (the app's human-readable name). Social apps that enable sharing content are encouraged to use this information to call out the app that the content was shared from.</p>\n<pre><code>public final class ShareCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ShareCompat.html
ShareCompat.IntentBuilder	A										<section class="prog__container"><p> IntentBuilder is a helper for constructing <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_SEND"> ACTION_SEND </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_SEND_MULTIPLE"> ACTION_SEND_MULTIPLE </a> </code></pre> sharing intents and starting activities to share content. The ComponentName and package name of the calling activity will be included.</p>\n<pre><code>public static class ShareCompat.IntentBuilder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ShareCompat.IntentBuilder.html
ShareCompat.IntentReader	A										<section class="prog__container"><p> IntentReader is a helper for reading the data contained within a sharing (ACTION_SEND) Intent. It provides methods to parse standard elements included with a share in addition to extra metadata about the app that shared the content. <p> Social sharing apps are encouraged to provide attribution for the app that shared the content. IntentReader offers access to the application label, calling activity info, and application icon of the app that shared the content. This data may have been provided voluntarily by the calling app and should always be displayed to the user before submission for manual verification. The user should be offered the option to omit this information from shared posts if desired. </p>\n<pre><code>public static class ShareCompat.IntentReader\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/ShareCompat.IntentReader.html
SharedElementCallback	A										<section class="prog__container"><p> Listener provided in <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#setEnterSharedElementCallback(android.app.SharedElementCallback)"> setEnterSharedElementCallback(SharedElementCallback) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#setExitSharedElementCallback(android.app.SharedElementCallback)"> setExitSharedElementCallback(SharedElementCallback) </a> </code></pre> to monitor the Activity transitions. The events can be used to customize Activity Transition behavior.</p>\n<pre><code>public abstract class SharedElementCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/SharedElementCallback.html
SharedElementCallback.OnSharedElementsReadyListener	A										<section class="prog__container"><p> Listener to be called after <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/SharedElementCallback.html#onSharedElementsArrived(java.util.List&lt;java.lang.String&gt;, java.util.List&lt;android.view.View&gt;, android.support.v4.app.SharedElementCallback.OnSharedElementsReadyListener)"> onSharedElementsArrived(List, List, OnSharedElementsReadyListener) </a> </code></pre> when the shared elements are ready to be hidden in the source Activity and shown in the destination Activity.</p>\n<pre><code>public static interface SharedElementCallback.OnSharedElementsReadyListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/SharedElementCallback.OnSharedElementsReadyListener.html
TaskStackBuilder	A										<section class="prog__container"><p> Utility class for constructing synthetic back stacks for cross-task navigation on Android 3.0 and newer. <p> In API level 11 (Android 3.0/Honeycomb) the recommended conventions for app navigation using the back key changed. The back key's behavior is local to the current task and does not capture navigation across different tasks. Navigating across tasks and easily reaching the previous task is accomplished through the "recents" UI, accessible through the software-provided Recents key on the navigation or system bar. On devices with the older hardware button configuration the recents UI can be accessed with a long press on the Home key. </p>\n<pre><code>public final class TaskStackBuilder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/app/TaskStackBuilder.html
TaskStackBuilder.SupportParentable	A										<section class="prog__container"><p></p>\n<pre><code>public static interface TaskStackBuilder.SupportParentable\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/app/TaskStackBuilder.SupportParentable.html
AsyncTaskLoader	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> <a href="https://developer.android.com/reference/android/content/AsyncTaskLoader.html"> AsyncTaskLoader </a> </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p>\n<pre><code>public abstract class AsyncTaskLoader\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/AsyncTaskLoader.html
ContentResolverCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/content/ContentResolver.html"> ContentResolver </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class ContentResolverCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/content/ContentResolverCompat.html
ContextCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html"> Context </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public class ContextCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/content/ContextCompat.html
CursorLoader	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> <a href="https://developer.android.com/reference/android/content/CursorLoader.html"> CursorLoader </a> </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p>\n<pre><code>public class CursorLoader\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/CursorLoader.html
FileProvider	A										<section class="prog__container"><p> FileProvider is a special subclass of <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProvider.html"> ContentProvider </a> </code></pre> that facilitates secure sharing of files associated with an app by creating a <pre><code> content:// </code></pre> <pre><code> <a href="https://developer.android.com/reference/android/net/Uri.html"> Uri </a> </code></pre> for a file instead of a <pre><code> file:/// </code></pre> <pre><code> <a href="https://developer.android.com/reference/android/net/Uri.html"> Uri </a> </code></pre> . <p> A content URI allows you to grant read and write access using temporary access permissions. When you create an <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html"> Intent </a> </code></pre> containing a content URI, in order to send the content URI to a client app, you can also call <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#setFlags(int)"> Intent.setFlags() </a> </code></pre> to add permissions. These permissions are available to the client app for as long as the stack for a receiving <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> is active. For an <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html"> Intent </a> </code></pre> going to a <pre><code> <a href="https://developer.android.com/reference/android/app/Service.html"> Service </a> </code></pre> , the permissions are available as long as the <pre><code> <a href="https://developer.android.com/reference/android/app/Service.html"> Service </a> </code></pre> is running. <p> In comparison, to control access to a <pre><code> file:/// </code></pre> <pre><code> <a href="https://developer.android.com/reference/android/net/Uri.html"> Uri </a> </code></pre> you have to modify the file system permissions of the underlying file. The permissions you provide become available to <em> any </em> app, and remain in effect until you change them. This level of access is fundamentally insecure. <p> The increased level of file access security offered by a content URI makes FileProvider a key part of Android's security infrastructure. <p> This overview of FileProvider includes the following topics: </p>\n<pre><code>public class FileProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/FileProvider.html
IntentCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html"> Intent </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class IntentCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/content/IntentCompat.html
Loader.ForceLoadContentObserver	A										<section class="prog__container"><p> An implementation of a ContentObserver that takes care of connecting it to the Loader to have the loader re-load its data when the observer is told it has changed. You do not normally need to use this yourself; it is used for you by <pre><code> <a href="https://developer.android.com/reference/android/support/v4/content/CursorLoader.html"> CursorLoader </a> </code></pre> to take care of executing an update when the cursor's backing data changes.</p>\n<pre><code>public final class Loader.ForceLoadContentObserver\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/Loader.ForceLoadContentObserver.html
Loader	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> <a href="https://developer.android.com/reference/android/content/Loader.html"> Loader </a> </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p>\n<pre><code>public class Loader\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/content/Loader.html
Loader.OnLoadCanceledListener	A										<section class="prog__container"><p> Interface that is implemented to discover when a Loader has been canceled before it finished loading its data. You do not normally need to implement this yourself; it is used in the implementation of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/LoaderManager.html"> LoaderManager </a> </code></pre> to find out when a Loader it is managing has been canceled so that it can schedule the next Loader. This interface should only be used if a Loader is not being used in conjunction with LoaderManager.</p>\n<pre><code>public static interface Loader.OnLoadCanceledListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/Loader.OnLoadCanceledListener.html
Loader.OnLoadCompleteListener	A										<section class="prog__container"><p> Interface that is implemented to discover when a Loader has finished loading its data. You do not normally need to implement this yourself; it is used in the implementation of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/LoaderManager.html"> LoaderManager </a> </code></pre> to find out when a Loader it is managing has completed so that this can be reported to its client. This interface should only be used if a Loader is not being used in conjunction with LoaderManager.</p>\n<pre><code>public static interface Loader.OnLoadCompleteListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/Loader.OnLoadCompleteListener.html
LocalBroadcastManager	A										<section class="prog__container"><p> Helper to register for and send broadcasts of Intents to local objects within your process. This has a number of advantages over sending global broadcasts with <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#sendBroadcast(android.content.Intent)"> sendBroadcast(Intent) </a> </code></pre> : <ul> <li> You know that the data you are broadcasting won't leave your app, so don't need to worry about leaking private data. <li> It is not possible for other applications to send these broadcasts to your app, so you don't need to worry about having security holes they can exploit. <li> It is more efficient than sending a global broadcast through the system. </li> </li> </li> </ul></p>\n<pre><code>public final class LocalBroadcastManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/content/LocalBroadcastManager.html
android.support.v4.content	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/content/package-summary.html
ParallelExecutorCompat	A										<section class="prog__container"><p> Helper for accessing a shared parallel Executor instance introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class ParallelExecutorCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/content/ParallelExecutorCompat.html
PermissionChecker	A										<section class="prog__container"><p> This class provides permission check APIs that verify both the permission and the associated app op for this permission if such is defined. <p> In the new permission model permissions with protection level dangerous are runtime permissions. For apps targeting <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#M"> M </a> </code></pre> and above the user may not grant such permissions or revoke them at any time. For apps targeting API lower than <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#M"> M </a> </code></pre> these permissions are always granted as such apps do not expect permission revocations and would crash. Therefore, when the user disables a permission for a legacy app in the UI the platform disables the APIs guarded by this permission making them a no-op which is doing nothing or returning an empty result or default error. </p>\n<pre><code>public final class PermissionChecker\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/content/PermissionChecker.html
PermissionChecker.PermissionResult	A										<section class="prog__container"><p> Returns the annotation type of this annotation.</p>\n<pre><code>public static abstract @interface PermissionChecker.PermissionResult\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/content/PermissionChecker.PermissionResult.html
SharedPreferencesCompat.EditorCompat	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public static final class SharedPreferencesCompat.EditorCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/content/SharedPreferencesCompat.EditorCompat.html
SharedPreferencesCompat	A										<section class="prog__container"><p></p>\n<pre><code>public final class SharedPreferencesCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/content/SharedPreferencesCompat.html
WakefulBroadcastReceiver	A										<section class="prog__container"><p> Helper for the common pattern of implementing a <pre><code> <a href="https://developer.android.com/reference/android/content/BroadcastReceiver.html"> BroadcastReceiver </a> </code></pre> that receives a device wakeup event and then passes the work off to a <pre><code> <a href="https://developer.android.com/reference/android/app/Service.html"> Service </a> </code></pre> , while ensuring that the device does not go back to sleep during the transition. <p> This class takes care of creating and managing a partial wake lock for you; you must request the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#WAKE_LOCK"> WAKE_LOCK </a> </code></pre> permission to use it. </p>\n<pre><code>public abstract class WakefulBroadcastReceiver\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/content/WakefulBroadcastReceiver.html
ActivityInfoCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/content/pm/ActivityInfo.html"> ActivityInfo </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class ActivityInfoCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/content/pm/ActivityInfoCompat.html
android.support.v4.content.pm	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/content/pm/package-summary.html
ConfigurationHelper	A										<section class="prog__container"><p> Helper class which allows access to properties of <pre><code> <a href="https://developer.android.com/reference/android/content/res/Configuration.html"> Configuration </a> </code></pre> in a backward compatible fashion.</p>\n<pre><code>public final class ConfigurationHelper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/content/res/ConfigurationHelper.html
android.support.v4.content.res	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/content/res/package-summary.html
ResourcesCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/content/res/Resources.html"> Resources </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class ResourcesCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/content/res/ResourcesCompat.html
DatabaseUtilsCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/database/DatabaseUtils.html"> DatabaseUtils </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class DatabaseUtilsCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/database/DatabaseUtilsCompat.html
android.support.v4.database	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/database/package-summary.html
BitmapCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/graphics/Bitmap.html"> Bitmap </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class BitmapCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/graphics/BitmapCompat.html
ColorUtils	A										<section class="prog__container"><p> A set of color-related utility methods, building upon those available in <pre><code> Color </code></pre> .</p>\n<pre><code>public final class ColorUtils\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/graphics/ColorUtils.html
android.support.v4.graphics	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/graphics/package-summary.html
DrawableCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html"> Drawable </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class DrawableCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/graphics/drawable/DrawableCompat.html
android.support.v4.graphics.drawable	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/graphics/drawable/package-summary.html
RoundedBitmapDrawable	A										<section class="prog__container"><p> A Drawable that wraps a bitmap and can be drawn with rounded corners. You can create a RoundedBitmapDrawable from a file path, an input stream, or from a <pre><code> <a href="https://developer.android.com/reference/android/graphics/Bitmap.html"> Bitmap </a> </code></pre> object. <p> Also see the <pre><code> <a href="https://developer.android.com/reference/android/graphics/Bitmap.html"> Bitmap </a> </code></pre> class, which handles the management and transformation of raw bitmap graphics, and should be used when drawing to a <pre><code> <a href="https://developer.android.com/reference/android/graphics/Canvas.html"> Canvas </a> </code></pre> . </p>\n<pre><code>public abstract class RoundedBitmapDrawable\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/graphics/drawable/RoundedBitmapDrawable.html
RoundedBitmapDrawableFactory	A										<section class="prog__container"><p> Constructs <pre><code> <a href="https://developer.android.com/reference/android/support/v4/graphics/drawable/RoundedBitmapDrawable.html"> RoundedBitmapDrawable </a> </code></pre> objects, either from Bitmaps directly, or from streams and files.</p>\n<pre><code>public final class RoundedBitmapDrawableFactory\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/graphics/drawable/RoundedBitmapDrawableFactory.html
DisplayManagerCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/hardware/display/DisplayManager.html"> DisplayManager </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public abstract class DisplayManagerCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/hardware/display/DisplayManagerCompat.html
android.support.v4.hardware.display	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/hardware/display/package-summary.html
FingerprintManagerCompat.AuthenticationCallback	A										<section class="prog__container"><p> Callback structure provided to <pre><code> <a href="https://developer.android.com/reference/android/support/v4/hardware/fingerprint/FingerprintManagerCompat.html#authenticate(android.support.v4.hardware.fingerprint.FingerprintManagerCompat.CryptoObject, int, android.support.v4.os.CancellationSignal, android.support.v4.hardware.fingerprint.FingerprintManagerCompat.AuthenticationCallback, android.os.Handler)"> authenticate(CryptoObject, int, CancellationSignal, AuthenticationCallback, Handler) </a> </code></pre> . Users of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/hardware/fingerprint/FingerprintManagerCompat.html#authenticate(android.support.v4.hardware.fingerprint.FingerprintManagerCompat.CryptoObject, int, android.support.v4.os.CancellationSignal, android.support.v4.hardware.fingerprint.FingerprintManagerCompat.AuthenticationCallback, android.os.Handler)"> authenticate(CryptoObject, int, CancellationSignal, AuthenticationCallback, Handler) </a> </code></pre> must provide an implementation of this for listening to fingerprint events.</p>\n<pre><code>public static abstract class FingerprintManagerCompat.AuthenticationCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/hardware/fingerprint/FingerprintManagerCompat.AuthenticationCallback.html
FingerprintManagerCompat.AuthenticationResult	A										<section class="prog__container"><p> Container for callback data from <pre><code> <a href="https://developer.android.com/reference/android/support/v4/hardware/fingerprint/FingerprintManagerCompat.html#authenticate(android.support.v4.hardware.fingerprint.FingerprintManagerCompat.CryptoObject, int, android.support.v4.os.CancellationSignal, android.support.v4.hardware.fingerprint.FingerprintManagerCompat.AuthenticationCallback, android.os.Handler)"> authenticate(CryptoObject, int, CancellationSignal, AuthenticationCallback, Handler) </a> </code></pre> .</p>\n<pre><code>public static final class FingerprintManagerCompat.AuthenticationResult\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/hardware/fingerprint/FingerprintManagerCompat.AuthenticationResult.html
FingerprintManagerCompat.CryptoObject	A										<section class="prog__container"><p> A wrapper class for the crypto objects supported by FingerprintManager. Currently the framework supports <pre><code> <a href="https://developer.android.com/reference/java/security/Signature.html"> Signature </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/javax/crypto/Cipher.html"> Cipher </a> </code></pre> objects.</p>\n<pre><code>public static class FingerprintManagerCompat.CryptoObject\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/hardware/fingerprint/FingerprintManagerCompat.CryptoObject.html
FingerprintManagerCompat	A										<section class="prog__container"><p> A class that coordinates access to the fingerprint hardware. <p> On platforms before <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#M"> M </a> </code></pre> , this class behaves as there would be no fingerprint hardware available. </p>\n<pre><code>public final class FingerprintManagerCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/hardware/fingerprint/FingerprintManagerCompat.html
android.support.v4.hardware.fingerprint	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/hardware/fingerprint/package-summary.html
MediaBrowserCompat.ConnectionCallback	A										<section class="prog__container"><p> Callbacks for connection related events.</p>\n<pre><code>public static class MediaBrowserCompat.ConnectionCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaBrowserCompat.ConnectionCallback.html
MediaBrowserCompat	A										<section class="prog__container"><p> Browses media content offered by a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/MediaBrowserServiceCompat.html"> MediaBrowserServiceCompat </a> </code></pre> . <p> This object is not thread-safe. All calls should happen on the thread on which the browser was constructed. </p>\n<pre><code>public final class MediaBrowserCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaBrowserCompat.html
MediaBrowserCompat.ItemCallback	A										<section class="prog__container"><p> Callback for receiving the result of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/MediaBrowserCompat.html#getItem(java.lang.String, android.support.v4.media.MediaBrowserCompat.ItemCallback)"> getItem(String, MediaBrowserCompat.ItemCallback) </a> </code></pre> .</p>\n<pre><code>public static abstract class MediaBrowserCompat.ItemCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaBrowserCompat.ItemCallback.html
MediaBrowserCompat.MediaItem	A										<section class="prog__container"><p> A class with information on a single media item for use in browsing media.</p>\n<pre><code>public static class MediaBrowserCompat.MediaItem\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaBrowserCompat.MediaItem.html
MediaBrowserCompat.SubscriptionCallback	A										<section class="prog__container"><p> Callbacks for subscription related events.</p>\n<pre><code>public static abstract class MediaBrowserCompat.SubscriptionCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaBrowserCompat.SubscriptionCallback.html
MediaBrowserServiceCompat.BrowserRoot	A										<section class="prog__container"><p> Contains information that the browser service needs to send to the client when first connected.</p>\n<pre><code>public static final class MediaBrowserServiceCompat.BrowserRoot\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaBrowserServiceCompat.BrowserRoot.html
MediaBrowserServiceCompat	A										<section class="prog__container"><p> Base class for media browse services. <p> Media browse services enable applications to browse media content provided by an application and ask the application to start playing it. They may also be used to control content that is already playing by way of a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html"> MediaSessionCompat </a> </code></pre> . </p>\n<pre><code>public abstract class MediaBrowserServiceCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaBrowserServiceCompat.html
MediaBrowserServiceCompat.Result	A										<section class="prog__container"><p> Completion handler for asynchronous callback methods in <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/MediaBrowserServiceCompat.html"> MediaBrowserServiceCompat </a> </code></pre> . <p> Each of the methods that takes one of these to send the result must call <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/MediaBrowserServiceCompat.Result.html#sendResult(T)"> sendResult(T) </a> </code></pre> to respond to the caller with the given results. If those functions return without calling <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/MediaBrowserServiceCompat.Result.html#sendResult(T)"> sendResult(T) </a> </code></pre> , they must instead call <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/MediaBrowserServiceCompat.Result.html#detach()"> detach() </a> </code></pre> before returning, and then may call <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/MediaBrowserServiceCompat.Result.html#sendResult(T)"> sendResult(T) </a> </code></pre> when they are done. If more than one of those methods is called, an exception will be thrown. </p>\n<pre><code>public static class MediaBrowserServiceCompat.Result\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaBrowserServiceCompat.Result.html
MediaDescriptionCompat.Builder	A										<section class="prog__container"><p> Builder for <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/MediaDescriptionCompat.html"> MediaDescriptionCompat </a> </code></pre> objects.</p>\n<pre><code>public static final class MediaDescriptionCompat.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaDescriptionCompat.Builder.html
MediaDescriptionCompat	A										<section class="prog__container"><p> A simple set of metadata for a media item suitable for display. This can be created using the Builder or retrieved from existing metadata using <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/MediaMetadataCompat.html#getDescription()"> getDescription() </a> </code></pre> .</p>\n<pre><code>public final class MediaDescriptionCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaDescriptionCompat.html
MediaMetadataCompat.Builder	A										<section class="prog__container"><p> Use to build MediaMetadata objects. The system defined metadata keys must use the appropriate data type.</p>\n<pre><code>public static final class MediaMetadataCompat.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaMetadataCompat.Builder.html
MediaMetadataCompat	A										<section class="prog__container"><p> Contains metadata about an item, such as the title, artist, etc.</p>\n<pre><code>public final class MediaMetadataCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/MediaMetadataCompat.html
android.support.v4.media	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/media/package-summary.html
RatingCompat	A										<section class="prog__container"><p> A class to encapsulate rating information used as content metadata. A rating is defined by its rating style (see <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/RatingCompat.html#RATING_HEART"> RATING_HEART </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/RatingCompat.html#RATING_THUMB_UP_DOWN"> RATING_THUMB_UP_DOWN </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/RatingCompat.html#RATING_3_STARS"> RATING_3_STARS </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/RatingCompat.html#RATING_4_STARS"> RATING_4_STARS </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/RatingCompat.html#RATING_5_STARS"> RATING_5_STARS </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/RatingCompat.html#RATING_PERCENTAGE"> RATING_PERCENTAGE </a> </code></pre> ) and the actual rating value (which may be defined as "unrated"), both of which are defined when the rating instance is constructed through one of the factory methods.</p>\n<pre><code>public final class RatingCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/RatingCompat.html
TransportController	A										<section class="prog__container"><p> Base interface to controlling a media transport. This is the interface for implementing things like on-screen controls: it allows them to request changes in playback, retrieve the current playback state, and monitor for changes to the playback state.</p>\n<pre><code>public abstract class TransportController\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/TransportController.html
TransportMediator	A										<section class="prog__container"><p> Helper for implementing a media transport control (with play, pause, skip, and other media actions). Takes care of both key events and advanced features like <pre><code> <a href="https://developer.android.com/reference/android/media/RemoteControlClient.html"> RemoteControlClient </a> </code></pre> . This class is intended to serve as an intermediary between transport controls (whether they be on-screen controls, hardware buttons, remote controls) and the actual player. The player is represented by a single <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/TransportPerformer.html"> TransportPerformer </a> </code></pre> that must be supplied to this class. On-screen controls that want to control and show the state of the player should do this through calls to the <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/TransportController.html"> TransportController </a> </code></pre> interface. <p> Here is a simple but fairly complete sample of a video player that is built around this class. Note that the MediaController class used here is not the one included in the standard Android framework, but a custom implementation. Real applications often implement their own transport controls, or you can copy the implementation here out of Support4Demos. </p>\n<pre><code>public class TransportMediator\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/TransportMediator.html
TransportPerformer	A										<section class="prog__container"><p> Implemented by the playback side of the media system, to respond to requests to perform actions and to retrieve its current state. These requests may either come from key events dispatched directly to your UI, or events sent over a media button event receiver that this class keeps active while your window is in focus.</p>\n<pre><code>public abstract class TransportPerformer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/TransportPerformer.html
TransportStateListener	A										<section class="prog__container"><p> A listener for playback changes that can be registered with <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/TransportController.html"> TransportController </a> </code></pre> .</p>\n<pre><code>public class TransportStateListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/TransportStateListener.html
VolumeProviderCompat.Callback	A										<section class="prog__container"><p> Listens for changes to the volume.</p>\n<pre><code>public static abstract class VolumeProviderCompat.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/VolumeProviderCompat.Callback.html
VolumeProviderCompat	A										<section class="prog__container"><p> Handles requests to adjust or set the volume on a session. This is also used to push volume updates back to the session after a request has been handled. You can set a volume provider on a session by calling <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html#setPlaybackToRemote(android.support.v4.media.VolumeProviderCompat)"> setPlaybackToRemote(VolumeProviderCompat) </a> </code></pre> .</p>\n<pre><code>public abstract class VolumeProviderCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/VolumeProviderCompat.html
MediaButtonReceiver	A										<section class="prog__container"><p> A media button receiver receives and helps translate hardware media playback buttons, such as those found on wired and wireless headsets, into the appropriate callbacks in your app. <p> </p>\n<pre><code>public class MediaButtonReceiver\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaButtonReceiver.html
MediaControllerCompat.Callback	A										<section class="prog__container"><p> Callback for receiving updates on from the session. A Callback can be registered using <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/session/MediaControllerCompat.html#registerCallback(android.support.v4.media.session.MediaControllerCompat.Callback)"> registerCallback(MediaControllerCompat.Callback) </a> </code></pre></p>\n<pre><code>public static abstract class MediaControllerCompat.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaControllerCompat.Callback.html
MediaControllerCompat	A										<section class="prog__container"><p> Allows an app to interact with an ongoing media session. Media buttons and other commands can be sent to the session. A callback may be registered to receive updates from the session, such as metadata and play state changes. <p> A MediaController can be created if you have a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.Token.html"> MediaSessionCompat.Token </a> </code></pre> from the session owner. <p> MediaController objects are thread-safe. <p> This is a helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSession.html"> MediaSession </a> </code></pre> introduced after API level 4 in a backwards compatible fashion. </p>\n<pre><code>public final class MediaControllerCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaControllerCompat.html
MediaControllerCompat.PlaybackInfo	A										<section class="prog__container"><p> Holds information about the way volume is handled for this session.</p>\n<pre><code>public static final class MediaControllerCompat.PlaybackInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaControllerCompat.PlaybackInfo.html
MediaControllerCompat.TransportControls	A										<section class="prog__container"><p> Interface for controlling media playback on a session. This allows an app to send media transport commands to the session.</p>\n<pre><code>public static abstract class MediaControllerCompat.TransportControls\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaControllerCompat.TransportControls.html
MediaSessionCompat.Callback	A										<section class="prog__container"><p> Receives transport controls, media buttons, and commands from controllers and the system. The callback may be set using <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html#setCallback(android.support.v4.media.session.MediaSessionCompat.Callback)"> setCallback(MediaSessionCompat.Callback) </a> </code></pre> .</p>\n<pre><code>public static abstract class MediaSessionCompat.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.Callback.html
MediaSessionCompat	A										<section class="prog__container"><p> Allows interaction with media controllers, volume keys, media buttons, and transport controls. <p> A MediaSession should be created when an app wants to publish media playback information or handle media keys. In general an app only needs one session for all playback, though multiple sessions can be created to provide finer grain controls of media. <p> Once a session is created the owner of the session may pass its <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html#getSessionToken()"> session token </a> </code></pre> to other processes to allow them to create a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/session/MediaControllerCompat.html"> MediaControllerCompat </a> </code></pre> to interact with the session. <p> To receive commands, media keys, and other events a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.Callback.html"> MediaSessionCompat.Callback </a> </code></pre> must be set with <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html#setCallback(android.support.v4.media.session.MediaSessionCompat.Callback)"> setCallback(Callback) </a> </code></pre> . <p> When an app is finished performing playback it must call <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html#release()"> release() </a> </code></pre> to clean up the session and notify any controllers. <p> MediaSessionCompat objects are not thread safe and all calls should be made from the same thread. <p> This is a helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSession.html"> MediaSession </a> </code></pre> introduced after API level 4 in a backwards compatible fashion. </p>\n<pre><code>public class MediaSessionCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html
MediaSessionCompat.OnActiveChangeListener	A										<section class="prog__container"><p></p>\n<pre><code>public static interface MediaSessionCompat.OnActiveChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.OnActiveChangeListener.html
MediaSessionCompat.QueueItem	A										<section class="prog__container"><p> A single item that is part of the play queue. It contains a description of the item and its id in the queue.</p>\n<pre><code>public static final class MediaSessionCompat.QueueItem\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.QueueItem.html
MediaSessionCompat.Token	A										<section class="prog__container"><p> Represents an ongoing session. This may be passed to apps by the session owner to allow them to create a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/session/MediaControllerCompat.html"> MediaControllerCompat </a> </code></pre> to communicate with the session.</p>\n<pre><code>public static final class MediaSessionCompat.Token\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.Token.html
android.support.v4.media.session	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/media/session/package-summary.html
ParcelableVolumeInfo	A										<section class="prog__container"><p> Convenience class for passing information about the audio configuration of a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html"> MediaSessionCompat </a> </code></pre> .</p>\n<pre><code>public class ParcelableVolumeInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/ParcelableVolumeInfo.html
PlaybackStateCompat.Builder	A										<section class="prog__container"><p> Builder for <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html"> PlaybackStateCompat </a> </code></pre> objects.</p>\n<pre><code>public static final class PlaybackStateCompat.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.Builder.html
PlaybackStateCompat.CustomAction.Builder	A										<section class="prog__container"><p> Builder for <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.CustomAction.html"> PlaybackStateCompat.CustomAction </a> </code></pre> objects.</p>\n<pre><code>public static final class PlaybackStateCompat.CustomAction.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.CustomAction.Builder.html
PlaybackStateCompat.CustomAction	A										<section class="prog__container"><p> <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.CustomAction.html"> CustomActions </a> </code></pre> can be used to extend the capabilities of the standard transport controls by exposing app specific actions to <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/session/MediaControllerCompat.html"> Controllers </a> </code></pre> .</p>\n<pre><code>public static final class PlaybackStateCompat.CustomAction\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.CustomAction.html
PlaybackStateCompat	A										<section class="prog__container"><p> Playback state for a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html"> MediaSessionCompat </a> </code></pre> . This includes a state like <pre><code> <a href="https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html#STATE_PLAYING"> STATE_PLAYING </a> </code></pre> , the current playback position, and the current control capabilities.</p>\n<pre><code>public final class PlaybackStateCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html
ConnectivityManagerCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/net/ConnectivityManager.html"> ConnectivityManager </a> </code></pre> introduced after API level 16 in a backwards compatible fashion.</p>\n<pre><code>public final class ConnectivityManagerCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/net/ConnectivityManagerCompat.html
android.support.v4.net	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/net/package-summary.html
TrafficStatsCompat	A										<section class="prog__container"><p> Helper for accessing features in TrafficStats introduced after API level 14 in a backwards compatible fashion.</p>\n<pre><code>public final class TrafficStatsCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/net/TrafficStatsCompat.html
AsyncTaskCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/os/AsyncTask.html"> AsyncTask </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class AsyncTaskCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/os/AsyncTaskCompat.html
BuildCompat	A										<section class="prog__container"><p> BuildCompat contains additional platform version checking methods for testing compatibility with new features.</p>\n<pre><code>public class BuildCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/os/BuildCompat.html
CancellationSignal	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> <a href="https://developer.android.com/reference/android/os/CancellationSignal.html"> CancellationSignal </a> </code></pre> . Used to write apps that run on platforms prior to Android 4.1. See the framework SDK documentation for a class overview.</p>\n<pre><code>public final class CancellationSignal\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/os/CancellationSignal.html
CancellationSignal.OnCancelListener	A										<section class="prog__container"><p> Listens for cancellation.</p>\n<pre><code>public static interface CancellationSignal.OnCancelListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/os/CancellationSignal.OnCancelListener.html
EnvironmentCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/os/Environment.html"> Environment </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class EnvironmentCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/os/EnvironmentCompat.html
OperationCanceledException	A										<section class="prog__container"><p> An exception type that is thrown when an operation in progress is canceled.</p>\n<pre><code>public class OperationCanceledException\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/os/OperationCanceledException.html
android.support.v4.os	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/os/package-summary.html
ParcelableCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html"> Parcelable </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class ParcelableCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/os/ParcelableCompat.html
ParcelableCompatCreatorCallbacks	A										<section class="prog__container"><p> Callbacks a <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html"> Parcelable </a> </code></pre> creator should implement.</p>\n<pre><code>public interface ParcelableCompatCreatorCallbacks\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/os/ParcelableCompatCreatorCallbacks.html
TraceCompat	A										<section class="prog__container"><p> Writes trace events to the system trace buffer. These trace events can be collected and visualized using the Systrace tool. <p> This tracing mechanism is independent of the method tracing mechanism offered by <pre><code> <a href="https://developer.android.com/reference/android/os/Debug.html#startMethodTracing()"> startMethodTracing() </a> </code></pre> . In particular, it enables tracing of events that occur across multiple processes. <p> For information about using the Systrace tool, read <a href="https://developer.android.com/tools/debugging/systrace.html"> Analyzing Display and Performance with Systrace </a> . </p>\n<pre><code>public final class TraceCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/os/TraceCompat.html
UserManagerCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/os/UserManager.html"> UserManager </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public class UserManagerCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/os/UserManagerCompat.html
android.support.v4.print	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/print/package-summary.html
PrintHelper	A										<section class="prog__container"><p> Helper for printing bitmaps.</p>\n<pre><code>public final class PrintHelper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/print/PrintHelper.html
PrintHelper.OnPrintFinishCallback	A										<section class="prog__container"><p> Callback for observing when a print operation is completed. When print is finished either the system acquired the document to print or printing was cancelled.</p>\n<pre><code>public static interface PrintHelper.OnPrintFinishCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/print/PrintHelper.OnPrintFinishCallback.html
DocumentFile	A										<section class="prog__container"><p> Representation of a document backed by either a <pre><code> <a href="https://developer.android.com/reference/android/provider/DocumentsProvider.html"> DocumentsProvider </a> </code></pre> or a raw file on disk. This is a utility class designed to emulate the traditional <pre><code> <a href="https://developer.android.com/reference/java/io/File.html"> File </a> </code></pre> interface. It offers a simplified view of a tree of documents, but it has substantial overhead. For optimal performance and a richer feature set, use the <pre><code> <a href="https://developer.android.com/reference/android/provider/DocumentsContract.html"> DocumentsContract </a> </code></pre> methods and constants directly. <p> There are several differences between documents and traditional files: <ul> <li> Documents express their display name and MIME type as separate fields, instead of relying on file extensions. Some documents providers may still choose to append extensions to their display names, but that's an implementation detail. <li> A single document may appear as the child of multiple directories, so it doesn't inherently know who its parent is. That is, documents don't have a strong notion of path. You can easily traverse a tree of documents from parent to child, but not from child to parent. <li> Each document has a unique identifier within that provider. This identifier is an <em> opaque </em> implementation detail of the provider, and as such it must not be parsed. </li> </li> </li> </ul> <p> Before using this class, first consider if you really need access to an entire subtree of documents. The principle of least privilege dictates that you should only ask for access to documents you really need. If you only need the user to pick a single file, use <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT"> ACTION_OPEN_DOCUMENT </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_GET_CONTENT"> ACTION_GET_CONTENT </a> </code></pre> . If you want to let the user pick multiple files, add <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#EXTRA_ALLOW_MULTIPLE"> EXTRA_ALLOW_MULTIPLE </a> </code></pre> . If you only need the user to save a single file, use <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_CREATE_DOCUMENT"> ACTION_CREATE_DOCUMENT </a> </code></pre> . If you use these APIs, you can pass the resulting <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#getData()"> getData() </a> </code></pre> into <pre><code> <a href="https://developer.android.com/reference/android/support/v4/provider/DocumentFile.html#fromSingleUri(android.content.Context, android.net.Uri)"> fromSingleUri(Context, Uri) </a> </code></pre> to work with that document. <p> If you really do need full access to an entire subtree of documents, start by launching <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT_TREE"> ACTION_OPEN_DOCUMENT_TREE </a> </code></pre> to let the user pick a directory. Then pass the resulting <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html#getData()"> getData() </a> </code></pre> into <pre><code> <a href="https://developer.android.com/reference/android/support/v4/provider/DocumentFile.html#fromTreeUri(android.content.Context, android.net.Uri)"> fromTreeUri(Context, Uri) </a> </code></pre> to start working with the user selected tree. <p> As you navigate the tree of DocumentFile instances, you can always use <pre><code> <a href="https://developer.android.com/reference/android/support/v4/provider/DocumentFile.html#getUri()"> getUri() </a> </code></pre> to obtain the Uri representing the underlying document for that object, for use with <pre><code> <a href="https://developer.android.com/reference/android/content/ContentResolver.html#openInputStream(android.net.Uri)"> openInputStream(Uri) </a> </code></pre> , etc. <p> To simplify your code on devices running <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#KITKAT"> KITKAT </a> </code></pre> or earlier, you can use <pre><code> <a href="https://developer.android.com/reference/android/support/v4/provider/DocumentFile.html#fromFile(java.io.File)"> fromFile(File) </a> </code></pre> which emulates the behavior of a <pre><code> <a href="https://developer.android.com/reference/android/provider/DocumentsProvider.html"> DocumentsProvider </a> </code></pre> . </p>\n<pre><code>public abstract class DocumentFile\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/provider/DocumentFile.html
android.support.v4.provider	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/provider/package-summary.html
BidiFormatter.Builder	A										<section class="prog__container"><p> A class for building a BidiFormatter with non-default options.</p>\n<pre><code>public static final class BidiFormatter.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/text/BidiFormatter.Builder.html
BidiFormatter	A										<section class="prog__container"><p> Utility class for formatting text for display in a potentially opposite-directionality context without garbling. The directionality of the context is set at formatter creation and the directionality of the text can be either estimated or passed in when known. Provides the following functionality: <p> 1. Bidi Wrapping When text in one language is mixed into a document in another, opposite-directionality language, e.g. when an English business name is embedded in a Hebrew web page, both the inserted string and the text surrounding it may be displayed incorrectly unless the inserted string is explicitly separated from the surrounding text in a "wrapper" that: <p> - Declares its directionality so that the string is displayed correctly. This can be done in Unicode bidi formatting codes by <pre><code> <a href="https://developer.android.com/reference/android/support/v4/text/BidiFormatter.html#unicodeWrap(java.lang.CharSequence)"> unicodeWrap(CharSequence) </a> </code></pre> and similar methods. <p> - Isolates the string's directionality, so it does not unduly affect the surrounding content. Currently, this can only be done using invisible Unicode characters of the same direction as the context (LRM or RLM) in addition to the directionality declaration above, thus "resetting" the directionality to that of the context. The "reset" may need to be done at both ends of the string. Without "reset" after the string, the string will "stick" to a number or logically separate opposite-direction text that happens to follow it in-line (even if separated by neutral content like spaces and punctuation). Without "reset" before the string, the same can happen there, but only with more opposite-direction text, not a number. One approach is to "reset" the direction only after each string, on the theory that if the preceding opposite- direction text is itself bidi-wrapped, the "reset" after it will prevent the sticking. (Doing the "reset" only before each string definitely does not work because we do not want to require bidi-wrapping numbers, and a bidi-wrapped opposite-direction string could be followed by a number.) Still, the safest policy is to do the "reset" on both ends of each string, since RTL message translations often contain untranslated Latin-script brand names and technical terms, and one of these can be followed by a bidi-wrapped inserted value. On the other hand, when one has such a message, it is best to do the "reset" manually in the message translation itself, since the message's opposite-direction text could be followed by an inserted number, which we would not bidi-wrap anyway. Thus, "reset" only after the string is the current default. In an alternative to "reset", recent additions to the HTML, CSS, and Unicode standards allow the isolation to be part of the directionality declaration. This form of isolation is better than "reset" because it takes less space, does not require knowing the context directionality, has a gentler effect than "reset", and protects both ends of the string. However, we do not yet allow using it because required platforms do not yet support it. <p> Providing these wrapping services is the basic purpose of the bidi formatter. <p> 2. Directionality estimation How does one know whether a string about to be inserted into surrounding text has the same directionality? Well, in many cases, one knows that this must be the case when writing the code doing the insertion, e.g. when a localized message is inserted into a localized page. In such cases there is no need to involve the bidi formatter at all. In some other cases, it need not be the same as the context, but is either constant (e.g. urls are always LTR) or otherwise known. In the remaining cases, e.g. when the string is user-entered or comes from a database, the language of the string (and thus its directionality) is not known a priori, and must be estimated at run-time. The bidi formatter can do this automatically using the default first-strong estimation algorithm. It can also be configured to use a custom directionality estimation object. </p>\n<pre><code>public final class BidiFormatter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/text/BidiFormatter.html
ICUCompat	A										<section class="prog__container"><p> Returns the script for a given Locale.</p>\n<pre><code>public final class ICUCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/text/ICUCompat.html
android.support.v4.text	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/text/package-summary.html
TextDirectionHeuristicCompat	A										<section class="prog__container"><p> Interface for objects that use a heuristic for guessing at the paragraph direction by examining text.</p>\n<pre><code>public interface TextDirectionHeuristicCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/text/TextDirectionHeuristicCompat.html
TextDirectionHeuristicsCompat	A										<section class="prog__container"><p> Some objects that implement TextDirectionHeuristic.</p>\n<pre><code>public final class TextDirectionHeuristicsCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/text/TextDirectionHeuristicsCompat.html
TextUtilsCompat	A										<section class="prog__container"><p></p>\n<pre><code>public final class TextUtilsCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/text/TextUtilsCompat.html
LinkifyCompat	A										<section class="prog__container"><p> LinkifyCompat brings in <pre><code> Linkify </code></pre> improvements for URLs and email addresses to older API levels.</p>\n<pre><code>public final class LinkifyCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/text/util/LinkifyCompat.html
LinkifyCompat.LinkifyMask	A										<section class="prog__container"><p> Returns the annotation type of this annotation.</p>\n<pre><code>public static abstract @interface LinkifyCompat.LinkifyMask\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/text/util/LinkifyCompat.LinkifyMask.html
android.support.v4.text.util	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/text/util/package-summary.html
ArrayMap	A										<section class="prog__container"><p> ArrayMap is a generic key-&gt;value mapping data structure that is designed to be more memory efficient than a traditional <pre><code> <a href="https://developer.android.com/reference/java/util/HashMap.html"> HashMap </a> </code></pre> , this implementation is a version of the platform's <pre><code> <a href="https://developer.android.com/reference/android/util/ArrayMap.html"> ArrayMap </a> </code></pre> that can be used on older versions of the platform. It keeps its mappings in an array data structure -- an integer array of hash codes for each item, and an Object array of the key/value pairs. This allows it to avoid having to create an extra object for every entry put in to the map, and it also tries to control the growth of the size of these arrays more aggressively (since growing them only requires copying the entries in the array, not rebuilding a hash map). <p> If you don't need the standard Java container APIs provided here (iterators etc), consider using <pre><code> <a href="https://developer.android.com/reference/android/support/v4/util/SimpleArrayMap.html"> SimpleArrayMap </a> </code></pre> instead. </p>\n<pre><code>public class ArrayMap\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/util/ArrayMap.html
ArraySet	A										<section class="prog__container"><p> ArraySet is a generic set data structure that is designed to be more memory efficient than a traditional <pre><code> <a href="https://developer.android.com/reference/java/util/HashSet.html"> HashSet </a> </code></pre> . The design is very similar to <pre><code> <a href="https://developer.android.com/reference/android/support/v4/util/ArrayMap.html"> ArrayMap </a> </code></pre> , with all of the caveats described there. This implementation is separate from ArrayMap, however, so the Object array contains only one item for each entry in the set (instead of a pair for a mapping). <p> Note that this implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashSet, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. </p>\n<pre><code>public final class ArraySet\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/util/ArraySet.html
AtomicFile	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> <a href="https://developer.android.com/reference/android/util/AtomicFile.html"> AtomicFile </a> </code></pre> , a helper class for performing atomic operations on a file by creating a backup file until a write has successfully completed. <p> Atomic file guarantees file integrity by ensuring that a file has been completely written and sync'd to disk before removing its backup. As long as the backup file exists, the original file is considered to be invalid (left over from a previous attempt to write the file). </p>\n<pre><code>public class AtomicFile\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/util/AtomicFile.html
CircularArray	A										<section class="prog__container"><p> CircularArray is a generic circular array data structure that provides O(1) random read, O(1) prepend and O(1) append. The CircularArray automatically grows its capacity when number of added items is over its capacity.</p>\n<pre><code>public final class CircularArray\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/util/CircularArray.html
CircularIntArray	A										<section class="prog__container"><p> CircularIntArray is a circular integer array data structure that provides O(1) random read, O(1) prepend and O(1) append. The CircularIntArray automatically grows its capacity when number of added integers is over its capacity.</p>\n<pre><code>public final class CircularIntArray\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/util/CircularIntArray.html
LongSparseArray	A										<section class="prog__container"><p> SparseArray mapping longs to Objects, a version of the platform's <pre><code> <a href="https://developer.android.com/reference/android/util/LongSparseArray.html"> LongSparseArray </a> </code></pre> that can be used on older versions of the platform. Unlike a normal array of Objects, there can be gaps in the indices. It is intended to be more memory efficient than using a HashMap to map Longs to Objects, both because it avoids auto-boxing keys and its data structure doesn't rely on an extra entry object for each mapping. <p> Note that this container keeps its mappings in an array data structure, using a binary search to find keys. The implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashMap, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. </p>\n<pre><code>public class LongSparseArray\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/util/LongSparseArray.html
LruCache	A										<section class="prog__container"><p> Static library version of <pre><code> <a href="https://developer.android.com/reference/android/util/LruCache.html"> LruCache </a> </code></pre> . Used to write apps that run on API levels prior to 12. When running on API level 12 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p>\n<pre><code>public class LruCache\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/util/LruCache.html
android.support.v4.util	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/util/package-summary.html
Pair	A										<section class="prog__container"><p> Container to ease passing around a tuple of two objects. This object provides a sensible implementation of equals(), returning true if equals() is true on each of the contained objects.</p>\n<pre><code>public class Pair\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/util/Pair.html
PatternsCompat	A										<section class="prog__container"><p> Commonly used regular expression patterns.</p>\n<pre><code>public final class PatternsCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/util/PatternsCompat.html
Pools	A										<section class="prog__container"><p> Helper class for creating pools of objects. An example use looks like this: <pre> public class MyPooledClass { private static final SynchronizedPool<mypooledclass> sPool = new SynchronizedPool<mypooledclass>(10); public static MyPooledClass obtain() { MyPooledClass instance = sPool.acquire(); return (instance != null) ? instance : new MyPooledClass(); } public void recycle() { // Clear state if needed. sPool.release(this); } . . . } </mypooledclass></mypooledclass></pre></p>\n<pre><code>public final class Pools\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/util/Pools.html
Pools.Pool	A										<section class="prog__container"><p> Interface for managing a pool of objects.</p>\n<pre><code>public static interface Pools.Pool\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/util/Pools.Pool.html
Pools.SimplePool	A										<section class="prog__container"><p> Simple (non-synchronized) pool of objects.</p>\n<pre><code>public static class Pools.SimplePool\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/util/Pools.SimplePool.html
Pools.SynchronizedPool	A										<section class="prog__container"><p> Synchronized) pool of objects.</p>\n<pre><code>public static class Pools.SynchronizedPool\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/util/Pools.SynchronizedPool.html
SimpleArrayMap	A										<section class="prog__container"><p> Base implementation of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/util/ArrayMap.html"> ArrayMap </a> </code></pre> that doesn't include any standard Java container API interoperability. These features are generally heavier-weight ways to interact with the container, so discouraged, but they can be useful to make it easier to use as a drop-in replacement for HashMap. If you don't need them, this class can be preferrable since it doesn't bring in any of the implementation of those APIs, allowing that code to be stripped by ProGuard.</p>\n<pre><code>public class SimpleArrayMap\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/util/SimpleArrayMap.html
SparseArrayCompat	A										<section class="prog__container"><p> A copy of the current platform (currently <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#KITKAT"> KITKAT </a> </code></pre> version of <pre><code> <a href="https://developer.android.com/reference/android/util/SparseArray.html"> SparseArray </a> </code></pre> ; provides a removeAt() method and other things.</p>\n<pre><code>public class SparseArrayCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/util/SparseArrayCompat.html
AbsSavedState	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html"> Parcelable </a> </code></pre> implementation that should be used by inheritance hierarchies to ensure the state of all classes along the chain is saved.</p>\n<pre><code>public abstract class AbsSavedState\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/AbsSavedState.html
AccessibilityDelegateCompat	A										<section class="prog__container"><p> Helper for accessing <pre><code> <a href="https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html"> View.AccessibilityDelegate </a> </code></pre> introduced after API level 4 in a backwards compatible fashion. <p> <strong> Note: </strong> On platform versions prior to <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#M"> API 23 </a> </code></pre> , delegate methods on views in the <pre><code> android.widget.* </code></pre> package are called <i> before </i> host methods. This prevents certain properties such as class name from being modified by overriding <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html#onInitializeAccessibilityNodeInfo(android.view.View, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)"> onInitializeAccessibilityNodeInfo(View, AccessibilityNodeInfoCompat) </a> </code></pre> , as any changes will be overwritten by the host class. <p> Starting in <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#M"> API 23 </a> </code></pre> , delegate methods are called <i> after </i> host methods, which all properties to be modified without being overwritten by the host class. </p>\n<pre><code>public class AccessibilityDelegateCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/AccessibilityDelegateCompat.html
ActionProvider	A										<section class="prog__container"><p> This class is a mediator for accomplishing a given task, for example sharing a file. It is responsible for creating a view that performs an action that accomplishes the task. This class also implements other functions such a performing a default action. <p class="note"> <strong> Note: </strong> This class is included in the <a href="https://developer.android.com/tools/extras/support-library.html"> support library </a> for compatibility with API level 4 and higher. If you're developing your app for API level 14 and higher <em> only </em> , you should instead use the framework <pre><code> <a href="https://developer.android.com/reference/android/view/ActionProvider.html"> ActionProvider </a> </code></pre> class. </p>\n<pre><code>public abstract class ActionProvider\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ActionProvider.html
ActionProvider.VisibilityListener	A										<section class="prog__container"><p> Listens to changes in visibility as reported by <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ActionProvider.html#refreshVisibility()"> refreshVisibility() </a> </code></pre> .</p>\n<pre><code>public static interface ActionProvider.VisibilityListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ActionProvider.VisibilityListener.html
AsyncLayoutInflater	A										<section class="prog__container"><p> <p> Helper class for inflating layouts asynchronously. To use, construct an instance of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/AsyncLayoutInflater.html"> AsyncLayoutInflater </a> </code></pre> on the UI thread and call <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/AsyncLayoutInflater.html#inflate(int, android.view.ViewGroup, android.support.v4.view.AsyncLayoutInflater.OnInflateFinishedListener)"> inflate(int, ViewGroup, OnInflateFinishedListener) </a> </code></pre> . The <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/AsyncLayoutInflater.OnInflateFinishedListener.html"> AsyncLayoutInflater.OnInflateFinishedListener </a> </code></pre> will be invoked on the UI thread when the inflate request has completed. <p> This is intended for parts of the UI that are created lazily or in response to user interactions. This allows the UI thread to continue to be responsive &amp; animate while the relatively heavy inflate is being performed. <p> For a layout to be inflated asynchronously it needs to have a parent whose <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.html#generateLayoutParams(android.util.AttributeSet)"> generateLayoutParams(AttributeSet) </a> </code></pre> is thread-safe and all the Views being constructed as part of inflation must not create any <pre><code> <a href="https://developer.android.com/reference/android/os/Handler.html"> Handler </a> </code></pre> s or otherwise call <pre><code> <a href="https://developer.android.com/reference/android/os/Looper.html#myLooper()"> myLooper() </a> </code></pre> . If the layout that is trying to be inflated cannot be constructed asynchronously for whatever reason, <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/AsyncLayoutInflater.html"> AsyncLayoutInflater </a> </code></pre> will automatically fall back to inflating on the UI thread. <p> NOTE that the inflated View hierarchy is NOT added to the parent. It is equivalent to calling <pre><code> <a href="https://developer.android.com/reference/android/view/LayoutInflater.html#inflate(int, android.view.ViewGroup, boolean)"> inflate(int, ViewGroup, boolean) </a> </code></pre> with attachToRoot set to false. Callers will likely want to call <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.html#addView(android.view.View)"> addView(View) </a> </code></pre> in the <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/AsyncLayoutInflater.OnInflateFinishedListener.html"> AsyncLayoutInflater.OnInflateFinishedListener </a> </code></pre> callback at a minimum. <p> This inflater does not support setting a <pre><code> <a href="https://developer.android.com/reference/android/view/LayoutInflater.Factory.html"> LayoutInflater.Factory </a> </code></pre> nor <pre><code> <a href="https://developer.android.com/reference/android/view/LayoutInflater.Factory2.html"> LayoutInflater.Factory2 </a> </code></pre> . Similarly it does not support inflating layouts that contain fragments. </p>\n<pre><code>public final class AsyncLayoutInflater\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/AsyncLayoutInflater.html
AsyncLayoutInflater.OnInflateFinishedListener	A										<section class="prog__container"><p></p>\n<pre><code>public static interface AsyncLayoutInflater.OnInflateFinishedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/AsyncLayoutInflater.OnInflateFinishedListener.html
GestureDetectorCompat	A										<section class="prog__container"><p> Detects various gestures and events using the supplied <pre><code> <a href="https://developer.android.com/reference/android/view/MotionEvent.html"> MotionEvent </a> </code></pre> s. The <pre><code> <a href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html"> GestureDetector.OnGestureListener </a> </code></pre> callback will notify users when a particular motion event has occurred. This class should only be used with <pre><code> <a href="https://developer.android.com/reference/android/view/MotionEvent.html"> MotionEvent </a> </code></pre> s reported via touch (don't use for trackball events). <p> This compatibility implementation of the framework's GestureDetector guarantees the newer focal point scrolling behavior from Jellybean MR1 on all platform versions. </p>\n<pre><code>public final class GestureDetectorCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/GestureDetectorCompat.html
GravityCompat	A										<section class="prog__container"><p> Compatibility shim for accessing newer functionality from <pre><code> <a href="https://developer.android.com/reference/android/view/Gravity.html"> Gravity </a> </code></pre> .</p>\n<pre><code>public final class GravityCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/GravityCompat.html
InputDeviceCompat	A										<section class="prog__container"><p> Helper class for accessing values in <pre><code> <a href="https://developer.android.com/reference/android/view/InputDevice.html"> InputDevice </a> </code></pre> .</p>\n<pre><code>public final class InputDeviceCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/InputDeviceCompat.html
KeyEventCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/view/KeyEvent.html"> KeyEvent </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class KeyEventCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/KeyEventCompat.html
LayoutInflaterCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/view/LayoutInflater.html"> LayoutInflater </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class LayoutInflaterCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/LayoutInflaterCompat.html
LayoutInflaterFactory	A										<section class="prog__container"><p> Used with <pre><code> LayoutInflaterCompat.setFactory() </code></pre> . Offers the same API as <pre><code> LayoutInflater.Factory2 </code></pre> .</p>\n<pre><code>public interface LayoutInflaterFactory\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/LayoutInflaterFactory.html
MarginLayoutParamsCompat	A										<section class="prog__container"><p> Helper for accessing API features in <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html"> MarginLayoutParams </a> </code></pre> added after API 4.</p>\n<pre><code>public final class MarginLayoutParamsCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/MarginLayoutParamsCompat.html
MenuCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/view/Menu.html"> Menu </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class MenuCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/MenuCompat.html
MenuItemCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/view/MenuItem.html"> MenuItem </a> </code></pre> introduced after API level 4 in a backwards compatible fashion. <p class="note"> <strong> Note: </strong> You cannot get an instance of this class. Instead, it provides <em> static </em> methods that correspond to the methods in <pre><code> <a href="https://developer.android.com/reference/android/view/MenuItem.html"> MenuItem </a> </code></pre> , but take a <pre><code> <a href="https://developer.android.com/reference/android/view/MenuItem.html"> MenuItem </a> </code></pre> object as an additional argument. </p>\n<pre><code>public final class MenuItemCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/MenuItemCompat.html
MenuItemCompat.OnActionExpandListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a menu item marked with <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/MenuItemCompat.html#SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW"> SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW </a> </code></pre> is expanded or collapsed.</p>\n<pre><code>public static interface MenuItemCompat.OnActionExpandListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/MenuItemCompat.OnActionExpandListener.html
MotionEventCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/view/MotionEvent.html"> MotionEvent </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class MotionEventCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/MotionEventCompat.html
NestedScrollingChild	A										<section class="prog__container"><p> This interface should be implemented by <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> subclasses that wish to support dispatching nested scrolling operations to a cooperating parent <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.html"> ViewGroup </a> </code></pre> . <p> Classes implementing this interface should create a final instance of a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/NestedScrollingChildHelper.html"> NestedScrollingChildHelper </a> </code></pre> as a field and delegate any View methods to the <pre><code> NestedScrollingChildHelper </code></pre> methods of the same signature. </p>\n<pre><code>public interface NestedScrollingChild\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/NestedScrollingChild.html
NestedScrollingChildHelper	A										<section class="prog__container"><p> Helper class for implementing nested scrolling child views compatible with Android platform versions earlier than Android 5.0 Lollipop (API 21). <p> <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> subclasses should instantiate a final instance of this class as a field at construction. For each <pre><code> View </code></pre> method that has a matching method signature in this class, delegate the operation to the helper instance in an overridden method implementation. This implements the standard framework policy for nested scrolling. </p>\n<pre><code>public class NestedScrollingChildHelper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/NestedScrollingChildHelper.html
NestedScrollingParent	A										<section class="prog__container"><p> This interface should be implemented by <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.html"> ViewGroup </a> </code></pre> subclasses that wish to support scrolling operations delegated by a nested child view. <p> Classes implementing this interface should create a final instance of a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/NestedScrollingParentHelper.html"> NestedScrollingParentHelper </a> </code></pre> as a field and delegate any View or ViewGroup methods to the <pre><code> NestedScrollingParentHelper </code></pre> methods of the same signature. </p>\n<pre><code>public interface NestedScrollingParent\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/NestedScrollingParent.html
NestedScrollingParentHelper	A										<section class="prog__container"><p> Helper class for implementing nested scrolling parent views compatible with Android platform versions earlier than Android 5.0 Lollipop (API 21). <p> <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.html"> ViewGroup </a> </code></pre> subclasses should instantiate a final instance of this class as a field at construction. For each <pre><code> ViewGroup </code></pre> method that has a matching method signature in this class, delegate the operation to the helper instance in an overridden method implementation. This implements the standard framework policy for nested scrolling. </p>\n<pre><code>public class NestedScrollingParentHelper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/NestedScrollingParentHelper.html
OnApplyWindowInsetsListener	A										<section class="prog__container"><p> Listener for applying window insets on a view in a custom way. <p> Apps may choose to implement this interface if they want to apply custom policy to the way that window insets are treated for a view. If an OnApplyWindowInsetsListener is set, it's <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/OnApplyWindowInsetsListener.html#onApplyWindowInsets(android.view.View, android.support.v4.view.WindowInsetsCompat)"> onApplyWindowInsets </a> </code></pre> method will be called instead of the View's own <pre><code> onApplyWindowInsets </code></pre> method. The listener may optionally call the parameter View's <pre><code> onApplyWindowInsets </code></pre> method to apply the View's normal behavior as part of its own. </p>\n<pre><code>public interface OnApplyWindowInsetsListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/OnApplyWindowInsetsListener.html
android.support.v4.view	A										<section class="prog__container">An animation listener receives notifications from an animation. </section>	https://developer.android.com/reference/android/support/v4/view/package-summary.html
PagerAdapter	A										<section class="prog__container"><p> Base class providing the adapter to populate pages inside of a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewPager.html"> ViewPager </a> </code></pre> . You will most likely want to use a more specific implementation of this, such as <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentPagerAdapter.html"> FragmentPagerAdapter </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentStatePagerAdapter.html"> FragmentStatePagerAdapter </a> </code></pre> . <p> When you implement a PagerAdapter, you must override the following methods at minimum: </p>\n<pre><code>public abstract class PagerAdapter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/PagerAdapter.html
PagerTabStrip	A										<section class="prog__container"><p> PagerTabStrip is an interactive indicator of the current, next, and previous pages of a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewPager.html"> ViewPager </a> </code></pre> . It is intended to be used as a child view of a ViewPager widget in your XML layout. Add it as a child of a ViewPager in your layout file and set its android:layout_gravity to TOP or BOTTOM to pin it to the top or bottom of the ViewPager. The title from each page is supplied by the method <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/PagerAdapter.html#getPageTitle(int)"> getPageTitle(int) </a> </code></pre> in the adapter supplied to the ViewPager. <p> For a non-interactive indicator, see <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/PagerTitleStrip.html"> PagerTitleStrip </a> </code></pre> . </p>\n<pre><code>public class PagerTabStrip\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/PagerTabStrip.html
PagerTitleStrip	A										<section class="prog__container"><p> PagerTitleStrip is a non-interactive indicator of the current, next, and previous pages of a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewPager.html"> ViewPager </a> </code></pre> . It is intended to be used as a child view of a ViewPager widget in your XML layout. Add it as a child of a ViewPager in your layout file and set its android:layout_gravity to TOP or BOTTOM to pin it to the top or bottom of the ViewPager. The title from each page is supplied by the method <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/PagerAdapter.html#getPageTitle(int)"> getPageTitle(int) </a> </code></pre> in the adapter supplied to the ViewPager. <p> For an interactive indicator, see <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/PagerTabStrip.html"> PagerTabStrip </a> </code></pre> . </p>\n<pre><code>public class PagerTitleStrip\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/PagerTitleStrip.html
PointerIconCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/view/PointerIcon.html"> PointerIcon </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class PointerIconCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/PointerIconCompat.html
ScaleGestureDetectorCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> ScaleGestureDetector </code></pre> introduced after API level 19 (KitKat) in a backwards compatible fashion.</p>\n<pre><code>public final class ScaleGestureDetectorCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ScaleGestureDetectorCompat.html
ScrollingView	A										<section class="prog__container"><p> An interface that can be implemented by Views to provide scroll related APIs.</p>\n<pre><code>public interface ScrollingView\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ScrollingView.html
TintableBackgroundView	A										<section class="prog__container"><p> Interface which allows a <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> to receive background tinting calls from <pre><code> ViewCompat </code></pre> when running on API v20 devices or lower.</p>\n<pre><code>public interface TintableBackgroundView\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/TintableBackgroundView.html
VelocityTrackerCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/view/VelocityTracker.html"> VelocityTracker </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class VelocityTrackerCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/VelocityTrackerCompat.html
ViewCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public class ViewCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewCompat.html
ViewConfigurationCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/view/ViewConfiguration.html"> ViewConfiguration </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class ViewConfigurationCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewConfigurationCompat.html
ViewGroupCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.html"> ViewGroup </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class ViewGroupCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewGroupCompat.html
ViewPager.DecorView	A										<section class="prog__container"><p> Annotation which allows marking of views to be decoration views when added to a view pager. <p> Views marked with this annotation can be added to the view pager with a layout resource. An example being <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/PagerTitleStrip.html"> PagerTitleStrip </a> </code></pre> . </p>\n<pre><code>public static abstract @interface ViewPager.DecorView\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPager.DecorView.html
ViewPager	A										<section class="prog__container"><p> Layout manager that allows the user to flip left and right through pages of data. You supply an implementation of a <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/PagerAdapter.html"> PagerAdapter </a> </code></pre> to generate the pages that the view shows. <p> ViewPager is most often used in conjunction with <pre><code> <a href="https://developer.android.com/reference/android/app/Fragment.html"> Fragment </a> </code></pre> , which is a convenient way to supply and manage the lifecycle of each page. There are standard adapters implemented for using fragments with the ViewPager, which cover the most common use cases. These are <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentPagerAdapter.html"> FragmentPagerAdapter </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/FragmentStatePagerAdapter.html"> FragmentStatePagerAdapter </a> </code></pre> ; each of these classes have simple code showing how to build a full user interface with them. <p> Views which are annotated with the <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewPager.DecorView.html"> ViewPager.DecorView </a> </code></pre> annotation are treated as part of the view pagers 'decor'. Each decor view's position can be controlled via its <pre><code> android:layout_gravity </code></pre> attribute. For example: <pre> &lt;android.support.v4.view.ViewPager android:layout_width="match_parent" android:layout_height="match_parent"&gt; &lt;android.support.v4.view.PagerTitleStrip android:layout_width="match_parent" android:layout_height="wrap_content" android:layout_gravity="top" /&gt; &lt;/android.support.v4.view.ViewPager&gt; </pre> <p> For more information about how to use ViewPager, read <a href="https://developer.android.com/training/implementing-navigation/lateral.html"> Creating Swipe Views with Tabs </a> . </p>\n<pre><code>public class ViewPager\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPager.html
ViewPager.LayoutParams	A										<section class="prog__container"><p> Layout parameters that should be supplied for views added to a ViewPager.</p>\n<pre><code>public static class ViewPager.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPager.LayoutParams.html
ViewPager.OnAdapterChangeListener	A										<section class="prog__container"><p> Callback interface for responding to adapter changes.</p>\n<pre><code>public static interface ViewPager.OnAdapterChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPager.OnAdapterChangeListener.html
ViewPager.OnPageChangeListener	A										<section class="prog__container"><p> Callback interface for responding to changing state of the selected page.</p>\n<pre><code>public static interface ViewPager.OnPageChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPager.OnPageChangeListener.html
ViewPager.PageTransformer	A										<section class="prog__container"><p> A PageTransformer is invoked whenever a visible/attached page is scrolled. This offers an opportunity for the application to apply a custom transformation to the page views using animation properties. <p> As property animation is only supported as of Android 3.0 and forward, setting a PageTransformer on a ViewPager on earlier platform versions will be ignored. </p>\n<pre><code>public static interface ViewPager.PageTransformer\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPager.PageTransformer.html
ViewPager.SavedState	A										<section class="prog__container"><p> This is the persistent state that is saved by ViewPager. Only needed if you are creating a sublass of ViewPager that must save its own state, in which case it should implement a subclass of this which contains that state.</p>\n<pre><code>public static class ViewPager.SavedState\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPager.SavedState.html
ViewPager.SimpleOnPageChangeListener	A										<section class="prog__container"><p> Simple implementation of the <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewPager.OnPageChangeListener.html"> ViewPager.OnPageChangeListener </a> </code></pre> interface with stub implementations of each method. Extend this if you do not intend to override every method of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewPager.OnPageChangeListener.html"> ViewPager.OnPageChangeListener </a> </code></pre> .</p>\n<pre><code>public static class ViewPager.SimpleOnPageChangeListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPager.SimpleOnPageChangeListener.html
ViewParentCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/view/ViewParent.html"> ViewParent </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class ViewParentCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewParentCompat.html
ViewPropertyAnimatorCompat	A										<section class="prog__container"><p> This method will cause the View's <pre><code> alpha </code></pre> property to be animated to the specified value.</p>\n<pre><code>public final class ViewPropertyAnimatorCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPropertyAnimatorCompat.html
ViewPropertyAnimatorListener	A										<section class="prog__container"><p> <p> An animation listener receives notifications from an animation. Notifications indicate animation related events, such as the end or the start of the animation. </p>\n<pre><code>public interface ViewPropertyAnimatorListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPropertyAnimatorListener.html
ViewPropertyAnimatorListenerAdapter	A										<section class="prog__container"><p> This adapter class provides empty implementations of the methods from <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewPropertyAnimatorListener.html"> ViewPropertyAnimatorListener </a> </code></pre> . Any custom listener that cares only about a subset of the methods of this listener can simply subclass this adapter class instead of implementing the interface directly.</p>\n<pre><code>public class ViewPropertyAnimatorListenerAdapter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPropertyAnimatorListenerAdapter.html
ViewPropertyAnimatorUpdateListener	A										<section class="prog__container"><p> Implementors of this interface can add themselves as update listeners to an <pre><code> ViewPropertyAnimatorCompat </code></pre> instance to receive callbacks on every animation frame, after the current frame's values have been calculated for that <pre><code> ViewPropertyAnimatorCompat </code></pre> .</p>\n<pre><code>public interface ViewPropertyAnimatorUpdateListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/ViewPropertyAnimatorUpdateListener.html
WindowCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/view/Window.html"> Window </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class WindowCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/WindowCompat.html
WindowInsetsCompat	A										<section class="prog__container"><p> Describes a set of insets for window content. <p> WindowInsetsCompats are immutable and may be expanded to include more inset types in the future. To adjust insets, use one of the supplied clone methods to obtain a new WindowInsetsCompat instance with the adjusted properties. </p>\n<pre><code>public class WindowInsetsCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/WindowInsetsCompat.html
AccessibilityEventCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html"> AccessibilityEvent </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class AccessibilityEventCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityEventCompat.html
AccessibilityManagerCompat.AccessibilityStateChangeListener	A										<section class="prog__container"><p> Listener for the accessibility state.</p>\n<pre><code>public static interface AccessibilityManagerCompat.AccessibilityStateChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityManagerCompat.AccessibilityStateChangeListener.html
AccessibilityManagerCompat.AccessibilityStateChangeListenerCompat	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityManagerCompat.AccessibilityStateChangeListener.html"> AccessibilityManagerCompat.AccessibilityStateChangeListener </a> </code></pre> instead. </p>\n<pre><code>public static abstract class AccessibilityManagerCompat.AccessibilityStateChangeListenerCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityManagerCompat.AccessibilityStateChangeListenerCompat.html
AccessibilityManagerCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html"> AccessibilityManager </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class AccessibilityManagerCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityManagerCompat.html
AccessibilityManagerCompat.TouchExplorationStateChangeListener	A										<section class="prog__container"><p> Listener for the system touch exploration state. To listen for changes to the touch exploration state on the device, implement this interface and register it with the system by calling <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityManagerCompat.html#addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager, android.support.v4.view.accessibility.AccessibilityManagerCompat.TouchExplorationStateChangeListener)"> addTouchExplorationStateChangeListener(AccessibilityManager, AccessibilityManagerCompat.TouchExplorationStateChangeListener) </a> </code></pre> .</p>\n<pre><code>public static interface AccessibilityManagerCompat.TouchExplorationStateChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityManagerCompat.TouchExplorationStateChangeListener.html
AccessibilityNodeInfoCompat.AccessibilityActionCompat	A										<section class="prog__container"><p> Action that gives accessibility focus to the node.</p>\n<pre><code>public static class AccessibilityNodeInfoCompat.AccessibilityActionCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityNodeInfoCompat.AccessibilityActionCompat.html
AccessibilityNodeInfoCompat.CollectionInfoCompat	A										<section class="prog__container"><p> Class with information if a node is a collection. <p> A collection of items has rows and columns and may be hierarchical. For example, a horizontal list is a collection with one column, as many rows as the list items, and is not hierarchical; A table is a collection with several rows, several columns, and is not hierarchical; A vertical tree is a hierarchical collection with one column and as many rows as the first level children. </p>\n<pre><code>public static class AccessibilityNodeInfoCompat.CollectionInfoCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityNodeInfoCompat.CollectionInfoCompat.html
AccessibilityNodeInfoCompat.CollectionItemInfoCompat	A										<section class="prog__container"><p> Class with information if a node is a collection item. <p> A collection item is contained in a collection, it starts at a given row and column in the collection, and spans one or more rows and columns. For example, a header of two related table columns starts at the first row and the first column, spans one row and two columns. </p>\n<pre><code>public static class AccessibilityNodeInfoCompat.CollectionItemInfoCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityNodeInfoCompat.CollectionItemInfoCompat.html
AccessibilityNodeInfoCompat	A										<section class="prog__container"><p> Helper for accessing <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html"> AccessibilityNodeInfo </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public class AccessibilityNodeInfoCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityNodeInfoCompat.html
AccessibilityNodeInfoCompat.RangeInfoCompat	A										<section class="prog__container"><p> Class with information if a node is a range.</p>\n<pre><code>public static class AccessibilityNodeInfoCompat.RangeInfoCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityNodeInfoCompat.RangeInfoCompat.html
AccessibilityNodeProviderCompat	A										<section class="prog__container"><p> Helper for accessing <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeProvider.html"> AccessibilityNodeProvider </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public class AccessibilityNodeProviderCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityNodeProviderCompat.html
AccessibilityRecordCompat	A										<section class="prog__container"><p> Helper for accessing <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityRecord.html"> AccessibilityRecord </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public class AccessibilityRecordCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityRecordCompat.html
AccessibilityWindowInfoCompat	A										<section class="prog__container"><p> Helper for accessing <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityWindowInfo.html"> AccessibilityWindowInfo </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public class AccessibilityWindowInfoCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityWindowInfoCompat.html
android.support.v4.view.accessibility	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/view/accessibility/package-summary.html
FastOutLinearInInterpolator	A										<section class="prog__container"><p> Interpolator corresponding to <pre><code> <a href="https://developer.android.com/reference/android/R.interpolator.html#fast_out_linear_in"> fast_out_linear_in </a> </code></pre> . Uses a lookup table for the Bezier curve from (0,0) to (1,1) with control points: P0 (0, 0) P1 (0.4, 0) P2 (1.0, 1.0) P3 (1.0, 1.0)</p>\n<pre><code>public class FastOutLinearInInterpolator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/animation/FastOutLinearInInterpolator.html
FastOutSlowInInterpolator	A										<section class="prog__container"><p> Interpolator corresponding to <pre><code> <a href="https://developer.android.com/reference/android/R.interpolator.html#fast_out_slow_in"> fast_out_slow_in </a> </code></pre> . Uses a lookup table for the Bezier curve from (0,0) to (1,1) with control points: P0 (0, 0) P1 (0.4, 0) P2 (0.2, 1.0) P3 (1.0, 1.0)</p>\n<pre><code>public class FastOutSlowInInterpolator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/animation/FastOutSlowInInterpolator.html
LinearOutSlowInInterpolator	A										<section class="prog__container"><p> Interpolator corresponding to <pre><code> <a href="https://developer.android.com/reference/android/R.interpolator.html#linear_out_slow_in"> linear_out_slow_in </a> </code></pre> . Uses a lookup table for the Bezier curve from (0,0) to (1,1) with control points: P0 (0, 0) P1 (0, 0) P2 (0.2, 1.0) P3 (1.0, 1.0)</p>\n<pre><code>public class LinearOutSlowInInterpolator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/animation/LinearOutSlowInInterpolator.html
android.support.v4.view.animation	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/view/animation/package-summary.html
PathInterpolatorCompat	A										<section class="prog__container"><p> Helper for creating path-based <pre><code> <a href="https://developer.android.com/reference/android/view/animation/Interpolator.html"> Interpolator </a> </code></pre> instances. On API 21 or newer, the platform implementation will be used and on older platforms a compatible alternative implementation will be used.</p>\n<pre><code>public final class PathInterpolatorCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/view/animation/PathInterpolatorCompat.html
AutoScrollHelper	A										<section class="prog__container"><p> AutoScrollHelper is a utility class for adding automatic edge-triggered scrolling to Views. <p> <b> Note: </b> Implementing classes are responsible for overriding the <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/AutoScrollHelper.html#scrollTargetBy(int, int)"> scrollTargetBy(int, int) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/AutoScrollHelper.html#canTargetScrollHorizontally(int)"> canTargetScrollHorizontally(int) </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/AutoScrollHelper.html#canTargetScrollVertically(int)"> canTargetScrollVertically(int) </a> </code></pre> methods. See <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/ListViewAutoScrollHelper.html"> ListViewAutoScrollHelper </a> </code></pre> for a <pre><code> <a href="https://developer.android.com/reference/android/widget/ListView.html"> ListView </a> </code></pre> -specific implementation. <p> <h1> Activation </h1> Automatic scrolling starts when the user touches within an activation area. By default, activation areas are defined as the top, left, right, and bottom 20% of the host view's total area. Touching within the top activation area scrolls up, left scrolls to the left, and so on. <p> As the user touches closer to the extreme edge of the activation area, scrolling accelerates up to a maximum velocity. When using the default edge type, <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/AutoScrollHelper.html#EDGE_TYPE_INSIDE_EXTEND"> EDGE_TYPE_INSIDE_EXTEND </a> </code></pre> , moving outside of the view bounds will scroll at the maximum velocity. <p> The following activation properties may be configured: <ul> <li> Delay after entering activation area before auto-scrolling begins, see <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/AutoScrollHelper.html#setActivationDelay(int)"> setActivationDelay(int) </a> </code></pre> . Default value is <pre><code> <a href="https://developer.android.com/reference/android/view/ViewConfiguration.html#getTapTimeout()"> getTapTimeout() </a> </code></pre> to avoid conflicting with taps. <li> Location of activation areas, see <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/AutoScrollHelper.html#setEdgeType(int)"> setEdgeType(int) </a> </code></pre> . Default value is <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/AutoScrollHelper.html#EDGE_TYPE_INSIDE_EXTEND"> EDGE_TYPE_INSIDE_EXTEND </a> </code></pre> . <li> Size of activation areas relative to view size, see <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/AutoScrollHelper.html#setRelativeEdges(float, float)"> setRelativeEdges(float, float) </a> </code></pre> . Default value is 20% for both vertical and horizontal edges. <li> Maximum size used to constrain relative size, see <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/AutoScrollHelper.html#setMaximumEdges(float, float)"> setMaximumEdges(float, float) </a> </code></pre> . Default value is <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/AutoScrollHelper.html#NO_MAX"> NO_MAX </a> </code></pre> . </li> </li> </li> </li> </ul> <h1> Scrolling </h1> When automatic scrolling is active, the helper will repeatedly call <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/AutoScrollHelper.html#scrollTargetBy(int, int)"> scrollTargetBy(int, int) </a> </code></pre> to apply new scrolling offsets. <p> The following scrolling properties may be configured: <ul> <li> Acceleration ramp-up duration, see <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/AutoScrollHelper.html#setRampUpDuration(int)"> setRampUpDuration(int) </a> </code></pre> . Default value is 500 milliseconds. <li> Acceleration ramp-down duration, see <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/AutoScrollHelper.html#setRampDownDuration(int)"> setRampDownDuration(int) </a> </code></pre> . Default value is 500 milliseconds. <li> Target velocity relative to view size, see <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/AutoScrollHelper.html#setRelativeVelocity(float, float)"> setRelativeVelocity(float, float) </a> </code></pre> . Default value is 100% per second for both vertical and horizontal. <li> Minimum velocity used to constrain relative velocity, see <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/AutoScrollHelper.html#setMinimumVelocity(float, float)"> setMinimumVelocity(float, float) </a> </code></pre> . When set, scrolling will accelerate to the larger of either this value or the relative target value. Default value is approximately 5 centimeters or 315 dips per second. <li> Maximum velocity used to constrain relative velocity, see <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/AutoScrollHelper.html#setMaximumVelocity(float, float)"> setMaximumVelocity(float, float) </a> </code></pre> . Default value is approximately 25 centimeters or 1575 dips per second. </li> </li> </li> </li> </li> </ul> </p>\n<pre><code>public abstract class AutoScrollHelper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/AutoScrollHelper.html
CompoundButtonCompat	A										<section class="prog__container"><p> Helper for accessing <pre><code> <a href="https://developer.android.com/reference/android/widget/CompoundButton.html"> CompoundButton </a> </code></pre> methods introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class CompoundButtonCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/CompoundButtonCompat.html
ContentLoadingProgressBar	A										<section class="prog__container"><p> ContentLoadingProgressBar implements a ProgressBar that waits a minimum time to be dismissed before showing. Once visible, the progress bar will be visible for a minimum amount of time to avoid "flashes" in the UI when an event could take a largely variable time to complete (from none, to a user perceivable amount)</p>\n<pre><code>public class ContentLoadingProgressBar\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/ContentLoadingProgressBar.html
CursorAdapter	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> <a href="https://developer.android.com/reference/android/widget/CursorAdapter.html"> CursorAdapter </a> </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p>\n<pre><code>public abstract class CursorAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/CursorAdapter.html
DrawerLayout.DrawerListener	A										<section class="prog__container"><p> Listener for monitoring events about drawers.</p>\n<pre><code>public static interface DrawerLayout.DrawerListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/DrawerLayout.DrawerListener.html
DrawerLayout	A										<section class="prog__container"><p> DrawerLayout acts as a top-level container for window content that allows for interactive "drawer" views to be pulled out from one or both vertical edges of the window. <p> Drawer positioning and layout is controlled using the <pre><code> android:layout_gravity </code></pre> attribute on child views corresponding to which side of the view you want the drawer to emerge from: left or right (or start/end on platform versions that support layout direction.) Note that you can only have one drawer view for each vertical edge of the window. If your layout configures more than one drawer view per vertical edge of the window, an exception will be thrown at runtime. </p>\n<pre><code>public class DrawerLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/DrawerLayout.html
DrawerLayout.LayoutParams	A										<section class="prog__container"><p> Special value for the height or width requested by a View.</p>\n<pre><code>public static class DrawerLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/DrawerLayout.LayoutParams.html
DrawerLayout.SavedState	A										<section class="prog__container"><p> State persisted across instances</p>\n<pre><code>protected static class DrawerLayout.SavedState\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/DrawerLayout.SavedState.html
DrawerLayout.SimpleDrawerListener	A										<section class="prog__container"><p> Stub/no-op implementations of all methods of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/DrawerLayout.DrawerListener.html"> DrawerLayout.DrawerListener </a> </code></pre> . Override this if you only care about a few of the available callback methods.</p>\n<pre><code>public static abstract class DrawerLayout.SimpleDrawerListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/DrawerLayout.SimpleDrawerListener.html
EdgeEffectCompat	A										<section class="prog__container"><p> Helper for accessing <pre><code> <a href="https://developer.android.com/reference/android/widget/EdgeEffect.html"> EdgeEffect </a> </code></pre> introduced after API level 4 in a backwards compatible fashion. This class is used to access <pre><code> <a href="https://developer.android.com/reference/android/widget/EdgeEffect.html"> EdgeEffect </a> </code></pre> on platform versions that support it. When running on older platforms it will result in no-ops. It should be used by views that wish to use the standard Android visual effects at the edges of scrolling containers.</p>\n<pre><code>public final class EdgeEffectCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/EdgeEffectCompat.html
ExploreByTouchHelper	A										<section class="prog__container"><p> ExploreByTouchHelper is a utility class for implementing accessibility support in custom <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> s that represent a collection of View-like logical items. It extends <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/accessibility/AccessibilityNodeProviderCompat.html"> AccessibilityNodeProviderCompat </a> </code></pre> and simplifies many aspects of providing information to accessibility services and managing accessibility focus. This class does not currently support hierarchies of logical items. <p> Clients should override abstract methods on this class and attach it to the host view using <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewCompat.html#setAccessibilityDelegate(android.view.View, android.support.v4.view.AccessibilityDelegateCompat)"> setAccessibilityDelegate(View, AccessibilityDelegateCompat) </a> </code></pre> : <p> <pre> class MyCustomView extends View { private MyVirtualViewHelper mVirtualViewHelper; public MyCustomView(Context context, ...) { ... mVirtualViewHelper = new MyVirtualViewHelper(this); ViewCompat.setAccessibilityDelegate(this, mVirtualViewHelper); } @Override public boolean dispatchHoverEvent(MotionEvent event) { return mHelper.dispatchHoverEvent(this, event) || super.dispatchHoverEvent(event); } @Override public boolean dispatchKeyEvent(KeyEvent event) { return mHelper.dispatchKeyEvent(event) || super.dispatchKeyEvent(event); } @Override public boolean onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect) { super.onFocusChanged(gainFocus, direction, previouslyFocusedRect); mHelper.onFocusChanged(gainFocus, direction, previouslyFocusedRect); } } mAccessHelper = new MyExploreByTouchHelper(someView); ViewCompat.setAccessibilityDelegate(someView, mAccessHelper); </pre> </p>\n<pre><code>public abstract class ExploreByTouchHelper\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/ExploreByTouchHelper.html
ListPopupWindowCompat	A										<section class="prog__container"><p> Helper for accessing features in ListPopupWindow introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class ListPopupWindowCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/ListPopupWindowCompat.html
ListViewAutoScrollHelper	A										<section class="prog__container"><p> An implementation of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/AutoScrollHelper.html"> AutoScrollHelper </a> </code></pre> that knows how to scroll through a <pre><code> <a href="https://developer.android.com/reference/android/widget/ListView.html"> ListView </a> </code></pre> .</p>\n<pre><code>public class ListViewAutoScrollHelper\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/ListViewAutoScrollHelper.html
ListViewCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/widget/ListView.html"> ListView </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class ListViewCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/ListViewCompat.html
NestedScrollView	A										<section class="prog__container"><p> NestedScrollView is just like <pre><code> <a href="https://developer.android.com/reference/android/widget/ScrollView.html"> ScrollView </a> </code></pre> , but it supports acting as both a nested scrolling parent and child on both new and old versions of Android. Nested scrolling is enabled by default.</p>\n<pre><code>public class NestedScrollView\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/NestedScrollView.html
NestedScrollView.OnScrollChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the scroll X or Y positions of a view change. <p> This version of the interface works on all versions of Android, back to API v4. </p>\n<pre><code>public static interface NestedScrollView.OnScrollChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/NestedScrollView.OnScrollChangeListener.html
android.support.v4.widget	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v4/widget/package-summary.html
PopupMenuCompat	A										<section class="prog__container"><p> Helper for accessing features in PopupMenu introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class PopupMenuCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/PopupMenuCompat.html
PopupWindowCompat	A										<section class="prog__container"><p> Helper for accessing features in PopupWindow introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class PopupWindowCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/PopupWindowCompat.html
ResourceCursorAdapter	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> <a href="https://developer.android.com/reference/android/widget/ResourceCursorAdapter.html"> ResourceCursorAdapter </a> </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p>\n<pre><code>public abstract class ResourceCursorAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/ResourceCursorAdapter.html
ScrollerCompat	A										<section class="prog__container"><p> Provides access to new <pre><code> <a href="https://developer.android.com/reference/android/widget/Scroller.html"> Scroller </a> </code></pre> APIs when available. <p> This class provides a platform version-independent mechanism for obeying the current device's preferred scroll physics and fling behavior. It offers a subset of the APIs from Scroller or OverScroller. </p>\n<pre><code>public final class ScrollerCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/ScrollerCompat.html
SearchViewCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/widget/SearchView.html"> SearchView </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class SearchViewCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SearchViewCompat.html
SearchViewCompat.OnCloseListener	A										<section class="prog__container"><p> Callback for closing the query UI.</p>\n<pre><code>public static interface SearchViewCompat.OnCloseListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SearchViewCompat.OnCloseListener.html
SearchViewCompat.OnCloseListenerCompat	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/SearchViewCompat.OnCloseListener.html"> SearchViewCompat.OnCloseListener </a> </code></pre> instead. </p>\n<pre><code>public static abstract class SearchViewCompat.OnCloseListenerCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SearchViewCompat.OnCloseListenerCompat.html
SearchViewCompat.OnQueryTextListener	A										<section class="prog__container"><p> Callbacks for changes to the query text.</p>\n<pre><code>public static interface SearchViewCompat.OnQueryTextListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SearchViewCompat.OnQueryTextListener.html
SearchViewCompat.OnQueryTextListenerCompat	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/SearchViewCompat.OnQueryTextListener.html"> SearchViewCompat.OnQueryTextListener </a> </code></pre> instead. </p>\n<pre><code>public static abstract class SearchViewCompat.OnQueryTextListenerCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SearchViewCompat.OnQueryTextListenerCompat.html
SimpleCursorAdapter.CursorToStringConverter	A										<section class="prog__container"><p> This class can be used by external clients of SimpleCursorAdapter to define how the Cursor should be converted to a String.</p>\n<pre><code>public static interface SimpleCursorAdapter.CursorToStringConverter\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SimpleCursorAdapter.CursorToStringConverter.html
SimpleCursorAdapter	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> <a href="https://developer.android.com/reference/android/widget/SimpleCursorAdapter.html"> SimpleCursorAdapter </a> </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p>\n<pre><code>public class SimpleCursorAdapter\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SimpleCursorAdapter.html
SimpleCursorAdapter.ViewBinder	A										<section class="prog__container"><p> This class can be used by external clients of SimpleCursorAdapter to bind values fom the Cursor to views. You should use this class to bind values from the Cursor to views that are not directly supported by SimpleCursorAdapter or to change the way binding occurs for views supported by SimpleCursorAdapter.</p>\n<pre><code>public static interface SimpleCursorAdapter.ViewBinder\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SimpleCursorAdapter.ViewBinder.html
SlidingPaneLayout	A										<section class="prog__container"><p> SlidingPaneLayout provides a horizontal, multi-pane layout for use at the top level of a UI. A left (or first) pane is treated as a content list or browser, subordinate to a primary detail view for displaying content. <p> Child views may overlap if their combined width exceeds the available width in the SlidingPaneLayout. When this occurs the user may slide the topmost view out of the way by dragging it, or by navigating in the direction of the overlapped view using a keyboard. If the content of the dragged child view is itself horizontally scrollable, the user may grab it by the very edge. </p>\n<pre><code>public class SlidingPaneLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SlidingPaneLayout.html
SlidingPaneLayout.LayoutParams	A										<section class="prog__container"><p> Special value for the height or width requested by a View.</p>\n<pre><code>public static class SlidingPaneLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SlidingPaneLayout.LayoutParams.html
SlidingPaneLayout.PanelSlideListener	A										<section class="prog__container"><p> Listener for monitoring events about sliding panes.</p>\n<pre><code>public static interface SlidingPaneLayout.PanelSlideListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SlidingPaneLayout.PanelSlideListener.html
SlidingPaneLayout.SimplePanelSlideListener	A										<section class="prog__container"><p> No-op stubs for <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/SlidingPaneLayout.PanelSlideListener.html"> SlidingPaneLayout.PanelSlideListener </a> </code></pre> . If you only want to implement a subset of the listener methods you can extend this instead of implement the full interface.</p>\n<pre><code>public static class SlidingPaneLayout.SimplePanelSlideListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SlidingPaneLayout.SimplePanelSlideListener.html
Space	A										<section class="prog__container"><p> Space is a lightweight <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> subclass that may be used to create gaps between components in general purpose layouts.</p>\n<pre><code>public class Space\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/Space.html
SwipeRefreshLayout	A										<section class="prog__container"><p> The SwipeRefreshLayout should be used whenever the user can refresh the contents of a view via a vertical swipe gesture. The activity that instantiates this view should add an OnRefreshListener to be notified whenever the swipe to refresh gesture is completed. The SwipeRefreshLayout will notify the listener each and every time the gesture is completed again; the listener is responsible for correctly determining when to actually initiate a refresh of its content. If the listener determines there should not be a refresh, it must call setRefreshing(false) to cancel any visual indication of a refresh. If an activity wishes to show just the progress animation, it should call setRefreshing(true). To disable the gesture and progress animation, call setEnabled(false) on the view. <p> This layout should be made the parent of the view that will be refreshed as a result of the gesture and can only support one direct child. This view will also be made the target of the gesture and will be forced to match both the width and the height supplied in this layout. The SwipeRefreshLayout does not provide accessibility events; instead, a menu item must be provided to allow refresh of the content wherever this gesture is used. </p>\n<pre><code>public class SwipeRefreshLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SwipeRefreshLayout.html
SwipeRefreshLayout.OnChildScrollUpCallback	A										<section class="prog__container"><p> Classes that wish to override <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/SwipeRefreshLayout.html#canChildScrollUp()"> canChildScrollUp() </a> </code></pre> method behavior should implement this interface.</p>\n<pre><code>public static interface SwipeRefreshLayout.OnChildScrollUpCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SwipeRefreshLayout.OnChildScrollUpCallback.html
SwipeRefreshLayout.OnRefreshListener	A										<section class="prog__container"><p> Classes that wish to be notified when the swipe gesture correctly triggers a refresh should implement this interface.</p>\n<pre><code>public static interface SwipeRefreshLayout.OnRefreshListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/SwipeRefreshLayout.OnRefreshListener.html
TextViewCompat	A										<section class="prog__container"><p> Helper for accessing features in <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html"> TextView </a> </code></pre> introduced after API level 4 in a backwards compatible fashion.</p>\n<pre><code>public final class TextViewCompat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/TextViewCompat.html
TintableCompoundButton	A										<section class="prog__container"><p> Interface which allows a <pre><code> <a href="https://developer.android.com/reference/android/widget/CompoundButton.html"> CompoundButton </a> </code></pre> to receive tinting calls from <pre><code> CompoundButtonCompat </code></pre> when running on API v20 devices or lower.</p>\n<pre><code>public interface TintableCompoundButton\n</code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/TintableCompoundButton.html
ViewDragHelper.Callback	A										<section class="prog__container"><p> A Callback is used as a communication channel with the ViewDragHelper back to the parent view using it. <pre><code> on* </code></pre> methods are invoked on siginficant events and several accessor methods are expected to provide the ViewDragHelper with more information about the state of the parent view upon request. The callback also makes decisions governing the range and draggability of child views.</p>\n<pre><code>public static abstract class ViewDragHelper.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/ViewDragHelper.Callback.html
ViewDragHelper	A										<section class="prog__container"><p> ViewDragHelper is a utility class for writing custom ViewGroups. It offers a number of useful operations and state tracking for allowing a user to drag and reposition views within their parent ViewGroup.</p>\n<pre><code>public class ViewDragHelper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v4/widget/ViewDragHelper.html
ActionBar	A										<section class="prog__container"><p> A primary toolbar within the activity that may display the activity title, application-level navigation affordances, and other interactive items. <p> The action bar appears at the top of an activity's window when the activity uses the AppCompat's <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.style.html#Theme_AppCompat"> AppCompat </a> </code></pre> theme (or one of its descendant themes). You may otherwise add the action bar by calling <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/AppCompatDelegate.html#requestWindowFeature(int)"> requestFeature(FEATURE_SUPPORT_ACTION_BAR) </a> </code></pre> or by declaring it in a custom theme with the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.styleable.html#AppCompatTheme_windowActionBar"> windowActionBar </a> </code></pre> property. </p>\n<pre><code>public abstract class ActionBar\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBar.html
ActionBar.LayoutParams	A										<section class="prog__container"><p> Per-child layout information associated with action bar custom views.</p>\n<pre><code>public static class ActionBar.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBar.LayoutParams.html
ActionBar.OnMenuVisibilityListener	A										<section class="prog__container"><p> Listener for receiving events when action bar menus are shown or hidden.</p>\n<pre><code>public static interface ActionBar.OnMenuVisibilityListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBar.OnMenuVisibilityListener.html
ActionBar.OnNavigationListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface is deprecated. </strong> <br/> Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other <a href="http://developer.android.com/design/patterns/navigation.html"> common navigation patterns </a> instead. </p>\n<pre><code>public static interface ActionBar.OnNavigationListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBar.OnNavigationListener.html
ActionBar.Tab	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other <a href="http://developer.android.com/design/patterns/navigation.html"> common navigation patterns </a> instead. </p>\n<pre><code>public static abstract class ActionBar.Tab\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBar.Tab.html
ActionBar.TabListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface is deprecated. </strong> <br/> Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other <a href="http://developer.android.com/design/patterns/navigation.html"> common navigation patterns </a> instead. </p>\n<pre><code>public static interface ActionBar.TabListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBar.TabListener.html
ActionBarActivity	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html"> AppCompatActivity </a> </code></pre> instead. </p>\n<pre><code>public class ActionBarActivity\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBarActivity.html
ActionBarDrawerToggle.Delegate	A										<section class="prog__container"><p> Returns the context of ActionBar</p>\n<pre><code>public static interface ActionBarDrawerToggle.Delegate\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBarDrawerToggle.Delegate.html
ActionBarDrawerToggle.DelegateProvider	A										<section class="prog__container"><p> Allows an implementing Activity to return an <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/ActionBarDrawerToggle.Delegate.html"> ActionBarDrawerToggle.Delegate </a> </code></pre> to use with ActionBarDrawerToggle.</p>\n<pre><code>public static interface ActionBarDrawerToggle.DelegateProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBarDrawerToggle.DelegateProvider.html
ActionBarDrawerToggle	A										<section class="prog__container"><p> This class provides a handy way to tie together the functionality of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/DrawerLayout.html"> DrawerLayout </a> </code></pre> and the framework <pre><code> ActionBar </code></pre> to implement the recommended design for navigation drawers. <p> To use <pre><code> ActionBarDrawerToggle </code></pre> , create one in your Activity and call through to the following methods corresponding to your Activity callbacks: </p>\n<pre><code>public class ActionBarDrawerToggle\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/app/ActionBarDrawerToggle.html
AlertDialog.Builder	A										<section class="prog__container"><p> Creates a builder for an alert dialog that uses the default alert dialog theme.</p>\n<pre><code>public static class AlertDialog.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/app/AlertDialog.Builder.html
AlertDialog	A										<section class="prog__container"><p> A subclass of Dialog that can display one, two or three buttons. If you only want to display a String in this dialog box, use the setMessage() method. If you want to display a more complex view, look up the FrameLayout called "custom" and add your view to it: <pre> FrameLayout fl = (FrameLayout) findViewById(android.R.id.custom); fl.addView(myView, new LayoutParams(MATCH_PARENT, WRAP_CONTENT)); </pre> <p> The AlertDialog class takes care of automatically setting <pre><code> <a href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_ALT_FOCUSABLE_IM"> android.view.WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM </a> </code></pre> for you based on whether any views in the dialog return true from <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#onCheckIsTextEditor()"> View.onCheckIsTextEditor() </a> </code></pre> . Generally you want this set for a Dialog without text editors, so that it will be placed on top of the current input method UI. You can modify this behavior by forcing the flag to your desired mode after calling <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/AlertDialog.html#onCreate(android.os.Bundle)"> onCreate(Bundle) </a> </code></pre> . </p>\n<pre><code>public class AlertDialog\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/AlertDialog.html
AppCompatActivity	A										<section class="prog__container"><p> Base class for activities that use the <a href="https://developer.android.com/tools/extras/support-library.html"> support library </a> action bar features. <p> You can add an <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/ActionBar.html"> ActionBar </a> </code></pre> to your activity when running on API level 7 or higher by extending this class for your activity and setting the activity theme to <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.style.html#Theme_AppCompat"> Theme.AppCompat </a> </code></pre> or a similar theme. </p>\n<pre><code>public class AppCompatActivity\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html
AppCompatCallback	A										<section class="prog__container"><p> Implemented this in order for AppCompat to be able to callback in certain situations. <p> This should be provided to <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/AppCompatDelegate.html#create(android.app.Activity, android.support.v7.app.AppCompatCallback)"> create(android.app.Activity, AppCompatCallback) </a> </code></pre> . </p>\n<pre><code>public interface AppCompatCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/AppCompatCallback.html
AppCompatDelegate	A										<section class="prog__container"><p> This class represents a delegate which you can use to extend AppCompat's support to any <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> . <p> When using an <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/AppCompatDelegate.html"> AppCompatDelegate </a> </code></pre> , you should call the following methods instead of the <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> method of the same name: </p>\n<pre><code>public abstract class AppCompatDelegate\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/app/AppCompatDelegate.html
AppCompatDialog	A										<section class="prog__container"><p> Base class for AppCompat themed <pre><code> <a href="https://developer.android.com/reference/android/app/Dialog.html"> Dialog </a> </code></pre> s.</p>\n<pre><code>public class AppCompatDialog\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/AppCompatDialog.html
AppCompatDialogFragment	A										<section class="prog__container"><p> A special version of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/DialogFragment.html"> DialogFragment </a> </code></pre> which uses an <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/AppCompatDialog.html"> AppCompatDialog </a> </code></pre> in place of a platform-styled dialog.</p>\n<pre><code>public class AppCompatDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/AppCompatDialogFragment.html
MediaRouteActionProvider	A										<section class="prog__container"><p> The media route action provider displays a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/MediaRouteButton.html"> media route button </a> </code></pre> in the application's <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/ActionBar.html"> ActionBar </a> </code></pre> to allow the user to select routes and to control the currently selected route. <p> The application must specify the kinds of routes that the user should be allowed to select by specifying a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouteSelector.html"> selector </a> </code></pre> with the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/MediaRouteActionProvider.html#setRouteSelector(android.support.v7.media.MediaRouteSelector)"> setRouteSelector(MediaRouteSelector) </a> </code></pre> method. </p>\n<pre><code>public class MediaRouteActionProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/MediaRouteActionProvider.html
MediaRouteButton	A										<section class="prog__container"><p> The media route button allows the user to select routes and to control the currently selected route. <p> The application must specify the kinds of routes that the user should be allowed to select by specifying a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouteSelector.html"> selector </a> </code></pre> with the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/MediaRouteButton.html#setRouteSelector(android.support.v7.media.MediaRouteSelector)"> setRouteSelector(MediaRouteSelector) </a> </code></pre> method. </p>\n<pre><code>public class MediaRouteButton\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/MediaRouteButton.html
MediaRouteChooserDialog	A										<section class="prog__container"><p> This class implements the route chooser dialog for <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouter.html"> MediaRouter </a> </code></pre> . <p> This dialog allows the user to choose a route that matches a given selector. </p>\n<pre><code>public class MediaRouteChooserDialog\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/MediaRouteChooserDialog.html
MediaRouteChooserDialogFragment	A										<section class="prog__container"><p> Media route chooser dialog fragment. <p> Creates a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/MediaRouteChooserDialog.html"> MediaRouteChooserDialog </a> </code></pre> . The application may subclass this dialog fragment to customize the media route chooser dialog. </p>\n<pre><code>public class MediaRouteChooserDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/MediaRouteChooserDialogFragment.html
MediaRouteControllerDialog	A										<section class="prog__container"><p> This class implements the route controller dialog for <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouter.html"> MediaRouter </a> </code></pre> . <p> This dialog allows the user to control or disconnect from the currently selected route. </p>\n<pre><code>public class MediaRouteControllerDialog\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/MediaRouteControllerDialog.html
MediaRouteControllerDialogFragment	A										<section class="prog__container"><p> Media route controller dialog fragment. <p> Creates a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/MediaRouteControllerDialog.html"> MediaRouteControllerDialog </a> </code></pre> . The application may subclass this dialog fragment to customize the media route controller dialog. </p>\n<pre><code>public class MediaRouteControllerDialogFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/MediaRouteControllerDialogFragment.html
MediaRouteDialogFactory	A										<section class="prog__container"><p> The media route dialog factory is responsible for creating the media route chooser and controller dialogs as needed. <p> The application can customize the dialogs by providing a subclass of the dialog factory to the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/MediaRouteButton.html"> MediaRouteButton </a> </code></pre> using the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/MediaRouteButton.html#setDialogFactory(android.support.v7.app.MediaRouteDialogFactory)"> setDialogFactory </a> </code></pre> method. </p>\n<pre><code>public class MediaRouteDialogFactory\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/app/MediaRouteDialogFactory.html
MediaRouteDiscoveryFragment	A										<section class="prog__container"><p> Media route discovery fragment. <p> This fragment takes care of registering a callback for media route discovery during the <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/Fragment.html#onStart()"> onStart() </a> </code></pre> phase and removing it during the <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/Fragment.html#onStop()"> onStop() </a> </code></pre> phase. </p>\n<pre><code>public class MediaRouteDiscoveryFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/MediaRouteDiscoveryFragment.html
NotificationCompat.Builder	A										<section class="prog__container"><p> See <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html"> NotificationCompat </a> </code></pre> . In addition to the builder in v4, this builder also supports <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/NotificationCompat.MediaStyle.html"> NotificationCompat.MediaStyle </a> </code></pre> .</p>\n<pre><code>public static class NotificationCompat.Builder\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/NotificationCompat.Builder.html
NotificationCompat.DecoratedCustomViewStyle	A										<section class="prog__container"><p> Notification style for custom views that are decorated by the system. <p> Instead of providing a notification that is completely custom, a developer can set this style and still obtain system decorations like the notification header with the expand affordance and actions. <p> Use <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#setCustomContentView(android.widget.RemoteViews)"> setCustomContentView(RemoteViews) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#setCustomBigContentView(android.widget.RemoteViews)"> setCustomBigContentView(RemoteViews) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#setCustomHeadsUpContentView(android.widget.RemoteViews)"> setCustomHeadsUpContentView(RemoteViews) </a> </code></pre> to set the corresponding custom views to display. <p> To use this style with your Notification, feed it to <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setStyle(android.support.v4.app.NotificationCompat.Style)"> setStyle(Style) </a> </code></pre> like so: <pre class="prettyprint"> Notification noti = new NotificationCompat.Builder() .setSmallIcon(R.drawable.ic_stat_player) .setLargeIcon(albumArtBitmap)) .setCustomContentView(contentView); .setStyle(<b>new NotificationCompat.DecoratedCustomViewStyle()</b>) .build(); </pre> <p> If you are using this style, consider using the corresponding styles like <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.style.html#TextAppearance_AppCompat_Notification"> TextAppearance_AppCompat_Notification </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.style.html#TextAppearance_AppCompat_Notification_Title"> TextAppearance_AppCompat_Notification_Title </a> </code></pre> in your custom views in order to get the correct styling on each platform version. </p>\n<pre><code>public static class NotificationCompat.DecoratedCustomViewStyle\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/NotificationCompat.DecoratedCustomViewStyle.html
NotificationCompat.DecoratedMediaCustomViewStyle	A										<section class="prog__container"><p> Notification style for media custom views that are decorated by the system. <p> Instead of providing a media notification that is completely custom, a developer can set this style and still obtain system decorations like the notification header with the expand affordance and actions. <p> Use <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#setCustomContentView(android.widget.RemoteViews)"> setCustomContentView(RemoteViews) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#setCustomBigContentView(android.widget.RemoteViews)"> setCustomBigContentView(RemoteViews) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.Builder.html#setCustomHeadsUpContentView(android.widget.RemoteViews)"> setCustomHeadsUpContentView(RemoteViews) </a> </code></pre> to set the corresponding custom views to display. <p> To use this style with your Notification, feed it to <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setStyle(android.support.v4.app.NotificationCompat.Style)"> setStyle(Style) </a> </code></pre> like so: <pre class="prettyprint"> Notification noti = new Notification.Builder() .setSmallIcon(R.drawable.ic_stat_player) .setLargeIcon(albumArtBitmap)) .setCustomContentView(contentView); .setStyle(<b>new NotificationCompat.DecoratedMediaCustomViewStyle()</b> .setMediaSession(mySession)) .build(); </pre> <p> If you are using this style, consider using the corresponding styles like <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.style.html#TextAppearance_AppCompat_Notification_Media"> TextAppearance_AppCompat_Notification_Media </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.style.html#TextAppearance_AppCompat_Notification_Title_Media"> TextAppearance_AppCompat_Notification_Title_Media </a> </code></pre> in your custom views in order to get the correct styling on each platform version. </p>\n<pre><code>public static class NotificationCompat.DecoratedMediaCustomViewStyle\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/NotificationCompat.DecoratedMediaCustomViewStyle.html
NotificationCompat	A										<section class="prog__container"><p> An extension of <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html"> NotificationCompat </a> </code></pre> which supports <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/NotificationCompat.MediaStyle.html"> NotificationCompat.MediaStyle </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/NotificationCompat.DecoratedCustomViewStyle.html"> NotificationCompat.DecoratedCustomViewStyle </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/NotificationCompat.DecoratedMediaCustomViewStyle.html"> NotificationCompat.DecoratedMediaCustomViewStyle </a> </code></pre> . You should start using this variant if you need support any of these styles.</p>\n<pre><code>public class NotificationCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/NotificationCompat.html
NotificationCompat.MediaStyle	A										<section class="prog__container"><p> Notification style for media playback notifications. In the expanded form, <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.html#bigContentView"> bigContentView </a> </code></pre> , up to 5 <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Action.html"> NotificationCompat.Action </a> </code></pre> s specified with <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#addAction(int, java.lang.CharSequence, android.app.PendingIntent)"> addAction </a> </code></pre> will be shown as icon-only pushbuttons, suitable for transport controls. The Bitmap given to <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setLargeIcon(android.graphics.Bitmap)"> setLargeIcon() </a> </code></pre> will be treated as album artwork. Unlike the other styles provided here, MediaStyle can also modify the standard-size <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.html#contentView"> contentView </a> </code></pre> ; by providing action indices to <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/NotificationCompat.MediaStyle.html#setShowActionsInCompactView(int...)"> setShowActionsInCompactView(int) </a> </code></pre> you can promote up to 3 actions to be displayed in the standard view alongside the usual content. Notifications created with MediaStyle will have their category set to <pre><code> <a href="https://developer.android.com/reference/android/app/Notification.html#CATEGORY_TRANSPORT"> CATEGORY_TRANSPORT </a> </code></pre> unless you set a different category using <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setCategory(java.lang.String)"> setCategory() </a> </code></pre> . Finally, if you attach a <pre><code> <a href="https://developer.android.com/reference/android/media/session/MediaSession.Token.html"> MediaSession.Token </a> </code></pre> using <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/NotificationCompat.MediaStyle.html#setMediaSession(android.support.v4.media.session.MediaSessionCompat.Token)"> setMediaSession(MediaSessionCompat.Token) </a> </code></pre> , the System UI can identify this as a notification representing an active media session and respond accordingly (by showing album artwork in the lockscreen, for example). To use this style with your Notification, feed it to <pre><code> <a href="https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html#setStyle(android.support.v4.app.NotificationCompat.Style)"> setStyle(NotificationCompat.Style) </a> </code></pre> like so: <pre class="prettyprint"> Notification noti = new NotificationCompat.Builder() .setSmallIcon(R.drawable.ic_stat_player) .setContentTitle("Track title") .setContentText("Artist - Album") .setLargeIcon(albumArtBitmap)) .setStyle(<b>new NotificationCompat.MediaStyle()</b> .setMediaSession(mySession)) .build(); </pre></p>\n<pre><code>public static class NotificationCompat.MediaStyle\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/app/NotificationCompat.MediaStyle.html
android.support.v7.app	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/app/package-summary.html
android.support.v7.appcompat	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/appcompat/package-summary.html
R.anim	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.anim\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.anim.html
R.attr	A										<section class="prog__container"><p> Custom divider drawable to use for elements in the action bar.</p>\n<pre><code>public static final class R.attr\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html
R.bool	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.bool\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.bool.html
R.color	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.color\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.color.html
R.dimen	A										<section class="prog__container"><p> Default content inset of an action bar.</p>\n<pre><code>public static final class R.dimen\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.dimen.html
R.drawable	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.drawable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.drawable.html
R	A										<section class="prog__container"><p></p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.html
R.id	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.id\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.id.html
R.integer	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.integer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.integer.html
R.layout	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.layout\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.layout.html
R.string	A										<section class="prog__container"><p> Content description for the action bar "home" affordance.</p>\n<pre><code>public static final class R.string\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.string.html
R.style	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.style\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.style.html
R.styleable	A										<section class="prog__container"><p> Attributes used to style the Action Bar.</p>\n<pre><code>public static final class R.styleable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/appcompat/R.styleable.html
android.support.v7.cardview	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/cardview/package-summary.html
R.attr	A										<section class="prog__container"><p> Background color for CardView.</p>\n<pre><code>public static final class R.attr\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/cardview/R.attr.html
R.color	A										<section class="prog__container"><p> Background color for dark CardView.</p>\n<pre><code>public static final class R.color\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/cardview/R.color.html
R.dimen	A										<section class="prog__container"><p> Inset shadow for RoundRectDrawableWithShadow.</p>\n<pre><code>public static final class R.dimen\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/cardview/R.dimen.html
R	A										<section class="prog__container"><p></p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/cardview/R.html
R.style	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.style\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/cardview/R.style.html
R.styleable	A										<section class="prog__container"><p> Attributes that can be used with a CardView.</p>\n<pre><code>public static final class R.styleable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/cardview/R.styleable.html
AppCompatResources	A										<section class="prog__container"><p> Class for accessing an application's resources through AppCompat, and thus any backward compatible functionality.</p>\n<pre><code>public final class AppCompatResources\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/content/res/AppCompatResources.html
android.support.v7.content.res	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/content/res/package-summary.html
android.support.v7.graphics	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/graphics/package-summary.html
Palette.Builder	A										<section class="prog__container"><p> Builder class for generating <pre><code> <a href="https://developer.android.com/reference/android/support/v7/graphics/Palette.html"> Palette </a> </code></pre> instances.</p>\n<pre><code>public static final class Palette.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/graphics/Palette.Builder.html
Palette.Filter	A										<section class="prog__container"><p> A Filter provides a mechanism for exercising fine-grained control over which colors are valid within a resulting <pre><code> <a href="https://developer.android.com/reference/android/support/v7/graphics/Palette.html"> Palette </a> </code></pre> .</p>\n<pre><code>public static interface Palette.Filter\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/graphics/Palette.Filter.html
Palette	A										<section class="prog__container"><p> A helper class to extract prominent colors from an image. <p> A number of colors with different profiles are extracted from the image: <ul> <li> Vibrant </li> <li> Vibrant Dark </li> <li> Vibrant Light </li> <li> Muted </li> <li> Muted Dark </li> <li> Muted Light </li> </ul> These can be retrieved from the appropriate getter method. <p> Instances are created with a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/graphics/Palette.Builder.html"> Palette.Builder </a> </code></pre> which supports several options to tweak the generated Palette. See that class' documentation for more information. <p> Generation should always be completed on a background thread, ideally the one in which you load your image on. <pre><code> <a href="https://developer.android.com/reference/android/support/v7/graphics/Palette.Builder.html"> Palette.Builder </a> </code></pre> supports both synchronous and asynchronous generation: <pre> // Synchronous Palette p = Palette.from(bitmap).generate(); // Asynchronous Palette.from(bitmap).generate(new PaletteAsyncListener() { public void onGenerated(Palette p) { // Use generated instance } }); </pre> </p>\n<pre><code>public final class Palette\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/graphics/Palette.html
Palette.PaletteAsyncListener	A										<section class="prog__container"><p> Listener to be used with <pre><code> <a href="https://developer.android.com/reference/android/support/v7/graphics/Palette.html#generateAsync(android.graphics.Bitmap, android.support.v7.graphics.Palette.PaletteAsyncListener)"> generateAsync(Bitmap, PaletteAsyncListener) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/support/v7/graphics/Palette.html#generateAsync(android.graphics.Bitmap, int, android.support.v7.graphics.Palette.PaletteAsyncListener)"> generateAsync(Bitmap, int, PaletteAsyncListener) </a> </code></pre></p>\n<pre><code>public static interface Palette.PaletteAsyncListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/graphics/Palette.PaletteAsyncListener.html
Palette.Swatch	A										<section class="prog__container"><p> Represents a color swatch generated from an image's palette. The RGB color can be retrieved by calling <pre><code> <a href="https://developer.android.com/reference/android/support/v7/graphics/Palette.Swatch.html#getRgb()"> getRgb() </a> </code></pre> .</p>\n<pre><code>public static final class Palette.Swatch\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/graphics/Palette.Swatch.html
Target.Builder	A										<section class="prog__container"><p> Builder class for generating custom <pre><code> <a href="https://developer.android.com/reference/android/support/v7/graphics/Target.html"> Target </a> </code></pre> instances.</p>\n<pre><code>public static final class Target.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/graphics/Target.Builder.html
Target	A										<section class="prog__container"><p> A class which allows custom selection of colors in a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/graphics/Palette.html"> Palette </a> </code></pre> 's generation. Instances can be created via the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/graphics/Target.Builder.html"> Target.Builder </a> </code></pre> class. <p> To use the target, use the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/graphics/Palette.Builder.html#addTarget(android.support.v7.graphics.Target)"> addTarget(Target) </a> </code></pre> API when building a Palette. </p>\n<pre><code>public final class Target\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/graphics/Target.html
DrawerArrowDrawable	A										<section class="prog__container"><p> A drawable that can draw a "Drawer hamburger" menu or an arrow and animate between them. <p> The progress between the two states is controlled via <pre><code> <a href="https://developer.android.com/reference/android/support/v7/graphics/drawable/DrawerArrowDrawable.html#setProgress(float)"> setProgress(float) </a> </code></pre> . </p>\n<pre><code>public class DrawerArrowDrawable\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/graphics/drawable/DrawerArrowDrawable.html
android.support.v7.graphics.drawable	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/graphics/drawable/package-summary.html
android.support.v7.gridlayout	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/gridlayout/package-summary.html
R.attr	A										<section class="prog__container"><p> When set to alignMargins, causes alignment to take place between the outer boundary of a view, as defined by its margins.</p>\n<pre><code>public static final class R.attr\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/gridlayout/R.attr.html
R.dimen	A										<section class="prog__container"><p> The default gap between components in a layout.</p>\n<pre><code>public static final class R.dimen\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/gridlayout/R.dimen.html
R	A										<section class="prog__container"><p></p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/gridlayout/R.html
R.id	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.id\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/gridlayout/R.id.html
R.styleable	A										<section class="prog__container"><p> Attributes that can be used with a GridLayout.</p>\n<pre><code>public static final class R.styleable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/gridlayout/R.styleable.html
MediaControlIntent	A										<section class="prog__container"><p> Constants for media control intents. <p> This class declares a set of standard media control intent categories and actions that applications can use to identify the capabilities of media routes and control them. </p>\n<pre><code>public final class MediaControlIntent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaControlIntent.html
MediaItemMetadata	A										<section class="prog__container"><p> Constants for specifying metadata about a media item as a <pre><code> <a href="https://developer.android.com/reference/android/os/Bundle.html"> Bundle </a> </code></pre> . <p> This class is part of the remote playback protocol described by the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaControlIntent.html"> MediaControlIntent </a> </code></pre> class. </p>\n<pre><code>public final class MediaItemMetadata\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaItemMetadata.html
MediaItemStatus.Builder	A										<section class="prog__container"><p> Builder for <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaItemStatus.html"> media item status objects </a> </code></pre> .</p>\n<pre><code>public static final class MediaItemStatus.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaItemStatus.Builder.html
MediaItemStatus	A										<section class="prog__container"><p> Describes the playback status of a media item. <p> This class is part of the remote playback protocol described by the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaControlIntent.html"> MediaControlIntent </a> </code></pre> class. </p>\n<pre><code>public final class MediaItemStatus\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaItemStatus.html
MediaRouteDescriptor.Builder	A										<section class="prog__container"><p> Builder for <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouteDescriptor.html"> media route descriptors </a> </code></pre> .</p>\n<pre><code>public static final class MediaRouteDescriptor.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteDescriptor.Builder.html
MediaRouteDescriptor	A										<section class="prog__container"><p> Describes the properties of a route. <p> Each route is uniquely identified by an opaque id string. This token may take any form as long as it is unique within the media route provider. </p>\n<pre><code>public final class MediaRouteDescriptor\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteDescriptor.html
MediaRouteDiscoveryRequest	A										<section class="prog__container"><p> Describes the kinds of routes that the media router would like to discover and whether to perform active scanning. <p> This object is immutable once created. </p>\n<pre><code>public final class MediaRouteDiscoveryRequest\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteDiscoveryRequest.html
MediaRouteProvider.Callback	A										<section class="prog__container"><p> Callback which is invoked when route information becomes available or changes.</p>\n<pre><code>public static abstract class MediaRouteProvider.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteProvider.Callback.html
MediaRouteProvider	A										<section class="prog__container"><p> Media route providers are used to publish additional media routes for use within an application. Media route providers may also be declared as a service to publish additional media routes to all applications in the system. <p> The purpose of a media route provider is to discover media routes that satisfy the criteria specified by the current <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouteDiscoveryRequest.html"> MediaRouteDiscoveryRequest </a> </code></pre> and publish a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouteProviderDescriptor.html"> MediaRouteProviderDescriptor </a> </code></pre> with information about each route by calling <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouteProvider.html#setDescriptor(android.support.v7.media.MediaRouteProviderDescriptor)"> setDescriptor(MediaRouteProviderDescriptor) </a> </code></pre> to notify the currently registered <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouteProvider.Callback.html"> MediaRouteProvider.Callback </a> </code></pre> . </p>\n<pre><code>public abstract class MediaRouteProvider\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteProvider.html
MediaRouteProvider.ProviderMetadata	A										<section class="prog__container"><p> Describes properties of the route provider's implementation. <p> This object is immutable once created. </p>\n<pre><code>public static final class MediaRouteProvider.ProviderMetadata\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteProvider.ProviderMetadata.html
MediaRouteProvider.RouteController	A										<section class="prog__container"><p> Provides control over a particular route. <p> The media router obtains a route controller for a route whenever it needs to control a route. When a route is selected, the media router invokes the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouteProvider.RouteController.html#onSelect()"> onSelect() </a> </code></pre> method of its route controller. While selected, the media router may call other methods of the route controller to request that it perform certain actions to the route. When a route is unselected, the media router invokes the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouteProvider.RouteController.html#onUnselect()"> onUnselect() </a> </code></pre> method of its route controller. When the media route no longer needs the route controller it will invoke the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouteProvider.RouteController.html#onRelease()"> onRelease() </a> </code></pre> method to allow the route controller to free its resources. </p>\n<pre><code>public static abstract class MediaRouteProvider.RouteController\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteProvider.RouteController.html
MediaRouteProviderDescriptor.Builder	A										<section class="prog__container"><p> Builder for <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouteProviderDescriptor.html"> media route provider descriptors </a> </code></pre> .</p>\n<pre><code>public static final class MediaRouteProviderDescriptor.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteProviderDescriptor.Builder.html
MediaRouteProviderDescriptor	A										<section class="prog__container"><p> Describes the state of a media route provider and the routes that it publishes. <p> This object is immutable once created using a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouteProviderDescriptor.Builder.html"> MediaRouteProviderDescriptor.Builder </a> </code></pre> instance. </p>\n<pre><code>public final class MediaRouteProviderDescriptor\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteProviderDescriptor.html
MediaRouteProviderService	A										<section class="prog__container"><p> Base class for media route provider services. <p> A media router will bind to media route provider services when a callback is added via <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouter.html#addCallback(android.support.v7.media.MediaRouteSelector, android.support.v7.media.MediaRouter.Callback, int)"> addCallback(MediaRouteSelector, MediaRouter.Callback, int) </a> </code></pre> with a discovery flag: <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouter.html#CALLBACK_FLAG_REQUEST_DISCOVERY"> CALLBACK_FLAG_REQUEST_DISCOVERY </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouter.html#CALLBACK_FLAG_FORCE_DISCOVERY"> CALLBACK_FLAG_FORCE_DISCOVERY </a> </code></pre> , or <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouter.html#CALLBACK_FLAG_PERFORM_ACTIVE_SCAN"> CALLBACK_FLAG_PERFORM_ACTIVE_SCAN </a> </code></pre> , and will unbind when the callback is removed via <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouter.html#removeCallback(android.support.v7.media.MediaRouter.Callback)"> removeCallback(MediaRouter.Callback) </a> </code></pre> . </p>\n<pre><code>public abstract class MediaRouteProviderService\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteProviderService.html
MediaRouter.Callback	A										<section class="prog__container"><p> Interface for receiving events about media routing changes. All methods of this interface will be called from the application's main thread. <p> A Callback will only receive events relevant to routes that the callback was registered for unless the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouter.html#CALLBACK_FLAG_UNFILTERED_EVENTS"> CALLBACK_FLAG_UNFILTERED_EVENTS </a> </code></pre> flag was specified in <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouter.html#addCallback(android.support.v7.media.MediaRouteSelector, android.support.v7.media.MediaRouter.Callback, int)"> addCallback(MediaRouteSelector, Callback, int) </a> </code></pre> . </p>\n<pre><code>public static abstract class MediaRouter.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouter.Callback.html
MediaRouter.ControlRequestCallback	A										<section class="prog__container"><p> Callback which is invoked with the result of a media control request.</p>\n<pre><code>public static abstract class MediaRouter.ControlRequestCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouter.ControlRequestCallback.html
MediaRouter	A										<section class="prog__container"><p> MediaRouter allows applications to control the routing of media channels and streams from the current device to external speakers and destination devices. <p> A MediaRouter instance is retrieved through <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouter.html#getInstance(android.content.Context)"> getInstance(Context) </a> </code></pre> . Applications can query the media router about the currently selected route and its capabilities to determine how to send content to the route's destination. Applications can also <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouter.RouteInfo.html#sendControlRequest(android.content.Intent, android.support.v7.media.MediaRouter.ControlRequestCallback)"> send control requests </a> </code></pre> to the route to ask the route's destination to perform certain remote control functions such as playing media. </p>\n<pre><code>public final class MediaRouter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouter.html
MediaRouter.ProviderInfo	A										<section class="prog__container"><p> Provides information about a media route provider. <p> This object may be used to determine which media route provider has published a particular route. </p>\n<pre><code>public static final class MediaRouter.ProviderInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouter.ProviderInfo.html
MediaRouter.RouteInfo	A										<section class="prog__container"><p> Provides information about a media route. <p> Each media route has a list of <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaControlIntent.html"> media control </a> </code></pre> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouter.RouteInfo.html#getControlFilters()"> intent filters </a> </code></pre> that describe the capabilities of the route and the manner in which it is used and controlled. </p>\n<pre><code>public static class MediaRouter.RouteInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouter.RouteInfo.html
MediaRouteSelector.Builder	A										<section class="prog__container"><p> Builder for <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouteSelector.html"> media route selectors </a> </code></pre> .</p>\n<pre><code>public static final class MediaRouteSelector.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteSelector.Builder.html
MediaRouteSelector	A										<section class="prog__container"><p> Describes the capabilities of routes that applications would like to discover and use. <p> This object is immutable once created using a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaRouteSelector.Builder.html"> MediaRouteSelector.Builder </a> </code></pre> instance. </p>\n<pre><code>public final class MediaRouteSelector\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaRouteSelector.html
MediaSessionStatus.Builder	A										<section class="prog__container"><p> Builder for <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaSessionStatus.html"> media session status objects </a> </code></pre> .</p>\n<pre><code>public static final class MediaSessionStatus.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaSessionStatus.Builder.html
MediaSessionStatus	A										<section class="prog__container"><p> Describes the playback status of a media session. <p> This class is part of the remote playback protocol described by the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaControlIntent.html"> MediaControlIntent </a> </code></pre> class. </p>\n<pre><code>public final class MediaSessionStatus\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/MediaSessionStatus.html
android.support.v7.media	A										<section class="prog__container">Contains APIs that control the routing of media channels and streams from the current device to external speakers and destination devices.</section>	https://developer.android.com/reference/android/support/v7/media/package-summary.html
RemotePlaybackClient.ActionCallback	A										<section class="prog__container"><p> Base callback type for remote playback requests.</p>\n<pre><code>public static abstract class RemotePlaybackClient.ActionCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/RemotePlaybackClient.ActionCallback.html
RemotePlaybackClient	A										<section class="prog__container"><p> A helper class for playing media on remote routes using the remote playback protocol defined by <pre><code> <a href="https://developer.android.com/reference/android/support/v7/media/MediaControlIntent.html"> MediaControlIntent </a> </code></pre> . <p> The client maintains session state and offers a simplified interface for issuing remote playback media control intents to a single route. </p>\n<pre><code>public class RemotePlaybackClient\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/RemotePlaybackClient.html
RemotePlaybackClient.ItemActionCallback	A										<section class="prog__container"><p> Callback for remote playback requests that operate on items.</p>\n<pre><code>public static abstract class RemotePlaybackClient.ItemActionCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/RemotePlaybackClient.ItemActionCallback.html
RemotePlaybackClient.OnMessageReceivedListener	A										<section class="prog__container"><p> A callback that will receive messages from media sessions.</p>\n<pre><code>public static interface RemotePlaybackClient.OnMessageReceivedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/RemotePlaybackClient.OnMessageReceivedListener.html
RemotePlaybackClient.SessionActionCallback	A										<section class="prog__container"><p> Callback for remote playback requests that operate on sessions.</p>\n<pre><code>public static abstract class RemotePlaybackClient.SessionActionCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/media/RemotePlaybackClient.SessionActionCallback.html
RemotePlaybackClient.StatusCallback	A										<section class="prog__container"><p> A callback that will receive media status updates.</p>\n<pre><code>public static abstract class RemotePlaybackClient.StatusCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/media/RemotePlaybackClient.StatusCallback.html
android.support.v7.mediarouter	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/mediarouter/package-summary.html
R.attr	A										<section class="prog__container"><p> Tint to apply to the media route button <p> May be a reference to another resource, in the form " <pre><code> @[+][ <i> package </i> :] <i> type </i> / <i> name </i> </code></pre> " or a theme attribute in the form " <pre><code> ?[ <i> package </i> :] <i> type </i> / <i> name </i> </code></pre> ". </p>\n<pre><code>public static final class R.attr\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.attr.html
R.dimen	A										<section class="prog__container"><p> Height of volume group item.</p>\n<pre><code>public static final class R.dimen\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.dimen.html
R.drawable	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.drawable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.drawable.html
R	A										<section class="prog__container"><p></p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.html
R.id	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.id\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.id.html
R.integer	A										<section class="prog__container"><p> Group list expand/collapse animation duration.</p>\n<pre><code>public static final class R.integer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.integer.html
R.interpolator	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.interpolator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.interpolator.html
R.layout	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.layout\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.layout.html
R.string	A										<section class="prog__container"><p> String to be shown as a tooltip of MediaRouteButton Cast is the standard android verb for sending content to a remote device.</p>\n<pre><code>public static final class R.string\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.string.html
R.style	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.style\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.style.html
R.styleable	A										<section class="prog__container"><p> Attributes that can be used with a MediaRouteButton.</p>\n<pre><code>public static final class R.styleable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/mediarouter/R.styleable.html
android.support.v7.palette	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/palette/package-summary.html
R	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/palette/R.html
CheckBoxPreference	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> that provides checkbox widget functionality. <p> This preference will store a boolean into the SharedPreferences. </p>\n<pre><code>public class CheckBoxPreference\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/CheckBoxPreference.html
DialogPreference	A										<section class="prog__container"><p> A base class for <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> objects that are dialog-based. These preferences will, when clicked, open a dialog showing the actual preference controls.</p>\n<pre><code>public abstract class DialogPreference\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/DialogPreference.html
DialogPreference.TargetFragment	A										<section class="prog__container"><p></p>\n<pre><code>public static interface DialogPreference.TargetFragment\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/DialogPreference.TargetFragment.html
DropDownPreference	A										<section class="prog__container"><p> A version of <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/ListPreference.html"> ListPreference </a> </code></pre> that presents the options in a drop down menu rather than a dialog.</p>\n<pre><code>public class DropDownPreference\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/DropDownPreference.html
EditTextPreference	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> that allows for string input. <p> It is a subclass of <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/DialogPreference.html"> DialogPreference </a> </code></pre> and shows the <pre><code> <a href="https://developer.android.com/reference/android/widget/EditText.html"> EditText </a> </code></pre> in a dialog. <p> This preference will store a string into the SharedPreferences. </p>\n<pre><code>public class EditTextPreference\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/EditTextPreference.html
EditTextPreferenceDialogFragmentCompat	A										<section class="prog__container"><p></p>\n<pre><code>public class EditTextPreferenceDialogFragmentCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/EditTextPreferenceDialogFragmentCompat.html
ListPreference	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> that displays a list of entries as a dialog. <p> This preference will store a string into the SharedPreferences. This string will be the value from the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/ListPreference.html#setEntryValues(java.lang.CharSequence[])"> setEntryValues(CharSequence[]) </a> </code></pre> array. </p>\n<pre><code>public class ListPreference\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/ListPreference.html
ListPreferenceDialogFragmentCompat	A										<section class="prog__container"><p></p>\n<pre><code>public class ListPreferenceDialogFragmentCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/ListPreferenceDialogFragmentCompat.html
MultiSelectListPreferenceDialogFragmentCompat	A										<section class="prog__container"><p></p>\n<pre><code>public class MultiSelectListPreferenceDialogFragmentCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/MultiSelectListPreferenceDialogFragmentCompat.html
android.support.v7.preference	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/preference/package-summary.html
Preference.BaseSavedState	A										<section class="prog__container"><p> A base class for managing the instance state of a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> .</p>\n<pre><code>public static class Preference.BaseSavedState\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/Preference.BaseSavedState.html
Preference	A										<section class="prog__container"><p> Represents the basic Preference UI building block displayed by a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceFragmentCompat.html"> PreferenceFragmentCompat </a> </code></pre> in the form of a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html"> RecyclerView </a> </code></pre> . This class provides data for the <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> to be displayed in the list and associates with a <pre><code> <a href="https://developer.android.com/reference/android/content/SharedPreferences.html"> SharedPreferences </a> </code></pre> to store/retrieve the preference data. <p> When specifying a preference hierarchy in XML, each element can point to a subclass of <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> , similar to the view hierarchy and layouts. <p> This class contains a <pre><code> key </code></pre> that will be used as the key into the <pre><code> <a href="https://developer.android.com/reference/android/content/SharedPreferences.html"> SharedPreferences </a> </code></pre> . It is up to the subclass to decide how to store the value. </p>\n<pre><code>public class Preference\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/Preference.html
Preference.OnPreferenceChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the value of this <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> has been changed by the user and is about to be set and/or persisted. This gives the client a chance to prevent setting and/or persisting the value.</p>\n<pre><code>public static interface Preference.OnPreferenceChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/Preference.OnPreferenceChangeListener.html
Preference.OnPreferenceClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> is clicked.</p>\n<pre><code>public static interface Preference.OnPreferenceClickListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/Preference.OnPreferenceClickListener.html
PreferenceCategory	A										<section class="prog__container"><p> Used to group <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> objects and provide a disabled title above the group. </p>\n<pre><code>public class PreferenceCategory\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceCategory.html
PreferenceDialogFragmentCompat	A										<section class="prog__container"><p> Abstract base class which presents a dialog associated with a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/DialogPreference.html"> DialogPreference </a> </code></pre> . Since the preference object may not be available during fragment re-creation, the necessary information for displaying the dialog is read once during the initial call to <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceDialogFragmentCompat.html#onCreate(android.os.Bundle)"> onCreate(Bundle) </a> </code></pre> and saved/restored in the saved instance state. Custom subclasses should also follow this pattern.</p>\n<pre><code>public abstract class PreferenceDialogFragmentCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceDialogFragmentCompat.html
PreferenceFragmentCompat	A										<section class="prog__container"><p> Shows a hierarchy of <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> objects as lists. These preferences will automatically save to <pre><code> <a href="https://developer.android.com/reference/android/content/SharedPreferences.html"> SharedPreferences </a> </code></pre> as the user interacts with them. To retrieve an instance of <pre><code> <a href="https://developer.android.com/reference/android/content/SharedPreferences.html"> SharedPreferences </a> </code></pre> that the preference hierarchy in this fragment will use, call <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceManager.html#getDefaultSharedPreferences(android.content.Context)"> getDefaultSharedPreferences(android.content.Context) </a> </code></pre> with a context in the same package as this fragment. <p> Furthermore, the preferences shown will follow the visual style of system preferences. It is easy to create a hierarchy of preferences (that can be shown on multiple screens) via XML. For these reasons, it is recommended to use this fragment (as a superclass) to deal with preferences in applications. <p> A <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> object should be at the top of the preference hierarchy. Furthermore, subsequent <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> in the hierarchy denote a screen break--that is the preferences contained within subsequent <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> should be shown on another screen. The preference framework handles this by calling <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceFragmentCompat.html#onNavigateToScreen(android.support.v7.preference.PreferenceScreen)"> onNavigateToScreen(PreferenceScreen) </a> </code></pre> . <p> The preference hierarchy can be formed in multiple ways: <li> From an XML file specifying the hierarchy <li> From different <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activities </a> </code></pre> that each specify its own preferences in an XML file via <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> meta-data <li> From an object hierarchy rooted with <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> <p> To inflate from XML, use the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceFragmentCompat.html#addPreferencesFromResource(int)"> addPreferencesFromResource(int) </a> </code></pre> . The root element should be a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> . Subsequent elements can point to actual <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> subclasses. As mentioned above, subsequent <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> in the hierarchy will result in the screen break. <p> To specify an object hierarchy rooted with <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> , use <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceFragmentCompat.html#setPreferenceScreen(android.support.v7.preference.PreferenceScreen)"> setPreferenceScreen(PreferenceScreen) </a> </code></pre> . <p> As a convenience, this fragment implements a click listener for any preference in the current hierarchy, see <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceFragmentCompat.html#onPreferenceTreeClick(android.support.v7.preference.Preference)"> onPreferenceTreeClick(Preference) </a> </code></pre> . </p>\n<pre><code>public abstract class PreferenceFragmentCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceFragmentCompat.html
PreferenceFragmentCompat.OnPreferenceDisplayDialogCallback	A										<section class="prog__container"><p></p>\n<pre><code>public static interface PreferenceFragmentCompat.OnPreferenceDisplayDialogCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceFragmentCompat.OnPreferenceDisplayDialogCallback.html
PreferenceFragmentCompat.OnPreferenceStartFragmentCallback	A										<section class="prog__container"><p> Interface that PreferenceFragment's containing activity should implement to be able to process preference items that wish to switch to a specified fragment.</p>\n<pre><code>public static interface PreferenceFragmentCompat.OnPreferenceStartFragmentCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceFragmentCompat.OnPreferenceStartFragmentCallback.html
PreferenceFragmentCompat.OnPreferenceStartScreenCallback	A										<section class="prog__container"><p> Interface that PreferenceFragment's containing activity should implement to be able to process preference items that wish to switch to a new screen of preferences.</p>\n<pre><code>public static interface PreferenceFragmentCompat.OnPreferenceStartScreenCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceFragmentCompat.OnPreferenceStartScreenCallback.html
PreferenceGroup	A										<section class="prog__container"><p> A container for multiple <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> objects. It is a base class for Preference objects that are parents, such as <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceCategory.html"> PreferenceCategory </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> . </p>\n<pre><code>public abstract class PreferenceGroup\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceGroup.html
PreferenceGroup.PreferencePositionCallback	A										<section class="prog__container"><p> Interface for PreferenceGroup Adapters to implement so that <pre><code> <a href="https://developer.android.com/reference/android/support/v14/preference/PreferenceFragment.html#scrollToPreference(java.lang.String)"> scrollToPreference(String) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v14/preference/PreferenceFragment.html#scrollToPreference(android.support.v7.preference.Preference)"> scrollToPreference(Preference) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceFragmentCompat.html#scrollToPreference(java.lang.String)"> scrollToPreference(String) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceFragmentCompat.html#scrollToPreference(android.support.v7.preference.Preference)"> scrollToPreference(Preference) </a> </code></pre> can determine the correct scroll position to request.</p>\n<pre><code>public static interface PreferenceGroup.PreferencePositionCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceGroup.PreferencePositionCallback.html
PreferenceManager	A										<section class="prog__container"><p> Used to help create <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> hierarchies from activities or XML. <p> In most cases, clients should use <pre><code> <a href="https://developer.android.com/reference/android/support/v14/preference/PreferenceFragment.html#addPreferencesFromResource(int)"> addPreferencesFromResource(int) </a> </code></pre> , or <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceFragmentCompat.html#addPreferencesFromResource(int)"> addPreferencesFromResource(int) </a> </code></pre> . </p>\n<pre><code>public class PreferenceManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceManager.html
PreferenceManager.OnDisplayPreferenceDialogListener	A										<section class="prog__container"><p> Interface definition for a class that will be called when a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> requests to display a dialog.</p>\n<pre><code>public static interface PreferenceManager.OnDisplayPreferenceDialogListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceManager.OnDisplayPreferenceDialogListener.html
PreferenceManager.OnNavigateToScreenListener	A										<section class="prog__container"><p> Interface definition for a class that will be called when a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> requests navigation.</p>\n<pre><code>public static interface PreferenceManager.OnNavigateToScreenListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceManager.OnNavigateToScreenListener.html
PreferenceManager.OnPreferenceTreeClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> in the hierarchy rooted at this <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> is clicked.</p>\n<pre><code>public static interface PreferenceManager.OnPreferenceTreeClickListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceManager.OnPreferenceTreeClickListener.html
PreferenceManager.PreferenceComparisonCallback	A										<section class="prog__container"><p> Callback class to be used by the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html"> RecyclerView.Adapter </a> </code></pre> associated with the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> , used to determine when two <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> objects are semantically and visually the same.</p>\n<pre><code>public static abstract class PreferenceManager.PreferenceComparisonCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceManager.PreferenceComparisonCallback.html
PreferenceManager.SimplePreferenceComparisonCallback	A										<section class="prog__container"><p> A basic implementation of <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceManager.PreferenceComparisonCallback.html"> PreferenceManager.PreferenceComparisonCallback </a> </code></pre> suitable for use with the default <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> classes. If the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> contains custom <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> subclasses, you must override <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceManager.SimplePreferenceComparisonCallback.html#arePreferenceContentsTheSame(android.support.v7.preference.Preference, android.support.v7.preference.Preference)"> arePreferenceContentsTheSame(Preference, Preference) </a> </code></pre></p>\n<pre><code>public static class PreferenceManager.SimplePreferenceComparisonCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceManager.SimplePreferenceComparisonCallback.html
PreferenceScreen	A										<section class="prog__container"><p> Represents a top-level <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> that is the root of a Preference hierarchy. A <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceFragmentCompat.html"> PreferenceFragmentCompat </a> </code></pre> points to an instance of this class to show the preferences. To instantiate this class, use <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceManager.html#createPreferenceScreen(android.content.Context)"> createPreferenceScreen(android.content.Context) </a> </code></pre> . <ul> This class can appear in two places: <li> When a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceFragmentCompat.html"> PreferenceFragmentCompat </a> </code></pre> points to this, it is used as the root and is not shown (only the contained preferences are shown). <li> When it appears inside another preference hierarchy, it is shown and serves as the gateway to another screen of preferences (either by showing another screen of preferences as a <pre><code> <a href="https://developer.android.com/reference/android/app/Dialog.html"> Dialog </a> </code></pre> or via a <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#startActivity(android.content.Intent)"> startActivity(android.content.Intent) </a> </code></pre> from the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html#getIntent()"> getIntent() </a> </code></pre> ). The children of this <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> are NOT shown in the screen that this <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html"> PreferenceScreen </a> </code></pre> is shown in. Instead, a separate screen will be shown when this preference is clicked. </li> </li> </ul> <p> Here's an example XML layout of a PreferenceScreen: </p>\n<pre><code>public final class PreferenceScreen\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceScreen.html
PreferenceViewHolder	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html"> RecyclerView.ViewHolder </a> </code></pre> class which caches views associated with the default <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> layouts. Cached views can be retrieved by calling <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceViewHolder.html#findViewById(int)"> findViewById(int) </a> </code></pre> .</p>\n<pre><code>public class PreferenceViewHolder\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/PreferenceViewHolder.html
R.attr	A										<section class="prog__container"><p> Attribute indicating whether the slider within this preference can be adjusted, that is pressing left/right keys when this preference is focused will move the slider accordingly (e.g.</p>\n<pre><code>public static final class R.attr\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/R.attr.html
R.dimen	A										<section class="prog__container"><p> Minimum space to allocate to the left of a preference item for an icon.</p>\n<pre><code>public static final class R.dimen\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/R.dimen.html
R	A										<section class="prog__container"><p></p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/R.html
R.id	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.id\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/R.id.html
R.layout	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.layout\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/R.layout.html
R.string	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.string\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/R.string.html
R.style	A										<section class="prog__container"><p></p>\n<pre><code>public static final class R.style\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/R.style.html
R.styleable	A										<section class="prog__container"><p> Used to access some android attrs <p> Includes the following attributes: </p>\n<pre><code>public static final class R.styleable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/R.styleable.html
SeekBarPreference	A										<section class="prog__container"><p> Preference based on android.preference.SeekBarPreference but uses support v7 preference as base. It contains a title and a seekbar and an optional seekbar value TextView. The actual preference layout is customizable by setting <pre><code> android:layout </code></pre> on the preference widget layout or <pre><code> seekBarPreferenceStyle </code></pre> attribute. The seekbar within the preference can be defined adjustable or not by setting <pre><code> adjustable </code></pre> attribute. If adjustable, the preference will be responsive to DPAD left/right keys. Otherwise, it skips those keys. The seekbar value view can be shown or disabled by setting <pre><code> showSeekBarValue </code></pre> attribute to true or false, respectively. Other SeekBar specific attributes (e.g. <pre><code> title, summary, defaultValue, min, max </code></pre> ) can be set directly on the preference widget layout.</p>\n<pre><code>public class SeekBarPreference\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/SeekBarPreference.html
SwitchPreferenceCompat	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/support/v7/preference/Preference.html"> Preference </a> </code></pre> that provides a two-state toggleable option. <p> This preference will store a boolean into the SharedPreferences. </p>\n<pre><code>public class SwitchPreferenceCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/SwitchPreferenceCompat.html
TwoStatePreference	A										<section class="prog__container"><p> Common base class for preferences that have two selectable states, persist a boolean value in SharedPreferences, and may have dependent preferences that are enabled/disabled based on the current state.</p>\n<pre><code>public abstract class TwoStatePreference\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/preference/TwoStatePreference.html
android.support.v7.recyclerview	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/recyclerview/package-summary.html
R.attr	A										<section class="prog__container"><p> Class name of the Layout Manager to be used.</p>\n<pre><code>public static final class R.attr\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/recyclerview/R.attr.html
R.dimen	A										<section class="prog__container"><p> The max amount of scroll ItemTouchHelper will trigger if dragged view is out of RecyclerView's bounds.</p>\n<pre><code>public static final class R.dimen\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/recyclerview/R.dimen.html
R	A										<section class="prog__container"><p></p>\n<pre><code>public final class R\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/recyclerview/R.html
R.id	A										<section class="prog__container"><p> ItemTouchHelper uses this id to save a View's original elevation.</p>\n<pre><code>public static final class R.id\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/recyclerview/R.id.html
R.styleable	A										<section class="prog__container"><p> Attributes that can be used with a RecyclerView.</p>\n<pre><code>public static final class R.styleable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/recyclerview/R.styleable.html
AsyncListUtil.DataCallback	A										<section class="prog__container"><p> The callback that provides data access for <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/AsyncListUtil.html"> AsyncListUtil </a> </code></pre> . <p> All methods are called on the background thread. </p>\n<pre><code>public static abstract class AsyncListUtil.DataCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/util/AsyncListUtil.DataCallback.html
AsyncListUtil	A										<section class="prog__container"><p> A utility class that supports asynchronous content loading. <p> It can be used to load Cursor data in chunks without querying the Cursor on the UI Thread while keeping UI and cache synchronous for better user experience. <p> It loads the data on a background thread and keeps only a limited number of fixed sized chunks in memory at all times. <p> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/AsyncListUtil.html"> AsyncListUtil </a> </code></pre> queries the currently visible range through <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/AsyncListUtil.ViewCallback.html"> AsyncListUtil.ViewCallback </a> </code></pre> , loads the required data items in the background through <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/AsyncListUtil.DataCallback.html"> AsyncListUtil.DataCallback </a> </code></pre> , and notifies a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/AsyncListUtil.ViewCallback.html"> AsyncListUtil.ViewCallback </a> </code></pre> when the data is loaded. It may load some extra items for smoother scrolling. <p> Note that this class uses a single thread to load the data, so it suitable to load data from secondary storage such as disk, but not from network. <p> This class is designed to work with <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html"> RecyclerView </a> </code></pre> , but it does not depend on it and can be used with other list views. </p>\n<pre><code>public class AsyncListUtil\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/util/AsyncListUtil.html
AsyncListUtil.ViewCallback	A										<section class="prog__container"><p> The callback that links <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/AsyncListUtil.html"> AsyncListUtil </a> </code></pre> with the list view. <p> All methods are called on the main thread. </p>\n<pre><code>public static abstract class AsyncListUtil.ViewCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/util/AsyncListUtil.ViewCallback.html
BatchingListUpdateCallback	A										<section class="prog__container"><p> Wraps a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/ListUpdateCallback.html"> ListUpdateCallback </a> </code></pre> callback and batches operations that can be merged. <p> For instance, when 2 add operations comes that adds 2 consecutive elements, BatchingListUpdateCallback merges them and calls the wrapped callback only once. <p> This is a general purpose class and is also used by <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/DiffUtil.DiffResult.html"> DiffResult </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/SortedList.html"> SortedList </a> </code></pre> to minimize the number of updates that are dispatched. <p> If you use this class to batch updates, you must call <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/BatchingListUpdateCallback.html#dispatchLastEvent()"> dispatchLastEvent() </a> </code></pre> when the stream of update events drain. </p>\n<pre><code>public class BatchingListUpdateCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/util/BatchingListUpdateCallback.html
DiffUtil.Callback	A										<section class="prog__container"><p> A Callback class used by DiffUtil while calculating the diff between two lists.</p>\n<pre><code>public static abstract class DiffUtil.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/util/DiffUtil.Callback.html
DiffUtil.DiffResult	A										<section class="prog__container"><p> This class holds the information about the result of a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/DiffUtil.html#calculateDiff(android.support.v7.util.DiffUtil.Callback, boolean)"> calculateDiff(Callback, boolean) </a> </code></pre> call. <p> You can consume the updates in a DiffResult via <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/DiffUtil.DiffResult.html#dispatchUpdatesTo(android.support.v7.util.ListUpdateCallback)"> dispatchUpdatesTo(ListUpdateCallback) </a> </code></pre> or directly stream the results into a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html"> RecyclerView.Adapter </a> </code></pre> via <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/DiffUtil.DiffResult.html#dispatchUpdatesTo(android.support.v7.widget.RecyclerView.Adapter)"> dispatchUpdatesTo(RecyclerView.Adapter) </a> </code></pre> . </p>\n<pre><code>public static class DiffUtil.DiffResult\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/util/DiffUtil.DiffResult.html
DiffUtil	A										<section class="prog__container"><p> DiffUtil is a utility class that can calculate the difference between two lists and output a list of update operations that converts the first list into the second one. <p> It can be used to calculate updates for a RecyclerView Adapter. <p> DiffUtil uses Eugene W. Myers's difference algorithm to calculate the minimal number of updates to convert one list into another. Myers's algorithm does not handle items that are moved so DiffUtil runs a second pass on the result to detect items that were moved. <p> If the lists are large, this operation may take significant time so you are advised to run this on a background thread, get the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/DiffUtil.DiffResult.html"> DiffUtil.DiffResult </a> </code></pre> then apply it on the RecyclerView on the main thread. <p> This algorithm is optimized for space and uses O(N) space to find the minimal number of addition and removal operations between the two lists. It has O(N + D^2) expected time performance where D is the length of the edit script. <p> If move detection is enabled, it takes an additional O(N^2) time where N is the total number of added and removed items. If your lists are already sorted by the same constraint (e.g. a created timestamp for a list of posts), you can disable move detection to improve performance. <p> The actual runtime of the algorithm significantly depends on the number of changes in the list and the cost of your comparison methods. Below are some average run times for reference: (The test list is composed of random UUID Strings and the tests are run on Nexus 5X with M) <ul> <li> 100 items and 10 modifications: avg: 0.39 ms, median: 0.35 ms <li> 100 items and 100 modifications: 3.82 ms, median: 3.75 ms <li> 100 items and 100 modifications without moves: 2.09 ms, median: 2.06 ms <li> 1000 items and 50 modifications: avg: 4.67 ms, median: 4.59 ms <li> 1000 items and 50 modifications without moves: avg: 3.59 ms, median: 3.50 ms <li> 1000 items and 200 modifications: 27.07 ms, median: 26.92 ms <li> 1000 items and 200 modifications without moves: 13.54 ms, median: 13.36 ms </li> </li> </li> </li> </li> </li> </li> </ul> <p> Due to implementation constraints, the max size of the list can be 2^26. </p>\n<pre><code>public class DiffUtil\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/util/DiffUtil.html
ListUpdateCallback	A										<section class="prog__container"><p> An interface that can receive Update operations that are applied to a list. <p> This class can be used together with DiffUtil to detect changes between two lists. </p>\n<pre><code>public interface ListUpdateCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/util/ListUpdateCallback.html
android.support.v7.util	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/util/package-summary.html
SortedList.BatchedCallback	A										<section class="prog__container"><p> A callback implementation that can batch notify events dispatched by the SortedList. <p> This class can be useful if you want to do multiple operations on a SortedList but don't want to dispatch each event one by one, which may result in a performance issue. <p> For example, if you are going to add multiple items to a SortedList, BatchedCallback call convert individual <pre><code> onInserted(index, 1) </code></pre> calls into one <pre><code> onInserted(index, N) </code></pre> if items are added into consecutive indices. This change can help RecyclerView resolve changes much more easily. <p> If consecutive changes in the SortedList are not suitable for batching, BatchingCallback dispatches them as soon as such case is detected. After your edits on the SortedList is complete, you <b> must </b> always call <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/SortedList.BatchedCallback.html#dispatchLastEvent()"> dispatchLastEvent() </a> </code></pre> to flush all changes to the Callback. </p>\n<pre><code>public static class SortedList.BatchedCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/util/SortedList.BatchedCallback.html
SortedList.Callback	A										<section class="prog__container"><p> The class that controls the behavior of the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/SortedList.html"> SortedList </a> </code></pre> . <p> It defines how items should be sorted and how duplicates should be handled. <p> SortedList calls the callback methods on this class to notify changes about the underlying data. </p>\n<pre><code>public static abstract class SortedList.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/util/SortedList.Callback.html
SortedList	A										<section class="prog__container"><p> A Sorted list implementation that can keep items in order and also notify for changes in the list such that it can be bound to a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html"> RecyclerView.Adapter </a> </code></pre> . <p> It keeps items ordered using the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/SortedList.Callback.html#compare(T2, T2)"> compare(Object, Object) </a> </code></pre> method and uses binary search to retrieve items. If the sorting criteria of your items may change, make sure you call appropriate methods while editing them to avoid data inconsistencies. <p> You can control the order of items and change notifications via the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/SortedList.Callback.html"> SortedList.Callback </a> </code></pre> parameter. </p>\n<pre><code>public class SortedList\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/util/SortedList.html
ActionMode.Callback	A										<section class="prog__container"><p> Callback interface for action modes. Supplied to <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/AppCompatDelegate.html#startSupportActionMode(android.support.v7.view.ActionMode.Callback)"> startSupportActionMode(Callback) </a> </code></pre> (Callback)}, a Callback configures and handles events raised by a user's interaction with an action mode. <p> An action mode's lifecycle is as follows: <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/view/ActionMode.Callback.html#onCreateActionMode(android.support.v7.view.ActionMode, android.view.Menu)"> onCreateActionMode(ActionMode, Menu) </a> </code></pre> once on initial creation </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/view/ActionMode.Callback.html#onPrepareActionMode(android.support.v7.view.ActionMode, android.view.Menu)"> onPrepareActionMode(ActionMode, Menu) </a> </code></pre> after creation and any time the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/view/ActionMode.html"> ActionMode </a> </code></pre> is invalidated </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/view/ActionMode.Callback.html#onActionItemClicked(android.support.v7.view.ActionMode, android.view.MenuItem)"> onActionItemClicked(ActionMode, MenuItem) </a> </code></pre> any time a contextual action button is clicked </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/view/ActionMode.Callback.html#onDestroyActionMode(android.support.v7.view.ActionMode)"> onDestroyActionMode(ActionMode) </a> </code></pre> when the action mode is closed </li> </ul> </p>\n<pre><code>public static interface ActionMode.Callback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/view/ActionMode.Callback.html
ActionMode	A										<section class="prog__container"><p> Represents a contextual mode of the user interface. Action modes can be used to provide alternative interaction modes and replace parts of the normal UI until finished. Examples of good action modes include text selection and contextual actions. </p>\n<pre><code>public abstract class ActionMode\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/view/ActionMode.html
CollapsibleActionView	A										<section class="prog__container"><p> When a <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> implements this interface it will receive callbacks when expanded or collapsed as an action view alongside the optional, app-specified callbacks to <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/MenuItemCompat.OnActionExpandListener.html"> MenuItemCompat.OnActionExpandListener </a> </code></pre> . <p> See <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/MenuItemCompat.html"> MenuItemCompat </a> </code></pre> for more information about action views. See <pre><code> <a href="https://developer.android.com/reference/android/app/ActionBar.html"> ActionBar </a> </code></pre> for more information about the action bar. </p>\n<pre><code>public interface CollapsibleActionView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/view/CollapsibleActionView.html
android.support.v7.view	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/view/package-summary.html
ActionMenuView	A										<section class="prog__container"><p> ActionMenuView is a presentation of a series of menu options as a View. It provides several top level options as action buttons while spilling remaining options over as items in an overflow menu. This allows applications to present packs of actions inline with specific or repeating content.</p>\n<pre><code>public class ActionMenuView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/ActionMenuView.html
ActionMenuView.LayoutParams	A										<section class="prog__container"><p> Special value for the height or width requested by a View.</p>\n<pre><code>public static class ActionMenuView.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/ActionMenuView.LayoutParams.html
ActionMenuView.OnMenuItemClickListener	A										<section class="prog__container"><p> Interface responsible for receiving menu item click events if the items themselves do not have individual item click listeners.</p>\n<pre><code>public static interface ActionMenuView.OnMenuItemClickListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/ActionMenuView.OnMenuItemClickListener.html
AppCompatAutoCompleteTextView	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/widget/AutoCompleteTextView.html"> AutoCompleteTextView </a> </code></pre> which supports compatible features on older version of the platform, including: <ul> <li> Supports <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#textAllCaps"> textAllCaps </a> </code></pre> style attribute which works back to <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#GINGERBREAD"> Gingerbread </a> </code></pre> . </li> <li> Allows dynamic tint of it background via the background tint methods in <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewCompat.html"> ViewCompat </a> </code></pre> . </li> <li> Allows setting of the background tint using <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#backgroundTint"> backgroundTint </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#backgroundTintMode"> backgroundTintMode </a> </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> <a href="https://developer.android.com/reference/android/widget/AutoCompleteTextView.html"> AutoCompleteTextView </a> </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p>\n<pre><code>public class AppCompatAutoCompleteTextView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatAutoCompleteTextView.html
AppCompatButton	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/widget/Button.html"> Button </a> </code></pre> which supports compatible features on older version of the platform, including: <ul> <li> Supports <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#textAllCaps"> textAllCaps </a> </code></pre> style attribute which works back to <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#GINGERBREAD"> Gingerbread </a> </code></pre> . </li> <li> Allows dynamic tint of it background via the background tint methods in <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewCompat.html"> ViewCompat </a> </code></pre> . </li> <li> Allows setting of the background tint using <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#backgroundTint"> backgroundTint </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#backgroundTintMode"> backgroundTintMode </a> </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> <a href="https://developer.android.com/reference/android/widget/Button.html"> Button </a> </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p>\n<pre><code>public class AppCompatButton\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatButton.html
AppCompatCheckBox	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/widget/CheckBox.html"> CheckBox </a> </code></pre> which supports compatible features on older version of the platform, including: <ul> <li> Allows dynamic tint of it background via the background tint methods in <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/CompoundButtonCompat.html"> CompoundButtonCompat </a> </code></pre> . </li> <li> Allows setting of the background tint using <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#buttonTint"> buttonTint </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#buttonTintMode"> buttonTintMode </a> </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> <a href="https://developer.android.com/reference/android/widget/CheckBox.html"> CheckBox </a> </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p>\n<pre><code>public class AppCompatCheckBox\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatCheckBox.html
AppCompatCheckedTextView	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/widget/CheckedTextView.html"> CheckedTextView </a> </code></pre> which supports compatible features on older version of the platform. <p> This will automatically be used when you use <pre><code> <a href="https://developer.android.com/reference/android/widget/CheckedTextView.html"> CheckedTextView </a> </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p>\n<pre><code>public class AppCompatCheckedTextView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatCheckedTextView.html
AppCompatEditText	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/widget/EditText.html"> EditText </a> </code></pre> which supports compatible features on older version of the platform, including: <ul> <li> Supports <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#textAllCaps"> textAllCaps </a> </code></pre> style attribute which works back to <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#GINGERBREAD"> Gingerbread </a> </code></pre> . </li> <li> Allows dynamic tint of it background via the background tint methods in <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewCompat.html"> ViewCompat </a> </code></pre> . </li> <li> Allows setting of the background tint using <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#backgroundTint"> backgroundTint </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#backgroundTintMode"> backgroundTintMode </a> </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> <a href="https://developer.android.com/reference/android/widget/EditText.html"> EditText </a> </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p>\n<pre><code>public class AppCompatEditText\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatEditText.html
AppCompatImageButton	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/widget/ImageButton.html"> ImageButton </a> </code></pre> which supports compatible features on older version of the platform, including: <ul> <li> Allows dynamic tint of it background via the background tint methods in <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewCompat.html"> ViewCompat </a> </code></pre> . </li> <li> Allows setting of the background tint using <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#backgroundTint"> backgroundTint </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#backgroundTintMode"> backgroundTintMode </a> </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> <a href="https://developer.android.com/reference/android/widget/ImageButton.html"> ImageButton </a> </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p>\n<pre><code>public class AppCompatImageButton\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatImageButton.html
AppCompatImageView	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/widget/ImageView.html"> ImageView </a> </code></pre> which supports compatible features on older version of the platform, including: <ul> <li> Allows dynamic tint of it background via the background tint methods in <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewCompat.html"> ViewCompat </a> </code></pre> . </li> <li> Allows setting of the background tint using <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#backgroundTint"> backgroundTint </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#backgroundTintMode"> backgroundTintMode </a> </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> <a href="https://developer.android.com/reference/android/widget/ImageView.html"> ImageView </a> </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p>\n<pre><code>public class AppCompatImageView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatImageView.html
AppCompatMultiAutoCompleteTextView	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/widget/MultiAutoCompleteTextView.html"> MultiAutoCompleteTextView </a> </code></pre> which supports compatible features on older version of the platform, including: <ul> <li> Supports <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#textAllCaps"> textAllCaps </a> </code></pre> style attribute which works back to <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#GINGERBREAD"> Gingerbread </a> </code></pre> . </li> <li> Allows dynamic tint of it background via the background tint methods in <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewCompat.html"> ViewCompat </a> </code></pre> . </li> <li> Allows setting of the background tint using <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#backgroundTint"> backgroundTint </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#backgroundTintMode"> backgroundTintMode </a> </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> <a href="https://developer.android.com/reference/android/widget/MultiAutoCompleteTextView.html"> MultiAutoCompleteTextView </a> </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p>\n<pre><code>public class AppCompatMultiAutoCompleteTextView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatMultiAutoCompleteTextView.html
AppCompatRadioButton	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/widget/RadioButton.html"> RadioButton </a> </code></pre> which supports compatible features on older version of the platform, including: <ul> <li> Allows dynamic tint of it background via the background tint methods in <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/CompoundButtonCompat.html"> CompoundButtonCompat </a> </code></pre> . </li> <li> Allows setting of the background tint using <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#buttonTint"> buttonTint </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#buttonTintMode"> buttonTintMode </a> </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> <a href="https://developer.android.com/reference/android/widget/RadioButton.html"> RadioButton </a> </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p>\n<pre><code>public class AppCompatRadioButton\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatRadioButton.html
AppCompatRatingBar	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/widget/RatingBar.html"> RatingBar </a> </code></pre> which supports compatible features on older version of the platform. <p> This will automatically be used when you use <pre><code> <a href="https://developer.android.com/reference/android/widget/RatingBar.html"> RatingBar </a> </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p>\n<pre><code>public class AppCompatRatingBar\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatRatingBar.html
AppCompatSeekBar	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/widget/SeekBar.html"> SeekBar </a> </code></pre> which supports compatible features on older version of the platform. <p> This will automatically be used when you use <pre><code> <a href="https://developer.android.com/reference/android/widget/SeekBar.html"> SeekBar </a> </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p>\n<pre><code>public class AppCompatSeekBar\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatSeekBar.html
AppCompatSpinner	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/widget/Spinner.html"> Spinner </a> </code></pre> which supports compatible features on older versions of the platform, including: <ul> <li> Dynamic tinting of the background via the background tint methods in <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewCompat.html"> ViewCompat </a> </code></pre> . </li> <li> Configuring the background tint using <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#backgroundTint"> backgroundTint </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#backgroundTintMode"> backgroundTintMode </a> </code></pre> . </li> <li> Setting the popup theme using <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#popupTheme"> popupTheme </a> </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> <a href="https://developer.android.com/reference/android/widget/Spinner.html"> Spinner </a> </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p>\n<pre><code>public class AppCompatSpinner\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatSpinner.html
AppCompatTextView	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html"> TextView </a> </code></pre> which supports compatible features on older version of the platform, including: <ul> <li> Supports <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#textAllCaps"> textAllCaps </a> </code></pre> style attribute which works back to <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#GINGERBREAD"> Gingerbread </a> </code></pre> . </li> <li> Allows dynamic tint of it background via the background tint methods in <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewCompat.html"> ViewCompat </a> </code></pre> . </li> <li> Allows setting of the background tint using <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#backgroundTint"> backgroundTint </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/appcompat/R.attr.html#backgroundTintMode"> backgroundTintMode </a> </code></pre> . </li> </ul> <p> This will automatically be used when you use <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html"> TextView </a> </code></pre> in your layouts. You should only need to manually use this class when writing custom views. </p>\n<pre><code>public class AppCompatTextView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/AppCompatTextView.html
CardView	A										<section class="prog__container"><p> A FrameLayout with a rounded corner background and shadow. <p> CardView uses <pre><code> elevation </code></pre> property on Lollipop for shadows and falls back to a custom emulated shadow implementation on older platforms. <p> Due to expensive nature of rounded corner clipping, on platforms before Lollipop, CardView does not clip its children that intersect with rounded corners. Instead, it adds padding to avoid such intersection (See <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/CardView.html#setPreventCornerOverlap(boolean)"> setPreventCornerOverlap(boolean) </a> </code></pre> to change this behavior). <p> Before Lollipop, CardView adds padding to its content and draws shadows to that area. This padding amount is equal to <pre><code> maxCardElevation + (1 - cos45) * cornerRadius </code></pre> on the sides and <pre><code> maxCardElevation * 1.5 + (1 - cos45) * cornerRadius </code></pre> on top and bottom. <p> Since padding is used to offset content for shadows, you cannot set padding on CardView. Instead, you can use content padding attributes in XML or <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/CardView.html#setContentPadding(int, int, int, int)"> setContentPadding(int, int, int, int) </a> </code></pre> in code to set the padding between the edges of the CardView and children of CardView. <p> Note that, if you specify exact dimensions for the CardView, because of the shadows, its content area will be different between platforms before Lollipop and after Lollipop. By using api version specific resource values, you can avoid these changes. Alternatively, If you want CardView to add inner padding on platforms Lollipop and after as well, you can call <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/CardView.html#setUseCompatPadding(boolean)"> setUseCompatPadding(boolean) </a> </code></pre> and pass <pre><code> true </code></pre> . <p> To change CardView's elevation in a backward compatible way, use <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/CardView.html#setCardElevation(float)"> setCardElevation(float) </a> </code></pre> . CardView will use elevation API on Lollipop and before Lollipop, it will change the shadow size. To avoid moving the View while shadow size is changing, shadow size is clamped by <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/CardView.html#getMaxCardElevation()"> getMaxCardElevation() </a> </code></pre> . If you want to change elevation dynamically, you should call <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/CardView.html#setMaxCardElevation(float)"> setMaxCardElevation(float) </a> </code></pre> when CardView is initialized. </p>\n<pre><code>public class CardView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/CardView.html
DefaultItemAnimator	A										<section class="prog__container"><p> This implementation of <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html"> RecyclerView.ItemAnimator </a> </code></pre> provides basic animations on remove, add, and move events that happen to the items in a RecyclerView. RecyclerView uses a DefaultItemAnimator by default.</p>\n<pre><code>public class DefaultItemAnimator\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/DefaultItemAnimator.html
DividerItemDecoration	A										<section class="prog__container"><p> DividerItemDecoration is a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemDecoration.html"> RecyclerView.ItemDecoration </a> </code></pre> that can be used as a divider between items of a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.html"> LinearLayoutManager </a> </code></pre> . It supports both <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/DividerItemDecoration.html#HORIZONTAL"> HORIZONTAL </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/DividerItemDecoration.html#VERTICAL"> VERTICAL </a> </code></pre> orientations. <pre> mDividerItemDecoration = new DividerItemDecoration(recyclerView.getContext(), mLayoutManager.getOrientation()); recyclerView.addItemDecoration(mDividerItemDecoration); </pre></p>\n<pre><code>public class DividerItemDecoration\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/DividerItemDecoration.html
GridLayout.Alignment	A										<section class="prog__container"><p> Alignments specify where a view should be placed within a cell group and what size it should be. <p> The <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html"> GridLayout.LayoutParams </a> </code></pre> class contains a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html#rowSpec"> rowSpec </a> </code></pre> and a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html#columnSpec"> columnSpec </a> </code></pre> each of which contains an <pre><code> alignment </code></pre> . Overall placement of the view in the cell group is specified by the two alignments which act along each axis independently. <p> The GridLayout class defines the most common alignments used in general layout: <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#TOP"> TOP </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#LEFT"> LEFT </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#BOTTOM"> BOTTOM </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#RIGHT"> RIGHT </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#START"> START </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#END"> END </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#CENTER"> CENTER </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#BASELINE"> BASELINE </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#FILL"> FILL </a> </code></pre> . </p>\n<pre><code>public static abstract class GridLayout.Alignment\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/GridLayout.Alignment.html
GridLayout	A										<section class="prog__container"><p> A layout that places its children in a rectangular <em> grid </em> . <p> The grid is composed of a set of infinitely thin lines that separate the viewing area into <em> cells </em> . Throughout the API, grid lines are referenced by grid <em> indices </em> . A grid with <pre><code> N </code></pre> columns has <pre><code> N + 1 </code></pre> grid indices that run from <pre><code> 0 </code></pre> through <pre><code> N </code></pre> inclusive. Regardless of how GridLayout is configured, grid index <pre><code> 0 </code></pre> is fixed to the leading edge of the container and grid index <pre><code> N </code></pre> is fixed to its trailing edge (after padding is taken into account). <h4> Row and Column Specs </h4> Children occupy one or more contiguous cells, as defined by their <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html#rowSpec"> rowSpec </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html#columnSpec"> columnSpec </a> </code></pre> layout parameters. Each spec defines the set of rows or columns that are to be occupied; and how children should be aligned within the resulting group of cells. Although cells do not normally overlap in a GridLayout, GridLayout does not prevent children being defined to occupy the same cell or group of cells. In this case however, there is no guarantee that children will not themselves overlap after the layout operation completes. <h4> Default Cell Assignment </h4> If a child does not specify the row and column indices of the cell it wishes to occupy, GridLayout assigns cell locations automatically using its: <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#setOrientation(int)"> orientation </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#setRowCount(int)"> rowCount </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#setColumnCount(int)"> columnCount </a> </code></pre> properties. <h4> Space </h4> Space between children may be specified either by using instances of the dedicated <pre><code> <a href="https://developer.android.com/reference/android/support/v4/widget/Space.html"> Space </a> </code></pre> view or by setting the <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#leftMargin"> leftMargin </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#topMargin"> topMargin </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#rightMargin"> rightMargin </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#bottomMargin"> bottomMargin </a> </code></pre> layout parameters. When the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#setUseDefaultMargins(boolean)"> useDefaultMargins </a> </code></pre> property is set, default margins around children are automatically allocated based on the prevailing UI style guide for the platform. Each of the margins so defined may be independently overridden by an assignment to the appropriate layout parameter. Default values will generally produce a reasonable spacing between components but values may change between different releases of the platform. <h4> Excess Space Distribution </h4> GridLayout's distribution of excess space accommodates the principle of weight. In the event that no weights are specified, columns and rows are taken as flexible if their views specify some form of alignment within their groups. <p> The flexibility of a view is therefore influenced by its alignment which is, in turn, typically defined by setting the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html#setGravity(int)"> gravity </a> </code></pre> property of the child's layout parameters. If either a weight or alignment were defined along a given axis then the component is taken as <em> flexible </em> in that direction. If no weight or alignment was set, the component is instead assumed to be <em> inflexible </em> . <p> Multiple components in the same row or column group are considered to act in <em> parallel </em> . Such a group is flexible only if <em> all </em> of the components within it are flexible. Row and column groups that sit either side of a common boundary are instead considered to act in <em> series </em> . The composite group made of these two elements is flexible if <em> one </em> of its elements is flexible. <p> To make a column stretch, make sure all of the components inside it define a weight or a gravity. To prevent a column from stretching, ensure that one of the components in the column does not define a weight or a gravity. <p> When the principle of flexibility does not provide complete disambiguation, GridLayout's algorithms favour rows and columns that are closer to its <em> right </em> and <em> bottom </em> edges. To be more precise, GridLayout treats each of its layout parameters as a constraint in the a set of variables that define the grid-lines along a given axis. During layout, GridLayout solves the constraints so as to return the unique solution to those constraints for which all variables are less-than-or-equal-to the corresponding value in any other valid solution. <h4> Interpretation of GONE </h4> For layout purposes, GridLayout treats views whose visibility status is <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#GONE"> GONE </a> </code></pre> , as having zero width and height. This is subtly different from the policy of ignoring views that are marked as GONE outright. If, for example, a gone-marked view was alone in a column, that column would itself collapse to zero width if and only if no gravity was defined on the view. If gravity was defined, then the gone-marked view has no effect on the layout and the container should be laid out as if the view had never been added to it. GONE views are taken to have zero weight during excess space distribution. <p> These statements apply equally to rows as well as columns, and to groups of rows or columns. <p> See <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html"> GridLayout.LayoutParams </a> </code></pre> for a full description of the layout parameters used by GridLayout. </p>\n<pre><code>public class GridLayout\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/GridLayout.html
GridLayout.LayoutParams	A										<section class="prog__container"><p> Layout information associated with each of the children of a GridLayout. <p> GridLayout supports both row and column spanning and arbitrary forms of alignment within each cell group. The fundamental parameters associated with each cell group are gathered into their vertical and horizontal components and stored in the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html#rowSpec"> rowSpec </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html#columnSpec"> columnSpec </a> </code></pre> layout parameters. <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.Spec.html"> Specs </a> </code></pre> are immutable structures and may be shared between the layout parameters of different children. <p> The row and column specs contain the leading and trailing indices along each axis and together specify the four grid indices that delimit the cells of this cell group. <p> The alignment properties of the row and column specs together specify both aspects of alignment within the cell group. It is also possible to specify a child's alignment within its cell group by using the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html#setGravity(int)"> setGravity(int) </a> </code></pre> method. <p> The weight property is also included in Spec and specifies the proportion of any excess space that is due to the associated view. <h4> WRAP_CONTENT and MATCH_PARENT </h4> Because the default values of the <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#width"> width </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#height"> height </a> </code></pre> properties are both <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#WRAP_CONTENT"> WRAP_CONTENT </a> </code></pre> , this value never needs to be explicitly declared in the layout parameters of GridLayout's children. In addition, GridLayout does not distinguish the special size value <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#MATCH_PARENT"> MATCH_PARENT </a> </code></pre> from <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#WRAP_CONTENT"> WRAP_CONTENT </a> </code></pre> . A component's ability to expand to the size of the parent is instead controlled by the principle of <em> flexibility </em> , as discussed in <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html"> GridLayout </a> </code></pre> . <h4> Summary </h4> You should not need to use either of the special size values: <pre><code> WRAP_CONTENT </code></pre> or <pre><code> MATCH_PARENT </code></pre> when configuring the children of a GridLayout. <h4> Default values </h4> <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#width"> width </a> </code></pre> = <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#WRAP_CONTENT"> WRAP_CONTENT </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#height"> height </a> </code></pre> = <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#WRAP_CONTENT"> WRAP_CONTENT </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#topMargin"> topMargin </a> </code></pre> = 0 when <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#setUseDefaultMargins(boolean)"> useDefaultMargins </a> </code></pre> is <pre><code> false </code></pre> ; otherwise <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#UNDEFINED"> UNDEFINED </a> </code></pre> , to indicate that a default value should be computed on demand. </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#leftMargin"> leftMargin </a> </code></pre> = 0 when <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#setUseDefaultMargins(boolean)"> useDefaultMargins </a> </code></pre> is <pre><code> false </code></pre> ; otherwise <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#UNDEFINED"> UNDEFINED </a> </code></pre> , to indicate that a default value should be computed on demand. </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#bottomMargin"> bottomMargin </a> </code></pre> = 0 when <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#setUseDefaultMargins(boolean)"> useDefaultMargins </a> </code></pre> is <pre><code> false </code></pre> ; otherwise <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#UNDEFINED"> UNDEFINED </a> </code></pre> , to indicate that a default value should be computed on demand. </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#rightMargin"> rightMargin </a> </code></pre> = 0 when <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#setUseDefaultMargins(boolean)"> useDefaultMargins </a> </code></pre> is <pre><code> false </code></pre> ; otherwise <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#UNDEFINED"> UNDEFINED </a> </code></pre> , to indicate that a default value should be computed on demand. </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html#rowSpec"> rowSpec </a> </code></pre> <pre><code> .row </code></pre> = <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#UNDEFINED"> UNDEFINED </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html#rowSpec"> rowSpec </a> </code></pre> <pre><code> .rowSpan </code></pre> = 1 </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html#rowSpec"> rowSpec </a> </code></pre> <pre><code> .alignment </code></pre> = <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#BASELINE"> BASELINE </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html#rowSpec"> rowSpec </a> </code></pre> <pre><code> .weight </code></pre> = 0 </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html#columnSpec"> columnSpec </a> </code></pre> <pre><code> .column </code></pre> = <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#UNDEFINED"> UNDEFINED </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html#columnSpec"> columnSpec </a> </code></pre> <pre><code> .columnSpan </code></pre> = 1 </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html#columnSpec"> columnSpec </a> </code></pre> <pre><code> .alignment </code></pre> = <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#START"> START </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html#columnSpec"> columnSpec </a> </code></pre> <pre><code> .weight </code></pre> = 0 </li> </ul> See <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html"> GridLayout </a> </code></pre> for a more complete description of the conventions used by GridLayout in the interpretation of the properties of this class. </p>\n<pre><code>public static class GridLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/GridLayout.LayoutParams.html
GridLayout.Spec	A										<section class="prog__container"><p> A Spec defines the horizontal or vertical characteristics of a group of cells. Each spec. defines the <em> grid indices </em> and <em> alignment </em> along the appropriate axis. <p> The <em> grid indices </em> are the leading and trailing edges of this cell group. See <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html"> GridLayout </a> </code></pre> for a description of the conventions used by GridLayout for grid indices. <p> The <em> alignment </em> property specifies how cells should be aligned in this group. For row groups, this specifies the vertical alignment. For column groups, this specifies the horizontal alignment. <p> Use the following static methods to create specs: <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#spec(int)"> spec(int) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#spec(int, int)"> spec(int, int) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#spec(int, android.support.v7.widget.GridLayout.Alignment)"> spec(int, Alignment) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#spec(int, int, android.support.v7.widget.GridLayout.Alignment)"> spec(int, int, Alignment) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#spec(int, float)"> spec(int, float) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#spec(int, int, float)"> spec(int, int, float) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#spec(int, android.support.v7.widget.GridLayout.Alignment, float)"> spec(int, Alignment, float) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayout.html#spec(int, int, android.support.v7.widget.GridLayout.Alignment, float)"> spec(int, int, Alignment, float) </a> </code></pre> </li> </ul> </p>\n<pre><code>public static class GridLayout.Spec\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/GridLayout.Spec.html
GridLayoutManager.DefaultSpanSizeLookup	A										<section class="prog__container"><p> Default implementation for <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayoutManager.SpanSizeLookup.html"> GridLayoutManager.SpanSizeLookup </a> </code></pre> . Each item occupies 1 span.</p>\n<pre><code>public static final class GridLayoutManager.DefaultSpanSizeLookup\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/GridLayoutManager.DefaultSpanSizeLookup.html
GridLayoutManager	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html"> RecyclerView.LayoutManager </a> </code></pre> implementations that lays out items in a grid. <p> By default, each item occupies 1 span. You can change it by providing a custom <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayoutManager.SpanSizeLookup.html"> GridLayoutManager.SpanSizeLookup </a> </code></pre> instance via <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayoutManager.html#setSpanSizeLookup(android.support.v7.widget.GridLayoutManager.SpanSizeLookup)"> setSpanSizeLookup(SpanSizeLookup) </a> </code></pre> . </p>\n<pre><code>public class GridLayoutManager\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/GridLayoutManager.html
GridLayoutManager.LayoutParams	A										<section class="prog__container"><p> LayoutParams used by GridLayoutManager. <p> Note that if the orientation is <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.html#VERTICAL"> VERTICAL </a> </code></pre> , the width parameter is ignored and if the orientation is <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.html#HORIZONTAL"> HORIZONTAL </a> </code></pre> the height parameter is ignored because child view is expected to fill all of the space given to it. </p>\n<pre><code>public static class GridLayoutManager.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/GridLayoutManager.LayoutParams.html
GridLayoutManager.SpanSizeLookup	A										<section class="prog__container"><p> A helper class to provide the number of spans each item occupies. <p> Default implementation sets each item to occupy exactly 1 span. </p>\n<pre><code>public static abstract class GridLayoutManager.SpanSizeLookup\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/GridLayoutManager.SpanSizeLookup.html
LinearLayoutCompat	A										<section class="prog__container"><p> A Layout that arranges its children in a single column or a single row. The direction of the row can be set by calling <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/LinearLayoutCompat.html#setOrientation(int)"> setOrientation() </a> </code></pre> . You can also specify gravity, which specifies the alignment of all the child elements by calling <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/LinearLayoutCompat.html#setGravity(int)"> setGravity() </a> </code></pre> or specify that specific children grow to fill up any remaining space in the layout by setting the <em> weight </em> member of <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/LinearLayoutCompat.LayoutParams.html"> LinearLayoutCompat.LayoutParams </a> </code></pre> . The default orientation is horizontal. <p> See the <a href="https://developer.android.com/guide/topics/ui/layout/linear.html"> Linear Layout </a> guide. </p>\n<pre><code>public class LinearLayoutCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/LinearLayoutCompat.html
LinearLayoutCompat.LayoutParams	A										<section class="prog__container"><p> Per-child layout information associated with ViewLinearLayout.</p>\n<pre><code>public static class LinearLayoutCompat.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/LinearLayoutCompat.LayoutParams.html
LinearLayoutManager	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html"> RecyclerView.LayoutManager </a> </code></pre> implementation which provides similar functionality to <pre><code> <a href="https://developer.android.com/reference/android/widget/ListView.html"> ListView </a> </code></pre> .</p>\n<pre><code>public class LinearLayoutManager\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.html
LinearLayoutManager.LayoutChunkResult	A										<section class="prog__container"><p></p>\n<pre><code>protected static class LinearLayoutManager.LayoutChunkResult\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.LayoutChunkResult.html
LinearSmoothScroller	A										<section class="prog__container"><p> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.SmoothScroller.html"> RecyclerView.SmoothScroller </a> </code></pre> implementation which uses a <pre><code> <a href="https://developer.android.com/reference/android/view/animation/LinearInterpolator.html"> LinearInterpolator </a> </code></pre> until the target position becomes a child of the RecyclerView and then uses a <pre><code> <a href="https://developer.android.com/reference/android/view/animation/DecelerateInterpolator.html"> DecelerateInterpolator </a> </code></pre> to slowly approach to target position. <p> If the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html"> RecyclerView.LayoutManager </a> </code></pre> you are using does not implement the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.SmoothScroller.ScrollVectorProvider.html"> RecyclerView.SmoothScroller.ScrollVectorProvider </a> </code></pre> interface, then you must override the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/LinearSmoothScroller.html#computeScrollVectorForPosition(int)"> computeScrollVectorForPosition(int) </a> </code></pre> method. All the LayoutManagers bundled with the support library implement this interface. </p>\n<pre><code>public class LinearSmoothScroller\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/LinearSmoothScroller.html
LinearSnapHelper	A										<section class="prog__container"><p> Implementation of the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/SnapHelper.html"> SnapHelper </a> </code></pre> supporting snapping in either vertical or horizontal orientation. <p> The implementation will snap the center of the target child view to the center of the attached <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html"> RecyclerView </a> </code></pre> . If you intend to change this behavior then override <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/SnapHelper.html#calculateDistanceToFinalSnap(android.support.v7.widget.RecyclerView.LayoutManager, android.view.View)"> calculateDistanceToFinalSnap(RecyclerView.LayoutManager, View) </a> </code></pre> . </p>\n<pre><code>public class LinearSnapHelper\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/LinearSnapHelper.html
ListPopupWindow	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> <a href="https://developer.android.com/reference/android/widget/ListPopupWindow.html"> ListPopupWindow </a> </code></pre> . Used to write apps that run on platforms prior to Android L. When running on Android L or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p>\n<pre><code>public class ListPopupWindow\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/ListPopupWindow.html
OrientationHelper	A										<section class="prog__container"><p> Helper class for LayoutManagers to abstract measurements depending on the View's orientation. <p> It is developed to easily support vertical and horizontal orientations in a LayoutManager but can also be used to abstract calls around view bounds and child measurements with margins and decorations. </p>\n<pre><code>public abstract class OrientationHelper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/OrientationHelper.html
android.support.v7.widget	A										<section class="prog__container">Adapters provide a binding from an app-specific data set to views that are displayed within a</section>	https://developer.android.com/reference/android/support/v7/widget/package-summary.html
PagerSnapHelper	A										<section class="prog__container"><p> Implementation of the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/SnapHelper.html"> SnapHelper </a> </code></pre> supporting pager style snapping in either vertical or horizontal orientation. <p> PagerSnapHelper can help achieve a similar behavior to <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewPager.html"> ViewPager </a> </code></pre> . Set both <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html"> RecyclerView </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html"> RecyclerView.Adapter </a> </code></pre> to have MATCH_PARENT height and width and then attach PagerSnapHelper to the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html"> RecyclerView </a> </code></pre> using <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/SnapHelper.html#attachToRecyclerView(android.support.v7.widget.RecyclerView)"> attachToRecyclerView(RecyclerView) </a> </code></pre> . </p>\n<pre><code>public class PagerSnapHelper\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/PagerSnapHelper.html
PopupMenu	A										<section class="prog__container"><p> Static library support version of the framework's <pre><code> <a href="https://developer.android.com/reference/android/widget/PopupMenu.html"> PopupMenu </a> </code></pre> . Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</p>\n<pre><code>public class PopupMenu\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/PopupMenu.html
PopupMenu.OnDismissListener	A										<section class="prog__container"><p> Callback interface used to notify the application that the menu has closed.</p>\n<pre><code>public static interface PopupMenu.OnDismissListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/PopupMenu.OnDismissListener.html
PopupMenu.OnMenuItemClickListener	A										<section class="prog__container"><p> Interface responsible for receiving menu item click events if the items themselves do not have individual item click listeners.</p>\n<pre><code>public static interface PopupMenu.OnMenuItemClickListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/PopupMenu.OnMenuItemClickListener.html
RecyclerView.Adapter	A										<section class="prog__container"><p> Base class for an Adapter <p> Adapters provide a binding from an app-specific data set to views that are displayed within a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html"> RecyclerView </a> </code></pre> . </p>\n<pre><code>public static abstract class RecyclerView.Adapter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html
RecyclerView.AdapterDataObserver	A										<section class="prog__container"><p> Observer base class for watching changes to an <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html"> RecyclerView.Adapter </a> </code></pre> . See <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#registerAdapterDataObserver(android.support.v7.widget.RecyclerView.AdapterDataObserver)"> registerAdapterDataObserver(AdapterDataObserver) </a> </code></pre> .</p>\n<pre><code>public static abstract class RecyclerView.AdapterDataObserver\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.AdapterDataObserver.html
RecyclerView.ChildDrawingOrderCallback	A										<section class="prog__container"><p> A callback interface that can be used to alter the drawing order of RecyclerView children. <p> It works using the <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.html#getChildDrawingOrder(int, int)"> getChildDrawingOrder(int, int) </a> </code></pre> method, so any case that applies to that method also applies to this callback. For example, changing the drawing order of two views will not have any effect if their elevation values are different since elevation overrides the result of this callback. </p>\n<pre><code>public static interface RecyclerView.ChildDrawingOrderCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ChildDrawingOrderCallback.html
RecyclerView	A										<section class="prog__container"><p> A flexible view for providing a limited window into a large data set. </p>\n<pre><code>public class RecyclerView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html
RecyclerView.ItemAnimator.AdapterChanges	A										<section class="prog__container"><p> The set of flags that might be passed to <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html#recordPreLayoutInformation(android.support.v7.widget.RecyclerView.State, android.support.v7.widget.RecyclerView.ViewHolder, int, java.util.List&lt;java.lang.Object&gt;)"> recordPreLayoutInformation(State, ViewHolder, int, List) </a> </code></pre> .</p>\n<pre><code>public static abstract @interface RecyclerView.ItemAnimator.AdapterChanges\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.AdapterChanges.html
RecyclerView.ItemAnimator	A										<section class="prog__container"><p> This class defines the animations that take place on items as changes are made to the adapter. Subclasses of ItemAnimator can be used to implement custom animations for actions on ViewHolder items. The RecyclerView will manage retaining these items while they are being animated, but implementors must call <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html#dispatchAnimationFinished(android.support.v7.widget.RecyclerView.ViewHolder)"> dispatchAnimationFinished(ViewHolder) </a> </code></pre> when a ViewHolder's animation is finished. In other words, there must be a matching <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html#dispatchAnimationFinished(android.support.v7.widget.RecyclerView.ViewHolder)"> dispatchAnimationFinished(ViewHolder) </a> </code></pre> call for each <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html#animateAppearance(android.support.v7.widget.RecyclerView.ViewHolder, android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo, android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo)"> animateAppearance() </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html#animateChange(android.support.v7.widget.RecyclerView.ViewHolder, android.support.v7.widget.RecyclerView.ViewHolder, android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo, android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo)"> animateChange() </a> </code></pre> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html#animatePersistence(android.support.v7.widget.RecyclerView.ViewHolder, android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo, android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo)"> animatePersistence() </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html#animateDisappearance(android.support.v7.widget.RecyclerView.ViewHolder, android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo, android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo)"> animateDisappearance() </a> </code></pre> call. <p> By default, RecyclerView uses <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/DefaultItemAnimator.html"> DefaultItemAnimator </a> </code></pre> . </p>\n<pre><code>public static abstract class RecyclerView.ItemAnimator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html
RecyclerView.ItemAnimator.ItemAnimatorFinishedListener	A										<section class="prog__container"><p> This interface is used to inform listeners when all pending or running animations in an ItemAnimator are finished. This can be used, for example, to delay an action in a data set until currently-running animations are complete.</p>\n<pre><code>public static interface RecyclerView.ItemAnimator.ItemAnimatorFinishedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.ItemAnimatorFinishedListener.html
RecyclerView.ItemAnimator.ItemHolderInfo	A										<section class="prog__container"><p> A simple data structure that holds information about an item's bounds. This information is used in calculating item animations. Default implementation of <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html#recordPreLayoutInformation(android.support.v7.widget.RecyclerView.State, android.support.v7.widget.RecyclerView.ViewHolder, int, java.util.List&lt;java.lang.Object&gt;)"> recordPreLayoutInformation(RecyclerView.State, ViewHolder, int, List) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html#recordPostLayoutInformation(android.support.v7.widget.RecyclerView.State, android.support.v7.widget.RecyclerView.ViewHolder)"> recordPostLayoutInformation(RecyclerView.State, ViewHolder) </a> </code></pre> returns this data structure. You can extend this class if you would like to keep more information about the Views. <p> If you want to provide your own implementation but still use `super` methods to record basic information, you can override <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html#obtainHolderInfo()"> obtainHolderInfo() </a> </code></pre> to provide your own instances. </p>\n<pre><code>public static class RecyclerView.ItemAnimator.ItemHolderInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.ItemHolderInfo.html
RecyclerView.ItemDecoration	A										<section class="prog__container"><p> An ItemDecoration allows the application to add a special drawing and layout offset to specific item views from the adapter's data set. This can be useful for drawing dividers between items, highlights, visual grouping boundaries and more. <p> All ItemDecorations are drawn in the order they were added, before the item views (in <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemDecoration.html#onDraw(android.graphics.Canvas, android.support.v7.widget.RecyclerView, android.support.v7.widget.RecyclerView.State)"> onDraw() </a> </code></pre> and after the items (in <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemDecoration.html#onDrawOver(android.graphics.Canvas, android.support.v7.widget.RecyclerView, android.support.v7.widget.RecyclerView.State)"> onDrawOver(Canvas, RecyclerView, RecyclerView.State) </a> </code></pre> . </p>\n<pre><code>public static abstract class RecyclerView.ItemDecoration\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemDecoration.html
RecyclerView.LayoutManager	A										<section class="prog__container"><p> A <pre><code> LayoutManager </code></pre> is responsible for measuring and positioning item views within a <pre><code> RecyclerView </code></pre> as well as determining the policy for when to recycle item views that are no longer visible to the user. By changing the <pre><code> LayoutManager </code></pre> a <pre><code> RecyclerView </code></pre> can be used to implement a standard vertically scrolling list, a uniform grid, staggered grids, horizontally scrolling collections and more. Several stock layout managers are provided for general use. <p> </p>\n<pre><code>public static abstract class RecyclerView.LayoutManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html
RecyclerView.LayoutManager.LayoutPrefetchRegistry	A										<section class="prog__container"><p> Interface for LayoutManagers to request items to be prefetched, based on position, with specified distance from viewport, which indicates priority.</p>\n<pre><code>public static interface RecyclerView.LayoutManager.LayoutPrefetchRegistry\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.LayoutPrefetchRegistry.html
RecyclerView.LayoutManager.Properties	A										<section class="prog__container"><p> Some general properties that a LayoutManager may want to use.</p>\n<pre><code>public static class RecyclerView.LayoutManager.Properties\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.Properties.html
RecyclerView.LayoutParams	A										<section class="prog__container"><p> <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html"> LayoutParams </a> </code></pre> subclass for children of <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html"> RecyclerView </a> </code></pre> . Custom <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html"> layout managers </a> </code></pre> are encouraged to create their own subclass of this <pre><code> LayoutParams </code></pre> class to store any additional required per-child view metadata about the layout.</p>\n<pre><code>public static class RecyclerView.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutParams.html
RecyclerView.OnChildAttachStateChangeListener	A										<section class="prog__container"><p> A Listener interface that can be attached to a RecylcerView to get notified whenever a ViewHolder is attached to or detached from RecyclerView.</p>\n<pre><code>public static interface RecyclerView.OnChildAttachStateChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.OnChildAttachStateChangeListener.html
RecyclerView.OnFlingListener	A										<section class="prog__container"><p> This class defines the behavior of fling if the developer wishes to handle it. <p> Subclasses of <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.OnFlingListener.html"> RecyclerView.OnFlingListener </a> </code></pre> can be used to implement custom fling behavior. </p>\n<pre><code>public static abstract class RecyclerView.OnFlingListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.OnFlingListener.html
RecyclerView.OnItemTouchListener	A										<section class="prog__container"><p> An OnItemTouchListener allows the application to intercept touch events in progress at the view hierarchy level of the RecyclerView before those touch events are considered for RecyclerView's own scrolling behavior. <p> This can be useful for applications that wish to implement various forms of gestural manipulation of item views within the RecyclerView. OnItemTouchListeners may intercept a touch interaction already in progress even if the RecyclerView is already handling that gesture stream itself for the purposes of scrolling. </p>\n<pre><code>public static interface RecyclerView.OnItemTouchListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.OnItemTouchListener.html
RecyclerView.OnScrollListener	A										<section class="prog__container"><p> An OnScrollListener can be added to a RecyclerView to receive messages when a scrolling event has occurred on that RecyclerView. <p> </p>\n<pre><code>public static abstract class RecyclerView.OnScrollListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.OnScrollListener.html
RecyclerView.RecycledViewPool	A										<section class="prog__container"><p> RecycledViewPool lets you share Views between multiple RecyclerViews. <p> If you want to recycle views across RecyclerViews, create an instance of RecycledViewPool and use <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html#setRecycledViewPool(android.support.v7.widget.RecyclerView.RecycledViewPool)"> setRecycledViewPool(RecycledViewPool) </a> </code></pre> . <p> RecyclerView automatically creates a pool for itself if you don't provide one. </p>\n<pre><code>public static class RecyclerView.RecycledViewPool\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.RecycledViewPool.html
RecyclerView.Recycler	A										<section class="prog__container"><p> A Recycler is responsible for managing scrapped or detached item views for reuse. <p> A "scrapped" view is a view that is still attached to its parent RecyclerView but that has been marked for removal or reuse. </p>\n<pre><code>public final class RecyclerView.Recycler\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Recycler.html
RecyclerView.RecyclerListener	A										<section class="prog__container"><p> A RecyclerListener can be set on a RecyclerView to receive messages whenever a view is recycled.</p>\n<pre><code>public static interface RecyclerView.RecyclerListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.RecyclerListener.html
RecyclerView.SimpleOnItemTouchListener	A										<section class="prog__container"><p> An implementation of <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.OnItemTouchListener.html"> RecyclerView.OnItemTouchListener </a> </code></pre> that has empty method bodies and default return values. <p> You may prefer to extend this class if you don't need to override all methods. Another benefit of using this class is future compatibility. As the interface may change, we'll always provide a default implementation on this class so that your code won't break when you update to a new version of the support library. </p>\n<pre><code>public static class RecyclerView.SimpleOnItemTouchListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.SimpleOnItemTouchListener.html
RecyclerView.SmoothScroller.Action	A										<section class="prog__container"><p> Holds information about a smooth scroll request by a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.SmoothScroller.html"> RecyclerView.SmoothScroller </a> </code></pre> .</p>\n<pre><code>public static class RecyclerView.SmoothScroller.Action\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.SmoothScroller.Action.html
RecyclerView.SmoothScroller	A										<section class="prog__container"><p> <p> Base class for smooth scrolling. Handles basic tracking of the target view position and provides methods to trigger a programmatic scroll. </p>\n<pre><code>public static abstract class RecyclerView.SmoothScroller\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.SmoothScroller.html
RecyclerView.SmoothScroller.ScrollVectorProvider	A										<section class="prog__container"><p> An interface which is optionally implemented by custom <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html"> RecyclerView.LayoutManager </a> </code></pre> to provide a hint to a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.SmoothScroller.html"> RecyclerView.SmoothScroller </a> </code></pre> about the location of the target position.</p>\n<pre><code>public static interface RecyclerView.SmoothScroller.ScrollVectorProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.SmoothScroller.ScrollVectorProvider.html
RecyclerView.State	A										<section class="prog__container"><p> <p> Contains useful information about the current RecyclerView state like target scroll position or view focus. State object can also keep arbitrary data, identified by resource ids. </p>\n<pre><code>public static class RecyclerView.State\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.State.html
RecyclerView.ViewCacheExtension	A										<section class="prog__container"><p> ViewCacheExtension is a helper class to provide an additional layer of view caching that can be controlled by the developer. <p> When <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Recycler.html#getViewForPosition(int)"> getViewForPosition(int) </a> </code></pre> is called, Recycler checks attached scrap and first level cache to find a matching View. If it cannot find a suitable View, Recycler will call the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewCacheExtension.html#getViewForPositionAndType(android.support.v7.widget.RecyclerView.Recycler, int, int)"> getViewForPositionAndType(Recycler, int, int) </a> </code></pre> before checking <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.RecycledViewPool.html"> RecyclerView.RecycledViewPool </a> </code></pre> . <p> Note that, Recycler never sends Views to this method to be cached. It is developers responsibility to decide whether they want to keep their Views in this custom cache or let the default recycling policy handle it. </p>\n<pre><code>public static abstract class RecyclerView.ViewCacheExtension\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewCacheExtension.html
RecyclerView.ViewHolder	A										<section class="prog__container"><p> A ViewHolder describes an item view and metadata about its place within the RecyclerView. <p> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html"> RecyclerView.Adapter </a> </code></pre> implementations should subclass ViewHolder and add fields for caching potentially expensive <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#findViewById(int)"> findViewById(int) </a> </code></pre> results. </p>\n<pre><code>public static abstract class RecyclerView.ViewHolder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html
RecyclerViewAccessibilityDelegate	A										<section class="prog__container"><p> The AccessibilityDelegate used by RecyclerView. <p> This class handles basic accessibility actions and delegates them to LayoutManager. </p>\n<pre><code>public class RecyclerViewAccessibilityDelegate\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/RecyclerViewAccessibilityDelegate.html
SearchView	A										<section class="prog__container"><p> A widget that provides a user interface for the user to enter a search query and submit a request to a search provider. Shows a list of query suggestions or results, if available, and allows the user to pick a suggestion or result to launch into. <p class="note"> <strong> Note: </strong> This class is included in the <a href="https://developer.android.com/tools/extras/support-library.html"> support library </a> for compatibility with API level 7 and higher. If you're developing your app for API level 11 and higher <em> only </em> , you should instead use the framework <pre><code> <a href="https://developer.android.com/reference/android/widget/SearchView.html"> SearchView </a> </code></pre> class. </p>\n<pre><code>public class SearchView\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/SearchView.html
SearchView.OnCloseListener	A										<section class="prog__container"><p> The user is attempting to close the SearchView.</p>\n<pre><code>public static interface SearchView.OnCloseListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/SearchView.OnCloseListener.html
SearchView.OnQueryTextListener	A										<section class="prog__container"><p> Callbacks for changes to the query text.</p>\n<pre><code>public static interface SearchView.OnQueryTextListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/SearchView.OnQueryTextListener.html
SearchView.OnSuggestionListener	A										<section class="prog__container"><p> Callback interface for selection events on suggestions. These callbacks are only relevant when a SearchableInfo has been specified by <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/SearchView.html#setSearchableInfo(android.app.SearchableInfo)"> setSearchableInfo(SearchableInfo) </a> </code></pre> .</p>\n<pre><code>public static interface SearchView.OnSuggestionListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/SearchView.OnSuggestionListener.html
ShareActionProvider	A										<section class="prog__container"><p> Provides a share action, which is suitable for an activity's app bar. Creates views that enable data sharing. If the provider appears in the overflow menu, it creates a submenu with the appropriate sharing actions. </p>\n<pre><code>public class ShareActionProvider\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/ShareActionProvider.html
ShareActionProvider.OnShareTargetSelectedListener	A										<section class="prog__container"><p> Listener for the event of selecting a share target.</p>\n<pre><code>public static interface ShareActionProvider.OnShareTargetSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/ShareActionProvider.OnShareTargetSelectedListener.html
SimpleItemAnimator	A										<section class="prog__container"><p> A wrapper class for ItemAnimator that records View bounds and decides whether it should run move, change, add or remove animations. This class also replicates the original ItemAnimator API. <p> It uses <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.ItemHolderInfo.html"> RecyclerView.ItemAnimator.ItemHolderInfo </a> </code></pre> to track the bounds information of the Views. If you would like to extend this class, you can override <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.html#obtainHolderInfo()"> obtainHolderInfo() </a> </code></pre> method to provide your own info class that extends <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemAnimator.ItemHolderInfo.html"> RecyclerView.ItemAnimator.ItemHolderInfo </a> </code></pre> . </p>\n<pre><code>public abstract class SimpleItemAnimator\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/SimpleItemAnimator.html
SnapHelper	A										<section class="prog__container"><p> Class intended to support snapping for a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html"> RecyclerView </a> </code></pre> . <p> SnapHelper tries to handle fling as well but for this to work properly, the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html"> RecyclerView.LayoutManager </a> </code></pre> must implement the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.SmoothScroller.ScrollVectorProvider.html"> RecyclerView.SmoothScroller.ScrollVectorProvider </a> </code></pre> interface or you should override <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/SnapHelper.html#onFling(int, int)"> onFling(int, int) </a> </code></pre> and handle fling manually. </p>\n<pre><code>public abstract class SnapHelper\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/SnapHelper.html
StaggeredGridLayoutManager	A										<section class="prog__container"><p> A LayoutManager that lays out children in a staggered grid formation. It supports horizontal &amp; vertical layout as well as an ability to layout children in reverse. <p> Staggered grids are likely to have gaps at the edges of the layout. To avoid these gaps, StaggeredGridLayoutManager can offset spans independently or move items between spans. You can control this behavior via <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/StaggeredGridLayoutManager.html#setGapStrategy(int)"> setGapStrategy(int) </a> </code></pre> . </p>\n<pre><code>public class StaggeredGridLayoutManager\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/StaggeredGridLayoutManager.html
StaggeredGridLayoutManager.LayoutParams	A										<section class="prog__container"><p> LayoutParams used by StaggeredGridLayoutManager. <p> Note that if the orientation is <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/StaggeredGridLayoutManager.html#VERTICAL"> VERTICAL </a> </code></pre> , the width parameter is ignored and if the orientation is <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/StaggeredGridLayoutManager.html#HORIZONTAL"> HORIZONTAL </a> </code></pre> the height parameter is ignored because child view is expected to fill all of the space given to it. </p>\n<pre><code>public static class StaggeredGridLayoutManager.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/StaggeredGridLayoutManager.LayoutParams.html
SwitchCompat	A										<section class="prog__container"><p> SwitchCompat is a version of the Switch widget which on devices back to API v7. It does not make any attempt to use the platform provided widget on those devices which it is available normally. <p> A Switch is a two-state toggle switch widget that can select between two options. The user may drag the "thumb" back and forth to choose the selected option, or simply tap to toggle as if it were a checkbox. The <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html#setText(java.lang.CharSequence)"> text </a> </code></pre> property controls the text displayed in the label for the switch, whereas the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/SwitchCompat.html#setTextOff(java.lang.CharSequence)"> off </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/SwitchCompat.html#setTextOn(java.lang.CharSequence)"> on </a> </code></pre> text controls the text on the thumb. Similarly, the <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html#setTextAppearance(android.content.Context, int)"> textAppearance </a> </code></pre> and the related setTypeface() methods control the typeface and style of label text, whereas the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/SwitchCompat.html#setSwitchTextAppearance(android.content.Context, int)"> switchTextAppearance </a> </code></pre> and the related setSwitchTypeface() methods control that of the thumb. <p> See the <a href="https://developer.android.com/guide/topics/ui/controls/togglebutton.html"> Toggle Buttons </a> guide. </p>\n<pre><code>public class SwitchCompat\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/SwitchCompat.html
ThemedSpinnerAdapter.Helper	A										<section class="prog__container"><p> A helper class which allows easy integration of <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/ThemedSpinnerAdapter.html"> ThemedSpinnerAdapter </a> </code></pre> into existing <pre><code> <a href="https://developer.android.com/reference/android/widget/SpinnerAdapter.html"> SpinnerAdapter </a> </code></pre> s in a backwards compatible way. <p> An example <pre><code> <a href="https://developer.android.com/reference/android/widget/BaseAdapter.html"> BaseAdapter </a> </code></pre> implementation would be: </p>\n<pre><code>public static final class ThemedSpinnerAdapter.Helper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/ThemedSpinnerAdapter.Helper.html
ThemedSpinnerAdapter	A										<section class="prog__container"><p> An extension of SpinnerAdapter that is capable of inflating drop-down views against a different theme than normal views. <p> Classes that implement this interface should use the theme provided to <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/ThemedSpinnerAdapter.html#setDropDownViewTheme(android.content.res.Resources.Theme)"> setDropDownViewTheme(Theme) </a> </code></pre> when creating views in <pre><code> <a href="https://developer.android.com/reference/android/widget/SpinnerAdapter.html#getDropDownView(int, android.view.View, android.view.ViewGroup)"> getDropDownView(int, View, ViewGroup) </a> </code></pre> . <p> The <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/ThemedSpinnerAdapter.Helper.html"> ThemedSpinnerAdapter.Helper </a> </code></pre> class is provided to aide implementation in a backwards compatible way. </p>\n<pre><code>public interface ThemedSpinnerAdapter\nimplements <a href="https://developer.android.com/reference/android/widget/SpinnerAdapter.html">SpinnerAdapter</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/ThemedSpinnerAdapter.html
Toolbar	A										<section class="prog__container"><p> A standard toolbar for use within application content. <p> A Toolbar is a generalization of <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/ActionBar.html"> action bars </a> </code></pre> for use within application layouts. While an action bar is traditionally part of an <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity's </a> </code></pre> opaque window decor controlled by the framework, a Toolbar may be placed at any arbitrary level of nesting within a view hierarchy. An application may choose to designate a Toolbar as the action bar for an Activity using the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html#setSupportActionBar(android.support.v7.widget.Toolbar)"> setSupportActionBar() </a> </code></pre> method. </p>\n<pre><code>public class Toolbar\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/Toolbar.html
Toolbar.LayoutParams	A										<section class="prog__container"><p> Layout information for child views of Toolbars. <p> Toolbar.LayoutParams extends ActionBar.LayoutParams for compatibility with existing ActionBar API. See <pre><code> <a href="https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html#setSupportActionBar(android.support.v7.widget.Toolbar)"> AppCompatActivity.setSupportActionBar </a> </code></pre> for more info on how to use a Toolbar as your Activity's ActionBar. </p>\n<pre><code>public static class Toolbar.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/Toolbar.LayoutParams.html
Toolbar.OnMenuItemClickListener	A										<section class="prog__container"><p> Interface responsible for receiving menu item click events if the items themselves do not have individual item click listeners.</p>\n<pre><code>public static interface Toolbar.OnMenuItemClickListener\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/Toolbar.OnMenuItemClickListener.html
Toolbar.SavedState	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html#describeContents()"> describeContents() </a> </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p>\n<pre><code>public static class Toolbar.SavedState\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/Toolbar.SavedState.html
ItemTouchHelper.Callback	A										<section class="prog__container"><p> This class is the contract between ItemTouchHelper and your application. It lets you control which touch behaviors are enabled per each ViewHolder and also receive callbacks when user performs these actions. <p> To control which actions user can take on each view, you should override <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html#getMovementFlags(android.support.v7.widget.RecyclerView, android.support.v7.widget.RecyclerView.ViewHolder)"> getMovementFlags(RecyclerView, ViewHolder) </a> </code></pre> and return appropriate set of direction flags. ( <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html#LEFT"> LEFT </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html#RIGHT"> RIGHT </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html#START"> START </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html#END"> END </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html#UP"> UP </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html#DOWN"> DOWN </a> </code></pre> ). You can use <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html#makeMovementFlags(int, int)"> makeMovementFlags(int, int) </a> </code></pre> to easily construct it. Alternatively, you can use <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.SimpleCallback.html"> ItemTouchHelper.SimpleCallback </a> </code></pre> . <p> If user drags an item, ItemTouchHelper will call <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html#onMove(android.support.v7.widget.RecyclerView, android.support.v7.widget.RecyclerView.ViewHolder, android.support.v7.widget.RecyclerView.ViewHolder)"> onMove(recyclerView, dragged, target) </a> </code></pre> . Upon receiving this callback, you should move the item from the old position ( <pre><code> dragged.getAdapterPosition() </code></pre> ) to new position ( <pre><code> target.getAdapterPosition() </code></pre> ) in your adapter and also call <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#notifyItemMoved(int, int)"> notifyItemMoved(int, int) </a> </code></pre> . To control where a View can be dropped, you can override <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html#canDropOver(android.support.v7.widget.RecyclerView, android.support.v7.widget.RecyclerView.ViewHolder, android.support.v7.widget.RecyclerView.ViewHolder)"> canDropOver(RecyclerView, ViewHolder, ViewHolder) </a> </code></pre> . When a dragging View overlaps multiple other views, Callback chooses the closest View with which dragged View might have changed positions. Although this approach works for many use cases, if you have a custom LayoutManager, you can override <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html#chooseDropTarget(android.support.v7.widget.RecyclerView.ViewHolder, java.util.List&lt;android.support.v7.widget.RecyclerView.ViewHolder&gt;, int, int)"> chooseDropTarget(ViewHolder, java.util.List, int, int) </a> </code></pre> to select a custom drop target. <p> When a View is swiped, ItemTouchHelper animates it until it goes out of bounds, then calls <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html#onSwiped(android.support.v7.widget.RecyclerView.ViewHolder, int)"> onSwiped(ViewHolder, int) </a> </code></pre> . At this point, you should update your adapter (e.g. remove the item) and call related Adapter#notify event. </p>\n<pre><code>public static abstract class ItemTouchHelper.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html
ItemTouchHelper	A										<section class="prog__container"><p> This is a utility class to add swipe to dismiss and drag &amp; drop support to RecyclerView. <p> It works with a RecyclerView and a Callback class, which configures what type of interactions are enabled and also receives events when user performs these actions. <p> Depending on which functionality you support, you should override <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html#onMove(android.support.v7.widget.RecyclerView, android.support.v7.widget.RecyclerView.ViewHolder, android.support.v7.widget.RecyclerView.ViewHolder)"> onMove(RecyclerView, ViewHolder, ViewHolder) </a> </code></pre> and / or <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html#onSwiped(android.support.v7.widget.RecyclerView.ViewHolder, int)"> onSwiped(ViewHolder, int) </a> </code></pre> . <p> This class is designed to work with any LayoutManager but for certain situations, it can be optimized for your custom LayoutManager by extending methods in the <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html"> ItemTouchHelper.Callback </a> </code></pre> class or implementing <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.ViewDropHandler.html"> ItemTouchHelper.ViewDropHandler </a> </code></pre> interface in your LayoutManager. <p> By default, ItemTouchHelper moves the items' translateX/Y properties to reposition them. On platforms older than Honeycomb, ItemTouchHelper uses canvas translations and View's visibility property to move items in response to touch events. You can customize these behaviors by overriding <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html#onChildDraw(android.graphics.Canvas, android.support.v7.widget.RecyclerView, android.support.v7.widget.RecyclerView.ViewHolder, float, float, int, boolean)"> onChildDraw(Canvas, RecyclerView, ViewHolder, float, float, int, boolean) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html#onChildDrawOver(android.graphics.Canvas, android.support.v7.widget.RecyclerView, android.support.v7.widget.RecyclerView.ViewHolder, float, float, int, boolean)"> onChildDrawOver(Canvas, RecyclerView, ViewHolder, float, float, int, boolean) </a> </code></pre> . <p> </p>\n<pre><code>public class ItemTouchHelper\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html
ItemTouchHelper.SimpleCallback	A										<section class="prog__container"><p> A simple wrapper to the default Callback which you can construct with drag and swipe directions and this class will handle the flag callbacks. You should still override onMove or onSwiped depending on your use case. <pre> ItemTouchHelper mIth = new ItemTouchHelper( new ItemTouchHelper.SimpleCallback(ItemTouchHelper.UP | ItemTouchHelper.DOWN, ItemTouchHelper.LEFT) { public abstract boolean onMove(RecyclerView recyclerView, ViewHolder viewHolder, ViewHolder target) { final int fromPos = viewHolder.getAdapterPosition(); final int toPos = target.getAdapterPosition(); // move item in `fromPos` to `toPos` in adapter. return true;// true if moved, false otherwise } public void onSwiped(ViewHolder viewHolder, int direction) { // remove from adapter } }); </pre></p>\n<pre><code>public static abstract class ItemTouchHelper.SimpleCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.SimpleCallback.html
ItemTouchHelper.ViewDropHandler	A										<section class="prog__container"><p> An interface which can be implemented by LayoutManager for better integration with <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html"> ItemTouchHelper </a> </code></pre> .</p>\n<pre><code>public static interface ItemTouchHelper.ViewDropHandler\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.ViewDropHandler.html
ItemTouchUIUtil	A										<section class="prog__container"><p> Utility class for <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html"> ItemTouchHelper </a> </code></pre> which handles item transformations for different API versions. <p> </p>\n<pre><code>public interface ItemTouchUIUtil\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchUIUtil.html
android.support.v7.widget.helper	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/widget/helper/package-summary.html
android.support.v7.widget.util	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/support/v7/widget/util/package-summary.html
SortedListAdapterCallback	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/SortedList.Callback.html"> SortedList.Callback </a> </code></pre> implementation that can bind a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/util/SortedList.html"> SortedList </a> </code></pre> to a <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html"> RecyclerView.Adapter </a> </code></pre> .</p>\n<pre><code>public abstract class SortedListAdapterCallback\n</code></pre></section>	https://developer.android.com/reference/android/support/v7/widget/util/SortedListAdapterCallback.html
Allocation	A										<section class="prog__container"><p> <p> This class provides the primary method through which data is passed to and from RenderScript kernels. An Allocation provides the backing store for a given <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/Type.html"> Type </a> </code></pre> . </p>\n<pre><code>public class Allocation\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Allocation.html
Allocation.MipmapControl	A										<section class="prog__container"><p> Controls mipmap behavior when using the bitmap creation and update functions.</p>\n<pre><code>public static final enum Allocation.MipmapControl\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Allocation.MipmapControl.html
BaseObj	A										<section class="prog__container"><p> BaseObj is the base class for all RenderScript objects owned by a RS context. It is responsible for lifetime management and resource tracking. This class should not be used by a user application.</p>\n<pre><code>public class BaseObj\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/BaseObj.html
Byte2	A										<section class="prog__container"><p> Class for exposing the native RenderScript byte2 type back to the Android system.</p>\n<pre><code>public class Byte2\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Byte2.html
Byte3	A										<section class="prog__container"><p> Class for exposing the native RenderScript byte3 type back to the Android system.</p>\n<pre><code>public class Byte3\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Byte3.html
Byte4	A										<section class="prog__container"><p> Class for exposing the native RenderScript byte4 type back to the Android system.</p>\n<pre><code>public class Byte4\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Byte4.html
Double2	A										<section class="prog__container"><p> Class for exposing the native RenderScript double2 type back to the Android system.</p>\n<pre><code>public class Double2\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Double2.html
Double3	A										<section class="prog__container"><p> Class for exposing the native RenderScript double3 type back to the Android system.</p>\n<pre><code>public class Double3\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Double3.html
Double4	A										<section class="prog__container"><p> Class for exposing the native RenderScript double4 type back to the Android system.</p>\n<pre><code>public class Double4\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Double4.html
Element.Builder	A										<section class="prog__container"><p> Builder class for producing complex elements with matching field and name pairs. The builder starts empty. The order in which elements are added is retained for the layout in memory.</p>\n<pre><code>public static class Element.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Element.Builder.html
Element.DataKind	A										<section class="prog__container"><p> The special interpretation of the data if required. This is primarly useful for graphical data. USER indicates no special interpretation is expected. PIXEL is used in conjunction with the standard data types for representing texture formats.</p>\n<pre><code>public static final enum Element.DataKind\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Element.DataKind.html
Element.DataType	A										<section class="prog__container"><p> DataType represents the basic type information for a basic element. The naming convention follows. For numeric types it is FLOAT, SIGNED, or UNSIGNED followed by the _BITS where BITS is the size of the data. BOOLEAN is a true / false (1,0) represented in an 8 bit container. The UNSIGNED variants with multiple bit definitions are for packed graphical data formats and represent vectors with per vector member sizes which are treated as a single unit for packing and alignment purposes. MATRIX the three matrix types contain FLOAT_32 elements and are treated as 32 bits for alignment purposes. RS_* objects. 32 bit opaque handles.</p>\n<pre><code>public static final enum Element.DataType\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Element.DataType.html
Element	A										<section class="prog__container"><p> <p> An Element represents one item within an <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/Allocation.html"> Allocation </a> </code></pre> . An Element is roughly equivalent to a C type in a RenderScript kernel. Elements may be basic or complex. Some basic elements are </p>\n<pre><code>public class Element\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Element.html
FieldPacker	A										<section class="prog__container"><p> Utility class for packing arguments and structures from Android system objects to RenderScript objects. This class is only intended to be used to support the reflected code generated by the RS tool chain. It should not be called directly.</p>\n<pre><code>public class FieldPacker\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/FieldPacker.html
Float2	A										<section class="prog__container"><p> Class for exposing the native RenderScript float2 type back to the Android system.</p>\n<pre><code>public class Float2\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Float2.html
Float3	A										<section class="prog__container"><p> Class for exposing the native RenderScript float2 type back to the Android system.</p>\n<pre><code>public class Float3\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Float3.html
Float4	A										<section class="prog__container"><p> Class for exposing the native RenderScript float2 type back to the Android system.</p>\n<pre><code>public class Float4\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Float4.html
Int2	A										<section class="prog__container"><p> Class for exposing the native RenderScript int2 type back to the Android system.</p>\n<pre><code>public class Int2\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Int2.html
Int3	A										<section class="prog__container"><p> Class for exposing the native RenderScript int3 type back to the Android system.</p>\n<pre><code>public class Int3\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Int3.html
Int4	A										<section class="prog__container"><p> Class for exposing the native RenderScript int4 type back to the Android system.</p>\n<pre><code>public class Int4\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Int4.html
Long2	A										<section class="prog__container"><p> Class for exposing the native RenderScript long2 type back to the Android system.</p>\n<pre><code>public class Long2\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Long2.html
Long3	A										<section class="prog__container"><p> Class for exposing the native RenderScript long3 type back to the Android system.</p>\n<pre><code>public class Long3\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Long3.html
Long4	A										<section class="prog__container"><p> Class for exposing the native RenderScript long4 type back to the Android system.</p>\n<pre><code>public class Long4\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Long4.html
Matrix2f	A										<section class="prog__container"><p> Class for exposing the native RenderScript rs_matrix2x2 type back to the Android system.</p>\n<pre><code>public class Matrix2f\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Matrix2f.html
Matrix3f	A										<section class="prog__container"><p> Class for exposing the native RenderScript rs_matrix3x3 type back to the Android system.</p>\n<pre><code>public class Matrix3f\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Matrix3f.html
Matrix4f	A										<section class="prog__container"><p> Class for exposing the native RenderScript rs_matrix4x4 type back to the Android system.</p>\n<pre><code>public class Matrix4f\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Matrix4f.html
android.support.v8.renderscript	A										<section class="prog__container">This class provides the primary method through which data is passed to and from RenderScript kernels. </section>	https://developer.android.com/reference/android/support/v8/renderscript/package-summary.html
RenderScript.ContextType	A										<section class="prog__container"><p> ContextType specifies the specific type of context to be created.</p>\n<pre><code>public static final enum RenderScript.ContextType\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/RenderScript.ContextType.html
RenderScript	A										<section class="prog__container"><p> This class provides access to a RenderScript context, which controls RenderScript initialization, resource management, and teardown. An instance of the RenderScript class must be created before any other RS objects can be created. </p>\n<pre><code>public class RenderScript\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/RenderScript.html
RenderScript.Priority	A										<section class="prog__container"><p> RenderScript worker thread priority enumeration. The default value is NORMAL. Applications wishing to do background processing should set their priority to LOW to avoid starving forground processes.</p>\n<pre><code>public static final enum RenderScript.Priority\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/RenderScript.Priority.html
RenderScript.RSErrorHandler	A										<section class="prog__container"><p> The runtime error handler base class. An application should derive from this class if it wishes to install an error handler. When errors occur at runtime, the fields in this class will be filled, and the run method will be called.</p>\n<pre><code>public static class RenderScript.RSErrorHandler\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/RenderScript.RSErrorHandler.html
RenderScript.RSMessageHandler	A										<section class="prog__container"><p> The base class from which an application should derive in order to receive RS messages from scripts. When a script calls <pre><code> rsSendToClient </code></pre> , the data fields will be filled, and the run method will be called on a separate thread. This will occur some time after <pre><code> rsSendToClient </code></pre> completes in the script, as <pre><code> rsSendToClient </code></pre> is asynchronous. Message handlers are not guaranteed to have completed when <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/RenderScript.html#finish()"> finish() </a> </code></pre> returns.</p>\n<pre><code>public static class RenderScript.RSMessageHandler\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/RenderScript.RSMessageHandler.html
RSDriverException	A										<section class="prog__container"><p> Base class for all exceptions thrown by the Android RenderScript</p>\n<pre><code>public class RSDriverException\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/RSDriverException.html
RSIllegalArgumentException	A										<section class="prog__container"><p> Base class for all exceptions thrown by the Android RenderScript</p>\n<pre><code>public class RSIllegalArgumentException\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/RSIllegalArgumentException.html
RSInvalidStateException	A										<section class="prog__container"><p> Base class for all exceptions thrown by the Android RenderScript</p>\n<pre><code>public class RSInvalidStateException\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/RSInvalidStateException.html
RSRuntimeException	A										<section class="prog__container"><p> Base class for all exceptions thrown by the Android RenderScript</p>\n<pre><code>public class RSRuntimeException\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/RSRuntimeException.html
Sampler.Builder	A										<section class="prog__container"><p> Builder for creating non-standard samplers. This is only necessary if a Sampler with different min and mag modes is desired.</p>\n<pre><code>public static class Sampler.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Sampler.Builder.html
Sampler	A										<section class="prog__container"><p> Sampler object that defines how Allocations can be read as textures within a kernel. Samplers are used in conjunction with the <pre><code> rsSample </code></pre> runtime function to return values from normalized coordinates. Any Allocation used with a Sampler must have been created with <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/Allocation.html#USAGE_GRAPHICS_TEXTURE"> USAGE_GRAPHICS_TEXTURE </a> </code></pre> ; using a Sampler on an <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/Allocation.html"> Allocation </a> </code></pre> that was not created with <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/Allocation.html#USAGE_GRAPHICS_TEXTURE"> USAGE_GRAPHICS_TEXTURE </a> </code></pre> is undefined.</p>\n<pre><code>public class Sampler\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Sampler.html
Sampler.Value	A										<section class="prog__container"><p></p>\n<pre><code>public static final enum Sampler.Value\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Sampler.Value.html
Script.Builder	A										<section class="prog__container"><p> Only intended for use by generated reflected code.</p>\n<pre><code>public static class Script.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Script.Builder.html
Script.FieldBase	A										<section class="prog__container"><p> Only intended for use by generated reflected code.</p>\n<pre><code>public static class Script.FieldBase\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Script.FieldBase.html
Script.FieldID	A										<section class="prog__container"><p> FieldID is an identifier for a Script + exported field pair. It is used as an identifier for ScriptGroup creation. This class should not be directly created. Instead use the method in the reflected or intrinsic code "getFieldID_funcname()".</p>\n<pre><code>public static final class Script.FieldID\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Script.FieldID.html
Script	A										<section class="prog__container"><p> The parent class for all executable scripts. This should not be used by applications.</p>\n<pre><code>public class Script\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Script.html
Script.InvokeID	A										<section class="prog__container"><p> InvokeID is an identifier for a invoke function. It is used as an identifier for ScriptGroup creation. This class should not be directly created. Instead use the method in the reflected or intrinsic code "getInvokeID_funcname()".</p>\n<pre><code>public static final class Script.InvokeID\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Script.InvokeID.html
Script.KernelID	A										<section class="prog__container"><p> KernelID is an identifier for a Script + root function pair. It is used as an identifier for ScriptGroup creation. This class should not be directly created. Instead use the method in the reflected or intrinsic code "getKernelID_funcname()".</p>\n<pre><code>public static final class Script.KernelID\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Script.KernelID.html
Script.LaunchOptions	A										<section class="prog__container"><p> Class for specifying the specifics about how a kernel will be launched. This class can specify a potential range of cells on which to run a kernel. If no set is called for a dimension then this class will have no impact on that dimension when the kernel is executed. The forEach kernel launch will operate over the intersection of the dimensions. Example: LaunchOptions with setX(5, 15) Allocation with dimension X=10, Y=10 The resulting forEach run would execute over: x = 5 to 9 (inclusive) and y = 0 to 9 (inclusive).</p>\n<pre><code>public static final class Script.LaunchOptions\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Script.LaunchOptions.html
ScriptC	A										<section class="prog__container"><p> The superclass for all user-defined scripts. This is only intended to be used by the generated derived classes.</p>\n<pre><code>public class ScriptC\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptC.html
ScriptGroup.Binding	A										<section class="prog__container"><p> Represents a binding of a value to a global variable in a kernel or invocable function. Used in closure creation.</p>\n<pre><code>public static final class ScriptGroup.Binding\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Binding.html
ScriptGroup.Builder	A										<section class="prog__container"><p> <p class="caution"> <strong> This class is deprecated. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Builder2.html"> ScriptGroup.Builder2 </a> </code></pre> instead. </p>\n<pre><code>public static final class ScriptGroup.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Builder.html
ScriptGroup.Builder2	A										<section class="prog__container"><p> The builder class for creating script groups <p> A script group is created using closures (see class <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Closure.html"> ScriptGroup.Closure </a> </code></pre> ). A closure is a function call to a kernel or invocable function. Each function argument or global variable accessed inside the function is bound to 1) a known value, 2) a script group input (see class <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Input.html"> ScriptGroup.Input </a> </code></pre> ), or 3) a future (see class <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Future.html"> ScriptGroup.Future </a> </code></pre> ). A future is the output of a closure, either the return value of the function or a global variable written by that function. <p> Closures are created using the <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Builder2.html#addKernel(android.support.v8.renderscript.Script.KernelID, android.support.v8.renderscript.Type, java.lang.Object...)"> addKernel(Script.KernelID, Type, Object...) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Builder2.html#addInvoke(android.support.v8.renderscript.Script.InvokeID, java.lang.Object...)"> addInvoke(Script.InvokeID, Object...) </a> </code></pre> methods. When a closure is created, futures from previously created closures can be used as its inputs. External script group inputs can be used as inputs to individual closures as well. An external script group input is created using the <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Builder2.html#addInput()"> addInput() </a> </code></pre> method. A script group is created by a call to the <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Builder2.html#create(java.lang.String, android.support.v8.renderscript.ScriptGroup.Future...)"> create(String, ScriptGroup.Future...) </a> </code></pre> method, which accepts an array of futures as the outputs for the script group. <p> Closures in a script group can be evaluated in any order as long as the following conditions are met: 1) a closure must be evaluated before any other closures that take its futures as inputs; 2) all closures added before an invoke closure must be evaluated before it; and 3) all closures added after an invoke closure must be evaluated after it. As a special case, the order that the closures are added is a legal evaluation order. However, other evaluation orders are possible, including concurrently evaluating independent closures. </p>\n<pre><code>public static final class ScriptGroup.Builder2\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Builder2.html
ScriptGroup.Closure	A										<section class="prog__container"><p> An opaque class for closures <p> A closure represents a function call to a kernel or invocable function, combined with arguments and values for global variables. A closure is created using the <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Builder2.html#addKernel(android.support.v8.renderscript.Script.KernelID, android.support.v8.renderscript.Type, java.lang.Object...)"> addKernel(Script.KernelID, Type, Object...) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Builder2.html#addInvoke(android.support.v8.renderscript.Script.InvokeID, java.lang.Object...)"> addInvoke(Script.InvokeID, Object...) </a> </code></pre> method. </p>\n<pre><code>public static final class ScriptGroup.Closure\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Closure.html
ScriptGroup.Future	A										<section class="prog__container"><p> An opaque class for futures <p> A future represents an output of a closure, either the return value of the function, or the value of a global variable written by the function. A future is created by calling the <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Closure.html#getReturn()"> getReturn() </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Closure.html#getGlobal(android.support.v8.renderscript.Script.FieldID)"> getGlobal(Script.FieldID) </a> </code></pre> method. </p>\n<pre><code>public static final class ScriptGroup.Future\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Future.html
ScriptGroup	A										<section class="prog__container"><p> A group of kernels that are executed together with one execution call as if they were a single kernel <p> In addition to kernels, a script group may contain invocable functions as well. A script group may take inputs and generate outputs, which are consumed and produced by its member kernels. Inside a script group, outputs from one kernel can be passed to another kernel as inputs. The API disallows cyclic dependencies among kernels in a script group, effectively making it a directed acyclic graph (DAG) of kernels. <p> Grouping kernels together allows for more efficient execution. For example, runtime and compiler optimization can be applied to reduce computation and communication overhead, and to make better use of the CPU and the GPU. </p>\n<pre><code>public final class ScriptGroup\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.html
ScriptGroup.Input	A										<section class="prog__container"><p> An opaque class for unbound values (used for script group inputs) <p> Created by calling the <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Builder2.html#addInput()"> addInput() </a> </code></pre> method. The value is assigned in <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.html#execute(java.lang.Object...)"> execute(Object) </a> </code></pre> method as one of its arguments. Arguments to the execute method should be in the same order as intputs are added using the addInput method. </p>\n<pre><code>public static final class ScriptGroup.Input\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptGroup.Input.html
ScriptIntrinsic	A										<section class="prog__container"><p> Base class for all Intrinsic scripts. An intrinsic a script which implements a pre-defined function. Intrinsics are provided to provide effecient implemtations of common operations. Not intended for direct use.</p>\n<pre><code>public abstract class ScriptIntrinsic\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsic.html
ScriptIntrinsic3DLUT	A										<section class="prog__container"><p> Intrinsic for converting RGB to RGBA by using a 3D lookup table. The incoming r,g,b values are use as normalized x,y,z coordinates into a 3D allocation. The 8 nearest values are sampled and linearly interpolated. The result is placed in the output.</p>\n<pre><code>public class ScriptIntrinsic3DLUT\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsic3DLUT.html
ScriptIntrinsicBLAS	A										<section class="prog__container"><p> ScriptIntrinsicBLAS class provides high performance RenderScript APIs to BLAS. The BLAS (Basic Linear Algebra Subprograms) are routines that provide standard building blocks for performing basic vector and matrix operations. For detailed description of BLAS, please refer to http://www.netlib.org/blas/</p>\n<pre><code>public final class ScriptIntrinsicBLAS\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicBLAS.html
ScriptIntrinsicBlend	A										<section class="prog__container"><p> Intrinsic kernels for blending two <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/Allocation.html"> Allocation </a> </code></pre> objects.</p>\n<pre><code>public class ScriptIntrinsicBlend\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicBlend.html
ScriptIntrinsicBlur	A										<section class="prog__container"><p> Intrinsic Gausian blur filter. Applies a gaussian blur of the specified radius to all elements of an allocation.</p>\n<pre><code>public class ScriptIntrinsicBlur\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicBlur.html
ScriptIntrinsicColorMatrix	A										<section class="prog__container"><p> Intrinsic for applying a color matrix to allocations. This has the same effect as loading each element and converting it to a <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/Element.html#F32_4(android.support.v8.renderscript.RenderScript)"> F32_4(RenderScript) </a> </code></pre> , multiplying the result by the 4x4 color matrix as performed by rsMatrixMultiply() and writing it to the output after conversion back to <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/Element.html#U8_4(android.support.v8.renderscript.RenderScript)"> U8_4(RenderScript) </a> </code></pre> .</p>\n<pre><code>public class ScriptIntrinsicColorMatrix\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicColorMatrix.html
ScriptIntrinsicConvolve3x3	A										<section class="prog__container"><p> Intrinsic for applying a 3x3 convolve to an allocation.</p>\n<pre><code>public class ScriptIntrinsicConvolve3x3\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicConvolve3x3.html
ScriptIntrinsicConvolve5x5	A										<section class="prog__container"><p> Intrinsic for applying a 5x5 convolve to an allocation.</p>\n<pre><code>public class ScriptIntrinsicConvolve5x5\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicConvolve5x5.html
ScriptIntrinsicHistogram	A										<section class="prog__container"><p> Intrinsic Histogram filter.</p>\n<pre><code>public class ScriptIntrinsicHistogram\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicHistogram.html
ScriptIntrinsicLUT	A										<section class="prog__container"><p> Intrinsic for applying a per-channel lookup table. Each channel of the input has an independant lookup table. The tables are 256 entries in size and can cover the full value range of <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/Element.html#U8_4(android.support.v8.renderscript.RenderScript)"> U8_4(RenderScript) </a> </code></pre> .</p>\n<pre><code>public class ScriptIntrinsicLUT\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicLUT.html
ScriptIntrinsicResize	A										<section class="prog__container"><p> Intrinsic for performing a resize of a 2D allocation.</p>\n<pre><code>public class ScriptIntrinsicResize\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicResize.html
ScriptIntrinsicYuvToRGB	A										<section class="prog__container"><p> Intrinsic for converting an Android YUV buffer to RGB. The input allocation is supplied in NV21 format as a U8 element type. The output is RGBA, the alpha channel will be set to 255.</p>\n<pre><code>public class ScriptIntrinsicYuvToRGB\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicYuvToRGB.html
Short2	A										<section class="prog__container"><p> Class for exposing the native RenderScript Short2 type back to the Android system.</p>\n<pre><code>public class Short2\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Short2.html
Short3	A										<section class="prog__container"><p> Class for exposing the native RenderScript short3 type back to the Android system.</p>\n<pre><code>public class Short3\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Short3.html
Short4	A										<section class="prog__container"><p> Class for exposing the native RenderScript short4 type back to the Android system.</p>\n<pre><code>public class Short4\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Short4.html
Type.Builder	A										<section class="prog__container"><p> Builder class for Type.</p>\n<pre><code>public static class Type.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Type.Builder.html
Type.CubemapFace	A										<section class="prog__container"><p></p>\n<pre><code>public static final enum Type.CubemapFace\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Type.CubemapFace.html
Type	A										<section class="prog__container"><p> <p> A Type describes the <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/Element.html"> Element </a> </code></pre> and dimensions used for an <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/Allocation.html"> Allocation </a> </code></pre> or a parallel operation. Types are created through <pre><code> <a href="https://developer.android.com/reference/android/support/v8/renderscript/Type.Builder.html"> Type.Builder </a> </code></pre> . </p>\n<pre><code>public class Type\n</code></pre></section>	https://developer.android.com/reference/android/support/v8/renderscript/Type.html
ErrnoException	A										<section class="prog__container"><p> A checked exception thrown when <pre><code> <a href="https://developer.android.com/reference/android/system/Os.html"> Os </a> </code></pre> methods fail. This exception contains the native errno value, for comparison against the constants in <pre><code> <a href="https://developer.android.com/reference/android/system/OsConstants.html"> OsConstants </a> </code></pre> , should sophisticated callers need to adjust their behavior based on the exact failure.</p>\n<pre><code>public final class ErrnoException\n</code></pre></section>	https://developer.android.com/reference/android/system/ErrnoException.html
Os	A										<section class="prog__container"><p> Access to low-level system functionality. Most of these are system calls. Most users will want to use higher-level APIs where available, but this class provides access to the underlying primitives used to implement the higher-level APIs. <p> The corresponding constants can be found in <pre><code> <a href="https://developer.android.com/reference/android/system/OsConstants.html"> OsConstants </a> </code></pre> . </p>\n<pre><code>public final class Os\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/system/Os.html
OsConstants	A										<section class="prog__container"><p> Constants and helper functions for use with <pre><code> <a href="https://developer.android.com/reference/android/system/Os.html"> Os </a> </code></pre> .</p>\n<pre><code>public final class OsConstants\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/system/OsConstants.html
android.system	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/system/package-summary.html
StructPollfd	A										<section class="prog__container"><p> Used as an in/out parameter to <pre><code> <a href="https://developer.android.com/reference/android/system/Os.html#poll(android.system.StructPollfd[], int)"> poll(StructPollfd[], int) </a> </code></pre> . Corresponds to C's <pre><code> struct pollfd </code></pre> from <pre><code> &lt;poll.h&gt; </code></pre> .</p>\n<pre><code>public final class StructPollfd\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/system/StructPollfd.html
StructStat	A										<section class="prog__container"><p> File information returned by <pre><code> <a href="https://developer.android.com/reference/android/system/Os.html#fstat(java.io.FileDescriptor)"> fstat(FileDescriptor) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/system/Os.html#lstat(java.lang.String)"> lstat(String) </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/system/Os.html#stat(java.lang.String)"> stat(String) </a> </code></pre> . Corresponds to C's <pre><code> struct stat </code></pre> from <pre><code> &lt;stat.h&gt; </code></pre> .</p>\n<pre><code>public final class StructStat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/system/StructStat.html
StructStatVfs	A										<section class="prog__container"><p> File information returned by <pre><code> <a href="https://developer.android.com/reference/android/system/Os.html#fstatvfs(java.io.FileDescriptor)"> fstatvfs(FileDescriptor) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/system/Os.html#statvfs(java.lang.String)"> statvfs(String) </a> </code></pre> .</p>\n<pre><code>public final class StructStatVfs\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/system/StructStatVfs.html
StructUtsname	A										<section class="prog__container"><p> Information returned by <pre><code> <a href="https://developer.android.com/reference/android/system/Os.html#uname()"> uname() </a> </code></pre> . Corresponds to C's <pre><code> struct utsname </code></pre> from <pre><code> &lt;sys/utsname.h&gt; </code></pre> .</p>\n<pre><code>public final class StructUtsname\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/system/StructUtsname.html
Call.Callback	A										<section class="prog__container"><p> Defines callbacks which inform the <pre><code> <a href="https://developer.android.com/reference/android/telecom/InCallService.html"> InCallService </a> </code></pre> of changes to a <pre><code> <a href="https://developer.android.com/reference/android/telecom/Call.html"> Call </a> </code></pre> . These callbacks can originate from the Telecom framework, or a <pre><code> <a href="https://developer.android.com/reference/android/telecom/ConnectionService.html"> ConnectionService </a> </code></pre> implementation. <p> You can handle these callbacks by extending the <pre><code> <a href="https://developer.android.com/reference/android/telecom/Call.Callback.html"> Call.Callback </a> </code></pre> class and overriding the callbacks that your <pre><code> <a href="https://developer.android.com/reference/android/telecom/InCallService.html"> InCallService </a> </code></pre> is interested in. The callback methods include the <pre><code> <a href="https://developer.android.com/reference/android/telecom/Call.html"> Call </a> </code></pre> for which the callback applies, allowing reuse of a single instance of your <pre><code> <a href="https://developer.android.com/reference/android/telecom/Call.Callback.html"> Call.Callback </a> </code></pre> implementation, if desired. <p> Use <pre><code> <a href="https://developer.android.com/reference/android/telecom/Call.html#registerCallback(android.telecom.Call.Callback)"> registerCallback(Callback) </a> </code></pre> to register your callback(s). Ensure <pre><code> <a href="https://developer.android.com/reference/android/telecom/Call.html#unregisterCallback(android.telecom.Call.Callback)"> unregisterCallback(Callback) </a> </code></pre> is called when you no longer require callbacks (typically in <pre><code> <a href="https://developer.android.com/reference/android/telecom/InCallService.html#onCallRemoved(android.telecom.Call)"> onCallRemoved(Call) </a> </code></pre> ). Note: Callbacks which occur before you call <pre><code> <a href="https://developer.android.com/reference/android/telecom/Call.html#registerCallback(android.telecom.Call.Callback)"> registerCallback(Callback) </a> </code></pre> will not reach your implementation of <pre><code> <a href="https://developer.android.com/reference/android/telecom/Call.Callback.html"> Call.Callback </a> </code></pre> , so it is important to register your callback as soon as your <pre><code> <a href="https://developer.android.com/reference/android/telecom/InCallService.html"> InCallService </a> </code></pre> is notified of a new call via <pre><code> <a href="https://developer.android.com/reference/android/telecom/InCallService.html#onCallAdded(android.telecom.Call)"> onCallAdded(Call) </a> </code></pre> . </p>\n<pre><code>public static abstract class Call.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/Call.Callback.html
Call.Details	A										<section class="prog__container"><p> When set, prevents a video <pre><code> Call </code></pre> from being downgraded to an audio-only call.</p>\n<pre><code>public static class Call.Details\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/Call.Details.html
Call	A										<section class="prog__container"><p> Represents an ongoing phone call that the in-call app should present to the user.</p>\n<pre><code>public final class Call\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/Call.html
CallAudioState	A										<section class="prog__container"><p> Encapsulates the telecom audio state, including the current audio routing, supported audio routing and mute.</p>\n<pre><code>public final class CallAudioState\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/CallAudioState.html
CallScreeningService.CallResponse.Builder	A										<section class="prog__container"><p> Creates and returns a copy of this object.</p>\n<pre><code>public static class CallScreeningService.CallResponse.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/CallScreeningService.CallResponse.Builder.html
CallScreeningService.CallResponse	A										<section class="prog__container"><p></p>\n<pre><code>public static class CallScreeningService.CallResponse\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/CallScreeningService.CallResponse.html
CallScreeningService	A										<section class="prog__container"><p> This service can be implemented by the default dialer (see <pre><code> <a href="https://developer.android.com/reference/android/telecom/TelecomManager.html#getDefaultDialerPackage()"> getDefaultDialerPackage() </a> </code></pre> ) to allow or disallow incoming calls before they are shown to a user. <p> Below is an example manifest registration for a <pre><code> CallScreeningService </code></pre> . <pre> <pre><code>&lt;service android:name="your.package.YourCallScreeningServiceImplementation" android:permission="android.permission.BIND_SCREENING_SERVICE"&gt; &lt;intent-filter&gt; &lt;action android:name="android.telecom.CallScreeningService"/&gt; &lt;/intent-filter&gt; &lt;/service&gt; </code></pre> </pre> </p>\n<pre><code>public abstract class CallScreeningService\n</code></pre></section>	https://developer.android.com/reference/android/telecom/CallScreeningService.html
Conference	A										<section class="prog__container"><p> Represents a conference call which can contain any number of <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html"> Connection </a> </code></pre> objects.</p>\n<pre><code>public abstract class Conference\n</code></pre></section>	https://developer.android.com/reference/android/telecom/Conference.html
Conferenceable	A										<section class="prog__container"><p> Interface used to identify entities with which another entity can participate in a conference call with. The <pre><code> <a href="https://developer.android.com/reference/android/telecom/ConnectionService.html"> ConnectionService </a> </code></pre> implementation will only recognize <pre><code> <a href="https://developer.android.com/reference/android/telecom/Conferenceable.html"> Conferenceable </a> </code></pre> s which are <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html"> Connection </a> </code></pre> s or <pre><code> <a href="https://developer.android.com/reference/android/telecom/Conference.html"> Conference </a> </code></pre> s.</p>\n<pre><code>public abstract class Conferenceable\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/Conferenceable.html
Connection	A										<section class="prog__container"><p> Represents a phone call or connection to a remote endpoint that carries voice and/or video traffic. <p> Implementations create a custom subclass of <pre><code> Connection </code></pre> and return it to the framework as the return value of <pre><code> <a href="https://developer.android.com/reference/android/telecom/ConnectionService.html#onCreateIncomingConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)"> onCreateIncomingConnection(PhoneAccountHandle, ConnectionRequest) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/telecom/ConnectionService.html#onCreateOutgoingConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)"> onCreateOutgoingConnection(PhoneAccountHandle, ConnectionRequest) </a> </code></pre> . Implementations are then responsible for updating the state of the <pre><code> Connection </code></pre> , and must call <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html#destroy()"> destroy() </a> </code></pre> to signal to the framework that the <pre><code> Connection </code></pre> is no longer used and associated resources may be recovered. <p> Subclasses of <pre><code> Connection </code></pre> override the <pre><code> on* </code></pre> methods to provide the the <pre><code> <a href="https://developer.android.com/reference/android/telecom/ConnectionService.html"> ConnectionService </a> </code></pre> 's implementation of calling functionality. The <pre><code> on* </code></pre> methods are called by Telecom to inform an instance of a <pre><code> Connection </code></pre> of actions specific to that <pre><code> Connection </code></pre> instance. <p> Basic call support requires overriding the following methods: <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html#onAnswer()"> onAnswer() </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html#onDisconnect()"> onDisconnect() </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html#onReject()"> onReject() </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html#onAbort()"> onAbort() </a> </code></pre> <p> Where a <pre><code> Connection </code></pre> has <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_SUPPORT_HOLD"> CAPABILITY_SUPPORT_HOLD </a> </code></pre> , the <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html#onHold()"> onHold() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html#onUnhold()"> onUnhold() </a> </code></pre> methods should be overridden to provide hold support for the <pre><code> Connection </code></pre> . <p> Where a <pre><code> Connection </code></pre> supports a variation of video calling (e.g. the <pre><code> CAPABILITY_SUPPORTS_VT_* </code></pre> capability bits), <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html#onAnswer(int)"> onAnswer(int) </a> </code></pre> should be overridden to support answering a call as a video call. <p> Where a <pre><code> Connection </code></pre> has <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html#PROPERTY_IS_EXTERNAL_CALL"> PROPERTY_IS_EXTERNAL_CALL </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html#CAPABILITY_CAN_PULL_CALL"> CAPABILITY_CAN_PULL_CALL </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html#onPullExternalCall()"> onPullExternalCall() </a> </code></pre> should be overridden to provide support for pulling the external call. <p> Where a <pre><code> Connection </code></pre> supports conference calling <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html#onSeparate()"> onSeparate() </a> </code></pre> should be overridden. <p> There are a number of other <pre><code> on* </code></pre> methods which a <pre><code> Connection </code></pre> can choose to implement, depending on whether it is concerned with the associated calls from Telecom. If, for example, call events from a <pre><code> <a href="https://developer.android.com/reference/android/telecom/InCallService.html"> InCallService </a> </code></pre> are handled, <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html#onCallEvent(java.lang.String, android.os.Bundle)"> onCallEvent(String, Bundle) </a> </code></pre> should be overridden. Another example is <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html#onExtrasChanged(android.os.Bundle)"> onExtrasChanged(Bundle) </a> </code></pre> , which should be overridden if the <pre><code> Connection </code></pre> wishes to make use of extra information provided via the <pre><code> <a href="https://developer.android.com/reference/android/telecom/Call.html#putExtras(android.os.Bundle)"> putExtras(Bundle) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/telecom/Call.html#removeExtras(java.lang.String...)"> removeExtras(String) </a> </code></pre> methods. </p>\n<pre><code>public abstract class Connection\n</code></pre></section>	https://developer.android.com/reference/android/telecom/Connection.html
Connection.VideoProvider	A										<section class="prog__container"><p> Provides a means of controlling the video session associated with a <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html"> Connection </a> </code></pre> . <p> Implementations create a custom subclass of <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html"> Connection.VideoProvider </a> </code></pre> and the <pre><code> <a href="https://developer.android.com/reference/android/telecom/ConnectionService.html"> ConnectionService </a> </code></pre> creates an instance sets it on the <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html"> Connection </a> </code></pre> using <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html#setVideoProvider(android.telecom.Connection.VideoProvider)"> setVideoProvider(VideoProvider) </a> </code></pre> . Any connection which supports video should set the <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html"> Connection.VideoProvider </a> </code></pre> . <p> The <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html"> Connection.VideoProvider </a> </code></pre> serves two primary purposes: it provides a means for Telecom and <pre><code> <a href="https://developer.android.com/reference/android/telecom/InCallService.html"> InCallService </a> </code></pre> implementations to issue requests related to the video session; it provides a means for the <pre><code> <a href="https://developer.android.com/reference/android/telecom/ConnectionService.html"> ConnectionService </a> </code></pre> to report events and information related to the video session to Telecom and the <pre><code> <a href="https://developer.android.com/reference/android/telecom/InCallService.html"> InCallService </a> </code></pre> implementations. <p> <pre><code> <a href="https://developer.android.com/reference/android/telecom/InCallService.html"> InCallService </a> </code></pre> implementations interact with the <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html"> Connection.VideoProvider </a> </code></pre> via <pre><code> <a href="https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html"> InCallService.VideoCall </a> </code></pre> . </p>\n<pre><code>public static abstract class Connection.VideoProvider\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html
ConnectionRequest	A										<section class="prog__container"><p> Simple data container encapsulating a request to some entity to create a new <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html"> Connection </a> </code></pre> .</p>\n<pre><code>public final class ConnectionRequest\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/ConnectionRequest.html
ConnectionService	A										<section class="prog__container"><p> An abstract service that should be implemented by any apps which can make phone calls (VoIP or otherwise) and want those calls to be integrated into the built-in phone app. Once implemented, the <pre><code> ConnectionService </code></pre> needs two additional steps before it will be integrated into the phone app: <p> 1. <i> Registration in AndroidManifest.xml </i> <br/> <pre> &lt;service android:name="com.example.package.MyConnectionService" android:label="@string/some_label_for_my_connection_service" android:permission="android.permission.BIND_TELECOM_CONNECTION_SERVICE"&gt; &lt;intent-filter&gt; &lt;action android:name="android.telecom.ConnectionService" /&gt; &lt;/intent-filter&gt; &lt;/service&gt; </pre> <p> 2. <i> Registration of <pre><code> <a href="https://developer.android.com/reference/android/telecom/PhoneAccount.html"> PhoneAccount </a> </code></pre> with <pre><code> <a href="https://developer.android.com/reference/android/telecom/TelecomManager.html"> TelecomManager </a> </code></pre> . </i> <br/> See <pre><code> <a href="https://developer.android.com/reference/android/telecom/PhoneAccount.html"> PhoneAccount </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/telecom/TelecomManager.html#registerPhoneAccount(android.telecom.PhoneAccount)"> registerPhoneAccount(PhoneAccount) </a> </code></pre> for more information. <p> Once registered and enabled by the user in the phone app settings, telecom will bind to a <pre><code> ConnectionService </code></pre> implementation when it wants that <pre><code> ConnectionService </code></pre> to place a call or the service has indicated that is has an incoming call through <pre><code> <a href="https://developer.android.com/reference/android/telecom/TelecomManager.html#addNewIncomingCall(android.telecom.PhoneAccountHandle, android.os.Bundle)"> addNewIncomingCall(PhoneAccountHandle, Bundle) </a> </code></pre> . The <pre><code> ConnectionService </code></pre> can then expect a call to <pre><code> <a href="https://developer.android.com/reference/android/telecom/ConnectionService.html#onCreateIncomingConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)"> onCreateIncomingConnection(PhoneAccountHandle, ConnectionRequest) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/telecom/ConnectionService.html#onCreateOutgoingConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)"> onCreateOutgoingConnection(PhoneAccountHandle, ConnectionRequest) </a> </code></pre> wherein it should provide a new instance of a <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html"> Connection </a> </code></pre> object. It is through this <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.html"> Connection </a> </code></pre> object that telecom receives state updates and the <pre><code> ConnectionService </code></pre> receives call-commands such as answer, reject, hold and disconnect. <p> When there are no more live calls, telecom will unbind from the <pre><code> ConnectionService </code></pre> . </p>\n<pre><code>public abstract class ConnectionService\n</code></pre></section>	https://developer.android.com/reference/android/telecom/ConnectionService.html
DisconnectCause	A										<section class="prog__container"><p> Describes the cause of a disconnected call. This always includes a code describing the generic cause of the disconnect. Optionally, it may include a label and/or description to display to the user. It is the responsibility of the <pre><code> <a href="https://developer.android.com/reference/android/telecom/ConnectionService.html"> ConnectionService </a> </code></pre> to provide localized versions of the label and description. It also may contain a reason for the disconnect, which is intended for logging and not for display to the user.</p>\n<pre><code>public final class DisconnectCause\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/DisconnectCause.html
GatewayInfo	A										<section class="prog__container"><p> Encapsulated gateway address information for outgoing call. When calls are made, the system provides a facility to specify two addresses for the call: one to display as the address being dialed and a separate (gateway) address to actually dial. Telecom provides this information to <pre><code> <a href="https://developer.android.com/reference/android/telecom/ConnectionService.html"> ConnectionService </a> </code></pre> s when placing the call as an instance of <pre><code> GatewayInfo </code></pre> . <p> The data consists of an address to call, an address to display and the package name of the service. This data is used in two ways: <ol> <li> Call the appropriate gateway address. <li> Display information about how the call is being routed to the user. </li> </li> </ol> </p>\n<pre><code>public class GatewayInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/GatewayInfo.html
InCallService	A										<section class="prog__container"><p> This service is implemented by any app that wishes to provide the user-interface for managing phone calls. Telecom binds to this service while there exists a live (active or incoming) call, and uses it to notify the in-call app of any live and recently disconnected calls. An app must first be set as the default phone app (See <pre><code> <a href="https://developer.android.com/reference/android/telecom/TelecomManager.html#getDefaultDialerPackage()"> getDefaultDialerPackage() </a> </code></pre> ) before the telecom service will bind to its <pre><code> InCallService </code></pre> implementation. <p> Below is an example manifest registration for an <pre><code> InCallService </code></pre> . The meta-data ( <pre><code> <a href="https://developer.android.com/reference/android/telecom/TelecomManager.html#METADATA_IN_CALL_SERVICE_UI"> METADATA_IN_CALL_SERVICE_UI </a> </code></pre> ) indicates that this particular <pre><code> InCallService </code></pre> implementation intends to replace the built-in in-call UI. <pre> <pre><code>&lt;service android:name="your.package.YourInCallServiceImplementation" android:permission="android.permission.BIND_INCALL_SERVICE"&gt; &lt;meta-data android:name="android.telecom.IN_CALL_SERVICE_UI" android:value="true" /&gt; &lt;intent-filter&gt; &lt;action android:name="android.telecom.InCallService"/&gt; &lt;/intent-filter&gt; &lt;/service&gt; </code></pre> </pre> </p>\n<pre><code>public abstract class InCallService\n</code></pre></section>	https://developer.android.com/reference/android/telecom/InCallService.html
InCallService.VideoCall.Callback	A										<section class="prog__container"><p> The <pre><code> <a href="https://developer.android.com/reference/android/telecom/InCallService.html"> InCallService </a> </code></pre> extends this class to provide a means of receiving callbacks from the <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html"> Connection.VideoProvider </a> </code></pre> . <p> When the <pre><code> <a href="https://developer.android.com/reference/android/telecom/InCallService.html"> InCallService </a> </code></pre> receives the <pre><code> <a href="https://developer.android.com/reference/android/telecom/Call.Callback.html#onVideoCallChanged(android.telecom.Call, android.telecom.InCallService.VideoCall)"> onVideoCallChanged(Call, VideoCall) </a> </code></pre> callback, it should create an instance its <pre><code> <a href="https://developer.android.com/reference/android/telecom/InCallService.VideoCall.Callback.html"> InCallService.VideoCall.Callback </a> </code></pre> implementation and set it on the <pre><code> <a href="https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html"> InCallService.VideoCall </a> </code></pre> using <pre><code> <a href="https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html#registerCallback(android.telecom.InCallService.VideoCall.Callback)"> registerCallback(Callback) </a> </code></pre> . </p>\n<pre><code>public static abstract class InCallService.VideoCall.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/InCallService.VideoCall.Callback.html
InCallService.VideoCall	A										<section class="prog__container"><p> Used to issue commands to the <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html"> Connection.VideoProvider </a> </code></pre> associated with a <pre><code> <a href="https://developer.android.com/reference/android/telecom/Call.html"> Call </a> </code></pre> .</p>\n<pre><code>public static abstract class InCallService.VideoCall\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/InCallService.VideoCall.html
android.telecom	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/telecom/package-summary.html
PhoneAccount.Builder	A										<section class="prog__container"><p> Helper class for creating a <pre><code> <a href="https://developer.android.com/reference/android/telecom/PhoneAccount.html"> PhoneAccount </a> </code></pre> .</p>\n<pre><code>public static class PhoneAccount.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/PhoneAccount.Builder.html
PhoneAccount	A										<section class="prog__container"><p> Represents a distinct method to place or receive a phone call. Apps which can place calls and want those calls to be integrated into the dialer and in-call UI should build an instance of this class and register it with the system using <pre><code> <a href="https://developer.android.com/reference/android/telecom/TelecomManager.html"> TelecomManager </a> </code></pre> . <p> <pre><code> <a href="https://developer.android.com/reference/android/telecom/TelecomManager.html"> TelecomManager </a> </code></pre> uses registered <pre><code> <a href="https://developer.android.com/reference/android/telecom/PhoneAccount.html"> PhoneAccount </a> </code></pre> s to present the user with alternative options when placing a phone call. When building a <pre><code> <a href="https://developer.android.com/reference/android/telecom/PhoneAccount.html"> PhoneAccount </a> </code></pre> , the app should supply a valid <pre><code> <a href="https://developer.android.com/reference/android/telecom/PhoneAccountHandle.html"> PhoneAccountHandle </a> </code></pre> that references the connection service implementation Telecom will use to interact with the app. </p>\n<pre><code>public final class PhoneAccount\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/PhoneAccount.html
PhoneAccountHandle	A										<section class="prog__container"><p> The unique identifier for a <pre><code> <a href="https://developer.android.com/reference/android/telecom/PhoneAccount.html"> PhoneAccount </a> </code></pre> . A <pre><code> PhoneAccountHandle </code></pre> is made of two parts: <ul> <li> The component name of the associated connection service. </li> <li> A string identifier that is unique across <pre><code> PhoneAccountHandle </code></pre> s with the same component name. </li> </ul> Note: This Class requires a non-null <pre><code> <a href="https://developer.android.com/reference/android/content/ComponentName.html"> ComponentName </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/os/UserHandle.html"> UserHandle </a> </code></pre> to operate properly. Passing in invalid parameters will generate a log warning. See <pre><code> <a href="https://developer.android.com/reference/android/telecom/PhoneAccount.html"> PhoneAccount </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/telecom/TelecomManager.html"> TelecomManager </a> </code></pre> .</p>\n<pre><code>public final class PhoneAccountHandle\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/PhoneAccountHandle.html
RemoteConference.Callback	A										<section class="prog__container"><p> Callback base class for <pre><code> <a href="https://developer.android.com/reference/android/telecom/RemoteConference.html"> RemoteConference </a> </code></pre> .</p>\n<pre><code>public static abstract class RemoteConference.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/RemoteConference.Callback.html
RemoteConference	A										<section class="prog__container"><p> A conference provided to a <pre><code> <a href="https://developer.android.com/reference/android/telecom/ConnectionService.html"> ConnectionService </a> </code></pre> by another <pre><code> ConnectionService </code></pre> through <pre><code> <a href="https://developer.android.com/reference/android/telecom/ConnectionService.html#conferenceRemoteConnections(android.telecom.RemoteConnection, android.telecom.RemoteConnection)"> conferenceRemoteConnections(RemoteConnection, RemoteConnection) </a> </code></pre> . Once created, a <pre><code> RemoteConference </code></pre> can be used to control the conference call or monitor changes through <pre><code> <a href="https://developer.android.com/reference/android/telecom/RemoteConnection.Callback.html"> RemoteConnection.Callback </a> </code></pre> .</p>\n<pre><code>public final class RemoteConference\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/RemoteConference.html
RemoteConnection.Callback	A										<section class="prog__container"><p> Callback base class for <pre><code> <a href="https://developer.android.com/reference/android/telecom/RemoteConnection.html"> RemoteConnection </a> </code></pre> .</p>\n<pre><code>public static abstract class RemoteConnection.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/RemoteConnection.Callback.html
RemoteConnection	A										<section class="prog__container"><p> A connection provided to a <pre><code> <a href="https://developer.android.com/reference/android/telecom/ConnectionService.html"> ConnectionService </a> </code></pre> by another <pre><code> ConnectionService </code></pre> running in a different process.</p>\n<pre><code>public final class RemoteConnection\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/RemoteConnection.html
RemoteConnection.VideoProvider.Callback	A										<section class="prog__container"><p> Callback class used by the <pre><code> <a href="https://developer.android.com/reference/android/telecom/RemoteConnection.VideoProvider.html"> RemoteConnection.VideoProvider </a> </code></pre> to relay events from the <pre><code> <a href="https://developer.android.com/reference/android/telecom/Connection.VideoProvider.html"> Connection.VideoProvider </a> </code></pre> .</p>\n<pre><code>public static abstract class RemoteConnection.VideoProvider.Callback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/RemoteConnection.VideoProvider.Callback.html
RemoteConnection.VideoProvider	A										<section class="prog__container"><p> <pre><code> <a href="https://developer.android.com/reference/android/telecom/RemoteConnection.VideoProvider.html"> RemoteConnection.VideoProvider </a> </code></pre> associated with a <pre><code> <a href="https://developer.android.com/reference/android/telecom/RemoteConnection.html"> RemoteConnection </a> </code></pre> . Used to receive video related events and control the video associated with a <pre><code> <a href="https://developer.android.com/reference/android/telecom/RemoteConnection.html"> RemoteConnection </a> </code></pre> .</p>\n<pre><code>public static class RemoteConnection.VideoProvider\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/RemoteConnection.VideoProvider.html
StatusHints	A										<section class="prog__container"><p> Contains status label and icon displayed in the in-call UI.</p>\n<pre><code>public final class StatusHints\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/StatusHints.html
TelecomManager	A										<section class="prog__container"><p> Provides access to information about active calls and registration/call-management functionality. Apps can use methods in this class to determine the current call state. <p> Apps do not instantiate this class directly; instead, they retrieve a reference to an instance through <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.Class&lt;T&gt;)"> Context.getSystemService(Context.TELECOM_SERVICE) </a> </code></pre> . <p> Note that access to some telecom information is permission-protected. Your app cannot access the protected information or gain access to protected functionality unless it has the appropriate permissions declared in its manifest file. Where permissions apply, they are noted in the method descriptions. </p>\n<pre><code>public class TelecomManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/TelecomManager.html
VideoProfile.CameraCapabilities	A										<section class="prog__container"><p> Represents the camera capabilities important to a Video Telephony provider.</p>\n<pre><code>public static final class VideoProfile.CameraCapabilities\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/VideoProfile.CameraCapabilities.html
VideoProfile	A										<section class="prog__container"><p> Represents attributes of video calls.</p>\n<pre><code>public class VideoProfile\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telecom/VideoProfile.html
CarrierConfigManager	A										<section class="prog__container"><p> Provides access to telephony configuration values that are carrier-specific. <p> Users should obtain an instance of this class by calling <pre><code> mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE); </code></pre> </p>\n<pre><code>public class CarrierConfigManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/CarrierConfigManager.html
CellIdentityCdma	A										<section class="prog__container"><p> CellIdentity is to represent a unique CDMA cell</p>\n<pre><code>public final class CellIdentityCdma\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/CellIdentityCdma.html
CellIdentityGsm	A										<section class="prog__container"><p> CellIdentity to represent a unique GSM cell</p>\n<pre><code>public final class CellIdentityGsm\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/CellIdentityGsm.html
CellIdentityLte	A										<section class="prog__container"><p> CellIdentity is to represent a unique LTE cell</p>\n<pre><code>public final class CellIdentityLte\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/CellIdentityLte.html
CellIdentityWcdma	A										<section class="prog__container"><p> CellIdentity to represent a unique UMTS cell</p>\n<pre><code>public final class CellIdentityWcdma\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/CellIdentityWcdma.html
CellInfo	A										<section class="prog__container"><p> Immutable cell information from a point in time.</p>\n<pre><code>public abstract class CellInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/CellInfo.html
CellInfoCdma	A										<section class="prog__container"><p> Immutable cell information from a point in time.</p>\n<pre><code>public final class CellInfoCdma\n</code></pre></section>	https://developer.android.com/reference/android/telephony/CellInfoCdma.html
CellInfoGsm	A										<section class="prog__container"><p> Immutable cell information from a point in time.</p>\n<pre><code>public final class CellInfoGsm\n</code></pre></section>	https://developer.android.com/reference/android/telephony/CellInfoGsm.html
CellInfoLte	A										<section class="prog__container"><p> Immutable cell information from a point in time.</p>\n<pre><code>public final class CellInfoLte\n</code></pre></section>	https://developer.android.com/reference/android/telephony/CellInfoLte.html
CellInfoWcdma	A										<section class="prog__container"><p> Immutable cell information from a point in time.</p>\n<pre><code>public final class CellInfoWcdma\n</code></pre></section>	https://developer.android.com/reference/android/telephony/CellInfoWcdma.html
CellLocation	A										<section class="prog__container"><p> Abstract class that represents the location of the device. <p> </p>\n<pre><code>public abstract class CellLocation\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/CellLocation.html
CellSignalStrength	A										<section class="prog__container"><p> Abstract base class for cell phone signal strength related information.</p>\n<pre><code>public abstract class CellSignalStrength\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/CellSignalStrength.html
CellSignalStrengthCdma	A										<section class="prog__container"><p> Signal strength related information.</p>\n<pre><code>public final class CellSignalStrengthCdma\n</code></pre></section>	https://developer.android.com/reference/android/telephony/CellSignalStrengthCdma.html
CellSignalStrengthGsm	A										<section class="prog__container"><p> GSM signal strength related information.</p>\n<pre><code>public final class CellSignalStrengthGsm\n</code></pre></section>	https://developer.android.com/reference/android/telephony/CellSignalStrengthGsm.html
CellSignalStrengthLte	A										<section class="prog__container"><p> LTE signal strength related information.</p>\n<pre><code>public final class CellSignalStrengthLte\n</code></pre></section>	https://developer.android.com/reference/android/telephony/CellSignalStrengthLte.html
CellSignalStrengthWcdma	A										<section class="prog__container"><p> Wcdma signal strength related information.</p>\n<pre><code>public final class CellSignalStrengthWcdma\n</code></pre></section>	https://developer.android.com/reference/android/telephony/CellSignalStrengthWcdma.html
IccOpenLogicalChannelResponse	A										<section class="prog__container"><p> Response to the <pre><code> <a href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#iccOpenLogicalChannel(java.lang.String)"> iccOpenLogicalChannel(String) </a> </code></pre> command.</p>\n<pre><code>public class IccOpenLogicalChannelResponse\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/IccOpenLogicalChannelResponse.html
NeighboringCellInfo	A										<section class="prog__container"><p> Represents the neighboring cell information, including Received Signal Strength and Cell ID location.</p>\n<pre><code>public class NeighboringCellInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/NeighboringCellInfo.html
android.telephony	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/telephony/package-summary.html
PhoneNumberFormattingTextWatcher	A										<section class="prog__container"><p> Watches a <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html"> TextView </a> </code></pre> and if a phone number is entered will format it. <p> Stop formatting when the user <ul> <li> Inputs non-dialable characters </li> <li> Removes the separator in the middle of string. </li> </ul> <p> The formatting will be restarted once the text is cleared. </p>\n<pre><code>public class PhoneNumberFormattingTextWatcher\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/PhoneNumberFormattingTextWatcher.html
PhoneNumberUtils	A										<section class="prog__container"><p> Various utilities for dealing with phone number strings.</p>\n<pre><code>public class PhoneNumberUtils\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/PhoneNumberUtils.html
PhoneStateListener	A										<section class="prog__container"><p> A listener class for monitoring changes in specific telephony states on the device, including service state, signal strength, message waiting indicator (voicemail), and others. <p> Override the methods for the state that you wish to receive updates for, and pass your PhoneStateListener object, along with bitwise-or of the LISTEN_ flags to <pre><code> <a href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#listen(android.telephony.PhoneStateListener, int)"> TelephonyManager.listen() </a> </code></pre> . <p> Note that access to some telephony information is permission-protected. Your application won't receive updates for protected information unless it has the appropriate permissions declared in its manifest file. Where permissions apply, they are noted in the appropriate LISTEN_ flags. </p>\n<pre><code>public class PhoneStateListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/PhoneStateListener.html
ServiceState	A										<section class="prog__container"><p> Contains phone state and service related information. The following phone information is included in returned ServiceState: <ul> <li> Service state: IN_SERVICE, OUT_OF_SERVICE, EMERGENCY_ONLY, POWER_OFF <li> Roaming indicator <li> Operator name, short name and numeric id <li> Network selection mode </li> </li> </li> </li> </ul></p>\n<pre><code>public class ServiceState\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/ServiceState.html
SignalStrength	A										<section class="prog__container"><p> Contains phone signal strength related information.</p>\n<pre><code>public class SignalStrength\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/SignalStrength.html
SmsManager	A										<section class="prog__container"><p> Manages SMS operations such as sending data, text, and pdu SMS messages. Get this object by calling the static method <pre><code> <a href="https://developer.android.com/reference/android/telephony/SmsManager.html#getDefault()"> getDefault() </a> </code></pre> . <p> For information about how to behave as the default SMS app on Android 4.4 (API level 19) and higher, see <pre><code> <a href="https://developer.android.com/reference/android/provider/Telephony.html"> Telephony </a> </code></pre> . </p>\n<pre><code>public final class SmsManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/SmsManager.html
SmsMessage	A										<section class="prog__container"><p> A Short Message Service message.</p>\n<pre><code>public class SmsMessage\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/SmsMessage.html
SmsMessage.MessageClass	A										<section class="prog__container"><p> SMS Class enumeration. See TS 23.038.</p>\n<pre><code>public static final enum SmsMessage.MessageClass\n</code></pre></section>	https://developer.android.com/reference/android/telephony/SmsMessage.MessageClass.html
SmsMessage.SubmitPdu	A										<section class="prog__container"><p></p>\n<pre><code>public static class SmsMessage.SubmitPdu\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/SmsMessage.SubmitPdu.html
SubscriptionInfo	A										<section class="prog__container"><p> A Parcelable class for Subscription Information.</p>\n<pre><code>public class SubscriptionInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/SubscriptionInfo.html
SubscriptionManager	A										<section class="prog__container"><p> SubscriptionManager is the application interface to SubscriptionController and provides information about the current Telephony Subscriptions. * <p> You do not instantiate this class directly; instead, you retrieve a reference to an instance through <pre><code> <a href="https://developer.android.com/reference/android/telephony/SubscriptionManager.html#from(android.content.Context)"> from(Context) </a> </code></pre> . <p> All SDK public methods require android.Manifest.permission.READ_PHONE_STATE. </p>\n<pre><code>public class SubscriptionManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/SubscriptionManager.html
SubscriptionManager.OnSubscriptionsChangedListener	A										<section class="prog__container"><p> A listener class for monitoring changes to <pre><code> <a href="https://developer.android.com/reference/android/telephony/SubscriptionInfo.html"> SubscriptionInfo </a> </code></pre> records. <p> Override the onSubscriptionsChanged method in the object that extends this class and pass it to <pre><code> <a href="https://developer.android.com/reference/android/telephony/SubscriptionManager.html#addOnSubscriptionsChangedListener(android.telephony.SubscriptionManager.OnSubscriptionsChangedListener)"> addOnSubscriptionsChangedListener(OnSubscriptionsChangedListener) </a> </code></pre> to register your listener and to unregister invoke <pre><code> <a href="https://developer.android.com/reference/android/telephony/SubscriptionManager.html#removeOnSubscriptionsChangedListener(android.telephony.SubscriptionManager.OnSubscriptionsChangedListener)"> removeOnSubscriptionsChangedListener(OnSubscriptionsChangedListener) </a> </code></pre> <p> Permissions android.Manifest.permission.READ_PHONE_STATE is required for #onSubscriptionsChanged to be invoked. </p>\n<pre><code>public static class SubscriptionManager.OnSubscriptionsChangedListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/SubscriptionManager.OnSubscriptionsChangedListener.html
TelephonyManager	A										<section class="prog__container"><p> Provides access to information about the telephony services on the device. Applications can use the methods in this class to determine telephony services and states, as well as to access some types of subscriber information. Applications can also register a listener to receive notification of telephony state changes. <p> You do not instantiate this class directly; instead, you retrieve a reference to an instance through <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.Class&lt;T&gt;)"> Context.getSystemService(Context.TELEPHONY_SERVICE) </a> </code></pre> . The returned TelephonyManager will use the default subscription for all calls. To call an API for a specific subscription, use <pre><code> <a href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#createForSubscriptionId(int)"> createForSubscriptionId(int) </a> </code></pre> . e.g. <pre><code> telephonyManager = defaultSubTelephonyManager.createForSubscriptionId(subId); </code></pre> <p> Note that access to some telephony information is permission-protected. Your application cannot access the protected information unless it has the appropriate permissions declared in its manifest file. Where permissions apply, they are noted in the the methods through which you access the protected information. </p>\n<pre><code>public class TelephonyManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/TelephonyManager.html
CdmaCellLocation	A										<section class="prog__container"><p> Represents the cell location on a CDMA phone.</p>\n<pre><code>public class CdmaCellLocation\n</code></pre></section>	https://developer.android.com/reference/android/telephony/cdma/CdmaCellLocation.html
android.telephony.cdma	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/telephony/cdma/package-summary.html
GsmCellLocation	A										<section class="prog__container"><p> Represents the cell location on a GSM phone.</p>\n<pre><code>public class GsmCellLocation\n</code></pre></section>	https://developer.android.com/reference/android/telephony/gsm/GsmCellLocation.html
android.telephony.gsm	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/telephony/gsm/package-summary.html
SmsManager	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 4. </strong> <br/> Replaced by android.telephony.SmsManager that supports both GSM and CDMA. </p>\n<pre><code>public final class SmsManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/gsm/SmsManager.html
SmsMessage	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 4. </strong> <br/> Replaced by android.telephony.SmsMessage that supports both GSM and CDMA. </p>\n<pre><code>public class SmsMessage\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/gsm/SmsMessage.html
SmsMessage.MessageClass	A										<section class="prog__container"><p> <p class="caution"> <strong> This enum was deprecated in API level 4. </strong> <br/> Use android.telephony.SmsMessage. </p>\n<pre><code>public static final enum SmsMessage.MessageClass\n</code></pre></section>	https://developer.android.com/reference/android/telephony/gsm/SmsMessage.MessageClass.html
SmsMessage.SubmitPdu	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 4. </strong> <br/> Use android.telephony.SmsMessage. </p>\n<pre><code>public static class SmsMessage.SubmitPdu\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/telephony/gsm/SmsMessage.SubmitPdu.html
ActivityInstrumentationTestCase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 3. </strong> <br/> new tests should be written using <pre><code> <a href="https://developer.android.com/reference/android/test/ActivityInstrumentationTestCase2.html"> ActivityInstrumentationTestCase2 </a> </code></pre> , which provides more options for configuring the Activity under test </p>\n<pre><code>public abstract class ActivityInstrumentationTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/ActivityInstrumentationTestCase.html
ActivityInstrumentationTestCase2	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use <a href="https://developer.android.com/reference/android/support/test/rule/ActivityTestRule.html"> ActivityTestRule </a> instead. New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public abstract class ActivityInstrumentationTestCase2\n</code></pre></section>	https://developer.android.com/reference/android/test/ActivityInstrumentationTestCase2.html
ActivityTestCase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public abstract class ActivityTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/ActivityTestCase.html
ActivityUnitTestCase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Write <a href="https://developer.android.com/training/testing/unit-testing/local-unit-tests.html"> Local Unit Tests </a> instead. </p>\n<pre><code>public abstract class ActivityUnitTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/ActivityUnitTestCase.html
AndroidTestCase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use <a href="https://developer.android.com/reference/android/support/test/InstrumentationRegistry.html"> InstrumentationRegistry </a> instead. New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public class AndroidTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/AndroidTestCase.html
AndroidTestRunner	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use <a href="https://developer.android.com/reference/android/support/test/runner/AndroidJUnitRunner.html"> AndroidJUnitRunner </a> instead. New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public class AndroidTestRunner\n</code></pre></section>	https://developer.android.com/reference/android/test/AndroidTestRunner.html
ApplicationTestCase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use <a href="https://developer.android.com/reference/android/support/test/InstrumentationRegistry.html"> InstrumentationRegistry </a> instead. New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public abstract class ApplicationTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/ApplicationTestCase.html
AssertionFailedError	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 16. </strong> <br/> use junit.framework.AssertionFailedError </p>\n<pre><code>public class AssertionFailedError\n</code></pre></section>	https://developer.android.com/reference/android/test/AssertionFailedError.html
ComparisonFailure	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 16. </strong> <br/> use junit.framework.ComparisonFailure </p>\n<pre><code>public class ComparisonFailure\n</code></pre></section>	https://developer.android.com/reference/android/test/ComparisonFailure.html
FlakyTest	A										<section class="prog__container"><p> <p class="caution"> <strong> This @interface was deprecated in API level 24. </strong> <br/> Use <a href="https://developer.android.com/reference/android/support/test/filters/FlakyTest.html"> FlakyTest </a> instead. New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public abstract @interface FlakyTest\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/test/FlakyTest.html
InstrumentationTestCase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use <a href="https://developer.android.com/reference/android/support/test/InstrumentationRegistry.html"> InstrumentationRegistry </a> instead. New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public class InstrumentationTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/InstrumentationTestCase.html
InstrumentationTestRunner	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use <a href="https://developer.android.com/reference/android/support/test/runner/AndroidJUnitRunner.html"> AndroidJUnitRunner </a> instead. New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public class InstrumentationTestRunner\n</code></pre></section>	https://developer.android.com/reference/android/test/InstrumentationTestRunner.html
InstrumentationTestSuite	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use <a href="https://developer.android.com/reference/android/support/test/InstrumentationRegistry.html"> InstrumentationRegistry </a> instead. New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public class InstrumentationTestSuite\n</code></pre></section>	https://developer.android.com/reference/android/test/InstrumentationTestSuite.html
IsolatedContext	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public class IsolatedContext\n</code></pre></section>	https://developer.android.com/reference/android/test/IsolatedContext.html
LoaderTestCase	A										<section class="prog__container"><p> A convenience class for testing <pre><code> <a href="https://developer.android.com/reference/android/content/Loader.html"> Loader </a> </code></pre> s. This test case provides a simple way to synchronously get the result from a Loader making it easy to assert that the Loader returns the expected result.</p>\n<pre><code>public class LoaderTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/LoaderTestCase.html
MoreAsserts	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use <a href="https://github.com/hamcrest"> Hamcrest matchers </a> instead. </p>\n<pre><code>public final class MoreAsserts\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/test/MoreAsserts.html
android.test	A										<section class="prog__container">A framework for writing Android test cases and suites.</section>	https://developer.android.com/reference/android/test/package-summary.html
PerformanceTestCase	A										<section class="prog__container"><p> More complex interface performance for test cases. If you want your test to be used as a performance test, you must implement this interface.</p>\n<pre><code>public interface PerformanceTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/PerformanceTestCase.html
PerformanceTestCase.Intermediates	A										<section class="prog__container"><p> Callbacks for <pre><code> <a href="https://developer.android.com/reference/android/test/PerformanceTestCase.html"> PerformanceTestCase </a> </code></pre> .</p>\n<pre><code>public static interface PerformanceTestCase.Intermediates\n</code></pre></section>	https://developer.android.com/reference/android/test/PerformanceTestCase.Intermediates.html
ProviderTestCase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 3. </strong> <br/> this class extends InstrumentationTestCase but should extend AndroidTestCase. Use ProviderTestCase2, which corrects this problem, instead. </p>\n<pre><code>public abstract class ProviderTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/ProviderTestCase.html
ProviderTestCase2	A										<section class="prog__container"><p> This test case class provides a framework for testing a single <pre><code> <a href="https://developer.android.com/reference/android/content/ContentProvider.html"> ContentProvider </a> </code></pre> and for testing your app code with an isolated content provider. Instead of using the system map of providers that is based on the manifests of other applications, the test case creates its own internal map. It then uses this map to resolve providers given an authority. This allows you to inject test providers and to null out providers that you do not want to use. <p> This test case also sets up the following mock objects: </p>\n<pre><code>public abstract class ProviderTestCase2\n</code></pre></section>	https://developer.android.com/reference/android/test/ProviderTestCase2.html
RenamingDelegatingContext	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public class RenamingDelegatingContext\n</code></pre></section>	https://developer.android.com/reference/android/test/RenamingDelegatingContext.html
ServiceTestCase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use <a href="https://developer.android.com/reference/android/support/test/rule/ServiceTestRule.html"> ServiceTestRule </a> instead. New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public abstract class ServiceTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/ServiceTestCase.html
SingleLaunchActivityTestCase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use <a href="https://developer.android.com/reference/android/support/test/rule/ActivityTestRule.html"> ActivityTestRule </a> instead. New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public abstract class SingleLaunchActivityTestCase\n</code></pre></section>	https://developer.android.com/reference/android/test/SingleLaunchActivityTestCase.html
SyncBaseInstrumentation	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use <a href="https://developer.android.com/reference/android/support/test/InstrumentationRegistry.html"> InstrumentationRegistry </a> instead. New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public class SyncBaseInstrumentation\n</code></pre></section>	https://developer.android.com/reference/android/test/SyncBaseInstrumentation.html
TestSuiteProvider	A										<section class="prog__container"><p> Implementors will know how to get a test suite.</p>\n<pre><code>public interface TestSuiteProvider\n</code></pre></section>	https://developer.android.com/reference/android/test/TestSuiteProvider.html
TouchUtils	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use <a href="https://developer.android.com/training/testing/ui-testing/espresso-testing.html"> Espresso UI testing framework </a> instead. New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public class TouchUtils\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/test/TouchUtils.html
UiThreadTest	A										<section class="prog__container"><p> <p class="caution"> <strong> This @interface was deprecated in API level 24. </strong> <br/> Use <a href="https://developer.android.com/reference/android/support/test/annotation/UiThreadTest.html"> UiThreadTest </a> instead. New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public abstract @interface UiThreadTest\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/test/UiThreadTest.html
ViewAsserts	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use <a href="https://developer.android.com/reference/android/support/test/espresso/matcher/ViewMatchers.html"> Espresso View Matchers </a> instead. New test should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . For more information about UI testing, take the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Espresso UI testing </a> training. </p>\n<pre><code>public class ViewAsserts\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/test/ViewAsserts.html
MockApplication	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use a mocking framework like <a href="https://github.com/mockito/mockito"> Mockito </a> . New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public class MockApplication\n</code></pre></section>	https://developer.android.com/reference/android/test/mock/MockApplication.html
MockContentProvider	A										<section class="prog__container"><p> Mock implementation of ContentProvider. All methods are non-functional and throw <pre><code> <a href="https://developer.android.com/reference/java/lang/UnsupportedOperationException.html"> UnsupportedOperationException </a> </code></pre> . Tests can extend this class to implement behavior needed for tests.</p>\n<pre><code>public class MockContentProvider\n</code></pre></section>	https://developer.android.com/reference/android/test/mock/MockContentProvider.html
MockContentResolver	A										<section class="prog__container"><p> <p> An extension of <pre><code> <a href="https://developer.android.com/reference/android/content/ContentResolver.html"> ContentResolver </a> </code></pre> that is designed for testing. </p>\n<pre><code>public class MockContentResolver\n</code></pre></section>	https://developer.android.com/reference/android/test/mock/MockContentResolver.html
MockContext	A										<section class="prog__container"><p> A mock <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html"> Context </a> </code></pre> class. All methods are non-functional and throw <pre><code> <a href="https://developer.android.com/reference/java/lang/UnsupportedOperationException.html"> UnsupportedOperationException </a> </code></pre> . You can use this to inject other dependencies, mocks, or monitors into the classes you are testing.</p>\n<pre><code>public class MockContext\n</code></pre></section>	https://developer.android.com/reference/android/test/mock/MockContext.html
MockCursor	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use a mocking framework like <a href="https://github.com/mockito/mockito"> Mockito </a> . New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public class MockCursor\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/test/mock/MockCursor.html
MockDialogInterface	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use a mocking framework like <a href="https://github.com/mockito/mockito"> Mockito </a> . New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public class MockDialogInterface\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/test/mock/MockDialogInterface.html
MockPackageManager	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use a mocking framework like <a href="https://github.com/mockito/mockito"> Mockito </a> . New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public class MockPackageManager\n</code></pre></section>	https://developer.android.com/reference/android/test/mock/MockPackageManager.html
MockResources	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 24. </strong> <br/> Use a mocking framework like <a href="https://github.com/mockito/mockito"> Mockito </a> . New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public class MockResources\n</code></pre></section>	https://developer.android.com/reference/android/test/mock/MockResources.html
android.test.mock	A										<section class="prog__container">Utility classes providing stubs or mocks of various Android framework building blocks.</section>	https://developer.android.com/reference/android/test/mock/package-summary.html
android.test.suitebuilder	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/test/suitebuilder/package-summary.html
TestMethod	A										<section class="prog__container"><p> Represents a test to be run. Can be constructed without instantiating the TestCase or even loading the class.</p>\n<pre><code>public class TestMethod\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/test/suitebuilder/TestMethod.html
TestSuiteBuilder.FailedToCreateTests	A										<section class="prog__container"><p> A special <pre><code> <a href="https://developer.android.com/reference/junit/framework/TestCase.html"> TestCase </a> </code></pre> used to indicate a failure during the build() step.</p>\n<pre><code>public static class TestSuiteBuilder.FailedToCreateTests\n</code></pre></section>	https://developer.android.com/reference/android/test/suitebuilder/TestSuiteBuilder.FailedToCreateTests.html
TestSuiteBuilder	A										<section class="prog__container"><p> Build suites based on a combination of included packages, excluded packages, and predicates that must be satisfied.</p>\n<pre><code>public class TestSuiteBuilder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/test/suitebuilder/TestSuiteBuilder.html
LargeTest	A										<section class="prog__container"><p> <p class="caution"> <strong> This @interface was deprecated in API level 24. </strong> <br/> Use <a href="https://developer.android.com/reference/android/support/test/filters/LargeTest.html"> LargeTest </a> instead. New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public abstract @interface LargeTest\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/test/suitebuilder/annotation/LargeTest.html
MediumTest	A										<section class="prog__container"><p> <p class="caution"> <strong> This @interface was deprecated in API level 24. </strong> <br/> Use <a href="https://developer.android.com/reference/android/support/test/filters/MediumTest.html"> MediumTest </a> instead. New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public abstract @interface MediumTest\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/test/suitebuilder/annotation/MediumTest.html
android.test.suitebuilder.annotation	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/test/suitebuilder/annotation/package-summary.html
SmallTest	A										<section class="prog__container"><p> <p class="caution"> <strong> This @interface was deprecated in API level 24. </strong> <br/> Use <a href="https://developer.android.com/reference/android/support/test/filters/SmallTest.html"> SmallTest </a> instead. New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public abstract @interface SmallTest\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/test/suitebuilder/annotation/SmallTest.html
Smoke	A										<section class="prog__container"><p> <p class="caution"> <strong> This @interface was deprecated in API level 24. </strong> <br/> New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public abstract @interface Smoke\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/test/suitebuilder/annotation/Smoke.html
Suppress	A										<section class="prog__container"><p> <p class="caution"> <strong> This @interface was deprecated in API level 24. </strong> <br/> Use <a href="https://developer.android.com/reference/android/support/test/filters/Suppress.html"> Suppress </a> instead. New tests should be written using the <a href="https://developer.android.com/tools/testing-support-library/index.html"> Android Testing Support Library </a> . </p>\n<pre><code>public abstract @interface Suppress\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/test/suitebuilder/annotation/Suppress.html
AlteredCharSequence	A										<section class="prog__container"><p> An AlteredCharSequence is a CharSequence that is largely mirrored from another CharSequence, except that a specified range of characters are mirrored from a different char array instead.</p>\n<pre><code>public class AlteredCharSequence\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/AlteredCharSequence.html
AndroidCharacter	A										<section class="prog__container"><p> AndroidCharacter exposes some character properties that are not easily accessed from java.lang.Character.</p>\n<pre><code>public class AndroidCharacter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/AndroidCharacter.html
Annotation	A										<section class="prog__container"><p> Annotations are simple key-value pairs that are preserved across TextView save/restore cycles and can be used to keep application-specific data that needs to be maintained for regions of text.</p>\n<pre><code>public class Annotation\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/Annotation.html
AutoText	A										<section class="prog__container"><p> This class accesses a dictionary of corrections to frequent misspellings.</p>\n<pre><code>public class AutoText\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/AutoText.html
BidiFormatter.Builder	A										<section class="prog__container"><p> A class for building a BidiFormatter with non-default options.</p>\n<pre><code>public static final class BidiFormatter.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/BidiFormatter.Builder.html
BidiFormatter	A										<section class="prog__container"><p> Utility class for formatting text for display in a potentially opposite-directionality context without garbling. The directionality of the context is set at formatter creation and the directionality of the text can be either estimated or passed in when known. <p> To support versions lower than <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#JELLY_BEAN_MR2"> JELLY_BEAN_MR2 </a> </code></pre> , you can use the support library's <pre><code> <a href="https://developer.android.com/reference/android/support/v4/text/BidiFormatter.html"> BidiFormatter </a> </code></pre> class. <p> These APIs provides the following functionality: <p> 1. Bidi Wrapping When text in one language is mixed into a document in another, opposite-directionality language, e.g. when an English business name is embedded in some Hebrew text, both the inserted string and the text surrounding it may be displayed incorrectly unless the inserted string is explicitly separated from the surrounding text in a "wrapper" that: <p> - Declares its directionality so that the string is displayed correctly. This can be done in Unicode bidi formatting codes by <pre><code> <a href="https://developer.android.com/reference/android/text/BidiFormatter.html#unicodeWrap(java.lang.String)"> unicodeWrap(String) </a> </code></pre> and similar methods. <p> - Isolates the string's directionality, so it does not unduly affect the surrounding content. Currently, this can only be done using invisible Unicode characters of the same direction as the context (LRM or RLM) in addition to the directionality declaration above, thus "resetting" the directionality to that of the context. The "reset" may need to be done at both ends of the string. Without "reset" after the string, the string will "stick" to a number or logically separate opposite-direction text that happens to follow it in-line (even if separated by neutral content like spaces and punctuation). Without "reset" before the string, the same can happen there, but only with more opposite-direction text, not a number. One approach is to "reset" the direction only after each string, on the theory that if the preceding opposite- direction text is itself bidi-wrapped, the "reset" after it will prevent the sticking. (Doing the "reset" only before each string definitely does not work because we do not want to require bidi-wrapping numbers, and a bidi-wrapped opposite-direction string could be followed by a number.) Still, the safest policy is to do the "reset" on both ends of each string, since RTL message translations often contain untranslated Latin-script brand names and technical terms, and one of these can be followed by a bidi-wrapped inserted value. On the other hand, when one has such a message, it is best to do the "reset" manually in the message translation itself, since the message's opposite-direction text could be followed by an inserted number, which we would not bidi-wrap anyway. Thus, "reset" only after the string is the current default. In an alternative to "reset", recent additions to the HTML, CSS, and Unicode standards allow the isolation to be part of the directionality declaration. This form of isolation is better than "reset" because it takes less space, does not require knowing the context directionality, has a gentler effect than "reset", and protects both ends of the string. However, we do not yet allow using it because required platforms do not yet support it. <p> Providing these wrapping services is the basic purpose of the bidi formatter. <p> 2. Directionality estimation How does one know whether a string about to be inserted into surrounding text has the same directionality? Well, in many cases, one knows that this must be the case when writing the code doing the insertion, e.g. when a localized message is inserted into a localized page. In such cases there is no need to involve the bidi formatter at all. In some other cases, it need not be the same as the context, but is either constant (e.g. urls are always LTR) or otherwise known. In the remaining cases, e.g. when the string is user-entered or comes from a database, the language of the string (and thus its directionality) is not known a priori, and must be estimated at run-time. The bidi formatter can do this automatically using the default first-strong estimation algorithm. It can also be configured to use a custom directionality estimation object. </p>\n<pre><code>public final class BidiFormatter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/BidiFormatter.html
BoringLayout	A										<section class="prog__container"><p> A BoringLayout is a very simple Layout implementation for text that fits on a single line and is all left-to-right characters. You will probably never want to make one of these yourself; if you do, be sure to call <pre><code> <a href="https://developer.android.com/reference/android/text/BoringLayout.html#isBoring(java.lang.CharSequence, android.text.TextPaint)"> isBoring(CharSequence, TextPaint) </a> </code></pre> first to make sure the text meets the criteria. <p> This class is used by widgets to control text layout. You should not need to use this class directly unless you are implementing your own widget or custom display object, in which case you are encouraged to use a Layout instead of calling <pre><code> <a href="https://developer.android.com/reference/android/graphics/Canvas.html#drawText(java.lang.CharSequence, int, int, float, float, android.graphics.Paint)"> Canvas.drawText() </a> </code></pre> directly. </p>\n<pre><code>public class BoringLayout\n</code></pre></section>	https://developer.android.com/reference/android/text/BoringLayout.html
BoringLayout.Metrics	A										<section class="prog__container"><p></p>\n<pre><code>public static class BoringLayout.Metrics\n</code></pre></section>	https://developer.android.com/reference/android/text/BoringLayout.Metrics.html
ClipboardManager	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 11. </strong> <br/> Old text-only interface to the clipboard. See <pre><code> <a href="https://developer.android.com/reference/android/content/ClipboardManager.html"> ClipboardManager </a> </code></pre> for the modern API. </p>\n<pre><code>public abstract class ClipboardManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/ClipboardManager.html
DynamicLayout	A										<section class="prog__container"><p> DynamicLayout is a text layout that updates itself as the text is edited. <p> This is used by widgets to control text layout. You should not need to use this class directly unless you are implementing your own widget or custom display object, or need to call <pre><code> <a href="https://developer.android.com/reference/android/graphics/Canvas.html#drawText(java.lang.CharSequence, int, int, float, float, android.graphics.Paint)"> Canvas.drawText() </a> </code></pre> directly. </p>\n<pre><code>public class DynamicLayout\n</code></pre></section>	https://developer.android.com/reference/android/text/DynamicLayout.html
Editable.Factory	A										<section class="prog__container"><p> Factory used by TextView to create new Editables. You can subclass it to provide something other than SpannableStringBuilder.</p>\n<pre><code>public static class Editable.Factory\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/Editable.Factory.html
Editable	A										<section class="prog__container"><p> This is the interface for text whose content and markup can be changed (as opposed to immutable text like Strings). If you make a <pre><code> <a href="https://developer.android.com/reference/android/text/DynamicLayout.html"> DynamicLayout </a> </code></pre> of an Editable, the layout will be reflowed as the text is changed.</p>\n<pre><code>public interface Editable\nimplements <a href="https://developer.android.com/reference/java/lang/CharSequence.html">CharSequence</a>, <a href="https://developer.android.com/reference/android/text/GetChars.html">GetChars</a>, <a href="https://developer.android.com/reference/android/text/Spannable.html">Spannable</a>, <a href="https://developer.android.com/reference/java/lang/Appendable.html">Appendable</a></code></pre></section>	https://developer.android.com/reference/android/text/Editable.html
GetChars	A										<section class="prog__container"><p> Please implement this interface if your CharSequence has a getChars() method like the one in String that is faster than calling charAt() multiple times.</p>\n<pre><code>public interface GetChars\nimplements <a href="https://developer.android.com/reference/java/lang/CharSequence.html">CharSequence</a></code></pre></section>	https://developer.android.com/reference/android/text/GetChars.html
Html	A										<section class="prog__container"><p> This class processes HTML strings into displayable styled text. Not all HTML tags are supported.</p>\n<pre><code>public class Html\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/Html.html
Html.ImageGetter	A										<section class="prog__container"><p> Retrieves images for HTML &lt;img&gt; tags.</p>\n<pre><code>public static interface Html.ImageGetter\n</code></pre></section>	https://developer.android.com/reference/android/text/Html.ImageGetter.html
Html.TagHandler	A										<section class="prog__container"><p> Is notified when HTML tags are encountered that the parser does not know how to interpret.</p>\n<pre><code>public static interface Html.TagHandler\n</code></pre></section>	https://developer.android.com/reference/android/text/Html.TagHandler.html
InputFilter.AllCaps	A										<section class="prog__container"><p> This filter will capitalize all the lower case letters that are added through edits.</p>\n<pre><code>public static class InputFilter.AllCaps\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/InputFilter.AllCaps.html
InputFilter	A										<section class="prog__container"><p> InputFilters can be attached to <pre><code> <a href="https://developer.android.com/reference/android/text/Editable.html"> Editable </a> </code></pre> s to constrain the changes that can be made to them.</p>\n<pre><code>public interface InputFilter\n</code></pre></section>	https://developer.android.com/reference/android/text/InputFilter.html
InputFilter.LengthFilter	A										<section class="prog__container"><p> This filter will constrain edits not to make the length of the text greater than the specified length.</p>\n<pre><code>public static class InputFilter.LengthFilter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/InputFilter.LengthFilter.html
InputType	A										<section class="prog__container"><p> Bit definitions for an integer defining the basic content type of text held in an <pre><code> <a href="https://developer.android.com/reference/android/text/Editable.html"> Editable </a> </code></pre> object. Supported classes may be combined with variations and flags to indicate desired behaviors. </p>\n<pre><code>public interface InputType\n</code></pre></section>	https://developer.android.com/reference/android/text/InputType.html
Layout.Alignment	A										<section class="prog__container"><p></p>\n<pre><code>public static final enum Layout.Alignment\n</code></pre></section>	https://developer.android.com/reference/android/text/Layout.Alignment.html
Layout.Directions	A										<section class="prog__container"><p> Stores information about bidirectional (left-to-right or right-to-left) text within the layout of a line.</p>\n<pre><code>public static class Layout.Directions\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/Layout.Directions.html
Layout	A										<section class="prog__container"><p> A base class that manages text layout in visual elements on the screen. <p> For text that will be edited, use a <pre><code> <a href="https://developer.android.com/reference/android/text/DynamicLayout.html"> DynamicLayout </a> </code></pre> , which will be updated as the text changes. For text that will not change, use a <pre><code> <a href="https://developer.android.com/reference/android/text/StaticLayout.html"> StaticLayout </a> </code></pre> . </p>\n<pre><code>public abstract class Layout\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/Layout.html
LoginFilter	A										<section class="prog__container"><p> Abstract class for filtering login-related text (user names and passwords)</p>\n<pre><code>public abstract class LoginFilter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/LoginFilter.html
LoginFilter.PasswordFilterGMail	A										<section class="prog__container"><p> This filter is compatible with GMail passwords which restricts characters to the Latin-1 (ISO8859-1) char set.</p>\n<pre><code>public static class LoginFilter.PasswordFilterGMail\n</code></pre></section>	https://developer.android.com/reference/android/text/LoginFilter.PasswordFilterGMail.html
LoginFilter.UsernameFilterGeneric	A										<section class="prog__container"><p> This filter rejects characters in the user name that are not compatible with Google login. It is slightly less restrictive than the above filter in that it allows [a-zA-Z0-9._-+].</p>\n<pre><code>public static class LoginFilter.UsernameFilterGeneric\n</code></pre></section>	https://developer.android.com/reference/android/text/LoginFilter.UsernameFilterGeneric.html
LoginFilter.UsernameFilterGMail	A										<section class="prog__container"><p> This filter rejects characters in the user name that are not compatible with GMail account creation. It prevents the user from entering user names with characters other than [a-zA-Z0-9.].</p>\n<pre><code>public static class LoginFilter.UsernameFilterGMail\n</code></pre></section>	https://developer.android.com/reference/android/text/LoginFilter.UsernameFilterGMail.html
NoCopySpan.Concrete	A										<section class="prog__container"><p> Convenience equivalent for when you would just want a new Object() for a span but want it to be no-copy. Use this instead.</p>\n<pre><code>public static class NoCopySpan.Concrete\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/NoCopySpan.Concrete.html
NoCopySpan	A										<section class="prog__container"><p> This interface should be added to a span object that should not be copied into a new Spanned when performing a slice or copy operation on the original Spanned it was placed in.</p>\n<pre><code>public interface NoCopySpan\n</code></pre></section>	https://developer.android.com/reference/android/text/NoCopySpan.html
android.text	A										<section class="prog__container">Provides classes used to render or track text and text spans on the screen.</section>	https://developer.android.com/reference/android/text/package-summary.html
ParcelableSpan	A										<section class="prog__container"><p> A special kind of Parcelable for objects that will serve as text spans. This can only be used by code in the framework; it is not intended for applications to implement their own Parcelable spans.</p>\n<pre><code>public interface ParcelableSpan\nimplements <a href="https://developer.android.com/reference/android/os/Parcelable.html">Parcelable</a></code></pre></section>	https://developer.android.com/reference/android/text/ParcelableSpan.html
Selection	A										<section class="prog__container"><p> Utility class for manipulating cursors and selections in CharSequences. A cursor is a selection where the start and end are at the same offset.</p>\n<pre><code>public class Selection\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/Selection.html
Spannable.Factory	A										<section class="prog__container"><p> Factory used by TextView to create new Spannables. You can subclass it to provide something other than SpannableString.</p>\n<pre><code>public static class Spannable.Factory\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/Spannable.Factory.html
Spannable	A										<section class="prog__container"><p> This is the interface for text to which markup objects can be attached and detached. Not all Spannable classes have mutable text; see <pre><code> <a href="https://developer.android.com/reference/android/text/Editable.html"> Editable </a> </code></pre> for that.</p>\n<pre><code>public interface Spannable\nimplements <a href="https://developer.android.com/reference/android/text/Spanned.html">Spanned</a></code></pre></section>	https://developer.android.com/reference/android/text/Spannable.html
SpannableString	A										<section class="prog__container"><p> This is the class for text whose content is immutable but to which markup objects can be attached and detached. For mutable text, see <pre><code> <a href="https://developer.android.com/reference/android/text/SpannableStringBuilder.html"> SpannableStringBuilder </a> </code></pre> .</p>\n<pre><code>public class SpannableString\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/SpannableString.html
SpannableStringBuilder	A										<section class="prog__container"><p> This is the class for text whose content and markup can both be changed.</p>\n<pre><code>public class SpannableStringBuilder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/SpannableStringBuilder.html
Spanned	A										<section class="prog__container"><p> This is the interface for text that has markup objects attached to ranges of it. Not all text classes have mutable markup or text; see <pre><code> <a href="https://developer.android.com/reference/android/text/Spannable.html"> Spannable </a> </code></pre> for mutable markup and <pre><code> <a href="https://developer.android.com/reference/android/text/Editable.html"> Editable </a> </code></pre> for mutable text.</p>\n<pre><code>public interface Spanned\nimplements <a href="https://developer.android.com/reference/java/lang/CharSequence.html">CharSequence</a></code></pre></section>	https://developer.android.com/reference/android/text/Spanned.html
SpannedString	A										<section class="prog__container"><p> This is the class for text whose content and markup are immutable. For mutable markup, see <pre><code> <a href="https://developer.android.com/reference/android/text/SpannableString.html"> SpannableString </a> </code></pre> ; for mutable text, see <pre><code> <a href="https://developer.android.com/reference/android/text/SpannableStringBuilder.html"> SpannableStringBuilder </a> </code></pre> .</p>\n<pre><code>public final class SpannedString\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/SpannedString.html
SpanWatcher	A										<section class="prog__container"><p> When an object of this type is attached to a Spannable, its methods will be called to notify it that other markup objects have been added, changed, or removed.</p>\n<pre><code>public interface SpanWatcher\nimplements <a href="https://developer.android.com/reference/android/text/NoCopySpan.html">NoCopySpan</a></code></pre></section>	https://developer.android.com/reference/android/text/SpanWatcher.html
StaticLayout.Builder	A										<section class="prog__container"><p> Builder for static layouts. The builder is a newer pattern for constructing StaticLayout objects and should be preferred over the constructors, particularly to access newer features. To build a static layout, first call <pre><code> <a href="https://developer.android.com/reference/android/text/StaticLayout.Builder.html#obtain(java.lang.CharSequence, int, int, android.text.TextPaint, int)"> obtain(CharSequence, int, int, TextPaint, int) </a> </code></pre> with the required arguments (text, paint, and width), then call setters for optional parameters, and finally <pre><code> <a href="https://developer.android.com/reference/android/text/StaticLayout.Builder.html#build()"> build() </a> </code></pre> to build the StaticLayout object. Parameters not explicitly set will get default values.</p>\n<pre><code>public static final class StaticLayout.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/StaticLayout.Builder.html
StaticLayout	A										<section class="prog__container"><p> StaticLayout is a Layout for text that will not be edited after it is laid out. Use <pre><code> <a href="https://developer.android.com/reference/android/text/DynamicLayout.html"> DynamicLayout </a> </code></pre> for text that may change. <p> This is used by widgets to control text layout. You should not need to use this class directly unless you are implementing your own widget or custom display object, or would be tempted to call <pre><code> <a href="https://developer.android.com/reference/android/graphics/Canvas.html#drawText(java.lang.CharSequence, int, int, float, float, android.graphics.Paint)"> Canvas.drawText() </a> </code></pre> directly. </p>\n<pre><code>public class StaticLayout\n</code></pre></section>	https://developer.android.com/reference/android/text/StaticLayout.html
TextDirectionHeuristic	A										<section class="prog__container"><p> Interface for objects that use a heuristic for guessing at the paragraph direction by examining text.</p>\n<pre><code>public interface TextDirectionHeuristic\n</code></pre></section>	https://developer.android.com/reference/android/text/TextDirectionHeuristic.html
TextDirectionHeuristics	A										<section class="prog__container"><p> Some objects that implement <pre><code> <a href="https://developer.android.com/reference/android/text/TextDirectionHeuristic.html"> TextDirectionHeuristic </a> </code></pre> . Use these with the <pre><code> <a href="https://developer.android.com/reference/android/text/BidiFormatter.html#unicodeWrap(java.lang.String)"> unicodeWrap() </a> </code></pre> methods in <pre><code> <a href="https://developer.android.com/reference/android/text/BidiFormatter.html"> BidiFormatter </a> </code></pre> . Also notice that these direction heuristics correspond to the same types of constants provided in the <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> class for <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#setTextDirection(int)"> setTextDirection() </a> </code></pre> , such as <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_RTL"> TEXT_DIRECTION_RTL </a> </code></pre> . <p> To support versions lower than <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#JELLY_BEAN_MR2"> JELLY_BEAN_MR2 </a> </code></pre> , you can use the support library's <pre><code> <a href="https://developer.android.com/reference/android/support/v4/text/TextDirectionHeuristicsCompat.html"> TextDirectionHeuristicsCompat </a> </code></pre> class. </p>\n<pre><code>public class TextDirectionHeuristics\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/TextDirectionHeuristics.html
TextPaint	A										<section class="prog__container"><p> TextPaint is an extension of Paint that leaves room for some extra data used during text measuring and drawing.</p>\n<pre><code>public class TextPaint\n</code></pre></section>	https://developer.android.com/reference/android/text/TextPaint.html
TextUtils.EllipsizeCallback	A										<section class="prog__container"><p> This method is called to report that the specified region of text was ellipsized away by a call to <pre><code> <a href="https://developer.android.com/reference/android/text/TextUtils.html#ellipsize(java.lang.CharSequence, android.text.TextPaint, float, android.text.TextUtils.TruncateAt)"> ellipsize(CharSequence, TextPaint, float, TextUtils.TruncateAt) </a> </code></pre> .</p>\n<pre><code>public static interface TextUtils.EllipsizeCallback\n</code></pre></section>	https://developer.android.com/reference/android/text/TextUtils.EllipsizeCallback.html
TextUtils	A										<section class="prog__container"><p></p>\n<pre><code>public class TextUtils\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/TextUtils.html
TextUtils.SimpleStringSplitter	A										<section class="prog__container"><p> A simple string splitter. <p> If the final character in the string to split is the delimiter then no empty string will be returned for the empty string after that delimeter. That is, splitting <tt> "a,b," </tt> on comma will return <tt> "a", "b" </tt> , not <tt> "a", "b", "" </tt> . </p>\n<pre><code>public static class TextUtils.SimpleStringSplitter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/TextUtils.SimpleStringSplitter.html
TextUtils.StringSplitter	A										<section class="prog__container"><p> An interface for splitting strings according to rules that are opaque to the user of this interface. This also has less overhead than split, which uses regular expressions and allocates an array to hold the results. <p> The most efficient way to use this class is: <pre> // Once TextUtils.StringSplitter splitter = new TextUtils.SimpleStringSplitter(delimiter); // Once per string to split splitter.setString(string); for (String s : splitter) { ... } </pre> </p>\n<pre><code>public static interface TextUtils.StringSplitter\nimplements <a href="https://developer.android.com/reference/java/lang/Iterable.html">Iterable</a>&lt;<a href="https://developer.android.com/reference/java/lang/String.html">String</a>&gt;</code></pre></section>	https://developer.android.com/reference/android/text/TextUtils.StringSplitter.html
TextUtils.TruncateAt	A										<section class="prog__container"><p></p>\n<pre><code>public static final enum TextUtils.TruncateAt\n</code></pre></section>	https://developer.android.com/reference/android/text/TextUtils.TruncateAt.html
TextWatcher	A										<section class="prog__container"><p> When an object of a type is attached to an Editable, its methods will be called when the text is changed.</p>\n<pre><code>public interface TextWatcher\nimplements <a href="https://developer.android.com/reference/android/text/NoCopySpan.html">NoCopySpan</a></code></pre></section>	https://developer.android.com/reference/android/text/TextWatcher.html
DateFormat	A										<section class="prog__container"><p> Utility class for producing strings with formatted date/time. <p> Most callers should avoid supplying their own format strings to this class' <pre><code> format </code></pre> methods and rely on the correctly localized ones supplied by the system. This class' factory methods return appropriately-localized <pre><code> <a href="https://developer.android.com/reference/java/text/DateFormat.html"> DateFormat </a> </code></pre> instances, suitable for both formatting and parsing dates. For the canonical documentation of format strings, see <pre><code> <a href="https://developer.android.com/reference/java/text/SimpleDateFormat.html"> SimpleDateFormat </a> </code></pre> . <p> In cases where the system does not provide a suitable pattern, this class offers the <pre><code> <a href="https://developer.android.com/reference/android/text/format/DateFormat.html#getBestDateTimePattern(java.util.Locale, java.lang.String)"> getBestDateTimePattern(Locale, String) </a> </code></pre> method. <p> The <pre><code> format </code></pre> methods in this class implement a subset of Unicode <a href="http://www.unicode.org/reports/tr35/#Date_Format_Patterns"> UTS #35 </a> patterns. The subset currently supported by this class includes the following format characters: <pre><code> acdEHhLKkLMmsyz </code></pre> . Up to API level 17, only <pre><code> adEhkMmszy </code></pre> were supported. Note that this class incorrectly implements <pre><code> k </code></pre> as if it were <pre><code> H </code></pre> for backwards compatibility. <p> See <pre><code> <a href="https://developer.android.com/reference/java/text/SimpleDateFormat.html"> SimpleDateFormat </a> </code></pre> for more documentation about patterns, or if you need a more complete or correct implementation. Note that the non- <pre><code> format </code></pre> methods in this class are implemented by <pre><code> SimpleDateFormat </code></pre> . </p>\n<pre><code>public class DateFormat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/format/DateFormat.html
DateUtils	A										<section class="prog__container"><p> This class contains various date-related utilities for creating text for things like elapsed time and date ranges, strings for days of the week and months, and AM/PM text etc.</p>\n<pre><code>public class DateUtils\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/format/DateUtils.html
Formatter	A										<section class="prog__container"><p> Utility class to aid in formatting common values that are not covered by the <pre><code> <a href="https://developer.android.com/reference/java/util/Formatter.html"> Formatter </a> </code></pre> class in <pre><code> <a href="https://developer.android.com/reference/java/util/package-summary.html"> java.util </a> </code></pre></p>\n<pre><code>public final class Formatter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/format/Formatter.html
android.text.format	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/text/format/package-summary.html
Time	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 22. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/java/util/GregorianCalendar.html"> GregorianCalendar </a> </code></pre> instead. </p>\n<pre><code>public class Time\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/format/Time.html
ArrowKeyMovementMethod	A										<section class="prog__container"><p> A movement method that provides cursor movement and selection. Supports displaying the context menu on DPad Center.</p>\n<pre><code>public class ArrowKeyMovementMethod\n</code></pre></section>	https://developer.android.com/reference/android/text/method/ArrowKeyMovementMethod.html
BaseKeyListener	A										<section class="prog__container"><p> Abstract base class for key listeners. Provides a basic foundation for entering and editing text. Subclasses should override <pre><code> <a href="https://developer.android.com/reference/android/text/method/BaseKeyListener.html#onKeyDown(android.view.View, android.text.Editable, int, android.view.KeyEvent)"> onKeyDown(View, Editable, int, KeyEvent) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/text/method/MetaKeyKeyListener.html#onKeyUp(android.view.View, android.text.Editable, int, android.view.KeyEvent)"> onKeyUp(View, Editable, int, KeyEvent) </a> </code></pre> to insert characters as keys are pressed. <p> </p>\n<pre><code>public abstract class BaseKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/BaseKeyListener.html
BaseMovementMethod	A										<section class="prog__container"><p> Base classes for movement methods.</p>\n<pre><code>public class BaseMovementMethod\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/method/BaseMovementMethod.html
CharacterPickerDialog	A										<section class="prog__container"><p> Dialog for choosing accented characters related to a base character.</p>\n<pre><code>public class CharacterPickerDialog\n</code></pre></section>	https://developer.android.com/reference/android/text/method/CharacterPickerDialog.html
DateKeyListener	A										<section class="prog__container"><p> For entering dates in a text field. <p> </p>\n<pre><code>public class DateKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/DateKeyListener.html
DateTimeKeyListener	A										<section class="prog__container"><p> For entering dates and times in the same text field. <p> </p>\n<pre><code>public class DateTimeKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/DateTimeKeyListener.html
DialerKeyListener	A										<section class="prog__container"><p> For dialing-only text entry <p> </p>\n<pre><code>public class DialerKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/DialerKeyListener.html
DigitsKeyListener	A										<section class="prog__container"><p> For digits-only text entry <p> </p>\n<pre><code>public class DigitsKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/DigitsKeyListener.html
HideReturnsTransformationMethod	A										<section class="prog__container"><p> This transformation method causes any carriage return characters (\r) to be hidden by displaying them as zero-width non-breaking space characters (﻿).</p>\n<pre><code>public class HideReturnsTransformationMethod\n</code></pre></section>	https://developer.android.com/reference/android/text/method/HideReturnsTransformationMethod.html
KeyListener	A										<section class="prog__container"><p> Interface for converting text key events into edit operations on an Editable class. Note that for most cases this interface has been superceded by general soft input methods as defined by <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/InputMethod.html"> InputMethod </a> </code></pre> ; it should only be used for cases where an application has its own on-screen keypad and also wants to process hard keyboard events to match it. <p> </p>\n<pre><code>public interface KeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/KeyListener.html
LinkMovementMethod	A										<section class="prog__container"><p> A movement method that traverses links in the text buffer and scrolls if necessary. Supports clicking on links with DPad Center or Enter.</p>\n<pre><code>public class LinkMovementMethod\n</code></pre></section>	https://developer.android.com/reference/android/text/method/LinkMovementMethod.html
MetaKeyKeyListener	A										<section class="prog__container"><p> This base class encapsulates the behavior for tracking the state of meta keys such as SHIFT, ALT and SYM as well as the pseudo-meta state of selecting text. <p> Key listeners that care about meta state should inherit from this class; you should not instantiate this class directly in a client. </p>\n<pre><code>public abstract class MetaKeyKeyListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/method/MetaKeyKeyListener.html
MovementMethod	A										<section class="prog__container"><p> Provides cursor positioning, scrolling and text selection functionality in a <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html"> TextView </a> </code></pre> . <p> The <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html"> TextView </a> </code></pre> delegates handling of key events, trackball motions and touches to the movement method for purposes of content navigation. The framework automatically selects an appropriate movement method based on the content of the <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html"> TextView </a> </code></pre> . </p>\n<pre><code>public interface MovementMethod\n</code></pre></section>	https://developer.android.com/reference/android/text/method/MovementMethod.html
MultiTapKeyListener	A										<section class="prog__container"><p> This is the standard key listener for alphabetic input on 12-key keyboards. You should generally not need to instantiate this yourself; TextKeyListener will do it for you. <p> </p>\n<pre><code>public class MultiTapKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/MultiTapKeyListener.html
NumberKeyListener	A										<section class="prog__container"><p> For numeric text entry <p> </p>\n<pre><code>public abstract class NumberKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/NumberKeyListener.html
android.text.method	A										<section class="prog__container">Provides classes that monitor or modify keypad input.</section>	https://developer.android.com/reference/android/text/method/package-summary.html
PasswordTransformationMethod	A										<section class="prog__container"><p> This method is called to notify you that, somewhere within <pre><code> s </code></pre> , the text has been changed.</p>\n<pre><code>public class PasswordTransformationMethod\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/method/PasswordTransformationMethod.html
QwertyKeyListener	A										<section class="prog__container"><p> This is the standard key listener for alphabetic input on qwerty keyboards. You should generally not need to instantiate this yourself; TextKeyListener will do it for you. <p> </p>\n<pre><code>public class QwertyKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/QwertyKeyListener.html
ReplacementTransformationMethod	A										<section class="prog__container"><p> This transformation method causes the characters in the <pre><code> <a href="https://developer.android.com/reference/android/text/method/ReplacementTransformationMethod.html#getOriginal()"> getOriginal() </a> </code></pre> array to be replaced by the corresponding characters in the <pre><code> <a href="https://developer.android.com/reference/android/text/method/ReplacementTransformationMethod.html#getReplacement()"> getReplacement() </a> </code></pre> array.</p>\n<pre><code>public abstract class ReplacementTransformationMethod\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/method/ReplacementTransformationMethod.html
ScrollingMovementMethod	A										<section class="prog__container"><p> A movement method that interprets movement keys by scrolling the text buffer.</p>\n<pre><code>public class ScrollingMovementMethod\n</code></pre></section>	https://developer.android.com/reference/android/text/method/ScrollingMovementMethod.html
SingleLineTransformationMethod	A										<section class="prog__container"><p> This transformation method causes any newline characters (\n) to be displayed as spaces instead of causing line breaks, and causes carriage return characters (\r) to have no appearance.</p>\n<pre><code>public class SingleLineTransformationMethod\n</code></pre></section>	https://developer.android.com/reference/android/text/method/SingleLineTransformationMethod.html
TextKeyListener.Capitalize	A										<section class="prog__container"><p></p>\n<pre><code>public static final enum TextKeyListener.Capitalize\n</code></pre></section>	https://developer.android.com/reference/android/text/method/TextKeyListener.Capitalize.html
TextKeyListener	A										<section class="prog__container"><p> This is the key listener for typing normal text. It delegates to other key listeners appropriate to the current keyboard and language. <p> </p>\n<pre><code>public class TextKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/TextKeyListener.html
TimeKeyListener	A										<section class="prog__container"><p> For entering times in a text field. <p> </p>\n<pre><code>public class TimeKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/text/method/TimeKeyListener.html
Touch	A										<section class="prog__container"><p> Handles touch events for dragging.</p>\n<pre><code>public class Touch\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/method/Touch.html
TransformationMethod	A										<section class="prog__container"><p> TextView uses TransformationMethods to do things like replacing the characters of passwords with dots, or keeping the newline characters from causing line breaks in single-line text fields.</p>\n<pre><code>public interface TransformationMethod\n</code></pre></section>	https://developer.android.com/reference/android/text/method/TransformationMethod.html
AbsoluteSizeSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html#describeContents()"> describeContents() </a> </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p>\n<pre><code>public class AbsoluteSizeSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/AbsoluteSizeSpan.html
AlignmentSpan	A										<section class="prog__container"><p></p>\n<pre><code>public interface AlignmentSpan\nimplements <a href="https://developer.android.com/reference/android/text/style/ParagraphStyle.html">ParagraphStyle</a></code></pre></section>	https://developer.android.com/reference/android/text/style/AlignmentSpan.html
AlignmentSpan.Standard	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html#describeContents()"> describeContents() </a> </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p>\n<pre><code>public static class AlignmentSpan.Standard\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/style/AlignmentSpan.Standard.html
BackgroundColorSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html#describeContents()"> describeContents() </a> </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p>\n<pre><code>public class BackgroundColorSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/BackgroundColorSpan.html
BulletSpan	A										<section class="prog__container"><p></p>\n<pre><code>public class BulletSpan\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/style/BulletSpan.html
CharacterStyle	A										<section class="prog__container"><p> The classes that affect character-level text formatting extend this class. Most extend its subclass <pre><code> <a href="https://developer.android.com/reference/android/text/style/MetricAffectingSpan.html"> MetricAffectingSpan </a> </code></pre> , but simple ones may just implement <pre><code> <a href="https://developer.android.com/reference/android/text/style/UpdateAppearance.html"> UpdateAppearance </a> </code></pre> .</p>\n<pre><code>public abstract class CharacterStyle\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/style/CharacterStyle.html
ClickableSpan	A										<section class="prog__container"><p> If an object of this type is attached to the text of a TextView with a movement method of LinkMovementMethod, the affected spans of text can be selected. If clicked, the <pre><code> <a href="https://developer.android.com/reference/android/text/style/ClickableSpan.html#onClick(android.view.View)"> onClick(View) </a> </code></pre> method will be called.</p>\n<pre><code>public abstract class ClickableSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/ClickableSpan.html
DrawableMarginSpan	A										<section class="prog__container"><p> Renders the leading margin.</p>\n<pre><code>public class DrawableMarginSpan\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/style/DrawableMarginSpan.html
DynamicDrawableSpan	A										<section class="prog__container"><p></p>\n<pre><code>public abstract class DynamicDrawableSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/DynamicDrawableSpan.html
EasyEditSpan	A										<section class="prog__container"><p> Provides an easy way to edit a portion of text. <p> The <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html"> TextView </a> </code></pre> uses this span to allow the user to delete a chuck of text in one click. <p> <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html"> TextView </a> </code></pre> removes the span when the user deletes the whole text or modifies it. <p> This span can be also used to receive notification when the user deletes or modifies the text; </p>\n<pre><code>public class EasyEditSpan\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/style/EasyEditSpan.html
ForegroundColorSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html#describeContents()"> describeContents() </a> </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p>\n<pre><code>public class ForegroundColorSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/ForegroundColorSpan.html
IconMarginSpan	A										<section class="prog__container"><p> Renders the leading margin.</p>\n<pre><code>public class IconMarginSpan\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/style/IconMarginSpan.html
ImageSpan	A										<section class="prog__container"><p> A constant indicating that the bottom of this span should be aligned with the baseline of the surrounding text.</p>\n<pre><code>public class ImageSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/ImageSpan.html
LeadingMarginSpan	A										<section class="prog__container"><p> A paragraph style affecting the leading margin. There can be multiple leading margin spans on a single paragraph; they will be rendered in order, each adding its margin to the ones before it. The leading margin is on the right for lines in a right-to-left paragraph. <p> LeadingMarginSpans should be attached from the first character to the last character of a single paragraph. </p>\n<pre><code>public interface LeadingMarginSpan\nimplements <a href="https://developer.android.com/reference/android/text/style/ParagraphStyle.html">ParagraphStyle</a></code></pre></section>	https://developer.android.com/reference/android/text/style/LeadingMarginSpan.html
LeadingMarginSpan.LeadingMarginSpan2	A										<section class="prog__container"><p> An extended version of <pre><code> <a href="https://developer.android.com/reference/android/text/style/LeadingMarginSpan.html"> LeadingMarginSpan </a> </code></pre> , which allows the implementor to specify the number of lines of the paragraph to which this object is attached that the "first line of paragraph" margin width will be applied to. <p> There should only be one LeadingMarginSpan2 per paragraph. The leading margin line count affects all LeadingMarginSpans in the paragraph, adjusting the number of lines to which the first line margin is applied. <p> As with LeadingMarginSpans, LeadingMarginSpan2s should be attached from the beginning to the end of a paragraph. </p>\n<pre><code>public static interface LeadingMarginSpan.LeadingMarginSpan2\nimplements <a href="https://developer.android.com/reference/android/text/style/LeadingMarginSpan.html">LeadingMarginSpan</a>, <a href="https://developer.android.com/reference/android/text/style/WrapTogetherSpan.html">WrapTogetherSpan</a></code></pre></section>	https://developer.android.com/reference/android/text/style/LeadingMarginSpan.LeadingMarginSpan2.html
LeadingMarginSpan.Standard	A										<section class="prog__container"><p> The standard implementation of LeadingMarginSpan, which adjusts the margin but does not do any rendering.</p>\n<pre><code>public static class LeadingMarginSpan.Standard\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/style/LeadingMarginSpan.Standard.html
LineBackgroundSpan	A										<section class="prog__container"><p></p>\n<pre><code>public interface LineBackgroundSpan\nimplements <a href="https://developer.android.com/reference/android/text/style/ParagraphStyle.html">ParagraphStyle</a></code></pre></section>	https://developer.android.com/reference/android/text/style/LineBackgroundSpan.html
LineHeightSpan	A										<section class="prog__container"><p></p>\n<pre><code>public interface LineHeightSpan\nimplements <a href="https://developer.android.com/reference/android/text/style/ParagraphStyle.html">ParagraphStyle</a>, <a href="https://developer.android.com/reference/android/text/style/WrapTogetherSpan.html">WrapTogetherSpan</a></code></pre></section>	https://developer.android.com/reference/android/text/style/LineHeightSpan.html
LineHeightSpan.WithDensity	A										<section class="prog__container"><p></p>\n<pre><code>public static interface LineHeightSpan.WithDensity\nimplements <a href="https://developer.android.com/reference/android/text/style/LineHeightSpan.html">LineHeightSpan</a></code></pre></section>	https://developer.android.com/reference/android/text/style/LineHeightSpan.WithDensity.html
LocaleSpan	A										<section class="prog__container"><p> Changes the <pre><code> <a href="https://developer.android.com/reference/java/util/Locale.html"> Locale </a> </code></pre> of the text to which the span is attached.</p>\n<pre><code>public class LocaleSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/LocaleSpan.html
MaskFilterSpan	A										<section class="prog__container"><p> Returns "this" for most CharacterStyles, but for CharacterStyles that were generated by <pre><code> <a href="https://developer.android.com/reference/android/text/style/CharacterStyle.html#wrap(android.text.style.CharacterStyle)"> wrap(CharacterStyle) </a> </code></pre> , returns the underlying CharacterStyle.</p>\n<pre><code>public class MaskFilterSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/MaskFilterSpan.html
MetricAffectingSpan	A										<section class="prog__container"><p> The classes that affect character-level text formatting in a way that changes the width or height of characters extend this class.</p>\n<pre><code>public abstract class MetricAffectingSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/MetricAffectingSpan.html
android.text.style	A										<section class="prog__container">Provides classes used to view or change the style of a span of text in a View object.The classes with a subclass Standard are passed in to</section>	https://developer.android.com/reference/android/text/style/package-summary.html
ParagraphStyle	A										<section class="prog__container"><p> The classes that affect paragraph-level text formatting implement this interface.</p>\n<pre><code>public interface ParagraphStyle\n</code></pre></section>	https://developer.android.com/reference/android/text/style/ParagraphStyle.html
QuoteSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html#describeContents()"> describeContents() </a> </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p>\n<pre><code>public class QuoteSpan\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/style/QuoteSpan.html
RasterizerSpan	A										<section class="prog__container"><p> Returns "this" for most CharacterStyles, but for CharacterStyles that were generated by <pre><code> <a href="https://developer.android.com/reference/android/text/style/CharacterStyle.html#wrap(android.text.style.CharacterStyle)"> wrap(CharacterStyle) </a> </code></pre> , returns the underlying CharacterStyle.</p>\n<pre><code>public class RasterizerSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/RasterizerSpan.html
RelativeSizeSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html#describeContents()"> describeContents() </a> </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p>\n<pre><code>public class RelativeSizeSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/RelativeSizeSpan.html
ReplacementSpan	A										<section class="prog__container"><p> Draws the span into the canvas.</p>\n<pre><code>public abstract class ReplacementSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/ReplacementSpan.html
ScaleXSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html#describeContents()"> describeContents() </a> </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p>\n<pre><code>public class ScaleXSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/ScaleXSpan.html
StrikethroughSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html#describeContents()"> describeContents() </a> </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p>\n<pre><code>public class StrikethroughSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/StrikethroughSpan.html
StyleSpan	A										<section class="prog__container"><p> Describes a style in a span. Note that styles are cumulative -- if both bold and italic are set in separate spans, or if the base style is bold and a span calls for italic, you get bold italic. You can't turn off a style from the base style.</p>\n<pre><code>public class StyleSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/StyleSpan.html
SubscriptSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html#describeContents()"> describeContents() </a> </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p>\n<pre><code>public class SubscriptSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/SubscriptSpan.html
SuggestionSpan	A										<section class="prog__container"><p> Holds suggestion candidates for the text enclosed in this span. When such a span is edited in an EditText, double tapping on the text enclosed in this span will display a popup dialog listing suggestion replacement for that text. The user can then replace the original text by one of the suggestions. These spans should typically be created by the input method to provide correction and alternates for the text.</p>\n<pre><code>public class SuggestionSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/SuggestionSpan.html
SuperscriptSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html#describeContents()"> describeContents() </a> </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p>\n<pre><code>public class SuperscriptSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/SuperscriptSpan.html
TabStopSpan	A										<section class="prog__container"><p> Represents a single tab stop on a line.</p>\n<pre><code>public interface TabStopSpan\nimplements <a href="https://developer.android.com/reference/android/text/style/ParagraphStyle.html">ParagraphStyle</a></code></pre></section>	https://developer.android.com/reference/android/text/style/TabStopSpan.html
TabStopSpan.Standard	A										<section class="prog__container"><p> The default implementation of TabStopSpan.</p>\n<pre><code>public static class TabStopSpan.Standard\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/style/TabStopSpan.Standard.html
TextAppearanceSpan	A										<section class="prog__container"><p> Sets the text color, size, style, and typeface to match a TextAppearance resource.</p>\n<pre><code>public class TextAppearanceSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TextAppearanceSpan.html
TtsSpan.Builder	A										<section class="prog__container"><p> A simple builder for TtsSpans. This builder can be used directly, but the more specific subclasses of this builder like <pre><code> <a href="https://developer.android.com/reference/android/text/style/TtsSpan.TextBuilder.html"> TtsSpan.TextBuilder </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/text/style/TtsSpan.CardinalBuilder.html"> TtsSpan.CardinalBuilder </a> </code></pre> are likely more useful. This class uses generics so methods from this class can return instances of its child classes, resulting in a fluent API (CRTP pattern).</p>\n<pre><code>public static class TtsSpan.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.Builder.html
TtsSpan.CardinalBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> <a href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_CARDINAL"> TYPE_CARDINAL </a> </code></pre> .</p>\n<pre><code>public static class TtsSpan.CardinalBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.CardinalBuilder.html
TtsSpan.DateBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> <a href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_DATE"> TYPE_DATE </a> </code></pre> .</p>\n<pre><code>public static class TtsSpan.DateBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.DateBuilder.html
TtsSpan.DecimalBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> <a href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_DECIMAL"> TYPE_DECIMAL </a> </code></pre> .</p>\n<pre><code>public static class TtsSpan.DecimalBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.DecimalBuilder.html
TtsSpan.DigitsBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> <a href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_DIGITS"> TYPE_DIGITS </a> </code></pre> .</p>\n<pre><code>public static class TtsSpan.DigitsBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.DigitsBuilder.html
TtsSpan.ElectronicBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> <a href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_ELECTRONIC"> TYPE_ELECTRONIC </a> </code></pre> .</p>\n<pre><code>public static class TtsSpan.ElectronicBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.ElectronicBuilder.html
TtsSpan.FractionBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> <a href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_FRACTION"> TYPE_FRACTION </a> </code></pre> .</p>\n<pre><code>public static class TtsSpan.FractionBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.FractionBuilder.html
TtsSpan	A										<section class="prog__container"><p> A span that supplies additional meta-data for the associated text intended for text-to-speech engines. If the text is being processed by a text-to-speech engine, the engine may use the data in this span in addition to or instead of its associated text. Each instance of a TtsSpan has a type, for example <pre><code> <a href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_DATE"> TYPE_DATE </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_MEASURE"> TYPE_MEASURE </a> </code></pre> . And a list of arguments, provided as key-value pairs in a bundle. The inner classes are there for convenience and provide builders for each TtsSpan type.</p>\n<pre><code>public class TtsSpan\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.html
TtsSpan.MeasureBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> <a href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_MEASURE"> TYPE_MEASURE </a> </code></pre> .</p>\n<pre><code>public static class TtsSpan.MeasureBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.MeasureBuilder.html
TtsSpan.MoneyBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> <a href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_MONEY"> TYPE_MONEY </a> </code></pre> .</p>\n<pre><code>public static class TtsSpan.MoneyBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.MoneyBuilder.html
TtsSpan.OrdinalBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> <a href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_ORDINAL"> TYPE_ORDINAL </a> </code></pre> .</p>\n<pre><code>public static class TtsSpan.OrdinalBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.OrdinalBuilder.html
TtsSpan.SemioticClassBuilder	A										<section class="prog__container"><p> A builder for TtsSpans, has setters for morphosyntactic features. This builder can be used directly, but the more specific subclasses of this builder like <pre><code> <a href="https://developer.android.com/reference/android/text/style/TtsSpan.TextBuilder.html"> TtsSpan.TextBuilder </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/text/style/TtsSpan.CardinalBuilder.html"> TtsSpan.CardinalBuilder </a> </code></pre> are likely more useful.</p>\n<pre><code>public static class TtsSpan.SemioticClassBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.SemioticClassBuilder.html
TtsSpan.TelephoneBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> <a href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_TELEPHONE"> TYPE_TELEPHONE </a> </code></pre> .</p>\n<pre><code>public static class TtsSpan.TelephoneBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.TelephoneBuilder.html
TtsSpan.TextBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> <a href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_TEXT"> TYPE_TEXT </a> </code></pre> .</p>\n<pre><code>public static class TtsSpan.TextBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.TextBuilder.html
TtsSpan.TimeBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> <a href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_TIME"> TYPE_TIME </a> </code></pre> .</p>\n<pre><code>public static class TtsSpan.TimeBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.TimeBuilder.html
TtsSpan.VerbatimBuilder	A										<section class="prog__container"><p> A builder for TtsSpans of type <pre><code> <a href="https://developer.android.com/reference/android/text/style/TtsSpan.html#TYPE_VERBATIM"> TYPE_VERBATIM </a> </code></pre> .</p>\n<pre><code>public static class TtsSpan.VerbatimBuilder\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TtsSpan.VerbatimBuilder.html
TypefaceSpan	A										<section class="prog__container"><p> Changes the typeface family of the text to which the span is attached.</p>\n<pre><code>public class TypefaceSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/TypefaceSpan.html
UnderlineSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html#describeContents()"> describeContents() </a> </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p>\n<pre><code>public class UnderlineSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/UnderlineSpan.html
UpdateAppearance	A										<section class="prog__container"><p> The classes that affect character-level text in a way that modifies their appearance when one is added or removed must implement this interface. Note that if the class also impacts size or other metrics, it should instead implement <pre><code> <a href="https://developer.android.com/reference/android/text/style/UpdateLayout.html"> UpdateLayout </a> </code></pre> .</p>\n<pre><code>public interface UpdateAppearance\n</code></pre></section>	https://developer.android.com/reference/android/text/style/UpdateAppearance.html
UpdateLayout	A										<section class="prog__container"><p> The classes that affect character-level text formatting in a way that triggers a text layout update when one is added or removed must implement this interface. This interface also includes <pre><code> <a href="https://developer.android.com/reference/android/text/style/UpdateAppearance.html"> UpdateAppearance </a> </code></pre> since such a change implicitly also impacts the appearance.</p>\n<pre><code>public interface UpdateLayout\nimplements <a href="https://developer.android.com/reference/android/text/style/UpdateAppearance.html">UpdateAppearance</a></code></pre></section>	https://developer.android.com/reference/android/text/style/UpdateLayout.html
URLSpan	A										<section class="prog__container"><p> Descriptor bit used with <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html#describeContents()"> describeContents() </a> </code></pre> : indicates that the Parcelable object's flattened representation includes a file descriptor.</p>\n<pre><code>public class URLSpan\n</code></pre></section>	https://developer.android.com/reference/android/text/style/URLSpan.html
WrapTogetherSpan	A										<section class="prog__container"><p class="dac-footer-copyright"> Except as noted, this content is licensed under <a href="http://creativecommons.org/licenses/by/2.5/"> Creative Commons Attribution 2.5 </a> . For details and restrictions, see the <a href="https://developer.android.com/license.html"> Content License </a> .</p>\n<pre><code>public interface WrapTogetherSpan\nimplements <a href="https://developer.android.com/reference/android/text/style/ParagraphStyle.html">ParagraphStyle</a></code></pre></section>	https://developer.android.com/reference/android/text/style/WrapTogetherSpan.html
Linkify	A										<section class="prog__container"><p> Linkify take a piece of text and a regular expression and turns all of the regex matches in the text into clickable links. This is particularly useful for matching things like email addresses, web URLs, etc. and making them actionable. Alone with the pattern that is to be matched, a URL scheme prefix is also required. Any pattern match that does not begin with the supplied scheme will have the scheme prepended to the matched text when the clickable URL is created. For instance, if you are matching web URLs you would supply the scheme <pre><code> http:// </code></pre> . If the pattern matches example.com, which does not have a URL scheme prefix, the supplied scheme will be prepended to create <pre><code> http://example.com </code></pre> when the clickable URL link is created.</p>\n<pre><code>public class Linkify\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/util/Linkify.html
Linkify.MatchFilter	A										<section class="prog__container"><p> MatchFilter enables client code to have more control over what is allowed to match and become a link, and what is not. For example: when matching web URLs you would like things like http://www.example.com to match, as well as just example.com itelf. However, you would not want to match against the domain in support@example.com. So, when matching against a web URL pattern you might also include a MatchFilter that disallows the match if it is immediately preceded by an at-sign (@).</p>\n<pre><code>public static interface Linkify.MatchFilter\n</code></pre></section>	https://developer.android.com/reference/android/text/util/Linkify.MatchFilter.html
Linkify.TransformFilter	A										<section class="prog__container"><p> TransformFilter enables client code to have more control over how matched patterns are represented as URLs. For example: when converting a phone number such as (919) 555-1212 into a tel: URL the parentheses, white space, and hyphen need to be removed to produce tel:9195551212.</p>\n<pre><code>public static interface Linkify.TransformFilter\n</code></pre></section>	https://developer.android.com/reference/android/text/util/Linkify.TransformFilter.html
android.text.util	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/text/util/package-summary.html
Rfc822Token	A										<section class="prog__container"><p> This class stores an RFC 822-like name, address, and comment, and provides methods to convert them to quoted strings.</p>\n<pre><code>public class Rfc822Token\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/util/Rfc822Token.html
Rfc822Tokenizer	A										<section class="prog__container"><p> This class works as a Tokenizer for MultiAutoCompleteTextView for address list fields, and also provides a method for converting a string of addresses (such as might be typed into such a field) into a series of Rfc822Tokens.</p>\n<pre><code>public class Rfc822Tokenizer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/text/util/Rfc822Tokenizer.html
ArcMotion	A										<section class="prog__container"><p> A PathMotion that generates a curved path along an arc on an imaginary circle containing the two points. If the horizontal distance between the points is less than the vertical distance, then the circle's center point will be horizontally aligned with the end point. If the vertical distance is less than the horizontal distance then the circle's center point will be vertically aligned with the end point. <p> When the two points are near horizontal or vertical, the curve of the motion will be small as the center of the circle will be far from both points. To force curvature of the path, <pre><code> <a href="https://developer.android.com/reference/android/transition/ArcMotion.html#setMinimumHorizontalAngle(float)"> setMinimumHorizontalAngle(float) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/transition/ArcMotion.html#setMinimumVerticalAngle(float)"> setMinimumVerticalAngle(float) </a> </code></pre> may be used to set the minimum angle of the arc between two points. </p>\n<pre><code>public class ArcMotion\n</code></pre></section>	https://developer.android.com/reference/android/transition/ArcMotion.html
AutoTransition	A										<section class="prog__container"><p> Utility class for creating a default transition that automatically fades, moves, and resizes views during a scene change. <p> An AutoTransition can be described in a resource file by using the tag <pre><code> autoTransition </code></pre> , along with the other standard attributes of <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#Transition"> Transition </a> </code></pre> . </p>\n<pre><code>public class AutoTransition\n</code></pre></section>	https://developer.android.com/reference/android/transition/AutoTransition.html
ChangeBounds	A										<section class="prog__container"><p> This transition captures the layout bounds of target views before and after the scene change and animates those changes during the transition. <p> A ChangeBounds transition can be described in a resource file by using the tag <pre><code> changeBounds </code></pre> , using its attributes of <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#ChangeBounds"> ChangeBounds </a> </code></pre> along with the other standard attributes of <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#Transition"> Transition </a> </code></pre> . </p>\n<pre><code>public class ChangeBounds\n</code></pre></section>	https://developer.android.com/reference/android/transition/ChangeBounds.html
ChangeClipBounds	A										<section class="prog__container"><p> ChangeClipBounds captures the <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#getClipBounds()"> getClipBounds() </a> </code></pre> before and after the scene change and animates those changes during the transition.</p>\n<pre><code>public class ChangeClipBounds\n</code></pre></section>	https://developer.android.com/reference/android/transition/ChangeClipBounds.html
ChangeImageTransform	A										<section class="prog__container"><p> This Transition captures an ImageView's matrix before and after the scene change and animates it during the transition. <p> In combination with ChangeBounds, ChangeImageTransform allows ImageViews that change size, shape, or <pre><code> <a href="https://developer.android.com/reference/android/widget/ImageView.ScaleType.html"> ImageView.ScaleType </a> </code></pre> to animate contents smoothly. </p>\n<pre><code>public class ChangeImageTransform\n</code></pre></section>	https://developer.android.com/reference/android/transition/ChangeImageTransform.html
ChangeScroll	A										<section class="prog__container"><p> This transition captures the scroll properties of targets before and after the scene change and animates any changes.</p>\n<pre><code>public class ChangeScroll\n</code></pre></section>	https://developer.android.com/reference/android/transition/ChangeScroll.html
ChangeTransform	A										<section class="prog__container"><p> This Transition captures scale and rotation for Views before and after the scene change and animates those changes during the transition. A change in parent is handled as well by capturing the transforms from the parent before and after the scene change and animating those during the transition.</p>\n<pre><code>public class ChangeTransform\n</code></pre></section>	https://developer.android.com/reference/android/transition/ChangeTransform.html
CircularPropagation	A										<section class="prog__container"><p> A propagation that varies with the distance to the epicenter of the Transition or center of the scene if no epicenter exists. When a View is visible in the start of the transition, Views farther from the epicenter will transition sooner than Views closer to the epicenter. When a View is not in the start of the transition or is not visible at the start of the transition, it will transition sooner when closer to the epicenter and later when farther from the epicenter. This is the default TransitionPropagation used with <pre><code> <a href="https://developer.android.com/reference/android/transition/Explode.html"> Explode </a> </code></pre> .</p>\n<pre><code>public class CircularPropagation\n</code></pre></section>	https://developer.android.com/reference/android/transition/CircularPropagation.html
Explode	A										<section class="prog__container"><p> This transition tracks changes to the visibility of target views in the start and end scenes and moves views in or out from the edges of the scene. Visibility is determined by both the <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#setVisibility(int)"> setVisibility(int) </a> </code></pre> state of the view as well as whether it is parented in the current view hierarchy. Disappearing Views are limited as described in <pre><code> <a href="https://developer.android.com/reference/android/transition/Visibility.html#onDisappear(android.view.ViewGroup, android.transition.TransitionValues, int, android.transition.TransitionValues, int)"> onDisappear(android.view.ViewGroup, TransitionValues, int, TransitionValues, int) </a> </code></pre> . <p> Views move away from the focal View or the center of the Scene if no epicenter was provided. </p>\n<pre><code>public class Explode\n</code></pre></section>	https://developer.android.com/reference/android/transition/Explode.html
Fade	A										<section class="prog__container"><p> This transition tracks changes to the visibility of target views in the start and end scenes and fades views in or out when they become visible or non-visible. Visibility is determined by both the <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#setVisibility(int)"> setVisibility(int) </a> </code></pre> state of the view as well as whether it is parented in the current view hierarchy. <p> The ability of this transition to fade out a particular view, and the way that that fading operation takes place, is based on the situation of the view in the view hierarchy. For example, if a view was simply removed from its parent, then the view will be added into a <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroupOverlay.html"> ViewGroupOverlay </a> </code></pre> while fading. If a visible view is changed to be <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#GONE"> GONE </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#INVISIBLE"> INVISIBLE </a> </code></pre> , then the visibility will be changed to <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#VISIBLE"> VISIBLE </a> </code></pre> for the duration of the animation. However, if a view is in a hierarchy which is also altering its visibility, the situation can be more complicated. In general, if a view that is no longer in the hierarchy in the end scene still has a parent (so its parent hierarchy was removed, but it was not removed from its parent), then it will be left alone to avoid side-effects from improperly removing it from its parent. The only exception to this is if the previous <pre><code> <a href="https://developer.android.com/reference/android/transition/Scene.html"> Scene </a> </code></pre> was <pre><code> <a href="https://developer.android.com/reference/android/transition/Scene.html#getSceneForLayout(android.view.ViewGroup, int, android.content.Context)"> created from a layout resource file </a> </code></pre> , then it is considered safe to un-parent the starting scene view in order to fade it out. </p>\n<pre><code>public class Fade\n</code></pre></section>	https://developer.android.com/reference/android/transition/Fade.html
android.transition	A										<section class="prog__container">The classes in this package enable "scenes & transitions" functionality forview hiearchies.</section>	https://developer.android.com/reference/android/transition/package-summary.html
PathMotion	A										<section class="prog__container"><p> This base class can be extended to provide motion along a Path to Transitions. <p> Transitions such as <pre><code> <a href="https://developer.android.com/reference/android/transition/ChangeBounds.html"> ChangeBounds </a> </code></pre> move Views, typically in a straight path between the start and end positions. Applications that desire to have these motions move in a curve can change how Views interpolate in two dimensions by extending PathMotion and implementing <pre><code> <a href="https://developer.android.com/reference/android/transition/PathMotion.html#getPath(float, float, float, float)"> getPath(float, float, float, float) </a> </code></pre> . </p>\n<pre><code>public abstract class PathMotion\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/transition/PathMotion.html
PatternPathMotion	A										<section class="prog__container"><p> A PathMotion that takes a Path pattern and applies it to the separation between two points. The starting point of the Path will be moved to the origin and the end point will be scaled and rotated so that it matches with the target end point. <p> This may be used in XML as an element inside a transition. </p>\n<pre><code>public class PatternPathMotion\n</code></pre></section>	https://developer.android.com/reference/android/transition/PatternPathMotion.html
Scene	A										<section class="prog__container"><p> A scene represents the collection of values that various properties in the View hierarchy will have when the scene is applied. A Scene can be configured to automatically run a Transition when it is applied, which will animate the various property changes that take place during the scene change.</p>\n<pre><code>public final class Scene\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/transition/Scene.html
SidePropagation	A										<section class="prog__container"><p> A <pre><code> TransitionPropagation </code></pre> that propagates based on the distance to the side and, orthogonally, the distance to epicenter. If the transitioning View is visible in the start of the transition, then it will transition sooner when closer to the side and later when farther. If the view is not visible in the start of the transition, then it will transition later when closer to the side and sooner when farther from the edge. This is the default TransitionPropagation used with <pre><code> <a href="https://developer.android.com/reference/android/transition/Slide.html"> Slide </a> </code></pre> .</p>\n<pre><code>public class SidePropagation\n</code></pre></section>	https://developer.android.com/reference/android/transition/SidePropagation.html
Slide	A										<section class="prog__container"><p> This transition tracks changes to the visibility of target views in the start and end scenes and moves views in or out from one of the edges of the scene. Visibility is determined by both the <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#setVisibility(int)"> setVisibility(int) </a> </code></pre> state of the view as well as whether it is parented in the current view hierarchy. Disappearing Views are limited as described in <pre><code> <a href="https://developer.android.com/reference/android/transition/Visibility.html#onDisappear(android.view.ViewGroup, android.transition.TransitionValues, int, android.transition.TransitionValues, int)"> onDisappear(android.view.ViewGroup, TransitionValues, int, TransitionValues, int) </a> </code></pre> .</p>\n<pre><code>public class Slide\n</code></pre></section>	https://developer.android.com/reference/android/transition/Slide.html
Transition.EpicenterCallback	A										<section class="prog__container"><p> Class to get the epicenter of Transition. Use <pre><code> <a href="https://developer.android.com/reference/android/transition/Transition.html#setEpicenterCallback(android.transition.Transition.EpicenterCallback)"> setEpicenterCallback(android.transition.Transition.EpicenterCallback) </a> </code></pre> to set the callback used to calculate the epicenter of the Transition. Override <pre><code> <a href="https://developer.android.com/reference/android/transition/Transition.html#getEpicenter()"> getEpicenter() </a> </code></pre> to return the rectangular region in screen coordinates of the epicenter of the transition.</p>\n<pre><code>public static abstract class Transition.EpicenterCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/transition/Transition.EpicenterCallback.html
Transition	A										<section class="prog__container"><p> A Transition holds information about animations that will be run on its targets during a scene change. Subclasses of this abstract class may choreograph several child transitions ( <pre><code> <a href="https://developer.android.com/reference/android/transition/TransitionSet.html"> TransitionSet </a> </code></pre> or they may perform custom animations themselves. Any Transition has two main jobs: (1) capture property values, and (2) play animations based on changes to captured property values. A custom transition knows what property values on View objects are of interest to it, and also knows how to animate changes to those values. For example, the <pre><code> <a href="https://developer.android.com/reference/android/transition/Fade.html"> Fade </a> </code></pre> transition tracks changes to visibility-related properties and is able to construct and run animations that fade items in or out based on changes to those properties. <p> Note: Transitions may not work correctly with either <pre><code> <a href="https://developer.android.com/reference/android/view/SurfaceView.html"> SurfaceView </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/view/TextureView.html"> TextureView </a> </code></pre> , due to the way that these views are displayed on the screen. For SurfaceView, the problem is that the view is updated from a non-UI thread, so changes to the view due to transitions (such as moving and resizing the view) may be out of sync with the display inside those bounds. TextureView is more compatible with transitions in general, but some specific transitions (such as <pre><code> <a href="https://developer.android.com/reference/android/transition/Fade.html"> Fade </a> </code></pre> ) may not be compatible with TextureView because they rely on <pre><code> <a href="https://developer.android.com/reference/android/view/ViewOverlay.html"> ViewOverlay </a> </code></pre> functionality, which does not currently work with TextureView. </p>\n<pre><code>public abstract class Transition\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/transition/Transition.html
Transition.TransitionListener	A										<section class="prog__container"><p> A transition listener receives notifications from a transition. Notifications indicate transition lifecycle events.</p>\n<pre><code>public static interface Transition.TransitionListener\n</code></pre></section>	https://developer.android.com/reference/android/transition/Transition.TransitionListener.html
TransitionInflater	A										<section class="prog__container"><p> This class inflates scenes and transitions from resource files. Information on XML resource descriptions for transitions can be found for <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#Transition"> Transition </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#TransitionSet"> TransitionSet </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#TransitionTarget"> TransitionTarget </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#Fade"> Fade </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#TransitionManager"> TransitionManager </a> </code></pre> .</p>\n<pre><code>public class TransitionInflater\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/transition/TransitionInflater.html
TransitionManager	A										<section class="prog__container"><p> This class manages the set of transitions that fire when there is a change of <pre><code> <a href="https://developer.android.com/reference/android/transition/Scene.html"> Scene </a> </code></pre> . To use the manager, add scenes along with transition objects with calls to <pre><code> <a href="https://developer.android.com/reference/android/transition/TransitionManager.html#setTransition(android.transition.Scene, android.transition.Transition)"> setTransition(Scene, Transition) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/transition/TransitionManager.html#setTransition(android.transition.Scene, android.transition.Scene, android.transition.Transition)"> setTransition(Scene, Scene, Transition) </a> </code></pre> . Setting specific transitions for scene changes is not required; by default, a Scene change will use <pre><code> <a href="https://developer.android.com/reference/android/transition/AutoTransition.html"> AutoTransition </a> </code></pre> to do something reasonable for most situations. Specifying other transitions for particular scene changes is only necessary if the application wants different transition behavior in these situations. <p> TransitionManagers can be declared in XML resource files inside the <pre><code> res/transition </code></pre> directory. TransitionManager resources consist of the <pre><code> transitionManager </code></pre> tag name, containing one or more <pre><code> transition </code></pre> tags, each of which describe the relationship of that transition to the from/to scene information in that tag. For example, here is a resource file that declares several scene transitions: </p>\n<pre><code>public class TransitionManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/transition/TransitionManager.html
TransitionPropagation	A										<section class="prog__container"><p> Extend <pre><code> TransitionPropagation </code></pre> to customize start delays for Animators created in <pre><code> <a href="https://developer.android.com/reference/android/transition/Transition.html#createAnimator(android.view.ViewGroup, android.transition.TransitionValues, android.transition.TransitionValues)"> createAnimator(ViewGroup, TransitionValues, TransitionValues) </a> </code></pre> . A Transition such as <pre><code> <a href="https://developer.android.com/reference/android/transition/Explode.html"> Explode </a> </code></pre> defaults to using <pre><code> <a href="https://developer.android.com/reference/android/transition/CircularPropagation.html"> CircularPropagation </a> </code></pre> and Views closer to the epicenter will move out of the scene later and into the scene sooner than Views farther from the epicenter, giving the appearance of inertia. With no TransitionPropagation, all Views will react simultaneously to the start of the transition.</p>\n<pre><code>public abstract class TransitionPropagation\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/transition/TransitionPropagation.html
TransitionSet	A										<section class="prog__container"><p> A TransitionSet is a parent of child transitions (including other TransitionSets). Using TransitionSets enables more complex choreography of transitions, where some sets play <pre><code> <a href="https://developer.android.com/reference/android/transition/TransitionSet.html#ORDERING_TOGETHER"> ORDERING_TOGETHER </a> </code></pre> and others play <pre><code> <a href="https://developer.android.com/reference/android/transition/TransitionSet.html#ORDERING_SEQUENTIAL"> ORDERING_SEQUENTIAL </a> </code></pre> . For example, <pre><code> <a href="https://developer.android.com/reference/android/transition/AutoTransition.html"> AutoTransition </a> </code></pre> uses a TransitionSet to sequentially play a Fade(Fade.OUT), followed by a <pre><code> <a href="https://developer.android.com/reference/android/transition/ChangeBounds.html"> ChangeBounds </a> </code></pre> , followed by a Fade(Fade.OUT) transition. <p> A TransitionSet can be described in a resource file by using the tag <pre><code> transitionSet </code></pre> , along with the standard attributes of <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#TransitionSet"> TransitionSet </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#Transition"> Transition </a> </code></pre> . Child transitions of the TransitionSet object can be loaded by adding those child tags inside the enclosing <pre><code> transitionSet </code></pre> tag. For example, the following xml describes a TransitionSet that plays a Fade and then a ChangeBounds transition on the affected view targets: </p>\n<pre><code>public class TransitionSet\n</code></pre></section>	https://developer.android.com/reference/android/transition/TransitionSet.html
TransitionValues	A										<section class="prog__container"><p> Data structure which holds cached values for the transition. The view field is the target which all of the values pertain to. The values field is a map which holds information for fields according to names selected by the transitions. These names should be unique to avoid clobbering values stored by other transitions, such as the convention project:transition_name:property_name. For example, the platform might store a property "alpha" in a transition "Fader" as "android:fader:alpha". <p> These values are cached during the <pre><code> <a href="https://developer.android.com/reference/android/transition/Transition.html#captureStartValues(android.transition.TransitionValues)"> captureStartValues(TransitionValues) </a> </code></pre> capture} phases of a scene change, once when the start values are captured and again when the end values are captured. These start/end values are then passed into the transitions via the for <pre><code> <a href="https://developer.android.com/reference/android/transition/Transition.html#createAnimator(android.view.ViewGroup, android.transition.TransitionValues, android.transition.TransitionValues)"> createAnimator(ViewGroup, TransitionValues, TransitionValues) </a> </code></pre> method. </p>\n<pre><code>public class TransitionValues\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/transition/TransitionValues.html
Visibility	A										<section class="prog__container"><p> This transition tracks changes to the visibility of target views in the start and end scenes. Visibility is determined not just by the <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#setVisibility(int)"> setVisibility(int) </a> </code></pre> state of views, but also whether views exist in the current view hierarchy. The class is intended to be a utility for subclasses such as <pre><code> <a href="https://developer.android.com/reference/android/transition/Fade.html"> Fade </a> </code></pre> , which use this visibility information to determine the specific animations to run when visibility changes occur. Subclasses should implement one or both of the methods <pre><code> <a href="https://developer.android.com/reference/android/transition/Visibility.html#onAppear(android.view.ViewGroup, android.transition.TransitionValues, int, android.transition.TransitionValues, int)"> onAppear(ViewGroup, TransitionValues, int, TransitionValues, int) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/transition/Visibility.html#onDisappear(android.view.ViewGroup, android.transition.TransitionValues, int, android.transition.TransitionValues, int)"> onDisappear(ViewGroup, TransitionValues, int, TransitionValues, int) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/transition/Visibility.html#onAppear(android.view.ViewGroup, android.view.View, android.transition.TransitionValues, android.transition.TransitionValues)"> onAppear(ViewGroup, View, TransitionValues, TransitionValues) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/transition/Visibility.html#onDisappear(android.view.ViewGroup, android.view.View, android.transition.TransitionValues, android.transition.TransitionValues)"> onDisappear(ViewGroup, View, TransitionValues, TransitionValues) </a> </code></pre> .</p>\n<pre><code>public abstract class Visibility\n</code></pre></section>	https://developer.android.com/reference/android/transition/Visibility.html
VisibilityPropagation	A										<section class="prog__container"><p> Base class for <pre><code> TransitionPropagation </code></pre> s that care about View Visibility and the center position of the View.</p>\n<pre><code>public abstract class VisibilityPropagation\n</code></pre></section>	https://developer.android.com/reference/android/transition/VisibilityPropagation.html
AndroidException	A										<section class="prog__container"><p> Base class for all checked exceptions thrown by the Android frameworks.</p>\n<pre><code>public class AndroidException\n</code></pre></section>	https://developer.android.com/reference/android/util/AndroidException.html
AndroidRuntimeException	A										<section class="prog__container"><p> Base class for all unchecked exceptions thrown by the Android frameworks.</p>\n<pre><code>public class AndroidRuntimeException\n</code></pre></section>	https://developer.android.com/reference/android/util/AndroidRuntimeException.html
ArrayMap	A										<section class="prog__container"><p> ArrayMap is a generic key-&gt;value mapping data structure that is designed to be more memory efficient than a traditional <pre><code> <a href="https://developer.android.com/reference/java/util/HashMap.html"> HashMap </a> </code></pre> . It keeps its mappings in an array data structure -- an integer array of hash codes for each item, and an Object array of the key/value pairs. This allows it to avoid having to create an extra object for every entry put in to the map, and it also tries to control the growth of the size of these arrays more aggressively (since growing them only requires copying the entries in the array, not rebuilding a hash map). <p> Note that this implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashMap, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. </p>\n<pre><code>public final class ArrayMap\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/ArrayMap.html
ArraySet	A										<section class="prog__container"><p> ArraySet is a generic set data structure that is designed to be more memory efficient than a traditional <pre><code> <a href="https://developer.android.com/reference/java/util/HashSet.html"> HashSet </a> </code></pre> . The design is very similar to <pre><code> <a href="https://developer.android.com/reference/android/util/ArrayMap.html"> ArrayMap </a> </code></pre> , with all of the caveats described there. This implementation is separate from ArrayMap, however, so the Object array contains only one item for each entry in the set (instead of a pair for a mapping). <p> Note that this implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashSet, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. </p>\n<pre><code>public final class ArraySet\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/ArraySet.html
AtomicFile	A										<section class="prog__container"><p> Helper class for performing atomic operations on a file by creating a backup file until a write has successfully completed. If you need this on older versions of the platform you can use <pre><code> <a href="https://developer.android.com/reference/android/support/v4/util/AtomicFile.html"> AtomicFile </a> </code></pre> in the v4 support library. <p> Atomic file guarantees file integrity by ensuring that a file has been completely written and sync'd to disk before removing its backup. As long as the backup file exists, the original file is considered to be invalid (left over from a previous attempt to write the file). </p>\n<pre><code>public class AtomicFile\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/AtomicFile.html
AttributeSet	A										<section class="prog__container"><p> A collection of attributes, as found associated with a tag in an XML document. Often you will not want to use this interface directly, instead passing it to <pre><code> <a href="https://developer.android.com/reference/android/content/res/Resources.Theme.html#obtainStyledAttributes(android.util.AttributeSet, int[], int, int)"> Resources.Theme.obtainStyledAttributes() </a> </code></pre> which will take care of parsing the attributes for you. In particular, the Resources API will convert resource references (attribute values such as "@string/my_label" in the original XML) to the desired type for you; if you use AttributeSet directly then you will need to manually check for resource references (with <pre><code> <a href="https://developer.android.com/reference/android/util/AttributeSet.html#getAttributeResourceValue(int, int)"> getAttributeResourceValue(int, int) </a> </code></pre> ) and do the resource lookup yourself if needed. Direct use of AttributeSet also prevents the application of themes and styles when retrieving attribute values. <p> This interface provides an efficient mechanism for retrieving data from compiled XML files, which can be retrieved for a particular XmlPullParser through <pre><code> <a href="https://developer.android.com/reference/android/util/Xml.html#asAttributeSet(org.xmlpull.v1.XmlPullParser)"> Xml.asAttributeSet() </a> </code></pre> . Normally this will return an implementation of the interface that works on top of a generic XmlPullParser, however it is more useful in conjunction with compiled XML resources: <pre> XmlPullParser parser = resources.getXml(myResource); AttributeSet attributes = Xml.asAttributeSet(parser);</pre> <p> The implementation returned here, unlike using the implementation on top of a generic XmlPullParser, is highly optimized by retrieving pre-computed information that was generated by aapt when compiling your resources. For example, the <pre><code> <a href="https://developer.android.com/reference/android/util/AttributeSet.html#getAttributeFloatValue(int, float)"> getAttributeFloatValue(int, float) </a> </code></pre> method returns a floating point number previous stored in the compiled resource instead of parsing at runtime the string originally in the XML file. <p> This interface also provides additional information contained in the compiled XML resource that is not available in a normal XML file, such as <pre><code> <a href="https://developer.android.com/reference/android/util/AttributeSet.html#getAttributeNameResource(int)"> getAttributeNameResource(int) </a> </code></pre> which returns the resource identifier associated with a particular XML attribute name. </p>\n<pre><code>public interface AttributeSet\n</code></pre></section>	https://developer.android.com/reference/android/util/AttributeSet.html
Base64	A										<section class="prog__container"><p> Utilities for encoding and decoding the Base64 representation of binary data. See RFCs <a href="http://www.ietf.org/rfc/rfc2045.txt"> 2045 </a> and <a href="http://www.ietf.org/rfc/rfc3548.txt"> 3548 </a> .</p>\n<pre><code>public class Base64\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/Base64.html
Base64DataException	A										<section class="prog__container"><p> This exception is thrown by <pre><code> <a href="https://developer.android.com/reference/android/util/Base64InputStream.html"> Base64InputStream </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/util/Base64OutputStream.html"> Base64OutputStream </a> </code></pre> when an error is detected in the data being decoded. This allows problems with the base64 data to be disambiguated from errors in the underlying streams (e.g. actual connection errors.)</p>\n<pre><code>public class Base64DataException\n</code></pre></section>	https://developer.android.com/reference/android/util/Base64DataException.html
Base64InputStream	A										<section class="prog__container"><p> An InputStream that does Base64 decoding on the data read through it.</p>\n<pre><code>public class Base64InputStream\n</code></pre></section>	https://developer.android.com/reference/android/util/Base64InputStream.html
Base64OutputStream	A										<section class="prog__container"><p> An OutputStream that does Base64 encoding on the data written to it, writing the resulting data to another OutputStream.</p>\n<pre><code>public class Base64OutputStream\n</code></pre></section>	https://developer.android.com/reference/android/util/Base64OutputStream.html
Config	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 14. </strong> <br/> This class is not useful, it just returns the same value for all constants, and has always done this. Do not use it. </p>\n<pre><code>public final class Config\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/Config.html
DebugUtils	A										<section class="prog__container"><p> <p> Various utilities for debugging and logging. </p>\n<pre><code>public class DebugUtils\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/DebugUtils.html
DisplayMetrics	A										<section class="prog__container"><p> A structure describing general information about a display, such as its size, density, and font scaling. <p> To access the DisplayMetrics members, initialize an object like this: </p>\n<pre><code>public class DisplayMetrics\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/DisplayMetrics.html
EventLog.Event	A										<section class="prog__container"><p> A previously logged event read from the logs. Instances are thread safe.</p>\n<pre><code>public static final class EventLog.Event\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/EventLog.Event.html
EventLog	A										<section class="prog__container"><p> Access to the system diagnostic event record. System diagnostic events are used to record certain system-level events (such as garbage collection, activity manager state, system watchdogs, and other low level activity), which may be automatically collected and analyzed during system development. <p> This is <b> not </b> the main "logcat" debugging log ( <pre><code> <a href="https://developer.android.com/reference/android/util/Log.html"> Log </a> </code></pre> )! These diagnostic events are for system integrators, not application authors. <p> Events use integer tag codes corresponding to /system/etc/event-log-tags. They carry a payload of one or more int, long, or String values. The event-log-tags file defines the payload contents for each type code. </p>\n<pre><code>public class EventLog\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/EventLog.html
EventLogTags.Description	A										<section class="prog__container"><p></p>\n<pre><code>public static class EventLogTags.Description\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/EventLogTags.Description.html
EventLogTags	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 8. </strong> <br/> This class is no longer functional. Use <pre><code> <a href="https://developer.android.com/reference/android/util/EventLog.html"> EventLog </a> </code></pre> instead. </p>\n<pre><code>public class EventLogTags\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/EventLogTags.html
FloatMath	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 22. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/java/lang/Math.html"> Math </a> </code></pre> instead. </p>\n<pre><code>public class FloatMath\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/FloatMath.html
FloatProperty	A										<section class="prog__container"><p> An implementation of <pre><code> <a href="https://developer.android.com/reference/android/util/Property.html"> Property </a> </code></pre> to be used specifically with fields of type <pre><code> float </code></pre> . This type-specific subclass enables performance benefit by allowing calls to a <pre><code> <a href="https://developer.android.com/reference/android/util/FloatProperty.html#setValue(T, float)"> setValue() </a> </code></pre> function that takes the primitive <pre><code> float </code></pre> type and avoids autoboxing and other overhead associated with the <pre><code> Float </code></pre> class.</p>\n<pre><code>public abstract class FloatProperty\n</code></pre></section>	https://developer.android.com/reference/android/util/FloatProperty.html
IntProperty	A										<section class="prog__container"><p> An implementation of <pre><code> <a href="https://developer.android.com/reference/android/util/Property.html"> Property </a> </code></pre> to be used specifically with fields of type <pre><code> int </code></pre> . This type-specific subclass enables performance benefit by allowing calls to a <pre><code> <a href="https://developer.android.com/reference/android/util/IntProperty.html#setValue(T, int)"> setValue() </a> </code></pre> function that takes the primitive <pre><code> int </code></pre> type and avoids autoboxing and other overhead associated with the <pre><code> Integer </code></pre> class.</p>\n<pre><code>public abstract class IntProperty\n</code></pre></section>	https://developer.android.com/reference/android/util/IntProperty.html
JsonReader	A										<section class="prog__container"><p> Reads a JSON ( <a href="http://www.ietf.org/rfc/rfc4627.txt"> RFC 4627 </a> ) encoded value as a stream of tokens. This stream includes both literal values (strings, numbers, booleans, and nulls) as well as the begin and end delimiters of objects and arrays. The tokens are traversed in depth-first order, the same order that they appear in the JSON document. Within JSON objects, name/value pairs are represented by a single token. </p>\n<pre><code>public final class JsonReader\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/JsonReader.html
JsonToken	A										<section class="prog__container"><p> A structure, name or value type in a JSON-encoded string.</p>\n<pre><code>public final enum JsonToken\n</code></pre></section>	https://developer.android.com/reference/android/util/JsonToken.html
JsonWriter	A										<section class="prog__container"><p> Writes a JSON ( <a href="http://www.ietf.org/rfc/rfc4627.txt"> RFC 4627 </a> ) encoded value to a stream, one token at a time. The stream includes both literal values (strings, numbers, booleans and nulls) as well as the begin and end delimiters of objects and arrays. </p>\n<pre><code>public final class JsonWriter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/JsonWriter.html
LayoutDirection	A										<section class="prog__container"><p> A class for defining layout directions. A layout direction can be left-to-right (LTR) or right-to-left (RTL). It can also be inherited (from a parent) or deduced from the default language script of a locale.</p>\n<pre><code>public final class LayoutDirection\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/LayoutDirection.html
Log	A										<section class="prog__container"><p> API for sending log output. <p> Generally, use the Log.v() Log.d() Log.i() Log.w() and Log.e() methods. <p> The order in terms of verbosity, from least to most is ERROR, WARN, INFO, DEBUG, VERBOSE. Verbose should never be compiled into an application except during development. Debug logs are compiled in but stripped at runtime. Error, warning and info logs are always kept. <p> <b> Tip: </b> A good convention is to declare a <pre><code> TAG </code></pre> constant in your class: <pre>private static final String TAG = "MyActivity";</pre> and use that in subsequent calls to the log methods. </p>\n<pre><code>public final class Log\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/Log.html
LogPrinter	A										<section class="prog__container"><p> Implementation of a <pre><code> <a href="https://developer.android.com/reference/android/util/Printer.html"> Printer </a> </code></pre> that sends its output to the system log.</p>\n<pre><code>public class LogPrinter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/LogPrinter.html
LongSparseArray	A										<section class="prog__container"><p> SparseArray mapping longs to Objects. Unlike a normal array of Objects, there can be gaps in the indices. It is intended to be more memory efficient than using a HashMap to map Longs to Objects, both because it avoids auto-boxing keys and its data structure doesn't rely on an extra entry object for each mapping. <p> Note that this container keeps its mappings in an array data structure, using a binary search to find keys. The implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashMap, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. </p>\n<pre><code>public class LongSparseArray\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/LongSparseArray.html
LruCache	A										<section class="prog__container"><p> A cache that holds strong references to a limited number of values. Each time a value is accessed, it is moved to the head of a queue. When a value is added to a full cache, the value at the end of that queue is evicted and may become eligible for garbage collection. <p> If your cached values hold resources that need to be explicitly released, override <pre><code> <a href="https://developer.android.com/reference/android/util/LruCache.html#entryRemoved(boolean, K, V, V)"> entryRemoved(boolean, K, V, V) </a> </code></pre> . <p> If a cache miss should be computed on demand for the corresponding keys, override <pre><code> <a href="https://developer.android.com/reference/android/util/LruCache.html#create(K)"> create(K) </a> </code></pre> . This simplifies the calling code, allowing it to assume a value will always be returned, even when there's a cache miss. <p> By default, the cache size is measured in the number of entries. Override <pre><code> <a href="https://developer.android.com/reference/android/util/LruCache.html#sizeOf(K, V)"> sizeOf(K, V) </a> </code></pre> to size the cache in different units. For example, this cache is limited to 4MiB of bitmaps: <pre> <pre><code>int cacheSize = 4 * 1024 * 1024; // 4MiB LruCache&lt;String, Bitmap&gt; bitmapCache = new LruCache&lt;String, Bitmap&gt;(cacheSize) { protected int sizeOf(String key, Bitmap value) { return value.getByteCount(); } }</code></pre></pre> <p> This class is thread-safe. Perform multiple cache operations atomically by synchronizing on the cache: <pre> <pre><code>synchronized (cache) { if (cache.get(key) == null) { cache.put(key, value); } }</code></pre></pre> <p> This class does not allow null to be used as a key or value. A return value of null from <pre><code> <a href="https://developer.android.com/reference/android/util/LruCache.html#get(K)"> get(K) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/util/LruCache.html#put(K, V)"> put(K, V) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/util/LruCache.html#remove(K)"> remove(K) </a> </code></pre> is unambiguous: the key was not in the cache. <p> This class appeared in Android 3.1 (Honeycomb MR1); it's available as part of <a href="http://developer.android.com/sdk/compatibility-library.html"> Android's Support Package </a> for earlier releases. </p>\n<pre><code>public class LruCache\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/LruCache.html
MalformedJsonException	A										<section class="prog__container"><p> Thrown when a reader encounters malformed JSON. Some syntax errors can be ignored by calling <pre><code> <a href="https://developer.android.com/reference/android/util/JsonReader.html#setLenient(boolean)"> setLenient(boolean) </a> </code></pre> .</p>\n<pre><code>public final class MalformedJsonException\n</code></pre></section>	https://developer.android.com/reference/android/util/MalformedJsonException.html
MonthDisplayHelper	A										<section class="prog__container"><p> Helps answer common questions that come up when displaying a month in a 6 row calendar grid format. Not thread safe.</p>\n<pre><code>public class MonthDisplayHelper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/MonthDisplayHelper.html
MutableBoolean	A										<section class="prog__container"><p></p>\n<pre><code>public final class MutableBoolean\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/MutableBoolean.html
MutableByte	A										<section class="prog__container"><p></p>\n<pre><code>public final class MutableByte\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/MutableByte.html
MutableChar	A										<section class="prog__container"><p></p>\n<pre><code>public final class MutableChar\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/MutableChar.html
MutableDouble	A										<section class="prog__container"><p></p>\n<pre><code>public final class MutableDouble\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/MutableDouble.html
MutableFloat	A										<section class="prog__container"><p></p>\n<pre><code>public final class MutableFloat\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/MutableFloat.html
MutableInt	A										<section class="prog__container"><p></p>\n<pre><code>public final class MutableInt\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/MutableInt.html
MutableLong	A										<section class="prog__container"><p></p>\n<pre><code>public final class MutableLong\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/MutableLong.html
MutableShort	A										<section class="prog__container"><p></p>\n<pre><code>public final class MutableShort\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/MutableShort.html
NoSuchPropertyException	A										<section class="prog__container"><p> Thrown when code requests a <pre><code> <a href="https://developer.android.com/reference/android/util/Property.html"> Property </a> </code></pre> on a class that does not expose the appropriate method or field.</p>\n<pre><code>public class NoSuchPropertyException\n</code></pre></section>	https://developer.android.com/reference/android/util/NoSuchPropertyException.html
android.util	A										<section class="prog__container">Various utilities for debugging and logging. </section>	https://developer.android.com/reference/android/util/package-summary.html
Pair	A										<section class="prog__container"><p> Container to ease passing around a tuple of two objects. This object provides a sensible implementation of equals(), returning true if equals() is true on each of the contained objects.</p>\n<pre><code>public class Pair\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/Pair.html
Patterns	A										<section class="prog__container"><p> Commonly used regular expression patterns.</p>\n<pre><code>public class Patterns\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/Patterns.html
Printer	A										<section class="prog__container"><p> Simple interface for printing text, allowing redirection to various targets. Standard implementations are <pre><code> <a href="https://developer.android.com/reference/android/util/LogPrinter.html"> LogPrinter </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/util/StringBuilderPrinter.html"> StringBuilderPrinter </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/util/PrintWriterPrinter.html"> PrintWriterPrinter </a> </code></pre> .</p>\n<pre><code>public interface Printer\n</code></pre></section>	https://developer.android.com/reference/android/util/Printer.html
PrintStreamPrinter	A										<section class="prog__container"><p> Implementation of a <pre><code> <a href="https://developer.android.com/reference/android/util/Printer.html"> Printer </a> </code></pre> that sends its output to a <pre><code> <a href="https://developer.android.com/reference/java/io/PrintStream.html"> PrintStream </a> </code></pre> .</p>\n<pre><code>public class PrintStreamPrinter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/PrintStreamPrinter.html
PrintWriterPrinter	A										<section class="prog__container"><p> Implementation of a <pre><code> <a href="https://developer.android.com/reference/android/util/Printer.html"> Printer </a> </code></pre> that sends its output to a <pre><code> <a href="https://developer.android.com/reference/java/io/PrintWriter.html"> PrintWriter </a> </code></pre> .</p>\n<pre><code>public class PrintWriterPrinter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/PrintWriterPrinter.html
Property	A										<section class="prog__container"><p> A property is an abstraction that can be used to represent a <emb> mutable </emb></p>\n<pre><code>public abstract class Property\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/Property.html
Range	A										<section class="prog__container"><p> Immutable class for describing the range of two numeric values. <p> A range (or "interval") defines the inclusive boundaries around a contiguous span of values of some <pre><code> <a href="https://developer.android.com/reference/java/lang/Comparable.html"> Comparable </a> </code></pre> type; for example, "integers from 1 to 100 inclusive." </p>\n<pre><code>public final class Range\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/Range.html
Rational	A										<section class="prog__container"><p> <p> An immutable data type representation a rational number. </p>\n<pre><code>public final class Rational\n</code></pre></section>	https://developer.android.com/reference/android/util/Rational.html
Size	A										<section class="prog__container"><p> Immutable class for describing width and height dimensions in pixels.</p>\n<pre><code>public final class Size\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/Size.html
SizeF	A										<section class="prog__container"><p> Immutable class for describing width and height dimensions in some arbitrary unit. <p> Width and height are finite values stored as a floating point representation. </p>\n<pre><code>public final class SizeF\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/SizeF.html
SparseArray	A										<section class="prog__container"><p> SparseArrays map integers to Objects. Unlike a normal array of Objects, there can be gaps in the indices. It is intended to be more memory efficient than using a HashMap to map Integers to Objects, both because it avoids auto-boxing keys and its data structure doesn't rely on an extra entry object for each mapping. <p> Note that this container keeps its mappings in an array data structure, using a binary search to find keys. The implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashMap, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. </p>\n<pre><code>public class SparseArray\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/SparseArray.html
SparseBooleanArray	A										<section class="prog__container"><p> SparseBooleanArrays map integers to booleans. Unlike a normal array of booleans there can be gaps in the indices. It is intended to be more memory efficient than using a HashMap to map Integers to Booleans, both because it avoids auto-boxing keys and values and its data structure doesn't rely on an extra entry object for each mapping. <p> Note that this container keeps its mappings in an array data structure, using a binary search to find keys. The implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashMap, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. </p>\n<pre><code>public class SparseBooleanArray\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/SparseBooleanArray.html
SparseIntArray	A										<section class="prog__container"><p> SparseIntArrays map integers to integers. Unlike a normal array of integers, there can be gaps in the indices. It is intended to be more memory efficient than using a HashMap to map Integers to Integers, both because it avoids auto-boxing keys and values and its data structure doesn't rely on an extra entry object for each mapping. <p> Note that this container keeps its mappings in an array data structure, using a binary search to find keys. The implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashMap, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. </p>\n<pre><code>public class SparseIntArray\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/SparseIntArray.html
SparseLongArray	A										<section class="prog__container"><p> SparseLongArrays map integers to longs. Unlike a normal array of longs, there can be gaps in the indices. It is intended to be more memory efficient than using a HashMap to map Integers to Longs, both because it avoids auto-boxing keys and values and its data structure doesn't rely on an extra entry object for each mapping. <p> Note that this container keeps its mappings in an array data structure, using a binary search to find keys. The implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashMap, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. </p>\n<pre><code>public class SparseLongArray\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/SparseLongArray.html
StateSet	A										<section class="prog__container"><p> State sets are arrays of positive ints where each element represents the state of a <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> (e.g. focused, selected, visible, etc.). A <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> may be in one or more of those states. A state spec is an array of signed ints where each element represents a required (if positive) or an undesired (if negative) <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> state. Utils dealing with state sets. In theory we could encapsulate the state set and state spec arrays and not have static methods here but there is some concern about performance since these methods are called during view drawing.</p>\n<pre><code>public class StateSet\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/StateSet.html
StringBuilderPrinter	A										<section class="prog__container"><p> Implementation of a <pre><code> <a href="https://developer.android.com/reference/android/util/Printer.html"> Printer </a> </code></pre> that sends its output to a <pre><code> <a href="https://developer.android.com/reference/java/lang/StringBuilder.html"> StringBuilder </a> </code></pre> .</p>\n<pre><code>public class StringBuilderPrinter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/StringBuilderPrinter.html
TimeFormatException	A										<section class="prog__container"><p> Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</p>\n<pre><code>public class TimeFormatException\n</code></pre></section>	https://developer.android.com/reference/android/util/TimeFormatException.html
TimeUtils	A										<section class="prog__container"><p> A class containing utility methods related to time zones.</p>\n<pre><code>public class TimeUtils\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/TimeUtils.html
TimingLogger	A										<section class="prog__container"><p> A utility class to help log timings splits throughout a method call. Typical usage is: <pre> TimingLogger timings = new TimingLogger(TAG, "methodA"); // ... do some work A ... timings.addSplit("work A"); // ... do some work B ... timings.addSplit("work B"); // ... do some work C ... timings.addSplit("work C"); timings.dumpToLog(); </pre> <p> The dumpToLog call would add the following to the log: </p>\n<pre><code>public class TimingLogger\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/TimingLogger.html
TypedValue	A										<section class="prog__container"><p> Container for a dynamically typed data value. Primarily used with <pre><code> <a href="https://developer.android.com/reference/android/content/res/Resources.html"> Resources </a> </code></pre> for holding resource values.</p>\n<pre><code>public class TypedValue\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/TypedValue.html
Xml.Encoding	A										<section class="prog__container"><p> Supported character encodings.</p>\n<pre><code>public static final enum Xml.Encoding\n</code></pre></section>	https://developer.android.com/reference/android/util/Xml.Encoding.html
Xml	A										<section class="prog__container"><p> XML utility methods.</p>\n<pre><code>public class Xml\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/util/Xml.html
AbsSavedState	A										<section class="prog__container"><p> A <pre><code> <a href="https://developer.android.com/reference/android/os/Parcelable.html"> Parcelable </a> </code></pre> implementation that should be used by inheritance hierarchies to ensure the state of all classes along the chain is saved.</p>\n<pre><code>public abstract class AbsSavedState\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/AbsSavedState.html
ActionMode.Callback	A										<section class="prog__container"><p> Callback interface for action modes. Supplied to <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#startActionMode(android.view.ActionMode.Callback)"> startActionMode(Callback) </a> </code></pre> , a Callback configures and handles events raised by a user's interaction with an action mode. <p> An action mode's lifecycle is as follows: <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/view/ActionMode.Callback.html#onCreateActionMode(android.view.ActionMode, android.view.Menu)"> onCreateActionMode(ActionMode, Menu) </a> </code></pre> once on initial creation </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/view/ActionMode.Callback.html#onPrepareActionMode(android.view.ActionMode, android.view.Menu)"> onPrepareActionMode(ActionMode, Menu) </a> </code></pre> after creation and any time the <pre><code> <a href="https://developer.android.com/reference/android/view/ActionMode.html"> ActionMode </a> </code></pre> is invalidated </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/view/ActionMode.Callback.html#onActionItemClicked(android.view.ActionMode, android.view.MenuItem)"> onActionItemClicked(ActionMode, MenuItem) </a> </code></pre> any time a contextual action button is clicked </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/view/ActionMode.Callback.html#onDestroyActionMode(android.view.ActionMode)"> onDestroyActionMode(ActionMode) </a> </code></pre> when the action mode is closed </li> </ul> </p>\n<pre><code>public static interface ActionMode.Callback\n</code></pre></section>	https://developer.android.com/reference/android/view/ActionMode.Callback.html
ActionMode.Callback2	A										<section class="prog__container"><p> Extension of <pre><code> <a href="https://developer.android.com/reference/android/view/ActionMode.Callback.html"> ActionMode.Callback </a> </code></pre> to provide content rect information. This is required for ActionModes with dynamic positioning such as the ones with type <pre><code> <a href="https://developer.android.com/reference/android/view/ActionMode.html#TYPE_FLOATING"> TYPE_FLOATING </a> </code></pre> to ensure the positioning doesn't obscure app content. If an app fails to provide a subclass of this class, a default implementation will be used.</p>\n<pre><code>public static abstract class ActionMode.Callback2\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/ActionMode.Callback2.html
ActionMode	A										<section class="prog__container"><p> Represents a contextual mode of the user interface. Action modes can be used to provide alternative interaction modes and replace parts of the normal UI until finished. Examples of good action modes include text selection and contextual actions. </p>\n<pre><code>public abstract class ActionMode\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/ActionMode.html
ActionProvider	A										<section class="prog__container"><p> An ActionProvider defines rich menu interaction in a single component. ActionProvider can generate action views for use in the action bar, dynamically populate submenus of a MenuItem, and handle default menu item invocations. <p> An ActionProvider can be optionally specified for a <pre><code> <a href="https://developer.android.com/reference/android/view/MenuItem.html"> MenuItem </a> </code></pre> and will be responsible for creating the action view that appears in the <pre><code> <a href="https://developer.android.com/reference/android/app/ActionBar.html"> ActionBar </a> </code></pre> in place of a simple button in the bar. When the menu item is presented in a way that does not allow custom action views, (e.g. in an overflow menu,) the ActionProvider can perform a default action. </p>\n<pre><code>public abstract class ActionProvider\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/ActionProvider.html
ActionProvider.VisibilityListener	A										<section class="prog__container"><p> Listens to changes in visibility as reported by <pre><code> <a href="https://developer.android.com/reference/android/view/ActionProvider.html#refreshVisibility()"> refreshVisibility() </a> </code></pre> .</p>\n<pre><code>public static interface ActionProvider.VisibilityListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ActionProvider.VisibilityListener.html
Choreographer.FrameCallback	A										<section class="prog__container"><p> Implement this interface to receive a callback when a new display frame is being rendered. The callback is invoked on the <pre><code> <a href="https://developer.android.com/reference/android/os/Looper.html"> Looper </a> </code></pre> thread to which the <pre><code> <a href="https://developer.android.com/reference/android/view/Choreographer.html"> Choreographer </a> </code></pre> is attached.</p>\n<pre><code>public static interface Choreographer.FrameCallback\n</code></pre></section>	https://developer.android.com/reference/android/view/Choreographer.FrameCallback.html
Choreographer	A										<section class="prog__container"><p> Coordinates the timing of animations, input and drawing. <p> The choreographer receives timing pulses (such as vertical synchronization) from the display subsystem then schedules work to occur as part of rendering the next display frame. </p>\n<pre><code>public final class Choreographer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/Choreographer.html
CollapsibleActionView	A										<section class="prog__container"><p> When a <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> implements this interface it will receive callbacks when expanded or collapsed as an action view alongside the optional, app-specified callbacks to <pre><code> <a href="https://developer.android.com/reference/android/view/MenuItem.OnActionExpandListener.html"> MenuItem.OnActionExpandListener </a> </code></pre> . <p> See <pre><code> <a href="https://developer.android.com/reference/android/view/MenuItem.html"> MenuItem </a> </code></pre> for more information about action views. See <pre><code> <a href="https://developer.android.com/reference/android/app/ActionBar.html"> ActionBar </a> </code></pre> for more information about the action bar. </p>\n<pre><code>public interface CollapsibleActionView\n</code></pre></section>	https://developer.android.com/reference/android/view/CollapsibleActionView.html
ContextMenu.ContextMenuInfo	A										<section class="prog__container"><p> Additional information regarding the creation of the context menu. For example, <pre><code> <a href="https://developer.android.com/reference/android/widget/AdapterView.html"> AdapterView </a> </code></pre> s use this to pass the exact item position within the adapter that initiated the context menu.</p>\n<pre><code>public static interface ContextMenu.ContextMenuInfo\n</code></pre></section>	https://developer.android.com/reference/android/view/ContextMenu.ContextMenuInfo.html
ContextMenu	A										<section class="prog__container"><p> Extension of <pre><code> <a href="https://developer.android.com/reference/android/view/Menu.html"> Menu </a> </code></pre> for context menus providing functionality to modify the header of the context menu. <p> Context menus do not support item shortcuts and item icons. <p> To show a context menu on long click, most clients will want to call <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#registerForContextMenu(android.view.View)"> registerForContextMenu(View) </a> </code></pre> and override <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#onCreateContextMenu(android.view.ContextMenu, android.view.View, android.view.ContextMenu.ContextMenuInfo)"> onCreateContextMenu(ContextMenu, View, ContextMenu.ContextMenuInfo) </a> </code></pre> . </p>\n<pre><code>public interface ContextMenu\nimplements <a href="https://developer.android.com/reference/android/view/Menu.html">Menu</a></code></pre></section>	https://developer.android.com/reference/android/view/ContextMenu.html
ContextThemeWrapper	A										<section class="prog__container"><p> A context wrapper that allows you to modify or replace the theme of the wrapped context.</p>\n<pre><code>public class ContextThemeWrapper\n</code></pre></section>	https://developer.android.com/reference/android/view/ContextThemeWrapper.html
Display.HdrCapabilities	A										<section class="prog__container"><p> Encapsulates the HDR capabilities of a given display. For example, what HDR types it supports and details about the desired luminance data. <p> You can get an instance for a given <pre><code> <a href="https://developer.android.com/reference/android/view/Display.html"> Display </a> </code></pre> object with <pre><code> <a href="https://developer.android.com/reference/android/view/Display.html#getHdrCapabilities()"> getHdrCapabilities() </a> </code></pre> . </p>\n<pre><code>public static final class Display.HdrCapabilities\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/Display.HdrCapabilities.html
Display	A										<section class="prog__container"><p> Provides information about the size and density of a logical display. <p> The display area is described in two different ways. <ul> <li> The application display area specifies the part of the display that may contain an application window, excluding the system decorations. The application display area may be smaller than the real display area because the system subtracts the space needed for decor elements such as the status bar. Use the following methods to query the application display area: <pre><code> <a href="https://developer.android.com/reference/android/view/Display.html#getSize(android.graphics.Point)"> getSize(Point) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/view/Display.html#getRectSize(android.graphics.Rect)"> getRectSize(Rect) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/view/Display.html#getMetrics(android.util.DisplayMetrics)"> getMetrics(DisplayMetrics) </a> </code></pre> . </li> <li> The real display area specifies the part of the display that contains content including the system decorations. Even so, the real display area may be smaller than the physical size of the display if the window manager is emulating a smaller display using (adb shell am display-size). Use the following methods to query the real display area: <pre><code> <a href="https://developer.android.com/reference/android/view/Display.html#getRealSize(android.graphics.Point)"> getRealSize(Point) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/view/Display.html#getRealMetrics(android.util.DisplayMetrics)"> getRealMetrics(DisplayMetrics) </a> </code></pre> . </li> </ul> </p>\n<pre><code>public final class Display\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/Display.html
Display.Mode	A										<section class="prog__container"><p> A mode supported by a given display.</p>\n<pre><code>public static final class Display.Mode\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/Display.Mode.html
DragAndDropPermissions	A										<section class="prog__container"><p> <pre><code> <a href="https://developer.android.com/reference/android/view/DragAndDropPermissions.html"> DragAndDropPermissions </a> </code></pre> controls the access permissions for the content URIs associated with a <pre><code> <a href="https://developer.android.com/reference/android/view/DragEvent.html"> DragEvent </a> </code></pre> . <p> Permission are granted when this object is created by <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#requestDragAndDropPermissions(android.view.DragEvent)"> Activity.requestDragAndDropPermissions </a> </code></pre> . Which permissions are granted is defined by the set of flags passed to <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#startDragAndDrop(android.content.ClipData, android.view.View.DragShadowBuilder, java.lang.Object, int)"> View.startDragAndDrop </a> </code></pre> by the app that started the drag operation. </p>\n<pre><code>public final class DragAndDropPermissions\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/DragAndDropPermissions.html
DragEvent	A										<section class="prog__container"><p> Represents an event that is sent out by the system at various times during a drag and drop operation. It is a complex data structure that contains several important pieces of data about the operation and the underlying data. <p> View objects that receive a DragEvent call <pre><code> <a href="https://developer.android.com/reference/android/view/DragEvent.html#getAction()"> getAction() </a> </code></pre> , which returns an action type that indicates the state of the drag and drop operation. This allows a View object to react to a change in state by changing its appearance or performing other actions. For example, a View can react to the <pre><code> <a href="https://developer.android.com/reference/android/view/DragEvent.html#ACTION_DRAG_ENTERED"> ACTION_DRAG_ENTERED </a> </code></pre> action type by by changing one or more colors in its displayed image. </p>\n<pre><code>public class DragEvent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/DragEvent.html
FocusFinder	A										<section class="prog__container"><p> The algorithm used for finding the next focusable view in a given direction from a view that currently has focus.</p>\n<pre><code>public class FocusFinder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/FocusFinder.html
FrameMetrics	A										<section class="prog__container"><p> Class containing timing data for various milestones in a frame lifecycle reported by the rendering subsystem. <p> Supported metrics can be queried via their corresponding identifier. </p>\n<pre><code>public final class FrameMetrics\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/FrameMetrics.html
FrameStats	A										<section class="prog__container"><p> This is the base class for frame statistics.</p>\n<pre><code>public abstract class FrameStats\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/FrameStats.html
GestureDetector	A										<section class="prog__container"><p> Detects various gestures and events using the supplied <pre><code> <a href="https://developer.android.com/reference/android/view/MotionEvent.html"> MotionEvent </a> </code></pre> s. The <pre><code> <a href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html"> GestureDetector.OnGestureListener </a> </code></pre> callback will notify users when a particular motion event has occurred. This class should only be used with <pre><code> <a href="https://developer.android.com/reference/android/view/MotionEvent.html"> MotionEvent </a> </code></pre> s reported via touch (don't use for trackball events). To use this class: <ul> <li> Create an instance of the <pre><code> GestureDetector </code></pre> for your <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> <li> In the <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#onTouchEvent(android.view.MotionEvent)"> onTouchEvent(MotionEvent) </a> </code></pre> method ensure you call <pre><code> <a href="https://developer.android.com/reference/android/view/GestureDetector.html#onTouchEvent(android.view.MotionEvent)"> onTouchEvent(MotionEvent) </a> </code></pre> . The methods defined in your callback will be executed when the events occur. <li> If listening for <pre><code> <a href="https://developer.android.com/reference/android/view/GestureDetector.OnContextClickListener.html#onContextClick(android.view.MotionEvent)"> onContextClick(MotionEvent) </a> </code></pre> you must call <pre><code> <a href="https://developer.android.com/reference/android/view/GestureDetector.html#onGenericMotionEvent(android.view.MotionEvent)"> onGenericMotionEvent(MotionEvent) </a> </code></pre> in <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#onGenericMotionEvent(android.view.MotionEvent)"> onGenericMotionEvent(MotionEvent) </a> </code></pre> . </li> </li> </li> </ul></p>\n<pre><code>public class GestureDetector\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/GestureDetector.html
GestureDetector.OnContextClickListener	A										<section class="prog__container"><p> The listener that is used to notify when a context click occurs. When listening for a context click ensure that you call <pre><code> <a href="https://developer.android.com/reference/android/view/GestureDetector.html#onGenericMotionEvent(android.view.MotionEvent)"> onGenericMotionEvent(MotionEvent) </a> </code></pre> in <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#onGenericMotionEvent(android.view.MotionEvent)"> onGenericMotionEvent(MotionEvent) </a> </code></pre> .</p>\n<pre><code>public static interface GestureDetector.OnContextClickListener\n</code></pre></section>	https://developer.android.com/reference/android/view/GestureDetector.OnContextClickListener.html
GestureDetector.OnDoubleTapListener	A										<section class="prog__container"><p> The listener that is used to notify when a double-tap or a confirmed single-tap occur.</p>\n<pre><code>public static interface GestureDetector.OnDoubleTapListener\n</code></pre></section>	https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html
GestureDetector.OnGestureListener	A										<section class="prog__container"><p> The listener that is used to notify when gestures occur. If you want to listen for all the different gestures then implement this interface. If you only want to listen for a subset it might be easier to extend <pre><code> <a href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html"> GestureDetector.SimpleOnGestureListener </a> </code></pre> .</p>\n<pre><code>public static interface GestureDetector.OnGestureListener\n</code></pre></section>	https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html
GestureDetector.SimpleOnGestureListener	A										<section class="prog__container"><p> A convenience class to extend when you only want to listen for a subset of all the gestures. This implements all methods in the <pre><code> <a href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html"> GestureDetector.OnGestureListener </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html"> GestureDetector.OnDoubleTapListener </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/view/GestureDetector.OnContextClickListener.html"> GestureDetector.OnContextClickListener </a> </code></pre> but does nothing and return <pre><code> false </code></pre> for all applicable methods.</p>\n<pre><code>public static class GestureDetector.SimpleOnGestureListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html
Gravity	A										<section class="prog__container"><p> Standard constants and tools for placing an object within a potentially larger container.</p>\n<pre><code>public class Gravity\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/Gravity.html
HapticFeedbackConstants	A										<section class="prog__container"><p> Constants to be used to perform haptic feedback effects via <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#performHapticFeedback(int)"> performHapticFeedback(int) </a> </code></pre></p>\n<pre><code>public class HapticFeedbackConstants\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/HapticFeedbackConstants.html
InflateException	A										<section class="prog__container"><p> This exception is thrown by an inflater on error conditions.</p>\n<pre><code>public class InflateException\n</code></pre></section>	https://developer.android.com/reference/android/view/InflateException.html
InputDevice	A										<section class="prog__container"><p> Describes the capabilities of a particular input device. <p> Each input device may support multiple classes of input. For example, a multi-function keyboard may compose the capabilities of a standard keyboard together with a track pad mouse or other pointing device. </p>\n<pre><code>public final class InputDevice\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/InputDevice.html
InputDevice.MotionRange	A										<section class="prog__container"><p> Provides information about the range of values for a particular <pre><code> <a href="https://developer.android.com/reference/android/view/MotionEvent.html"> MotionEvent </a> </code></pre> axis.</p>\n<pre><code>public static final class InputDevice.MotionRange\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/InputDevice.MotionRange.html
InputEvent	A										<section class="prog__container"><p> Common base class for input events.</p>\n<pre><code>public abstract class InputEvent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/InputEvent.html
InputQueue.Callback	A										<section class="prog__container"><p> Interface to receive notification of when an InputQueue is associated and dissociated with a thread.</p>\n<pre><code>public static interface InputQueue.Callback\n</code></pre></section>	https://developer.android.com/reference/android/view/InputQueue.Callback.html
InputQueue	A										<section class="prog__container"><p> An input queue provides a mechanism for an application to receive incoming input events. Currently only usable from native code.</p>\n<pre><code>public final class InputQueue\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/InputQueue.html
KeyboardShortcutGroup	A										<section class="prog__container"><p> A group of <pre><code> <a href="https://developer.android.com/reference/android/view/KeyboardShortcutInfo.html"> KeyboardShortcutInfo </a> </code></pre> .</p>\n<pre><code>public final class KeyboardShortcutGroup\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/KeyboardShortcutGroup.html
KeyboardShortcutInfo	A										<section class="prog__container"><p> Information about a Keyboard Shortcut.</p>\n<pre><code>public final class KeyboardShortcutInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/KeyboardShortcutInfo.html
KeyCharacterMap	A										<section class="prog__container"><p> Describes the keys provided by a keyboard device and their associated labels.</p>\n<pre><code>public class KeyCharacterMap\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/KeyCharacterMap.html
KeyCharacterMap.KeyData	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 11. </strong> <br/> instead use <pre><code> <a href="https://developer.android.com/reference/android/view/KeyCharacterMap.html#getDisplayLabel(int)"> getDisplayLabel(int) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/view/KeyCharacterMap.html#getNumber(int)"> getNumber(int) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/view/KeyCharacterMap.html#get(int, int)"> get(int, int) </a> </code></pre> . </p>\n<pre><code>public static class KeyCharacterMap.KeyData\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/KeyCharacterMap.KeyData.html
KeyCharacterMap.UnavailableException	A										<section class="prog__container"><p> Thrown by <pre><code> <a href="https://developer.android.com/reference/android/view/KeyCharacterMap.html#load(int)"> load(int) </a> </code></pre> when a key character map could not be loaded.</p>\n<pre><code>public static class KeyCharacterMap.UnavailableException\n</code></pre></section>	https://developer.android.com/reference/android/view/KeyCharacterMap.UnavailableException.html
KeyEvent.Callback	A										<section class="prog__container"><p> Called when a key down event has occurred.</p>\n<pre><code>public static interface KeyEvent.Callback\n</code></pre></section>	https://developer.android.com/reference/android/view/KeyEvent.Callback.html
KeyEvent.DispatcherState	A										<section class="prog__container"><p> Use with <pre><code> <a href="https://developer.android.com/reference/android/view/KeyEvent.html#dispatch(android.view.KeyEvent.Callback, android.view.KeyEvent.DispatcherState, java.lang.Object)"> dispatch(Callback, DispatcherState, Object) </a> </code></pre> for more advanced key dispatching, such as long presses.</p>\n<pre><code>public static class KeyEvent.DispatcherState\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/KeyEvent.DispatcherState.html
KeyEvent	A										<section class="prog__container"><p> Object used to report key and button events. <p> Each key press is described by a sequence of key events. A key press starts with a key event with <pre><code> <a href="https://developer.android.com/reference/android/view/KeyEvent.html#ACTION_DOWN"> ACTION_DOWN </a> </code></pre> . If the key is held sufficiently long that it repeats, then the initial down is followed additional key events with <pre><code> <a href="https://developer.android.com/reference/android/view/KeyEvent.html#ACTION_DOWN"> ACTION_DOWN </a> </code></pre> and a non-zero value for <pre><code> <a href="https://developer.android.com/reference/android/view/KeyEvent.html#getRepeatCount()"> getRepeatCount() </a> </code></pre> . The last key event is a <pre><code> <a href="https://developer.android.com/reference/android/view/KeyEvent.html#ACTION_UP"> ACTION_UP </a> </code></pre> for the key up. If the key press is canceled, the key up event will have the <pre><code> <a href="https://developer.android.com/reference/android/view/KeyEvent.html#FLAG_CANCELED"> FLAG_CANCELED </a> </code></pre> flag set. </p>\n<pre><code>public class KeyEvent\n</code></pre></section>	https://developer.android.com/reference/android/view/KeyEvent.html
LayoutInflater.Factory	A										<section class="prog__container"><p> Hook you can supply that is called when inflating from a LayoutInflater.</p>\n<pre><code>public static interface LayoutInflater.Factory\n</code></pre></section>	https://developer.android.com/reference/android/view/LayoutInflater.Factory.html
LayoutInflater.Factory2	A										<section class="prog__container"><p> Version of <pre><code> <a href="https://developer.android.com/reference/android/view/LayoutInflater.Factory.html#onCreateView(java.lang.String, android.content.Context, android.util.AttributeSet)"> onCreateView(String, Context, AttributeSet) </a> </code></pre> that also supplies the parent that the view created view will be placed in.</p>\n<pre><code>public static interface LayoutInflater.Factory2\nimplements <a href="https://developer.android.com/reference/android/view/LayoutInflater.Factory.html">LayoutInflater.Factory</a></code></pre></section>	https://developer.android.com/reference/android/view/LayoutInflater.Factory2.html
LayoutInflater.Filter	A										<section class="prog__container"><p> Hook to allow clients of the LayoutInflater to restrict the set of Views that are allowed to be inflated.</p>\n<pre><code>public static interface LayoutInflater.Filter\n</code></pre></section>	https://developer.android.com/reference/android/view/LayoutInflater.Filter.html
LayoutInflater	A										<section class="prog__container"><p> Instantiates a layout XML file into its corresponding <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> objects. It is never used directly. Instead, use <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#getLayoutInflater()"> getLayoutInflater() </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.Class&lt;T&gt;)"> getSystemService(Class <t> ) </t> </a> </code></pre> to retrieve a standard LayoutInflater instance that is already hooked up to the current context and correctly configured for the device you are running on. For example: <pre>LayoutInflater inflater = (LayoutInflater)context.getSystemService (Context.LAYOUT_INFLATER_SERVICE);</pre> <p> To create a new LayoutInflater with an additional <pre><code> <a href="https://developer.android.com/reference/android/view/LayoutInflater.Factory.html"> LayoutInflater.Factory </a> </code></pre> for your own views, you can use <pre><code> <a href="https://developer.android.com/reference/android/view/LayoutInflater.html#cloneInContext(android.content.Context)"> cloneInContext(Context) </a> </code></pre> to clone an existing ViewFactory, and then call <pre><code> <a href="https://developer.android.com/reference/android/view/LayoutInflater.html#setFactory(android.view.LayoutInflater.Factory)"> setFactory(LayoutInflater.Factory) </a> </code></pre> on it to include your Factory. <p> For performance reasons, view inflation relies heavily on pre-processing of XML files that is done at build time. Therefore, it is not currently possible to use LayoutInflater with an XmlPullParser over a plain XML file at runtime; it only works with an XmlPullParser returned from a compiled resource (R. <em> something </em> file.) </p>\n<pre><code>public abstract class LayoutInflater\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/LayoutInflater.html
Menu	A										<section class="prog__container"><p> Interface for managing the items in a menu. <p> By default, every Activity supports an options menu of actions or options. You can add items to this menu and handle clicks on your additions. The easiest way of adding menu items is inflating an XML file into the <pre><code> <a href="https://developer.android.com/reference/android/view/Menu.html"> Menu </a> </code></pre> via <pre><code> <a href="https://developer.android.com/reference/android/view/MenuInflater.html"> MenuInflater </a> </code></pre> . The easiest way of attaching code to clicks is via <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#onOptionsItemSelected(android.view.MenuItem)"> onOptionsItemSelected(MenuItem) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#onContextItemSelected(android.view.MenuItem)"> onContextItemSelected(MenuItem) </a> </code></pre> . <p> Different menu types support different features: <ol> <li> <b> Context menus </b> : Do not support item shortcuts and item icons. <li> <b> Options menus </b> : The <b> icon menus </b> do not support item check marks and only show the item's <pre><code> <a href="https://developer.android.com/reference/android/view/MenuItem.html#setTitleCondensed(java.lang.CharSequence)"> condensed title </a> </code></pre> . The <b> expanded menus </b> (only available if six or more menu items are visible, reached via the 'More' item in the icon menu) do not show item icons, and item check marks are discouraged. <li> <b> Sub menus </b> : Do not support item icons, or nested sub menus. </li> </li> </li> </ol> </p>\n<pre><code>public interface Menu\n</code></pre></section>	https://developer.android.com/reference/android/view/Menu.html
MenuInflater	A										<section class="prog__container"><p> This class is used to instantiate menu XML files into Menu objects. <p> For performance reasons, menu inflation relies heavily on pre-processing of XML files that is done at build time. Therefore, it is not currently possible to use MenuInflater with an XmlPullParser over a plain XML file at runtime; it only works with an XmlPullParser returned from a compiled resource (R. <em> something </em> file.) </p>\n<pre><code>public class MenuInflater\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/MenuInflater.html
MenuItem	A										<section class="prog__container"><p> Interface for direct access to a previously created menu item. <p> An Item is returned by calling one of the <pre><code> <a href="https://developer.android.com/reference/android/view/Menu.html#add(int)"> add(int) </a> </code></pre> methods. <p> For a feature set of specific menu types, see <pre><code> <a href="https://developer.android.com/reference/android/view/Menu.html"> Menu </a> </code></pre> . </p>\n<pre><code>public interface MenuItem\n</code></pre></section>	https://developer.android.com/reference/android/view/MenuItem.html
MenuItem.OnActionExpandListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a menu item marked with <pre><code> <a href="https://developer.android.com/reference/android/view/MenuItem.html#SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW"> SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW </a> </code></pre> is expanded or collapsed.</p>\n<pre><code>public static interface MenuItem.OnActionExpandListener\n</code></pre></section>	https://developer.android.com/reference/android/view/MenuItem.OnActionExpandListener.html
MenuItem.OnMenuItemClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a menu item is clicked.</p>\n<pre><code>public static interface MenuItem.OnMenuItemClickListener\n</code></pre></section>	https://developer.android.com/reference/android/view/MenuItem.OnMenuItemClickListener.html
MotionEvent	A										<section class="prog__container"><p> Object used to report movement (mouse, pen, finger, trackball) events. Motion events may hold either absolute or relative movements and other data, depending on the type of device. </p>\n<pre><code>public final class MotionEvent\n</code></pre></section>	https://developer.android.com/reference/android/view/MotionEvent.html
MotionEvent.PointerCoords	A										<section class="prog__container"><p> Transfer object for pointer coordinates. Objects of this type can be used to specify the pointer coordinates when creating new <pre><code> <a href="https://developer.android.com/reference/android/view/MotionEvent.html"> MotionEvent </a> </code></pre> objects and to query pointer coordinates in bulk. Refer to <pre><code> <a href="https://developer.android.com/reference/android/view/InputDevice.html"> InputDevice </a> </code></pre> for information about how different kinds of input devices and sources represent pointer coordinates.</p>\n<pre><code>public static final class MotionEvent.PointerCoords\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/MotionEvent.PointerCoords.html
MotionEvent.PointerProperties	A										<section class="prog__container"><p> Transfer object for pointer properties. Objects of this type can be used to specify the pointer id and tool type when creating new <pre><code> <a href="https://developer.android.com/reference/android/view/MotionEvent.html"> MotionEvent </a> </code></pre> objects and to query pointer properties in bulk.</p>\n<pre><code>public static final class MotionEvent.PointerProperties\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/MotionEvent.PointerProperties.html
OrientationEventListener	A										<section class="prog__container"><p> Helper class for receiving notifications from the SensorManager when the orientation of the device has changed.</p>\n<pre><code>public abstract class OrientationEventListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/OrientationEventListener.html
OrientationListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 3. </strong> <br/> use <pre><code> <a href="https://developer.android.com/reference/android/view/OrientationEventListener.html"> OrientationEventListener </a> </code></pre> instead. This class internally uses the OrientationEventListener. </p>\n<pre><code>public abstract class OrientationListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/OrientationListener.html
android.view	A										<section class="prog__container">A TextureView can be used to display a content stream. </section>	https://developer.android.com/reference/android/view/package-summary.html
PixelCopy	A										<section class="prog__container"><p> Provides a mechanisms to issue pixel copy requests to allow for copy operations from <pre><code> <a href="https://developer.android.com/reference/android/view/Surface.html"> Surface </a> </code></pre> to <pre><code> <a href="https://developer.android.com/reference/android/graphics/Bitmap.html"> Bitmap </a> </code></pre></p>\n<pre><code>public final class PixelCopy\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/PixelCopy.html
PixelCopy.OnPixelCopyFinishedListener	A										<section class="prog__container"><p> Listener for observing the completion of a PixelCopy request.</p>\n<pre><code>public static interface PixelCopy.OnPixelCopyFinishedListener\n</code></pre></section>	https://developer.android.com/reference/android/view/PixelCopy.OnPixelCopyFinishedListener.html
PointerIcon	A										<section class="prog__container"><p> Represents an icon that can be used as a mouse pointer. <p> Pointer icons can be provided either by the system using system types, or by applications using bitmaps or application resources. </p>\n<pre><code>public final class PointerIcon\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/PointerIcon.html
ScaleGestureDetector	A										<section class="prog__container"><p> Detects scaling transformation gestures using the supplied <pre><code> <a href="https://developer.android.com/reference/android/view/MotionEvent.html"> MotionEvent </a> </code></pre> s. The <pre><code> <a href="https://developer.android.com/reference/android/view/ScaleGestureDetector.OnScaleGestureListener.html"> ScaleGestureDetector.OnScaleGestureListener </a> </code></pre> callback will notify users when a particular gesture event has occurred. This class should only be used with <pre><code> <a href="https://developer.android.com/reference/android/view/MotionEvent.html"> MotionEvent </a> </code></pre> s reported via touch. To use this class: <ul> <li> Create an instance of the <pre><code> ScaleGestureDetector </code></pre> for your <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> <li> In the <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#onTouchEvent(android.view.MotionEvent)"> onTouchEvent(MotionEvent) </a> </code></pre> method ensure you call <pre><code> <a href="https://developer.android.com/reference/android/view/ScaleGestureDetector.html#onTouchEvent(android.view.MotionEvent)"> onTouchEvent(MotionEvent) </a> </code></pre> . The methods defined in your callback will be executed when the events occur. </li> </li> </ul></p>\n<pre><code>public class ScaleGestureDetector\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/ScaleGestureDetector.html
ScaleGestureDetector.OnScaleGestureListener	A										<section class="prog__container"><p> The listener for receiving notifications when gestures occur. If you want to listen for all the different gestures then implement this interface. If you only want to listen for a subset it might be easier to extend <pre><code> <a href="https://developer.android.com/reference/android/view/ScaleGestureDetector.SimpleOnScaleGestureListener.html"> ScaleGestureDetector.SimpleOnScaleGestureListener </a> </code></pre> . An application will receive events in the following order: <ul> <li> One <pre><code> <a href="https://developer.android.com/reference/android/view/ScaleGestureDetector.OnScaleGestureListener.html#onScaleBegin(android.view.ScaleGestureDetector)"> onScaleBegin(ScaleGestureDetector) </a> </code></pre> <li> Zero or more <pre><code> <a href="https://developer.android.com/reference/android/view/ScaleGestureDetector.OnScaleGestureListener.html#onScale(android.view.ScaleGestureDetector)"> onScale(ScaleGestureDetector) </a> </code></pre> <li> One <pre><code> <a href="https://developer.android.com/reference/android/view/ScaleGestureDetector.OnScaleGestureListener.html#onScaleEnd(android.view.ScaleGestureDetector)"> onScaleEnd(ScaleGestureDetector) </a> </code></pre> </li> </li> </li> </ul></p>\n<pre><code>public static interface ScaleGestureDetector.OnScaleGestureListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ScaleGestureDetector.OnScaleGestureListener.html
ScaleGestureDetector.SimpleOnScaleGestureListener	A										<section class="prog__container"><p> A convenience class to extend when you only want to listen for a subset of scaling-related events. This implements all methods in <pre><code> <a href="https://developer.android.com/reference/android/view/ScaleGestureDetector.OnScaleGestureListener.html"> ScaleGestureDetector.OnScaleGestureListener </a> </code></pre> but does nothing. <pre><code> <a href="https://developer.android.com/reference/android/view/ScaleGestureDetector.OnScaleGestureListener.html#onScale(android.view.ScaleGestureDetector)"> onScale(ScaleGestureDetector) </a> </code></pre> returns <pre><code> false </code></pre> so that a subclass can retrieve the accumulated scale factor in an overridden onScaleEnd. <pre><code> <a href="https://developer.android.com/reference/android/view/ScaleGestureDetector.OnScaleGestureListener.html#onScaleBegin(android.view.ScaleGestureDetector)"> onScaleBegin(ScaleGestureDetector) </a> </code></pre> returns <pre><code> true </code></pre> .</p>\n<pre><code>public static class ScaleGestureDetector.SimpleOnScaleGestureListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/ScaleGestureDetector.SimpleOnScaleGestureListener.html
SearchEvent	A										<section class="prog__container"><p> Class that contains information about an event that triggers a search.</p>\n<pre><code>public class SearchEvent\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/SearchEvent.html
SoundEffectConstants	A										<section class="prog__container"><p> Constants to be used to play sound effects via <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#playSoundEffect(int)"> playSoundEffect(int) </a> </code></pre></p>\n<pre><code>public class SoundEffectConstants\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/SoundEffectConstants.html
SubMenu	A										<section class="prog__container"><p> Subclass of <pre><code> <a href="https://developer.android.com/reference/android/view/Menu.html"> Menu </a> </code></pre> for sub menus. <p> Sub menus do not support item icons, or nested sub menus. </p>\n<pre><code>public interface SubMenu\nimplements <a href="https://developer.android.com/reference/android/view/Menu.html">Menu</a></code></pre></section>	https://developer.android.com/reference/android/view/SubMenu.html
Surface	A										<section class="prog__container"><p> Handle onto a raw buffer that is being managed by the screen compositor. <p> A Surface is generally created by or from a consumer of image buffers (such as a <pre><code> <a href="https://developer.android.com/reference/android/graphics/SurfaceTexture.html"> SurfaceTexture </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/MediaRecorder.html"> MediaRecorder </a> </code></pre> , or <pre><code> <a href="https://developer.android.com/reference/android/renderscript/Allocation.html"> Allocation </a> </code></pre> ), and is handed to some kind of producer (such as <pre><code> <a href="https://developer.android.com/reference/android/opengl/EGL14.html#eglCreateWindowSurface(android.opengl.EGLDisplay, android.opengl.EGLConfig, java.lang.Object, int[], int)"> OpenGL </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/media/MediaPlayer.html#setSurface(android.view.Surface)"> MediaPlayer </a> </code></pre> , or <pre><code> <a href="https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#createCaptureSession(java.util.List&lt;android.view.Surface&gt;, android.hardware.camera2.CameraCaptureSession.StateCallback, android.os.Handler)"> CameraDevice </a> </code></pre> ) to draw into. </p>\n<pre><code>public class Surface\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/Surface.html
Surface.OutOfResourcesException	A										<section class="prog__container"><p> Exception thrown when a Canvas couldn't be locked with <pre><code> <a href="https://developer.android.com/reference/android/view/Surface.html#lockCanvas(android.graphics.Rect)"> lockCanvas(Rect) </a> </code></pre> , or when a SurfaceTexture could not successfully be allocated.</p>\n<pre><code>public static class Surface.OutOfResourcesException\n</code></pre></section>	https://developer.android.com/reference/android/view/Surface.OutOfResourcesException.html
SurfaceHolder.BadSurfaceTypeException	A										<section class="prog__container"><p> Exception that is thrown from <pre><code> <a href="https://developer.android.com/reference/android/view/SurfaceHolder.html#lockCanvas()"> lockCanvas() </a> </code></pre> when called on a Surface whose type is SURFACE_TYPE_PUSH_BUFFERS.</p>\n<pre><code>public static class SurfaceHolder.BadSurfaceTypeException\n</code></pre></section>	https://developer.android.com/reference/android/view/SurfaceHolder.BadSurfaceTypeException.html
SurfaceHolder.Callback	A										<section class="prog__container"><p> A client may implement this interface to receive information about changes to the surface. When used with a <pre><code> <a href="https://developer.android.com/reference/android/view/SurfaceView.html"> SurfaceView </a> </code></pre> , the Surface being held is only available between calls to <pre><code> <a href="https://developer.android.com/reference/android/view/SurfaceHolder.Callback.html#surfaceCreated(android.view.SurfaceHolder)"> surfaceCreated(SurfaceHolder) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/view/SurfaceHolder.Callback.html#surfaceDestroyed(android.view.SurfaceHolder)"> surfaceDestroyed(SurfaceHolder) </a> </code></pre> . The Callback is set with <pre><code> <a href="https://developer.android.com/reference/android/view/SurfaceHolder.html#addCallback(android.view.SurfaceHolder.Callback)"> SurfaceHolder.addCallback </a> </code></pre> method.</p>\n<pre><code>public static interface SurfaceHolder.Callback\n</code></pre></section>	https://developer.android.com/reference/android/view/SurfaceHolder.Callback.html
SurfaceHolder.Callback2	A										<section class="prog__container"><p> Additional callbacks that can be received for <pre><code> <a href="https://developer.android.com/reference/android/view/SurfaceHolder.Callback.html"> SurfaceHolder.Callback </a> </code></pre> .</p>\n<pre><code>public static interface SurfaceHolder.Callback2\nimplements <a href="https://developer.android.com/reference/android/view/SurfaceHolder.Callback.html">SurfaceHolder.Callback</a></code></pre></section>	https://developer.android.com/reference/android/view/SurfaceHolder.Callback2.html
SurfaceHolder	A										<section class="prog__container"><p> Abstract interface to someone holding a display surface. Allows you to control the surface size and format, edit the pixels in the surface, and monitor changes to the surface. This interface is typically available through the <pre><code> <a href="https://developer.android.com/reference/android/view/SurfaceView.html"> SurfaceView </a> </code></pre> class. <p> When using this interface from a thread other than the one running its <pre><code> <a href="https://developer.android.com/reference/android/view/SurfaceView.html"> SurfaceView </a> </code></pre> , you will want to carefully read the methods <pre><code> <a href="https://developer.android.com/reference/android/view/SurfaceHolder.html#lockCanvas()"> lockCanvas() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/view/SurfaceHolder.Callback.html#surfaceCreated(android.view.SurfaceHolder)"> Callback.surfaceCreated() </a> </code></pre> . </p>\n<pre><code>public interface SurfaceHolder\n</code></pre></section>	https://developer.android.com/reference/android/view/SurfaceHolder.html
SurfaceView	A										<section class="prog__container"><p> Provides a dedicated drawing surface embedded inside of a view hierarchy. You can control the format of this surface and, if you like, its size; the SurfaceView takes care of placing the surface at the correct location on the screen <p> The surface is Z ordered so that it is behind the window holding its SurfaceView; the SurfaceView punches a hole in its window to allow its surface to be displayed. The view hierarchy will take care of correctly compositing with the Surface any siblings of the SurfaceView that would normally appear on top of it. This can be used to place overlays such as buttons on top of the Surface, though note however that it can have an impact on performance since a full alpha-blended composite will be performed each time the Surface changes. <p> The transparent region that makes the surface visible is based on the layout positions in the view hierarchy. If the post-layout transform properties are used to draw a sibling view on top of the SurfaceView, the view may not be properly composited with the surface. <p> Access to the underlying surface is provided via the SurfaceHolder interface, which can be retrieved by calling <pre><code> <a href="https://developer.android.com/reference/android/view/SurfaceView.html#getHolder()"> getHolder() </a> </code></pre> . <p> The Surface will be created for you while the SurfaceView's window is visible; you should implement <pre><code> <a href="https://developer.android.com/reference/android/view/SurfaceHolder.Callback.html#surfaceCreated(android.view.SurfaceHolder)"> surfaceCreated(SurfaceHolder) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/view/SurfaceHolder.Callback.html#surfaceDestroyed(android.view.SurfaceHolder)"> surfaceDestroyed(SurfaceHolder) </a> </code></pre> to discover when the Surface is created and destroyed as the window is shown and hidden. <p> One of the purposes of this class is to provide a surface in which a secondary thread can render into the screen. If you are going to use it this way, you need to be aware of some threading semantics: <ul> <li> All SurfaceView and <pre><code> <a href="https://developer.android.com/reference/android/view/SurfaceHolder.Callback.html"> SurfaceHolder.Callback </a> </code></pre> methods will be called from the thread running the SurfaceView's window (typically the main thread of the application). They thus need to correctly synchronize with any state that is also touched by the drawing thread. <li> You must ensure that the drawing thread only touches the underlying Surface while it is valid -- between <pre><code> <a href="https://developer.android.com/reference/android/view/SurfaceHolder.Callback.html#surfaceCreated(android.view.SurfaceHolder)"> SurfaceHolder.Callback.surfaceCreated() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/view/SurfaceHolder.Callback.html#surfaceDestroyed(android.view.SurfaceHolder)"> SurfaceHolder.Callback.surfaceDestroyed() </a> </code></pre> . </li> </li> </ul> <p class="note"> <strong> Note: </strong> Starting in platform version <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#N"> N </a> </code></pre> , SurfaceView's window position is updated synchronously with other View rendering. This means that translating and scaling a SurfaceView on screen will not cause rendering artifacts. Such artifacts may occur on previous versions of the platform when its window is positioned asynchronously. </p>\n<pre><code>public class SurfaceView\n</code></pre></section>	https://developer.android.com/reference/android/view/SurfaceView.html
TextureView	A										<section class="prog__container"><p> <p> A TextureView can be used to display a content stream. Such a content stream can for instance be a video or an OpenGL scene. The content stream can come from the application's process as well as a remote process. </p>\n<pre><code>public class TextureView\n</code></pre></section>	https://developer.android.com/reference/android/view/TextureView.html
TextureView.SurfaceTextureListener	A										<section class="prog__container"><p> This listener can be used to be notified when the surface texture associated with this texture view is available.</p>\n<pre><code>public static interface TextureView.SurfaceTextureListener\n</code></pre></section>	https://developer.android.com/reference/android/view/TextureView.SurfaceTextureListener.html
TouchDelegate	A										<section class="prog__container"><p> Helper class to handle situations where you want a view to have a larger touch area than its actual view bounds. The view whose touch area is changed is called the delegate view. This class should be used by an ancestor of the delegate. To use a TouchDelegate, first create an instance that specifies the bounds that should be mapped to the delegate and the delegate view itself. <p> The ancestor should then forward all of its touch events received in its <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#onTouchEvent(android.view.MotionEvent)"> onTouchEvent(MotionEvent) </a> </code></pre> to <pre><code> <a href="https://developer.android.com/reference/android/view/TouchDelegate.html#onTouchEvent(android.view.MotionEvent)"> onTouchEvent(MotionEvent) </a> </code></pre> . </p>\n<pre><code>public class TouchDelegate\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/TouchDelegate.html
VelocityTracker	A										<section class="prog__container"><p> Helper for tracking the velocity of touch events, for implementing flinging and other such gestures. Use <pre><code> <a href="https://developer.android.com/reference/android/view/VelocityTracker.html#obtain()"> obtain() </a> </code></pre> to retrieve a new instance of the class when you are going to begin tracking. Put the motion events you receive into it with <pre><code> <a href="https://developer.android.com/reference/android/view/VelocityTracker.html#addMovement(android.view.MotionEvent)"> addMovement(MotionEvent) </a> </code></pre> . When you want to determine the velocity call <pre><code> <a href="https://developer.android.com/reference/android/view/VelocityTracker.html#computeCurrentVelocity(int)"> computeCurrentVelocity(int) </a> </code></pre> and then call <pre><code> <a href="https://developer.android.com/reference/android/view/VelocityTracker.html#getXVelocity(int)"> getXVelocity(int) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/view/VelocityTracker.html#getYVelocity(int)"> getYVelocity(int) </a> </code></pre> to retrieve the velocity for each pointer id.</p>\n<pre><code>public final class VelocityTracker\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/VelocityTracker.html
View.AccessibilityDelegate	A										<section class="prog__container"><p> <p> This class represents a delegate that can be registered in a <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> to enhance accessibility support via composition rather via inheritance. It is specifically targeted to widget developers that extend basic View classes i.e. classes in package android.view, that would like their applications to be backwards compatible. </p>\n<pre><code>public static class View.AccessibilityDelegate\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html
View.BaseSavedState	A										<section class="prog__container"><p> Base class for derived classes that want to save and restore their own state in <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#onSaveInstanceState()"> onSaveInstanceState() </a> </code></pre> .</p>\n<pre><code>public static class View.BaseSavedState\n</code></pre></section>	https://developer.android.com/reference/android/view/View.BaseSavedState.html
View.DragShadowBuilder	A										<section class="prog__container"><p> Creates an image that the system displays during the drag and drop operation. This is called a "drag shadow". The default implementation for a DragShadowBuilder based on a View returns an image that has exactly the same appearance as the given View. The default also positions the center of the drag shadow directly under the touch point. If no View is provided (the constructor with no parameters is used), and <pre><code> <a href="https://developer.android.com/reference/android/view/View.DragShadowBuilder.html#onProvideShadowMetrics(android.graphics.Point, android.graphics.Point)"> onProvideShadowMetrics() </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/view/View.DragShadowBuilder.html#onDrawShadow(android.graphics.Canvas)"> onDrawShadow() </a> </code></pre> are not overridden, then the default is an invisible drag shadow. <p> You are not required to use the View you provide to the constructor as the basis of the drag shadow. The <pre><code> <a href="https://developer.android.com/reference/android/view/View.DragShadowBuilder.html#onDrawShadow(android.graphics.Canvas)"> onDrawShadow() </a> </code></pre> method allows you to draw anything you want as the drag shadow. </p>\n<pre><code>public static class View.DragShadowBuilder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/View.DragShadowBuilder.html
View	A										<section class="prog__container"><p> <p> This class represents the basic building block for user interface components. A View occupies a rectangular area on the screen and is responsible for drawing and event handling. View is the base class for <em> widgets </em> , which are used to create interactive UI components (buttons, text fields, etc.). The <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.html"> ViewGroup </a> </code></pre> subclass is the base class for <em> layouts </em> , which are invisible containers that hold other Views (or other ViewGroups) and define their layout properties. </p>\n<pre><code>public class View\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/View.html
View.MeasureSpec	A										<section class="prog__container"><p> A MeasureSpec encapsulates the layout requirements passed from parent to child. Each MeasureSpec represents a requirement for either the width or the height. A MeasureSpec is comprised of a size and a mode. There are three possible modes: <dl> <dt> UNSPECIFIED </dt> <dd> The parent has not imposed any constraint on the child. It can be whatever size it wants. </dd> <dt> EXACTLY </dt> <dd> The parent has determined an exact size for the child. The child is going to be given those bounds regardless of how big it wants to be. </dd> <dt> AT_MOST </dt> <dd> The child can be as large as it wants up to the specified size. </dd> </dl> MeasureSpecs are implemented as ints to reduce object allocation. This class is provided to pack and unpack the &lt;size, mode&gt; tuple into the int.</p>\n<pre><code>public static class View.MeasureSpec\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/View.MeasureSpec.html
View.OnApplyWindowInsetsListener	A										<section class="prog__container"><p> Listener for applying window insets on a view in a custom way. <p> Apps may choose to implement this interface if they want to apply custom policy to the way that window insets are treated for a view. If an OnApplyWindowInsetsListener is set, its <pre><code> <a href="https://developer.android.com/reference/android/view/View.OnApplyWindowInsetsListener.html#onApplyWindowInsets(android.view.View, android.view.WindowInsets)"> onApplyWindowInsets </a> </code></pre> method will be called instead of the View's own <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#onApplyWindowInsets(android.view.WindowInsets)"> onApplyWindowInsets </a> </code></pre> method. The listener may optionally call the parameter View's <pre><code> onApplyWindowInsets </code></pre> method to apply the View's normal behavior as part of its own. </p>\n<pre><code>public static interface View.OnApplyWindowInsetsListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnApplyWindowInsetsListener.html
View.OnAttachStateChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when this view is attached or detached from its window.</p>\n<pre><code>public static interface View.OnAttachStateChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html
View.OnClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a view is clicked.</p>\n<pre><code>public static interface View.OnClickListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnClickListener.html
View.OnContextClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a view is context clicked.</p>\n<pre><code>public static interface View.OnContextClickListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnContextClickListener.html
View.OnCreateContextMenuListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the context menu for this view is being built.</p>\n<pre><code>public static interface View.OnCreateContextMenuListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnCreateContextMenuListener.html
View.OnDragListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a drag is being dispatched to this view. The callback will be invoked before the hosting view's own onDrag(event) method. If the listener wants to fall back to the hosting view's onDrag(event) behavior, it should return 'false' from this callback. </p>\n<pre><code>public static interface View.OnDragListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnDragListener.html
View.OnFocusChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the focus state of a view changed.</p>\n<pre><code>public static interface View.OnFocusChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnFocusChangeListener.html
View.OnGenericMotionListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a generic motion event is dispatched to this view. The callback will be invoked before the generic motion event is given to the view.</p>\n<pre><code>public static interface View.OnGenericMotionListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnGenericMotionListener.html
View.OnHoverListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a hover event is dispatched to this view. The callback will be invoked before the hover event is given to the view.</p>\n<pre><code>public static interface View.OnHoverListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnHoverListener.html
View.OnKeyListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a hardware key event is dispatched to this view. The callback will be invoked before the key event is given to the view. This is only useful for hardware keyboards; a software input method has no obligation to trigger this listener.</p>\n<pre><code>public static interface View.OnKeyListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnKeyListener.html
View.OnLayoutChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the layout bounds of a view changes due to layout processing.</p>\n<pre><code>public static interface View.OnLayoutChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnLayoutChangeListener.html
View.OnLongClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a view has been clicked and held.</p>\n<pre><code>public static interface View.OnLongClickListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnLongClickListener.html
View.OnScrollChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the scroll X or Y positions of a view change. <p> <b> Note: </b> Some views handle scrolling independently from View and may have their own separate listeners for scroll-type events. For example, <pre><code> <a href="https://developer.android.com/reference/android/widget/ListView.html"> ListView </a> </code></pre> allows clients to register an <pre><code> <a href="https://developer.android.com/reference/android/widget/AbsListView.html#setOnScrollListener(android.widget.AbsListView.OnScrollListener)"> AbsListView.OnScrollListener </a> </code></pre> to listen for changes in list scroll position. </p>\n<pre><code>public static interface View.OnScrollChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnScrollChangeListener.html
View.OnSystemUiVisibilityChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the status bar changes visibility. This reports <strong> global </strong> changes to the system UI state, not what the application is requesting.</p>\n<pre><code>public static interface View.OnSystemUiVisibilityChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnSystemUiVisibilityChangeListener.html
View.OnTouchListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a touch event is dispatched to this view. The callback will be invoked before the touch event is given to the view.</p>\n<pre><code>public static interface View.OnTouchListener\n</code></pre></section>	https://developer.android.com/reference/android/view/View.OnTouchListener.html
ViewAnimationUtils	A										<section class="prog__container"><p> Defines common utilities for working with View's animations.</p>\n<pre><code>public final class ViewAnimationUtils\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/ViewAnimationUtils.html
ViewConfiguration	A										<section class="prog__container"><p> Contains methods to standard constants used in the UI for timeouts, sizes, and distances.</p>\n<pre><code>public class ViewConfiguration\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/ViewConfiguration.html
ViewDebug.CapturedViewProperty	A										<section class="prog__container"><p> This annotation can be used to mark fields and methods to be dumped when the view is captured. Methods with this annotation must have no arguments and must return a valid type of data.</p>\n<pre><code>public static abstract @interface ViewDebug.CapturedViewProperty\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/view/ViewDebug.CapturedViewProperty.html
ViewDebug.ExportedProperty	A										<section class="prog__container"><p> This annotation can be used to mark fields and methods to be dumped by the view server. Only non-void methods with no arguments can be annotated by this annotation.</p>\n<pre><code>public static abstract @interface ViewDebug.ExportedProperty\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html
ViewDebug.FlagToString	A										<section class="prog__container"><p> Defines a mapping from a flag to a String. Such a mapping can be used in an @ExportedProperty to provide more meaningful values to the end user.</p>\n<pre><code>public static abstract @interface ViewDebug.FlagToString\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/view/ViewDebug.FlagToString.html
ViewDebug.HierarchyTraceType	A										<section class="prog__container"><p> <p class="caution"> <strong> This enum was deprecated in API level 16. </strong> <br/> This enum is now unused </p>\n<pre><code>public static final enum ViewDebug.HierarchyTraceType\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewDebug.HierarchyTraceType.html
ViewDebug	A										<section class="prog__container"><p> Various debugging/tracing tools related to <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> and the view hierarchy.</p>\n<pre><code>public class ViewDebug\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/ViewDebug.html
ViewDebug.IntToString	A										<section class="prog__container"><p> Defines a mapping from an int value to a String. Such a mapping can be used in an @ExportedProperty to provide more meaningful values to the end user.</p>\n<pre><code>public static abstract @interface ViewDebug.IntToString\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/view/ViewDebug.IntToString.html
ViewDebug.RecyclerTraceType	A										<section class="prog__container"><p> <p class="caution"> <strong> This enum was deprecated in API level 16. </strong> <br/> This enum is now unused </p>\n<pre><code>public static final enum ViewDebug.RecyclerTraceType\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewDebug.RecyclerTraceType.html
ViewGroup	A										<section class="prog__container"><p> <p> A <pre><code> ViewGroup </code></pre> is a special view that can contain other views (called children.) The view group is the base class for layouts and views containers. This class also defines the <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html"> ViewGroup.LayoutParams </a> </code></pre> class which serves as the base class for layouts parameters. </p>\n<pre><code>public abstract class ViewGroup\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewGroup.html
ViewGroup.LayoutParams	A										<section class="prog__container"><p> LayoutParams are used by views to tell their parents how they want to be laid out. See <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#ViewGroup_Layout"> ViewGroup Layout Attributes </a> </code></pre> for a list of all child view attributes that this class supports. <p> The base LayoutParams class just describes how big the view wants to be for both width and height. For each dimension, it can specify one of: <ul> <li> FILL_PARENT (renamed MATCH_PARENT in API Level 8 and higher), which means that the view wants to be as big as its parent (minus padding) <li> WRAP_CONTENT, which means that the view wants to be just big enough to enclose its content (plus padding) <li> an exact number </li> </li> </li> </ul> There are subclasses of LayoutParams for different subclasses of ViewGroup. For example, AbsoluteLayout has its own subclass of LayoutParams which adds an X and Y value. </p>\n<pre><code>public static class ViewGroup.LayoutParams\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html
ViewGroup.MarginLayoutParams	A										<section class="prog__container"><p> Per-child layout information for layouts that support margins. See <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#ViewGroup_MarginLayout"> ViewGroup Margin Layout Attributes </a> </code></pre> for a list of all child view attributes that this class supports.</p>\n<pre><code>public static class ViewGroup.MarginLayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html
ViewGroup.OnHierarchyChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the hierarchy within this view changed. The hierarchy changes whenever a child is added to or removed from this view.</p>\n<pre><code>public static interface ViewGroup.OnHierarchyChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewGroup.OnHierarchyChangeListener.html
ViewGroupOverlay	A										<section class="prog__container"><p> A group overlay is an extra layer that sits on top of a ViewGroup (the "host view") which is drawn after all other content in that view (including the view group's children). Interaction with the overlay layer is done by adding and removing views and drawables. <p> ViewGroupOverlay is a subclass of <pre><code> <a href="https://developer.android.com/reference/android/view/ViewOverlay.html"> ViewOverlay </a> </code></pre> , adding the ability to manage views for overlays on ViewGroups, in addition to the drawable support in ViewOverlay. </p>\n<pre><code>public class ViewGroupOverlay\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewGroupOverlay.html
ViewManager	A										<section class="prog__container"><p> Interface to let you add and remove child views to an Activity. To get an instance of this class, call <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> Context.getSystemService() </a> </code></pre> .</p>\n<pre><code>public interface ViewManager\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewManager.html
ViewOutlineProvider	A										<section class="prog__container"><p> Interface by which a View builds its <pre><code> <a href="https://developer.android.com/reference/android/graphics/Outline.html"> Outline </a> </code></pre> , used for shadow casting and clipping.</p>\n<pre><code>public abstract class ViewOutlineProvider\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/ViewOutlineProvider.html
ViewOverlay	A										<section class="prog__container"><p> An overlay is an extra layer that sits on top of a View (the "host view") which is drawn after all other content in that view (including children, if the view is a ViewGroup). Interaction with the overlay layer is done by adding and removing drawables. <p> An overlay requested from a ViewGroup is of type <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroupOverlay.html"> ViewGroupOverlay </a> </code></pre> , which also supports adding and removing views. </p>\n<pre><code>public class ViewOverlay\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/ViewOverlay.html
ViewParent	A										<section class="prog__container"><p> Defines the responsibilities for a class that will be a parent of a View. This is the API that a view sees when it wants to interact with its parent.</p>\n<pre><code>public interface ViewParent\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewParent.html
ViewPropertyAnimator	A										<section class="prog__container"><p> This class enables automatic and optimized animation of select properties on View objects. If only one or two properties on a View object are being animated, then using an <pre><code> <a href="https://developer.android.com/reference/android/animation/ObjectAnimator.html"> ObjectAnimator </a> </code></pre> is fine; the property setters called by ObjectAnimator are well equipped to do the right thing to set the property and invalidate the view appropriately. But if several properties are animated simultaneously, or if you just want a more convenient syntax to animate a specific property, then ViewPropertyAnimator might be more well-suited to the task. <p> This class may provide better performance for several simultaneous animations, because it will optimize invalidate calls to take place only once for several properties instead of each animated property independently causing its own invalidation. Also, the syntax of using this class could be easier to use because the caller need only tell the View object which property to animate, and the value to animate either to or by, and this class handles the details of configuring the underlying Animator class and starting it. </p>\n<pre><code>public class ViewPropertyAnimator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/ViewPropertyAnimator.html
ViewStructure	A										<section class="prog__container"><p> Container for storing additional per-view data generated by <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#onProvideStructure(android.view.ViewStructure)"> View.onProvideStructure </a> </code></pre> .</p>\n<pre><code>public abstract class ViewStructure\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/ViewStructure.html
ViewStub	A										<section class="prog__container"><p> A ViewStub is an invisible, zero-sized View that can be used to lazily inflate layout resources at runtime. When a ViewStub is made visible, or when <pre><code> <a href="https://developer.android.com/reference/android/view/ViewStub.html#inflate()"> inflate() </a> </code></pre> is invoked, the layout resource is inflated. The ViewStub then replaces itself in its parent with the inflated View or Views. Therefore, the ViewStub exists in the view hierarchy until <pre><code> <a href="https://developer.android.com/reference/android/view/ViewStub.html#setVisibility(int)"> setVisibility(int) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/view/ViewStub.html#inflate()"> inflate() </a> </code></pre> is invoked. The inflated View is added to the ViewStub's parent with the ViewStub's layout parameters. Similarly, you can define/override the inflate View's id by using the ViewStub's inflatedId property. For instance: <pre> &lt;ViewStub android:id="@+id/stub" android:inflatedId="@+id/subTree" android:layout="@layout/mySubTree" android:layout_width="120dip" android:layout_height="40dip" /&gt; </pre> The ViewStub thus defined can be found using the id "stub." After inflation of the layout resource "mySubTree," the ViewStub is removed from its parent. The View created by inflating the layout resource "mySubTree" can be found using the id "subTree," specified by the inflatedId property. The inflated View is finally assigned a width of 120dip and a height of 40dip. The preferred way to perform the inflation of the layout resource is the following: <pre> ViewStub stub = (ViewStub) findViewById(R.id.stub); View inflated = stub.inflate(); </pre> When <pre><code> <a href="https://developer.android.com/reference/android/view/ViewStub.html#inflate()"> inflate() </a> </code></pre> is invoked, the ViewStub is replaced by the inflated View and the inflated View is returned. This lets applications get a reference to the inflated View without executing an extra findViewById().</p>\n<pre><code>public final class ViewStub\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewStub.html
ViewStub.OnInflateListener	A										<section class="prog__container"><p> Listener used to receive a notification after a ViewStub has successfully inflated its layout resource.</p>\n<pre><code>public static interface ViewStub.OnInflateListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewStub.OnInflateListener.html
ViewTreeObserver	A										<section class="prog__container"><p> A view tree observer is used to register listeners that can be notified of global changes in the view tree. Such global events include, but are not limited to, layout of the whole tree, beginning of the drawing pass, touch mode change.... A ViewTreeObserver should never be instantiated by applications as it is provided by the views hierarchy. Refer to <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#getViewTreeObserver()"> getViewTreeObserver() </a> </code></pre> for more information.</p>\n<pre><code>public final class ViewTreeObserver\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/ViewTreeObserver.html
ViewTreeObserver.OnDrawListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the view tree is about to be drawn.</p>\n<pre><code>public static interface ViewTreeObserver.OnDrawListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewTreeObserver.OnDrawListener.html
ViewTreeObserver.OnGlobalFocusChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the focus state within the view tree changes.</p>\n<pre><code>public static interface ViewTreeObserver.OnGlobalFocusChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalFocusChangeListener.html
ViewTreeObserver.OnGlobalLayoutListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the global layout state or the visibility of views within the view tree changes.</p>\n<pre><code>public static interface ViewTreeObserver.OnGlobalLayoutListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalLayoutListener.html
ViewTreeObserver.OnPreDrawListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the view tree is about to be drawn.</p>\n<pre><code>public static interface ViewTreeObserver.OnPreDrawListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewTreeObserver.OnPreDrawListener.html
ViewTreeObserver.OnScrollChangedListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when something in the view tree has been scrolled.</p>\n<pre><code>public static interface ViewTreeObserver.OnScrollChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewTreeObserver.OnScrollChangedListener.html
ViewTreeObserver.OnTouchModeChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the touch mode changes.</p>\n<pre><code>public static interface ViewTreeObserver.OnTouchModeChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewTreeObserver.OnTouchModeChangeListener.html
ViewTreeObserver.OnWindowAttachListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the view hierarchy is attached to and detached from its window.</p>\n<pre><code>public static interface ViewTreeObserver.OnWindowAttachListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowAttachListener.html
ViewTreeObserver.OnWindowFocusChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the view hierarchy's window focus state changes.</p>\n<pre><code>public static interface ViewTreeObserver.OnWindowFocusChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowFocusChangeListener.html
Window.Callback	A										<section class="prog__container"><p> API from a Window back to its caller. This allows the client to intercept key dispatching, panels and menus, etc.</p>\n<pre><code>public static interface Window.Callback\n</code></pre></section>	https://developer.android.com/reference/android/view/Window.Callback.html
Window	A										<section class="prog__container"><p> Abstract base class for a top-level window look and behavior policy. An instance of this class should be used as the top-level view added to the window manager. It provides standard UI policies such as a background, title area, default key processing, etc. <p> The only existing implementation of this abstract class is android.view.PhoneWindow, which you should instantiate when needing a Window. </p>\n<pre><code>public abstract class Window\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/Window.html
Window.OnFrameMetricsAvailableListener	A										<section class="prog__container"><p> Callback for clients that want frame timing information for each frame rendered by the Window.</p>\n<pre><code>public static interface Window.OnFrameMetricsAvailableListener\n</code></pre></section>	https://developer.android.com/reference/android/view/Window.OnFrameMetricsAvailableListener.html
Window.OnRestrictedCaptionAreaChangedListener	A										<section class="prog__container"><p> Callback for clients that want to be aware of where caption draws content.</p>\n<pre><code>public static interface Window.OnRestrictedCaptionAreaChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/view/Window.OnRestrictedCaptionAreaChangedListener.html
WindowAnimationFrameStats	A										<section class="prog__container"><p> This class contains window animation frame statistics. For example, a window animation is usually performed when the application is transitioning from one activity to another. The frame statistics are a snapshot for the time interval from <pre><code> <a href="https://developer.android.com/reference/android/view/FrameStats.html#getStartTimeNano()"> getStartTimeNano() </a> </code></pre> to <pre><code> <a href="https://developer.android.com/reference/android/view/FrameStats.html#getEndTimeNano()"> getEndTimeNano() </a> </code></pre> . <p> The key idea is that in order to provide a smooth user experience the system should run window animations at a specific time interval obtained by calling <pre><code> <a href="https://developer.android.com/reference/android/view/FrameStats.html#getRefreshPeriodNano()"> getRefreshPeriodNano() </a> </code></pre> . If the system does not render a frame every refresh period the user will see irregular window transitions. The time when the frame was actually presented on the display by calling <pre><code> <a href="https://developer.android.com/reference/android/view/FrameStats.html#getFramePresentedTimeNano(int)"> getFramePresentedTimeNano(int) </a> </code></pre> . </p>\n<pre><code>public final class WindowAnimationFrameStats\n</code></pre></section>	https://developer.android.com/reference/android/view/WindowAnimationFrameStats.html
WindowContentFrameStats	A										<section class="prog__container"><p> This class contains window content frame statistics. For example, a window content is rendred in frames when a view is scrolled. The frame statistics are a snapshot for the time interval from <pre><code> <a href="https://developer.android.com/reference/android/view/FrameStats.html#getStartTimeNano()"> getStartTimeNano() </a> </code></pre> to <pre><code> <a href="https://developer.android.com/reference/android/view/FrameStats.html#getEndTimeNano()"> getEndTimeNano() </a> </code></pre> . <p> The key idea is that in order to provide a smooth user experience an application has to draw a frame at a specific time interval obtained by calling <pre><code> <a href="https://developer.android.com/reference/android/view/FrameStats.html#getRefreshPeriodNano()"> getRefreshPeriodNano() </a> </code></pre> . If the application does not render a frame every refresh period the user will see irregular UI transitions. </p>\n<pre><code>public final class WindowContentFrameStats\n</code></pre></section>	https://developer.android.com/reference/android/view/WindowContentFrameStats.html
WindowId.FocusObserver	A										<section class="prog__container"><p> Subclass for observing changes to the focus state of an <pre><code> <a href="https://developer.android.com/reference/android/view/WindowId.html"> WindowId </a> </code></pre> . You should use the same instance of this class for observing multiple <pre><code> <a href="https://developer.android.com/reference/android/view/WindowId.html"> WindowId </a> </code></pre> objects, since this class is fairly heavy-weight -- the base class includes all of the mechanisms for connecting to and receiving updates from the window.</p>\n<pre><code>public static abstract class WindowId.FocusObserver\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/WindowId.FocusObserver.html
WindowId	A										<section class="prog__container"><p> Safe identifier for a window. This currently allows you to retrieve and observe the input focus state of the window. Most applications will not use this, instead relying on the simpler (and more efficient) methods available on <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> . This classes is useful when window input interactions need to be done across processes: the class itself is a Parcelable that can be passed to other processes for them to interact with your window, and it provides a limited safe API that doesn't allow the other process to negatively harm your window.</p>\n<pre><code>public class WindowId\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/WindowId.html
WindowInsets	A										<section class="prog__container"><p> Describes a set of insets for window content. <p> WindowInsets are immutable and may be expanded to include more inset types in the future. To adjust insets, use one of the supplied clone methods to obtain a new WindowInsets instance with the adjusted properties. </p>\n<pre><code>public final class WindowInsets\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/WindowInsets.html
WindowManager.BadTokenException	A										<section class="prog__container"><p> Exception that is thrown when trying to add view whose <pre><code> <a href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html"> WindowManager.LayoutParams </a> </code></pre> <pre><code> <a href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#token"> token </a> </code></pre> is invalid.</p>\n<pre><code>public static class WindowManager.BadTokenException\n</code></pre></section>	https://developer.android.com/reference/android/view/WindowManager.BadTokenException.html
WindowManager	A										<section class="prog__container"><p> The interface that apps use to talk to the window manager. <p> Use <pre><code> Context.getSystemService(Context.WINDOW_SERVICE) </code></pre> to get one of these. </p>\n<pre><code>public interface WindowManager\nimplements <a href="https://developer.android.com/reference/android/view/ViewManager.html">ViewManager</a></code></pre></section>	https://developer.android.com/reference/android/view/WindowManager.html
WindowManager.InvalidDisplayException	A										<section class="prog__container"><p> Exception that is thrown when calling <pre><code> <a href="https://developer.android.com/reference/android/view/ViewManager.html#addView(android.view.View, android.view.ViewGroup.LayoutParams)"> addView(View, ViewGroup.LayoutParams) </a> </code></pre> to a secondary display that cannot be found. See <pre><code> <a href="https://developer.android.com/reference/android/app/Presentation.html"> Presentation </a> </code></pre> for more information on secondary displays.</p>\n<pre><code>public static class WindowManager.InvalidDisplayException\n</code></pre></section>	https://developer.android.com/reference/android/view/WindowManager.InvalidDisplayException.html
WindowManager.LayoutParams	A										<section class="prog__container"><p></p>\n<pre><code>public static class WindowManager.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html
AccessibilityEvent	A										<section class="prog__container"><p> <p> This class represents accessibility events that are sent by the system when something notable happens in the user interface. For example, when a <pre><code> <a href="https://developer.android.com/reference/android/widget/Button.html"> Button </a> </code></pre> is clicked, a <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> is focused, etc. </p>\n<pre><code>public final class AccessibilityEvent\n</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html
AccessibilityEventSource	A										<section class="prog__container"><p> This interface is implemented by classes source of <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html"> AccessibilityEvent </a> </code></pre> s. </p>\n<pre><code>public interface AccessibilityEventSource\n</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityEventSource.html
AccessibilityManager.AccessibilityStateChangeListener	A										<section class="prog__container"><p> Listener for the system accessibility state. To listen for changes to the accessibility state on the device, implement this interface and register it with the system by calling <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener)"> addAccessibilityStateChangeListener(AccessibilityManager.AccessibilityStateChangeListener) </a> </code></pre> .</p>\n<pre><code>public static interface AccessibilityManager.AccessibilityStateChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.AccessibilityStateChangeListener.html
AccessibilityManager	A										<section class="prog__container"><p> System level service that serves as an event dispatch for <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html"> AccessibilityEvent </a> </code></pre> s, and provides facilities for querying the accessibility state of the system. Accessibility events are generated when something notable happens in the user interface, for example an <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> starts, the focus or selection of a <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> changes etc. Parties interested in handling accessibility events implement and register an accessibility service which extends <pre><code> <a href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html"> AccessibilityService </a> </code></pre> . <p> To obtain a handle to the accessibility manager do the following: </p>\n<pre><code>public final class AccessibilityManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html
AccessibilityManager.TouchExplorationStateChangeListener	A										<section class="prog__container"><p> Listener for the system touch exploration state. To listen for changes to the touch exploration state on the device, implement this interface and register it with the system by calling <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener)"> addTouchExplorationStateChangeListener(AccessibilityManager.TouchExplorationStateChangeListener) </a> </code></pre> .</p>\n<pre><code>public static interface AccessibilityManager.TouchExplorationStateChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.TouchExplorationStateChangeListener.html
AccessibilityNodeInfo.AccessibilityAction	A										<section class="prog__container"><p> A class defining an action that can be performed on an <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html"> AccessibilityNodeInfo </a> </code></pre> . Each action has a unique id that is mandatory and optional data. <p> There are three categories of actions: <ul> <li> <strong> Standard actions </strong> - These are actions that are reported and handled by the standard UI widgets in the platform. For each standard action there is a static constant defined in this class, e.g. <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_FOCUS"> ACTION_FOCUS </a> </code></pre> . </li> <li> <strong> Custom actions action </strong> - These are actions that are reported and handled by custom widgets. i.e. ones that are not part of the UI toolkit. For example, an application may define a custom action for clearing the user history. </li> <li> <strong> Overriden standard actions </strong> - These are actions that override standard actions to customize them. For example, an app may add a label to the standard <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_CLICK"> ACTION_CLICK </a> </code></pre> action to announce that this action clears browsing history. </li> </ul> </p>\n<pre><code>public static final class AccessibilityNodeInfo.AccessibilityAction\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html
AccessibilityNodeInfo.CollectionInfo	A										<section class="prog__container"><p> Class with information if a node is a collection. Use <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#obtain(int, int, boolean)"> obtain(int, int, boolean) </a> </code></pre> to get an instance. <p> A collection of items has rows and columns and may be hierarchical. For example, a horizontal list is a collection with one column, as many rows as the list items, and is not hierarchical; A table is a collection with several rows, several columns, and is not hierarchical; A vertical tree is a hierarchical collection with one column and as many rows as the first level children. </p>\n<pre><code>public static final class AccessibilityNodeInfo.CollectionInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html
AccessibilityNodeInfo.CollectionItemInfo	A										<section class="prog__container"><p> Class with information if a node is a collection item. Use <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#obtain(int, int, int, int, boolean)"> obtain(int, int, int, int, boolean) </a> </code></pre> to get an instance. <p> A collection item is contained in a collection, it starts at a given row and column in the collection, and spans one or more rows and columns. For example, a header of two related table columns starts at the first row and the first column, spans one row and two columns. </p>\n<pre><code>public static final class AccessibilityNodeInfo.CollectionItemInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html
AccessibilityNodeInfo	A										<section class="prog__container"><p> This class represents a node of the window content as well as actions that can be requested from its source. From the point of view of an <pre><code> <a href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html"> AccessibilityService </a> </code></pre> a window's content is presented as a tree of accessibility node infos, which may or may not map one-to-one to the view hierarchy. In other words, a custom view is free to report itself as a tree of accessibility node info.</p>\n<pre><code>public class AccessibilityNodeInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html
AccessibilityNodeInfo.RangeInfo	A										<section class="prog__container"><p> Class with information if a node is a range. Use <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.RangeInfo.html#obtain(int, float, float, float)"> obtain(int, float, float, float) </a> </code></pre> to get an instance.</p>\n<pre><code>public static final class AccessibilityNodeInfo.RangeInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.RangeInfo.html
AccessibilityNodeProvider	A										<section class="prog__container"><p> This class is the contract a client should implement to enable support of a virtual view hierarchy rooted at a given view for accessibility purposes. A virtual view hierarchy is a tree of imaginary Views that is reported as a part of the view hierarchy when an <pre><code> <a href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html"> AccessibilityService </a> </code></pre> explores the window content. Since the virtual View tree does not exist this class is responsible for managing the <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html"> AccessibilityNodeInfo </a> </code></pre> s describing that tree to accessibility services.</p>\n<pre><code>public abstract class AccessibilityNodeProvider\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeProvider.html
AccessibilityRecord	A										<section class="prog__container"><p> Represents a record in an <pre><code> <a href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html"> AccessibilityEvent </a> </code></pre> and contains information about state change of its source <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> . When a view fires an accessibility event it requests from its parent to dispatch the constructed event. The parent may optionally append a record for itself for providing more context to <pre><code> <a href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html"> AccessibilityService </a> </code></pre> s. Hence, accessibility services can facilitate additional accessibility records to enhance feedback.</p>\n<pre><code>public class AccessibilityRecord\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityRecord.html
AccessibilityWindowInfo	A										<section class="prog__container"><p> This class represents a state snapshot of a window for accessibility purposes. The screen content contains one or more windows where some windows can be descendants of other windows, which is the windows are hierarchically ordered. Note that there is no root window. Hence, the screen content can be seen as a collection of window trees.</p>\n<pre><code>public final class AccessibilityWindowInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/accessibility/AccessibilityWindowInfo.html
CaptioningManager.CaptioningChangeListener	A										<section class="prog__container"><p> Listener for changes in captioning properties, including enabled state and user style preferences.</p>\n<pre><code>public static abstract class CaptioningManager.CaptioningChangeListener\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/accessibility/CaptioningManager.CaptioningChangeListener.html
CaptioningManager.CaptionStyle	A										<section class="prog__container"><p> Specifies visual properties for video captions, including foreground and background colors, edge properties, and typeface.</p>\n<pre><code>public static final class CaptioningManager.CaptionStyle\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/accessibility/CaptioningManager.CaptionStyle.html
CaptioningManager	A										<section class="prog__container"><p> Contains methods for accessing and monitoring preferred video captioning state and visual properties. <p> To obtain a handle to the captioning manager, do the following: <p> <pre><code> <pre>CaptioningManager captioningManager = (CaptioningManager) context.getSystemService(Context.CAPTIONING_SERVICE);</pre> </code></pre> </p>\n<pre><code>public class CaptioningManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/accessibility/CaptioningManager.html
android.view.accessibility	A										<section class="prog__container">The classes in this package are used to represent screen content and changes to it as well as APIs for querying the global accessibility state of the system.</section>	https://developer.android.com/reference/android/view/accessibility/package-summary.html
AccelerateDecelerateInterpolator	A										<section class="prog__container"><p> An interpolator where the rate of change starts and ends slowly but accelerates through the middle.</p>\n<pre><code>public class AccelerateDecelerateInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/AccelerateDecelerateInterpolator.html
AccelerateInterpolator	A										<section class="prog__container"><p> An interpolator where the rate of change starts out slowly and and then accelerates.</p>\n<pre><code>public class AccelerateInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/AccelerateInterpolator.html
AlphaAnimation	A										<section class="prog__container"><p> An animation that controls the alpha level of an object. Useful for fading things in and out. This animation ends up changing the alpha property of a <pre><code> <a href="https://developer.android.com/reference/android/view/animation/Transformation.html"> Transformation </a> </code></pre></p>\n<pre><code>public class AlphaAnimation\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/AlphaAnimation.html
Animation.AnimationListener	A										<section class="prog__container"><p> <p> An animation listener receives notifications from an animation. Notifications indicate animation related events, such as the end or the repetition of the animation. </p>\n<pre><code>public static interface Animation.AnimationListener\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/Animation.AnimationListener.html
Animation.Description	A										<section class="prog__container"><p> Utility class to parse a string description of a size.</p>\n<pre><code>protected static class Animation.Description\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/animation/Animation.Description.html
Animation	A										<section class="prog__container"><p> Abstraction for an Animation that can be applied to Views, Surfaces, or other objects. See the <pre><code> <a href="https://developer.android.com/reference/android/view/animation/package-summary.html"> animation package description file </a> </code></pre> .</p>\n<pre><code>public abstract class Animation\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/animation/Animation.html
AnimationSet	A										<section class="prog__container"><p> Represents a group of Animations that should be played together. The transformation of each individual animation are composed together into a single transform. If AnimationSet sets any properties that its children also set (for example, duration or fillBefore), the values of AnimationSet override the child values. <p> The way that AnimationSet inherits behavior from Animation is important to understand. Some of the Animation attributes applied to AnimationSet affect the AnimationSet itself, some are pushed down to the children, and some are ignored, as follows: <ul> <li> duration, repeatMode, fillBefore, fillAfter: These properties, when set on an AnimationSet object, will be pushed down to all child animations. </li> <li> repeatCount, fillEnabled: These properties are ignored for AnimationSet. </li> <li> startOffset, shareInterpolator: These properties apply to the AnimationSet itself. </li> </ul> Starting with <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#ICE_CREAM_SANDWICH"> ICE_CREAM_SANDWICH </a> </code></pre> , the behavior of these properties is the same in XML resources and at runtime (prior to that release, the values set in XML were ignored for AnimationSet). That is, calling <pre><code> setDuration(500) </code></pre> on an AnimationSet has the same effect as declaring <pre><code> android:duration="500" </code></pre> in an XML resource for an AnimationSet object. </p>\n<pre><code>public class AnimationSet\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/AnimationSet.html
AnimationUtils	A										<section class="prog__container"><p> Defines common utilities for working with animations.</p>\n<pre><code>public class AnimationUtils\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/animation/AnimationUtils.html
AnticipateInterpolator	A										<section class="prog__container"><p> An interpolator where the change starts backward then flings forward.</p>\n<pre><code>public class AnticipateInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/AnticipateInterpolator.html
AnticipateOvershootInterpolator	A										<section class="prog__container"><p> An interpolator where the change starts backward then flings forward and overshoots the target value and finally goes back to the final value.</p>\n<pre><code>public class AnticipateOvershootInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/AnticipateOvershootInterpolator.html
BaseInterpolator	A										<section class="prog__container"><p> An abstract class which is extended by default interpolators.</p>\n<pre><code>public abstract class BaseInterpolator\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/animation/BaseInterpolator.html
BounceInterpolator	A										<section class="prog__container"><p> An interpolator where the change bounces at the end.</p>\n<pre><code>public class BounceInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/BounceInterpolator.html
CycleInterpolator	A										<section class="prog__container"><p> Repeats the animation for a specified number of cycles. The rate of change follows a sinusoidal pattern.</p>\n<pre><code>public class CycleInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/CycleInterpolator.html
DecelerateInterpolator	A										<section class="prog__container"><p> An interpolator where the rate of change starts out quickly and and then decelerates.</p>\n<pre><code>public class DecelerateInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/DecelerateInterpolator.html
GridLayoutAnimationController.AnimationParameters	A										<section class="prog__container"><p> The set of parameters that has to be attached to each view contained in the view group animated by the grid layout animation controller. These parameters are used to compute the start time of each individual view's animation.</p>\n<pre><code>public static class GridLayoutAnimationController.AnimationParameters\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/GridLayoutAnimationController.AnimationParameters.html
GridLayoutAnimationController	A										<section class="prog__container"><p> A layout animation controller is used to animated a grid layout's children. While <pre><code> <a href="https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html"> LayoutAnimationController </a> </code></pre> relies only on the index of the child in the view group to compute the animation delay, this class uses both the X and Y coordinates of the child within a grid. In addition, the animation direction can be controlled. The default direction is <pre><code> DIRECTION_LEFT_TO_RIGHT | DIRECTION_TOP_TO_BOTTOM </code></pre> . You can also set the animation priority to columns or rows. The default priority is none. Information used to compute the animation delay of each child are stored in an instance of <pre><code> <a href="https://developer.android.com/reference/android/view/animation/GridLayoutAnimationController.AnimationParameters.html"> GridLayoutAnimationController.AnimationParameters </a> </code></pre> , itself stored in the <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html"> ViewGroup.LayoutParams </a> </code></pre> of the view.</p>\n<pre><code>public class GridLayoutAnimationController\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/GridLayoutAnimationController.html
Interpolator	A										<section class="prog__container"><p> An interpolator defines the rate of change of an animation. This allows the basic animation effects (alpha, scale, translate, rotate) to be accelerated, decelerated, repeated, etc.</p>\n<pre><code>public interface Interpolator\nimplements <a href="https://developer.android.com/reference/android/animation/TimeInterpolator.html">TimeInterpolator</a></code></pre></section>	https://developer.android.com/reference/android/view/animation/Interpolator.html
LayoutAnimationController.AnimationParameters	A										<section class="prog__container"><p> The set of parameters that has to be attached to each view contained in the view group animated by the layout animation controller. These parameters are used to compute the start time of each individual view's animation.</p>\n<pre><code>public static class LayoutAnimationController.AnimationParameters\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/animation/LayoutAnimationController.AnimationParameters.html
LayoutAnimationController	A										<section class="prog__container"><p> A layout animation controller is used to animated a layout's, or a view group's, children. Each child uses the same animation but for every one of them, the animation starts at a different time. A layout animation controller is used by <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.html"> ViewGroup </a> </code></pre> to compute the delay by which each child's animation start must be offset. The delay is computed by using characteristics of each child, like its index in the view group. This standard implementation computes the delay by multiplying a fixed amount of miliseconds by the index of the child in its parent view group. Subclasses are supposed to override <pre><code> <a href="https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#getDelayForView(android.view.View)"> getDelayForView(android.view.View) </a> </code></pre> to implement a different way of computing the delay. For instance, a <pre><code> <a href="https://developer.android.com/reference/android/view/animation/GridLayoutAnimationController.html"> GridLayoutAnimationController </a> </code></pre> will compute the delay based on the column and row indices of the child in its parent view group. Information used to compute the animation delay of each child are stored in an instance of <pre><code> <a href="https://developer.android.com/reference/android/view/animation/LayoutAnimationController.AnimationParameters.html"> LayoutAnimationController.AnimationParameters </a> </code></pre> , itself stored in the <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html"> ViewGroup.LayoutParams </a> </code></pre> of the view.</p>\n<pre><code>public class LayoutAnimationController\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html
LinearInterpolator	A										<section class="prog__container"><p> An interpolator where the rate of change is constant</p>\n<pre><code>public class LinearInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/LinearInterpolator.html
OvershootInterpolator	A										<section class="prog__container"><p> An interpolator where the change flings forward and overshoots the last value then comes back.</p>\n<pre><code>public class OvershootInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/OvershootInterpolator.html
android.view.animation	A										<section class="prog__container">Provides classes that handle tweened animations.</section>	https://developer.android.com/reference/android/view/animation/package-summary.html
PathInterpolator	A										<section class="prog__container"><p> An interpolator that can traverse a Path that extends from <pre><code> Point </code></pre> <pre><code> (0, 0) </code></pre> to <pre><code> (1, 1) </code></pre> . The x coordinate along the <pre><code> Path </code></pre> is the input value and the output is the y coordinate of the line at that point. This means that the Path must conform to a function <pre><code> y = f(x) </code></pre> . <p> The <pre><code> Path </code></pre> must not have gaps in the x direction and must not loop back on itself such that there can be two points sharing the same x coordinate. It is alright to have a disjoint line in the vertical direction: </p>\n<pre><code>public class PathInterpolator\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/PathInterpolator.html
RotateAnimation	A										<section class="prog__container"><p> An animation that controls the rotation of an object. This rotation takes place in the X-Y plane. You can specify the point to use for the center of the rotation, where (0,0) is the top left point. If not specified, (0,0) is the default rotation point.</p>\n<pre><code>public class RotateAnimation\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/RotateAnimation.html
ScaleAnimation	A										<section class="prog__container"><p> An animation that controls the scale of an object. You can specify the point to use for the center of scaling.</p>\n<pre><code>public class ScaleAnimation\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/ScaleAnimation.html
Transformation	A										<section class="prog__container"><p> Defines the transformation to be applied at one point in time of an Animation.</p>\n<pre><code>public class Transformation\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/animation/Transformation.html
TranslateAnimation	A										<section class="prog__container"><p> An animation that controls the position of an object. See the <pre><code> <a href="https://developer.android.com/reference/android/view/animation/package-summary.html"> full package </a> </code></pre> description for details and sample code.</p>\n<pre><code>public class TranslateAnimation\n</code></pre></section>	https://developer.android.com/reference/android/view/animation/TranslateAnimation.html
BaseInputConnection	A										<section class="prog__container"><p> Base class for implementors of the InputConnection interface, taking care of most of the common behavior for providing a connection to an Editable. Implementors of this class will want to be sure to implement <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/BaseInputConnection.html#getEditable()"> getEditable() </a> </code></pre> to provide access to their own editable object, and to refer to the documentation in <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html"> InputConnection </a> </code></pre> .</p>\n<pre><code>public class BaseInputConnection\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/BaseInputConnection.html
CompletionInfo	A										<section class="prog__container"><p> Information about a single text completion that an editor has reported to an input method. <p> This class encapsulates a completion offered by an application that wants it to be presented to the user by the IME. Usually, apps present their completions directly in a scrolling list for example (UI developers will usually use or extend to implement this). However, in some cases, the editor may not be visible, as in the case in extract mode where the IME has taken over the full screen. In this case, the editor can choose to send their completions to the IME for display. <p> Most applications who want to send completions to an IME should use <pre><code> <a href="https://developer.android.com/reference/android/widget/AutoCompleteTextView.html"> AutoCompleteTextView </a> </code></pre> as this class makes this process easy. In this case, the application would not have to deal directly with this class. <p> An application who implements its own editor and wants direct control over this would create an array of CompletionInfo objects, and send it to the IME using <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#displayCompletions(android.view.View, android.view.inputmethod.CompletionInfo[])"> displayCompletions(View, CompletionInfo[]) </a> </code></pre> . The IME would present the completions however they see fit, and call back to the editor through <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#commitCompletion(android.view.inputmethod.CompletionInfo)"> commitCompletion(CompletionInfo) </a> </code></pre> . The application can then pick up the commit event by overriding <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html#onCommitCompletion(android.view.inputmethod.CompletionInfo)"> onCommitCompletion(CompletionInfo) </a> </code></pre> . </p>\n<pre><code>public final class CompletionInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/CompletionInfo.html
CorrectionInfo	A										<section class="prog__container"><p> Information about a single text correction that an editor has reported to an input method.</p>\n<pre><code>public final class CorrectionInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/CorrectionInfo.html
CursorAnchorInfo.Builder	A										<section class="prog__container"><p> Builder for <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/CursorAnchorInfo.html"> CursorAnchorInfo </a> </code></pre> . This class is not designed to be thread-safe.</p>\n<pre><code>public static final class CursorAnchorInfo.Builder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/CursorAnchorInfo.Builder.html
CursorAnchorInfo	A										<section class="prog__container"><p> Positional information about the text insertion point and characters in the composition string. <p> This class encapsulates locations of the text insertion point and the composition string in the screen coordinates so that IMEs can render their UI components near where the text is actually inserted. </p>\n<pre><code>public final class CursorAnchorInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/CursorAnchorInfo.html
EditorInfo	A										<section class="prog__container"><p> An EditorInfo describes several attributes of a text editing object that an input method is communicating with (typically an EditText), most importantly the type of text content it contains and the current cursor position.</p>\n<pre><code>public class EditorInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/EditorInfo.html
ExtractedText	A										<section class="prog__container"><p> Information about text that has been extracted for use by an input method. This contains information about a portion of the currently edited text, that the IME should display into its own interface while in extracted mode.</p>\n<pre><code>public class ExtractedText\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/ExtractedText.html
ExtractedTextRequest	A										<section class="prog__container"><p> Description of what an input method would like from an application when extract text from its input editor.</p>\n<pre><code>public class ExtractedTextRequest\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/ExtractedTextRequest.html
InputBinding	A										<section class="prog__container"><p> Information given to an <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/InputMethod.html"> InputMethod </a> </code></pre> about a client connecting to it.</p>\n<pre><code>public final class InputBinding\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputBinding.html
InputConnection	A										<section class="prog__container"><p> The InputConnection interface is the communication channel from an <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/InputMethod.html"> InputMethod </a> </code></pre> back to the application that is receiving its input. It is used to perform such things as reading text around the cursor, committing text to the text box, and sending raw key events to the application. <p> Starting from API Level <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#N"> N </a> </code></pre> , the system can deal with the situation where the application directly implements this class but one or more of the following methods are not implemented. </p>\n<pre><code>public interface InputConnection\n</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputConnection.html
InputConnectionWrapper	A										<section class="prog__container"><p> <p> Wrapper class for proxying calls to another InputConnection. Subclass and have fun! </p>\n<pre><code>public class InputConnectionWrapper\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputConnectionWrapper.html
InputContentInfo	A										<section class="prog__container"><p> A container object with which input methods can send content files to the target application.</p>\n<pre><code>public final class InputContentInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputContentInfo.html
InputMethod	A										<section class="prog__container"><p> The InputMethod interface represents an input method which can generate key events and text, such as digital, email addresses, CJK characters, other language characters, and etc., while handling various input events, and send the text back to the application that requests text input. See <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html"> InputMethodManager </a> </code></pre> for more general information about the architecture. <p> Applications will not normally use this interface themselves, instead relying on the standard interaction provided by <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html"> TextView </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/widget/EditText.html"> EditText </a> </code></pre> . <p> Those implementing input methods should normally do so by deriving from <pre><code> <a href="https://developer.android.com/reference/android/inputmethodservice/InputMethodService.html"> InputMethodService </a> </code></pre> or one of its subclasses. When implementing an input method, the service component containing it must also supply a <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/InputMethod.html#SERVICE_META_DATA"> SERVICE_META_DATA </a> </code></pre> meta-data field, referencing an XML resource providing details about the input method. All input methods also must require that clients hold the <pre><code> <a href="https://developer.android.com/reference/android/Manifest.permission.html#BIND_INPUT_METHOD"> BIND_INPUT_METHOD </a> </code></pre> in order to interact with the service; if this is not required, the system will not use that input method, because it can not trust that it is not compromised. <p> The InputMethod interface is actually split into two parts: the interface here is the top-level interface to the input method, providing all access to it, which only the system can access (due to the BIND_INPUT_METHOD permission requirement). In addition its method <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/InputMethod.html#createSession(android.view.inputmethod.InputMethod.SessionCallback)"> createSession(android.view.inputmethod.InputMethod.SessionCallback) </a> </code></pre> can be called to instantate a secondary <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/InputMethodSession.html"> InputMethodSession </a> </code></pre> interface which is what clients use to communicate with the input method. </p>\n<pre><code>public interface InputMethod\n</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputMethod.html
InputMethod.SessionCallback	A										<section class="prog__container"><p></p>\n<pre><code>public static interface InputMethod.SessionCallback\n</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputMethod.SessionCallback.html
InputMethodInfo	A										<section class="prog__container"><p> This class is used to specify meta information of an input method. <p> It should be defined in an XML resource file with an <pre><code> &lt;input-method&gt; </code></pre> element. For more information, see the guide to <a href="https://developer.android.com/guide/topics/text/creating-input-method.html"> Creating an Input Method </a> . </p>\n<pre><code>public final class InputMethodInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputMethodInfo.html
InputMethodManager	A										<section class="prog__container"><p> Central system API to the overall input method framework (IMF) architecture, which arbitrates interaction between applications and the current input method. You can retrieve an instance of this interface with <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> Context.getSystemService() </a> </code></pre> . <p> Topics covered here: <ol> <li> <a href="#ArchitectureOverview"> Architecture Overview </a> <li> <a href="#Applications"> Applications </a> <li> <a href="#InputMethods"> Input Methods </a> <li> <a href="#Security"> Security </a> </li> </li> </li> </li> </ol> <a name="ArchitectureOverview"> </a> </p>\n<pre><code>public final class InputMethodManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html
InputMethodSession.EventCallback	A										<section class="prog__container"><p></p>\n<pre><code>public static interface InputMethodSession.EventCallback\n</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputMethodSession.EventCallback.html
InputMethodSession	A										<section class="prog__container"><p> The InputMethodSession interface provides the per-client functionality of <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/InputMethod.html"> InputMethod </a> </code></pre> that is safe to expose to applications. <p> Applications will not normally use this interface themselves, instead relying on the standard interaction provided by <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html"> TextView </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/widget/EditText.html"> EditText </a> </code></pre> . </p>\n<pre><code>public interface InputMethodSession\n</code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputMethodSession.html
InputMethodSubtype	A										<section class="prog__container"><p> This class is used to specify meta information of a subtype contained in an input method editor (IME). Subtype can describe locale (e.g. en_US, fr_FR...) and mode (e.g. voice, keyboard...), and is used for IME switch and settings. The input method subtype allows the system to bring up the specified subtype of the designated IME directly. <p> It should be defined in an XML resource file of the input method with the <pre><code> &lt;subtype&gt; </code></pre> element, which resides within an <pre><code> &lt;input-method&gt; </code></pre> element. For more information, see the guide to <a href="https://developer.android.com/guide/topics/text/creating-input-method.html"> Creating an Input Method </a> . </p>\n<pre><code>public final class InputMethodSubtype\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputMethodSubtype.html
InputMethodSubtype.InputMethodSubtypeBuilder	A										<section class="prog__container"><p> InputMethodSubtypeBuilder is a builder class of InputMethodSubtype. This class is designed to be used with <pre><code> <a href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#setAdditionalInputMethodSubtypes(java.lang.String, android.view.inputmethod.InputMethodSubtype[])"> setAdditionalInputMethodSubtypes(String, InputMethodSubtype[]) </a> </code></pre> . The developer needs to be aware of what each parameter means.</p>\n<pre><code>public static class InputMethodSubtype.InputMethodSubtypeBuilder\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/inputmethod/InputMethodSubtype.InputMethodSubtypeBuilder.html
android.view.inputmethod	A										<section class="prog__container">Wrapper class for proxying calls to another InputConnection. </section>	https://developer.android.com/reference/android/view/inputmethod/package-summary.html
android.view.textservice	A										<section class="prog__container">Except as noted, this content is licensed under</section>	https://developer.android.com/reference/android/view/textservice/package-summary.html
SentenceSuggestionsInfo	A										<section class="prog__container"><p> This class contains a metadata of suggestions returned from a text service (e.g. <pre><code> <a href="https://developer.android.com/reference/android/service/textservice/SpellCheckerService.html"> SpellCheckerService </a> </code></pre> ). The text service uses this class to return the suggestions for a sentence. See <pre><code> <a href="https://developer.android.com/reference/android/view/textservice/SuggestionsInfo.html"> SuggestionsInfo </a> </code></pre> which is used for suggestions for a word. This class extends the functionality of <pre><code> <a href="https://developer.android.com/reference/android/view/textservice/SuggestionsInfo.html"> SuggestionsInfo </a> </code></pre> as far as this class enables you to put multiple <pre><code> <a href="https://developer.android.com/reference/android/view/textservice/SuggestionsInfo.html"> SuggestionsInfo </a> </code></pre> s on a sentence with the offsets and the lengths of all <pre><code> <a href="https://developer.android.com/reference/android/view/textservice/SuggestionsInfo.html"> SuggestionsInfo </a> </code></pre> s.</p>\n<pre><code>public final class SentenceSuggestionsInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/textservice/SentenceSuggestionsInfo.html
SpellCheckerInfo	A										<section class="prog__container"><p> This class is used to specify meta information of a spell checker.</p>\n<pre><code>public final class SpellCheckerInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/textservice/SpellCheckerInfo.html
SpellCheckerSession	A										<section class="prog__container"><p> The SpellCheckerSession interface provides the per client functionality of SpellCheckerService. <a name="Applications"> </a> </p>\n<pre><code>public class SpellCheckerSession\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/textservice/SpellCheckerSession.html
SpellCheckerSession.SpellCheckerSessionListener	A										<section class="prog__container"><p> Callback for getting results from text services</p>\n<pre><code>public static interface SpellCheckerSession.SpellCheckerSessionListener\n</code></pre></section>	https://developer.android.com/reference/android/view/textservice/SpellCheckerSession.SpellCheckerSessionListener.html
SpellCheckerSubtype	A										<section class="prog__container"><p> This class is used to specify meta information of a subtype contained in a spell checker. Subtype can describe locale (e.g. en_US, fr_FR...) used for settings.</p>\n<pre><code>public final class SpellCheckerSubtype\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/textservice/SpellCheckerSubtype.html
SuggestionsInfo	A										<section class="prog__container"><p> This class contains a metadata of suggestions from the text service</p>\n<pre><code>public final class SuggestionsInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/textservice/SuggestionsInfo.html
TextInfo	A										<section class="prog__container"><p> This class contains a metadata of the input of TextService</p>\n<pre><code>public final class TextInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/textservice/TextInfo.html
TextServicesManager	A										<section class="prog__container"><p> System API to the overall text services, which arbitrates interaction between applications and text services. You can retrieve an instance of this interface with <pre><code> <a href="https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String)"> Context.getSystemService() </a> </code></pre> . The user can change the current text services in Settings. And also applications can specify the target text services. </p>\n<pre><code>public final class TextServicesManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/view/textservice/TextServicesManager.html
ClientCertRequest	A										<section class="prog__container"><p> ClientCertRequest: The user receives an instance of this class as a parameter of <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebViewClient.html#onReceivedClientCertRequest(android.webkit.WebView, android.webkit.ClientCertRequest)"> onReceivedClientCertRequest(WebView, ClientCertRequest) </a> </code></pre> . The request includes the parameters to choose the client certificate, such as the host name and the port number requesting the cert, the acceptable key types and the principals. The user should call one of the class methods to indicate how to deal with the client certificate request. All methods should be called on UI thread. WebView caches the <pre><code> <a href="https://developer.android.com/reference/android/webkit/ClientCertRequest.html#proceed(java.security.PrivateKey, java.security.cert.X509Certificate[])"> proceed(PrivateKey, X509Certificate[]) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/webkit/ClientCertRequest.html#cancel()"> cancel() </a> </code></pre> responses in memory and uses them to handle future client certificate requests for the same host/port pair. The user can clear the cached data using <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebView.html#clearClientCertPreferences(java.lang.Runnable)"> clearClientCertPreferences(Runnable) </a> </code></pre> .</p>\n<pre><code>public abstract class ClientCertRequest\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/ClientCertRequest.html
ConsoleMessage	A										<section class="prog__container"><p> Public class representing a JavaScript console message from WebCore. This could be a issued by a call to one of the <pre><code> console </code></pre> logging functions (e.g. <pre><code> console.log('...') </code></pre> ) or a JavaScript error on the page. To receive notifications of these messages, override the <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebChromeClient.html#onConsoleMessage(android.webkit.ConsoleMessage)"> onConsoleMessage(ConsoleMessage) </a> </code></pre> function.</p>\n<pre><code>public class ConsoleMessage\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/ConsoleMessage.html
ConsoleMessage.MessageLevel	A										<section class="prog__container"><p></p>\n<pre><code>public static final enum ConsoleMessage.MessageLevel\n</code></pre></section>	https://developer.android.com/reference/android/webkit/ConsoleMessage.MessageLevel.html
CookieManager	A										<section class="prog__container"><p> Manages the cookies used by an application's <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebView.html"> WebView </a> </code></pre> instances. Cookies are manipulated according to RFC2109.</p>\n<pre><code>public abstract class CookieManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/CookieManager.html
CookieSyncManager	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 21. </strong> <br/> The WebView now automatically syncs cookies as necessary. You no longer need to create or use the CookieSyncManager. To manually force a sync you can use the CookieManager method <pre><code> <a href="https://developer.android.com/reference/android/webkit/CookieManager.html#flush()"> flush() </a> </code></pre> which is a synchronous replacement for <pre><code> <a href="https://developer.android.com/reference/android/webkit/CookieSyncManager.html#sync()"> sync() </a> </code></pre> . </p>\n<pre><code>public final class CookieSyncManager\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/CookieSyncManager.html
DateSorter	A										<section class="prog__container"><p> Sorts dates into the following groups: Today Yesterday seven days ago one month ago older than a month ago</p>\n<pre><code>public class DateSorter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/DateSorter.html
DownloadListener	A										<section class="prog__container"><p> Notify the host application that a file should be downloaded</p>\n<pre><code>public interface DownloadListener\n</code></pre></section>	https://developer.android.com/reference/android/webkit/DownloadListener.html
GeolocationPermissions.Callback	A										<section class="prog__container"><p> A callback interface used by the host application to set the Geolocation permission state for an origin.</p>\n<pre><code>public static interface GeolocationPermissions.Callback\n</code></pre></section>	https://developer.android.com/reference/android/webkit/GeolocationPermissions.Callback.html
GeolocationPermissions	A										<section class="prog__container"><p> This class is used to manage permissions for the WebView's Geolocation JavaScript API. Geolocation permissions are applied to an origin, which consists of the host, scheme and port of a URI. In order for web content to use the Geolocation API, permission must be granted for that content's origin. This class stores Geolocation permissions. An origin's permission state can be either allowed or denied. This class uses Strings to represent an origin. When an origin attempts to use the Geolocation API, but no permission state is currently set for that origin, <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebChromeClient.html#onGeolocationPermissionsShowPrompt(java.lang.String, android.webkit.GeolocationPermissions.Callback)"> WebChromeClient.onGeolocationPermissionsShowPrompt() </a> </code></pre> is called. This allows the permission state to be set for that origin. The methods of this class can be used to modify and interrogate the stored Geolocation permissions at any time.</p>\n<pre><code>public class GeolocationPermissions\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/GeolocationPermissions.html
HttpAuthHandler	A										<section class="prog__container"><p> Represents a request for HTTP authentication. Instances of this class are created by the WebView and passed to <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebViewClient.html#onReceivedHttpAuthRequest(android.webkit.WebView, android.webkit.HttpAuthHandler, java.lang.String, java.lang.String)"> onReceivedHttpAuthRequest(WebView, HttpAuthHandler, String, String) </a> </code></pre> . The host application must call either <pre><code> <a href="https://developer.android.com/reference/android/webkit/HttpAuthHandler.html#proceed(java.lang.String, java.lang.String)"> proceed(String, String) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/webkit/HttpAuthHandler.html#cancel()"> cancel() </a> </code></pre> to set the WebView's response to the request.</p>\n<pre><code>public class HttpAuthHandler\n</code></pre></section>	https://developer.android.com/reference/android/webkit/HttpAuthHandler.html
JavascriptInterface	A										<section class="prog__container"><p> Annotation that allows exposing methods to JavaScript. Starting from API level <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#JELLY_BEAN_MR1"> JELLY_BEAN_MR1 </a> </code></pre> and above, only methods explicitly marked with this annotation are available to the Javascript code. See <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)"> addJavascriptInterface(Object, String) </a> </code></pre> for more information about it.</p>\n<pre><code>public abstract @interface JavascriptInterface\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/webkit/JavascriptInterface.html
JsPromptResult	A										<section class="prog__container"><p> Public class for handling JavaScript prompt requests. The WebChromeClient will receive a <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebChromeClient.html#onJsPrompt(android.webkit.WebView, java.lang.String, java.lang.String, java.lang.String, android.webkit.JsPromptResult)"> onJsPrompt(WebView, String, String, String, JsPromptResult) </a> </code></pre> call with a JsPromptResult instance as a parameter. This parameter is used to return the result of this user dialog prompt back to the WebView instance. The client can call cancel() to cancel the dialog or confirm() with the user's input to confirm the dialog.</p>\n<pre><code>public class JsPromptResult\n</code></pre></section>	https://developer.android.com/reference/android/webkit/JsPromptResult.html
JsResult	A										<section class="prog__container"><p> An instance of this class is passed as a parameter in various <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebChromeClient.html"> WebChromeClient </a> </code></pre> action notifications. The object is used as a handle onto the underlying JavaScript-originated request, and provides a means for the client to indicate whether this action should proceed.</p>\n<pre><code>public class JsResult\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/JsResult.html
MimeTypeMap	A										<section class="prog__container"><p> Two-way map that maps MIME-types to file extensions and vice versa. <p> See also <pre><code> <a href="https://developer.android.com/reference/java/net/URLConnection.html#guessContentTypeFromName(java.lang.String)"> guessContentTypeFromName(String) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/java/net/URLConnection.html#guessContentTypeFromStream(java.io.InputStream)"> guessContentTypeFromStream(InputStream) </a> </code></pre> . This class and <pre><code> URLConnection </code></pre> share the same MIME-type database. </p>\n<pre><code>public class MimeTypeMap\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/MimeTypeMap.html
android.webkit	A										<section class="prog__container">Provides tools for browsing the web.</section>	https://developer.android.com/reference/android/webkit/package-summary.html
PermissionRequest	A										<section class="prog__container"><p> This class defines a permission request and is used when web content requests access to protected resources. The permission request related events are delivered via <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebChromeClient.html#onPermissionRequest(android.webkit.PermissionRequest)"> onPermissionRequest(PermissionRequest) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebChromeClient.html#onPermissionRequestCanceled(android.webkit.PermissionRequest)"> onPermissionRequestCanceled(PermissionRequest) </a> </code></pre> . Either <pre><code> <a href="https://developer.android.com/reference/android/webkit/PermissionRequest.html#grant(java.lang.String[])"> grant() </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/webkit/PermissionRequest.html#deny()"> deny() </a> </code></pre> must be called in UI thread to respond to the request. New protected resources whose names are not defined here may be requested in future versions of WebView, even when running on an older Android release. To avoid unintentionally granting requests for new permissions, you should pass the specific permissions you intend to grant to <pre><code> <a href="https://developer.android.com/reference/android/webkit/PermissionRequest.html#grant(java.lang.String[])"> grant() </a> </code></pre> , and avoid writing code like this example: <pre> permissionRequest.grant(permissionRequest.getResources()) // This is wrong!!! </pre> See the WebView's release notes for information about new protected resources.</p>\n<pre><code>public abstract class PermissionRequest\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/PermissionRequest.html
PluginStub	A										<section class="prog__container"><p> This interface is used to implement plugins in a WebView. A plugin package may extend this class and implement the abstract functions to create embedded or fullscreeen views displayed in a WebView. The PluginStub implementation will be provided the same NPP instance that is created through the native interface.</p>\n<pre><code>public interface PluginStub\n</code></pre></section>	https://developer.android.com/reference/android/webkit/PluginStub.html
ServiceWorkerClient	A										<section class="prog__container"><p> Base class for clients to capture Service Worker related callbacks, see <pre><code> <a href="https://developer.android.com/reference/android/webkit/ServiceWorkerController.html"> ServiceWorkerController </a> </code></pre> for usage example.</p>\n<pre><code>public class ServiceWorkerClient\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/ServiceWorkerClient.html
ServiceWorkerController	A										<section class="prog__container"><p> Manages Service Workers used by WebView. <p> Example usage: <pre class="prettyprint"> ServiceWorkerController swController = ServiceWorkerController.getInstance(); swController.setServiceWorkerClient(new ServiceWorkerClient() { @Override public WebResourceResponse shouldInterceptRequest(WebResourceRequest request) { // Capture request here and generate response or allow pass-through // by returning null. return null; } }); </pre> </p>\n<pre><code>public abstract class ServiceWorkerController\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/ServiceWorkerController.html
ServiceWorkerWebSettings	A										<section class="prog__container"><p> Manages settings state for all Service Workers. These settings are not tied to the lifetime of any WebView because service workers can outlive WebView instances. The settings are similar to <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebSettings.html"> WebSettings </a> </code></pre> but only settings relevant to Service Workers are supported.</p>\n<pre><code>public abstract class ServiceWorkerWebSettings\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/ServiceWorkerWebSettings.html
SslErrorHandler	A										<section class="prog__container"><p> Represents a request for handling an SSL error. Instances of this class are created by the WebView and passed to <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebViewClient.html#onReceivedSslError(android.webkit.WebView, android.webkit.SslErrorHandler, android.net.http.SslError)"> onReceivedSslError(WebView, SslErrorHandler, SslError) </a> </code></pre> . The host application must call either <pre><code> <a href="https://developer.android.com/reference/android/webkit/SslErrorHandler.html#proceed()"> proceed() </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/webkit/SslErrorHandler.html#cancel()"> cancel() </a> </code></pre> to set the WebView's response to the request.</p>\n<pre><code>public class SslErrorHandler\n</code></pre></section>	https://developer.android.com/reference/android/webkit/SslErrorHandler.html
URLUtil	A										<section class="prog__container"><p> Guesses canonical filename that a download would have, using the URL and contentDisposition.</p>\n<pre><code>public final class URLUtil\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/URLUtil.html
ValueCallback	A										<section class="prog__container"><p> A callback interface used to provide values asynchronously.</p>\n<pre><code>public interface ValueCallback\n</code></pre></section>	https://developer.android.com/reference/android/webkit/ValueCallback.html
WebBackForwardList	A										<section class="prog__container"><p> This class contains the back/forward list for a WebView. WebView.copyBackForwardList() will return a copy of this class used to inspect the entries in the list.</p>\n<pre><code>public abstract class WebBackForwardList\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/WebBackForwardList.html
WebChromeClient.CustomViewCallback	A										<section class="prog__container"><p> A callback interface used by the host application to notify the current page that its custom view has been dismissed.</p>\n<pre><code>public static interface WebChromeClient.CustomViewCallback\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebChromeClient.CustomViewCallback.html
WebChromeClient.FileChooserParams	A										<section class="prog__container"><p> Parameters used in the <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebChromeClient.html#onShowFileChooser(android.webkit.WebView, android.webkit.ValueCallback&lt;android.net.Uri[]&gt;, android.webkit.WebChromeClient.FileChooserParams)"> onShowFileChooser(WebView, ValueCallback <uri[]> , WebChromeClient.FileChooserParams) </uri[]> </a> </code></pre> method.</p>\n<pre><code>public static abstract class WebChromeClient.FileChooserParams\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/WebChromeClient.FileChooserParams.html
WebChromeClient	A										<section class="prog__container"><p> A callback interface used by the host application to notify the current page that its custom view has been dismissed.</p>\n<pre><code>public class WebChromeClient\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/WebChromeClient.html
WebHistoryItem	A										<section class="prog__container"><p> A convenience class for accessing fields in an entry in the back/forward list of a WebView. Each WebHistoryItem is a snapshot of the requested history item. Each history item may be updated during the load of a page.</p>\n<pre><code>public abstract class WebHistoryItem\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/WebHistoryItem.html
WebIconDatabase	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 18. </strong> <br/> This class is only required when running on devices up to <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#JELLY_BEAN_MR2"> JELLY_BEAN_MR2 </a> </code></pre> </p>\n<pre><code>public abstract class WebIconDatabase\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/WebIconDatabase.html
WebIconDatabase.IconListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 18. </strong> <br/> This interface is obsolete. </p>\n<pre><code>public static interface WebIconDatabase.IconListener\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebIconDatabase.IconListener.html
WebMessage	A										<section class="prog__container"><p> The Java representation of the HTML5 PostMessage event. See https://html.spec.whatwg.org/multipage/comms.html#the-messageevent-interfaces for definition of a MessageEvent in HTML5.</p>\n<pre><code>public class WebMessage\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/WebMessage.html
WebMessagePort	A										<section class="prog__container"><p> The Java representation of the <a href="https://html.spec.whatwg.org/multipage/comms.html#messageport"> HTML5 message ports. </a> A Message port represents one endpoint of a Message Channel. In Android webview, there is no separate Message Channel object. When a message channel is created, both ports are tangled to each other and started, and then returned in a MessagePort array, see <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebView.html#createWebMessageChannel()"> createWebMessageChannel() </a> </code></pre> for creating a message channel. When a message port is first created or received via transfer, it does not have a WebMessageCallback to receive web messages. The messages are queued until a WebMessageCallback is set. A message port should be closed when it is not used by the embedder application anymore. A closed port cannot be transferred or cannot be reopened to send messages. Close can be called multiple times. When a port is transferred to JS, it cannot be used to send or receive messages at the Java side anymore. Different from HTML5 Spec, a port cannot be transferred if one of these has ever happened: i. a message callback was set, ii. a message was posted on it. A transferred port cannot be closed by the application, since the ownership is also transferred. It is possible to transfer both ports of a channel to JS, for example for communication between subframes.</p>\n<pre><code>public abstract class WebMessagePort\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/WebMessagePort.html
WebMessagePort.WebMessageCallback	A										<section class="prog__container"><p> The listener for handling MessagePort events. The message callback methods are called on the main thread. If the embedder application wants to receive the messages on a different thread, it can do this by passing a Handler in <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebMessagePort.html#setWebMessageCallback(android.webkit.WebMessagePort.WebMessageCallback, android.os.Handler)"> setWebMessageCallback(WebMessageCallback, Handler) </a> </code></pre> . In the latter case, the application should be extra careful for thread safety since WebMessagePort methods should be called on main thread.</p>\n<pre><code>public static abstract class WebMessagePort.WebMessageCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/WebMessagePort.WebMessageCallback.html
WebResourceError	A										<section class="prog__container"><p> Encapsulates information about errors occured during loading of web resources. See <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebViewClient.html#onReceivedError(android.webkit.WebView, android.webkit.WebResourceRequest, android.webkit.WebResourceError)"> WebViewClient.onReceivedError(WebView, WebResourceRequest, WebResourceError) </a> </code></pre></p>\n<pre><code>public abstract class WebResourceError\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/WebResourceError.html
WebResourceRequest	A										<section class="prog__container"><p> Encompasses parameters to the <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebViewClient.html#shouldInterceptRequest(android.webkit.WebView, android.webkit.WebResourceRequest)"> shouldInterceptRequest(WebView, WebResourceRequest) </a> </code></pre> method.</p>\n<pre><code>public interface WebResourceRequest\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebResourceRequest.html
WebResourceResponse	A										<section class="prog__container"><p> Encapsulates a resource response. Applications can return an instance of this class from <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebViewClient.html#shouldInterceptRequest(android.webkit.WebView, android.webkit.WebResourceRequest)"> shouldInterceptRequest(WebView, WebResourceRequest) </a> </code></pre> to provide a custom response when the WebView requests a particular resource.</p>\n<pre><code>public class WebResourceResponse\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/WebResourceResponse.html
WebSettings	A										<section class="prog__container"><p> Manages settings state for a WebView. When a WebView is first created, it obtains a set of default settings. These default settings will be returned from any getter call. A WebSettings object obtained from WebView.getSettings() is tied to the life of the WebView. If a WebView has been destroyed, any method call on WebSettings will throw an IllegalStateException.</p>\n<pre><code>public abstract class WebSettings\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/WebSettings.html
WebSettings.LayoutAlgorithm	A										<section class="prog__container"><p> Enum for controlling the layout of html. <ul> <li> NORMAL means no rendering changes. This is the recommended choice for maximum compatibility across different platforms and Android versions. </li> <li> SINGLE_COLUMN moves all content into one column that is the width of the view. </li> <li> NARROW_COLUMNS makes all columns no wider than the screen if possible. Only use this for API levels prior to <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#KITKAT"> KITKAT </a> </code></pre> . </li> <li> TEXT_AUTOSIZING boosts font size of paragraphs based on heuristics to make the text readable when viewing a wide-viewport layout in the overview mode. It is recommended to enable zoom support <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebSettings.html#setSupportZoom(boolean)"> setSupportZoom(boolean) </a> </code></pre> when using this mode. Supported from API level <pre><code> <a href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#KITKAT"> KITKAT </a> </code></pre> </li> </ul></p>\n<pre><code>public static final enum WebSettings.LayoutAlgorithm\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebSettings.LayoutAlgorithm.html
WebSettings.PluginState	A										<section class="prog__container"><p> The plugin state effects how plugins are treated on a page. ON means that any object will be loaded even if a plugin does not exist to handle the content. ON_DEMAND means that if there is a plugin installed that can handle the content, a placeholder is shown until the user clicks on the placeholder. Once clicked, the plugin will be enabled on the page. OFF means that all plugins will be turned off and any fallback content will be used.</p>\n<pre><code>public static final enum WebSettings.PluginState\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebSettings.PluginState.html
WebSettings.RenderPriority	A										<section class="prog__container"><p></p>\n<pre><code>public static final enum WebSettings.RenderPriority\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebSettings.RenderPriority.html
WebSettings.TextSize	A										<section class="prog__container"><p> <p class="caution"> <strong> This enum was deprecated in API level 14. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebSettings.html#setTextZoom(int)"> setTextZoom(int) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebSettings.html#getTextZoom()"> getTextZoom() </a> </code></pre> instead. </p>\n<pre><code>public static final enum WebSettings.TextSize\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebSettings.TextSize.html
WebSettings.ZoomDensity	A										<section class="prog__container"><p> Enum for specifying the WebView's desired density. <ul> <li> FAR makes 100% looking like in 240dpi </li> <li> MEDIUM makes 100% looking like in 160dpi </li> <li> CLOSE makes 100% looking like in 120dpi </li> </ul></p>\n<pre><code>public static final enum WebSettings.ZoomDensity\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebSettings.ZoomDensity.html
WebStorage	A										<section class="prog__container"><p> This class is used to manage the JavaScript storage APIs provided by the <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebView.html"> WebView </a> </code></pre> . It manages the Application Cache API, the Web SQL Database API and the HTML5 Web Storage API. The Application Cache API provides a mechanism to create and maintain an application cache to power offline Web applications. Use of the Application Cache API can be attributed to an origin <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebStorage.Origin.html"> WebStorage.Origin </a> </code></pre> , however it is not possible to set per-origin quotas. Note that there can be only one application cache per application. The Web SQL Database API provides storage which is private to a given origin. Similar to the Application Cache, use of the Web SQL Database can be attributed to an origin. It is also possible to set per-origin quotas.</p>\n<pre><code>public class WebStorage\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/WebStorage.html
WebStorage.Origin	A										<section class="prog__container"><p> This class encapsulates information about the amount of storage currently used by an origin for the JavaScript storage APIs. An origin comprises the host, scheme and port of a URI. See <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebStorage.html"> WebStorage </a> </code></pre> for details.</p>\n<pre><code>public static class WebStorage.Origin\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/WebStorage.Origin.html
WebStorage.QuotaUpdater	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 19. </strong> <br/> This class is obsolete and no longer used. </p>\n<pre><code>public static interface WebStorage.QuotaUpdater\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebStorage.QuotaUpdater.html
WebView.FindListener	A										<section class="prog__container"><p> Interface to listen for find results.</p>\n<pre><code>public static interface WebView.FindListener\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebView.FindListener.html
WebView.HitTestResult	A										<section class="prog__container"><p> <em> This constant was deprecated in API level 14. This type is no longer used. </em></p>\n<pre><code>public static class WebView.HitTestResult\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/WebView.HitTestResult.html
WebView	A										<section class="prog__container"><p> <p> A View that displays web pages. This class is the basis upon which you can roll your own web browser or simply display some online content within your Activity. It uses the WebKit rendering engine to display web pages and includes methods to navigate forward and backward through a history, zoom in and out, perform text searches and more. </p>\n<pre><code>public class WebView\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebView.html
WebView.PictureListener	A										<section class="prog__container"><p> <p class="caution"> <strong> This interface was deprecated in API level 12. </strong> <br/> This interface is now obsolete. </p>\n<pre><code>public static interface WebView.PictureListener\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebView.PictureListener.html
WebView.VisualStateCallback	A										<section class="prog__container"><p> Callback interface supplied to <pre><code> <a href="https://developer.android.com/reference/android/webkit/WebView.html#postVisualStateCallback(long, android.webkit.WebView.VisualStateCallback)"> postVisualStateCallback(long, WebView.VisualStateCallback) </a> </code></pre> for receiving notifications about the visual state.</p>\n<pre><code>public static abstract class WebView.VisualStateCallback\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/WebView.VisualStateCallback.html
WebView.WebViewTransport	A										<section class="prog__container"><p> Transportation object for returning WebView across thread boundaries.</p>\n<pre><code>public class WebView.WebViewTransport\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/WebView.WebViewTransport.html
WebViewClient	A										<section class="prog__container"><p> User authentication failed on server</p>\n<pre><code>public class WebViewClient\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/WebViewClient.html
WebViewDatabase	A										<section class="prog__container"><p> This class allows developers to determine whether any WebView used in the application has stored any of the following types of browsing data and to clear any such stored data for all WebViews in the application. <ul> <li> Username/password pairs for web forms </li> <li> HTTP authentication username/password pairs </li> <li> Data entered into text fields (e.g. for autocomplete suggestions) </li> </ul></p>\n<pre><code>public abstract class WebViewDatabase\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/webkit/WebViewDatabase.html
WebViewFragment	A										<section class="prog__container"><p> A fragment that displays a WebView. <p> The WebView is automically paused or resumed when the Fragment is paused or resumed. </p>\n<pre><code>public class WebViewFragment\n</code></pre></section>	https://developer.android.com/reference/android/webkit/WebViewFragment.html
AbsListView	A										<section class="prog__container"><p> Base class that can be used to implement virtualized lists of items. A list does not have a spatial definition here. For instance, subclases of this class can display the content of the list in a grid, in a carousel, as stack, etc.</p>\n<pre><code>public abstract class AbsListView\n</code></pre></section>	https://developer.android.com/reference/android/widget/AbsListView.html
AbsListView.LayoutParams	A										<section class="prog__container"><p> AbsListView extends LayoutParams to provide a place to hold the view type.</p>\n<pre><code>public static class AbsListView.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/AbsListView.LayoutParams.html
AbsListView.MultiChoiceModeListener	A										<section class="prog__container"><p> A MultiChoiceModeListener receives events for <pre><code> <a href="https://developer.android.com/reference/android/widget/AbsListView.html#CHOICE_MODE_MULTIPLE_MODAL"> CHOICE_MODE_MULTIPLE_MODAL </a> </code></pre> . It acts as the <pre><code> <a href="https://developer.android.com/reference/android/view/ActionMode.Callback.html"> ActionMode.Callback </a> </code></pre> for the selection mode and also receives <pre><code> <a href="https://developer.android.com/reference/android/widget/AbsListView.MultiChoiceModeListener.html#onItemCheckedStateChanged(android.view.ActionMode, int, long, boolean)"> onItemCheckedStateChanged(ActionMode, int, long, boolean) </a> </code></pre> events when the user selects and deselects list items.</p>\n<pre><code>public static interface AbsListView.MultiChoiceModeListener\nimplements <a href="https://developer.android.com/reference/android/view/ActionMode.Callback.html">ActionMode.Callback</a></code></pre></section>	https://developer.android.com/reference/android/widget/AbsListView.MultiChoiceModeListener.html
AbsListView.OnScrollListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the list or grid has been scrolled.</p>\n<pre><code>public static interface AbsListView.OnScrollListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/AbsListView.OnScrollListener.html
AbsListView.RecyclerListener	A										<section class="prog__container"><p> A RecyclerListener is used to receive a notification whenever a View is placed inside the RecycleBin's scrap heap. This listener is used to free resources associated to Views placed in the RecycleBin.</p>\n<pre><code>public static interface AbsListView.RecyclerListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/AbsListView.RecyclerListener.html
AbsListView.SelectionBoundsAdjuster	A										<section class="prog__container"><p> The top-level view of a list item can implement this interface to allow itself to modify the bounds of the selection shown for that item.</p>\n<pre><code>public static interface AbsListView.SelectionBoundsAdjuster\n</code></pre></section>	https://developer.android.com/reference/android/widget/AbsListView.SelectionBoundsAdjuster.html
AbsoluteLayout	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 3. </strong> <br/> Use <pre><code> <a href="https://developer.android.com/reference/android/widget/FrameLayout.html"> FrameLayout </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/widget/RelativeLayout.html"> RelativeLayout </a> </code></pre> or a custom layout instead. </p>\n<pre><code>public class AbsoluteLayout\n</code></pre></section>	https://developer.android.com/reference/android/widget/AbsoluteLayout.html
AbsoluteLayout.LayoutParams	A										<section class="prog__container"><p> Per-child layout information associated with AbsoluteLayout. See <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#AbsoluteLayout_Layout"> Absolute Layout Attributes </a> </code></pre> for a list of all child view attributes that this class supports.</p>\n<pre><code>public static class AbsoluteLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/AbsoluteLayout.LayoutParams.html
AbsSeekBar	A										<section class="prog__container"><p> Must be an integer value, such as " <pre><code> 100 </code></pre> ".</p>\n<pre><code>public abstract class AbsSeekBar\n</code></pre></section>	https://developer.android.com/reference/android/widget/AbsSeekBar.html
AbsSpinner	A										<section class="prog__container"><p> An abstract base class for spinner widgets. SDK users will probably not need to use this class.</p>\n<pre><code>public abstract class AbsSpinner\n</code></pre></section>	https://developer.android.com/reference/android/widget/AbsSpinner.html
ActionMenuView	A										<section class="prog__container"><p> ActionMenuView is a presentation of a series of menu options as a View. It provides several top level options as action buttons while spilling remaining options over as items in an overflow menu. This allows applications to present packs of actions inline with specific or repeating content.</p>\n<pre><code>public class ActionMenuView\n</code></pre></section>	https://developer.android.com/reference/android/widget/ActionMenuView.html
ActionMenuView.LayoutParams	A										<section class="prog__container"><p> Special value for the height or width requested by a View.</p>\n<pre><code>public static class ActionMenuView.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/ActionMenuView.LayoutParams.html
ActionMenuView.OnMenuItemClickListener	A										<section class="prog__container"><p> Interface responsible for receiving menu item click events if the items themselves do not have individual item click listeners.</p>\n<pre><code>public static interface ActionMenuView.OnMenuItemClickListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/ActionMenuView.OnMenuItemClickListener.html
Adapter	A										<section class="prog__container"><p> An Adapter object acts as a bridge between an <pre><code> <a href="https://developer.android.com/reference/android/widget/AdapterView.html"> AdapterView </a> </code></pre> and the underlying data for that view. The Adapter provides access to the data items. The Adapter is also responsible for making a <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> for each item in the data set.</p>\n<pre><code>public interface Adapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/Adapter.html
AdapterView.AdapterContextMenuInfo	A										<section class="prog__container"><p> Extra menu information provided to the <pre><code> <a href="https://developer.android.com/reference/android/view/View.OnCreateContextMenuListener.html#onCreateContextMenu(android.view.ContextMenu, android.view.View, android.view.ContextMenu.ContextMenuInfo)"> onCreateContextMenu(ContextMenu, View, ContextMenuInfo) </a> </code></pre> callback when a context menu is brought up for this AdapterView.</p>\n<pre><code>public static class AdapterView.AdapterContextMenuInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/AdapterView.AdapterContextMenuInfo.html
AdapterView	A										<section class="prog__container"><p> An AdapterView is a view whose children are determined by an <pre><code> <a href="https://developer.android.com/reference/android/widget/Adapter.html"> Adapter </a> </code></pre> . <p> See <pre><code> <a href="https://developer.android.com/reference/android/widget/ListView.html"> ListView </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/widget/GridView.html"> GridView </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/widget/Spinner.html"> Spinner </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/widget/Gallery.html"> Gallery </a> </code></pre> for commonly used subclasses of AdapterView. </p>\n<pre><code>public abstract class AdapterView\n</code></pre></section>	https://developer.android.com/reference/android/widget/AdapterView.html
AdapterView.OnItemClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when an item in this AdapterView has been clicked.</p>\n<pre><code>public static interface AdapterView.OnItemClickListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/AdapterView.OnItemClickListener.html
AdapterView.OnItemLongClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when an item in this view has been clicked and held.</p>\n<pre><code>public static interface AdapterView.OnItemLongClickListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/AdapterView.OnItemLongClickListener.html
AdapterView.OnItemSelectedListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when an item in this view has been selected.</p>\n<pre><code>public static interface AdapterView.OnItemSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/AdapterView.OnItemSelectedListener.html
AdapterViewAnimator	A										<section class="prog__container"><p> Base class for a <pre><code> <a href="https://developer.android.com/reference/android/widget/AdapterView.html"> AdapterView </a> </code></pre> that will perform animations when switching between its views.</p>\n<pre><code>public abstract class AdapterViewAnimator\n</code></pre></section>	https://developer.android.com/reference/android/widget/AdapterViewAnimator.html
AdapterViewFlipper	A										<section class="prog__container"><p> Simple <pre><code> <a href="https://developer.android.com/reference/android/widget/ViewAnimator.html"> ViewAnimator </a> </code></pre> that will animate between two or more views that have been added to it. Only one child is shown at a time. If requested, can automatically flip between each child at a regular interval.</p>\n<pre><code>public class AdapterViewFlipper\n</code></pre></section>	https://developer.android.com/reference/android/widget/AdapterViewFlipper.html
Advanceable	A										<section class="prog__container"><p> This interface can be implemented by any collection-type view which has a notion of progressing through its set of children. The interface exists to give AppWidgetHosts a way of taking responsibility for automatically advancing such collections.</p>\n<pre><code>public interface Advanceable\n</code></pre></section>	https://developer.android.com/reference/android/widget/Advanceable.html
AlphabetIndexer	A										<section class="prog__container"><p> A helper class for adapters that implement the SectionIndexer interface. If the items in the adapter are sorted by simple alphabet-based sorting, then this class provides a way to do fast indexing of large lists using binary search. It caches the indices that have been determined through the binary search and also invalidates the cache if changes occur in the cursor. <p> </p>\n<pre><code>public class AlphabetIndexer\n</code></pre></section>	https://developer.android.com/reference/android/widget/AlphabetIndexer.html
AnalogClock	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 23. </strong> <br/> This widget is no longer supported. </p>\n<pre><code>public class AnalogClock\n</code></pre></section>	https://developer.android.com/reference/android/widget/AnalogClock.html
ArrayAdapter	A										<section class="prog__container"><p> A concrete BaseAdapter that is backed by an array of arbitrary objects. By default this class expects that the provided resource id references a single TextView. If you want to use a more complex layout, use the constructors that also takes a field id. That field id should reference a TextView in the larger layout resource. <p> However the TextView is referenced, it will be filled with the toString() of each object in the array. You can add lists or arrays of custom objects. Override the toString() method of your objects to determine what text will be displayed for the item in the list. <p> To use something other than TextViews for the array display, for instance, ImageViews, or to have some of data besides toString() results fill the views, override <pre><code> <a href="https://developer.android.com/reference/android/widget/ArrayAdapter.html#getView(int, android.view.View, android.view.ViewGroup)"> getView(int, View, ViewGroup) </a> </code></pre> to return the type of view you want. </p>\n<pre><code>public class ArrayAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/ArrayAdapter.html
AutoCompleteTextView	A										<section class="prog__container"><p> <p> An editable text view that shows completion suggestions automatically while the user is typing. The list of suggestions is displayed in a drop down menu from which the user can choose an item to replace the content of the edit box with. </p>\n<pre><code>public class AutoCompleteTextView\n</code></pre></section>	https://developer.android.com/reference/android/widget/AutoCompleteTextView.html
AutoCompleteTextView.OnDismissListener	A										<section class="prog__container"><p> Listener to respond to the AutoCompleteTextView's completion list being dismissed.</p>\n<pre><code>public static interface AutoCompleteTextView.OnDismissListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/AutoCompleteTextView.OnDismissListener.html
AutoCompleteTextView.Validator	A										<section class="prog__container"><p> This interface is used to make sure that the text entered in this TextView complies to a certain format. Since there is no foolproof way to prevent the user from leaving this View with an incorrect value in it, all we can do is try to fix it ourselves when this happens.</p>\n<pre><code>public static interface AutoCompleteTextView.Validator\n</code></pre></section>	https://developer.android.com/reference/android/widget/AutoCompleteTextView.Validator.html
BaseAdapter	A										<section class="prog__container"><p> Common base class of common implementation for an <pre><code> <a href="https://developer.android.com/reference/android/widget/Adapter.html"> Adapter </a> </code></pre> that can be used in both <pre><code> <a href="https://developer.android.com/reference/android/widget/ListView.html"> ListView </a> </code></pre> (by implementing the specialized <pre><code> <a href="https://developer.android.com/reference/android/widget/ListAdapter.html"> ListAdapter </a> </code></pre> interface) and <pre><code> <a href="https://developer.android.com/reference/android/widget/Spinner.html"> Spinner </a> </code></pre> (by implementing the specialized <pre><code> <a href="https://developer.android.com/reference/android/widget/SpinnerAdapter.html"> SpinnerAdapter </a> </code></pre> interface).</p>\n<pre><code>public abstract class BaseAdapter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/BaseAdapter.html
BaseExpandableListAdapter	A										<section class="prog__container"><p> Base class for a <pre><code> <a href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html"> ExpandableListAdapter </a> </code></pre> used to provide data and Views from some data to an expandable list view. <p> Adapters inheriting this class should verify that the base implementations of <pre><code> <a href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getCombinedChildId(long, long)"> getCombinedChildId(long, long) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getCombinedGroupId(long)"> getCombinedGroupId(long) </a> </code></pre> are correct in generating unique IDs from the group/children IDs. <p> </p>\n<pre><code>public abstract class BaseExpandableListAdapter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html
Button	A										<section class="prog__container"><p> Represents a push-button widget. Push-buttons can be pressed, or clicked, by the user to perform an action. <p> A typical use of a push-button in an activity would be the following: </p>\n<pre><code>public class Button\n</code></pre></section>	https://developer.android.com/reference/android/widget/Button.html
CalendarView	A										<section class="prog__container"><p> This class is a calendar widget for displaying and selecting dates. The range of dates supported by this calendar is configurable. <p> The exact appearance and interaction model of this widget may vary between OS versions and themes (e.g. Holo versus Material), but in general a user can select a date by tapping on it and can scroll or fling the calendar to a desired date. </p>\n<pre><code>public class CalendarView\n</code></pre></section>	https://developer.android.com/reference/android/widget/CalendarView.html
CalendarView.OnDateChangeListener	A										<section class="prog__container"><p> The callback used to indicate the user changes the date.</p>\n<pre><code>public static interface CalendarView.OnDateChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/CalendarView.OnDateChangeListener.html
Checkable	A										<section class="prog__container"><p> Defines an extension for views that make them checkable.</p>\n<pre><code>public interface Checkable\n</code></pre></section>	https://developer.android.com/reference/android/widget/Checkable.html
CheckBox	A										<section class="prog__container"><p> <p> A checkbox is a specific type of two-states button that can be either checked or unchecked. A example usage of a checkbox inside your activity would be the following: </p>\n<pre><code>public class CheckBox\n</code></pre></section>	https://developer.android.com/reference/android/widget/CheckBox.html
CheckedTextView	A										<section class="prog__container"><p> An extension to <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html"> TextView </a> </code></pre> that supports the <pre><code> <a href="https://developer.android.com/reference/android/widget/Checkable.html"> Checkable </a> </code></pre> interface and displays. <p> This is useful when used in a <pre><code> <a href="https://developer.android.com/reference/android/widget/ListView.html"> ListView </a> </code></pre> where the <pre><code> <a href="https://developer.android.com/reference/android/widget/AbsListView.html#setChoiceMode(int)"> setChoiceMode </a> </code></pre> has been set to something other than <pre><code> <a href="https://developer.android.com/reference/android/widget/AbsListView.html#CHOICE_MODE_NONE"> CHOICE_MODE_NONE </a> </code></pre> . </p>\n<pre><code>public class CheckedTextView\n</code></pre></section>	https://developer.android.com/reference/android/widget/CheckedTextView.html
Chronometer	A										<section class="prog__container"><p> Class that implements a simple timer. <p> You can give it a start time in the <pre><code> <a href="https://developer.android.com/reference/android/os/SystemClock.html#elapsedRealtime()"> elapsedRealtime() </a> </code></pre> timebase, and it counts up from that, or if you don't give it a base time, it will use the time at which you call <pre><code> <a href="https://developer.android.com/reference/android/widget/Chronometer.html#start()"> start() </a> </code></pre> . <p> The timer can also count downward towards the base time by setting <pre><code> <a href="https://developer.android.com/reference/android/widget/Chronometer.html#setCountDown(boolean)"> setCountDown(boolean) </a> </code></pre> to true. <p> By default it will display the current timer value in the form "MM:SS" or "H:MM:SS", or you can use <pre><code> <a href="https://developer.android.com/reference/android/widget/Chronometer.html#setFormat(java.lang.String)"> setFormat(String) </a> </code></pre> to format the timer value into an arbitrary string. </p>\n<pre><code>public class Chronometer\n</code></pre></section>	https://developer.android.com/reference/android/widget/Chronometer.html
Chronometer.OnChronometerTickListener	A										<section class="prog__container"><p> A callback that notifies when the chronometer has incremented on its own.</p>\n<pre><code>public static interface Chronometer.OnChronometerTickListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/Chronometer.OnChronometerTickListener.html
CompoundButton	A										<section class="prog__container"><p> <p> A button with two states, checked and unchecked. When the button is pressed or clicked, the state changes automatically. </p>\n<pre><code>public abstract class CompoundButton\n</code></pre></section>	https://developer.android.com/reference/android/widget/CompoundButton.html
CompoundButton.OnCheckedChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when the checked state of a compound button changed.</p>\n<pre><code>public static interface CompoundButton.OnCheckedChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/CompoundButton.OnCheckedChangeListener.html
CursorAdapter	A										<section class="prog__container"><p> Adapter that exposes data from a <pre><code> <a href="https://developer.android.com/reference/android/database/Cursor.html"> Cursor </a> </code></pre> to a <pre><code> <a href="https://developer.android.com/reference/android/widget/ListView.html"> ListView </a> </code></pre> widget. <p> The Cursor must include a column named "_id" or this class will not work. Additionally, using <pre><code> <a href="https://developer.android.com/reference/android/database/MergeCursor.html"> MergeCursor </a> </code></pre> with this class will not work if the merged Cursors have overlapping values in their "_id" columns. </p>\n<pre><code>public abstract class CursorAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/CursorAdapter.html
CursorTreeAdapter	A										<section class="prog__container"><p> An adapter that exposes data from a series of <pre><code> <a href="https://developer.android.com/reference/android/database/Cursor.html"> Cursor </a> </code></pre> s to an <pre><code> <a href="https://developer.android.com/reference/android/widget/ExpandableListView.html"> ExpandableListView </a> </code></pre> widget. The top-level <pre><code> <a href="https://developer.android.com/reference/android/database/Cursor.html"> Cursor </a> </code></pre> (that is given in the constructor) exposes the groups, while subsequent <pre><code> <a href="https://developer.android.com/reference/android/database/Cursor.html"> Cursor </a> </code></pre> s returned from <pre><code> <a href="https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#getChildrenCursor(android.database.Cursor)"> getChildrenCursor(Cursor) </a> </code></pre> expose children within a particular group. The Cursors must include a column named "_id" or this class will not work.</p>\n<pre><code>public abstract class CursorTreeAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/CursorTreeAdapter.html
DatePicker	A										<section class="prog__container"><p> Provides a widget for selecting a date. <p> When the <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#DatePicker_datePickerMode"> DatePicker_datePickerMode </a> </code></pre> attribute is set to <pre><code> spinner </code></pre> , the date can be selected using year, month, and day spinners or a <pre><code> <a href="https://developer.android.com/reference/android/widget/CalendarView.html"> CalendarView </a> </code></pre> . The set of spinners and the calendar view are automatically synchronized. The client can customize whether only the spinners, or only the calendar view, or both to be displayed. </p>\n<pre><code>public class DatePicker\n</code></pre></section>	https://developer.android.com/reference/android/widget/DatePicker.html
DatePicker.OnDateChangedListener	A										<section class="prog__container"><p> The callback used to indicate the user changed the date.</p>\n<pre><code>public static interface DatePicker.OnDateChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/DatePicker.OnDateChangedListener.html
DialerFilter	A										<section class="prog__container"><p> Must be a dimension value, which is a floating point number appended with a unit such as " <pre><code> 14.5sp </code></pre> ".</p>\n<pre><code>public class DialerFilter\n</code></pre></section>	https://developer.android.com/reference/android/widget/DialerFilter.html
DigitalClock	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 17. </strong> <br/> It is recommended you use <pre><code> <a href="https://developer.android.com/reference/android/widget/TextClock.html"> TextClock </a> </code></pre> instead. </p>\n<pre><code>public class DigitalClock\n</code></pre></section>	https://developer.android.com/reference/android/widget/DigitalClock.html
EdgeEffect	A										<section class="prog__container"><p> This class performs the graphical effect used at the edges of scrollable widgets when the user scrolls beyond the content bounds in 2D space. <p> EdgeEffect is stateful. Custom widgets using EdgeEffect should create an instance for each edge that should show the effect, feed it input data using the methods <pre><code> <a href="https://developer.android.com/reference/android/widget/EdgeEffect.html#onAbsorb(int)"> onAbsorb(int) </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/widget/EdgeEffect.html#onPull(float)"> onPull(float) </a> </code></pre> , and <pre><code> <a href="https://developer.android.com/reference/android/widget/EdgeEffect.html#onRelease()"> onRelease() </a> </code></pre> , and draw the effect using <pre><code> <a href="https://developer.android.com/reference/android/widget/EdgeEffect.html#draw(android.graphics.Canvas)"> draw(Canvas) </a> </code></pre> in the widget's overridden <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#draw(android.graphics.Canvas)"> draw(Canvas) </a> </code></pre> method. If <pre><code> <a href="https://developer.android.com/reference/android/widget/EdgeEffect.html#isFinished()"> isFinished() </a> </code></pre> returns false after drawing, the edge effect's animation is not yet complete and the widget should schedule another drawing pass to continue the animation. </p>\n<pre><code>public class EdgeEffect\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/EdgeEffect.html
EditText	A										<section class="prog__container"><p> EditText is a thin veneer over TextView that configures itself to be editable. <p> See the <a href="https://developer.android.com/guide/topics/ui/controls/text.html"> Text Fields </a> guide. </p>\n<pre><code>public class EditText\n</code></pre></section>	https://developer.android.com/reference/android/widget/EditText.html
ExpandableListAdapter	A										<section class="prog__container"><p> An adapter that links a <pre><code> <a href="https://developer.android.com/reference/android/widget/ExpandableListView.html"> ExpandableListView </a> </code></pre> with the underlying data. The implementation of this interface will provide access to the data of the children (categorized by groups), and also instantiate <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> s for children and groups.</p>\n<pre><code>public interface ExpandableListAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/ExpandableListAdapter.html
ExpandableListView.ExpandableListContextMenuInfo	A										<section class="prog__container"><p> Extra menu information specific to an <pre><code> <a href="https://developer.android.com/reference/android/widget/ExpandableListView.html"> ExpandableListView </a> </code></pre> provided to the <pre><code> <a href="https://developer.android.com/reference/android/view/View.OnCreateContextMenuListener.html#onCreateContextMenu(android.view.ContextMenu, android.view.View, android.view.ContextMenu.ContextMenuInfo)"> onCreateContextMenu(ContextMenu, View, ContextMenuInfo) </a> </code></pre> callback when a context menu is brought up for this AdapterView.</p>\n<pre><code>public static class ExpandableListView.ExpandableListContextMenuInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/ExpandableListView.ExpandableListContextMenuInfo.html
ExpandableListView	A										<section class="prog__container"><p> A view that shows items in a vertically scrolling two-level list. This differs from the <pre><code> <a href="https://developer.android.com/reference/android/widget/ListView.html"> ListView </a> </code></pre> by allowing two levels: groups which can individually be expanded to show its children. The items come from the <pre><code> <a href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html"> ExpandableListAdapter </a> </code></pre> associated with this view. <p> Expandable lists are able to show an indicator beside each item to display the item's current state (the states are usually one of expanded group, collapsed group, child, or last child). Use <pre><code> <a href="https://developer.android.com/reference/android/widget/ExpandableListView.html#setChildIndicator(android.graphics.drawable.Drawable)"> setChildIndicator(Drawable) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/widget/ExpandableListView.html#setGroupIndicator(android.graphics.drawable.Drawable)"> setGroupIndicator(Drawable) </a> </code></pre> (or the corresponding XML attributes) to set these indicators (see the docs for each method to see additional state that each Drawable can have). The default style for an <pre><code> <a href="https://developer.android.com/reference/android/widget/ExpandableListView.html"> ExpandableListView </a> </code></pre> provides indicators which will be shown next to Views given to the <pre><code> <a href="https://developer.android.com/reference/android/widget/ExpandableListView.html"> ExpandableListView </a> </code></pre> . The layouts android.R.layout.simple_expandable_list_item_1 and android.R.layout.simple_expandable_list_item_2 (which should be used with <pre><code> <a href="https://developer.android.com/reference/android/widget/SimpleCursorTreeAdapter.html"> SimpleCursorTreeAdapter </a> </code></pre> ) contain the preferred position information for indicators. <p> The context menu information set by an <pre><code> <a href="https://developer.android.com/reference/android/widget/ExpandableListView.html"> ExpandableListView </a> </code></pre> will be a <pre><code> <a href="https://developer.android.com/reference/android/widget/ExpandableListView.ExpandableListContextMenuInfo.html"> ExpandableListView.ExpandableListContextMenuInfo </a> </code></pre> object with <pre><code> <a href="https://developer.android.com/reference/android/widget/ExpandableListView.ExpandableListContextMenuInfo.html#packedPosition"> packedPosition </a> </code></pre> being a packed position that can be used with <pre><code> <a href="https://developer.android.com/reference/android/widget/ExpandableListView.html#getPackedPositionType(long)"> getPackedPositionType(long) </a> </code></pre> and the other similar methods. <p> <em> <b> Note: </b> </em> You cannot use the value <pre><code> wrap_content </code></pre> for the <pre><code> android:layout_height </code></pre> attribute of a ExpandableListView in XML if the parent's size is also not strictly specified (for example, if the parent were ScrollView you could not specify wrap_content since it also can be any length. However, you can use wrap_content if the ExpandableListView parent has a specific size, such as 100 pixels. </p>\n<pre><code>public class ExpandableListView\n</code></pre></section>	https://developer.android.com/reference/android/widget/ExpandableListView.html
ExpandableListView.OnChildClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a child in this expandable list has been clicked.</p>\n<pre><code>public static interface ExpandableListView.OnChildClickListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/ExpandableListView.OnChildClickListener.html
ExpandableListView.OnGroupClickListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when a group in this expandable list has been clicked.</p>\n<pre><code>public static interface ExpandableListView.OnGroupClickListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/ExpandableListView.OnGroupClickListener.html
ExpandableListView.OnGroupCollapseListener	A										<section class="prog__container"><p> Used for being notified when a group is collapsed</p>\n<pre><code>public static interface ExpandableListView.OnGroupCollapseListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/ExpandableListView.OnGroupCollapseListener.html
ExpandableListView.OnGroupExpandListener	A										<section class="prog__container"><p> Used for being notified when a group is expanded</p>\n<pre><code>public static interface ExpandableListView.OnGroupExpandListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/ExpandableListView.OnGroupExpandListener.html
Filter.FilterListener	A										<section class="prog__container"><p> <p> Listener used to receive a notification upon completion of a filtering operation. </p>\n<pre><code>public static interface Filter.FilterListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/Filter.FilterListener.html
Filter.FilterResults	A										<section class="prog__container"><p> <p> Holds the results of a filtering operation. The results are the values computed by the filtering operation and the number of these values. </p>\n<pre><code>protected static class Filter.FilterResults\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/Filter.FilterResults.html
Filter	A										<section class="prog__container"><p> <p> A filter constrains data with a filtering pattern. </p>\n<pre><code>public abstract class Filter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/Filter.html
Filterable	A										<section class="prog__container"><p> <p> Defines a filterable behavior. A filterable class can have its data constrained by a filter. Filterable classes are usually <pre><code> <a href="https://developer.android.com/reference/android/widget/Adapter.html"> Adapter </a> </code></pre> implementations. </p>\n<pre><code>public interface Filterable\n</code></pre></section>	https://developer.android.com/reference/android/widget/Filterable.html
FilterQueryProvider	A										<section class="prog__container"><p> This class can be used by external clients of CursorAdapter and CursorTreeAdapter to define how the content of the adapter should be filtered.</p>\n<pre><code>public interface FilterQueryProvider\n</code></pre></section>	https://developer.android.com/reference/android/widget/FilterQueryProvider.html
FrameLayout	A										<section class="prog__container"><p> FrameLayout is designed to block out an area on the screen to display a single item. Generally, FrameLayout should be used to hold a single child view, because it can be difficult to organize child views in a way that's scalable to different screen sizes without the children overlapping each other. You can, however, add multiple children to a FrameLayout and control their position within the FrameLayout by assigning gravity to each child, using the <a href="https://developer.android.com/reference/android/widget/FrameLayout.LayoutParams.html#attr_android:layout_gravity"> <pre><code> android:layout_gravity </code></pre> </a> attribute. <p> Child views are drawn in a stack, with the most recently added child on top. The size of the FrameLayout is the size of its largest child (plus padding), visible or not (if the FrameLayout's parent permits). Views that are <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#GONE"> GONE </a> </code></pre> are used for sizing only if <pre><code> <a href="https://developer.android.com/reference/android/widget/FrameLayout.html#setMeasureAllChildren(boolean)"> setConsiderGoneChildrenWhenMeasuring() </a> </code></pre> is set to true. </p>\n<pre><code>public class FrameLayout\n</code></pre></section>	https://developer.android.com/reference/android/widget/FrameLayout.html
FrameLayout.LayoutParams	A										<section class="prog__container"><p> Per-child layout information for layouts that support margins. See <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#FrameLayout_Layout"> FrameLayout Layout Attributes </a> </code></pre> for a list of all child view attributes that this class supports.</p>\n<pre><code>public static class FrameLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/FrameLayout.LayoutParams.html
Gallery	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 16. </strong> <br/> This widget is no longer supported. Other horizontally scrolling widgets include <pre><code> <a href="https://developer.android.com/reference/android/widget/HorizontalScrollView.html"> HorizontalScrollView </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/support/v4/view/ViewPager.html"> ViewPager </a> </code></pre> from the support library. </p>\n<pre><code>public class Gallery\n</code></pre></section>	https://developer.android.com/reference/android/widget/Gallery.html
Gallery.LayoutParams	A										<section class="prog__container"><p> Gallery extends LayoutParams to provide a place to hold current Transformation information along with previous position/transformation info.</p>\n<pre><code>public static class Gallery.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/Gallery.LayoutParams.html
GridLayout.Alignment	A										<section class="prog__container"><p> Alignments specify where a view should be placed within a cell group and what size it should be. <p> The <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html"> GridLayout.LayoutParams </a> </code></pre> class contains a <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html#rowSpec"> rowSpec </a> </code></pre> and a <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html#columnSpec"> columnSpec </a> </code></pre> each of which contains an <pre><code> alignment </code></pre> . Overall placement of the view in the cell group is specified by the two alignments which act along each axis independently. <p> The GridLayout class defines the most common alignments used in general layout: <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#TOP"> TOP </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#LEFT"> LEFT </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#BOTTOM"> BOTTOM </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#RIGHT"> RIGHT </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#START"> START </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#END"> END </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#CENTER"> CENTER </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#BASELINE"> BASELINE </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#FILL"> FILL </a> </code></pre> . </p>\n<pre><code>public static abstract class GridLayout.Alignment\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/GridLayout.Alignment.html
GridLayout	A										<section class="prog__container"><p> A layout that places its children in a rectangular <em> grid </em> . <p> The grid is composed of a set of infinitely thin lines that separate the viewing area into <em> cells </em> . Throughout the API, grid lines are referenced by grid <em> indices </em> . A grid with <pre><code> N </code></pre> columns has <pre><code> N + 1 </code></pre> grid indices that run from <pre><code> 0 </code></pre> through <pre><code> N </code></pre> inclusive. Regardless of how GridLayout is configured, grid index <pre><code> 0 </code></pre> is fixed to the leading edge of the container and grid index <pre><code> N </code></pre> is fixed to its trailing edge (after padding is taken into account). <h4> Row and Column Specs </h4> Children occupy one or more contiguous cells, as defined by their <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html#rowSpec"> rowSpec </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html#columnSpec"> columnSpec </a> </code></pre> layout parameters. Each spec defines the set of rows or columns that are to be occupied; and how children should be aligned within the resulting group of cells. Although cells do not normally overlap in a GridLayout, GridLayout does not prevent children being defined to occupy the same cell or group of cells. In this case however, there is no guarantee that children will not themselves overlap after the layout operation completes. <h4> Default Cell Assignment </h4> If a child does not specify the row and column indices of the cell it wishes to occupy, GridLayout assigns cell locations automatically using its: <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#setOrientation(int)"> orientation </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#setRowCount(int)"> rowCount </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#setColumnCount(int)"> columnCount </a> </code></pre> properties. <h4> Space </h4> Space between children may be specified either by using instances of the dedicated <pre><code> <a href="https://developer.android.com/reference/android/widget/Space.html"> Space </a> </code></pre> view or by setting the <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#leftMargin"> leftMargin </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#topMargin"> topMargin </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#rightMargin"> rightMargin </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#bottomMargin"> bottomMargin </a> </code></pre> layout parameters. When the <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#setUseDefaultMargins(boolean)"> useDefaultMargins </a> </code></pre> property is set, default margins around children are automatically allocated based on the prevailing UI style guide for the platform. Each of the margins so defined may be independently overridden by an assignment to the appropriate layout parameter. Default values will generally produce a reasonable spacing between components but values may change between different releases of the platform. <h4> Excess Space Distribution </h4> As of API 21, GridLayout's distribution of excess space accomodates the principle of weight. In the event that no weights are specified, the previous conventions are respected and columns and rows are taken as flexible if their views specify some form of alignment within their groups. <p> The flexibility of a view is therefore influenced by its alignment which is, in turn, typically defined by setting the <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html#setGravity(int)"> gravity </a> </code></pre> property of the child's layout parameters. If either a weight or alignment were defined along a given axis then the component is taken as <em> flexible </em> in that direction. If no weight or alignment was set, the component is instead assumed to be <em> inflexible </em> . <p> Multiple components in the same row or column group are considered to act in <em> parallel </em> . Such a group is flexible only if <em> all </em> of the components within it are flexible. Row and column groups that sit either side of a common boundary are instead considered to act in <em> series </em> . The composite group made of these two elements is flexible if <em> one </em> of its elements is flexible. <p> To make a column stretch, make sure all of the components inside it define a weight or a gravity. To prevent a column from stretching, ensure that one of the components in the column does not define a weight or a gravity. <p> When the principle of flexibility does not provide complete disambiguation, GridLayout's algorithms favour rows and columns that are closer to its <em> right </em> and <em> bottom </em> edges. To be more precise, GridLayout treats each of its layout parameters as a constraint in the a set of variables that define the grid-lines along a given axis. During layout, GridLayout solves the constraints so as to return the unique solution to those constraints for which all variables are less-than-or-equal-to the corresponding value in any other valid solution. <h4> Interpretation of GONE </h4> For layout purposes, GridLayout treats views whose visibility status is <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#GONE"> GONE </a> </code></pre> , as having zero width and height. This is subtly different from the policy of ignoring views that are marked as GONE outright. If, for example, a gone-marked view was alone in a column, that column would itself collapse to zero width if and only if no gravity was defined on the view. If gravity was defined, then the gone-marked view has no effect on the layout and the container should be laid out as if the view had never been added to it. GONE views are taken to have zero weight during excess space distribution. <p> These statements apply equally to rows as well as columns, and to groups of rows or columns. <p> See <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html"> GridLayout.LayoutParams </a> </code></pre> for a full description of the layout parameters used by GridLayout. </p>\n<pre><code>public class GridLayout\n</code></pre></section>	https://developer.android.com/reference/android/widget/GridLayout.html
GridLayout.LayoutParams	A										<section class="prog__container"><p> Layout information associated with each of the children of a GridLayout. <p> GridLayout supports both row and column spanning and arbitrary forms of alignment within each cell group. The fundamental parameters associated with each cell group are gathered into their vertical and horizontal components and stored in the <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html#rowSpec"> rowSpec </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html#columnSpec"> columnSpec </a> </code></pre> layout parameters. <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.Spec.html"> Specs </a> </code></pre> are immutable structures and may be shared between the layout parameters of different children. <p> The row and column specs contain the leading and trailing indices along each axis and together specify the four grid indices that delimit the cells of this cell group. <p> The alignment properties of the row and column specs together specify both aspects of alignment within the cell group. It is also possible to specify a child's alignment within its cell group by using the <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html#setGravity(int)"> setGravity(int) </a> </code></pre> method. <p> The weight property is also included in Spec and specifies the proportion of any excess space that is due to the associated view. <h4> WRAP_CONTENT and MATCH_PARENT </h4> Because the default values of the <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#width"> width </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#height"> height </a> </code></pre> properties are both <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#WRAP_CONTENT"> WRAP_CONTENT </a> </code></pre> , this value never needs to be explicitly declared in the layout parameters of GridLayout's children. In addition, GridLayout does not distinguish the special size value <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#MATCH_PARENT"> MATCH_PARENT </a> </code></pre> from <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#WRAP_CONTENT"> WRAP_CONTENT </a> </code></pre> . A component's ability to expand to the size of the parent is instead controlled by the principle of <em> flexibility </em> , as discussed in <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html"> GridLayout </a> </code></pre> . <h4> Summary </h4> You should not need to use either of the special size values: <pre><code> WRAP_CONTENT </code></pre> or <pre><code> MATCH_PARENT </code></pre> when configuring the children of a GridLayout. <h4> Default values </h4> <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#width"> width </a> </code></pre> = <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#WRAP_CONTENT"> WRAP_CONTENT </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#height"> height </a> </code></pre> = <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#WRAP_CONTENT"> WRAP_CONTENT </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#topMargin"> topMargin </a> </code></pre> = 0 when <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#setUseDefaultMargins(boolean)"> useDefaultMargins </a> </code></pre> is <pre><code> false </code></pre> ; otherwise <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#UNDEFINED"> UNDEFINED </a> </code></pre> , to indicate that a default value should be computed on demand. </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#leftMargin"> leftMargin </a> </code></pre> = 0 when <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#setUseDefaultMargins(boolean)"> useDefaultMargins </a> </code></pre> is <pre><code> false </code></pre> ; otherwise <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#UNDEFINED"> UNDEFINED </a> </code></pre> , to indicate that a default value should be computed on demand. </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#bottomMargin"> bottomMargin </a> </code></pre> = 0 when <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#setUseDefaultMargins(boolean)"> useDefaultMargins </a> </code></pre> is <pre><code> false </code></pre> ; otherwise <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#UNDEFINED"> UNDEFINED </a> </code></pre> , to indicate that a default value should be computed on demand. </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#rightMargin"> rightMargin </a> </code></pre> = 0 when <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#setUseDefaultMargins(boolean)"> useDefaultMargins </a> </code></pre> is <pre><code> false </code></pre> ; otherwise <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#UNDEFINED"> UNDEFINED </a> </code></pre> , to indicate that a default value should be computed on demand. </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html#rowSpec"> rowSpec </a> </code></pre> <pre><code> .row </code></pre> = <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#UNDEFINED"> UNDEFINED </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html#rowSpec"> rowSpec </a> </code></pre> <pre><code> .rowSpan </code></pre> = 1 </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html#rowSpec"> rowSpec </a> </code></pre> <pre><code> .alignment </code></pre> = <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#BASELINE"> BASELINE </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html#rowSpec"> rowSpec </a> </code></pre> <pre><code> .weight </code></pre> = 0 </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html#columnSpec"> columnSpec </a> </code></pre> <pre><code> .column </code></pre> = <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#UNDEFINED"> UNDEFINED </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html#columnSpec"> columnSpec </a> </code></pre> <pre><code> .columnSpan </code></pre> = 1 </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html#columnSpec"> columnSpec </a> </code></pre> <pre><code> .alignment </code></pre> = <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#START"> START </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html#columnSpec"> columnSpec </a> </code></pre> <pre><code> .weight </code></pre> = 0 </li> </ul> See <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html"> GridLayout </a> </code></pre> for a more complete description of the conventions used by GridLayout in the interpretation of the properties of this class. </p>\n<pre><code>public static class GridLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/GridLayout.LayoutParams.html
GridLayout.Spec	A										<section class="prog__container"><p> A Spec defines the horizontal or vertical characteristics of a group of cells. Each spec. defines the <em> grid indices </em> and <em> alignment </em> along the appropriate axis. <p> The <em> grid indices </em> are the leading and trailing edges of this cell group. See <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html"> GridLayout </a> </code></pre> for a description of the conventions used by GridLayout for grid indices. <p> The <em> alignment </em> property specifies how cells should be aligned in this group. For row groups, this specifies the vertical alignment. For column groups, this specifies the horizontal alignment. <p> Use the following static methods to create specs: <ul> <li> <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#spec(int)"> spec(int) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#spec(int, int)"> spec(int, int) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#spec(int, android.widget.GridLayout.Alignment)"> spec(int, Alignment) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#spec(int, int, android.widget.GridLayout.Alignment)"> spec(int, int, Alignment) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#spec(int, float)"> spec(int, float) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#spec(int, int, float)"> spec(int, int, float) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#spec(int, android.widget.GridLayout.Alignment, float)"> spec(int, Alignment, float) </a> </code></pre> </li> <li> <pre><code> <a href="https://developer.android.com/reference/android/widget/GridLayout.html#spec(int, int, android.widget.GridLayout.Alignment, float)"> spec(int, int, Alignment, float) </a> </code></pre> </li> </ul> </p>\n<pre><code>public static class GridLayout.Spec\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/GridLayout.Spec.html
GridView	A										<section class="prog__container"><p> A view that shows items in two-dimensional scrolling grid. The items in the grid come from the <pre><code> <a href="https://developer.android.com/reference/android/widget/ListAdapter.html"> ListAdapter </a> </code></pre> associated with this view. <p> See the <a href="https://developer.android.com/guide/topics/ui/layout/gridview.html"> Grid View </a> guide. </p>\n<pre><code>public class GridView\n</code></pre></section>	https://developer.android.com/reference/android/widget/GridView.html
HeaderViewListAdapter	A										<section class="prog__container"><p> ListAdapter used when a ListView has header views. This ListAdapter wraps another one and also keeps track of the header views and their associated data objects. <p> This is intended as a base class; you will probably not need to use this class directly in your own code. </p>\n<pre><code>public class HeaderViewListAdapter\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/HeaderViewListAdapter.html
HeterogeneousExpandableList	A										<section class="prog__container"><p> Additional methods that when implemented make an <pre><code> <a href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html"> ExpandableListAdapter </a> </code></pre> take advantage of the <pre><code> <a href="https://developer.android.com/reference/android/widget/Adapter.html"> Adapter </a> </code></pre> view type mechanism. <p> An <pre><code> <a href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html"> ExpandableListAdapter </a> </code></pre> declares it has one view type for its group items and one view type for its child items. Although adapted for most <pre><code> <a href="https://developer.android.com/reference/android/widget/ExpandableListView.html"> ExpandableListView </a> </code></pre> s, these values should be tuned for heterogeneous <pre><code> <a href="https://developer.android.com/reference/android/widget/ExpandableListView.html"> ExpandableListView </a> </code></pre> s. </p>\n<pre><code>public interface HeterogeneousExpandableList\n</code></pre></section>	https://developer.android.com/reference/android/widget/HeterogeneousExpandableList.html
HorizontalScrollView	A										<section class="prog__container"><p> Layout container for a view hierarchy that can be scrolled by the user, allowing it to be larger than the physical display. A HorizontalScrollView is a <pre><code> <a href="https://developer.android.com/reference/android/widget/FrameLayout.html"> FrameLayout </a> </code></pre> , meaning you should place one child in it containing the entire contents to scroll; this child may itself be a layout manager with a complex hierarchy of objects. A child that is often used is a <pre><code> <a href="https://developer.android.com/reference/android/widget/LinearLayout.html"> LinearLayout </a> </code></pre> in a horizontal orientation, presenting a horizontal array of top-level items that the user can scroll through. <p> The <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html"> TextView </a> </code></pre> class also takes care of its own scrolling, so does not require a HorizontalScrollView, but using the two together is possible to achieve the effect of a text view within a larger container. <p> HorizontalScrollView only supports horizontal scrolling. For vertical scrolling, use either <pre><code> <a href="https://developer.android.com/reference/android/widget/ScrollView.html"> ScrollView </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/widget/ListView.html"> ListView </a> </code></pre> . </p>\n<pre><code>public class HorizontalScrollView\n</code></pre></section>	https://developer.android.com/reference/android/widget/HorizontalScrollView.html
ImageButton	A										<section class="prog__container"><p> <p> Displays a button with an image (instead of text) that can be pressed or clicked by the user. By default, an ImageButton looks like a regular <pre><code> <a href="https://developer.android.com/reference/android/widget/Button.html"> Button </a> </code></pre> , with the standard button background that changes color during different button states. The image on the surface of the button is defined either by the <pre><code> android:src </code></pre> attribute in the <pre><code> &lt;ImageButton&gt; </code></pre> XML element or by the <pre><code> <a href="https://developer.android.com/reference/android/widget/ImageView.html#setImageResource(int)"> setImageResource(int) </a> </code></pre> method. </p>\n<pre><code>public class ImageButton\n</code></pre></section>	https://developer.android.com/reference/android/widget/ImageButton.html
ImageSwitcher	A										<section class="prog__container"><p> Must be a dimension value, which is a floating point number appended with a unit such as " <pre><code> 14.5sp </code></pre> ".</p>\n<pre><code>public class ImageSwitcher\n</code></pre></section>	https://developer.android.com/reference/android/widget/ImageSwitcher.html
ImageView	A										<section class="prog__container"><p> Displays an arbitrary image, such as an icon. The ImageView class can load images from various sources (such as resources or content providers), takes care of computing its measurement from the image so that it can be used in any layout manager, and provides various display options such as scaling and tinting.</p>\n<pre><code>public class ImageView\n</code></pre></section>	https://developer.android.com/reference/android/widget/ImageView.html
ImageView.ScaleType	A										<section class="prog__container"><p> Options for scaling the bounds of an image to the bounds of this view.</p>\n<pre><code>public static final enum ImageView.ScaleType\n</code></pre></section>	https://developer.android.com/reference/android/widget/ImageView.ScaleType.html
LinearLayout	A										<section class="prog__container"><p> A Layout that arranges its children in a single column or a single row. The direction of the row can be set by calling <pre><code> <a href="https://developer.android.com/reference/android/widget/LinearLayout.html#setOrientation(int)"> setOrientation() </a> </code></pre> . You can also specify gravity, which specifies the alignment of all the child elements by calling <pre><code> <a href="https://developer.android.com/reference/android/widget/LinearLayout.html#setGravity(int)"> setGravity() </a> </code></pre> or specify that specific children grow to fill up any remaining space in the layout by setting the <em> weight </em> member of <pre><code> <a href="https://developer.android.com/reference/android/widget/LinearLayout.LayoutParams.html"> LinearLayout.LayoutParams </a> </code></pre> . The default orientation is horizontal. <p> See the <a href="https://developer.android.com/guide/topics/ui/layout/linear.html"> Linear Layout </a> guide. </p>\n<pre><code>public class LinearLayout\n</code></pre></section>	https://developer.android.com/reference/android/widget/LinearLayout.html
LinearLayout.LayoutParams	A										<section class="prog__container"><p> Per-child layout information associated with ViewLinearLayout.</p>\n<pre><code>public static class LinearLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/LinearLayout.LayoutParams.html
ListAdapter	A										<section class="prog__container"><p> Extended <pre><code> <a href="https://developer.android.com/reference/android/widget/Adapter.html"> Adapter </a> </code></pre> that is the bridge between a <pre><code> <a href="https://developer.android.com/reference/android/widget/ListView.html"> ListView </a> </code></pre> and the data that backs the list. Frequently that data comes from a Cursor, but that is not required. The ListView can display any data provided that it is wrapped in a ListAdapter.</p>\n<pre><code>public interface ListAdapter\nimplements <a href="https://developer.android.com/reference/android/widget/Adapter.html">Adapter</a></code></pre></section>	https://developer.android.com/reference/android/widget/ListAdapter.html
ListPopupWindow	A										<section class="prog__container"><p> A ListPopupWindow anchors itself to a host view and displays a list of choices. <p> ListPopupWindow contains a number of tricky behaviors surrounding positioning, scrolling parents to fit the dropdown, interacting sanely with the IME if present, and others. </p>\n<pre><code>public class ListPopupWindow\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/ListPopupWindow.html
ListView.FixedViewInfo	A										<section class="prog__container"><p> A class that represents a fixed view in a list, for example a header at the top or a footer at the bottom.</p>\n<pre><code>public class ListView.FixedViewInfo\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/ListView.FixedViewInfo.html
ListView	A										<section class="prog__container"><p> A view that shows items in a vertically scrolling list. The items come from the <pre><code> <a href="https://developer.android.com/reference/android/widget/ListAdapter.html"> ListAdapter </a> </code></pre> associated with this view. <p> See the <a href="https://developer.android.com/guide/topics/ui/layout/listview.html"> List View </a> guide. </p>\n<pre><code>public class ListView\n</code></pre></section>	https://developer.android.com/reference/android/widget/ListView.html
MediaController	A										<section class="prog__container"><p> A view containing controls for a MediaPlayer. Typically contains the buttons like "Play/Pause", "Rewind", "Fast Forward" and a progress slider. It takes care of synchronizing the controls with the state of the MediaPlayer. <p> The way to use this class is to instantiate it programmatically. The MediaController will create a default set of controls and put them in a window floating above your application. Specifically, the controls will float above the view specified with setAnchorView(). The window will disappear if left idle for three seconds and reappear when the user touches the anchor view. <p> Functions like show() and hide() have no effect when MediaController is created in an xml layout. MediaController will hide and show the buttons according to these rules: <ul> <li> The "previous" and "next" buttons are hidden until setPrevNextListeners() has been called <li> The "previous" and "next" buttons are visible but disabled if setPrevNextListeners() was called with null listeners <li> The "rewind" and "fastforward" buttons are shown unless requested otherwise by using the MediaController(Context, boolean) constructor with the boolean set to false </li> </li> </li> </ul> </p>\n<pre><code>public class MediaController\n</code></pre></section>	https://developer.android.com/reference/android/widget/MediaController.html
MediaController.MediaPlayerControl	A										<section class="prog__container"><p> Get the audio session id for the player used by this VideoView.</p>\n<pre><code>public static interface MediaController.MediaPlayerControl\n</code></pre></section>	https://developer.android.com/reference/android/widget/MediaController.MediaPlayerControl.html
MultiAutoCompleteTextView.CommaTokenizer	A										<section class="prog__container"><p> This simple Tokenizer can be used for lists where the items are separated by a comma and one or more spaces.</p>\n<pre><code>public static class MultiAutoCompleteTextView.CommaTokenizer\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/MultiAutoCompleteTextView.CommaTokenizer.html
MultiAutoCompleteTextView	A										<section class="prog__container"><p> An editable text view, extending <pre><code> <a href="https://developer.android.com/reference/android/widget/AutoCompleteTextView.html"> AutoCompleteTextView </a> </code></pre> , that can show completion suggestions for the substring of the text where the user is typing instead of necessarily for the entire thing. <p> You must provide a <pre><code> <a href="https://developer.android.com/reference/android/widget/MultiAutoCompleteTextView.Tokenizer.html"> MultiAutoCompleteTextView.Tokenizer </a> </code></pre> to distinguish the various substrings. <p> The following code snippet shows how to create a text view which suggests various countries names while the user is typing: </p>\n<pre><code>public class MultiAutoCompleteTextView\n</code></pre></section>	https://developer.android.com/reference/android/widget/MultiAutoCompleteTextView.html
MultiAutoCompleteTextView.Tokenizer	A										<section class="prog__container"><p> Returns the end of the token (minus trailing punctuation) that begins at offset <pre><code> cursor </code></pre> within <pre><code> text </code></pre> .</p>\n<pre><code>public static interface MultiAutoCompleteTextView.Tokenizer\n</code></pre></section>	https://developer.android.com/reference/android/widget/MultiAutoCompleteTextView.Tokenizer.html
NumberPicker.Formatter	A										<section class="prog__container"><p> Interface used to format current value into a string for presentation.</p>\n<pre><code>public static interface NumberPicker.Formatter\n</code></pre></section>	https://developer.android.com/reference/android/widget/NumberPicker.Formatter.html
NumberPicker	A										<section class="prog__container"><p> A widget that enables the user to select a number from a predefined range. There are two flavors of this widget and which one is presented to the user depends on the current theme. <ul> <li> If the current theme is derived from <pre><code> <a href="https://developer.android.com/reference/android/R.style.html#Theme"> Theme </a> </code></pre> the widget presents the current value as an editable input field with an increment button above and a decrement button below. Long pressing the buttons allows for a quick change of the current value. Tapping on the input field allows to type in a desired value. </li> <li> If the current theme is derived from <pre><code> <a href="https://developer.android.com/reference/android/R.style.html#Theme_Holo"> Theme_Holo </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Light"> Theme_Holo_Light </a> </code></pre> the widget presents the current value as an editable input field with a lesser value above and a greater value below. Tapping on the lesser or greater value selects it by animating the number axis up or down to make the chosen value current. Flinging up or down allows for multiple increments or decrements of the current value. Long pressing on the lesser and greater values also allows for a quick change of the current value. Tapping on the current value allows to type in a desired value. </li> </ul> <p> For an example of using this widget, see <pre><code> <a href="https://developer.android.com/reference/android/widget/TimePicker.html"> TimePicker </a> </code></pre> . </p>\n<pre><code>public class NumberPicker\n</code></pre></section>	https://developer.android.com/reference/android/widget/NumberPicker.html
NumberPicker.OnScrollListener	A										<section class="prog__container"><p> Interface to listen for the picker scroll state.</p>\n<pre><code>public static interface NumberPicker.OnScrollListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/NumberPicker.OnScrollListener.html
NumberPicker.OnValueChangeListener	A										<section class="prog__container"><p> Interface to listen for changes of the current value.</p>\n<pre><code>public static interface NumberPicker.OnValueChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/NumberPicker.OnValueChangeListener.html
OverScroller	A										<section class="prog__container"><p> This class encapsulates scrolling with the ability to overshoot the bounds of a scrolling operation. This class is a drop-in replacement for <pre><code> <a href="https://developer.android.com/reference/android/widget/Scroller.html"> Scroller </a> </code></pre> in most cases.</p>\n<pre><code>public class OverScroller\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/OverScroller.html
android.widget	A										<section class="prog__container">The widget package contains (mostly visual) UI elements to useon your Application screen. You can also design your own.</section>	https://developer.android.com/reference/android/widget/package-summary.html
PopupMenu	A										<section class="prog__container"><p> A PopupMenu displays a <pre><code> <a href="https://developer.android.com/reference/android/view/Menu.html"> Menu </a> </code></pre> in a modal popup window anchored to a <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> . The popup will appear below the anchor view if there is room, or above it if there is not. If the IME is visible the popup will not overlap it until it is touched. Touching outside of the popup will dismiss it.</p>\n<pre><code>public class PopupMenu\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/PopupMenu.html
PopupMenu.OnDismissListener	A										<section class="prog__container"><p> Callback interface used to notify the application that the menu has closed.</p>\n<pre><code>public static interface PopupMenu.OnDismissListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/PopupMenu.OnDismissListener.html
PopupMenu.OnMenuItemClickListener	A										<section class="prog__container"><p> Interface responsible for receiving menu item click events if the items themselves do not have individual item click listeners.</p>\n<pre><code>public static interface PopupMenu.OnMenuItemClickListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/PopupMenu.OnMenuItemClickListener.html
PopupWindow	A										<section class="prog__container"><p> <p> This class represents a popup window that can be used to display an arbitrary view. The popup window is a floating container that appears on top of the current activity. </p>\n<pre><code>public class PopupWindow\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/PopupWindow.html
PopupWindow.OnDismissListener	A										<section class="prog__container"><p> Listener that is called when this popup window is dismissed.</p>\n<pre><code>public static interface PopupWindow.OnDismissListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/PopupWindow.OnDismissListener.html
ProgressBar	A										<section class="prog__container"><p> <p> Visual indicator of progress in some operation. Displays a bar to the user representing how far the operation has progressed; the application can change the amount of progress (modifying the length of the bar) as it moves forward. There is also a secondary progress displayable on a progress bar which is useful for displaying intermediate progress, such as the buffer level during a streaming playback progress bar. </p>\n<pre><code>public class ProgressBar\n</code></pre></section>	https://developer.android.com/reference/android/widget/ProgressBar.html
QuickContactBadge	A										<section class="prog__container"><p> Widget used to show an image with the standard QuickContact badge and on-click behavior.</p>\n<pre><code>public class QuickContactBadge\n</code></pre></section>	https://developer.android.com/reference/android/widget/QuickContactBadge.html
RadioButton	A										<section class="prog__container"><p> <p> A radio button is a two-states button that can be either checked or unchecked. When the radio button is unchecked, the user can press or click it to check it. However, contrary to a <pre><code> <a href="https://developer.android.com/reference/android/widget/CheckBox.html"> CheckBox </a> </code></pre> , a radio button cannot be unchecked by the user once checked. </p>\n<pre><code>public class RadioButton\n</code></pre></section>	https://developer.android.com/reference/android/widget/RadioButton.html
RadioGroup	A										<section class="prog__container"><p> <p> This class is used to create a multiple-exclusion scope for a set of radio buttons. Checking one radio button that belongs to a radio group unchecks any previously checked radio button within the same group. </p>\n<pre><code>public class RadioGroup\n</code></pre></section>	https://developer.android.com/reference/android/widget/RadioGroup.html
RadioGroup.LayoutParams	A										<section class="prog__container"><p> <p> This set of layout parameters defaults the width and the height of the children to <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#WRAP_CONTENT"> WRAP_CONTENT </a> </code></pre> when they are not specified in the XML file. Otherwise, this class ussed the value read from the XML file. </p>\n<pre><code>public static class RadioGroup.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/RadioGroup.LayoutParams.html
RadioGroup.OnCheckedChangeListener	A										<section class="prog__container"><p> <p> Interface definition for a callback to be invoked when the checked radio button changed in this group. </p>\n<pre><code>public static interface RadioGroup.OnCheckedChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/RadioGroup.OnCheckedChangeListener.html
RatingBar	A										<section class="prog__container"><p> A RatingBar is an extension of SeekBar and ProgressBar that shows a rating in stars. The user can touch/drag or use arrow keys to set the rating when using the default size RatingBar. The smaller RatingBar style ( <pre><code> <a href="https://developer.android.com/reference/android/R.attr.html#ratingBarStyleSmall"> ratingBarStyleSmall </a> </code></pre> ) and the larger indicator-only style ( <pre><code> <a href="https://developer.android.com/reference/android/R.attr.html#ratingBarStyleIndicator"> ratingBarStyleIndicator </a> </code></pre> ) do not support user interaction and should only be used as indicators. <p> When using a RatingBar that supports user interaction, placing widgets to the left or right of the RatingBar is discouraged. <p> The number of stars set (via <pre><code> <a href="https://developer.android.com/reference/android/widget/RatingBar.html#setNumStars(int)"> setNumStars(int) </a> </code></pre> or in an XML layout) will be shown when the layout width is set to wrap content (if another layout width is set, the results may be unpredictable). <p> The secondary progress should not be modified by the client as it is used internally as the background for a fractionally filled star. </p>\n<pre><code>public class RatingBar\n</code></pre></section>	https://developer.android.com/reference/android/widget/RatingBar.html
RatingBar.OnRatingBarChangeListener	A										<section class="prog__container"><p> A callback that notifies clients when the rating has been changed. This includes changes that were initiated by the user through a touch gesture or arrow key/trackball as well as changes that were initiated programmatically.</p>\n<pre><code>public static interface RatingBar.OnRatingBarChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/RatingBar.OnRatingBarChangeListener.html
RelativeLayout	A										<section class="prog__container"><p> A Layout where the positions of the children can be described in relation to each other or to the parent. <p> Note that you cannot have a circular dependency between the size of the RelativeLayout and the position of its children. For example, you cannot have a RelativeLayout whose height is set to <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#WRAP_CONTENT"> WRAP_CONTENT </a> </code></pre> and a child set to <pre><code> <a href="https://developer.android.com/reference/android/widget/RelativeLayout.html#ALIGN_PARENT_BOTTOM"> ALIGN_PARENT_BOTTOM </a> </code></pre> . </p>\n<pre><code>public class RelativeLayout\n</code></pre></section>	https://developer.android.com/reference/android/widget/RelativeLayout.html
RelativeLayout.LayoutParams	A										<section class="prog__container"><p> Per-child layout information associated with RelativeLayout.</p>\n<pre><code>public static class RelativeLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/RelativeLayout.LayoutParams.html
RemoteViews.ActionException	A										<section class="prog__container"><p> Exception to send when something goes wrong executing an action</p>\n<pre><code>public static class RemoteViews.ActionException\n</code></pre></section>	https://developer.android.com/reference/android/widget/RemoteViews.ActionException.html
RemoteViews	A										<section class="prog__container"><p> A class that describes a view hierarchy that can be displayed in another process. The hierarchy is inflated from a layout resource file, and this class provides some basic operations for modifying the content of the inflated hierarchy.</p>\n<pre><code>public class RemoteViews\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/RemoteViews.html
RemoteViews.RemoteView	A										<section class="prog__container"><p> This annotation indicates that a subclass of View is alllowed to be used with the <pre><code> <a href="https://developer.android.com/reference/android/widget/RemoteViews.html"> RemoteViews </a> </code></pre> mechanism.</p>\n<pre><code>public static abstract @interface RemoteViews.RemoteView\nimplements <a href="https://developer.android.com/reference/java/lang/annotation/Annotation.html">Annotation</a></code></pre></section>	https://developer.android.com/reference/android/widget/RemoteViews.RemoteView.html
RemoteViewsService	A										<section class="prog__container"><p> The service to be connected to for a remote adapter to request RemoteViews. Users should extend the RemoteViewsService to provide the appropriate RemoteViewsFactory's used to populate the remote collection view (ListView, GridView, etc).</p>\n<pre><code>public abstract class RemoteViewsService\n</code></pre></section>	https://developer.android.com/reference/android/widget/RemoteViewsService.html
RemoteViewsService.RemoteViewsFactory	A										<section class="prog__container"><p> An interface for an adapter between a remote collection view (ListView, GridView, etc) and the underlying data for that view. The implementor is responsible for making a RemoteView for each item in the data set. This interface is a thin wrapper around <pre><code> <a href="https://developer.android.com/reference/android/widget/Adapter.html"> Adapter </a> </code></pre> .</p>\n<pre><code>public static interface RemoteViewsService.RemoteViewsFactory\n</code></pre></section>	https://developer.android.com/reference/android/widget/RemoteViewsService.RemoteViewsFactory.html
ResourceCursorAdapter	A										<section class="prog__container"><p> An easy adapter that creates views defined in an XML file. You can specify the XML file that defines the appearance of the views.</p>\n<pre><code>public abstract class ResourceCursorAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/ResourceCursorAdapter.html
ResourceCursorTreeAdapter	A										<section class="prog__container"><p> A fairly simple ExpandableListAdapter that creates views defined in an XML file. You can specify the XML file that defines the appearance of the views.</p>\n<pre><code>public abstract class ResourceCursorTreeAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/ResourceCursorTreeAdapter.html
Scroller	A										<section class="prog__container"><p> <p> This class encapsulates scrolling. You can use scrollers ( <pre><code> <a href="https://developer.android.com/reference/android/widget/Scroller.html"> Scroller </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/widget/OverScroller.html"> OverScroller </a> </code></pre> ) to collect the data you need to produce a scrolling animation—for example, in response to a fling gesture. Scrollers track scroll offsets for you over time, but they don't automatically apply those positions to your view. It's your responsibility to get and apply new coordinates at a rate that will make the scrolling animation look smooth. </p>\n<pre><code>public class Scroller\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/Scroller.html
ScrollView	A										<section class="prog__container"><p> Layout container for a view hierarchy that can be scrolled by the user, allowing it to be larger than the physical display. A ScrollView is a <pre><code> <a href="https://developer.android.com/reference/android/widget/FrameLayout.html"> FrameLayout </a> </code></pre> , meaning you should place one child in it containing the entire contents to scroll; this child may itself be a layout manager with a complex hierarchy of objects. A child that is often used is a <pre><code> <a href="https://developer.android.com/reference/android/widget/LinearLayout.html"> LinearLayout </a> </code></pre> in a vertical orientation, presenting a vertical array of top-level items that the user can scroll through. <p> You should never use a ScrollView with a <pre><code> <a href="https://developer.android.com/reference/android/widget/ListView.html"> ListView </a> </code></pre> , because ListView takes care of its own vertical scrolling. Most importantly, doing this defeats all of the important optimizations in ListView for dealing with large lists, since it effectively forces the ListView to display its entire list of items to fill up the infinite container supplied by ScrollView. <p> The <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html"> TextView </a> </code></pre> class also takes care of its own scrolling, so does not require a ScrollView, but using the two together is possible to achieve the effect of a text view within a larger container. <p> ScrollView only supports vertical scrolling. For horizontal scrolling, use <pre><code> <a href="https://developer.android.com/reference/android/widget/HorizontalScrollView.html"> HorizontalScrollView </a> </code></pre> . </p>\n<pre><code>public class ScrollView\n</code></pre></section>	https://developer.android.com/reference/android/widget/ScrollView.html
SearchView	A										<section class="prog__container"><p> A widget that provides a user interface for the user to enter a search query and submit a request to a search provider. Shows a list of query suggestions or results, if available, and allows the user to pick a suggestion or result to launch into. <p> When the SearchView is used in an ActionBar as an action view for a collapsible menu item, it needs to be set to iconified by default using <pre><code> <a href="https://developer.android.com/reference/android/widget/SearchView.html#setIconifiedByDefault(boolean)"> setIconifiedByDefault(true) </a> </code></pre> . This is the default, so nothing needs to be done. </p>\n<pre><code>public class SearchView\n</code></pre></section>	https://developer.android.com/reference/android/widget/SearchView.html
SearchView.OnCloseListener	A										<section class="prog__container"><p> The user is attempting to close the SearchView.</p>\n<pre><code>public static interface SearchView.OnCloseListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/SearchView.OnCloseListener.html
SearchView.OnQueryTextListener	A										<section class="prog__container"><p> Callbacks for changes to the query text.</p>\n<pre><code>public static interface SearchView.OnQueryTextListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/SearchView.OnQueryTextListener.html
SearchView.OnSuggestionListener	A										<section class="prog__container"><p> Callback interface for selection events on suggestions. These callbacks are only relevant when a SearchableInfo has been specified by <pre><code> <a href="https://developer.android.com/reference/android/widget/SearchView.html#setSearchableInfo(android.app.SearchableInfo)"> setSearchableInfo(SearchableInfo) </a> </code></pre> .</p>\n<pre><code>public static interface SearchView.OnSuggestionListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/SearchView.OnSuggestionListener.html
SectionIndexer	A										<section class="prog__container"><p> Interface that may implemented on <pre><code> <a href="https://developer.android.com/reference/android/widget/Adapter.html"> Adapter </a> </code></pre> s to enable fast scrolling between sections of an <pre><code> <a href="https://developer.android.com/reference/android/widget/AbsListView.html"> AbsListView </a> </code></pre> . <p> A section is a group of list items that have something in common. For example, they may begin with the same letter or they may be songs from the same artist. <p> <pre><code> <a href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html"> ExpandableListAdapter </a> </code></pre> s that consider groups and sections as synonymous should account for collapsed groups and return an appropriate section/position. </p>\n<pre><code>public interface SectionIndexer\n</code></pre></section>	https://developer.android.com/reference/android/widget/SectionIndexer.html
SeekBar	A										<section class="prog__container"><p> A SeekBar is an extension of ProgressBar that adds a draggable thumb. The user can touch the thumb and drag left or right to set the current progress level or use the arrow keys. Placing focusable widgets to the left or right of a SeekBar is discouraged. <p> Clients of the SeekBar can attach a <pre><code> <a href="https://developer.android.com/reference/android/widget/SeekBar.OnSeekBarChangeListener.html"> SeekBar.OnSeekBarChangeListener </a> </code></pre> to be notified of the user's actions. </p>\n<pre><code>public class SeekBar\n</code></pre></section>	https://developer.android.com/reference/android/widget/SeekBar.html
SeekBar.OnSeekBarChangeListener	A										<section class="prog__container"><p> A callback that notifies clients when the progress level has been changed. This includes changes that were initiated by the user through a touch gesture or arrow key/trackball as well as changes that were initiated programmatically.</p>\n<pre><code>public static interface SeekBar.OnSeekBarChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/SeekBar.OnSeekBarChangeListener.html
ShareActionProvider	A										<section class="prog__container"><p> This is a provider for a share action. It is responsible for creating views that enable data sharing and also to show a sub menu with sharing activities if the hosting item is placed on the overflow menu. <p> Here is how to use the action provider with custom backing file in a <pre><code> <a href="https://developer.android.com/reference/android/view/MenuItem.html"> MenuItem </a> </code></pre> : </p>\n<pre><code>public class ShareActionProvider\n</code></pre></section>	https://developer.android.com/reference/android/widget/ShareActionProvider.html
ShareActionProvider.OnShareTargetSelectedListener	A										<section class="prog__container"><p> Listener for the event of selecting a share target.</p>\n<pre><code>public static interface ShareActionProvider.OnShareTargetSelectedListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/ShareActionProvider.OnShareTargetSelectedListener.html
SimpleAdapter	A										<section class="prog__container"><p> An easy adapter to map static data to views defined in an XML file. You can specify the data backing the list as an ArrayList of Maps. Each entry in the ArrayList corresponds to one row in the list. The Maps contain the data for each row. You also specify an XML file that defines the views used to display the row, and a mapping from keys in the Map to specific views. Binding data to views occurs in two phases. First, if a <pre><code> <a href="https://developer.android.com/reference/android/widget/SimpleAdapter.ViewBinder.html"> SimpleAdapter.ViewBinder </a> </code></pre> is available, <pre><code> <a href="https://developer.android.com/reference/android/widget/SimpleAdapter.ViewBinder.html#setViewValue(android.view.View, java.lang.Object, java.lang.String)"> setViewValue(android.view.View, Object, String) </a> </code></pre> is invoked. If the returned value is true, binding has occurred. If the returned value is false, the following views are then tried in order: <ul> <li> A view that implements Checkable (e.g. CheckBox). The expected bind value is a boolean. <li> TextView. The expected bind value is a string and <pre><code> <a href="https://developer.android.com/reference/android/widget/SimpleAdapter.html#setViewText(android.widget.TextView, java.lang.String)"> setViewText(TextView, String) </a> </code></pre> is invoked. <li> ImageView. The expected bind value is a resource id or a string and <pre><code> <a href="https://developer.android.com/reference/android/widget/SimpleAdapter.html#setViewImage(android.widget.ImageView, int)"> setViewImage(ImageView, int) </a> </code></pre> or <pre><code> <a href="https://developer.android.com/reference/android/widget/SimpleAdapter.html#setViewImage(android.widget.ImageView, java.lang.String)"> setViewImage(ImageView, String) </a> </code></pre> is invoked. </li> </li> </li> </ul> If no appropriate binding can be found, an <pre><code> <a href="https://developer.android.com/reference/java/lang/IllegalStateException.html"> IllegalStateException </a> </code></pre> is thrown.</p>\n<pre><code>public class SimpleAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/SimpleAdapter.html
SimpleAdapter.ViewBinder	A										<section class="prog__container"><p> This class can be used by external clients of SimpleAdapter to bind values to views. You should use this class to bind values to views that are not directly supported by SimpleAdapter or to change the way binding occurs for views supported by SimpleAdapter.</p>\n<pre><code>public static interface SimpleAdapter.ViewBinder\n</code></pre></section>	https://developer.android.com/reference/android/widget/SimpleAdapter.ViewBinder.html
SimpleCursorAdapter.CursorToStringConverter	A										<section class="prog__container"><p> This class can be used by external clients of SimpleCursorAdapter to define how the Cursor should be converted to a String.</p>\n<pre><code>public static interface SimpleCursorAdapter.CursorToStringConverter\n</code></pre></section>	https://developer.android.com/reference/android/widget/SimpleCursorAdapter.CursorToStringConverter.html
SimpleCursorAdapter	A										<section class="prog__container"><p> An easy adapter to map columns from a cursor to TextViews or ImageViews defined in an XML file. You can specify which columns you want, which views you want to display the columns, and the XML file that defines the appearance of these views. Binding occurs in two phases. First, if a <pre><code> <a href="https://developer.android.com/reference/android/widget/SimpleCursorAdapter.ViewBinder.html"> SimpleCursorAdapter.ViewBinder </a> </code></pre> is available, <pre><code> <a href="https://developer.android.com/reference/android/widget/SimpleCursorAdapter.ViewBinder.html#setViewValue(android.view.View, android.database.Cursor, int)"> setViewValue(android.view.View, android.database.Cursor, int) </a> </code></pre> is invoked. If the returned value is true, binding has occured. If the returned value is false and the view to bind is a TextView, <pre><code> <a href="https://developer.android.com/reference/android/widget/SimpleCursorAdapter.html#setViewText(android.widget.TextView, java.lang.String)"> setViewText(TextView, String) </a> </code></pre> is invoked. If the returned value is false and the view to bind is an ImageView, <pre><code> <a href="https://developer.android.com/reference/android/widget/SimpleCursorAdapter.html#setViewImage(android.widget.ImageView, java.lang.String)"> setViewImage(ImageView, String) </a> </code></pre> is invoked. If no appropriate binding can be found, an <pre><code> <a href="https://developer.android.com/reference/java/lang/IllegalStateException.html"> IllegalStateException </a> </code></pre> is thrown. If this adapter is used with filtering, for instance in an <pre><code> <a href="https://developer.android.com/reference/android/widget/AutoCompleteTextView.html"> AutoCompleteTextView </a> </code></pre> , you can use the <pre><code> <a href="https://developer.android.com/reference/android/widget/SimpleCursorAdapter.CursorToStringConverter.html"> SimpleCursorAdapter.CursorToStringConverter </a> </code></pre> and the <pre><code> <a href="https://developer.android.com/reference/android/widget/FilterQueryProvider.html"> FilterQueryProvider </a> </code></pre> interfaces to get control over the filtering process. You can refer to <pre><code> <a href="https://developer.android.com/reference/android/widget/SimpleCursorAdapter.html#convertToString(android.database.Cursor)"> convertToString(android.database.Cursor) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/widget/CursorAdapter.html#runQueryOnBackgroundThread(java.lang.CharSequence)"> runQueryOnBackgroundThread(CharSequence) </a> </code></pre> for more information.</p>\n<pre><code>public class SimpleCursorAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/SimpleCursorAdapter.html
SimpleCursorAdapter.ViewBinder	A										<section class="prog__container"><p> This class can be used by external clients of SimpleCursorAdapter to bind values fom the Cursor to views. You should use this class to bind values from the Cursor to views that are not directly supported by SimpleCursorAdapter or to change the way binding occurs for views supported by SimpleCursorAdapter.</p>\n<pre><code>public static interface SimpleCursorAdapter.ViewBinder\n</code></pre></section>	https://developer.android.com/reference/android/widget/SimpleCursorAdapter.ViewBinder.html
SimpleCursorTreeAdapter	A										<section class="prog__container"><p> An easy adapter to map columns from a cursor to TextViews or ImageViews defined in an XML file. You can specify which columns you want, which views you want to display the columns, and the XML file that defines the appearance of these views. Separate XML files for child and groups are possible. Binding occurs in two phases. First, if a <pre><code> <a href="https://developer.android.com/reference/android/widget/SimpleCursorTreeAdapter.ViewBinder.html"> SimpleCursorTreeAdapter.ViewBinder </a> </code></pre> is available, <pre><code> <a href="https://developer.android.com/reference/android/widget/SimpleCursorTreeAdapter.ViewBinder.html#setViewValue(android.view.View, android.database.Cursor, int)"> setViewValue(android.view.View, android.database.Cursor, int) </a> </code></pre> is invoked. If the returned value is true, binding has occurred. If the returned value is false and the view to bind is a TextView, <pre><code> <a href="https://developer.android.com/reference/android/widget/SimpleCursorTreeAdapter.html#setViewText(android.widget.TextView, java.lang.String)"> setViewText(TextView, String) </a> </code></pre> is invoked. If the returned value is false and the view to bind is an ImageView, <pre><code> <a href="https://developer.android.com/reference/android/widget/SimpleCursorTreeAdapter.html#setViewImage(android.widget.ImageView, java.lang.String)"> setViewImage(ImageView, String) </a> </code></pre> is invoked. If no appropriate binding can be found, an <pre><code> <a href="https://developer.android.com/reference/java/lang/IllegalStateException.html"> IllegalStateException </a> </code></pre> is thrown.</p>\n<pre><code>public abstract class SimpleCursorTreeAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/SimpleCursorTreeAdapter.html
SimpleCursorTreeAdapter.ViewBinder	A										<section class="prog__container"><p> This class can be used by external clients of SimpleCursorTreeAdapter to bind values from the Cursor to views. You should use this class to bind values from the Cursor to views that are not directly supported by SimpleCursorTreeAdapter or to change the way binding occurs for views supported by SimpleCursorTreeAdapter.</p>\n<pre><code>public static interface SimpleCursorTreeAdapter.ViewBinder\n</code></pre></section>	https://developer.android.com/reference/android/widget/SimpleCursorTreeAdapter.ViewBinder.html
SimpleExpandableListAdapter	A										<section class="prog__container"><p> An easy adapter to map static data to group and child views defined in an XML file. You can separately specify the data backing the group as a List of Maps. Each entry in the ArrayList corresponds to one group in the expandable list. The Maps contain the data for each row. You also specify an XML file that defines the views used to display a group, and a mapping from keys in the Map to specific views. This process is similar for a child, except it is one-level deeper so the data backing is specified as a List <list<map> &gt;, where the first List corresponds to the group of the child, the second List corresponds to the position of the child within the group, and finally the Map holds the data for that particular child. </list<map></p>\n<pre><code>public class SimpleExpandableListAdapter\n</code></pre></section>	https://developer.android.com/reference/android/widget/SimpleExpandableListAdapter.html
SlidingDrawer	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 17. </strong> <br/> This class is not supported anymore. It is recommended you base your own implementation on the source code for the Android Open Source Project if you must use it in your application. </p>\n<pre><code>public class SlidingDrawer\n</code></pre></section>	https://developer.android.com/reference/android/widget/SlidingDrawer.html
SlidingDrawer.OnDrawerCloseListener	A										<section class="prog__container"><p> Callback invoked when the drawer is closed.</p>\n<pre><code>public static interface SlidingDrawer.OnDrawerCloseListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerCloseListener.html
SlidingDrawer.OnDrawerOpenListener	A										<section class="prog__container"><p> Callback invoked when the drawer is opened.</p>\n<pre><code>public static interface SlidingDrawer.OnDrawerOpenListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerOpenListener.html
SlidingDrawer.OnDrawerScrollListener	A										<section class="prog__container"><p> Callback invoked when the drawer is scrolled.</p>\n<pre><code>public static interface SlidingDrawer.OnDrawerScrollListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerScrollListener.html
Space	A										<section class="prog__container"><p> Space is a lightweight View subclass that may be used to create gaps between components in general purpose layouts.</p>\n<pre><code>public final class Space\n</code></pre></section>	https://developer.android.com/reference/android/widget/Space.html
Spinner	A										<section class="prog__container"><p> A view that displays one child at a time and lets the user pick among them. The items in the Spinner come from the <pre><code> <a href="https://developer.android.com/reference/android/widget/Adapter.html"> Adapter </a> </code></pre> associated with this view. <p> See the <a href="https://developer.android.com/guide/topics/ui/controls/spinner.html"> Spinners </a> guide. </p>\n<pre><code>public class Spinner\n</code></pre></section>	https://developer.android.com/reference/android/widget/Spinner.html
SpinnerAdapter	A										<section class="prog__container"><p> Extended <pre><code> <a href="https://developer.android.com/reference/android/widget/Adapter.html"> Adapter </a> </code></pre> that is the bridge between a <pre><code> <a href="https://developer.android.com/reference/android/widget/Spinner.html"> Spinner </a> </code></pre> and its data. A spinner adapter allows to define two different views: one that shows the data in the spinner itself and one that shows the data in the drop down list when the spinner is pressed.</p>\n<pre><code>public interface SpinnerAdapter\nimplements <a href="https://developer.android.com/reference/android/widget/Adapter.html">Adapter</a></code></pre></section>	https://developer.android.com/reference/android/widget/SpinnerAdapter.html
StackView	A										<section class="prog__container"><p> Must be a dimension value, which is a floating point number appended with a unit such as " <pre><code> 14.5sp </code></pre> ".</p>\n<pre><code>public class StackView\n</code></pre></section>	https://developer.android.com/reference/android/widget/StackView.html
Switch	A										<section class="prog__container"><p> A Switch is a two-state toggle switch widget that can select between two options. The user may drag the "thumb" back and forth to choose the selected option, or simply tap to toggle as if it were a checkbox. The <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html#setText(java.lang.CharSequence)"> text </a> </code></pre> property controls the text displayed in the label for the switch, whereas the <pre><code> <a href="https://developer.android.com/reference/android/widget/Switch.html#setTextOff(java.lang.CharSequence)"> off </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/widget/Switch.html#setTextOn(java.lang.CharSequence)"> on </a> </code></pre> text controls the text on the thumb. Similarly, the <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html#setTextAppearance(android.content.Context, int)"> textAppearance </a> </code></pre> and the related setTypeface() methods control the typeface and style of label text, whereas the <pre><code> <a href="https://developer.android.com/reference/android/widget/Switch.html#setSwitchTextAppearance(android.content.Context, int)"> switchTextAppearance </a> </code></pre> and the related setSwitchTypeface() methods control that of the thumb. <p> <pre><code> <a href="https://developer.android.com/reference/android/support/v7/widget/SwitchCompat.html"> SwitchCompat </a> </code></pre> is a version of the Switch widget which runs on devices back to API 7. </p>\n<pre><code>public class Switch\n</code></pre></section>	https://developer.android.com/reference/android/widget/Switch.html
TabHost	A										<section class="prog__container"><p> Container for a tabbed window view. This object holds two children: a set of tab labels that the user clicks to select a specific tab, and a FrameLayout object that displays the contents of that page. The individual elements are typically controlled using this container object, rather than setting values on the child elements themselves.</p>\n<pre><code>public class TabHost\n</code></pre></section>	https://developer.android.com/reference/android/widget/TabHost.html
TabHost.OnTabChangeListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when tab changed</p>\n<pre><code>public static interface TabHost.OnTabChangeListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/TabHost.OnTabChangeListener.html
TabHost.TabContentFactory	A										<section class="prog__container"><p> Makes the content of a tab when it is selected. Use this if your tab content needs to be created on demand, i.e. you are not showing an existing view or starting an activity.</p>\n<pre><code>public static interface TabHost.TabContentFactory\n</code></pre></section>	https://developer.android.com/reference/android/widget/TabHost.TabContentFactory.html
TabHost.TabSpec	A										<section class="prog__container"><p> A tab has a tab indicator, content, and a tag that is used to keep track of it. This builder helps choose among these options. For the tab indicator, your choices are: 1) set a label 2) set a label and an icon For the tab content, your choices are: 1) the id of a <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> 2) a <pre><code> <a href="https://developer.android.com/reference/android/widget/TabHost.TabContentFactory.html"> TabHost.TabContentFactory </a> </code></pre> that creates the <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> content. 3) an <pre><code> <a href="https://developer.android.com/reference/android/content/Intent.html"> Intent </a> </code></pre> that launches an <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity </a> </code></pre> .</p>\n<pre><code>public class TabHost.TabSpec\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/TabHost.TabSpec.html
TableLayout	A										<section class="prog__container"><p> <p> A layout that arranges its children into rows and columns. A TableLayout consists of a number of <pre><code> <a href="https://developer.android.com/reference/android/widget/TableRow.html"> TableRow </a> </code></pre> objects, each defining a row (actually, you can have other children, which will be explained below). TableLayout containers do not display border lines for their rows, columns, or cells. Each row has zero or more cells; each cell can hold one <pre><code> <a href="https://developer.android.com/reference/android/view/View.html"> View </a> </code></pre> object. The table has as many columns as the row with the most cells. A table can leave cells empty. Cells can span columns, as they can in HTML. </p>\n<pre><code>public class TableLayout\n</code></pre></section>	https://developer.android.com/reference/android/widget/TableLayout.html
TableLayout.LayoutParams	A										<section class="prog__container"><p> <p> This set of layout parameters enforces the width of each child to be <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#MATCH_PARENT"> MATCH_PARENT </a> </code></pre> and the height of each child to be <pre><code> <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#WRAP_CONTENT"> WRAP_CONTENT </a> </code></pre> , but only if the height is not specified. </p>\n<pre><code>public static class TableLayout.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/TableLayout.LayoutParams.html
TableRow	A										<section class="prog__container"><p> <p> A layout that arranges its children horizontally. A TableRow should always be used as a child of a <pre><code> <a href="https://developer.android.com/reference/android/widget/TableLayout.html"> TableLayout </a> </code></pre> . If a TableRow's parent is not a TableLayout, the TableRow will behave as an horizontal <pre><code> <a href="https://developer.android.com/reference/android/widget/LinearLayout.html"> LinearLayout </a> </code></pre> . </p>\n<pre><code>public class TableRow\n</code></pre></section>	https://developer.android.com/reference/android/widget/TableRow.html
TableRow.LayoutParams	A										<section class="prog__container"><p> <p> Set of layout parameters used in table rows. </p>\n<pre><code>public static class TableRow.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/TableRow.LayoutParams.html
TabWidget	A										<section class="prog__container"><p> Displays a list of tab labels representing each page in the parent's tab collection. <p> The container object for this widget is <pre><code> <a href="https://developer.android.com/reference/android/widget/TabHost.html"> TabHost </a> </code></pre> . When the user selects a tab, this object sends a message to the parent container, TabHost, to tell it to switch the displayed page. You typically won't use many methods directly on this object. The container TabHost is used to add labels, add the callback handler, and manage callbacks. You might call this object to iterate the list of tabs, or to tweak the layout of the tab list, but most methods should be called on the containing TabHost object. </p>\n<pre><code>public class TabWidget\n</code></pre></section>	https://developer.android.com/reference/android/widget/TabWidget.html
TextClock	A										<section class="prog__container"><p> <p> <pre><code> TextClock </code></pre> can display the current date and/or time as a formatted string. </p>\n<pre><code>public class TextClock\n</code></pre></section>	https://developer.android.com/reference/android/widget/TextClock.html
TextSwitcher	A										<section class="prog__container"><p> Specialized <pre><code> <a href="https://developer.android.com/reference/android/widget/ViewSwitcher.html"> ViewSwitcher </a> </code></pre> that contains only children of type <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html"> TextView </a> </code></pre> . A TextSwitcher is useful to animate a label on screen. Whenever <pre><code> <a href="https://developer.android.com/reference/android/widget/TextSwitcher.html#setText(java.lang.CharSequence)"> setText(CharSequence) </a> </code></pre> is called, TextSwitcher animates the current text out and animates the new text in.</p>\n<pre><code>public class TextSwitcher\n</code></pre></section>	https://developer.android.com/reference/android/widget/TextSwitcher.html
TextView.BufferType	A										<section class="prog__container"><p></p>\n<pre><code>public static final enum TextView.BufferType\n</code></pre></section>	https://developer.android.com/reference/android/widget/TextView.BufferType.html
TextView	A										<section class="prog__container"><p> Displays text to the user and optionally allows them to edit it. A TextView is a complete text editor, however the basic class is configured to not allow editing; see <pre><code> <a href="https://developer.android.com/reference/android/widget/EditText.html"> EditText </a> </code></pre> for a subclass that configures the text view for editing. <p> To allow users to copy some or all of the TextView's value and paste it somewhere else, set the XML attribute <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#TextView_textIsSelectable"> android:textIsSelectable </a> </code></pre> to "true" or call <pre><code> <a href="https://developer.android.com/reference/android/widget/TextView.html#setTextIsSelectable(boolean)"> setTextIsSelectable(true) </a> </code></pre> . The <pre><code> textIsSelectable </code></pre> flag allows users to make selection gestures in the TextView, which in turn triggers the system's built-in copy/paste controls. <p> <b> XML attributes </b> <p> See <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#TextView"> TextView Attributes </a> </code></pre> , <pre><code> <a href="https://developer.android.com/reference/android/R.styleable.html#View"> View Attributes </a> </code></pre> </p>\n<pre><code>public class TextView\n</code></pre></section>	https://developer.android.com/reference/android/widget/TextView.html
TextView.OnEditorActionListener	A										<section class="prog__container"><p> Interface definition for a callback to be invoked when an action is performed on the editor.</p>\n<pre><code>public static interface TextView.OnEditorActionListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/TextView.OnEditorActionListener.html
TextView.SavedState	A										<section class="prog__container"><p> User interface state that is stored by TextView for implementing <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#onSaveInstanceState()"> onSaveInstanceState() </a> </code></pre> .</p>\n<pre><code>public static class TextView.SavedState\n</code></pre></section>	https://developer.android.com/reference/android/widget/TextView.SavedState.html
ThemedSpinnerAdapter	A										<section class="prog__container"><p> An extension of SpinnerAdapter that is capable of inflating drop-down views against a different theme than normal views. <p> Classes that implement this interface should use the theme provided to <pre><code> <a href="https://developer.android.com/reference/android/widget/ThemedSpinnerAdapter.html#setDropDownViewTheme(android.content.res.Resources.Theme)"> setDropDownViewTheme(Theme) </a> </code></pre> when creating views in <pre><code> <a href="https://developer.android.com/reference/android/widget/SpinnerAdapter.html#getDropDownView(int, android.view.View, android.view.ViewGroup)"> getDropDownView(int, View, ViewGroup) </a> </code></pre> . </p>\n<pre><code>public interface ThemedSpinnerAdapter\nimplements <a href="https://developer.android.com/reference/android/widget/SpinnerAdapter.html">SpinnerAdapter</a></code></pre></section>	https://developer.android.com/reference/android/widget/ThemedSpinnerAdapter.html
TimePicker	A										<section class="prog__container"><p> A widget for selecting the time of day, in either 24-hour or AM/PM mode. <p> For a dialog using this view, see <pre><code> <a href="https://developer.android.com/reference/android/app/TimePickerDialog.html"> TimePickerDialog </a> </code></pre> . See the <a href="https://developer.android.com/guide/topics/ui/controls/pickers.html"> Pickers </a> guide for more information. </p>\n<pre><code>public class TimePicker\n</code></pre></section>	https://developer.android.com/reference/android/widget/TimePicker.html
TimePicker.OnTimeChangedListener	A										<section class="prog__container"><p> The callback interface used to indicate the time has been adjusted.</p>\n<pre><code>public static interface TimePicker.OnTimeChangedListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/TimePicker.OnTimeChangedListener.html
Toast	A										<section class="prog__container"><p> A toast is a view containing a quick little message for the user. The toast class helps you create and show those. <p> <p> When the view is shown to the user, appears as a floating view over the application. It will never receive focus. The user will probably be in the middle of typing something else. The idea is to be as unobtrusive as possible, while still showing the user the information you want them to see. Two examples are the volume control, and the brief message saying that your settings have been saved. <p> The easiest way to use this class is to call one of the static methods that constructs everything you need and returns a new Toast object. </p>\n<pre><code>public class Toast\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/Toast.html
ToggleButton	A										<section class="prog__container"><p> Displays checked/unchecked states as a button with a "light" indicator and by default accompanied with the text "ON" or "OFF". <p> See the <a href="https://developer.android.com/guide/topics/ui/controls/togglebutton.html"> Toggle Buttons </a> guide. </p>\n<pre><code>public class ToggleButton\n</code></pre></section>	https://developer.android.com/reference/android/widget/ToggleButton.html
Toolbar	A										<section class="prog__container"><p> A standard toolbar for use within application content. <p> A Toolbar is a generalization of <pre><code> <a href="https://developer.android.com/reference/android/app/ActionBar.html"> action bars </a> </code></pre> for use within application layouts. While an action bar is traditionally part of an <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html"> Activity's </a> </code></pre> opaque window decor controlled by the framework, a Toolbar may be placed at any arbitrary level of nesting within a view hierarchy. An application may choose to designate a Toolbar as the action bar for an Activity using the <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#setActionBar(android.widget.Toolbar)"> setActionBar() </a> </code></pre> method. </p>\n<pre><code>public class Toolbar\n</code></pre></section>	https://developer.android.com/reference/android/widget/Toolbar.html
Toolbar.LayoutParams	A										<section class="prog__container"><p> Layout information for child views of Toolbars. <p> Toolbar.LayoutParams extends ActionBar.LayoutParams for compatibility with existing ActionBar API. See <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#setActionBar(android.widget.Toolbar)"> Activity.setActionBar </a> </code></pre> for more info on how to use a Toolbar as your Activity's ActionBar. </p>\n<pre><code>public static class Toolbar.LayoutParams\n</code></pre></section>	https://developer.android.com/reference/android/widget/Toolbar.LayoutParams.html
Toolbar.OnMenuItemClickListener	A										<section class="prog__container"><p> Interface responsible for receiving menu item click events if the items themselves do not have individual item click listeners.</p>\n<pre><code>public static interface Toolbar.OnMenuItemClickListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/Toolbar.OnMenuItemClickListener.html
TwoLineListItem	A										<section class="prog__container"><p> <p class="caution"> <strong> This class was deprecated in API level 17. </strong> <br/> This class can be implemented easily by apps using a <pre><code> <a href="https://developer.android.com/reference/android/widget/RelativeLayout.html"> RelativeLayout </a> </code></pre> or a <pre><code> <a href="https://developer.android.com/reference/android/widget/LinearLayout.html"> LinearLayout </a> </code></pre> . </p>\n<pre><code>public class TwoLineListItem\n</code></pre></section>	https://developer.android.com/reference/android/widget/TwoLineListItem.html
VideoView	A										<section class="prog__container"><p> Displays a video file. The VideoView class can load images from various sources (such as resources or content providers), takes care of computing its measurement from the video so that it can be used in any layout manager, and provides various display options such as scaling and tinting. <p> <em> Note: VideoView does not retain its full state when going into the background. </em> In particular, it does not restore the current play state, play position, selected tracks, or any subtitle tracks added via <pre><code> <a href="https://developer.android.com/reference/android/widget/VideoView.html#addSubtitleSource(java.io.InputStream, android.media.MediaFormat)"> addSubtitleSource() </a> </code></pre> . Applications should save and restore these on their own in <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#onSaveInstanceState(android.os.Bundle)"> onSaveInstanceState(Bundle) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/app/Activity.html#onRestoreInstanceState(android.os.Bundle)"> onRestoreInstanceState(Bundle) </a> </code></pre> . <p> Also note that the audio session id (from <pre><code> <a href="https://developer.android.com/reference/android/widget/VideoView.html#getAudioSessionId()"> getAudioSessionId() </a> </code></pre> ) may change from its previously returned value when the VideoView is restored. </p>\n<pre><code>public class VideoView\n</code></pre></section>	https://developer.android.com/reference/android/widget/VideoView.html
ViewAnimator	A										<section class="prog__container"><p> Base class for a <pre><code> <a href="https://developer.android.com/reference/android/widget/FrameLayout.html"> FrameLayout </a> </code></pre> container that will perform animations when switching between its views.</p>\n<pre><code>public class ViewAnimator\n</code></pre></section>	https://developer.android.com/reference/android/widget/ViewAnimator.html
ViewFlipper	A										<section class="prog__container"><p> Simple <pre><code> <a href="https://developer.android.com/reference/android/widget/ViewAnimator.html"> ViewAnimator </a> </code></pre> that will animate between two or more views that have been added to it. Only one child is shown at a time. If requested, can automatically flip between each child at a regular interval.</p>\n<pre><code>public class ViewFlipper\n</code></pre></section>	https://developer.android.com/reference/android/widget/ViewFlipper.html
ViewSwitcher	A										<section class="prog__container"><p> <pre><code> <a href="https://developer.android.com/reference/android/widget/ViewAnimator.html"> ViewAnimator </a> </code></pre> that switches between two views, and has a factory from which these views are created. You can either use the factory to create the views, or add them yourself. A ViewSwitcher can only have two child views, of which only one is shown at a time.</p>\n<pre><code>public class ViewSwitcher\n</code></pre></section>	https://developer.android.com/reference/android/widget/ViewSwitcher.html
ViewSwitcher.ViewFactory	A										<section class="prog__container"><p> Creates views in a ViewSwitcher.</p>\n<pre><code>public static interface ViewSwitcher.ViewFactory\n</code></pre></section>	https://developer.android.com/reference/android/widget/ViewSwitcher.ViewFactory.html
WrapperListAdapter	A										<section class="prog__container"><p> List adapter that wraps another list adapter. The wrapped adapter can be retrieved by calling <pre><code> <a href="https://developer.android.com/reference/android/widget/WrapperListAdapter.html#getWrappedAdapter()"> getWrappedAdapter() </a> </code></pre> .</p>\n<pre><code>public interface WrapperListAdapter\nimplements <a href="https://developer.android.com/reference/android/widget/ListAdapter.html">ListAdapter</a></code></pre></section>	https://developer.android.com/reference/android/widget/WrapperListAdapter.html
ZoomButton	A										<section class="prog__container"><p> Must be a dimension value, which is a floating point number appended with a unit such as " <pre><code> 14.5sp </code></pre> ".</p>\n<pre><code>public class ZoomButton\n</code></pre></section>	https://developer.android.com/reference/android/widget/ZoomButton.html
ZoomButtonsController	A										<section class="prog__container"><p> The <pre><code> <a href="https://developer.android.com/reference/android/widget/ZoomButtonsController.html"> ZoomButtonsController </a> </code></pre> handles showing and hiding the zoom controls and positioning it relative to an owner view. It also gives the client access to the zoom controls container, allowing for additional accessory buttons to be shown in the zoom controls window. <p> Typically, clients should call <pre><code> <a href="https://developer.android.com/reference/android/widget/ZoomButtonsController.html#setVisible(boolean)"> setVisible(true) </a> </code></pre> on a touch down or move (no need to call <pre><code> <a href="https://developer.android.com/reference/android/widget/ZoomButtonsController.html#setVisible(boolean)"> setVisible(false) </a> </code></pre> since it will time out on its own). Also, whenever the owner cannot be zoomed further, the client should update <pre><code> <a href="https://developer.android.com/reference/android/widget/ZoomButtonsController.html#setZoomInEnabled(boolean)"> setZoomInEnabled(boolean) </a> </code></pre> and <pre><code> <a href="https://developer.android.com/reference/android/widget/ZoomButtonsController.html#setZoomOutEnabled(boolean)"> setZoomOutEnabled(boolean) </a> </code></pre> . <p> If you are using this with a custom View, please call <pre><code> <a href="https://developer.android.com/reference/android/widget/ZoomButtonsController.html#setVisible(boolean)"> setVisible(false) </a> </code></pre> from <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#onDetachedFromWindow()"> onDetachedFromWindow() </a> </code></pre> and from <pre><code> <a href="https://developer.android.com/reference/android/view/View.html#onVisibilityChanged(android.view.View, int)"> onVisibilityChanged(View, int) </a> </code></pre> when <pre><code> visibility != View.VISIBLE </code></pre> . </p>\n<pre><code>public class ZoomButtonsController\nextends <a href="https://developer.android.com/reference/java/lang/Object.html">Object</a></code></pre></section>	https://developer.android.com/reference/android/widget/ZoomButtonsController.html
ZoomButtonsController.OnZoomListener	A										<section class="prog__container"><p> Interface that will be called when the user performs an interaction that triggers some action, for example zooming.</p>\n<pre><code>public static interface ZoomButtonsController.OnZoomListener\n</code></pre></section>	https://developer.android.com/reference/android/widget/ZoomButtonsController.OnZoomListener.html
ZoomControls	A										<section class="prog__container"><p> The <pre><code> ZoomControls </code></pre> class displays a simple set of controls used for zooming and provides callbacks to register for events.</p>\n<pre><code>public class ZoomControls\n</code></pre></section>	https://developer.android.com/reference/android/widget/ZoomControls.html
